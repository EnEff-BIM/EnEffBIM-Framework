// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simgeom.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::OuterCurve (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OuterCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OuterCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterCurve (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OuterCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OuterCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerCurves (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerCurves (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerCurves (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerCurves (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerCurves (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerCurves (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerCurves (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerCurves (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerCurves (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerCurves (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerCurves (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerCurves (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::InnerCurves (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InnerCurves" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerCurves",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerCurves (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InnerCurves" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerCurves",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Curve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Curve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Curve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Curve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Curve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Curve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Curve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Curve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Curve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Curve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Curve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Curve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Curve (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Curve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Curve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Curve (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Curve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Curve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Axis1 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Axis1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis1 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Axis1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Axis2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Axis2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Axis2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LocalOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LocalOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LocalOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LocalOrigin (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LocalOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LocalOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LocalOrigin (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LocalOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LocalOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LocalOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LocalOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LocalOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::LocalOrigin (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LocalOrigin" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalOrigin",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LocalOrigin (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LocalOrigin" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalOrigin",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Scale (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scale" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scale",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Scale" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scale",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Coordinates (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Coordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Coordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Coordinates (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Coordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Coordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::Coordinates (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Coordinates" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Coordinates",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Coordinates" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Coordinates",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Scale2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scale2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scale2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Scale2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scale2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Axis3 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Axis3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis3 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Axis3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Scale3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Scale3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Scale3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Scale3 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scale3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scale3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Scale3 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Scale3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scale3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (const ::std::string& u,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (const ::std::string& u,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (const ::std::string& u,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::std::istream& is,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::std::istream& is,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::std::istream& is,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::xercesc::InputSource& i,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::xercesc::InputSource& i,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::xercesc::InputSource& i,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (const ::xercesc::DOMDocument& doc,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_PlaneTransform (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimCartesianTransformOperator_PlaneTransform" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimCartesianTransformOperator_PlaneTransform",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimCartesianTransformOperator_PlaneTransform (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimCartesianTransformOperator_PlaneTransform" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimCartesianTransformOperator_PlaneTransform",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (const ::std::string& u,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (const ::std::string& u,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (const ::std::string& u,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::std::istream& is,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::std::istream& is,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::std::istream& is,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::std::istream& is,
                                                        const ::std::string& sid,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::std::istream& is,
                                                        const ::std::string& sid,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::std::istream& is,
                                                        const ::std::string& sid,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::xercesc::InputSource& i,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::xercesc::InputSource& i,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::xercesc::InputSource& i,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (const ::xercesc::DOMDocument& doc,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_CurrentAspectRatio (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimCartesianTransformOperator_CurrentAspectRatio" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimCartesianTransformOperator_CurrentAspectRatio",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_CurrentAspectRatio (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimCartesianTransformOperator_CurrentAspectRatio" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimCartesianTransformOperator_CurrentAspectRatio",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (const ::std::string& u,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (const ::std::string& u,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (const ::std::string& u,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::std::istream& is,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::std::istream& is,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::std::istream& is,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::std::istream& is,
                                                    const ::std::string& sid,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::xercesc::InputSource& i,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::xercesc::InputSource& i,
                                                    ::xml_schema::error_handler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::xercesc::InputSource& i,
                                                    ::xercesc::DOMErrorHandler& h,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (const ::xercesc::DOMDocument& doc,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimCartesianTransformOperator_NewAspectRatio (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimCartesianTransformOperator_NewAspectRatio" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimCartesianTransformOperator_NewAspectRatio",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimCartesianTransformOperator_NewAspectRatio (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                    ::xml_schema::flags f,
                                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimCartesianTransformOperator_NewAspectRatio" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimCartesianTransformOperator_NewAspectRatio",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Profiles (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Profiles (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Profiles (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Profiles (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Profiles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Profiles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Profiles (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Profiles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Profiles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Profiles (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Profiles (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Profiles (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Profiles (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Profiles" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Profiles",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Profiles (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Profiles" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Profiles",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Label (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Label (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Label (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Label (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Label (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Label (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Label (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Label (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Label (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Label (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Label (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Label (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::Label (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Label" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Label",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Label (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Label" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Label",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::CfsFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::CfsFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::CfsFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CfsFaces (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CfsFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CfsFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CfsFaces (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CfsFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CfsFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::CfsFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::CfsFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::CfsFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::CfsFaces (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CfsFaces" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CfsFaces",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      CfsFaces (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CfsFaces" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CfsFaces",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeStart (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeStart (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeStart (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeStart (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeStart (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeStart (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeStart (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeStart (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeStart (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeStart (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeStart (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeStart (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::EdgeStart (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EdgeStart" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeStart",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeStart (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EdgeStart" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeStart",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeEnd (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeEnd (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeEnd (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeEnd (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeEnd (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeEnd (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeEnd (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeEnd (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeEnd (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeEnd (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeEnd (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeEnd (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::EdgeEnd (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EdgeEnd" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeEnd",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeEnd (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EdgeEnd" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeEnd",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeElement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeElement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::EdgeElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::EdgeElement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EdgeElement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeElement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      EdgeElement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EdgeElement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeElement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Orientation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Orientation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Orientation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Orientation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Orientation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Orientation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Orientation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Orientation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Orientation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Orientation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Orientation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Orientation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::ResourcesGeometry::Orientation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Orientation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Orientation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Orientation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Orientation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Orientation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentEdge (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentEdge (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentEdge (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ParentEdge (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ParentEdge (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ParentEdge (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ParentEdge (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ParentEdge (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ParentEdge (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentEdge (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentEdge (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentEdge (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::ParentEdge (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ParentEdge" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParentEdge",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentEdge (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ParentEdge" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParentEdge",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Bounds (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Bounds (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Bounds (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Bounds (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Bounds (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Bounds (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Bounds (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Bounds (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Bounds (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Bounds (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Bounds (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Bounds (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Bounds (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Bounds" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Bounds",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Bounds (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Bounds" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Bounds",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FaceSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FaceSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FaceSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FaceSurface (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FaceSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FaceSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FaceSurface (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FaceSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FaceSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FaceSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FaceSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FaceSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::FaceSurface (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FaceSurface" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FaceSurface",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FaceSurface (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FaceSurface" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FaceSurface",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SameSense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SameSense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SameSense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SameSense (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SameSense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SameSense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SameSense (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SameSense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SameSense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SameSense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SameSense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SameSense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::ResourcesGeometry::SameSense (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SameSense" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SameSense",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SameSense (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SameSense" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SameSense",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Bound (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Bound (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Bound (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Bound (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Bound (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Bound (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Bound (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Bound (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Bound (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Bound (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Bound (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Bound (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Bound (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Bound" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Bound",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Bound (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Bound" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Bound",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ObjectType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ObjectType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::ObjectType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ObjectPlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ObjectPlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ObjectPlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ObjectPlacement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ObjectPlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ObjectPlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ObjectPlacement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ObjectPlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ObjectPlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ObjectPlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ObjectPlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ObjectPlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::ObjectPlacement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectPlacement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectPlacement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectPlacement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectPlacement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectPlacement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Representation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Representation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Representation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Representation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Representation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Representation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Representation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Representation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Representation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Representation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Representation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Representation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Representation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Representation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Representation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Representation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Representation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Representation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Tag (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Tag (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::Tag (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Tag" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Tag",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Tag" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Tag",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (const ::xercesc::DOMDocument& doc,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowExp (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_AirMassFlowExp" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_AirMassFlowExp",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowExp (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_AirMassFlowExp" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_AirMassFlowExp",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (const ::xercesc::DOMDocument& doc,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_EffecLeakageArea (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_EffecLeakageArea" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_EffecLeakageArea",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_EffecLeakageArea (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_EffecLeakageArea" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_EffecLeakageArea",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_DischargeCoef (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_DischargeCoef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_DischargeCoef",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_DischargeCoef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_DischargeCoef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_DischargeCoef",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (const ::xercesc::DOMDocument& doc,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefPressureDiff (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_RefPressureDiff" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_RefPressureDiff",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_RefPressureDiff (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_RefPressureDiff" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_RefPressureDiff",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (const ::xercesc::DOMDocument& doc,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlMode (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_VentCntlMode" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_VentCntlMode",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimFeatureAirFlowNetwk_VentCntlMode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_VentCntlMode" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_VentCntlMode",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (const ::std::string& u,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (const ::std::string& u,
                                                                ::xml_schema::error_handler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (const ::std::string& u,
                                                                ::xercesc::DOMErrorHandler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::std::istream& is,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::std::istream& is,
                                                                ::xml_schema::error_handler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::std::istream& is,
                                                                ::xercesc::DOMErrorHandler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::std::istream& is,
                                                                const ::std::string& sid,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::std::istream& is,
                                                                const ::std::string& sid,
                                                                ::xml_schema::error_handler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::std::istream& is,
                                                                const ::std::string& sid,
                                                                ::xercesc::DOMErrorHandler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::xercesc::InputSource& i,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::xercesc::InputSource& i,
                                                                ::xml_schema::error_handler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::xercesc::InputSource& i,
                                                                ::xercesc::DOMErrorHandler& h,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (const ::xercesc::DOMDocument& doc,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                                ::xml_schema::flags f,
                                                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_VentCntlZoneTempSetpointSchedName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (const ::std::string& u,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (const ::std::string& u,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (const ::std::string& u,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::std::istream& is,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::std::istream& is,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::xercesc::InputSource& i,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::xercesc::InputSource& i,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::xercesc::InputSource& i,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (const ::xercesc::DOMDocument& doc,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_MinVentOpenFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_MinVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_MinVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_MinVentOpenFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_MinVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_MinVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (const ::std::string& u,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (const ::std::string& u,
                                                                             ::xml_schema::error_handler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (const ::std::string& u,
                                                                             ::xercesc::DOMErrorHandler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                             ::xml_schema::error_handler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                             ::xercesc::DOMErrorHandler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                             const ::std::string& sid,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                             const ::std::string& sid,
                                                                             ::xml_schema::error_handler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                             const ::std::string& sid,
                                                                             ::xercesc::DOMErrorHandler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::xercesc::InputSource& i,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::xercesc::InputSource& i,
                                                                             ::xml_schema::error_handler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::xercesc::InputSource& i,
                                                                             ::xercesc::DOMErrorHandler& h,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (const ::xercesc::DOMDocument& doc,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                                             ::xml_schema::flags f,
                                                                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrTempDiffLowLimitForMaxVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (const ::std::string& u,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (const ::std::string& u,
                                                                            ::xml_schema::error_handler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (const ::std::string& u,
                                                                            ::xercesc::DOMErrorHandler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                            ::xml_schema::error_handler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                            ::xercesc::DOMErrorHandler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                            const ::std::string& sid,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                            const ::std::string& sid,
                                                                            ::xml_schema::error_handler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                            const ::std::string& sid,
                                                                            ::xercesc::DOMErrorHandler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::xercesc::InputSource& i,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::xercesc::InputSource& i,
                                                                            ::xml_schema::error_handler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::xercesc::InputSource& i,
                                                                            ::xercesc::DOMErrorHandler& h,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (const ::xercesc::DOMDocument& doc,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                                            ::xml_schema::flags f,
                                                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrTempDiffUpLimitForMinVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (const ::std::string& u,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (const ::std::string& u,
                                                                                 ::xml_schema::error_handler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (const ::std::string& u,
                                                                                 ::xercesc::DOMErrorHandler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                                 ::xml_schema::error_handler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                                 ::xercesc::DOMErrorHandler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                                 const ::std::string& sid,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                                 const ::std::string& sid,
                                                                                 ::xml_schema::error_handler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::std::istream& is,
                                                                                 const ::std::string& sid,
                                                                                 ::xercesc::DOMErrorHandler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::xercesc::InputSource& i,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::xercesc::InputSource& i,
                                                                                 ::xml_schema::error_handler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::xercesc::InputSource& i,
                                                                                 ::xercesc::DOMErrorHandler& h,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (const ::xercesc::DOMDocument& doc,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                                                 ::xml_schema::flags f,
                                                                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffLowLimitForMaxVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (const ::std::string& u,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (const ::std::string& u,
                                                                                ::xml_schema::error_handler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (const ::std::string& u,
                                                                                ::xercesc::DOMErrorHandler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                                ::xml_schema::error_handler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                                ::xercesc::DOMErrorHandler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                                const ::std::string& sid,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                                const ::std::string& sid,
                                                                                ::xml_schema::error_handler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::std::istream& is,
                                                                                const ::std::string& sid,
                                                                                ::xercesc::DOMErrorHandler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::xercesc::InputSource& i,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::xercesc::InputSource& i,
                                                                                ::xml_schema::error_handler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::xercesc::InputSource& i,
                                                                                ::xercesc::DOMErrorHandler& h,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (const ::xercesc::DOMDocument& doc,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                                                ::xml_schema::flags f,
                                                                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_door_OutdrEnthalpyDiffUpLimitForMinVentOpenFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (const ::std::string& u,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (const ::std::string& u,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (const ::std::string& u,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::std::istream& is,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::std::istream& is,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::xercesc::InputSource& i,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::xercesc::InputSource& i,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::xercesc::InputSource& i,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (const ::xercesc::DOMDocument& doc,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_VentAvailSchedName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_VentAvailSchedName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_VentAvailSchedName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_VentAvailSchedName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_VentAvailSchedName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_VentAvailSchedName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (const ::xercesc::DOMDocument& doc,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_SurfName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_SurfName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_SurfName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_SurfName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_SurfName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_SurfName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (const ::std::string& u,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (const ::std::string& u,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (const ::std::string& u,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::std::istream& is,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::std::istream& is,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::std::istream& is,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::std::istream& is,
                                              const ::std::string& sid,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::xercesc::InputSource& i,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::xercesc::InputSource& i,
                                              ::xml_schema::error_handler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::xercesc::InputSource& i,
                                              ::xercesc::DOMErrorHandler& h,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (const ::xercesc::DOMDocument& doc,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_LeakageCompName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_LeakageCompName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_LeakageCompName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_LeakageCompName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                              ::xml_schema::flags f,
                                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_LeakageCompName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_LeakageCompName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (const ::std::string& u,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (const ::std::string& u,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (const ::std::string& u,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::std::istream& is,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::std::istream& is,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::std::istream& is,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::std::istream& is,
                                               const ::std::string& sid,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::xercesc::InputSource& i,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::xercesc::InputSource& i,
                                               ::xml_schema::error_handler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::xercesc::InputSource& i,
                                               ::xercesc::DOMErrorHandler& h,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (const ::xercesc::DOMDocument& doc,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ExternalNodeName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_ExternalNodeName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_ExternalNodeName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ExternalNodeName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                               ::xml_schema::flags f,
                                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_ExternalNodeName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_ExternalNodeName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (const ::std::string& u,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (const ::std::string& u,
                                                              ::xml_schema::error_handler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (const ::std::string& u,
                                                              ::xercesc::DOMErrorHandler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::std::istream& is,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::std::istream& is,
                                                              ::xml_schema::error_handler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::std::istream& is,
                                                              ::xercesc::DOMErrorHandler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::std::istream& is,
                                                              const ::std::string& sid,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::std::istream& is,
                                                              const ::std::string& sid,
                                                              ::xml_schema::error_handler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::std::istream& is,
                                                              const ::std::string& sid,
                                                              ::xercesc::DOMErrorHandler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::xercesc::InputSource& i,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::xercesc::InputSource& i,
                                                              ::xml_schema::error_handler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::xercesc::InputSource& i,
                                                              ::xercesc::DOMErrorHandler& h,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (const ::xercesc::DOMDocument& doc,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                              ::xml_schema::flags f,
                                                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_WndwDoorOpngFactorOrCrackFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (const ::std::string& u,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (const ::std::string& u,
                                                       ::xml_schema::error_handler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (const ::std::string& u,
                                                       ::xercesc::DOMErrorHandler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::std::istream& is,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::std::istream& is,
                                                       ::xml_schema::error_handler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::std::istream& is,
                                                       ::xercesc::DOMErrorHandler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::std::istream& is,
                                                       const ::std::string& sid,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::std::istream& is,
                                                       const ::std::string& sid,
                                                       ::xml_schema::error_handler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::std::istream& is,
                                                       const ::std::string& sid,
                                                       ::xercesc::DOMErrorHandler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::xercesc::InputSource& i,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::xercesc::InputSource& i,
                                                       ::xml_schema::error_handler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::xercesc::InputSource& i,
                                                       ::xercesc::DOMErrorHandler& h,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (const ::xercesc::DOMDocument& doc,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                       ::xml_schema::flags f,
                                                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (const ::xercesc::DOMDocument& doc,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_RefCrackCond (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_RefCrackCond" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_RefCrackCond",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_RefCrackCond (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_RefCrackCond" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_RefCrackCond",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (const ::xercesc::DOMDocument& doc,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Airflow_MZone_RefCrackCond_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Airflow_MZone_RefCrackCond_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Airflow_MZone_RefCrackCond_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefTemp (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Airflow_MZone_RefCrackCond_RefTemp" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_RefTemp",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefTemp (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Airflow_MZone_RefCrackCond_RefTemp" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_RefTemp",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (const ::std::string& u,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (const ::std::string& u,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (const ::std::string& u,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::std::istream& is,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::std::istream& is,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::std::istream& is,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::std::istream& is,
                                                        const ::std::string& sid,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::std::istream& is,
                                                        const ::std::string& sid,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::std::istream& is,
                                                        const ::std::string& sid,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::xercesc::InputSource& i,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::xercesc::InputSource& i,
                                                        ::xml_schema::error_handler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::xercesc::InputSource& i,
                                                        ::xercesc::DOMErrorHandler& h,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (const ::xercesc::DOMDocument& doc,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefBarometricPressure (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Airflow_MZone_RefCrackCond_RefBarometricPressure" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_RefBarometricPressure",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefBarometricPressure (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                        ::xml_schema::flags f,
                                                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Airflow_MZone_RefCrackCond_RefBarometricPressure" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_RefBarometricPressure",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (const ::std::string& u,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (const ::std::string& u,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (const ::std::string& u,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::std::istream& is,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::std::istream& is,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::std::istream& is,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::std::istream& is,
                                                const ::std::string& sid,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::xercesc::InputSource& i,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::xercesc::InputSource& i,
                                                ::xml_schema::error_handler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::xercesc::InputSource& i,
                                                ::xercesc::DOMErrorHandler& h,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (const ::xercesc::DOMDocument& doc,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Airflow_MZone_RefCrackCond_RefHumidRatio (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Airflow_MZone_RefCrackCond_RefHumidRatio" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_RefHumidRatio",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Airflow_MZone_RefCrackCond_RefHumidRatio (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                ::xml_schema::flags f,
                                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Airflow_MZone_RefCrackCond_RefHumidRatio" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Airflow_MZone_RefCrackCond_RefHumidRatio",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (const ::xercesc::DOMDocument& doc,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwk_ZoneName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimFeatureAirFlowNetwk_ZoneName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_ZoneName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SimFeatureAirFlowNetwk_ZoneName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimFeatureAirFlowNetwk_ZoneName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimFeatureAirFlowNetwk_ZoneName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FeatureLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FeatureLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FeatureLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FeatureLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FeatureLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FeatureLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FeatureLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FeatureLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FeatureLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FeatureLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FeatureLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FeatureLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::FeatureLength (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FeatureLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FeatureLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FeatureLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FeatureLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FeatureLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningHeight (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningHeight (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OpeningHeight (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OpeningHeight" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningHeight",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningHeight (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OpeningHeight" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningHeight",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OpeningWidth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OpeningWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningWidth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningWidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OpeningWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningWidth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningDepth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningDepth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OpeningDepth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OpeningDepth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningDepth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningDepth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OpeningDepth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningDepth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningPerimeter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningPerimeter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningPerimeter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningPerimeter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningPerimeter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningPerimeter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OpeningPerimeter (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OpeningPerimeter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningPerimeter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningPerimeter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OpeningPerimeter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningPerimeter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningArea (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningArea (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OpeningArea (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OpeningArea" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningArea",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningArea (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OpeningArea" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningArea",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningVolume (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningVolume (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningVolume (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningVolume (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningVolume (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OpeningVolume (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningVolume (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningVolume (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OpeningVolume (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningVolume (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningVolume (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OpeningVolume (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OpeningVolume (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OpeningVolume" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningVolume",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OpeningVolume (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OpeningVolume" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OpeningVolume",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::TypeDefinition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::TypeDefinition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::TypeDefinition (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TypeDefinition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TypeDefinition",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TypeDefinition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TypeDefinition",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Placement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Placement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Placement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Placement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Placement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Placement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Placement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::GeometricRepresentations (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::GeometricRepresentations (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::GeometricRepresentations (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GeometricRepresentations" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GeometricRepresentations",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "GeometricRepresentations" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GeometricRepresentations",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::VoidedBldgElement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::VoidedBldgElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::VoidedBldgElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::VoidedBldgElement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::VoidedBldgElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::VoidedBldgElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::VoidedBldgElement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "VoidedBldgElement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "VoidedBldgElement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      VoidedBldgElement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "VoidedBldgElement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "VoidedBldgElement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Operator (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Operator (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Operator (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Operator (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Operator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Operator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Operator (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Operator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Operator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Operator (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Operator (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Operator (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::Operator (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Operator" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Operator",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Operator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Operator" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Operator",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FirstOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FirstOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FirstOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FirstOperand (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FirstOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FirstOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FirstOperand (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FirstOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FirstOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FirstOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FirstOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::FirstOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::FirstOperand (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FirstOperand" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FirstOperand",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      FirstOperand (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FirstOperand" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FirstOperand",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SecondOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SecondOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SecondOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SecondOperand (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SecondOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SecondOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SecondOperand (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SecondOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SecondOperand (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SecondOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SecondOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SecondOperand (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SecondOperand (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SecondOperand" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SecondOperand",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SecondOperand (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SecondOperand" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SecondOperand",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Corner (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Corner (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Corner (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Corner (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Corner (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Corner (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Corner (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Corner (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Corner (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Corner (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Corner (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Corner (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Corner (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Corner" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Corner",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Corner (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Corner" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Corner",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::XDim (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::XDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::XDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::XDim (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::XDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::XDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::XDim (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "XDim" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDim",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDim (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "XDim" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDim",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::YDim (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::YDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::YDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::YDim (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::YDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::YDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::YDim (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "YDim" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "YDim",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YDim (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "YDim" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "YDim",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ZDim (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ZDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ZDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ZDim (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ZDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ZDim (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZDim (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::ZDim (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ZDim" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZDim",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZDim (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ZDim" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZDim",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Position (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Position (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Position (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Position (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Position (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Position (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Position (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Position (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Position (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Position (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Position (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Position (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Position (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Position" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Position",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Position (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Position" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Position",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::XLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::XLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::XLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::XLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::XLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::XLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::XLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::XLength (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "XLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "XLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::YLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::YLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::YLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::YLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::YLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::YLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::YLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::YLength (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "YLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "YLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      YLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "YLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "YLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ZLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ZLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ZLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ZLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ZLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ZLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::ZLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::ZLength (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ZLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      ZLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ZLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZLength",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Height (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Height (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Height (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Height (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Height (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Height (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Height (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Height (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Height (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Height (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Height (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Height (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Height (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Height" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Height",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Height (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Height" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Height",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::BottomRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::BottomRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::BottomRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BottomRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BottomRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BottomRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BottomRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BottomRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BottomRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::BottomRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::BottomRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::BottomRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::BottomRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "BottomRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BottomRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      BottomRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "BottomRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BottomRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Radius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Radius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Radius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Radius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Radius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Radius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Radius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Radius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Radius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Radius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Radius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Radius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Radius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Radius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Radius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Radius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Radius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Radius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Segments (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Segments (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Segments (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Segments (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Segments (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Segments (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Segments (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Segments (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Segments (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Segments (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Segments (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Segments (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Segments (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Segments" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Segments",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Segments (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Segments" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Segments",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::ResourcesGeometry::SelfIntersect (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::ResourcesGeometry::SelfIntersect (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::ResourcesGeometry::SelfIntersect (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SelfIntersect (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SelfIntersect (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SelfIntersect (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SelfIntersect (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SelfIntersect (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SelfIntersect (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::ResourcesGeometry::SelfIntersect (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::ResourcesGeometry::SelfIntersect (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::ResourcesGeometry::SelfIntersect (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
            ::schema::simxml::ResourcesGeometry::SelfIntersect (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SelfIntersect" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::logical, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SelfIntersect",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      SelfIntersect (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SelfIntersect" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::logical, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SelfIntersect",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Transition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Transition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Transition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Transition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Transition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Transition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Transition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Transition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Transition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Transition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Transition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::Transition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::Transition (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Transition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Transition",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Transition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Transition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Transition",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ParentCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ParentCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ParentCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ParentCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ParentCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ParentCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ParentCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::ParentCurve (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ParentCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParentCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ParentCurve (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ParentCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParentCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SemiAxis1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SemiAxis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SemiAxis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SemiAxis1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SemiAxis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SemiAxis1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SemiAxis1 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SemiAxis1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SemiAxis1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis1 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SemiAxis1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SemiAxis1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SemiAxis2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SemiAxis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SemiAxis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SemiAxis2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SemiAxis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SemiAxis2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SemiAxis2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SemiAxis2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SemiAxis2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SemiAxis2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SemiAxis2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SemiAxis2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SemiAxis2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Pnt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Pnt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Pnt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Pnt (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Pnt (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Pnt (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Pnt (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Pnt (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Pnt (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Pnt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Pnt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Pnt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Pnt (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Pnt" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Pnt",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Pnt (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Pnt" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Pnt",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Dir (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Dir (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Dir (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Dir (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Dir (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Dir (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Dir (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Dir (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Dir (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Dir (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Dir (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Dir (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Dir (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Dir" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Dir",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Dir (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Dir" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Dir",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BasisCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BasisCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BasisCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BasisCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BasisCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BasisCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::BasisCurve (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "BasisCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BasisCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisCurve (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "BasisCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BasisCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Distance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Distance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Distance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Distance (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Distance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Distance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Distance (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Distance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Distance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Distance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Distance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Distance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Distance (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Distance" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Distance",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Distance (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Distance" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Distance",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::RefDirection (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::RefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::RefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::RefDirection (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::RefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::RefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::RefDirection (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RefDirection" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RefDirection",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RefDirection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RefDirection" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RefDirection",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Points (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Points (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Points (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Points (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Points (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Points (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Points (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Points (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Points (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Points (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Points (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Points (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Points (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Points" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Points",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Points (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Points" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Points",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim1_Parameter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim1_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim1_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim1_Parameter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim1_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim1_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Trim1_Parameter (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Trim1_Parameter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim1_Parameter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim1_Parameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Trim1_Parameter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim1_Parameter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Trim1_Cartesian (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Trim1_Cartesian" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim1_Cartesian",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim1_Cartesian (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Trim1_Cartesian" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim1_Cartesian",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SenseAgreement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SenseAgreement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SenseAgreement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SenseAgreement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SenseAgreement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SenseAgreement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SenseAgreement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SenseAgreement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SenseAgreement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SenseAgreement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SenseAgreement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::SenseAgreement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::ResourcesGeometry::SenseAgreement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SenseAgreement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SenseAgreement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      SenseAgreement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SenseAgreement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SenseAgreement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::MasterRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::MasterRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::MasterRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MasterRepresentation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MasterRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MasterRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MasterRepresentation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MasterRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MasterRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::MasterRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::MasterRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::MasterRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::MasterRepresentation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MasterRepresentation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MasterRepresentation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      MasterRepresentation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MasterRepresentation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MasterRepresentation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Trim2_Cartesian (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Trim2_Cartesian" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim2_Cartesian",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Trim2_Cartesian (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Trim2_Cartesian" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim2_Cartesian",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim2_Parameter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim2_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Trim2_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim2_Parameter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim2_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Trim2_Parameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Trim2_Parameter (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Trim2_Parameter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim2_Parameter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Trim2_Parameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Trim2_Parameter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Trim2_Parameter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BaseSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BaseSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BaseSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BaseSurface (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BaseSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BaseSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BaseSurface (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BaseSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BaseSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BaseSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BaseSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BaseSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::BaseSurface (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "BaseSurface" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BaseSurface",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BaseSurface (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "BaseSurface" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BaseSurface",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::AgreementFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::AgreementFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::AgreementFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::AgreementFlag (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::AgreementFlag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::AgreementFlag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::AgreementFlag (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::AgreementFlag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::AgreementFlag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::AgreementFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::AgreementFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::AgreementFlag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::ResourcesGeometry::AgreementFlag (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "AgreementFlag" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AgreementFlag",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      AgreementFlag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "AgreementFlag" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AgreementFlag",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Enclosure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Enclosure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Enclosure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Enclosure (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Enclosure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Enclosure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Enclosure (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Enclosure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Enclosure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Enclosure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Enclosure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Enclosure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Enclosure (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Enclosure" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Enclosure",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Enclosure (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Enclosure" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Enclosure",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PolygonalBoundary (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PolygonalBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PolygonalBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PolygonalBoundary (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PolygonalBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PolygonalBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::PolygonalBoundary (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PolygonalBoundary" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PolygonalBoundary",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PolygonalBoundary (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PolygonalBoundary" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PolygonalBoundary",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::Coordinates_MeasureValue (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Coordinates_MeasureValue" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Coordinates_MeasureValue",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      Coordinates_MeasureValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Coordinates_MeasureValue" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Coordinates_MeasureValue",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameter (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameter (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameter (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::PointParameter (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PointParameter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PointParameter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameter (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PointParameter" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PointParameter",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BasisSurface (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BasisSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::BasisSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BasisSurface (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BasisSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::BasisSurface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::BasisSurface (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::BasisSurface (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "BasisSurface" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BasisSurface",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      BasisSurface (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "BasisSurface" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BasisSurface",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterU (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterU (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterU (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameterU (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameterU (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameterU (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameterU (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameterU (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameterU (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterU (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterU (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterU (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::PointParameterU (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PointParameterU" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PointParameterU",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterU (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PointParameterU" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PointParameterU",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterV (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterV (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterV (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameterV (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameterV (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PointParameterV (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameterV (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameterV (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PointParameterV (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterV (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterV (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::PointParameterV (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::PointParameterV (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PointParameterV" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PointParameterV",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      PointParameterV (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PointParameterV" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PointParameterV",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Elements (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Elements (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Elements (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Elements (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Elements (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Elements (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Elements (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Elements (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Elements (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Elements (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Elements (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Elements (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Elements (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Elements" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Elements",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Elements (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Elements" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Elements",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TreeRootExpression (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TreeRootExpression (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TreeRootExpression (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::TreeRootExpression (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::TreeRootExpression (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::TreeRootExpression (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::TreeRootExpression (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::TreeRootExpression (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::TreeRootExpression (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TreeRootExpression (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TreeRootExpression (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::TreeRootExpression (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::TreeRootExpression (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TreeRootExpression" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TreeRootExpression",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TreeRootExpression (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TreeRootExpression" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TreeRootExpression",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Outer (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Outer (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Outer (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Outer (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Outer (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Outer (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Outer (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Outer (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Outer (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Outer (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Outer (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Outer (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Outer (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Outer" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Outer",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Outer (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Outer" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Outer",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Voids (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Voids (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Voids (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Voids (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Voids (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Voids (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Voids (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Voids (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Voids (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Voids (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Voids (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Voids (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Voids (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Voids" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Voids",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Voids (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Voids" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Voids",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SweptArea (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SweptArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SweptArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SweptArea (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SweptArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SweptArea (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptArea (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SweptArea (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SweptArea" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SweptArea",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptArea (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SweptArea" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SweptArea",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ExtrudedDirection (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ExtrudedDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ExtrudedDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ExtrudedDirection (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ExtrudedDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ExtrudedDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::ExtrudedDirection (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ExtrudedDirection" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ExtrudedDirection",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ExtrudedDirection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ExtrudedDirection" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ExtrudedDirection",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Depth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Depth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Depth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Depth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Depth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Depth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Depth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Depth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Depth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Depth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Depth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Depth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Depth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Depth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Depth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Depth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Depth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Depth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Axis (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Axis (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Axis (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Axis (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Axis" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Axis (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Axis" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Axis",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Angle (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Angle (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Angle (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Angle (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Angle (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Angle (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Angle (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Angle (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Angle (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Angle (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Angle (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Angle (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Angle (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Angle" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Angle",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Angle (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Angle" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Angle",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Directrix (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Directrix (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Directrix (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Directrix (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Directrix (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Directrix (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Directrix (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Directrix (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Directrix (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Directrix (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Directrix (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Directrix (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Directrix (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Directrix" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Directrix",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Directrix (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Directrix" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Directrix",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::InnerRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InnerRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InnerRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::StartParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::StartParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::StartParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::StartParam (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::StartParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::StartParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::StartParam (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::StartParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::StartParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::StartParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::StartParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::StartParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::StartParam (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "StartParam" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "StartParam",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      StartParam (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "StartParam" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "StartParam",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EndParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EndParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EndParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EndParam (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EndParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EndParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EndParam (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EndParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EndParam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EndParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EndParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EndParam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::EndParam (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EndParam" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EndParam",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EndParam (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EndParam" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EndParam",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterBoundary (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterBoundary (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::OuterBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::OuterBoundary (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OuterBoundary" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OuterBoundary",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OuterBoundary (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OuterBoundary" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OuterBoundary",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerBoundaries (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerBoundaries (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerBoundaries (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerBoundaries (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerBoundaries (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerBoundaries (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerBoundaries (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerBoundaries (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerBoundaries (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerBoundaries (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerBoundaries (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::InnerBoundaries (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::InnerBoundaries (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InnerBoundaries" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerBoundaries",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      InnerBoundaries (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InnerBoundaries" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerBoundaries",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::U1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::U1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::U1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::U1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::U1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::U1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::U1 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "U1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "U1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U1 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "U1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "U1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::V1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::V1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::V1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::V1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::V1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::V1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::V1 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "V1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "V1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V1 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "V1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "V1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::U2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::U2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::U2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::U2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::U2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::U2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::U2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::U2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "U2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "U2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      U2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "U2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "U2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::V2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::V2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::V2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::V2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::V2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::V2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::V2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::V2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "V2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "V2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      V2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "V2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "V2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Usense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Usense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Usense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Usense (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Usense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Usense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Usense (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Usense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Usense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Usense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Usense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Usense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::ResourcesGeometry::Usense (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Usense" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Usense",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Usense (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Usense" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Usense",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Vsense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Vsense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Vsense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Vsense (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Vsense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Vsense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Vsense (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Vsense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Vsense (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Vsense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Vsense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::ResourcesGeometry::Vsense (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::ResourcesGeometry::Vsense (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Vsense" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Vsense",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      Vsense (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Vsense" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Vsense",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SweptCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SweptCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SweptCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SweptCurve (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SweptCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SweptCurve (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::SweptCurve (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::SweptCurve (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SweptCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SweptCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SweptCurve (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SweptCurve" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SweptCurve",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::AxisPosition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::AxisPosition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::AxisPosition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::AxisPosition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::AxisPosition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::AxisPosition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::AxisPosition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::AxisPosition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::AxisPosition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::AxisPosition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::AxisPosition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::AxisPosition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::AxisPosition (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "AxisPosition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AxisPosition",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      AxisPosition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "AxisPosition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AxisPosition",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::FbsmFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::FbsmFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::FbsmFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FbsmFaces (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FbsmFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FbsmFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FbsmFaces (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FbsmFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FbsmFaces (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::FbsmFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::FbsmFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::FbsmFaces (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::FbsmFaces (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FbsmFaces" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FbsmFaces",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      FbsmFaces (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FbsmFaces" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FbsmFaces",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::SbsmBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::SbsmBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::SbsmBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SbsmBoundary (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SbsmBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SbsmBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SbsmBoundary (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SbsmBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SbsmBoundary (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::SbsmBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::SbsmBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::SbsmBoundary (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::SbsmBoundary (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SbsmBoundary" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SbsmBoundary",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SbsmBoundary (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SbsmBoundary" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SbsmBoundary",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Orientation_Reference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Orientation_Reference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Orientation_Reference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Orientation_Reference (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Orientation_Reference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Orientation_Reference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Orientation_Reference (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Orientation_Reference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Orientation_Reference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Orientation_Reference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Orientation_Reference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Orientation_Reference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Orientation_Reference (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Orientation_Reference" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Orientation_Reference",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Orientation_Reference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Orientation_Reference" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Orientation_Reference",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Magnitude (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Magnitude (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Magnitude (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Magnitude (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Magnitude (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Magnitude (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Magnitude (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Magnitude (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Magnitude (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Magnitude (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Magnitude (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Magnitude (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Magnitude (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Magnitude" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Magnitude",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Magnitude (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Magnitude" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Magnitude",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::DirectionRatios (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::DirectionRatios (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::DirectionRatios (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::DirectionRatios (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::DirectionRatios (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::DirectionRatios (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::DirectionRatios (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::DirectionRatios (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::DirectionRatios (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::DirectionRatios (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::DirectionRatios (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::DirectionRatios (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::DirectionRatios (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DirectionRatios" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DirectionRatios",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      DirectionRatios (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DirectionRatios" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DirectionRatios",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::PlacementLocation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PlacementLocation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementLocation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementLocation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PlacementLocation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementLocation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementRefDirection (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementRefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementRefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementRefDirection (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementRefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementRefDirection (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::PlacementRefDirection (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PlacementRefDirection" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementRefDirection",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRefDirection (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PlacementRefDirection" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementRefDirection",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRelTo (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRelTo (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRelTo (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementRelTo (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementRelTo (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::PlacementRelTo (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementRelTo (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementRelTo (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::PlacementRelTo (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRelTo (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRelTo (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::PlacementRelTo (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::PlacementRelTo (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PlacementRelTo" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementRelTo",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelTo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PlacementRelTo" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementRelTo",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RelativePlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RelativePlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RelativePlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::RelativePlacement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::RelativePlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::RelativePlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::RelativePlacement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::RelativePlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::RelativePlacement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RelativePlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RelativePlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::RelativePlacement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::RelativePlacement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RelativePlacement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RelativePlacement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RelativePlacement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RelativePlacement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RelativePlacement",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Polygon (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Polygon (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Polygon (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Polygon (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Polygon (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Polygon (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Polygon (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Polygon (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Polygon (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Polygon (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Polygon (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::ResourcesGeometry::Polygon (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::ResourcesGeometry::Polygon (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Polygon" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Polygon",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      Polygon (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Polygon" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Polygon",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LoopVertex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LoopVertex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LoopVertex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LoopVertex (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LoopVertex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LoopVertex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LoopVertex (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LoopVertex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LoopVertex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LoopVertex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LoopVertex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::LoopVertex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::LoopVertex (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LoopVertex" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LoopVertex",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      LoopVertex (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LoopVertex" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LoopVertex",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingSource (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingSource (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingSource (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingSource (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingSource (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingSource (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingSource (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingSource (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingSource (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingSource (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingSource (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingSource (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::MappingSource (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MappingSource" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappingSource",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingSource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MappingSource" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappingSource",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingTarget (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingTarget (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingTarget (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingTarget (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingTarget (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingTarget (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingTarget (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingTarget (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingTarget (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingTarget (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingTarget (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingTarget (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::MappingTarget (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MappingTarget" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappingTarget",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingTarget (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MappingTarget" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappingTarget",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Width (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Width (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Width (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Width (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Width (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Width (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Width (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Width (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Width (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Width (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Width (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Width (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Width (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Width" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Width",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Width (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Width" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Width",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WallThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WallThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WallThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WallThickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WallThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WallThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WallThickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WallThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WallThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WallThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WallThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WallThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::WallThickness (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "WallThickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WallThickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WallThickness (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "WallThickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WallThickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Girth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Girth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Girth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Girth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Girth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Girth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Girth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Girth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Girth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Girth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Girth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Girth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Girth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Girth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Girth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Girth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Girth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Girth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InternalFilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InternalFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InternalFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InternalFilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InternalFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InternalFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::InternalFilletRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InternalFilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InternalFilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InternalFilletRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InternalFilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InternalFilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::CentreOfGravityInX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CentreOfGravityInX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CentreOfGravityInX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CentreOfGravityInX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CentreOfGravityInX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerFilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::InnerFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerFilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::InnerFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::InnerFilletRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InnerFilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerFilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      InnerFilletRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InnerFilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InnerFilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterFilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OuterFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterFilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OuterFilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OuterFilletRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OuterFilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OuterFilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OuterFilletRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OuterFilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OuterFilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OverallWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OverallWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OverallWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OverallWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OverallWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OverallWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OverallWidth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OverallWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OverallWidth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallWidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OverallWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OverallWidth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OverallDepth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OverallDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::OverallDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OverallDepth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OverallDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::OverallDepth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::OverallDepth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::OverallDepth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OverallDepth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OverallDepth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      OverallDepth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OverallDepth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OverallDepth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebThickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebThickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::WebThickness (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "WebThickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WebThickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebThickness (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "WebThickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WebThickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeThickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeThickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeThickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeThickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::FlangeThickness (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FlangeThickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeThickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeThickness (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FlangeThickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeThickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FilletRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FilletRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FilletRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::FilletRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FilletRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FilletRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FilletRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Thickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Thickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Thickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Thickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Thickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Thickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Thickness (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Thickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Thickness (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Thickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Thickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::Thickness (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::Thickness (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Thickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Thickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Thickness (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Thickness" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Thickness",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::EdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::EdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::EdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::EdgeRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EdgeRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      EdgeRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EdgeRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EdgeRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::LegSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::LegSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::LegSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LegSlope (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LegSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::LegSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LegSlope (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LegSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::LegSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::LegSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::LegSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::LegSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::LegSlope (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LegSlope" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LegSlope",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LegSlope (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LegSlope" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LegSlope",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::CentreOfGravityInY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CentreOfGravityInY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CentreOfGravityInY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      CentreOfGravityInY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CentreOfGravityInY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CentreOfGravityInY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::FlangeWidth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FlangeWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeWidth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeWidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FlangeWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeWidth",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::FlangeEdgeRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FlangeEdgeRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeEdgeRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeEdgeRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FlangeEdgeRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeEdgeRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebEdgeRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebEdgeRadius (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebEdgeRadius (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::WebEdgeRadius (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "WebEdgeRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WebEdgeRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebEdgeRadius (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "WebEdgeRadius" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WebEdgeRadius",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebSlope (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::WebSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebSlope (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::WebSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::WebSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::WebSlope (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "WebSlope" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WebSlope",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      WebSlope (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "WebSlope" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "WebSlope",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeSlope (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::FlangeSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeSlope (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::FlangeSlope (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::FlangeSlope (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::FlangeSlope (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FlangeSlope" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeSlope",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      FlangeSlope (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FlangeSlope" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FlangeSlope",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinCurveOutput (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinCurveOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinCurveOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinCurveOutput (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinCurveOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinCurveOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxCurveOutput (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxCurveOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxCurveOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxCurveOutput (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxCurveOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxCurveOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef1Constant (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef1Constant" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef1Constant",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef1Constant (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef1Constant" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef1Constant",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_2_X" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_2_X",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_2_X" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_2_X",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (const ::xercesc::DOMDocument& doc,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_InputUnitTypeForX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeForX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_InputUnitTypeForX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeForX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_OutputUnitType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_OutputUnitType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_OutputUnitType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_OutputUnitType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_OutputUnitType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_OutputUnitType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_4_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_4_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_3_X_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_3_X_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_3_X_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_3_X_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff5_Y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_Y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff5_Y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_Y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff6_X_y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff6_X_y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff6_X_y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff6_X_y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (const ::xercesc::DOMDocument& doc,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_InputUnitTypeForY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeForY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_InputUnitTypeForY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeForY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_X_3 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff7_X_3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff7_X_3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_X_3 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff7_X_3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff7_X_3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_Y_3 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff8_Y_3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff8_Y_3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_Y_3 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff8_Y_3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff8_Y_3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_2_Y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff9_X_2_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff9_X_2_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_2_Y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff9_X_2_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff9_X_2_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff10_X_y_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff10_X_y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff10_X_y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff10_X_y_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff10_X_y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff10_X_y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_3 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_4_X_3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_X_3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_3 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_4_X_3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_X_3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff1C1 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff1C1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff1C1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff1C1 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff1C1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff1C1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff2C2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff2C2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff2C2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff2C2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff2C2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff2C2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C3 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff3C3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff3C3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C3 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff3C3" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff3C3",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C4 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff3C4" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff3C4",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C4 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff3C4" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff3C4",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff3C5 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff3C5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff3C5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff3C5 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff3C5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff3C5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_1_3_Const (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff_1_3_Const" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_1_3_Const",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerfCurve_Coeff_1_3_Const (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff_1_3_Const" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_1_3_Const",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff4C4 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff4C4" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff4C4",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff4C4 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff4C4" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff4C4",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfQfan (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinValueOfQfan" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValueOfQfan",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfQfan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinValueOfQfan" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValueOfQfan",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfQfan (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxValueOfQfan" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValueOfQfan",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfQfan (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxValueOfQfan" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValueOfQfan",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueOfPsm (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinValueOfPsm" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValueOfPsm",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueOfPsm (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinValueOfPsm" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValueOfPsm",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueOfPsm (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxValueOfPsm" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValueOfPsm",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueOfPsm (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxValueOfPsm" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValueOfPsm",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient2w (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coefficient2w" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coefficient2w",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient2w (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coefficient2w" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coefficient2w",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_3_X" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_3_X",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_3_X" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_3_X",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coefficient5z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coefficient5z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coefficient5z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coefficient5z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coefficient5z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coefficient5z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValueofw (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinValueofw" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValueofw",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValueofw (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinValueofw" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValueofw",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValueofw (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxValueofw" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValueofw",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValueofw (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxValueofw" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValueofw",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinValZ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinValZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValZ",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinValZ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinValZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinValZ",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MaxValZ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MaxValZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValZ",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MaxValZ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MaxValZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MaxValZ",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (const ::xercesc::DOMDocument& doc,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeforw (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_InputUnitTypeforw" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeforw",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeforw (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_InputUnitTypeforw" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeforw",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (const ::xercesc::DOMDocument& doc,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_InputUnitTypeForZ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_InputUnitTypeForZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeForZ",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerfCurve_InputUnitTypeForZ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_InputUnitTypeForZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_InputUnitTypeForZ",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff5_X_y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_X_y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff5_X_y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_X_y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_X_2_Y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff6_X_2_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff6_X_2_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_X_2_Y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff6_X_2_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff6_X_2_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_X_4 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff5_X_4" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_X_4",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_X_4 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff5_X_4" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_X_4",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5C5 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff5C5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5C5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5C5 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff5C5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5C5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_2_X_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_2_X_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_2_X_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_2_X_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_2_X_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_2_X_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_Y_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_4_Y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_Y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_Y_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_4_Y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_Y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff5_Y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff5_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff5_Y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff5_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff5_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff6_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff6_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff6_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff6_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff6_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff6_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff7_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff7_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff7_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff7_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff7_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff7_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff8_X_2_Y_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff8_X_2_Y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff8_X_2_Y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff8_X_2_Y_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff8_X_2_Y_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff8_X_2_Y_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff9_X_y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff9_X_y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff9_X_y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff9_X_y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff9_X_y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff9_X_y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff11_X_2_Y (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff11_X_2_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff11_X_2_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff11_X_2_Y (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff11_X_2_Y" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff11_X_2_Y",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_2_X_2_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff_2_X_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_2_X_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_2_X_2_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff_2_X_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_2_X_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_3_X_z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff_3_X_z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_3_X_z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_3_X_z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff_3_X_z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_3_X_z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff_4_X_z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff_4_X_z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_4_X_z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff_4_X_z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff_4_X_z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff_4_X_z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff15_X_2_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff15_X_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff15_X_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff15_X_2_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff15_X_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff15_X_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff16_Y_2_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff16_Y_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff16_Y_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff16_Y_2_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff16_Y_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff16_Y_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff17_Y_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff17_Y_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff17_Y_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff17_Y_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff17_Y_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff17_Y_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff18_Y_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff18_Y_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff18_Y_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff18_Y_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff18_Y_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff18_Y_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coeff19_Y_2_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coeff19_Y_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff19_Y_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coeff19_Y_2_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coeff19_Y_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coeff19_Y_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (const ::xercesc::DOMDocument& doc,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_20_X_2_Y_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_20_X_2_Y_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_20_X_2_Y_2_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_20_X_2_Y_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_20_X_2_Y_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (const ::xercesc::DOMDocument& doc,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_21_X_2_Y_2_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_21_X_2_Y_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_21_X_2_Y_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_21_X_2_Y_2_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_21_X_2_Y_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_21_X_2_Y_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (const ::std::string& u,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (const ::std::string& u,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::std::istream& is,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::std::istream& is,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::xercesc::InputSource& i,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::xercesc::InputSource& i,
                                      ::xml_schema::error_handler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (const ::xercesc::DOMDocument& doc,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_22_X_2_Y_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_22_X_2_Y_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_22_X_2_Y_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_22_X_2_Y_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f,
                                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_22_X_2_Y_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_22_X_2_Y_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (const ::xercesc::DOMDocument& doc,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_3_X_y_2_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_3_X_y_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_3_X_y_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_3_X_y_2_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_3_X_y_2_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_3_X_y_2_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_4_X_2_Y_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_4_X_2_Y_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_X_2_Y_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_4_X_2_Y_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_4_X_2_Y_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_4_X_2_Y_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_25_X_y_2_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_25_X_y_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_25_X_y_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_25_X_y_2_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_25_X_y_2_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_25_X_y_2_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_26_X_Y_Z_2 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_26_X_Y_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_26_X_Y_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_26_X_Y_Z_2 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_26_X_Y_Z_2" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_26_X_Y_Z_2",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Coef_27_X_Y_Z (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Coef_27_X_Y_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_27_X_Y_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Coef_27_X_Y_Z (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Coef_27_X_Y_Z" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Coef_27_X_Y_Z",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Diam (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Diam" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Diam",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Diam (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Diam" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Diam",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_MinorLossCoef (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_MinorLossCoef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinorLossCoef",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_MinorLossCoef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_MinorLossCoef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_MinorLossCoef",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Length (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Length" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Length",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Length (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Length" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Length",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_Rough (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_Rough" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Rough",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_Rough (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_Rough" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_Rough",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (const ::xercesc::DOMDocument& doc,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerfCurve_FixedFrictionFactor (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerfCurve_FixedFrictionFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_FixedFrictionFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerfCurve_FixedFrictionFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerfCurve_FixedFrictionFactor" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerfCurve_FixedFrictionFactor",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_Name",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (const ::xercesc::DOMDocument& doc,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_CurveType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_CurveType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_CurveType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_CurveType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_CurveType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_CurveType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InterpolatMethod (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_InterpolatMethod" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InterpolatMethod",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InterpolatMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_InterpolatMethod" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InterpolatMethod",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinTableOutput (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MinTableOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinTableOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinTableOutput (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MinTableOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinTableOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxTableOutput (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MaxTableOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxTableOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxTableOutput (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MaxTableOutput" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxTableOutput",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputUnitType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_OutputUnitType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_OutputUnitType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_OutputUnitType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_OutputUnitType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_OutputUnitType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NormalizationRef (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_NormalizationRef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NormalizationRef",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NormalizationRef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_NormalizationRef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NormalizationRef",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (const ::std::string& u,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (const ::std::string& u,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (const ::std::string& u,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::std::istream& is,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::std::istream& is,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::std::istream& is,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::std::istream& is,
                                                 const ::std::string& sid,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::xercesc::InputSource& i,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::xercesc::InputSource& i,
                                                 ::xml_schema::error_handler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::xercesc::InputSource& i,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (const ::xercesc::DOMDocument& doc,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::int_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfInterpolatPoints (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_NumOfInterpolatPoints" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NumOfInterpolatPoints",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfInterpolatPoints (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                 ::xml_schema::flags f,
                                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_NumOfInterpolatPoints" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NumOfInterpolatPoints",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (const ::std::string& u,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (const ::std::string& u,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (const ::std::string& u,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::std::istream& is,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::std::istream& is,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::std::istream& is,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::std::istream& is,
                                           const ::std::string& sid,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::xercesc::InputSource& i,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::xercesc::InputSource& i,
                                           ::xml_schema::error_handler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::xercesc::InputSource& i,
                                           ::xercesc::DOMErrorHandler& h,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (const ::xercesc::DOMDocument& doc,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_TableDataFormat (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_TableDataFormat" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_TableDataFormat",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_TableDataFormat (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                           ::xml_schema::flags f,
                                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_TableDataFormat" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_TableDataFormat",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_ExternalFileName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_ExternalFileName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_ExternalFileName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_ExternalFileName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_ExternalFileName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_ExternalFileName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_X_1_2_SortOrder" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_X_1_2_SortOrder",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder >
      SimPerformanceTable_X_1_2_SortOrder_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_X_1_2_SortOrder" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_X_1_2_SortOrder, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_X_1_2_SortOrder",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValueOf_X_1_5 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MinValueOf_X_1_5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinValueOf_X_1_5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MinValueOf_X_1_5 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MinValueOf_X_1_5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinValueOf_X_1_5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValueOf_X_1_5 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MaxValueOf_X_1_5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxValueOf_X_1_5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_MaxValueOf_X_1_5 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MaxValueOf_X_1_5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxValueOf_X_1_5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (const ::std::string& u,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (const ::std::string& u,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (const ::std::string& u,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::std::istream& is,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::std::istream& is,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::std::istream& is,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::xercesc::InputSource& i,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::xercesc::InputSource& i,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::xercesc::InputSource& i,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (const ::xercesc::DOMDocument& doc,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_InputUnitTypeForX_1_5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InputUnitTypeForX_1_5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 >
      SimPerformanceTable_InputUnitTypeForX_1_5_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_InputUnitTypeForX_1_5" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5 > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX_1_5, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InputUnitTypeForX_1_5",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::int_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfIndepVars (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_NumOfIndepVars" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NumOfIndepVars",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      SimPerformanceTable_NumOfIndepVars (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_NumOfIndepVars" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NumOfIndepVars",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (const ::std::string& u,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (const ::std::string& u,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (const ::std::string& u,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::std::istream& is,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::std::istream& is,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::std::istream& is,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::std::istream& is,
                                                  const ::std::string& sid,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::xercesc::InputSource& i,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::xercesc::InputSource& i,
                                                  ::xml_schema::error_handler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::xercesc::InputSource& i,
                                                  ::xercesc::DOMErrorHandler& h,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (const ::xercesc::DOMDocument& doc,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_NumOfValsForIndepVarX1 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_NumOfValsForIndepVarX1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NumOfValsForIndepVarX1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_NumOfValsForIndepVarX1 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                  ::xml_schema::flags f,
                                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_NumOfValsForIndepVarX1" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_NumOfValsForIndepVarX1",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (const ::std::string& u,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (const ::std::string& u,
                                                         ::xml_schema::error_handler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (const ::std::string& u,
                                                         ::xercesc::DOMErrorHandler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::std::istream& is,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::std::istream& is,
                                                         ::xml_schema::error_handler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::std::istream& is,
                                                         ::xercesc::DOMErrorHandler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::std::istream& is,
                                                         const ::std::string& sid,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::std::istream& is,
                                                         const ::std::string& sid,
                                                         ::xml_schema::error_handler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::std::istream& is,
                                                         const ::std::string& sid,
                                                         ::xercesc::DOMErrorHandler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::xercesc::InputSource& i,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::xercesc::InputSource& i,
                                                         ::xml_schema::error_handler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::xercesc::InputSource& i,
                                                         ::xercesc::DOMErrorHandler& h,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (const ::xercesc::DOMDocument& doc,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_Field_1_3083_DetbyNumIndpVars" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_Field_1_3083_DetbyNumIndpVars",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_Field_1_3083_DetbyNumIndpVars (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                                         ::xml_schema::flags f,
                                                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_Field_1_3083_DetbyNumIndpVars" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_Field_1_3083_DetbyNumIndpVars",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MinValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MinValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MaxValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MaxValX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxValX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (const ::xercesc::DOMDocument& doc,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_InputUnitTypeForX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InputUnitTypeForX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_InputUnitTypeForX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InputUnitTypeForX",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (const ::xercesc::DOMDocument& doc,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_57 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_XValue_1_57" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_XValue_1_57",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_57 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_XValue_1_57" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_XValue_1_57",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_57 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_OutputValue_1_57" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_OutputValue_1_57",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_57 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_OutputValue_1_57" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_OutputValue_1_57",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MinValY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MinValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MinValY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MinValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MinValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_MaxValY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_MaxValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      SimPerformanceTable_MaxValY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_MaxValY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_MaxValY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (const ::xercesc::DOMDocument& doc,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_InputUnitTypeForY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_InputUnitTypeForY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InputUnitTypeForY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimPerformanceTable_InputUnitTypeForY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_InputUnitTypeForY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_InputUnitTypeForY",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (const ::xercesc::DOMDocument& doc,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_XValue_1_164 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_XValue_1_164" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_XValue_1_164",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_XValue_1_164 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_XValue_1_164" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_XValue_1_164",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (const ::std::string& u,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (const ::std::string& u,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::std::istream& is,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::std::istream& is,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::xercesc::InputSource& i,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::xercesc::InputSource& i,
                                        ::xml_schema::error_handler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (const ::xercesc::DOMDocument& doc,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_YValue_1_164 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_YValue_1_164" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_YValue_1_164",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_YValue_1_164 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                        ::xml_schema::flags f,
                                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_YValue_1_164" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_YValue_1_164",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (const ::xercesc::DOMDocument& doc,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::ResourcesGeometry::SimPerformanceTable_OutputValue_1_164 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimPerformanceTable_OutputValue_1_164" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_OutputValue_1_164",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimPerformanceTable_OutputValue_1_164 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimPerformanceTable_OutputValue_1_164" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimPerformanceTable_OutputValue_1_164",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Location (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Location (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Location (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Location (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Location (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Location (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Location (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::Location (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::Location (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Location" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Location",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Location" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Location",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ProfileType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ProfileType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ProfileType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ProfileType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ProfileType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ProfileType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::ProfileType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ProfileType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProfileType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ProfileType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProfileType",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ProfileName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ProfileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::ProfileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ProfileName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ProfileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::ProfileName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::ResourcesGeometry::ProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::ResourcesGeometry::ProfileName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ProfileName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProfileName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ProfileName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ProfileName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProfileName",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingOrigin (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappingOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingOrigin (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappingOrigin (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappingOrigin (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::MappingOrigin (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MappingOrigin" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappingOrigin",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappingOrigin (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MappingOrigin" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappingOrigin",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappedRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappedRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappedRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappedRepresentation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappedRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::ResourcesGeometry::MappedRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappedRepresentation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappedRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::ResourcesGeometry::MappedRepresentation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappedRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappedRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::ResourcesGeometry::MappedRepresentation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::ResourcesGeometry::MappedRepresentation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MappedRepresentation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappedRepresentation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MappedRepresentation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MappedRepresentation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MappedRepresentation",
          "http://d-alchemy.com/schema/simxml/ResourcesGeometry");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

