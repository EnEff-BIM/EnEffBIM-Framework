// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR
      // 

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_Name_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_Name_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinPartLoadRatio () const
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinPartLoadRatio ()
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MaxPartLoadRatio () const
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MaxPartLoadRatio ()
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_OptimumPartLoadRatio () const
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_OptimumPartLoadRatio ()
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_SizingFactor_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_SizingFactor () const
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_SizingFactor_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_SizingFactor ()
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x)
      {
        this->SimFlowPlant_SizingFactor_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x)
      {
        this->SimFlowPlant_SizingFactor_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefCap_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCap () const
      {
        return this->SimFlowPlant_RefCap_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefCap_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCap ()
      {
        return this->SimFlowPlant_RefCap_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCap (const SimFlowPlant_RefCap_type& x)
      {
        this->SimFlowPlant_RefCap_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCap (const SimFlowPlant_RefCap_optional& x)
      {
        this->SimFlowPlant_RefCap_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefCOP_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCOP () const
      {
        return this->SimFlowPlant_RefCOP_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefCOP_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCOP ()
      {
        return this->SimFlowPlant_RefCOP_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCOP (const SimFlowPlant_RefCOP_type& x)
      {
        this->SimFlowPlant_RefCOP_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCOP (const SimFlowPlant_RefCOP_optional& x)
      {
        this->SimFlowPlant_RefCOP_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefLeavChilledWaterTemp_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefLeavChilledWaterTemp () const
      {
        return this->SimFlowPlant_RefLeavChilledWaterTemp_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefLeavChilledWaterTemp_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefLeavChilledWaterTemp ()
      {
        return this->SimFlowPlant_RefLeavChilledWaterTemp_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefLeavChilledWaterTemp (const SimFlowPlant_RefLeavChilledWaterTemp_type& x)
      {
        this->SimFlowPlant_RefLeavChilledWaterTemp_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefLeavChilledWaterTemp (const SimFlowPlant_RefLeavChilledWaterTemp_optional& x)
      {
        this->SimFlowPlant_RefLeavChilledWaterTemp_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefEnterCondFluidTemp_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefEnterCondFluidTemp () const
      {
        return this->SimFlowPlant_RefEnterCondFluidTemp_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefEnterCondFluidTemp_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefEnterCondFluidTemp ()
      {
        return this->SimFlowPlant_RefEnterCondFluidTemp_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefEnterCondFluidTemp (const SimFlowPlant_RefEnterCondFluidTemp_type& x)
      {
        this->SimFlowPlant_RefEnterCondFluidTemp_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefEnterCondFluidTemp (const SimFlowPlant_RefEnterCondFluidTemp_optional& x)
      {
        this->SimFlowPlant_RefEnterCondFluidTemp_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefChilledWaterFlowRate_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefChilledWaterFlowRate () const
      {
        return this->SimFlowPlant_RefChilledWaterFlowRate_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefChilledWaterFlowRate_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefChilledWaterFlowRate ()
      {
        return this->SimFlowPlant_RefChilledWaterFlowRate_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefChilledWaterFlowRate (const SimFlowPlant_RefChilledWaterFlowRate_type& x)
      {
        this->SimFlowPlant_RefChilledWaterFlowRate_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefChilledWaterFlowRate (const SimFlowPlant_RefChilledWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_RefChilledWaterFlowRate_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefCondenserFluidFlowRate_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCondenserFluidFlowRate () const
      {
        return this->SimFlowPlant_RefCondenserFluidFlowRate_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_RefCondenserFluidFlowRate_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCondenserFluidFlowRate ()
      {
        return this->SimFlowPlant_RefCondenserFluidFlowRate_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCondenserFluidFlowRate (const SimFlowPlant_RefCondenserFluidFlowRate_type& x)
      {
        this->SimFlowPlant_RefCondenserFluidFlowRate_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_RefCondenserFluidFlowRate (const SimFlowPlant_RefCondenserFluidFlowRate_optional& x)
      {
        this->SimFlowPlant_RefCondenserFluidFlowRate_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CoolingCapFuncTempCurveName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CoolingCapFuncTempCurveName () const
      {
        return this->SimFlowPlant_CoolingCapFuncTempCurveName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CoolingCapFuncTempCurveName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CoolingCapFuncTempCurveName ()
      {
        return this->SimFlowPlant_CoolingCapFuncTempCurveName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CoolingCapFuncTempCurveName (const SimFlowPlant_CoolingCapFuncTempCurveName_type& x)
      {
        this->SimFlowPlant_CoolingCapFuncTempCurveName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CoolingCapFuncTempCurveName (const SimFlowPlant_CoolingCapFuncTempCurveName_optional& x)
      {
        this->SimFlowPlant_CoolingCapFuncTempCurveName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowPlant_CoolingCapFuncTempCurveName_type > x)
      {
        this->SimFlowPlant_CoolingCapFuncTempCurveName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName () const
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName ()
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName (::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName () const
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName ()
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type > x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_MinUnloadingRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinUnloadingRatio () const
      {
        return this->SimFlowPlant_MinUnloadingRatio_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_MinUnloadingRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinUnloadingRatio ()
      {
        return this->SimFlowPlant_MinUnloadingRatio_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinUnloadingRatio (const SimFlowPlant_MinUnloadingRatio_type& x)
      {
        this->SimFlowPlant_MinUnloadingRatio_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_MinUnloadingRatio (const SimFlowPlant_MinUnloadingRatio_optional& x)
      {
        this->SimFlowPlant_MinUnloadingRatio_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ChilledWaterInletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterInletNodeName () const
      {
        return this->SimFlowPlant_ChilledWaterInletNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ChilledWaterInletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterInletNodeName ()
      {
        return this->SimFlowPlant_ChilledWaterInletNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterInletNodeName (const SimFlowPlant_ChilledWaterInletNodeName_type& x)
      {
        this->SimFlowPlant_ChilledWaterInletNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterInletNodeName (const SimFlowPlant_ChilledWaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_ChilledWaterInletNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterInletNodeName (::std::auto_ptr< SimFlowPlant_ChilledWaterInletNodeName_type > x)
      {
        this->SimFlowPlant_ChilledWaterInletNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ChilledWaterOutletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterOutletNodeName () const
      {
        return this->SimFlowPlant_ChilledWaterOutletNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ChilledWaterOutletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterOutletNodeName ()
      {
        return this->SimFlowPlant_ChilledWaterOutletNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterOutletNodeName (const SimFlowPlant_ChilledWaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_ChilledWaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterOutletNodeName (const SimFlowPlant_ChilledWaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_ChilledWaterOutletNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChilledWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_ChilledWaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_ChilledWaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondInletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondInletNodeName () const
      {
        return this->SimFlowPlant_CondInletNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondInletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondInletNodeName ()
      {
        return this->SimFlowPlant_CondInletNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondInletNodeName (const SimFlowPlant_CondInletNodeName_type& x)
      {
        this->SimFlowPlant_CondInletNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondInletNodeName (const SimFlowPlant_CondInletNodeName_optional& x)
      {
        this->SimFlowPlant_CondInletNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondInletNodeName (::std::auto_ptr< SimFlowPlant_CondInletNodeName_type > x)
      {
        this->SimFlowPlant_CondInletNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondOutletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondOutletNodeName () const
      {
        return this->SimFlowPlant_CondOutletNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondOutletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondOutletNodeName ()
      {
        return this->SimFlowPlant_CondOutletNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondOutletNodeName (const SimFlowPlant_CondOutletNodeName_type& x)
      {
        this->SimFlowPlant_CondOutletNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondOutletNodeName (const SimFlowPlant_CondOutletNodeName_optional& x)
      {
        this->SimFlowPlant_CondOutletNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondOutletNodeName (::std::auto_ptr< SimFlowPlant_CondOutletNodeName_type > x)
      {
        this->SimFlowPlant_CondOutletNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondType_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondType () const
      {
        return this->SimFlowPlant_CondType_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondType_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondType ()
      {
        return this->SimFlowPlant_CondType_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondType (const SimFlowPlant_CondType_type& x)
      {
        this->SimFlowPlant_CondType_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondType (const SimFlowPlant_CondType_optional& x)
      {
        this->SimFlowPlant_CondType_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondType (::std::auto_ptr< SimFlowPlant_CondType_type > x)
      {
        this->SimFlowPlant_CondType_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondFanPwrRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondFanPwrRatio () const
      {
        return this->SimFlowPlant_CondFanPwrRatio_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondFanPwrRatio_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondFanPwrRatio ()
      {
        return this->SimFlowPlant_CondFanPwrRatio_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondFanPwrRatio (const SimFlowPlant_CondFanPwrRatio_type& x)
      {
        this->SimFlowPlant_CondFanPwrRatio_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondFanPwrRatio (const SimFlowPlant_CondFanPwrRatio_optional& x)
      {
        this->SimFlowPlant_CondFanPwrRatio_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_FracOfCompElecConsupRejctByCond_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_FracOfCompElecConsupRejctByCond () const
      {
        return this->SimFlowPlant_FracOfCompElecConsupRejctByCond_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_FracOfCompElecConsupRejctByCond_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_FracOfCompElecConsupRejctByCond ()
      {
        return this->SimFlowPlant_FracOfCompElecConsupRejctByCond_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_FracOfCompElecConsupRejctByCond (const SimFlowPlant_FracOfCompElecConsupRejctByCond_type& x)
      {
        this->SimFlowPlant_FracOfCompElecConsupRejctByCond_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_FracOfCompElecConsupRejctByCond (const SimFlowPlant_FracOfCompElecConsupRejctByCond_optional& x)
      {
        this->SimFlowPlant_FracOfCompElecConsupRejctByCond_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_LeavChilledWaterLowTempLimit_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_LeavChilledWaterLowTempLimit () const
      {
        return this->SimFlowPlant_LeavChilledWaterLowTempLimit_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_LeavChilledWaterLowTempLimit_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_LeavChilledWaterLowTempLimit ()
      {
        return this->SimFlowPlant_LeavChilledWaterLowTempLimit_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_LeavChilledWaterLowTempLimit (const SimFlowPlant_LeavChilledWaterLowTempLimit_type& x)
      {
        this->SimFlowPlant_LeavChilledWaterLowTempLimit_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_LeavChilledWaterLowTempLimit (const SimFlowPlant_LeavChilledWaterLowTempLimit_optional& x)
      {
        this->SimFlowPlant_LeavChilledWaterLowTempLimit_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ChillerFlowMode_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChillerFlowMode () const
      {
        return this->SimFlowPlant_ChillerFlowMode_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_ChillerFlowMode_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChillerFlowMode ()
      {
        return this->SimFlowPlant_ChillerFlowMode_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChillerFlowMode (const SimFlowPlant_ChillerFlowMode_type& x)
      {
        this->SimFlowPlant_ChillerFlowMode_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChillerFlowMode (const SimFlowPlant_ChillerFlowMode_optional& x)
      {
        this->SimFlowPlant_ChillerFlowMode_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_ChillerFlowMode (::std::auto_ptr< SimFlowPlant_ChillerFlowMode_type > x)
      {
        this->SimFlowPlant_ChillerFlowMode_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_DesignHeatRecovWaterFlowRate_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_DesignHeatRecovWaterFlowRate () const
      {
        return this->SimFlowPlant_DesignHeatRecovWaterFlowRate_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_DesignHeatRecovWaterFlowRate_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_DesignHeatRecovWaterFlowRate ()
      {
        return this->SimFlowPlant_DesignHeatRecovWaterFlowRate_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_DesignHeatRecovWaterFlowRate (const SimFlowPlant_DesignHeatRecovWaterFlowRate_type& x)
      {
        this->SimFlowPlant_DesignHeatRecovWaterFlowRate_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_DesignHeatRecovWaterFlowRate (const SimFlowPlant_DesignHeatRecovWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignHeatRecovWaterFlowRate_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecovInletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovInletNodeName () const
      {
        return this->SimFlowPlant_HeatRecovInletNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecovInletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovInletNodeName ()
      {
        return this->SimFlowPlant_HeatRecovInletNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovInletNodeName (const SimFlowPlant_HeatRecovInletNodeName_type& x)
      {
        this->SimFlowPlant_HeatRecovInletNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovInletNodeName (const SimFlowPlant_HeatRecovInletNodeName_optional& x)
      {
        this->SimFlowPlant_HeatRecovInletNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovInletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovInletNodeName_type > x)
      {
        this->SimFlowPlant_HeatRecovInletNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecovOutletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovOutletNodeName () const
      {
        return this->SimFlowPlant_HeatRecovOutletNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecovOutletNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovOutletNodeName ()
      {
        return this->SimFlowPlant_HeatRecovOutletNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovOutletNodeName (const SimFlowPlant_HeatRecovOutletNodeName_type& x)
      {
        this->SimFlowPlant_HeatRecovOutletNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovOutletNodeName (const SimFlowPlant_HeatRecovOutletNodeName_optional& x)
      {
        this->SimFlowPlant_HeatRecovOutletNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecovOutletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovOutletNodeName_type > x)
      {
        this->SimFlowPlant_HeatRecovOutletNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_BasinHeatCap_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatCap () const
      {
        return this->SimFlowPlant_BasinHeatCap_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_BasinHeatCap_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatCap ()
      {
        return this->SimFlowPlant_BasinHeatCap_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatCap (const SimFlowPlant_BasinHeatCap_type& x)
      {
        this->SimFlowPlant_BasinHeatCap_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatCap (const SimFlowPlant_BasinHeatCap_optional& x)
      {
        this->SimFlowPlant_BasinHeatCap_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_BasinHeatSetpointTemp_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatSetpointTemp () const
      {
        return this->SimFlowPlant_BasinHeatSetpointTemp_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_BasinHeatSetpointTemp_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatSetpointTemp ()
      {
        return this->SimFlowPlant_BasinHeatSetpointTemp_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatSetpointTemp (const SimFlowPlant_BasinHeatSetpointTemp_type& x)
      {
        this->SimFlowPlant_BasinHeatSetpointTemp_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatSetpointTemp (const SimFlowPlant_BasinHeatSetpointTemp_optional& x)
      {
        this->SimFlowPlant_BasinHeatSetpointTemp_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_BasinHeatOperatSchedName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatOperatSchedName () const
      {
        return this->SimFlowPlant_BasinHeatOperatSchedName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_BasinHeatOperatSchedName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatOperatSchedName ()
      {
        return this->SimFlowPlant_BasinHeatOperatSchedName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatOperatSchedName (const SimFlowPlant_BasinHeatOperatSchedName_type& x)
      {
        this->SimFlowPlant_BasinHeatOperatSchedName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatOperatSchedName (const SimFlowPlant_BasinHeatOperatSchedName_optional& x)
      {
        this->SimFlowPlant_BasinHeatOperatSchedName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowPlant_BasinHeatOperatSchedName_type > x)
      {
        this->SimFlowPlant_BasinHeatOperatSchedName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondHeatRecoveryRelativeCapFrac_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondHeatRecoveryRelativeCapFrac () const
      {
        return this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_CondHeatRecoveryRelativeCapFrac_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondHeatRecoveryRelativeCapFrac ()
      {
        return this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondHeatRecoveryRelativeCapFrac (const SimFlowPlant_CondHeatRecoveryRelativeCapFrac_type& x)
      {
        this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_CondHeatRecoveryRelativeCapFrac (const SimFlowPlant_CondHeatRecoveryRelativeCapFrac_optional& x)
      {
        this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_ = x;
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName () const
      {
        return this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName ()
      {
        return this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName (const SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_type& x)
      {
        this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName (const SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_optional& x)
      {
        this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName (::std::auto_ptr< SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_type > x)
      {
        this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName () const
      {
        return this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName ()
      {
        return this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName (const SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_type& x)
      {
        this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName (const SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_optional& x)
      {
        this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName (::std::auto_ptr< SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_type > x)
      {
        this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::T24ConstructStatus2_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ConstructStatus2 () const
      {
        return this->T24ConstructStatus2_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::T24ConstructStatus2_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ConstructStatus2 ()
      {
        return this->T24ConstructStatus2_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ConstructStatus2 (const T24ConstructStatus2_type& x)
      {
        this->T24ConstructStatus2_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ConstructStatus2 (const T24ConstructStatus2_optional& x)
      {
        this->T24ConstructStatus2_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ConstructStatus2 (::std::auto_ptr< T24ConstructStatus2_type > x)
      {
        this->T24ConstructStatus2_.set (x);
      }

      const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::T24ChllerType_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ChllerType () const
      {
        return this->T24ChllerType_;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::T24ChllerType_optional& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ChllerType ()
      {
        return this->T24ChllerType_;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ChllerType (const T24ChllerType_type& x)
      {
        this->T24ChllerType_.set (x);
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ChllerType (const T24ChllerType_optional& x)
      {
        this->T24ChllerType_ = x;
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      T24ChllerType (::std::auto_ptr< T24ChllerType_type > x)
      {
        this->T24ChllerType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR
      //

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR ()
      : ::schema::simxml::MepModel::SimFlowPlant_Chiller (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_RefCap_ (this),
        SimFlowPlant_RefCOP_ (this),
        SimFlowPlant_RefLeavChilledWaterTemp_ (this),
        SimFlowPlant_RefEnterCondFluidTemp_ (this),
        SimFlowPlant_RefChilledWaterFlowRate_ (this),
        SimFlowPlant_RefCondenserFluidFlowRate_ (this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_MinUnloadingRatio_ (this),
        SimFlowPlant_ChilledWaterInletNodeName_ (this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (this),
        SimFlowPlant_CondInletNodeName_ (this),
        SimFlowPlant_CondOutletNodeName_ (this),
        SimFlowPlant_CondType_ (this),
        SimFlowPlant_CondFanPwrRatio_ (this),
        SimFlowPlant_FracOfCompElecConsupRejctByCond_ (this),
        SimFlowPlant_LeavChilledWaterLowTempLimit_ (this),
        SimFlowPlant_ChillerFlowMode_ (this),
        SimFlowPlant_DesignHeatRecovWaterFlowRate_ (this),
        SimFlowPlant_HeatRecovInletNodeName_ (this),
        SimFlowPlant_HeatRecovOutletNodeName_ (this),
        SimFlowPlant_BasinHeatCap_ (this),
        SimFlowPlant_BasinHeatSetpointTemp_ (this),
        SimFlowPlant_BasinHeatOperatSchedName_ (this),
        SimFlowPlant_CondHeatRecoveryRelativeCapFrac_ (this),
        SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_ (this),
        SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_ (this),
        T24ConstructStatus2_ (this),
        T24ChllerType_ (this)
      {
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_Chiller (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_RefCap_ (this),
        SimFlowPlant_RefCOP_ (this),
        SimFlowPlant_RefLeavChilledWaterTemp_ (this),
        SimFlowPlant_RefEnterCondFluidTemp_ (this),
        SimFlowPlant_RefChilledWaterFlowRate_ (this),
        SimFlowPlant_RefCondenserFluidFlowRate_ (this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_MinUnloadingRatio_ (this),
        SimFlowPlant_ChilledWaterInletNodeName_ (this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (this),
        SimFlowPlant_CondInletNodeName_ (this),
        SimFlowPlant_CondOutletNodeName_ (this),
        SimFlowPlant_CondType_ (this),
        SimFlowPlant_CondFanPwrRatio_ (this),
        SimFlowPlant_FracOfCompElecConsupRejctByCond_ (this),
        SimFlowPlant_LeavChilledWaterLowTempLimit_ (this),
        SimFlowPlant_ChillerFlowMode_ (this),
        SimFlowPlant_DesignHeatRecovWaterFlowRate_ (this),
        SimFlowPlant_HeatRecovInletNodeName_ (this),
        SimFlowPlant_HeatRecovOutletNodeName_ (this),
        SimFlowPlant_BasinHeatCap_ (this),
        SimFlowPlant_BasinHeatSetpointTemp_ (this),
        SimFlowPlant_BasinHeatOperatSchedName_ (this),
        SimFlowPlant_CondHeatRecoveryRelativeCapFrac_ (this),
        SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_ (this),
        SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_ (this),
        T24ConstructStatus2_ (this),
        T24ChllerType_ (this)
      {
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR (const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR& x,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_Chiller (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_MinPartLoadRatio_ (x.SimFlowPlant_MinPartLoadRatio_, f, this),
        SimFlowPlant_MaxPartLoadRatio_ (x.SimFlowPlant_MaxPartLoadRatio_, f, this),
        SimFlowPlant_OptimumPartLoadRatio_ (x.SimFlowPlant_OptimumPartLoadRatio_, f, this),
        SimFlowPlant_SizingFactor_ (x.SimFlowPlant_SizingFactor_, f, this),
        SimFlowPlant_RefCap_ (x.SimFlowPlant_RefCap_, f, this),
        SimFlowPlant_RefCOP_ (x.SimFlowPlant_RefCOP_, f, this),
        SimFlowPlant_RefLeavChilledWaterTemp_ (x.SimFlowPlant_RefLeavChilledWaterTemp_, f, this),
        SimFlowPlant_RefEnterCondFluidTemp_ (x.SimFlowPlant_RefEnterCondFluidTemp_, f, this),
        SimFlowPlant_RefChilledWaterFlowRate_ (x.SimFlowPlant_RefChilledWaterFlowRate_, f, this),
        SimFlowPlant_RefCondenserFluidFlowRate_ (x.SimFlowPlant_RefCondenserFluidFlowRate_, f, this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (x.SimFlowPlant_CoolingCapFuncTempCurveName_, f, this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_, f, this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_, f, this),
        SimFlowPlant_MinUnloadingRatio_ (x.SimFlowPlant_MinUnloadingRatio_, f, this),
        SimFlowPlant_ChilledWaterInletNodeName_ (x.SimFlowPlant_ChilledWaterInletNodeName_, f, this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (x.SimFlowPlant_ChilledWaterOutletNodeName_, f, this),
        SimFlowPlant_CondInletNodeName_ (x.SimFlowPlant_CondInletNodeName_, f, this),
        SimFlowPlant_CondOutletNodeName_ (x.SimFlowPlant_CondOutletNodeName_, f, this),
        SimFlowPlant_CondType_ (x.SimFlowPlant_CondType_, f, this),
        SimFlowPlant_CondFanPwrRatio_ (x.SimFlowPlant_CondFanPwrRatio_, f, this),
        SimFlowPlant_FracOfCompElecConsupRejctByCond_ (x.SimFlowPlant_FracOfCompElecConsupRejctByCond_, f, this),
        SimFlowPlant_LeavChilledWaterLowTempLimit_ (x.SimFlowPlant_LeavChilledWaterLowTempLimit_, f, this),
        SimFlowPlant_ChillerFlowMode_ (x.SimFlowPlant_ChillerFlowMode_, f, this),
        SimFlowPlant_DesignHeatRecovWaterFlowRate_ (x.SimFlowPlant_DesignHeatRecovWaterFlowRate_, f, this),
        SimFlowPlant_HeatRecovInletNodeName_ (x.SimFlowPlant_HeatRecovInletNodeName_, f, this),
        SimFlowPlant_HeatRecovOutletNodeName_ (x.SimFlowPlant_HeatRecovOutletNodeName_, f, this),
        SimFlowPlant_BasinHeatCap_ (x.SimFlowPlant_BasinHeatCap_, f, this),
        SimFlowPlant_BasinHeatSetpointTemp_ (x.SimFlowPlant_BasinHeatSetpointTemp_, f, this),
        SimFlowPlant_BasinHeatOperatSchedName_ (x.SimFlowPlant_BasinHeatOperatSchedName_, f, this),
        SimFlowPlant_CondHeatRecoveryRelativeCapFrac_ (x.SimFlowPlant_CondHeatRecoveryRelativeCapFrac_, f, this),
        SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_ (x.SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_, f, this),
        SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_ (x.SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_, f, this),
        T24ConstructStatus2_ (x.T24ConstructStatus2_, f, this),
        T24ChllerType_ (x.T24ChllerType_, f, this)
      {
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR (const ::xercesc::DOMElement& e,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_Chiller (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_RefCap_ (this),
        SimFlowPlant_RefCOP_ (this),
        SimFlowPlant_RefLeavChilledWaterTemp_ (this),
        SimFlowPlant_RefEnterCondFluidTemp_ (this),
        SimFlowPlant_RefChilledWaterFlowRate_ (this),
        SimFlowPlant_RefCondenserFluidFlowRate_ (this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_MinUnloadingRatio_ (this),
        SimFlowPlant_ChilledWaterInletNodeName_ (this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (this),
        SimFlowPlant_CondInletNodeName_ (this),
        SimFlowPlant_CondOutletNodeName_ (this),
        SimFlowPlant_CondType_ (this),
        SimFlowPlant_CondFanPwrRatio_ (this),
        SimFlowPlant_FracOfCompElecConsupRejctByCond_ (this),
        SimFlowPlant_LeavChilledWaterLowTempLimit_ (this),
        SimFlowPlant_ChillerFlowMode_ (this),
        SimFlowPlant_DesignHeatRecovWaterFlowRate_ (this),
        SimFlowPlant_HeatRecovInletNodeName_ (this),
        SimFlowPlant_HeatRecovOutletNodeName_ (this),
        SimFlowPlant_BasinHeatCap_ (this),
        SimFlowPlant_BasinHeatSetpointTemp_ (this),
        SimFlowPlant_BasinHeatOperatSchedName_ (this),
        SimFlowPlant_CondHeatRecoveryRelativeCapFrac_ (this),
        SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_ (this),
        SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_ (this),
        T24ConstructStatus2_ (this),
        T24ChllerType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_Chiller::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_MinPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MinPartLoadRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MinPartLoadRatio_)
            {
              this->SimFlowPlant_MinPartLoadRatio_.set (SimFlowPlant_MinPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MaxPartLoadRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MaxPartLoadRatio_)
            {
              this->SimFlowPlant_MaxPartLoadRatio_.set (SimFlowPlant_MaxPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_OptimumPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_OptimumPartLoadRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_OptimumPartLoadRatio_)
            {
              this->SimFlowPlant_OptimumPartLoadRatio_.set (SimFlowPlant_OptimumPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SizingFactor
          //
          if (n.name () == "SimFlowPlant_SizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SizingFactor_)
            {
              this->SimFlowPlant_SizingFactor_.set (SimFlowPlant_SizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RefCap
          //
          if (n.name () == "SimFlowPlant_RefCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RefCap_)
            {
              this->SimFlowPlant_RefCap_.set (SimFlowPlant_RefCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RefCOP
          //
          if (n.name () == "SimFlowPlant_RefCOP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RefCOP_)
            {
              this->SimFlowPlant_RefCOP_.set (SimFlowPlant_RefCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RefLeavChilledWaterTemp
          //
          if (n.name () == "SimFlowPlant_RefLeavChilledWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RefLeavChilledWaterTemp_)
            {
              this->SimFlowPlant_RefLeavChilledWaterTemp_.set (SimFlowPlant_RefLeavChilledWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RefEnterCondFluidTemp
          //
          if (n.name () == "SimFlowPlant_RefEnterCondFluidTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RefEnterCondFluidTemp_)
            {
              this->SimFlowPlant_RefEnterCondFluidTemp_.set (SimFlowPlant_RefEnterCondFluidTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RefChilledWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_RefChilledWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RefChilledWaterFlowRate_)
            {
              this->SimFlowPlant_RefChilledWaterFlowRate_.set (SimFlowPlant_RefChilledWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RefCondenserFluidFlowRate
          //
          if (n.name () == "SimFlowPlant_RefCondenserFluidFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RefCondenserFluidFlowRate_)
            {
              this->SimFlowPlant_RefCondenserFluidFlowRate_.set (SimFlowPlant_RefCondenserFluidFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CoolingCapFuncTempCurveName
          //
          if (n.name () == "SimFlowPlant_CoolingCapFuncTempCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingCapFuncTempCurveName_type > r (
              SimFlowPlant_CoolingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CoolingCapFuncTempCurveName_)
            {
              this->SimFlowPlant_CoolingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_type > r (
              SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_)
            {
              this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName
          //
          if (n.name () == "SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type > r (
              SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_)
            {
              this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_MinUnloadingRatio
          //
          if (n.name () == "SimFlowPlant_MinUnloadingRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MinUnloadingRatio_)
            {
              this->SimFlowPlant_MinUnloadingRatio_.set (SimFlowPlant_MinUnloadingRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ChilledWaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_ChilledWaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ChilledWaterInletNodeName_type > r (
              SimFlowPlant_ChilledWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ChilledWaterInletNodeName_)
            {
              this->SimFlowPlant_ChilledWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ChilledWaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_ChilledWaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ChilledWaterOutletNodeName_type > r (
              SimFlowPlant_ChilledWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ChilledWaterOutletNodeName_)
            {
              this->SimFlowPlant_ChilledWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondInletNodeName
          //
          if (n.name () == "SimFlowPlant_CondInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CondInletNodeName_type > r (
              SimFlowPlant_CondInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CondInletNodeName_)
            {
              this->SimFlowPlant_CondInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondOutletNodeName
          //
          if (n.name () == "SimFlowPlant_CondOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CondOutletNodeName_type > r (
              SimFlowPlant_CondOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CondOutletNodeName_)
            {
              this->SimFlowPlant_CondOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondType
          //
          if (n.name () == "SimFlowPlant_CondType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CondType_type > r (
              SimFlowPlant_CondType_traits::create (i, f, this));

            if (!this->SimFlowPlant_CondType_)
            {
              this->SimFlowPlant_CondType_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondFanPwrRatio
          //
          if (n.name () == "SimFlowPlant_CondFanPwrRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_CondFanPwrRatio_)
            {
              this->SimFlowPlant_CondFanPwrRatio_.set (SimFlowPlant_CondFanPwrRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FracOfCompElecConsupRejctByCond
          //
          if (n.name () == "SimFlowPlant_FracOfCompElecConsupRejctByCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FracOfCompElecConsupRejctByCond_)
            {
              this->SimFlowPlant_FracOfCompElecConsupRejctByCond_.set (SimFlowPlant_FracOfCompElecConsupRejctByCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_LeavChilledWaterLowTempLimit
          //
          if (n.name () == "SimFlowPlant_LeavChilledWaterLowTempLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_LeavChilledWaterLowTempLimit_)
            {
              this->SimFlowPlant_LeavChilledWaterLowTempLimit_.set (SimFlowPlant_LeavChilledWaterLowTempLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ChillerFlowMode
          //
          if (n.name () == "SimFlowPlant_ChillerFlowMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ChillerFlowMode_type > r (
              SimFlowPlant_ChillerFlowMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_ChillerFlowMode_)
            {
              this->SimFlowPlant_ChillerFlowMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DesignHeatRecovWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignHeatRecovWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DesignHeatRecovWaterFlowRate_)
            {
              this->SimFlowPlant_DesignHeatRecovWaterFlowRate_.set (SimFlowPlant_DesignHeatRecovWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HeatRecovInletNodeName
          //
          if (n.name () == "SimFlowPlant_HeatRecovInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatRecovInletNodeName_type > r (
              SimFlowPlant_HeatRecovInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatRecovInletNodeName_)
            {
              this->SimFlowPlant_HeatRecovInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatRecovOutletNodeName
          //
          if (n.name () == "SimFlowPlant_HeatRecovOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatRecovOutletNodeName_type > r (
              SimFlowPlant_HeatRecovOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatRecovOutletNodeName_)
            {
              this->SimFlowPlant_HeatRecovOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_BasinHeatCap
          //
          if (n.name () == "SimFlowPlant_BasinHeatCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_BasinHeatCap_)
            {
              this->SimFlowPlant_BasinHeatCap_.set (SimFlowPlant_BasinHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BasinHeatSetpointTemp
          //
          if (n.name () == "SimFlowPlant_BasinHeatSetpointTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_BasinHeatSetpointTemp_)
            {
              this->SimFlowPlant_BasinHeatSetpointTemp_.set (SimFlowPlant_BasinHeatSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BasinHeatOperatSchedName
          //
          if (n.name () == "SimFlowPlant_BasinHeatOperatSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BasinHeatOperatSchedName_type > r (
              SimFlowPlant_BasinHeatOperatSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BasinHeatOperatSchedName_)
            {
              this->SimFlowPlant_BasinHeatOperatSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondHeatRecoveryRelativeCapFrac
          //
          if (n.name () == "SimFlowPlant_CondHeatRecoveryRelativeCapFrac" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_)
            {
              this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_.set (SimFlowPlant_CondHeatRecoveryRelativeCapFrac_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName
          //
          if (n.name () == "SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_type > r (
              SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_)
            {
              this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName
          //
          if (n.name () == "SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_type > r (
              SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_)
            {
              this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_.set (r);
              continue;
            }
          }

          // T24ConstructStatus2
          //
          if (n.name () == "T24ConstructStatus2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24ConstructStatus2_type > r (
              T24ConstructStatus2_traits::create (i, f, this));

            if (!this->T24ConstructStatus2_)
            {
              this->T24ConstructStatus2_.set (r);
              continue;
            }
          }

          // T24ChllerType
          //
          if (n.name () == "T24ChllerType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24ChllerType_type > r (
              T24ChllerType_traits::create (i, f, this));

            if (!this->T24ChllerType_)
            {
              this->T24ChllerType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR* SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR (*this, f, c);
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR& SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      operator= (const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_Chiller& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_MinPartLoadRatio_ = x.SimFlowPlant_MinPartLoadRatio_;
          this->SimFlowPlant_MaxPartLoadRatio_ = x.SimFlowPlant_MaxPartLoadRatio_;
          this->SimFlowPlant_OptimumPartLoadRatio_ = x.SimFlowPlant_OptimumPartLoadRatio_;
          this->SimFlowPlant_SizingFactor_ = x.SimFlowPlant_SizingFactor_;
          this->SimFlowPlant_RefCap_ = x.SimFlowPlant_RefCap_;
          this->SimFlowPlant_RefCOP_ = x.SimFlowPlant_RefCOP_;
          this->SimFlowPlant_RefLeavChilledWaterTemp_ = x.SimFlowPlant_RefLeavChilledWaterTemp_;
          this->SimFlowPlant_RefEnterCondFluidTemp_ = x.SimFlowPlant_RefEnterCondFluidTemp_;
          this->SimFlowPlant_RefChilledWaterFlowRate_ = x.SimFlowPlant_RefChilledWaterFlowRate_;
          this->SimFlowPlant_RefCondenserFluidFlowRate_ = x.SimFlowPlant_RefCondenserFluidFlowRate_;
          this->SimFlowPlant_CoolingCapFuncTempCurveName_ = x.SimFlowPlant_CoolingCapFuncTempCurveName_;
          this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ = x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_;
          this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ = x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
          this->SimFlowPlant_MinUnloadingRatio_ = x.SimFlowPlant_MinUnloadingRatio_;
          this->SimFlowPlant_ChilledWaterInletNodeName_ = x.SimFlowPlant_ChilledWaterInletNodeName_;
          this->SimFlowPlant_ChilledWaterOutletNodeName_ = x.SimFlowPlant_ChilledWaterOutletNodeName_;
          this->SimFlowPlant_CondInletNodeName_ = x.SimFlowPlant_CondInletNodeName_;
          this->SimFlowPlant_CondOutletNodeName_ = x.SimFlowPlant_CondOutletNodeName_;
          this->SimFlowPlant_CondType_ = x.SimFlowPlant_CondType_;
          this->SimFlowPlant_CondFanPwrRatio_ = x.SimFlowPlant_CondFanPwrRatio_;
          this->SimFlowPlant_FracOfCompElecConsupRejctByCond_ = x.SimFlowPlant_FracOfCompElecConsupRejctByCond_;
          this->SimFlowPlant_LeavChilledWaterLowTempLimit_ = x.SimFlowPlant_LeavChilledWaterLowTempLimit_;
          this->SimFlowPlant_ChillerFlowMode_ = x.SimFlowPlant_ChillerFlowMode_;
          this->SimFlowPlant_DesignHeatRecovWaterFlowRate_ = x.SimFlowPlant_DesignHeatRecovWaterFlowRate_;
          this->SimFlowPlant_HeatRecovInletNodeName_ = x.SimFlowPlant_HeatRecovInletNodeName_;
          this->SimFlowPlant_HeatRecovOutletNodeName_ = x.SimFlowPlant_HeatRecovOutletNodeName_;
          this->SimFlowPlant_BasinHeatCap_ = x.SimFlowPlant_BasinHeatCap_;
          this->SimFlowPlant_BasinHeatSetpointTemp_ = x.SimFlowPlant_BasinHeatSetpointTemp_;
          this->SimFlowPlant_BasinHeatOperatSchedName_ = x.SimFlowPlant_BasinHeatOperatSchedName_;
          this->SimFlowPlant_CondHeatRecoveryRelativeCapFrac_ = x.SimFlowPlant_CondHeatRecoveryRelativeCapFrac_;
          this->SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_ = x.SimFlowPlant_HeatRecoveryInletHighTempLimitSchedName_;
          this->SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_ = x.SimFlowPlant_HeatRecoveryLeavingTempSetpointNodeName_;
          this->T24ConstructStatus2_ = x.T24ConstructStatus2_;
          this->T24ChllerType_ = x.T24ChllerType_;
        }

        return *this;
      }

      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR::
      ~SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

