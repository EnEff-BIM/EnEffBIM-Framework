// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ElectricalGenerator_FuelCellAirSupply.hxx"

#include "simflowplant_constname_1_5.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellAirSupply
      // 

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirInNodeName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirInNodeName () const
      {
        return this->SimFlowPlant_AirInNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirInNodeName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirInNodeName ()
      {
        return this->SimFlowPlant_AirInNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_type& x)
      {
        this->SimFlowPlant_AirInNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_optional& x)
      {
        this->SimFlowPlant_AirInNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirInNodeName (::std::auto_ptr< SimFlowPlant_AirInNodeName_type > x)
      {
        this->SimFlowPlant_AirInNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_BlowerPwrCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerPwrCurveName () const
      {
        return this->SimFlowPlant_BlowerPwrCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_BlowerPwrCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerPwrCurveName ()
      {
        return this->SimFlowPlant_BlowerPwrCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerPwrCurveName (const SimFlowPlant_BlowerPwrCurveName_type& x)
      {
        this->SimFlowPlant_BlowerPwrCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerPwrCurveName (const SimFlowPlant_BlowerPwrCurveName_optional& x)
      {
        this->SimFlowPlant_BlowerPwrCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerPwrCurveName (::std::auto_ptr< SimFlowPlant_BlowerPwrCurveName_type > x)
      {
        this->SimFlowPlant_BlowerPwrCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_BlowerHeatLossFactor_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerHeatLossFactor () const
      {
        return this->SimFlowPlant_BlowerHeatLossFactor_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_BlowerHeatLossFactor_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerHeatLossFactor ()
      {
        return this->SimFlowPlant_BlowerHeatLossFactor_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerHeatLossFactor (const SimFlowPlant_BlowerHeatLossFactor_type& x)
      {
        this->SimFlowPlant_BlowerHeatLossFactor_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_BlowerHeatLossFactor (const SimFlowPlant_BlowerHeatLossFactor_optional& x)
      {
        this->SimFlowPlant_BlowerHeatLossFactor_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirSupplyRateCalcMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyRateCalcMode () const
      {
        return this->SimFlowPlant_AirSupplyRateCalcMode_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirSupplyRateCalcMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyRateCalcMode ()
      {
        return this->SimFlowPlant_AirSupplyRateCalcMode_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyRateCalcMode (const SimFlowPlant_AirSupplyRateCalcMode_type& x)
      {
        this->SimFlowPlant_AirSupplyRateCalcMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyRateCalcMode (const SimFlowPlant_AirSupplyRateCalcMode_optional& x)
      {
        this->SimFlowPlant_AirSupplyRateCalcMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyRateCalcMode (::std::auto_ptr< SimFlowPlant_AirSupplyRateCalcMode_type > x)
      {
        this->SimFlowPlant_AirSupplyRateCalcMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_StoichiometricRatio_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_StoichiometricRatio () const
      {
        return this->SimFlowPlant_StoichiometricRatio_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_StoichiometricRatio_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_StoichiometricRatio ()
      {
        return this->SimFlowPlant_StoichiometricRatio_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_StoichiometricRatio (const SimFlowPlant_StoichiometricRatio_type& x)
      {
        this->SimFlowPlant_StoichiometricRatio_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_StoichiometricRatio (const SimFlowPlant_StoichiometricRatio_optional& x)
      {
        this->SimFlowPlant_StoichiometricRatio_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirRateFuncElecPwrCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncElecPwrCurveName () const
      {
        return this->SimFlowPlant_AirRateFuncElecPwrCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirRateFuncElecPwrCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncElecPwrCurveName ()
      {
        return this->SimFlowPlant_AirRateFuncElecPwrCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncElecPwrCurveName (const SimFlowPlant_AirRateFuncElecPwrCurveName_type& x)
      {
        this->SimFlowPlant_AirRateFuncElecPwrCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncElecPwrCurveName (const SimFlowPlant_AirRateFuncElecPwrCurveName_optional& x)
      {
        this->SimFlowPlant_AirRateFuncElecPwrCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncElecPwrCurveName (::std::auto_ptr< SimFlowPlant_AirRateFuncElecPwrCurveName_type > x)
      {
        this->SimFlowPlant_AirRateFuncElecPwrCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirRateAirTempCoef_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateAirTempCoef () const
      {
        return this->SimFlowPlant_AirRateAirTempCoef_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirRateAirTempCoef_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateAirTempCoef ()
      {
        return this->SimFlowPlant_AirRateAirTempCoef_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateAirTempCoef (const SimFlowPlant_AirRateAirTempCoef_type& x)
      {
        this->SimFlowPlant_AirRateAirTempCoef_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateAirTempCoef (const SimFlowPlant_AirRateAirTempCoef_optional& x)
      {
        this->SimFlowPlant_AirRateAirTempCoef_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirRateFuncFuelRateCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncFuelRateCurveName () const
      {
        return this->SimFlowPlant_AirRateFuncFuelRateCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirRateFuncFuelRateCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncFuelRateCurveName ()
      {
        return this->SimFlowPlant_AirRateFuncFuelRateCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncFuelRateCurveName (const SimFlowPlant_AirRateFuncFuelRateCurveName_type& x)
      {
        this->SimFlowPlant_AirRateFuncFuelRateCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncFuelRateCurveName (const SimFlowPlant_AirRateFuncFuelRateCurveName_optional& x)
      {
        this->SimFlowPlant_AirRateFuncFuelRateCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirRateFuncFuelRateCurveName (::std::auto_ptr< SimFlowPlant_AirRateFuncFuelRateCurveName_type > x)
      {
        this->SimFlowPlant_AirRateFuncFuelRateCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirtakeHeatRecovMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirtakeHeatRecovMode () const
      {
        return this->SimFlowPlant_AirtakeHeatRecovMode_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirtakeHeatRecovMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirtakeHeatRecovMode ()
      {
        return this->SimFlowPlant_AirtakeHeatRecovMode_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirtakeHeatRecovMode (const SimFlowPlant_AirtakeHeatRecovMode_type& x)
      {
        this->SimFlowPlant_AirtakeHeatRecovMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirtakeHeatRecovMode (const SimFlowPlant_AirtakeHeatRecovMode_optional& x)
      {
        this->SimFlowPlant_AirtakeHeatRecovMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirtakeHeatRecovMode (::std::auto_ptr< SimFlowPlant_AirtakeHeatRecovMode_type > x)
      {
        this->SimFlowPlant_AirtakeHeatRecovMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirSupplyConstMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyConstMode () const
      {
        return this->SimFlowPlant_AirSupplyConstMode_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_AirSupplyConstMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyConstMode ()
      {
        return this->SimFlowPlant_AirSupplyConstMode_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyConstMode (const SimFlowPlant_AirSupplyConstMode_type& x)
      {
        this->SimFlowPlant_AirSupplyConstMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyConstMode (const SimFlowPlant_AirSupplyConstMode_optional& x)
      {
        this->SimFlowPlant_AirSupplyConstMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_AirSupplyConstMode (::std::auto_ptr< SimFlowPlant_AirSupplyConstMode_type > x)
      {
        this->SimFlowPlant_AirSupplyConstMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_NumUserDefinedConsts_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_NumUserDefinedConsts () const
      {
        return this->SimFlowPlant_NumUserDefinedConsts_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_NumUserDefinedConsts_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_NumUserDefinedConsts ()
      {
        return this->SimFlowPlant_NumUserDefinedConsts_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_NumUserDefinedConsts (const SimFlowPlant_NumUserDefinedConsts_type& x)
      {
        this->SimFlowPlant_NumUserDefinedConsts_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_NumUserDefinedConsts (const SimFlowPlant_NumUserDefinedConsts_optional& x)
      {
        this->SimFlowPlant_NumUserDefinedConsts_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_ConstName_1_5_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ConstName_1_5 () const
      {
        return this->SimFlowPlant_ConstName_1_5_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_ConstName_1_5_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ConstName_1_5 ()
      {
        return this->SimFlowPlant_ConstName_1_5_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ConstName_1_5 (const SimFlowPlant_ConstName_1_5_type& x)
      {
        this->SimFlowPlant_ConstName_1_5_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ConstName_1_5 (const SimFlowPlant_ConstName_1_5_optional& x)
      {
        this->SimFlowPlant_ConstName_1_5_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ConstName_1_5 (::std::auto_ptr< SimFlowPlant_ConstName_1_5_type > x)
      {
        this->SimFlowPlant_ConstName_1_5_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_MolarFract_1_5_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_MolarFract_1_5 () const
      {
        return this->SimFlowPlant_MolarFract_1_5_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::SimFlowPlant_MolarFract_1_5_optional& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_MolarFract_1_5 ()
      {
        return this->SimFlowPlant_MolarFract_1_5_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_MolarFract_1_5 (const SimFlowPlant_MolarFract_1_5_type& x)
      {
        this->SimFlowPlant_MolarFract_1_5_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_MolarFract_1_5 (const SimFlowPlant_MolarFract_1_5_optional& x)
      {
        this->SimFlowPlant_MolarFract_1_5_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_MolarFract_1_5 (::std::auto_ptr< SimFlowPlant_MolarFract_1_5_type > x)
      {
        this->SimFlowPlant_MolarFract_1_5_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellAirSupply
      //

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply ()
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_BlowerPwrCurveName_ (this),
        SimFlowPlant_BlowerHeatLossFactor_ (this),
        SimFlowPlant_AirSupplyRateCalcMode_ (this),
        SimFlowPlant_StoichiometricRatio_ (this),
        SimFlowPlant_AirRateFuncElecPwrCurveName_ (this),
        SimFlowPlant_AirRateAirTempCoef_ (this),
        SimFlowPlant_AirRateFuncFuelRateCurveName_ (this),
        SimFlowPlant_AirtakeHeatRecovMode_ (this),
        SimFlowPlant_AirSupplyConstMode_ (this),
        SimFlowPlant_NumUserDefinedConsts_ (this),
        SimFlowPlant_ConstName_1_5_ (this),
        SimFlowPlant_MolarFract_1_5_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_BlowerPwrCurveName_ (this),
        SimFlowPlant_BlowerHeatLossFactor_ (this),
        SimFlowPlant_AirSupplyRateCalcMode_ (this),
        SimFlowPlant_StoichiometricRatio_ (this),
        SimFlowPlant_AirRateFuncElecPwrCurveName_ (this),
        SimFlowPlant_AirRateAirTempCoef_ (this),
        SimFlowPlant_AirRateFuncFuelRateCurveName_ (this),
        SimFlowPlant_AirtakeHeatRecovMode_ (this),
        SimFlowPlant_AirSupplyConstMode_ (this),
        SimFlowPlant_NumUserDefinedConsts_ (this),
        SimFlowPlant_ConstName_1_5_ (this),
        SimFlowPlant_MolarFract_1_5_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply (const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_AirInNodeName_ (x.SimFlowPlant_AirInNodeName_, f, this),
        SimFlowPlant_BlowerPwrCurveName_ (x.SimFlowPlant_BlowerPwrCurveName_, f, this),
        SimFlowPlant_BlowerHeatLossFactor_ (x.SimFlowPlant_BlowerHeatLossFactor_, f, this),
        SimFlowPlant_AirSupplyRateCalcMode_ (x.SimFlowPlant_AirSupplyRateCalcMode_, f, this),
        SimFlowPlant_StoichiometricRatio_ (x.SimFlowPlant_StoichiometricRatio_, f, this),
        SimFlowPlant_AirRateFuncElecPwrCurveName_ (x.SimFlowPlant_AirRateFuncElecPwrCurveName_, f, this),
        SimFlowPlant_AirRateAirTempCoef_ (x.SimFlowPlant_AirRateAirTempCoef_, f, this),
        SimFlowPlant_AirRateFuncFuelRateCurveName_ (x.SimFlowPlant_AirRateFuncFuelRateCurveName_, f, this),
        SimFlowPlant_AirtakeHeatRecovMode_ (x.SimFlowPlant_AirtakeHeatRecovMode_, f, this),
        SimFlowPlant_AirSupplyConstMode_ (x.SimFlowPlant_AirSupplyConstMode_, f, this),
        SimFlowPlant_NumUserDefinedConsts_ (x.SimFlowPlant_NumUserDefinedConsts_, f, this),
        SimFlowPlant_ConstName_1_5_ (x.SimFlowPlant_ConstName_1_5_, f, this),
        SimFlowPlant_MolarFract_1_5_ (x.SimFlowPlant_MolarFract_1_5_, f, this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_BlowerPwrCurveName_ (this),
        SimFlowPlant_BlowerHeatLossFactor_ (this),
        SimFlowPlant_AirSupplyRateCalcMode_ (this),
        SimFlowPlant_StoichiometricRatio_ (this),
        SimFlowPlant_AirRateFuncElecPwrCurveName_ (this),
        SimFlowPlant_AirRateAirTempCoef_ (this),
        SimFlowPlant_AirRateFuncFuelRateCurveName_ (this),
        SimFlowPlant_AirtakeHeatRecovMode_ (this),
        SimFlowPlant_AirSupplyConstMode_ (this),
        SimFlowPlant_NumUserDefinedConsts_ (this),
        SimFlowPlant_ConstName_1_5_ (this),
        SimFlowPlant_MolarFract_1_5_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirInNodeName
          //
          if (n.name () == "SimFlowPlant_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirInNodeName_type > r (
              SimFlowPlant_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirInNodeName_)
            {
              this->SimFlowPlant_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_BlowerPwrCurveName
          //
          if (n.name () == "SimFlowPlant_BlowerPwrCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BlowerPwrCurveName_type > r (
              SimFlowPlant_BlowerPwrCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BlowerPwrCurveName_)
            {
              this->SimFlowPlant_BlowerPwrCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_BlowerHeatLossFactor
          //
          if (n.name () == "SimFlowPlant_BlowerHeatLossFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_BlowerHeatLossFactor_)
            {
              this->SimFlowPlant_BlowerHeatLossFactor_.set (SimFlowPlant_BlowerHeatLossFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AirSupplyRateCalcMode
          //
          if (n.name () == "SimFlowPlant_AirSupplyRateCalcMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirSupplyRateCalcMode_type > r (
              SimFlowPlant_AirSupplyRateCalcMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirSupplyRateCalcMode_)
            {
              this->SimFlowPlant_AirSupplyRateCalcMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_StoichiometricRatio
          //
          if (n.name () == "SimFlowPlant_StoichiometricRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_StoichiometricRatio_)
            {
              this->SimFlowPlant_StoichiometricRatio_.set (SimFlowPlant_StoichiometricRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AirRateFuncElecPwrCurveName
          //
          if (n.name () == "SimFlowPlant_AirRateFuncElecPwrCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirRateFuncElecPwrCurveName_type > r (
              SimFlowPlant_AirRateFuncElecPwrCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirRateFuncElecPwrCurveName_)
            {
              this->SimFlowPlant_AirRateFuncElecPwrCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirRateAirTempCoef
          //
          if (n.name () == "SimFlowPlant_AirRateAirTempCoef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_AirRateAirTempCoef_)
            {
              this->SimFlowPlant_AirRateAirTempCoef_.set (SimFlowPlant_AirRateAirTempCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AirRateFuncFuelRateCurveName
          //
          if (n.name () == "SimFlowPlant_AirRateFuncFuelRateCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirRateFuncFuelRateCurveName_type > r (
              SimFlowPlant_AirRateFuncFuelRateCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirRateFuncFuelRateCurveName_)
            {
              this->SimFlowPlant_AirRateFuncFuelRateCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirtakeHeatRecovMode
          //
          if (n.name () == "SimFlowPlant_AirtakeHeatRecovMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirtakeHeatRecovMode_type > r (
              SimFlowPlant_AirtakeHeatRecovMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirtakeHeatRecovMode_)
            {
              this->SimFlowPlant_AirtakeHeatRecovMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirSupplyConstMode
          //
          if (n.name () == "SimFlowPlant_AirSupplyConstMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirSupplyConstMode_type > r (
              SimFlowPlant_AirSupplyConstMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirSupplyConstMode_)
            {
              this->SimFlowPlant_AirSupplyConstMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NumUserDefinedConsts
          //
          if (n.name () == "SimFlowPlant_NumUserDefinedConsts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NumUserDefinedConsts_)
            {
              this->SimFlowPlant_NumUserDefinedConsts_.set (SimFlowPlant_NumUserDefinedConsts_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ConstName_1_5
          //
          if (n.name () == "SimFlowPlant_ConstName_1_5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ConstName_1_5_type > r (
              SimFlowPlant_ConstName_1_5_traits::create (i, f, this));

            if (!this->SimFlowPlant_ConstName_1_5_)
            {
              this->SimFlowPlant_ConstName_1_5_.set (r);
              continue;
            }
          }

          // SimFlowPlant_MolarFract_1_5
          //
          if (n.name () == "SimFlowPlant_MolarFract_1_5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_MolarFract_1_5_type > r (
              SimFlowPlant_MolarFract_1_5_traits::create (i, f, this));

            if (!this->SimFlowPlant_MolarFract_1_5_)
            {
              this->SimFlowPlant_MolarFract_1_5_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply* SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ElectricalGenerator_FuelCellAirSupply (*this, f, c);
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply& SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      operator= (const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_AirInNodeName_ = x.SimFlowPlant_AirInNodeName_;
          this->SimFlowPlant_BlowerPwrCurveName_ = x.SimFlowPlant_BlowerPwrCurveName_;
          this->SimFlowPlant_BlowerHeatLossFactor_ = x.SimFlowPlant_BlowerHeatLossFactor_;
          this->SimFlowPlant_AirSupplyRateCalcMode_ = x.SimFlowPlant_AirSupplyRateCalcMode_;
          this->SimFlowPlant_StoichiometricRatio_ = x.SimFlowPlant_StoichiometricRatio_;
          this->SimFlowPlant_AirRateFuncElecPwrCurveName_ = x.SimFlowPlant_AirRateFuncElecPwrCurveName_;
          this->SimFlowPlant_AirRateAirTempCoef_ = x.SimFlowPlant_AirRateAirTempCoef_;
          this->SimFlowPlant_AirRateFuncFuelRateCurveName_ = x.SimFlowPlant_AirRateFuncFuelRateCurveName_;
          this->SimFlowPlant_AirtakeHeatRecovMode_ = x.SimFlowPlant_AirtakeHeatRecovMode_;
          this->SimFlowPlant_AirSupplyConstMode_ = x.SimFlowPlant_AirSupplyConstMode_;
          this->SimFlowPlant_NumUserDefinedConsts_ = x.SimFlowPlant_NumUserDefinedConsts_;
          this->SimFlowPlant_ConstName_1_5_ = x.SimFlowPlant_ConstName_1_5_;
          this->SimFlowPlant_MolarFract_1_5_ = x.SimFlowPlant_MolarFract_1_5_;
        }

        return *this;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply::
      ~SimFlowPlant_ElectricalGenerator_FuelCellAirSupply ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

