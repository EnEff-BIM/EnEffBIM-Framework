// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_TEMPLATE_ZONE_LOADS_HXX
#define SIM_TEMPLATE_ZONE_LOADS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimTemplateZoneLoads;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simtemplate.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class __declspec(dllexport) SimTemplateZoneLoads: public ::schema::simxml::SimModelCore::SimTemplate
      {
        public:
        // TemplateElectricalEquipment
        //
        typedef ::xml_schema::idrefs TemplateElectricalEquipment_type;
        typedef ::xsd::cxx::tree::optional< TemplateElectricalEquipment_type > TemplateElectricalEquipment_optional;
        typedef ::xsd::cxx::tree::traits< TemplateElectricalEquipment_type, char > TemplateElectricalEquipment_traits;

        const TemplateElectricalEquipment_optional&
        TemplateElectricalEquipment () const;

        TemplateElectricalEquipment_optional&
        TemplateElectricalEquipment ();

        void
        TemplateElectricalEquipment (const TemplateElectricalEquipment_type& x);

        void
        TemplateElectricalEquipment (const TemplateElectricalEquipment_optional& x);

        void
        TemplateElectricalEquipment (::std::auto_ptr< TemplateElectricalEquipment_type > p);

        // TemplateElecEqmt_Elevators
        //
        typedef ::xml_schema::idrefs TemplateElecEqmt_Elevators_type;
        typedef ::xsd::cxx::tree::optional< TemplateElecEqmt_Elevators_type > TemplateElecEqmt_Elevators_optional;
        typedef ::xsd::cxx::tree::traits< TemplateElecEqmt_Elevators_type, char > TemplateElecEqmt_Elevators_traits;

        const TemplateElecEqmt_Elevators_optional&
        TemplateElecEqmt_Elevators () const;

        TemplateElecEqmt_Elevators_optional&
        TemplateElecEqmt_Elevators ();

        void
        TemplateElecEqmt_Elevators (const TemplateElecEqmt_Elevators_type& x);

        void
        TemplateElecEqmt_Elevators (const TemplateElecEqmt_Elevators_optional& x);

        void
        TemplateElecEqmt_Elevators (::std::auto_ptr< TemplateElecEqmt_Elevators_type > p);

        // TemplateElecEqmt_Escalators
        //
        typedef ::xml_schema::idrefs TemplateElecEqmt_Escalators_type;
        typedef ::xsd::cxx::tree::optional< TemplateElecEqmt_Escalators_type > TemplateElecEqmt_Escalators_optional;
        typedef ::xsd::cxx::tree::traits< TemplateElecEqmt_Escalators_type, char > TemplateElecEqmt_Escalators_traits;

        const TemplateElecEqmt_Escalators_optional&
        TemplateElecEqmt_Escalators () const;

        TemplateElecEqmt_Escalators_optional&
        TemplateElecEqmt_Escalators ();

        void
        TemplateElecEqmt_Escalators (const TemplateElecEqmt_Escalators_type& x);

        void
        TemplateElecEqmt_Escalators (const TemplateElecEqmt_Escalators_optional& x);

        void
        TemplateElecEqmt_Escalators (::std::auto_ptr< TemplateElecEqmt_Escalators_type > p);

        // TemplateElecEqmt_Process
        //
        typedef ::xml_schema::idrefs TemplateElecEqmt_Process_type;
        typedef ::xsd::cxx::tree::optional< TemplateElecEqmt_Process_type > TemplateElecEqmt_Process_optional;
        typedef ::xsd::cxx::tree::traits< TemplateElecEqmt_Process_type, char > TemplateElecEqmt_Process_traits;

        const TemplateElecEqmt_Process_optional&
        TemplateElecEqmt_Process () const;

        TemplateElecEqmt_Process_optional&
        TemplateElecEqmt_Process ();

        void
        TemplateElecEqmt_Process (const TemplateElecEqmt_Process_type& x);

        void
        TemplateElecEqmt_Process (const TemplateElecEqmt_Process_optional& x);

        void
        TemplateElecEqmt_Process (::std::auto_ptr< TemplateElecEqmt_Process_type > p);

        // TemplateGasEquipment
        //
        typedef ::xml_schema::idrefs TemplateGasEquipment_type;
        typedef ::xsd::cxx::tree::optional< TemplateGasEquipment_type > TemplateGasEquipment_optional;
        typedef ::xsd::cxx::tree::traits< TemplateGasEquipment_type, char > TemplateGasEquipment_traits;

        const TemplateGasEquipment_optional&
        TemplateGasEquipment () const;

        TemplateGasEquipment_optional&
        TemplateGasEquipment ();

        void
        TemplateGasEquipment (const TemplateGasEquipment_type& x);

        void
        TemplateGasEquipment (const TemplateGasEquipment_optional& x);

        void
        TemplateGasEquipment (::std::auto_ptr< TemplateGasEquipment_type > p);

        // TemplateGasEqmt_Process
        //
        typedef ::xml_schema::idrefs TemplateGasEqmt_Process_type;
        typedef ::xsd::cxx::tree::optional< TemplateGasEqmt_Process_type > TemplateGasEqmt_Process_optional;
        typedef ::xsd::cxx::tree::traits< TemplateGasEqmt_Process_type, char > TemplateGasEqmt_Process_traits;

        const TemplateGasEqmt_Process_optional&
        TemplateGasEqmt_Process () const;

        TemplateGasEqmt_Process_optional&
        TemplateGasEqmt_Process ();

        void
        TemplateGasEqmt_Process (const TemplateGasEqmt_Process_type& x);

        void
        TemplateGasEqmt_Process (const TemplateGasEqmt_Process_optional& x);

        void
        TemplateGasEqmt_Process (::std::auto_ptr< TemplateGasEqmt_Process_type > p);

        // TemplateHotWaterEquipment
        //
        typedef ::xml_schema::idrefs TemplateHotWaterEquipment_type;
        typedef ::xsd::cxx::tree::optional< TemplateHotWaterEquipment_type > TemplateHotWaterEquipment_optional;
        typedef ::xsd::cxx::tree::traits< TemplateHotWaterEquipment_type, char > TemplateHotWaterEquipment_traits;

        const TemplateHotWaterEquipment_optional&
        TemplateHotWaterEquipment () const;

        TemplateHotWaterEquipment_optional&
        TemplateHotWaterEquipment ();

        void
        TemplateHotWaterEquipment (const TemplateHotWaterEquipment_type& x);

        void
        TemplateHotWaterEquipment (const TemplateHotWaterEquipment_optional& x);

        void
        TemplateHotWaterEquipment (::std::auto_ptr< TemplateHotWaterEquipment_type > p);

        // TemplateSteamEquipment
        //
        typedef ::xml_schema::idrefs TemplateSteamEquipment_type;
        typedef ::xsd::cxx::tree::optional< TemplateSteamEquipment_type > TemplateSteamEquipment_optional;
        typedef ::xsd::cxx::tree::traits< TemplateSteamEquipment_type, char > TemplateSteamEquipment_traits;

        const TemplateSteamEquipment_optional&
        TemplateSteamEquipment () const;

        TemplateSteamEquipment_optional&
        TemplateSteamEquipment ();

        void
        TemplateSteamEquipment (const TemplateSteamEquipment_type& x);

        void
        TemplateSteamEquipment (const TemplateSteamEquipment_optional& x);

        void
        TemplateSteamEquipment (::std::auto_ptr< TemplateSteamEquipment_type > p);

        // TemplateOtherEquipment
        //
        typedef ::xml_schema::idrefs TemplateOtherEquipment_type;
        typedef ::xsd::cxx::tree::optional< TemplateOtherEquipment_type > TemplateOtherEquipment_optional;
        typedef ::xsd::cxx::tree::traits< TemplateOtherEquipment_type, char > TemplateOtherEquipment_traits;

        const TemplateOtherEquipment_optional&
        TemplateOtherEquipment () const;

        TemplateOtherEquipment_optional&
        TemplateOtherEquipment ();

        void
        TemplateOtherEquipment (const TemplateOtherEquipment_type& x);

        void
        TemplateOtherEquipment (const TemplateOtherEquipment_optional& x);

        void
        TemplateOtherEquipment (::std::auto_ptr< TemplateOtherEquipment_type > p);

        // TemplatePeopleLoads
        //
        typedef ::xml_schema::idrefs TemplatePeopleLoads_type;
        typedef ::xsd::cxx::tree::optional< TemplatePeopleLoads_type > TemplatePeopleLoads_optional;
        typedef ::xsd::cxx::tree::traits< TemplatePeopleLoads_type, char > TemplatePeopleLoads_traits;

        const TemplatePeopleLoads_optional&
        TemplatePeopleLoads () const;

        TemplatePeopleLoads_optional&
        TemplatePeopleLoads ();

        void
        TemplatePeopleLoads (const TemplatePeopleLoads_type& x);

        void
        TemplatePeopleLoads (const TemplatePeopleLoads_optional& x);

        void
        TemplatePeopleLoads (::std::auto_ptr< TemplatePeopleLoads_type > p);

        // TemplateLightingLoads
        //
        typedef ::xml_schema::idrefs TemplateLightingLoads_type;
        typedef ::xsd::cxx::tree::optional< TemplateLightingLoads_type > TemplateLightingLoads_optional;
        typedef ::xsd::cxx::tree::traits< TemplateLightingLoads_type, char > TemplateLightingLoads_traits;

        const TemplateLightingLoads_optional&
        TemplateLightingLoads () const;

        TemplateLightingLoads_optional&
        TemplateLightingLoads ();

        void
        TemplateLightingLoads (const TemplateLightingLoads_type& x);

        void
        TemplateLightingLoads (const TemplateLightingLoads_optional& x);

        void
        TemplateLightingLoads (::std::auto_ptr< TemplateLightingLoads_type > p);

        // Constructors.
        //
        SimTemplateZoneLoads ();

        SimTemplateZoneLoads (const RefId_type&);

        SimTemplateZoneLoads (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        SimTemplateZoneLoads (const SimTemplateZoneLoads& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        virtual SimTemplateZoneLoads*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimTemplateZoneLoads&
        operator= (const SimTemplateZoneLoads& x);

        virtual 
        ~SimTemplateZoneLoads ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        TemplateElectricalEquipment_optional TemplateElectricalEquipment_;
        TemplateElecEqmt_Elevators_optional TemplateElecEqmt_Elevators_;
        TemplateElecEqmt_Escalators_optional TemplateElecEqmt_Escalators_;
        TemplateElecEqmt_Process_optional TemplateElecEqmt_Process_;
        TemplateGasEquipment_optional TemplateGasEquipment_;
        TemplateGasEqmt_Process_optional TemplateGasEqmt_Process_;
        TemplateHotWaterEquipment_optional TemplateHotWaterEquipment_;
        TemplateSteamEquipment_optional TemplateSteamEquipment_;
        TemplateOtherEquipment_optional TemplateOtherEquipment_;
        TemplatePeopleLoads_optional TemplatePeopleLoads_;
        TemplateLightingLoads_optional TemplateLightingLoads_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_TEMPLATE_ZONE_LOADS_HXX
