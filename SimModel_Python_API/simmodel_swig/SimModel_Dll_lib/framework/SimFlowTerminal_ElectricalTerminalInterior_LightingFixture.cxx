// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_ElectricalTerminalInterior_LightingFixture.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_ElectricalTerminalInterior_LightingFixture
      // 

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24FixtureType_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24FixtureType () const
      {
        return this->T24FixtureType_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24FixtureType_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24FixtureType ()
      {
        return this->T24FixtureType_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24FixtureType (const T24FixtureType_type& x)
      {
        this->T24FixtureType_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24FixtureType (const T24FixtureType_optional& x)
      {
        this->T24FixtureType_ = x;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24FixtureType (::std::auto_ptr< T24FixtureType_type > x)
      {
        this->T24FixtureType_.set (x);
      }

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24HeatGainRadiantFraction_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainRadiantFraction () const
      {
        return this->T24HeatGainRadiantFraction_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24HeatGainRadiantFraction_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainRadiantFraction ()
      {
        return this->T24HeatGainRadiantFraction_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainRadiantFraction (const T24HeatGainRadiantFraction_type& x)
      {
        this->T24HeatGainRadiantFraction_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainRadiantFraction (const T24HeatGainRadiantFraction_optional& x)
      {
        this->T24HeatGainRadiantFraction_ = x;
      }

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24HeatGainSpaceFraction_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainSpaceFraction () const
      {
        return this->T24HeatGainSpaceFraction_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24HeatGainSpaceFraction_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainSpaceFraction ()
      {
        return this->T24HeatGainSpaceFraction_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainSpaceFraction (const T24HeatGainSpaceFraction_type& x)
      {
        this->T24HeatGainSpaceFraction_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24HeatGainSpaceFraction (const T24HeatGainSpaceFraction_optional& x)
      {
        this->T24HeatGainSpaceFraction_ = x;
      }

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24LampType_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LampType () const
      {
        return this->T24LampType_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24LampType_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LampType ()
      {
        return this->T24LampType_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LampType (const T24LampType_type& x)
      {
        this->T24LampType_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LampType (const T24LampType_optional& x)
      {
        this->T24LampType_ = x;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LampType (::std::auto_ptr< T24LampType_type > x)
      {
        this->T24LampType_.set (x);
      }

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24LuminaireDescriptionReport_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LuminaireDescriptionReport () const
      {
        return this->T24LuminaireDescriptionReport_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24LuminaireDescriptionReport_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LuminaireDescriptionReport ()
      {
        return this->T24LuminaireDescriptionReport_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LuminaireDescriptionReport (const T24LuminaireDescriptionReport_type& x)
      {
        this->T24LuminaireDescriptionReport_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LuminaireDescriptionReport (const T24LuminaireDescriptionReport_optional& x)
      {
        this->T24LuminaireDescriptionReport_ = x;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24LuminaireDescriptionReport (::std::auto_ptr< T24LuminaireDescriptionReport_type > x)
      {
        this->T24LuminaireDescriptionReport_.set (x);
      }

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24Power_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24Power () const
      {
        return this->T24Power_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24Power_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24Power ()
      {
        return this->T24Power_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24Power (const T24Power_type& x)
      {
        this->T24Power_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24Power (const T24Power_optional& x)
      {
        this->T24Power_ = x;
      }

      const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24PowerNA8Default_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24PowerNA8Default () const
      {
        return this->T24PowerNA8Default_;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::T24PowerNA8Default_optional& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24PowerNA8Default ()
      {
        return this->T24PowerNA8Default_;
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24PowerNA8Default (const T24PowerNA8Default_type& x)
      {
        this->T24PowerNA8Default_.set (x);
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      T24PowerNA8Default (const T24PowerNA8Default_optional& x)
      {
        this->T24PowerNA8Default_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_ElectricalTerminalInterior_LightingFixture
      //

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture ()
      : ::schema::simxml::MepModel::SimFlowTerminal_ElectricalTerminalInterior (),
        T24FixtureType_ (this),
        T24HeatGainRadiantFraction_ (this),
        T24HeatGainSpaceFraction_ (this),
        T24LampType_ (this),
        T24LuminaireDescriptionReport_ (this),
        T24Power_ (this),
        T24PowerNA8Default_ (this)
      {
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowTerminal_ElectricalTerminalInterior (RefId),
        T24FixtureType_ (this),
        T24HeatGainRadiantFraction_ (this),
        T24HeatGainSpaceFraction_ (this),
        T24LampType_ (this),
        T24LuminaireDescriptionReport_ (this),
        T24Power_ (this),
        T24PowerNA8Default_ (this)
      {
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture (const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture& x,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_ElectricalTerminalInterior (x, f, c),
        T24FixtureType_ (x.T24FixtureType_, f, this),
        T24HeatGainRadiantFraction_ (x.T24HeatGainRadiantFraction_, f, this),
        T24HeatGainSpaceFraction_ (x.T24HeatGainSpaceFraction_, f, this),
        T24LampType_ (x.T24LampType_, f, this),
        T24LuminaireDescriptionReport_ (x.T24LuminaireDescriptionReport_, f, this),
        T24Power_ (x.T24Power_, f, this),
        T24PowerNA8Default_ (x.T24PowerNA8Default_, f, this)
      {
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture (const ::xercesc::DOMElement& e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_ElectricalTerminalInterior (e, f | ::xml_schema::flags::base, c),
        T24FixtureType_ (this),
        T24HeatGainRadiantFraction_ (this),
        T24HeatGainSpaceFraction_ (this),
        T24LampType_ (this),
        T24LuminaireDescriptionReport_ (this),
        T24Power_ (this),
        T24PowerNA8Default_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowTerminal_ElectricalTerminalInterior::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // T24FixtureType
          //
          if (n.name () == "T24FixtureType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24FixtureType_type > r (
              T24FixtureType_traits::create (i, f, this));

            if (!this->T24FixtureType_)
            {
              this->T24FixtureType_.set (r);
              continue;
            }
          }

          // T24HeatGainRadiantFraction
          //
          if (n.name () == "T24HeatGainRadiantFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24HeatGainRadiantFraction_)
            {
              this->T24HeatGainRadiantFraction_.set (T24HeatGainRadiantFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24HeatGainSpaceFraction
          //
          if (n.name () == "T24HeatGainSpaceFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24HeatGainSpaceFraction_)
            {
              this->T24HeatGainSpaceFraction_.set (T24HeatGainSpaceFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24LampType
          //
          if (n.name () == "T24LampType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24LampType_type > r (
              T24LampType_traits::create (i, f, this));

            if (!this->T24LampType_)
            {
              this->T24LampType_.set (r);
              continue;
            }
          }

          // T24LuminaireDescriptionReport
          //
          if (n.name () == "T24LuminaireDescriptionReport" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24LuminaireDescriptionReport_type > r (
              T24LuminaireDescriptionReport_traits::create (i, f, this));

            if (!this->T24LuminaireDescriptionReport_)
            {
              this->T24LuminaireDescriptionReport_.set (r);
              continue;
            }
          }

          // T24Power
          //
          if (n.name () == "T24Power" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24Power_)
            {
              this->T24Power_.set (T24Power_traits::create (i, f, this));
              continue;
            }
          }

          // T24PowerNA8Default
          //
          if (n.name () == "T24PowerNA8Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24PowerNA8Default_)
            {
              this->T24PowerNA8Default_.set (T24PowerNA8Default_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture* SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_ElectricalTerminalInterior_LightingFixture (*this, f, c);
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture& SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      operator= (const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowTerminal_ElectricalTerminalInterior& > (*this) = x;
          this->T24FixtureType_ = x.T24FixtureType_;
          this->T24HeatGainRadiantFraction_ = x.T24HeatGainRadiantFraction_;
          this->T24HeatGainSpaceFraction_ = x.T24HeatGainSpaceFraction_;
          this->T24LampType_ = x.T24LampType_;
          this->T24LuminaireDescriptionReport_ = x.T24LuminaireDescriptionReport_;
          this->T24Power_ = x.T24Power_;
          this->T24PowerNA8Default_ = x.T24PowerNA8Default_;
        }

        return *this;
      }

      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture::
      ~SimFlowTerminal_ElectricalTerminalInterior_LightingFixture ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

