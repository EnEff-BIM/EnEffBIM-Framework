// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater
      // 

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_ExcessAirRatio_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ExcessAirRatio () const
      {
        return this->SimFlowPlant_ExcessAirRatio_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_ExcessAirRatio_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ExcessAirRatio ()
      {
        return this->SimFlowPlant_ExcessAirRatio_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ExcessAirRatio (const SimFlowPlant_ExcessAirRatio_type& x)
      {
        this->SimFlowPlant_ExcessAirRatio_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ExcessAirRatio (const SimFlowPlant_ExcessAirRatio_optional& x)
      {
        this->SimFlowPlant_ExcessAirRatio_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_AncilliaryPowerConstantTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerConstantTerm () const
      {
        return this->SimFlowPlant_AncilliaryPowerConstantTerm_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_AncilliaryPowerConstantTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerConstantTerm ()
      {
        return this->SimFlowPlant_AncilliaryPowerConstantTerm_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerConstantTerm (const SimFlowPlant_AncilliaryPowerConstantTerm_type& x)
      {
        this->SimFlowPlant_AncilliaryPowerConstantTerm_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerConstantTerm (const SimFlowPlant_AncilliaryPowerConstantTerm_optional& x)
      {
        this->SimFlowPlant_AncilliaryPowerConstantTerm_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_AncilliaryPowerLinearTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerLinearTerm () const
      {
        return this->SimFlowPlant_AncilliaryPowerLinearTerm_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_AncilliaryPowerLinearTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerLinearTerm ()
      {
        return this->SimFlowPlant_AncilliaryPowerLinearTerm_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerLinearTerm (const SimFlowPlant_AncilliaryPowerLinearTerm_type& x)
      {
        this->SimFlowPlant_AncilliaryPowerLinearTerm_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_AncilliaryPowerLinearTerm (const SimFlowPlant_AncilliaryPowerLinearTerm_optional& x)
      {
        this->SimFlowPlant_AncilliaryPowerLinearTerm_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_SkinLossU_FactorTimesAreaValue_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossU_FactorTimesAreaValue () const
      {
        return this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_SkinLossU_FactorTimesAreaValue_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossU_FactorTimesAreaValue ()
      {
        return this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossU_FactorTimesAreaValue (const SimFlowPlant_SkinLossU_FactorTimesAreaValue_type& x)
      {
        this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossU_FactorTimesAreaValue (const SimFlowPlant_SkinLossU_FactorTimesAreaValue_optional& x)
      {
        this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_SkinLossDestination_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossDestination () const
      {
        return this->SimFlowPlant_SkinLossDestination_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_SkinLossDestination_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossDestination ()
      {
        return this->SimFlowPlant_SkinLossDestination_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossDestination (const SimFlowPlant_SkinLossDestination_type& x)
      {
        this->SimFlowPlant_SkinLossDestination_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossDestination (const SimFlowPlant_SkinLossDestination_optional& x)
      {
        this->SimFlowPlant_SkinLossDestination_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_SkinLossDestination (::std::auto_ptr< SimFlowPlant_SkinLossDestination_type > x)
      {
        this->SimFlowPlant_SkinLossDestination_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_ZoneNametoReceiveSkinLosses_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ZoneNametoReceiveSkinLosses () const
      {
        return this->SimFlowPlant_ZoneNametoReceiveSkinLosses_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_ZoneNametoReceiveSkinLosses_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ZoneNametoReceiveSkinLosses ()
      {
        return this->SimFlowPlant_ZoneNametoReceiveSkinLosses_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ZoneNametoReceiveSkinLosses (const SimFlowPlant_ZoneNametoReceiveSkinLosses_type& x)
      {
        this->SimFlowPlant_ZoneNametoReceiveSkinLosses_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ZoneNametoReceiveSkinLosses (const SimFlowPlant_ZoneNametoReceiveSkinLosses_optional& x)
      {
        this->SimFlowPlant_ZoneNametoReceiveSkinLosses_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ZoneNametoReceiveSkinLosses (::std::auto_ptr< SimFlowPlant_ZoneNametoReceiveSkinLosses_type > x)
      {
        this->SimFlowPlant_ZoneNametoReceiveSkinLosses_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_HeatingCapacityUnits_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_HeatingCapacityUnits () const
      {
        return this->SimFlowPlant_HeatingCapacityUnits_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_HeatingCapacityUnits_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_HeatingCapacityUnits ()
      {
        return this->SimFlowPlant_HeatingCapacityUnits_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_HeatingCapacityUnits (const SimFlowPlant_HeatingCapacityUnits_type& x)
      {
        this->SimFlowPlant_HeatingCapacityUnits_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_HeatingCapacityUnits (const SimFlowPlant_HeatingCapacityUnits_optional& x)
      {
        this->SimFlowPlant_HeatingCapacityUnits_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_HeatingCapacityUnits (::std::auto_ptr< SimFlowPlant_HeatingCapacityUnits_type > x)
      {
        this->SimFlowPlant_HeatingCapacityUnits_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MaxHeatingCapacityinWatts_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinWatts () const
      {
        return this->SimFlowPlant_MaxHeatingCapacityinWatts_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MaxHeatingCapacityinWatts_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinWatts ()
      {
        return this->SimFlowPlant_MaxHeatingCapacityinWatts_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinWatts (const SimFlowPlant_MaxHeatingCapacityinWatts_type& x)
      {
        this->SimFlowPlant_MaxHeatingCapacityinWatts_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinWatts (const SimFlowPlant_MaxHeatingCapacityinWatts_optional& x)
      {
        this->SimFlowPlant_MaxHeatingCapacityinWatts_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MinHeatingCapacityinWatts_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinWatts () const
      {
        return this->SimFlowPlant_MinHeatingCapacityinWatts_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MinHeatingCapacityinWatts_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinWatts ()
      {
        return this->SimFlowPlant_MinHeatingCapacityinWatts_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinWatts (const SimFlowPlant_MinHeatingCapacityinWatts_type& x)
      {
        this->SimFlowPlant_MinHeatingCapacityinWatts_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinWatts (const SimFlowPlant_MinHeatingCapacityinWatts_optional& x)
      {
        this->SimFlowPlant_MinHeatingCapacityinWatts_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MaxHeatingCapacityinKmolperSecond_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinKmolperSecond () const
      {
        return this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MaxHeatingCapacityinKmolperSecond_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinKmolperSecond ()
      {
        return this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinKmolperSecond (const SimFlowPlant_MaxHeatingCapacityinKmolperSecond_type& x)
      {
        this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MaxHeatingCapacityinKmolperSecond (const SimFlowPlant_MaxHeatingCapacityinKmolperSecond_optional& x)
      {
        this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MinHeatingCapacityinKmolperSecond_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinKmolperSecond () const
      {
        return this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::SimFlowPlant_MinHeatingCapacityinKmolperSecond_optional& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinKmolperSecond ()
      {
        return this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinKmolperSecond (const SimFlowPlant_MinHeatingCapacityinKmolperSecond_type& x)
      {
        this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_MinHeatingCapacityinKmolperSecond (const SimFlowPlant_MinHeatingCapacityinKmolperSecond_optional& x)
      {
        this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater
      //

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater ()
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_ExcessAirRatio_ (this),
        SimFlowPlant_AncilliaryPowerConstantTerm_ (this),
        SimFlowPlant_AncilliaryPowerLinearTerm_ (this),
        SimFlowPlant_SkinLossU_FactorTimesAreaValue_ (this),
        SimFlowPlant_SkinLossDestination_ (this),
        SimFlowPlant_ZoneNametoReceiveSkinLosses_ (this),
        SimFlowPlant_HeatingCapacityUnits_ (this),
        SimFlowPlant_MaxHeatingCapacityinWatts_ (this),
        SimFlowPlant_MinHeatingCapacityinWatts_ (this),
        SimFlowPlant_MaxHeatingCapacityinKmolperSecond_ (this),
        SimFlowPlant_MinHeatingCapacityinKmolperSecond_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_ExcessAirRatio_ (this),
        SimFlowPlant_AncilliaryPowerConstantTerm_ (this),
        SimFlowPlant_AncilliaryPowerLinearTerm_ (this),
        SimFlowPlant_SkinLossU_FactorTimesAreaValue_ (this),
        SimFlowPlant_SkinLossDestination_ (this),
        SimFlowPlant_ZoneNametoReceiveSkinLosses_ (this),
        SimFlowPlant_HeatingCapacityUnits_ (this),
        SimFlowPlant_MaxHeatingCapacityinWatts_ (this),
        SimFlowPlant_MinHeatingCapacityinWatts_ (this),
        SimFlowPlant_MaxHeatingCapacityinKmolperSecond_ (this),
        SimFlowPlant_MinHeatingCapacityinKmolperSecond_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater (const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_ExcessAirRatio_ (x.SimFlowPlant_ExcessAirRatio_, f, this),
        SimFlowPlant_AncilliaryPowerConstantTerm_ (x.SimFlowPlant_AncilliaryPowerConstantTerm_, f, this),
        SimFlowPlant_AncilliaryPowerLinearTerm_ (x.SimFlowPlant_AncilliaryPowerLinearTerm_, f, this),
        SimFlowPlant_SkinLossU_FactorTimesAreaValue_ (x.SimFlowPlant_SkinLossU_FactorTimesAreaValue_, f, this),
        SimFlowPlant_SkinLossDestination_ (x.SimFlowPlant_SkinLossDestination_, f, this),
        SimFlowPlant_ZoneNametoReceiveSkinLosses_ (x.SimFlowPlant_ZoneNametoReceiveSkinLosses_, f, this),
        SimFlowPlant_HeatingCapacityUnits_ (x.SimFlowPlant_HeatingCapacityUnits_, f, this),
        SimFlowPlant_MaxHeatingCapacityinWatts_ (x.SimFlowPlant_MaxHeatingCapacityinWatts_, f, this),
        SimFlowPlant_MinHeatingCapacityinWatts_ (x.SimFlowPlant_MinHeatingCapacityinWatts_, f, this),
        SimFlowPlant_MaxHeatingCapacityinKmolperSecond_ (x.SimFlowPlant_MaxHeatingCapacityinKmolperSecond_, f, this),
        SimFlowPlant_MinHeatingCapacityinKmolperSecond_ (x.SimFlowPlant_MinHeatingCapacityinKmolperSecond_, f, this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_ExcessAirRatio_ (this),
        SimFlowPlant_AncilliaryPowerConstantTerm_ (this),
        SimFlowPlant_AncilliaryPowerLinearTerm_ (this),
        SimFlowPlant_SkinLossU_FactorTimesAreaValue_ (this),
        SimFlowPlant_SkinLossDestination_ (this),
        SimFlowPlant_ZoneNametoReceiveSkinLosses_ (this),
        SimFlowPlant_HeatingCapacityUnits_ (this),
        SimFlowPlant_MaxHeatingCapacityinWatts_ (this),
        SimFlowPlant_MinHeatingCapacityinWatts_ (this),
        SimFlowPlant_MaxHeatingCapacityinKmolperSecond_ (this),
        SimFlowPlant_MinHeatingCapacityinKmolperSecond_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ExcessAirRatio
          //
          if (n.name () == "SimFlowPlant_ExcessAirRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_ExcessAirRatio_)
            {
              this->SimFlowPlant_ExcessAirRatio_.set (SimFlowPlant_ExcessAirRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AncilliaryPowerConstantTerm
          //
          if (n.name () == "SimFlowPlant_AncilliaryPowerConstantTerm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_AncilliaryPowerConstantTerm_)
            {
              this->SimFlowPlant_AncilliaryPowerConstantTerm_.set (SimFlowPlant_AncilliaryPowerConstantTerm_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AncilliaryPowerLinearTerm
          //
          if (n.name () == "SimFlowPlant_AncilliaryPowerLinearTerm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_AncilliaryPowerLinearTerm_)
            {
              this->SimFlowPlant_AncilliaryPowerLinearTerm_.set (SimFlowPlant_AncilliaryPowerLinearTerm_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SkinLossU_FactorTimesAreaValue
          //
          if (n.name () == "SimFlowPlant_SkinLossU_FactorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_)
            {
              this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_.set (SimFlowPlant_SkinLossU_FactorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SkinLossDestination
          //
          if (n.name () == "SimFlowPlant_SkinLossDestination" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SkinLossDestination_type > r (
              SimFlowPlant_SkinLossDestination_traits::create (i, f, this));

            if (!this->SimFlowPlant_SkinLossDestination_)
            {
              this->SimFlowPlant_SkinLossDestination_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ZoneNametoReceiveSkinLosses
          //
          if (n.name () == "SimFlowPlant_ZoneNametoReceiveSkinLosses" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ZoneNametoReceiveSkinLosses_type > r (
              SimFlowPlant_ZoneNametoReceiveSkinLosses_traits::create (i, f, this));

            if (!this->SimFlowPlant_ZoneNametoReceiveSkinLosses_)
            {
              this->SimFlowPlant_ZoneNametoReceiveSkinLosses_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatingCapacityUnits
          //
          if (n.name () == "SimFlowPlant_HeatingCapacityUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatingCapacityUnits_type > r (
              SimFlowPlant_HeatingCapacityUnits_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatingCapacityUnits_)
            {
              this->SimFlowPlant_HeatingCapacityUnits_.set (r);
              continue;
            }
          }

          // SimFlowPlant_MaxHeatingCapacityinWatts
          //
          if (n.name () == "SimFlowPlant_MaxHeatingCapacityinWatts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MaxHeatingCapacityinWatts_)
            {
              this->SimFlowPlant_MaxHeatingCapacityinWatts_.set (SimFlowPlant_MaxHeatingCapacityinWatts_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MinHeatingCapacityinWatts
          //
          if (n.name () == "SimFlowPlant_MinHeatingCapacityinWatts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MinHeatingCapacityinWatts_)
            {
              this->SimFlowPlant_MinHeatingCapacityinWatts_.set (SimFlowPlant_MinHeatingCapacityinWatts_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxHeatingCapacityinKmolperSecond
          //
          if (n.name () == "SimFlowPlant_MaxHeatingCapacityinKmolperSecond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_)
            {
              this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_.set (SimFlowPlant_MaxHeatingCapacityinKmolperSecond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MinHeatingCapacityinKmolperSecond
          //
          if (n.name () == "SimFlowPlant_MinHeatingCapacityinKmolperSecond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_)
            {
              this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_.set (SimFlowPlant_MinHeatingCapacityinKmolperSecond_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater* SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater (*this, f, c);
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater& SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      operator= (const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_ExcessAirRatio_ = x.SimFlowPlant_ExcessAirRatio_;
          this->SimFlowPlant_AncilliaryPowerConstantTerm_ = x.SimFlowPlant_AncilliaryPowerConstantTerm_;
          this->SimFlowPlant_AncilliaryPowerLinearTerm_ = x.SimFlowPlant_AncilliaryPowerLinearTerm_;
          this->SimFlowPlant_SkinLossU_FactorTimesAreaValue_ = x.SimFlowPlant_SkinLossU_FactorTimesAreaValue_;
          this->SimFlowPlant_SkinLossDestination_ = x.SimFlowPlant_SkinLossDestination_;
          this->SimFlowPlant_ZoneNametoReceiveSkinLosses_ = x.SimFlowPlant_ZoneNametoReceiveSkinLosses_;
          this->SimFlowPlant_HeatingCapacityUnits_ = x.SimFlowPlant_HeatingCapacityUnits_;
          this->SimFlowPlant_MaxHeatingCapacityinWatts_ = x.SimFlowPlant_MaxHeatingCapacityinWatts_;
          this->SimFlowPlant_MinHeatingCapacityinWatts_ = x.SimFlowPlant_MinHeatingCapacityinWatts_;
          this->SimFlowPlant_MaxHeatingCapacityinKmolperSecond_ = x.SimFlowPlant_MaxHeatingCapacityinKmolperSecond_;
          this->SimFlowPlant_MinHeatingCapacityinKmolperSecond_ = x.SimFlowPlant_MinHeatingCapacityinKmolperSecond_;
        }

        return *this;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater::
      ~SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

