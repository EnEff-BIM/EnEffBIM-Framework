// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSystem_HvacChilledWater_FullSystem.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSystem_HvacChilledWater_FullSystem
      // 

      const SimSystem_HvacChilledWater_FullSystem::SimSys_AvailMngrListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_AvailMngrListName () const
      {
        return this->SimSys_AvailMngrListName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_AvailMngrListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_AvailMngrListName ()
      {
        return this->SimSys_AvailMngrListName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_AvailMngrListName (const SimSys_AvailMngrListName_type& x)
      {
        this->SimSys_AvailMngrListName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_AvailMngrListName (const SimSys_AvailMngrListName_optional& x)
      {
        this->SimSys_AvailMngrListName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_AvailMngrListName (::std::auto_ptr< SimSys_AvailMngrListName_type > x)
      {
        this->SimSys_AvailMngrListName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideOutNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideOutNodeName () const
      {
        return this->SimSys_DemandSideOutNodeName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideOutNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideOutNodeName ()
      {
        return this->SimSys_DemandSideOutNodeName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideOutNodeName (const SimSys_DemandSideOutNodeName_type& x)
      {
        this->SimSys_DemandSideOutNodeName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideOutNodeName (const SimSys_DemandSideOutNodeName_optional& x)
      {
        this->SimSys_DemandSideOutNodeName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideOutNodeName (::std::auto_ptr< SimSys_DemandSideOutNodeName_type > x)
      {
        this->SimSys_DemandSideOutNodeName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_FluidType_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_FluidType () const
      {
        return this->SimSys_FluidType_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_FluidType_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_FluidType ()
      {
        return this->SimSys_FluidType_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_FluidType (const SimSys_FluidType_type& x)
      {
        this->SimSys_FluidType_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_FluidType (const SimSys_FluidType_optional& x)
      {
        this->SimSys_FluidType_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_FluidType (::std::auto_ptr< SimSys_FluidType_type > x)
      {
        this->SimSys_FluidType_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_UserDefFluidType_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_UserDefFluidType () const
      {
        return this->SimSys_UserDefFluidType_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_UserDefFluidType_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_UserDefFluidType ()
      {
        return this->SimSys_UserDefFluidType_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_UserDefFluidType (const SimSys_UserDefFluidType_type& x)
      {
        this->SimSys_UserDefFluidType_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_UserDefFluidType (const SimSys_UserDefFluidType_optional& x)
      {
        this->SimSys_UserDefFluidType_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_UserDefFluidType (::std::auto_ptr< SimSys_UserDefFluidType_type > x)
      {
        this->SimSys_UserDefFluidType_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantEqmtOpSchemeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantEqmtOpSchemeName () const
      {
        return this->SimSys_PlantEqmtOpSchemeName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantEqmtOpSchemeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantEqmtOpSchemeName ()
      {
        return this->SimSys_PlantEqmtOpSchemeName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantEqmtOpSchemeName (const SimSys_PlantEqmtOpSchemeName_type& x)
      {
        this->SimSys_PlantEqmtOpSchemeName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantEqmtOpSchemeName (const SimSys_PlantEqmtOpSchemeName_optional& x)
      {
        this->SimSys_PlantEqmtOpSchemeName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantEqmtOpSchemeName (::std::auto_ptr< SimSys_PlantEqmtOpSchemeName_type > x)
      {
        this->SimSys_PlantEqmtOpSchemeName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_LoopTempSetpntNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoopTempSetpntNodeName () const
      {
        return this->SimSys_LoopTempSetpntNodeName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_LoopTempSetpntNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoopTempSetpntNodeName ()
      {
        return this->SimSys_LoopTempSetpntNodeName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoopTempSetpntNodeName (const SimSys_LoopTempSetpntNodeName_type& x)
      {
        this->SimSys_LoopTempSetpntNodeName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoopTempSetpntNodeName (const SimSys_LoopTempSetpntNodeName_optional& x)
      {
        this->SimSys_LoopTempSetpntNodeName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoopTempSetpntNodeName (::std::auto_ptr< SimSys_LoopTempSetpntNodeName_type > x)
      {
        this->SimSys_LoopTempSetpntNodeName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_MaxLoopTemp_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopTemp () const
      {
        return this->SimSys_MaxLoopTemp_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_MaxLoopTemp_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopTemp ()
      {
        return this->SimSys_MaxLoopTemp_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopTemp (const SimSys_MaxLoopTemp_type& x)
      {
        this->SimSys_MaxLoopTemp_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopTemp (const SimSys_MaxLoopTemp_optional& x)
      {
        this->SimSys_MaxLoopTemp_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_MinLoopTemp_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopTemp () const
      {
        return this->SimSys_MinLoopTemp_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_MinLoopTemp_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopTemp ()
      {
        return this->SimSys_MinLoopTemp_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopTemp (const SimSys_MinLoopTemp_type& x)
      {
        this->SimSys_MinLoopTemp_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopTemp (const SimSys_MinLoopTemp_optional& x)
      {
        this->SimSys_MinLoopTemp_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_MaxLoopFlowRate_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopFlowRate () const
      {
        return this->SimSys_MaxLoopFlowRate_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_MaxLoopFlowRate_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopFlowRate ()
      {
        return this->SimSys_MaxLoopFlowRate_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopFlowRate (const SimSys_MaxLoopFlowRate_type& x)
      {
        this->SimSys_MaxLoopFlowRate_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MaxLoopFlowRate (const SimSys_MaxLoopFlowRate_optional& x)
      {
        this->SimSys_MaxLoopFlowRate_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_MinLoopFlowRate_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopFlowRate () const
      {
        return this->SimSys_MinLoopFlowRate_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_MinLoopFlowRate_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopFlowRate ()
      {
        return this->SimSys_MinLoopFlowRate_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopFlowRate (const SimSys_MinLoopFlowRate_type& x)
      {
        this->SimSys_MinLoopFlowRate_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_MinLoopFlowRate (const SimSys_MinLoopFlowRate_optional& x)
      {
        this->SimSys_MinLoopFlowRate_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantLoopVolume_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopVolume () const
      {
        return this->SimSys_PlantLoopVolume_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantLoopVolume_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopVolume ()
      {
        return this->SimSys_PlantLoopVolume_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopVolume (const SimSys_PlantLoopVolume_type& x)
      {
        this->SimSys_PlantLoopVolume_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopVolume (const SimSys_PlantLoopVolume_optional& x)
      {
        this->SimSys_PlantLoopVolume_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideInNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideInNodeName () const
      {
        return this->SimSys_PlantSideInNodeName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideInNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideInNodeName ()
      {
        return this->SimSys_PlantSideInNodeName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideInNodeName (const SimSys_PlantSideInNodeName_type& x)
      {
        this->SimSys_PlantSideInNodeName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideInNodeName (const SimSys_PlantSideInNodeName_optional& x)
      {
        this->SimSys_PlantSideInNodeName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideInNodeName (::std::auto_ptr< SimSys_PlantSideInNodeName_type > x)
      {
        this->SimSys_PlantSideInNodeName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideOutNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideOutNodeName () const
      {
        return this->SimSys_PlantSideOutNodeName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideOutNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideOutNodeName ()
      {
        return this->SimSys_PlantSideOutNodeName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideOutNodeName (const SimSys_PlantSideOutNodeName_type& x)
      {
        this->SimSys_PlantSideOutNodeName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideOutNodeName (const SimSys_PlantSideOutNodeName_optional& x)
      {
        this->SimSys_PlantSideOutNodeName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideOutNodeName (::std::auto_ptr< SimSys_PlantSideOutNodeName_type > x)
      {
        this->SimSys_PlantSideOutNodeName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideBranchListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideBranchListName () const
      {
        return this->SimSys_PlantSideBranchListName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideBranchListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideBranchListName ()
      {
        return this->SimSys_PlantSideBranchListName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideBranchListName (const SimSys_PlantSideBranchListName_type& x)
      {
        this->SimSys_PlantSideBranchListName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideBranchListName (const SimSys_PlantSideBranchListName_optional& x)
      {
        this->SimSys_PlantSideBranchListName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideBranchListName (::std::auto_ptr< SimSys_PlantSideBranchListName_type > x)
      {
        this->SimSys_PlantSideBranchListName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideConnListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideConnListName () const
      {
        return this->SimSys_PlantSideConnListName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantSideConnListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideConnListName ()
      {
        return this->SimSys_PlantSideConnListName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideConnListName (const SimSys_PlantSideConnListName_type& x)
      {
        this->SimSys_PlantSideConnListName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideConnListName (const SimSys_PlantSideConnListName_optional& x)
      {
        this->SimSys_PlantSideConnListName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantSideConnListName (::std::auto_ptr< SimSys_PlantSideConnListName_type > x)
      {
        this->SimSys_PlantSideConnListName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideInNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideInNodeName () const
      {
        return this->SimSys_DemandSideInNodeName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideInNodeName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideInNodeName ()
      {
        return this->SimSys_DemandSideInNodeName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideInNodeName (const SimSys_DemandSideInNodeName_type& x)
      {
        this->SimSys_DemandSideInNodeName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideInNodeName (const SimSys_DemandSideInNodeName_optional& x)
      {
        this->SimSys_DemandSideInNodeName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideInNodeName (::std::auto_ptr< SimSys_DemandSideInNodeName_type > x)
      {
        this->SimSys_DemandSideInNodeName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideBranchListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideBranchListName () const
      {
        return this->SimSys_DemandSideBranchListName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideBranchListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideBranchListName ()
      {
        return this->SimSys_DemandSideBranchListName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideBranchListName (const SimSys_DemandSideBranchListName_type& x)
      {
        this->SimSys_DemandSideBranchListName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideBranchListName (const SimSys_DemandSideBranchListName_optional& x)
      {
        this->SimSys_DemandSideBranchListName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideBranchListName (::std::auto_ptr< SimSys_DemandSideBranchListName_type > x)
      {
        this->SimSys_DemandSideBranchListName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideConnListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideConnListName () const
      {
        return this->SimSys_DemandSideConnListName_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_DemandSideConnListName_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideConnListName ()
      {
        return this->SimSys_DemandSideConnListName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideConnListName (const SimSys_DemandSideConnListName_type& x)
      {
        this->SimSys_DemandSideConnListName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideConnListName (const SimSys_DemandSideConnListName_optional& x)
      {
        this->SimSys_DemandSideConnListName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_DemandSideConnListName (::std::auto_ptr< SimSys_DemandSideConnListName_type > x)
      {
        this->SimSys_DemandSideConnListName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_LoadDistScheme_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoadDistScheme () const
      {
        return this->SimSys_LoadDistScheme_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_LoadDistScheme_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoadDistScheme ()
      {
        return this->SimSys_LoadDistScheme_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoadDistScheme (const SimSys_LoadDistScheme_type& x)
      {
        this->SimSys_LoadDistScheme_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoadDistScheme (const SimSys_LoadDistScheme_optional& x)
      {
        this->SimSys_LoadDistScheme_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_LoadDistScheme (::std::auto_ptr< SimSys_LoadDistScheme_type > x)
      {
        this->SimSys_LoadDistScheme_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PlantLoopDemandCalcScheme_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopDemandCalcScheme () const
      {
        return this->SimSys_PlantLoopDemandCalcScheme_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PlantLoopDemandCalcScheme_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopDemandCalcScheme ()
      {
        return this->SimSys_PlantLoopDemandCalcScheme_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopDemandCalcScheme (const SimSys_PlantLoopDemandCalcScheme_type& x)
      {
        this->SimSys_PlantLoopDemandCalcScheme_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopDemandCalcScheme (const SimSys_PlantLoopDemandCalcScheme_optional& x)
      {
        this->SimSys_PlantLoopDemandCalcScheme_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PlantLoopDemandCalcScheme (::std::auto_ptr< SimSys_PlantLoopDemandCalcScheme_type > x)
      {
        this->SimSys_PlantLoopDemandCalcScheme_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_CommonPipeSim_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_CommonPipeSim () const
      {
        return this->SimSys_CommonPipeSim_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_CommonPipeSim_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_CommonPipeSim ()
      {
        return this->SimSys_CommonPipeSim_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_CommonPipeSim (const SimSys_CommonPipeSim_type& x)
      {
        this->SimSys_CommonPipeSim_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_CommonPipeSim (const SimSys_CommonPipeSim_optional& x)
      {
        this->SimSys_CommonPipeSim_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_CommonPipeSim (::std::auto_ptr< SimSys_CommonPipeSim_type > x)
      {
        this->SimSys_CommonPipeSim_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::SimSys_PresSimType_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PresSimType () const
      {
        return this->SimSys_PresSimType_;
      }

      SimSystem_HvacChilledWater_FullSystem::SimSys_PresSimType_optional& SimSystem_HvacChilledWater_FullSystem::
      SimSys_PresSimType ()
      {
        return this->SimSys_PresSimType_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PresSimType (const SimSys_PresSimType_type& x)
      {
        this->SimSys_PresSimType_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PresSimType (const SimSys_PresSimType_optional& x)
      {
        this->SimSys_PresSimType_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      SimSys_PresSimType (::std::auto_ptr< SimSys_PresSimType_type > x)
      {
        this->SimSys_PresSimType_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24AnnualSolarFraction_optional& SimSystem_HvacChilledWater_FullSystem::
      T24AnnualSolarFraction () const
      {
        return this->T24AnnualSolarFraction_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24AnnualSolarFraction_optional& SimSystem_HvacChilledWater_FullSystem::
      T24AnnualSolarFraction ()
      {
        return this->T24AnnualSolarFraction_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24AnnualSolarFraction (const T24AnnualSolarFraction_type& x)
      {
        this->T24AnnualSolarFraction_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24AnnualSolarFraction (const T24AnnualSolarFraction_optional& x)
      {
        this->T24AnnualSolarFraction_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24Brand_optional& SimSystem_HvacChilledWater_FullSystem::
      T24Brand () const
      {
        return this->T24Brand_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24Brand_optional& SimSystem_HvacChilledWater_FullSystem::
      T24Brand ()
      {
        return this->T24Brand_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24Brand (const T24Brand_type& x)
      {
        this->T24Brand_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24Brand (const T24Brand_optional& x)
      {
        this->T24Brand_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24Brand (::std::auto_ptr< T24Brand_type > x)
      {
        this->T24Brand_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24CollectorType_optional& SimSystem_HvacChilledWater_FullSystem::
      T24CollectorType () const
      {
        return this->T24CollectorType_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24CollectorType_optional& SimSystem_HvacChilledWater_FullSystem::
      T24CollectorType ()
      {
        return this->T24CollectorType_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24CollectorType (const T24CollectorType_type& x)
      {
        this->T24CollectorType_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24CollectorType (const T24CollectorType_optional& x)
      {
        this->T24CollectorType_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24CollectorType (::std::auto_ptr< T24CollectorType_type > x)
      {
        this->T24CollectorType_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24FluidSysCntrlType_optional& SimSystem_HvacChilledWater_FullSystem::
      T24FluidSysCntrlType () const
      {
        return this->T24FluidSysCntrlType_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24FluidSysCntrlType_optional& SimSystem_HvacChilledWater_FullSystem::
      T24FluidSysCntrlType ()
      {
        return this->T24FluidSysCntrlType_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24FluidSysCntrlType (const T24FluidSysCntrlType_type& x)
      {
        this->T24FluidSysCntrlType_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24FluidSysCntrlType (const T24FluidSysCntrlType_optional& x)
      {
        this->T24FluidSysCntrlType_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24FluidSysCntrlType (::std::auto_ptr< T24FluidSysCntrlType_type > x)
      {
        this->T24FluidSysCntrlType_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24Manufacturer_optional& SimSystem_HvacChilledWater_FullSystem::
      T24Manufacturer () const
      {
        return this->T24Manufacturer_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24Manufacturer_optional& SimSystem_HvacChilledWater_FullSystem::
      T24Manufacturer ()
      {
        return this->T24Manufacturer_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24Manufacturer (const T24Manufacturer_type& x)
      {
        this->T24Manufacturer_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24Manufacturer (const T24Manufacturer_optional& x)
      {
        this->T24Manufacturer_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24Manufacturer (::std::auto_ptr< T24Manufacturer_type > x)
      {
        this->T24Manufacturer_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch02A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch02A () const
      {
        return this->T24NRCAMch02A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch02A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch02A ()
      {
        return this->T24NRCAMch02A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch02A (const T24NRCAMch02A_type& x)
      {
        this->T24NRCAMch02A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch02A (const T24NRCAMch02A_optional& x)
      {
        this->T24NRCAMch02A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch03A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch03A () const
      {
        return this->T24NRCAMch03A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch03A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch03A ()
      {
        return this->T24NRCAMch03A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch03A (const T24NRCAMch03A_type& x)
      {
        this->T24NRCAMch03A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch03A (const T24NRCAMch03A_optional& x)
      {
        this->T24NRCAMch03A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch04A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch04A () const
      {
        return this->T24NRCAMch04A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch04A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch04A ()
      {
        return this->T24NRCAMch04A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch04A (const T24NRCAMch04A_type& x)
      {
        this->T24NRCAMch04A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch04A (const T24NRCAMch04A_optional& x)
      {
        this->T24NRCAMch04A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch05A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch05A () const
      {
        return this->T24NRCAMch05A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch05A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch05A ()
      {
        return this->T24NRCAMch05A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch05A (const T24NRCAMch05A_type& x)
      {
        this->T24NRCAMch05A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch05A (const T24NRCAMch05A_optional& x)
      {
        this->T24NRCAMch05A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch06A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch06A () const
      {
        return this->T24NRCAMch06A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch06A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch06A ()
      {
        return this->T24NRCAMch06A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch06A (const T24NRCAMch06A_type& x)
      {
        this->T24NRCAMch06A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch06A (const T24NRCAMch06A_optional& x)
      {
        this->T24NRCAMch06A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch07A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch07A () const
      {
        return this->T24NRCAMch07A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch07A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch07A ()
      {
        return this->T24NRCAMch07A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch07A (const T24NRCAMch07A_type& x)
      {
        this->T24NRCAMch07A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch07A (const T24NRCAMch07A_optional& x)
      {
        this->T24NRCAMch07A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch08A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch08A () const
      {
        return this->T24NRCAMch08A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch08A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch08A ()
      {
        return this->T24NRCAMch08A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch08A (const T24NRCAMch08A_type& x)
      {
        this->T24NRCAMch08A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch08A (const T24NRCAMch08A_optional& x)
      {
        this->T24NRCAMch08A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch09A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch09A () const
      {
        return this->T24NRCAMch09A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch09A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch09A ()
      {
        return this->T24NRCAMch09A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch09A (const T24NRCAMch09A_type& x)
      {
        this->T24NRCAMch09A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch09A (const T24NRCAMch09A_optional& x)
      {
        this->T24NRCAMch09A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch10A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch10A () const
      {
        return this->T24NRCAMch10A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch10A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch10A ()
      {
        return this->T24NRCAMch10A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch10A (const T24NRCAMch10A_type& x)
      {
        this->T24NRCAMch10A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch10A (const T24NRCAMch10A_optional& x)
      {
        this->T24NRCAMch10A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch11A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch11A () const
      {
        return this->T24NRCAMch11A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch11A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch11A ()
      {
        return this->T24NRCAMch11A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch11A (const T24NRCAMch11A_type& x)
      {
        this->T24NRCAMch11A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch11A (const T24NRCAMch11A_optional& x)
      {
        this->T24NRCAMch11A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch12A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch12A () const
      {
        return this->T24NRCAMch12A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch12A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch12A ()
      {
        return this->T24NRCAMch12A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch12A (const T24NRCAMch12A_type& x)
      {
        this->T24NRCAMch12A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch12A (const T24NRCAMch12A_optional& x)
      {
        this->T24NRCAMch12A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch13A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch13A () const
      {
        return this->T24NRCAMch13A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch13A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch13A ()
      {
        return this->T24NRCAMch13A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch13A (const T24NRCAMch13A_type& x)
      {
        this->T24NRCAMch13A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch13A (const T24NRCAMch13A_optional& x)
      {
        this->T24NRCAMch13A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch14A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch14A () const
      {
        return this->T24NRCAMch14A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch14A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch14A ()
      {
        return this->T24NRCAMch14A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch14A (const T24NRCAMch14A_type& x)
      {
        this->T24NRCAMch14A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch14A (const T24NRCAMch14A_optional& x)
      {
        this->T24NRCAMch14A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch15A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch15A () const
      {
        return this->T24NRCAMch15A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch15A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch15A ()
      {
        return this->T24NRCAMch15A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch15A (const T24NRCAMch15A_type& x)
      {
        this->T24NRCAMch15A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch15A (const T24NRCAMch15A_optional& x)
      {
        this->T24NRCAMch15A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch16A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch16A () const
      {
        return this->T24NRCAMch16A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch16A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch16A ()
      {
        return this->T24NRCAMch16A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch16A (const T24NRCAMch16A_type& x)
      {
        this->T24NRCAMch16A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch16A (const T24NRCAMch16A_optional& x)
      {
        this->T24NRCAMch16A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch17A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch17A () const
      {
        return this->T24NRCAMch17A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch17A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch17A ()
      {
        return this->T24NRCAMch17A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch17A (const T24NRCAMch17A_type& x)
      {
        this->T24NRCAMch17A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch17A (const T24NRCAMch17A_optional& x)
      {
        this->T24NRCAMch17A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NRCAMch18A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch18A () const
      {
        return this->T24NRCAMch18A_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NRCAMch18A_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch18A ()
      {
        return this->T24NRCAMch18A_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch18A (const T24NRCAMch18A_type& x)
      {
        this->T24NRCAMch18A_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NRCAMch18A (const T24NRCAMch18A_optional& x)
      {
        this->T24NRCAMch18A_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24ModelNo_optional& SimSystem_HvacChilledWater_FullSystem::
      T24ModelNo () const
      {
        return this->T24ModelNo_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24ModelNo_optional& SimSystem_HvacChilledWater_FullSystem::
      T24ModelNo ()
      {
        return this->T24ModelNo_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24ModelNo (const T24ModelNo_type& x)
      {
        this->T24ModelNo_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24ModelNo (const T24ModelNo_optional& x)
      {
        this->T24ModelNo_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24ModelNo (::std::auto_ptr< T24ModelNo_type > x)
      {
        this->T24ModelNo_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24SolarCollectorProgramName_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramName () const
      {
        return this->T24SolarCollectorProgramName_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24SolarCollectorProgramName_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramName ()
      {
        return this->T24SolarCollectorProgramName_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramName (const T24SolarCollectorProgramName_type& x)
      {
        this->T24SolarCollectorProgramName_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramName (const T24SolarCollectorProgramName_optional& x)
      {
        this->T24SolarCollectorProgramName_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramName (::std::auto_ptr< T24SolarCollectorProgramName_type > x)
      {
        this->T24SolarCollectorProgramName_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24NumberDwellingUnits_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NumberDwellingUnits () const
      {
        return this->T24NumberDwellingUnits_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24NumberDwellingUnits_optional& SimSystem_HvacChilledWater_FullSystem::
      T24NumberDwellingUnits ()
      {
        return this->T24NumberDwellingUnits_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NumberDwellingUnits (const T24NumberDwellingUnits_type& x)
      {
        this->T24NumberDwellingUnits_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24NumberDwellingUnits (const T24NumberDwellingUnits_optional& x)
      {
        this->T24NumberDwellingUnits_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24RatedEffCurveIntercept_optional& SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveIntercept () const
      {
        return this->T24RatedEffCurveIntercept_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24RatedEffCurveIntercept_optional& SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveIntercept ()
      {
        return this->T24RatedEffCurveIntercept_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveIntercept (const T24RatedEffCurveIntercept_type& x)
      {
        this->T24RatedEffCurveIntercept_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveIntercept (const T24RatedEffCurveIntercept_optional& x)
      {
        this->T24RatedEffCurveIntercept_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24RatedEffCurveSlope_optional& SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveSlope () const
      {
        return this->T24RatedEffCurveSlope_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24RatedEffCurveSlope_optional& SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveSlope ()
      {
        return this->T24RatedEffCurveSlope_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveSlope (const T24RatedEffCurveSlope_type& x)
      {
        this->T24RatedEffCurveSlope_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24RatedEffCurveSlope (const T24RatedEffCurveSlope_optional& x)
      {
        this->T24RatedEffCurveSlope_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24SecondTankVolume_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SecondTankVolume () const
      {
        return this->T24SecondTankVolume_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24SecondTankVolume_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SecondTankVolume ()
      {
        return this->T24SecondTankVolume_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SecondTankVolume (const T24SecondTankVolume_type& x)
      {
        this->T24SecondTankVolume_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SecondTankVolume (const T24SecondTankVolume_optional& x)
      {
        this->T24SecondTankVolume_ = x;
      }

      const SimSystem_HvacChilledWater_FullSystem::T24SRRCCertificationNumber_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SRRCCertificationNumber () const
      {
        return this->T24SRRCCertificationNumber_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24SRRCCertificationNumber_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SRRCCertificationNumber ()
      {
        return this->T24SRRCCertificationNumber_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SRRCCertificationNumber (const T24SRRCCertificationNumber_type& x)
      {
        this->T24SRRCCertificationNumber_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SRRCCertificationNumber (const T24SRRCCertificationNumber_optional& x)
      {
        this->T24SRRCCertificationNumber_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SRRCCertificationNumber (::std::auto_ptr< T24SRRCCertificationNumber_type > x)
      {
        this->T24SRRCCertificationNumber_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24ConstructStatus3_optional& SimSystem_HvacChilledWater_FullSystem::
      T24ConstructStatus3 () const
      {
        return this->T24ConstructStatus3_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24ConstructStatus3_optional& SimSystem_HvacChilledWater_FullSystem::
      T24ConstructStatus3 ()
      {
        return this->T24ConstructStatus3_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24ConstructStatus3 (const T24ConstructStatus3_type& x)
      {
        this->T24ConstructStatus3_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24ConstructStatus3 (const T24ConstructStatus3_optional& x)
      {
        this->T24ConstructStatus3_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24ConstructStatus3 (::std::auto_ptr< T24ConstructStatus3_type > x)
      {
        this->T24ConstructStatus3_.set (x);
      }

      const SimSystem_HvacChilledWater_FullSystem::T24SolarCollectorProgramVersion_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramVersion () const
      {
        return this->T24SolarCollectorProgramVersion_;
      }

      SimSystem_HvacChilledWater_FullSystem::T24SolarCollectorProgramVersion_optional& SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramVersion ()
      {
        return this->T24SolarCollectorProgramVersion_;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramVersion (const T24SolarCollectorProgramVersion_type& x)
      {
        this->T24SolarCollectorProgramVersion_.set (x);
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramVersion (const T24SolarCollectorProgramVersion_optional& x)
      {
        this->T24SolarCollectorProgramVersion_ = x;
      }

      void SimSystem_HvacChilledWater_FullSystem::
      T24SolarCollectorProgramVersion (::std::auto_ptr< T24SolarCollectorProgramVersion_type > x)
      {
        this->T24SolarCollectorProgramVersion_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSystem_HvacChilledWater_FullSystem
      //

      SimSystem_HvacChilledWater_FullSystem::
      SimSystem_HvacChilledWater_FullSystem ()
      : ::schema::simxml::BuildingModel::SimSystem_HvacChilledWater (),
        SimSys_AvailMngrListName_ (this),
        SimSys_DemandSideOutNodeName_ (this),
        SimSys_FluidType_ (this),
        SimSys_UserDefFluidType_ (this),
        SimSys_PlantEqmtOpSchemeName_ (this),
        SimSys_LoopTempSetpntNodeName_ (this),
        SimSys_MaxLoopTemp_ (this),
        SimSys_MinLoopTemp_ (this),
        SimSys_MaxLoopFlowRate_ (this),
        SimSys_MinLoopFlowRate_ (this),
        SimSys_PlantLoopVolume_ (this),
        SimSys_PlantSideInNodeName_ (this),
        SimSys_PlantSideOutNodeName_ (this),
        SimSys_PlantSideBranchListName_ (this),
        SimSys_PlantSideConnListName_ (this),
        SimSys_DemandSideInNodeName_ (this),
        SimSys_DemandSideBranchListName_ (this),
        SimSys_DemandSideConnListName_ (this),
        SimSys_LoadDistScheme_ (this),
        SimSys_PlantLoopDemandCalcScheme_ (this),
        SimSys_CommonPipeSim_ (this),
        SimSys_PresSimType_ (this),
        T24AnnualSolarFraction_ (this),
        T24Brand_ (this),
        T24CollectorType_ (this),
        T24FluidSysCntrlType_ (this),
        T24Manufacturer_ (this),
        T24NRCAMch02A_ (this),
        T24NRCAMch03A_ (this),
        T24NRCAMch04A_ (this),
        T24NRCAMch05A_ (this),
        T24NRCAMch06A_ (this),
        T24NRCAMch07A_ (this),
        T24NRCAMch08A_ (this),
        T24NRCAMch09A_ (this),
        T24NRCAMch10A_ (this),
        T24NRCAMch11A_ (this),
        T24NRCAMch12A_ (this),
        T24NRCAMch13A_ (this),
        T24NRCAMch14A_ (this),
        T24NRCAMch15A_ (this),
        T24NRCAMch16A_ (this),
        T24NRCAMch17A_ (this),
        T24NRCAMch18A_ (this),
        T24ModelNo_ (this),
        T24SolarCollectorProgramName_ (this),
        T24NumberDwellingUnits_ (this),
        T24RatedEffCurveIntercept_ (this),
        T24RatedEffCurveSlope_ (this),
        T24SecondTankVolume_ (this),
        T24SRRCCertificationNumber_ (this),
        T24ConstructStatus3_ (this),
        T24SolarCollectorProgramVersion_ (this)
      {
      }

      SimSystem_HvacChilledWater_FullSystem::
      SimSystem_HvacChilledWater_FullSystem (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSystem_HvacChilledWater (RefId),
        SimSys_AvailMngrListName_ (this),
        SimSys_DemandSideOutNodeName_ (this),
        SimSys_FluidType_ (this),
        SimSys_UserDefFluidType_ (this),
        SimSys_PlantEqmtOpSchemeName_ (this),
        SimSys_LoopTempSetpntNodeName_ (this),
        SimSys_MaxLoopTemp_ (this),
        SimSys_MinLoopTemp_ (this),
        SimSys_MaxLoopFlowRate_ (this),
        SimSys_MinLoopFlowRate_ (this),
        SimSys_PlantLoopVolume_ (this),
        SimSys_PlantSideInNodeName_ (this),
        SimSys_PlantSideOutNodeName_ (this),
        SimSys_PlantSideBranchListName_ (this),
        SimSys_PlantSideConnListName_ (this),
        SimSys_DemandSideInNodeName_ (this),
        SimSys_DemandSideBranchListName_ (this),
        SimSys_DemandSideConnListName_ (this),
        SimSys_LoadDistScheme_ (this),
        SimSys_PlantLoopDemandCalcScheme_ (this),
        SimSys_CommonPipeSim_ (this),
        SimSys_PresSimType_ (this),
        T24AnnualSolarFraction_ (this),
        T24Brand_ (this),
        T24CollectorType_ (this),
        T24FluidSysCntrlType_ (this),
        T24Manufacturer_ (this),
        T24NRCAMch02A_ (this),
        T24NRCAMch03A_ (this),
        T24NRCAMch04A_ (this),
        T24NRCAMch05A_ (this),
        T24NRCAMch06A_ (this),
        T24NRCAMch07A_ (this),
        T24NRCAMch08A_ (this),
        T24NRCAMch09A_ (this),
        T24NRCAMch10A_ (this),
        T24NRCAMch11A_ (this),
        T24NRCAMch12A_ (this),
        T24NRCAMch13A_ (this),
        T24NRCAMch14A_ (this),
        T24NRCAMch15A_ (this),
        T24NRCAMch16A_ (this),
        T24NRCAMch17A_ (this),
        T24NRCAMch18A_ (this),
        T24ModelNo_ (this),
        T24SolarCollectorProgramName_ (this),
        T24NumberDwellingUnits_ (this),
        T24RatedEffCurveIntercept_ (this),
        T24RatedEffCurveSlope_ (this),
        T24SecondTankVolume_ (this),
        T24SRRCCertificationNumber_ (this),
        T24ConstructStatus3_ (this),
        T24SolarCollectorProgramVersion_ (this)
      {
      }

      SimSystem_HvacChilledWater_FullSystem::
      SimSystem_HvacChilledWater_FullSystem (const SimSystem_HvacChilledWater_FullSystem& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSystem_HvacChilledWater (x, f, c),
        SimSys_AvailMngrListName_ (x.SimSys_AvailMngrListName_, f, this),
        SimSys_DemandSideOutNodeName_ (x.SimSys_DemandSideOutNodeName_, f, this),
        SimSys_FluidType_ (x.SimSys_FluidType_, f, this),
        SimSys_UserDefFluidType_ (x.SimSys_UserDefFluidType_, f, this),
        SimSys_PlantEqmtOpSchemeName_ (x.SimSys_PlantEqmtOpSchemeName_, f, this),
        SimSys_LoopTempSetpntNodeName_ (x.SimSys_LoopTempSetpntNodeName_, f, this),
        SimSys_MaxLoopTemp_ (x.SimSys_MaxLoopTemp_, f, this),
        SimSys_MinLoopTemp_ (x.SimSys_MinLoopTemp_, f, this),
        SimSys_MaxLoopFlowRate_ (x.SimSys_MaxLoopFlowRate_, f, this),
        SimSys_MinLoopFlowRate_ (x.SimSys_MinLoopFlowRate_, f, this),
        SimSys_PlantLoopVolume_ (x.SimSys_PlantLoopVolume_, f, this),
        SimSys_PlantSideInNodeName_ (x.SimSys_PlantSideInNodeName_, f, this),
        SimSys_PlantSideOutNodeName_ (x.SimSys_PlantSideOutNodeName_, f, this),
        SimSys_PlantSideBranchListName_ (x.SimSys_PlantSideBranchListName_, f, this),
        SimSys_PlantSideConnListName_ (x.SimSys_PlantSideConnListName_, f, this),
        SimSys_DemandSideInNodeName_ (x.SimSys_DemandSideInNodeName_, f, this),
        SimSys_DemandSideBranchListName_ (x.SimSys_DemandSideBranchListName_, f, this),
        SimSys_DemandSideConnListName_ (x.SimSys_DemandSideConnListName_, f, this),
        SimSys_LoadDistScheme_ (x.SimSys_LoadDistScheme_, f, this),
        SimSys_PlantLoopDemandCalcScheme_ (x.SimSys_PlantLoopDemandCalcScheme_, f, this),
        SimSys_CommonPipeSim_ (x.SimSys_CommonPipeSim_, f, this),
        SimSys_PresSimType_ (x.SimSys_PresSimType_, f, this),
        T24AnnualSolarFraction_ (x.T24AnnualSolarFraction_, f, this),
        T24Brand_ (x.T24Brand_, f, this),
        T24CollectorType_ (x.T24CollectorType_, f, this),
        T24FluidSysCntrlType_ (x.T24FluidSysCntrlType_, f, this),
        T24Manufacturer_ (x.T24Manufacturer_, f, this),
        T24NRCAMch02A_ (x.T24NRCAMch02A_, f, this),
        T24NRCAMch03A_ (x.T24NRCAMch03A_, f, this),
        T24NRCAMch04A_ (x.T24NRCAMch04A_, f, this),
        T24NRCAMch05A_ (x.T24NRCAMch05A_, f, this),
        T24NRCAMch06A_ (x.T24NRCAMch06A_, f, this),
        T24NRCAMch07A_ (x.T24NRCAMch07A_, f, this),
        T24NRCAMch08A_ (x.T24NRCAMch08A_, f, this),
        T24NRCAMch09A_ (x.T24NRCAMch09A_, f, this),
        T24NRCAMch10A_ (x.T24NRCAMch10A_, f, this),
        T24NRCAMch11A_ (x.T24NRCAMch11A_, f, this),
        T24NRCAMch12A_ (x.T24NRCAMch12A_, f, this),
        T24NRCAMch13A_ (x.T24NRCAMch13A_, f, this),
        T24NRCAMch14A_ (x.T24NRCAMch14A_, f, this),
        T24NRCAMch15A_ (x.T24NRCAMch15A_, f, this),
        T24NRCAMch16A_ (x.T24NRCAMch16A_, f, this),
        T24NRCAMch17A_ (x.T24NRCAMch17A_, f, this),
        T24NRCAMch18A_ (x.T24NRCAMch18A_, f, this),
        T24ModelNo_ (x.T24ModelNo_, f, this),
        T24SolarCollectorProgramName_ (x.T24SolarCollectorProgramName_, f, this),
        T24NumberDwellingUnits_ (x.T24NumberDwellingUnits_, f, this),
        T24RatedEffCurveIntercept_ (x.T24RatedEffCurveIntercept_, f, this),
        T24RatedEffCurveSlope_ (x.T24RatedEffCurveSlope_, f, this),
        T24SecondTankVolume_ (x.T24SecondTankVolume_, f, this),
        T24SRRCCertificationNumber_ (x.T24SRRCCertificationNumber_, f, this),
        T24ConstructStatus3_ (x.T24ConstructStatus3_, f, this),
        T24SolarCollectorProgramVersion_ (x.T24SolarCollectorProgramVersion_, f, this)
      {
      }

      SimSystem_HvacChilledWater_FullSystem::
      SimSystem_HvacChilledWater_FullSystem (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSystem_HvacChilledWater (e, f | ::xml_schema::flags::base, c),
        SimSys_AvailMngrListName_ (this),
        SimSys_DemandSideOutNodeName_ (this),
        SimSys_FluidType_ (this),
        SimSys_UserDefFluidType_ (this),
        SimSys_PlantEqmtOpSchemeName_ (this),
        SimSys_LoopTempSetpntNodeName_ (this),
        SimSys_MaxLoopTemp_ (this),
        SimSys_MinLoopTemp_ (this),
        SimSys_MaxLoopFlowRate_ (this),
        SimSys_MinLoopFlowRate_ (this),
        SimSys_PlantLoopVolume_ (this),
        SimSys_PlantSideInNodeName_ (this),
        SimSys_PlantSideOutNodeName_ (this),
        SimSys_PlantSideBranchListName_ (this),
        SimSys_PlantSideConnListName_ (this),
        SimSys_DemandSideInNodeName_ (this),
        SimSys_DemandSideBranchListName_ (this),
        SimSys_DemandSideConnListName_ (this),
        SimSys_LoadDistScheme_ (this),
        SimSys_PlantLoopDemandCalcScheme_ (this),
        SimSys_CommonPipeSim_ (this),
        SimSys_PresSimType_ (this),
        T24AnnualSolarFraction_ (this),
        T24Brand_ (this),
        T24CollectorType_ (this),
        T24FluidSysCntrlType_ (this),
        T24Manufacturer_ (this),
        T24NRCAMch02A_ (this),
        T24NRCAMch03A_ (this),
        T24NRCAMch04A_ (this),
        T24NRCAMch05A_ (this),
        T24NRCAMch06A_ (this),
        T24NRCAMch07A_ (this),
        T24NRCAMch08A_ (this),
        T24NRCAMch09A_ (this),
        T24NRCAMch10A_ (this),
        T24NRCAMch11A_ (this),
        T24NRCAMch12A_ (this),
        T24NRCAMch13A_ (this),
        T24NRCAMch14A_ (this),
        T24NRCAMch15A_ (this),
        T24NRCAMch16A_ (this),
        T24NRCAMch17A_ (this),
        T24NRCAMch18A_ (this),
        T24ModelNo_ (this),
        T24SolarCollectorProgramName_ (this),
        T24NumberDwellingUnits_ (this),
        T24RatedEffCurveIntercept_ (this),
        T24RatedEffCurveSlope_ (this),
        T24SecondTankVolume_ (this),
        T24SRRCCertificationNumber_ (this),
        T24ConstructStatus3_ (this),
        T24SolarCollectorProgramVersion_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSystem_HvacChilledWater_FullSystem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSystem_HvacChilledWater::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSys_AvailMngrListName
          //
          if (n.name () == "SimSys_AvailMngrListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_AvailMngrListName_type > r (
              SimSys_AvailMngrListName_traits::create (i, f, this));

            if (!this->SimSys_AvailMngrListName_)
            {
              this->SimSys_AvailMngrListName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideOutNodeName
          //
          if (n.name () == "SimSys_DemandSideOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideOutNodeName_type > r (
              SimSys_DemandSideOutNodeName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideOutNodeName_)
            {
              this->SimSys_DemandSideOutNodeName_.set (r);
              continue;
            }
          }

          // SimSys_FluidType
          //
          if (n.name () == "SimSys_FluidType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_FluidType_type > r (
              SimSys_FluidType_traits::create (i, f, this));

            if (!this->SimSys_FluidType_)
            {
              this->SimSys_FluidType_.set (r);
              continue;
            }
          }

          // SimSys_UserDefFluidType
          //
          if (n.name () == "SimSys_UserDefFluidType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_UserDefFluidType_type > r (
              SimSys_UserDefFluidType_traits::create (i, f, this));

            if (!this->SimSys_UserDefFluidType_)
            {
              this->SimSys_UserDefFluidType_.set (r);
              continue;
            }
          }

          // SimSys_PlantEqmtOpSchemeName
          //
          if (n.name () == "SimSys_PlantEqmtOpSchemeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantEqmtOpSchemeName_type > r (
              SimSys_PlantEqmtOpSchemeName_traits::create (i, f, this));

            if (!this->SimSys_PlantEqmtOpSchemeName_)
            {
              this->SimSys_PlantEqmtOpSchemeName_.set (r);
              continue;
            }
          }

          // SimSys_LoopTempSetpntNodeName
          //
          if (n.name () == "SimSys_LoopTempSetpntNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LoopTempSetpntNodeName_type > r (
              SimSys_LoopTempSetpntNodeName_traits::create (i, f, this));

            if (!this->SimSys_LoopTempSetpntNodeName_)
            {
              this->SimSys_LoopTempSetpntNodeName_.set (r);
              continue;
            }
          }

          // SimSys_MaxLoopTemp
          //
          if (n.name () == "SimSys_MaxLoopTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MaxLoopTemp_)
            {
              this->SimSys_MaxLoopTemp_.set (SimSys_MaxLoopTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MinLoopTemp
          //
          if (n.name () == "SimSys_MinLoopTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MinLoopTemp_)
            {
              this->SimSys_MinLoopTemp_.set (SimSys_MinLoopTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MaxLoopFlowRate
          //
          if (n.name () == "SimSys_MaxLoopFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MaxLoopFlowRate_)
            {
              this->SimSys_MaxLoopFlowRate_.set (SimSys_MaxLoopFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MinLoopFlowRate
          //
          if (n.name () == "SimSys_MinLoopFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MinLoopFlowRate_)
            {
              this->SimSys_MinLoopFlowRate_.set (SimSys_MinLoopFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PlantLoopVolume
          //
          if (n.name () == "SimSys_PlantLoopVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_PlantLoopVolume_)
            {
              this->SimSys_PlantLoopVolume_.set (SimSys_PlantLoopVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PlantSideInNodeName
          //
          if (n.name () == "SimSys_PlantSideInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideInNodeName_type > r (
              SimSys_PlantSideInNodeName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideInNodeName_)
            {
              this->SimSys_PlantSideInNodeName_.set (r);
              continue;
            }
          }

          // SimSys_PlantSideOutNodeName
          //
          if (n.name () == "SimSys_PlantSideOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideOutNodeName_type > r (
              SimSys_PlantSideOutNodeName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideOutNodeName_)
            {
              this->SimSys_PlantSideOutNodeName_.set (r);
              continue;
            }
          }

          // SimSys_PlantSideBranchListName
          //
          if (n.name () == "SimSys_PlantSideBranchListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideBranchListName_type > r (
              SimSys_PlantSideBranchListName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideBranchListName_)
            {
              this->SimSys_PlantSideBranchListName_.set (r);
              continue;
            }
          }

          // SimSys_PlantSideConnListName
          //
          if (n.name () == "SimSys_PlantSideConnListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideConnListName_type > r (
              SimSys_PlantSideConnListName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideConnListName_)
            {
              this->SimSys_PlantSideConnListName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideInNodeName
          //
          if (n.name () == "SimSys_DemandSideInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideInNodeName_type > r (
              SimSys_DemandSideInNodeName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideInNodeName_)
            {
              this->SimSys_DemandSideInNodeName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideBranchListName
          //
          if (n.name () == "SimSys_DemandSideBranchListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideBranchListName_type > r (
              SimSys_DemandSideBranchListName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideBranchListName_)
            {
              this->SimSys_DemandSideBranchListName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideConnListName
          //
          if (n.name () == "SimSys_DemandSideConnListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideConnListName_type > r (
              SimSys_DemandSideConnListName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideConnListName_)
            {
              this->SimSys_DemandSideConnListName_.set (r);
              continue;
            }
          }

          // SimSys_LoadDistScheme
          //
          if (n.name () == "SimSys_LoadDistScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LoadDistScheme_type > r (
              SimSys_LoadDistScheme_traits::create (i, f, this));

            if (!this->SimSys_LoadDistScheme_)
            {
              this->SimSys_LoadDistScheme_.set (r);
              continue;
            }
          }

          // SimSys_PlantLoopDemandCalcScheme
          //
          if (n.name () == "SimSys_PlantLoopDemandCalcScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantLoopDemandCalcScheme_type > r (
              SimSys_PlantLoopDemandCalcScheme_traits::create (i, f, this));

            if (!this->SimSys_PlantLoopDemandCalcScheme_)
            {
              this->SimSys_PlantLoopDemandCalcScheme_.set (r);
              continue;
            }
          }

          // SimSys_CommonPipeSim
          //
          if (n.name () == "SimSys_CommonPipeSim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CommonPipeSim_type > r (
              SimSys_CommonPipeSim_traits::create (i, f, this));

            if (!this->SimSys_CommonPipeSim_)
            {
              this->SimSys_CommonPipeSim_.set (r);
              continue;
            }
          }

          // SimSys_PresSimType
          //
          if (n.name () == "SimSys_PresSimType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PresSimType_type > r (
              SimSys_PresSimType_traits::create (i, f, this));

            if (!this->SimSys_PresSimType_)
            {
              this->SimSys_PresSimType_.set (r);
              continue;
            }
          }

          // T24AnnualSolarFraction
          //
          if (n.name () == "T24AnnualSolarFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AnnualSolarFraction_)
            {
              this->T24AnnualSolarFraction_.set (T24AnnualSolarFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24Brand
          //
          if (n.name () == "T24Brand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24Brand_type > r (
              T24Brand_traits::create (i, f, this));

            if (!this->T24Brand_)
            {
              this->T24Brand_.set (r);
              continue;
            }
          }

          // T24CollectorType
          //
          if (n.name () == "T24CollectorType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CollectorType_type > r (
              T24CollectorType_traits::create (i, f, this));

            if (!this->T24CollectorType_)
            {
              this->T24CollectorType_.set (r);
              continue;
            }
          }

          // T24FluidSysCntrlType
          //
          if (n.name () == "T24FluidSysCntrlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24FluidSysCntrlType_type > r (
              T24FluidSysCntrlType_traits::create (i, f, this));

            if (!this->T24FluidSysCntrlType_)
            {
              this->T24FluidSysCntrlType_.set (r);
              continue;
            }
          }

          // T24Manufacturer
          //
          if (n.name () == "T24Manufacturer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24Manufacturer_type > r (
              T24Manufacturer_traits::create (i, f, this));

            if (!this->T24Manufacturer_)
            {
              this->T24Manufacturer_.set (r);
              continue;
            }
          }

          // T24NRCAMch02A
          //
          if (n.name () == "T24NRCAMch02A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch02A_)
            {
              this->T24NRCAMch02A_.set (T24NRCAMch02A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch03A
          //
          if (n.name () == "T24NRCAMch03A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch03A_)
            {
              this->T24NRCAMch03A_.set (T24NRCAMch03A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch04A
          //
          if (n.name () == "T24NRCAMch04A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch04A_)
            {
              this->T24NRCAMch04A_.set (T24NRCAMch04A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch05A
          //
          if (n.name () == "T24NRCAMch05A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch05A_)
            {
              this->T24NRCAMch05A_.set (T24NRCAMch05A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch06A
          //
          if (n.name () == "T24NRCAMch06A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch06A_)
            {
              this->T24NRCAMch06A_.set (T24NRCAMch06A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch07A
          //
          if (n.name () == "T24NRCAMch07A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch07A_)
            {
              this->T24NRCAMch07A_.set (T24NRCAMch07A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch08A
          //
          if (n.name () == "T24NRCAMch08A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch08A_)
            {
              this->T24NRCAMch08A_.set (T24NRCAMch08A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch09A
          //
          if (n.name () == "T24NRCAMch09A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch09A_)
            {
              this->T24NRCAMch09A_.set (T24NRCAMch09A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch10A
          //
          if (n.name () == "T24NRCAMch10A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch10A_)
            {
              this->T24NRCAMch10A_.set (T24NRCAMch10A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch11A
          //
          if (n.name () == "T24NRCAMch11A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch11A_)
            {
              this->T24NRCAMch11A_.set (T24NRCAMch11A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch12A
          //
          if (n.name () == "T24NRCAMch12A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch12A_)
            {
              this->T24NRCAMch12A_.set (T24NRCAMch12A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch13A
          //
          if (n.name () == "T24NRCAMch13A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch13A_)
            {
              this->T24NRCAMch13A_.set (T24NRCAMch13A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch14A
          //
          if (n.name () == "T24NRCAMch14A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch14A_)
            {
              this->T24NRCAMch14A_.set (T24NRCAMch14A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch15A
          //
          if (n.name () == "T24NRCAMch15A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch15A_)
            {
              this->T24NRCAMch15A_.set (T24NRCAMch15A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch16A
          //
          if (n.name () == "T24NRCAMch16A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch16A_)
            {
              this->T24NRCAMch16A_.set (T24NRCAMch16A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch17A
          //
          if (n.name () == "T24NRCAMch17A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch17A_)
            {
              this->T24NRCAMch17A_.set (T24NRCAMch17A_traits::create (i, f, this));
              continue;
            }
          }

          // T24NRCAMch18A
          //
          if (n.name () == "T24NRCAMch18A" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NRCAMch18A_)
            {
              this->T24NRCAMch18A_.set (T24NRCAMch18A_traits::create (i, f, this));
              continue;
            }
          }

          // T24ModelNo
          //
          if (n.name () == "T24ModelNo" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ModelNo_type > r (
              T24ModelNo_traits::create (i, f, this));

            if (!this->T24ModelNo_)
            {
              this->T24ModelNo_.set (r);
              continue;
            }
          }

          // T24SolarCollectorProgramName
          //
          if (n.name () == "T24SolarCollectorProgramName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SolarCollectorProgramName_type > r (
              T24SolarCollectorProgramName_traits::create (i, f, this));

            if (!this->T24SolarCollectorProgramName_)
            {
              this->T24SolarCollectorProgramName_.set (r);
              continue;
            }
          }

          // T24NumberDwellingUnits
          //
          if (n.name () == "T24NumberDwellingUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NumberDwellingUnits_)
            {
              this->T24NumberDwellingUnits_.set (T24NumberDwellingUnits_traits::create (i, f, this));
              continue;
            }
          }

          // T24RatedEffCurveIntercept
          //
          if (n.name () == "T24RatedEffCurveIntercept" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24RatedEffCurveIntercept_)
            {
              this->T24RatedEffCurveIntercept_.set (T24RatedEffCurveIntercept_traits::create (i, f, this));
              continue;
            }
          }

          // T24RatedEffCurveSlope
          //
          if (n.name () == "T24RatedEffCurveSlope" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24RatedEffCurveSlope_)
            {
              this->T24RatedEffCurveSlope_.set (T24RatedEffCurveSlope_traits::create (i, f, this));
              continue;
            }
          }

          // T24SecondTankVolume
          //
          if (n.name () == "T24SecondTankVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SecondTankVolume_)
            {
              this->T24SecondTankVolume_.set (T24SecondTankVolume_traits::create (i, f, this));
              continue;
            }
          }

          // T24SRRCCertificationNumber
          //
          if (n.name () == "T24SRRCCertificationNumber" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SRRCCertificationNumber_type > r (
              T24SRRCCertificationNumber_traits::create (i, f, this));

            if (!this->T24SRRCCertificationNumber_)
            {
              this->T24SRRCCertificationNumber_.set (r);
              continue;
            }
          }

          // T24ConstructStatus3
          //
          if (n.name () == "T24ConstructStatus3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ConstructStatus3_type > r (
              T24ConstructStatus3_traits::create (i, f, this));

            if (!this->T24ConstructStatus3_)
            {
              this->T24ConstructStatus3_.set (r);
              continue;
            }
          }

          // T24SolarCollectorProgramVersion
          //
          if (n.name () == "T24SolarCollectorProgramVersion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SolarCollectorProgramVersion_type > r (
              T24SolarCollectorProgramVersion_traits::create (i, f, this));

            if (!this->T24SolarCollectorProgramVersion_)
            {
              this->T24SolarCollectorProgramVersion_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSystem_HvacChilledWater_FullSystem* SimSystem_HvacChilledWater_FullSystem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSystem_HvacChilledWater_FullSystem (*this, f, c);
      }

      SimSystem_HvacChilledWater_FullSystem& SimSystem_HvacChilledWater_FullSystem::
      operator= (const SimSystem_HvacChilledWater_FullSystem& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSystem_HvacChilledWater& > (*this) = x;
          this->SimSys_AvailMngrListName_ = x.SimSys_AvailMngrListName_;
          this->SimSys_DemandSideOutNodeName_ = x.SimSys_DemandSideOutNodeName_;
          this->SimSys_FluidType_ = x.SimSys_FluidType_;
          this->SimSys_UserDefFluidType_ = x.SimSys_UserDefFluidType_;
          this->SimSys_PlantEqmtOpSchemeName_ = x.SimSys_PlantEqmtOpSchemeName_;
          this->SimSys_LoopTempSetpntNodeName_ = x.SimSys_LoopTempSetpntNodeName_;
          this->SimSys_MaxLoopTemp_ = x.SimSys_MaxLoopTemp_;
          this->SimSys_MinLoopTemp_ = x.SimSys_MinLoopTemp_;
          this->SimSys_MaxLoopFlowRate_ = x.SimSys_MaxLoopFlowRate_;
          this->SimSys_MinLoopFlowRate_ = x.SimSys_MinLoopFlowRate_;
          this->SimSys_PlantLoopVolume_ = x.SimSys_PlantLoopVolume_;
          this->SimSys_PlantSideInNodeName_ = x.SimSys_PlantSideInNodeName_;
          this->SimSys_PlantSideOutNodeName_ = x.SimSys_PlantSideOutNodeName_;
          this->SimSys_PlantSideBranchListName_ = x.SimSys_PlantSideBranchListName_;
          this->SimSys_PlantSideConnListName_ = x.SimSys_PlantSideConnListName_;
          this->SimSys_DemandSideInNodeName_ = x.SimSys_DemandSideInNodeName_;
          this->SimSys_DemandSideBranchListName_ = x.SimSys_DemandSideBranchListName_;
          this->SimSys_DemandSideConnListName_ = x.SimSys_DemandSideConnListName_;
          this->SimSys_LoadDistScheme_ = x.SimSys_LoadDistScheme_;
          this->SimSys_PlantLoopDemandCalcScheme_ = x.SimSys_PlantLoopDemandCalcScheme_;
          this->SimSys_CommonPipeSim_ = x.SimSys_CommonPipeSim_;
          this->SimSys_PresSimType_ = x.SimSys_PresSimType_;
          this->T24AnnualSolarFraction_ = x.T24AnnualSolarFraction_;
          this->T24Brand_ = x.T24Brand_;
          this->T24CollectorType_ = x.T24CollectorType_;
          this->T24FluidSysCntrlType_ = x.T24FluidSysCntrlType_;
          this->T24Manufacturer_ = x.T24Manufacturer_;
          this->T24NRCAMch02A_ = x.T24NRCAMch02A_;
          this->T24NRCAMch03A_ = x.T24NRCAMch03A_;
          this->T24NRCAMch04A_ = x.T24NRCAMch04A_;
          this->T24NRCAMch05A_ = x.T24NRCAMch05A_;
          this->T24NRCAMch06A_ = x.T24NRCAMch06A_;
          this->T24NRCAMch07A_ = x.T24NRCAMch07A_;
          this->T24NRCAMch08A_ = x.T24NRCAMch08A_;
          this->T24NRCAMch09A_ = x.T24NRCAMch09A_;
          this->T24NRCAMch10A_ = x.T24NRCAMch10A_;
          this->T24NRCAMch11A_ = x.T24NRCAMch11A_;
          this->T24NRCAMch12A_ = x.T24NRCAMch12A_;
          this->T24NRCAMch13A_ = x.T24NRCAMch13A_;
          this->T24NRCAMch14A_ = x.T24NRCAMch14A_;
          this->T24NRCAMch15A_ = x.T24NRCAMch15A_;
          this->T24NRCAMch16A_ = x.T24NRCAMch16A_;
          this->T24NRCAMch17A_ = x.T24NRCAMch17A_;
          this->T24NRCAMch18A_ = x.T24NRCAMch18A_;
          this->T24ModelNo_ = x.T24ModelNo_;
          this->T24SolarCollectorProgramName_ = x.T24SolarCollectorProgramName_;
          this->T24NumberDwellingUnits_ = x.T24NumberDwellingUnits_;
          this->T24RatedEffCurveIntercept_ = x.T24RatedEffCurveIntercept_;
          this->T24RatedEffCurveSlope_ = x.T24RatedEffCurveSlope_;
          this->T24SecondTankVolume_ = x.T24SecondTankVolume_;
          this->T24SRRCCertificationNumber_ = x.T24SRRCCertificationNumber_;
          this->T24ConstructStatus3_ = x.T24ConstructStatus3_;
          this->T24SolarCollectorProgramVersion_ = x.T24SolarCollectorProgramVersion_;
        }

        return *this;
      }

      SimSystem_HvacChilledWater_FullSystem::
      ~SimSystem_HvacChilledWater_FullSystem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

