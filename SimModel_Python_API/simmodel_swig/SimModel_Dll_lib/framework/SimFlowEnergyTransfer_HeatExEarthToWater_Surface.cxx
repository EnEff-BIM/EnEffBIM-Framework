// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_HeatExEarthToWater_Surface.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatExEarthToWater_Surface
      // 

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_HydronicTubingsideDiam_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubingsideDiam () const
      {
        return this->SimFlowEnergyTrans_HydronicTubingsideDiam_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_HydronicTubingsideDiam_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubingsideDiam ()
      {
        return this->SimFlowEnergyTrans_HydronicTubingsideDiam_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubingsideDiam (const SimFlowEnergyTrans_HydronicTubingsideDiam_type& x)
      {
        this->SimFlowEnergyTrans_HydronicTubingsideDiam_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubingsideDiam (const SimFlowEnergyTrans_HydronicTubingsideDiam_optional& x)
      {
        this->SimFlowEnergyTrans_HydronicTubingsideDiam_ = x;
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_FluidInletNodeName_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidInletNodeName () const
      {
        return this->SimFlowEnergyTrans_FluidInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_FluidInletNodeName_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidInletNodeName ()
      {
        return this->SimFlowEnergyTrans_FluidInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidInletNodeName (const SimFlowEnergyTrans_FluidInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_FluidInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidInletNodeName (const SimFlowEnergyTrans_FluidInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_FluidInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_FluidInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_FluidInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_FluidOutletNodeName_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_FluidOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_FluidOutletNodeName_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_FluidOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidOutletNodeName (const SimFlowEnergyTrans_FluidOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_FluidOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidOutletNodeName (const SimFlowEnergyTrans_FluidOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_FluidOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_FluidOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_FluidOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_FluidOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_NumTubingCircuits_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_NumTubingCircuits () const
      {
        return this->SimFlowEnergyTrans_NumTubingCircuits_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_NumTubingCircuits_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_NumTubingCircuits ()
      {
        return this->SimFlowEnergyTrans_NumTubingCircuits_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_NumTubingCircuits (const SimFlowEnergyTrans_NumTubingCircuits_type& x)
      {
        this->SimFlowEnergyTrans_NumTubingCircuits_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_NumTubingCircuits (const SimFlowEnergyTrans_NumTubingCircuits_optional& x)
      {
        this->SimFlowEnergyTrans_NumTubingCircuits_ = x;
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_ConstructionName_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_ConstructionName () const
      {
        return this->SimFlowEnergyTrans_ConstructionName_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_ConstructionName_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_ConstructionName ()
      {
        return this->SimFlowEnergyTrans_ConstructionName_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_ConstructionName (const SimFlowEnergyTrans_ConstructionName_type& x)
      {
        this->SimFlowEnergyTrans_ConstructionName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_ConstructionName (const SimFlowEnergyTrans_ConstructionName_optional& x)
      {
        this->SimFlowEnergyTrans_ConstructionName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_ConstructionName (::std::auto_ptr< SimFlowEnergyTrans_ConstructionName_type > x)
      {
        this->SimFlowEnergyTrans_ConstructionName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_HydronicTubeSpacing_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubeSpacing () const
      {
        return this->SimFlowEnergyTrans_HydronicTubeSpacing_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_HydronicTubeSpacing_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubeSpacing ()
      {
        return this->SimFlowEnergyTrans_HydronicTubeSpacing_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubeSpacing (const SimFlowEnergyTrans_HydronicTubeSpacing_type& x)
      {
        this->SimFlowEnergyTrans_HydronicTubeSpacing_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_HydronicTubeSpacing (const SimFlowEnergyTrans_HydronicTubeSpacing_optional& x)
      {
        this->SimFlowEnergyTrans_HydronicTubeSpacing_ = x;
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_SurfLength_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfLength () const
      {
        return this->SimFlowEnergyTrans_SurfLength_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_SurfLength_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfLength ()
      {
        return this->SimFlowEnergyTrans_SurfLength_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfLength (const SimFlowEnergyTrans_SurfLength_type& x)
      {
        this->SimFlowEnergyTrans_SurfLength_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfLength (const SimFlowEnergyTrans_SurfLength_optional& x)
      {
        this->SimFlowEnergyTrans_SurfLength_ = x;
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_SurfWidth_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfWidth () const
      {
        return this->SimFlowEnergyTrans_SurfWidth_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_SurfWidth_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfWidth ()
      {
        return this->SimFlowEnergyTrans_SurfWidth_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfWidth (const SimFlowEnergyTrans_SurfWidth_type& x)
      {
        this->SimFlowEnergyTrans_SurfWidth_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_SurfWidth (const SimFlowEnergyTrans_SurfWidth_optional& x)
      {
        this->SimFlowEnergyTrans_SurfWidth_ = x;
      }

      const SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_LowSurfEnvironment_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_LowSurfEnvironment () const
      {
        return this->SimFlowEnergyTrans_LowSurfEnvironment_;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::SimFlowEnergyTrans_LowSurfEnvironment_optional& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_LowSurfEnvironment ()
      {
        return this->SimFlowEnergyTrans_LowSurfEnvironment_;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_LowSurfEnvironment (const SimFlowEnergyTrans_LowSurfEnvironment_type& x)
      {
        this->SimFlowEnergyTrans_LowSurfEnvironment_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_LowSurfEnvironment (const SimFlowEnergyTrans_LowSurfEnvironment_optional& x)
      {
        this->SimFlowEnergyTrans_LowSurfEnvironment_ = x;
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTrans_LowSurfEnvironment (::std::auto_ptr< SimFlowEnergyTrans_LowSurfEnvironment_type > x)
      {
        this->SimFlowEnergyTrans_LowSurfEnvironment_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatExEarthToWater_Surface
      //

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExEarthToWater (),
        SimFlowEnergyTrans_HydronicTubingsideDiam_ (this),
        SimFlowEnergyTrans_FluidInletNodeName_ (this),
        SimFlowEnergyTrans_FluidOutletNodeName_ (this),
        SimFlowEnergyTrans_NumTubingCircuits_ (this),
        SimFlowEnergyTrans_ConstructionName_ (this),
        SimFlowEnergyTrans_HydronicTubeSpacing_ (this),
        SimFlowEnergyTrans_SurfLength_ (this),
        SimFlowEnergyTrans_SurfWidth_ (this),
        SimFlowEnergyTrans_LowSurfEnvironment_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExEarthToWater (RefId),
        SimFlowEnergyTrans_HydronicTubingsideDiam_ (this),
        SimFlowEnergyTrans_FluidInletNodeName_ (this),
        SimFlowEnergyTrans_FluidOutletNodeName_ (this),
        SimFlowEnergyTrans_NumTubingCircuits_ (this),
        SimFlowEnergyTrans_ConstructionName_ (this),
        SimFlowEnergyTrans_HydronicTubeSpacing_ (this),
        SimFlowEnergyTrans_SurfLength_ (this),
        SimFlowEnergyTrans_SurfWidth_ (this),
        SimFlowEnergyTrans_LowSurfEnvironment_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface (const SimFlowEnergyTransfer_HeatExEarthToWater_Surface& x,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExEarthToWater (x, f, c),
        SimFlowEnergyTrans_HydronicTubingsideDiam_ (x.SimFlowEnergyTrans_HydronicTubingsideDiam_, f, this),
        SimFlowEnergyTrans_FluidInletNodeName_ (x.SimFlowEnergyTrans_FluidInletNodeName_, f, this),
        SimFlowEnergyTrans_FluidOutletNodeName_ (x.SimFlowEnergyTrans_FluidOutletNodeName_, f, this),
        SimFlowEnergyTrans_NumTubingCircuits_ (x.SimFlowEnergyTrans_NumTubingCircuits_, f, this),
        SimFlowEnergyTrans_ConstructionName_ (x.SimFlowEnergyTrans_ConstructionName_, f, this),
        SimFlowEnergyTrans_HydronicTubeSpacing_ (x.SimFlowEnergyTrans_HydronicTubeSpacing_, f, this),
        SimFlowEnergyTrans_SurfLength_ (x.SimFlowEnergyTrans_SurfLength_, f, this),
        SimFlowEnergyTrans_SurfWidth_ (x.SimFlowEnergyTrans_SurfWidth_, f, this),
        SimFlowEnergyTrans_LowSurfEnvironment_ (x.SimFlowEnergyTrans_LowSurfEnvironment_, f, this)
      {
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExEarthToWater (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_HydronicTubingsideDiam_ (this),
        SimFlowEnergyTrans_FluidInletNodeName_ (this),
        SimFlowEnergyTrans_FluidOutletNodeName_ (this),
        SimFlowEnergyTrans_NumTubingCircuits_ (this),
        SimFlowEnergyTrans_ConstructionName_ (this),
        SimFlowEnergyTrans_HydronicTubeSpacing_ (this),
        SimFlowEnergyTrans_SurfLength_ (this),
        SimFlowEnergyTrans_SurfWidth_ (this),
        SimFlowEnergyTrans_LowSurfEnvironment_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExEarthToWater::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_HydronicTubingsideDiam
          //
          if (n.name () == "SimFlowEnergyTrans_HydronicTubingsideDiam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HydronicTubingsideDiam_)
            {
              this->SimFlowEnergyTrans_HydronicTubingsideDiam_.set (SimFlowEnergyTrans_HydronicTubingsideDiam_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_FluidInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_FluidInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_FluidInletNodeName_type > r (
              SimFlowEnergyTrans_FluidInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_FluidInletNodeName_)
            {
              this->SimFlowEnergyTrans_FluidInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_FluidOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_FluidOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_FluidOutletNodeName_type > r (
              SimFlowEnergyTrans_FluidOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_FluidOutletNodeName_)
            {
              this->SimFlowEnergyTrans_FluidOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NumTubingCircuits
          //
          if (n.name () == "SimFlowEnergyTrans_NumTubingCircuits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NumTubingCircuits_)
            {
              this->SimFlowEnergyTrans_NumTubingCircuits_.set (SimFlowEnergyTrans_NumTubingCircuits_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ConstructionName
          //
          if (n.name () == "SimFlowEnergyTrans_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ConstructionName_type > r (
              SimFlowEnergyTrans_ConstructionName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ConstructionName_)
            {
              this->SimFlowEnergyTrans_ConstructionName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HydronicTubeSpacing
          //
          if (n.name () == "SimFlowEnergyTrans_HydronicTubeSpacing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HydronicTubeSpacing_)
            {
              this->SimFlowEnergyTrans_HydronicTubeSpacing_.set (SimFlowEnergyTrans_HydronicTubeSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SurfLength
          //
          if (n.name () == "SimFlowEnergyTrans_SurfLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SurfLength_)
            {
              this->SimFlowEnergyTrans_SurfLength_.set (SimFlowEnergyTrans_SurfLength_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SurfWidth
          //
          if (n.name () == "SimFlowEnergyTrans_SurfWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SurfWidth_)
            {
              this->SimFlowEnergyTrans_SurfWidth_.set (SimFlowEnergyTrans_SurfWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSurfEnvironment
          //
          if (n.name () == "SimFlowEnergyTrans_LowSurfEnvironment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LowSurfEnvironment_type > r (
              SimFlowEnergyTrans_LowSurfEnvironment_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LowSurfEnvironment_)
            {
              this->SimFlowEnergyTrans_LowSurfEnvironment_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface* SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_HeatExEarthToWater_Surface (*this, f, c);
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface& SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      operator= (const SimFlowEnergyTransfer_HeatExEarthToWater_Surface& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExEarthToWater& > (*this) = x;
          this->SimFlowEnergyTrans_HydronicTubingsideDiam_ = x.SimFlowEnergyTrans_HydronicTubingsideDiam_;
          this->SimFlowEnergyTrans_FluidInletNodeName_ = x.SimFlowEnergyTrans_FluidInletNodeName_;
          this->SimFlowEnergyTrans_FluidOutletNodeName_ = x.SimFlowEnergyTrans_FluidOutletNodeName_;
          this->SimFlowEnergyTrans_NumTubingCircuits_ = x.SimFlowEnergyTrans_NumTubingCircuits_;
          this->SimFlowEnergyTrans_ConstructionName_ = x.SimFlowEnergyTrans_ConstructionName_;
          this->SimFlowEnergyTrans_HydronicTubeSpacing_ = x.SimFlowEnergyTrans_HydronicTubeSpacing_;
          this->SimFlowEnergyTrans_SurfLength_ = x.SimFlowEnergyTrans_SurfLength_;
          this->SimFlowEnergyTrans_SurfWidth_ = x.SimFlowEnergyTrans_SurfWidth_;
          this->SimFlowEnergyTrans_LowSurfEnvironment_ = x.SimFlowEnergyTrans_LowSurfEnvironment_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_HeatExEarthToWater_Surface::
      ~SimFlowEnergyTransfer_HeatExEarthToWater_Surface ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

