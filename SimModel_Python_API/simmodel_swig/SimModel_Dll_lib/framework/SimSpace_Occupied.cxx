// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSpace_Occupied.hxx"

#include "t24kitchexhhooddutylist.hxx"

#include "doublelist.hxx"

#include "t24kitchexhhoodstylelist.hxx"

#include "integerlist.hxx"

#include "t24mandlightcntrldescrpt.hxx"

#include "t24mandlightcntrlrpt.hxx"

#include "t24mandlightcntrlaccepreqrpt.hxx"

#include "t24mandlightcntrlisautoshoffcntrlrpt.hxx"

#include "t24mandlightcntrlisdayltngcntrlrpt.hxx"

#include "t24mandlightcntrlisdmndrespcntrlrpt.hxx"

#include "t24mandlightcntrlismanareacntrlrpt.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSpace_Occupied
      // 

      const SimSpace_Occupied::T24BaselineCommercialRefrigerationEPD_optional& SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEPD () const
      {
        return this->T24BaselineCommercialRefrigerationEPD_;
      }

      SimSpace_Occupied::T24BaselineCommercialRefrigerationEPD_optional& SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEPD ()
      {
        return this->T24BaselineCommercialRefrigerationEPD_;
      }

      void SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEPD (const T24BaselineCommercialRefrigerationEPD_type& x)
      {
        this->T24BaselineCommercialRefrigerationEPD_.set (x);
      }

      void SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEPD (const T24BaselineCommercialRefrigerationEPD_optional& x)
      {
        this->T24BaselineCommercialRefrigerationEPD_ = x;
      }

      const SimSpace_Occupied::T24BaselineCommercialRefrigerationEquipmentScheduleReference_optional& SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEquipmentScheduleReference () const
      {
        return this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_;
      }

      SimSpace_Occupied::T24BaselineCommercialRefrigerationEquipmentScheduleReference_optional& SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEquipmentScheduleReference ()
      {
        return this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_;
      }

      void SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEquipmentScheduleReference (const T24BaselineCommercialRefrigerationEquipmentScheduleReference_type& x)
      {
        this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_.set (x);
      }

      void SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEquipmentScheduleReference (const T24BaselineCommercialRefrigerationEquipmentScheduleReference_optional& x)
      {
        this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_ = x;
      }

      void SimSpace_Occupied::
      T24BaselineCommercialRefrigerationEquipmentScheduleReference (::std::auto_ptr< T24BaselineCommercialRefrigerationEquipmentScheduleReference_type > x)
      {
        this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_.set (x);
      }

      const SimSpace_Occupied::T24BaselineGasEquipmentPowerDensity_optional& SimSpace_Occupied::
      T24BaselineGasEquipmentPowerDensity () const
      {
        return this->T24BaselineGasEquipmentPowerDensity_;
      }

      SimSpace_Occupied::T24BaselineGasEquipmentPowerDensity_optional& SimSpace_Occupied::
      T24BaselineGasEquipmentPowerDensity ()
      {
        return this->T24BaselineGasEquipmentPowerDensity_;
      }

      void SimSpace_Occupied::
      T24BaselineGasEquipmentPowerDensity (const T24BaselineGasEquipmentPowerDensity_type& x)
      {
        this->T24BaselineGasEquipmentPowerDensity_.set (x);
      }

      void SimSpace_Occupied::
      T24BaselineGasEquipmentPowerDensity (const T24BaselineGasEquipmentPowerDensity_optional& x)
      {
        this->T24BaselineGasEquipmentPowerDensity_ = x;
      }

      const SimSpace_Occupied::T24BaselineGasEquipmentScheduleReference_optional& SimSpace_Occupied::
      T24BaselineGasEquipmentScheduleReference () const
      {
        return this->T24BaselineGasEquipmentScheduleReference_;
      }

      SimSpace_Occupied::T24BaselineGasEquipmentScheduleReference_optional& SimSpace_Occupied::
      T24BaselineGasEquipmentScheduleReference ()
      {
        return this->T24BaselineGasEquipmentScheduleReference_;
      }

      void SimSpace_Occupied::
      T24BaselineGasEquipmentScheduleReference (const T24BaselineGasEquipmentScheduleReference_type& x)
      {
        this->T24BaselineGasEquipmentScheduleReference_.set (x);
      }

      void SimSpace_Occupied::
      T24BaselineGasEquipmentScheduleReference (const T24BaselineGasEquipmentScheduleReference_optional& x)
      {
        this->T24BaselineGasEquipmentScheduleReference_ = x;
      }

      void SimSpace_Occupied::
      T24BaselineGasEquipmentScheduleReference (::std::auto_ptr< T24BaselineGasEquipmentScheduleReference_type > x)
      {
        this->T24BaselineGasEquipmentScheduleReference_.set (x);
      }

      const SimSpace_Occupied::T24BaselineReceptaclePowerDensity_optional& SimSpace_Occupied::
      T24BaselineReceptaclePowerDensity () const
      {
        return this->T24BaselineReceptaclePowerDensity_;
      }

      SimSpace_Occupied::T24BaselineReceptaclePowerDensity_optional& SimSpace_Occupied::
      T24BaselineReceptaclePowerDensity ()
      {
        return this->T24BaselineReceptaclePowerDensity_;
      }

      void SimSpace_Occupied::
      T24BaselineReceptaclePowerDensity (const T24BaselineReceptaclePowerDensity_type& x)
      {
        this->T24BaselineReceptaclePowerDensity_.set (x);
      }

      void SimSpace_Occupied::
      T24BaselineReceptaclePowerDensity (const T24BaselineReceptaclePowerDensity_optional& x)
      {
        this->T24BaselineReceptaclePowerDensity_ = x;
      }

      const SimSpace_Occupied::T24BaselineReceptacleScheduleReference_optional& SimSpace_Occupied::
      T24BaselineReceptacleScheduleReference () const
      {
        return this->T24BaselineReceptacleScheduleReference_;
      }

      SimSpace_Occupied::T24BaselineReceptacleScheduleReference_optional& SimSpace_Occupied::
      T24BaselineReceptacleScheduleReference ()
      {
        return this->T24BaselineReceptacleScheduleReference_;
      }

      void SimSpace_Occupied::
      T24BaselineReceptacleScheduleReference (const T24BaselineReceptacleScheduleReference_type& x)
      {
        this->T24BaselineReceptacleScheduleReference_.set (x);
      }

      void SimSpace_Occupied::
      T24BaselineReceptacleScheduleReference (const T24BaselineReceptacleScheduleReference_optional& x)
      {
        this->T24BaselineReceptacleScheduleReference_ = x;
      }

      void SimSpace_Occupied::
      T24BaselineReceptacleScheduleReference (::std::auto_ptr< T24BaselineReceptacleScheduleReference_type > x)
      {
        this->T24BaselineReceptacleScheduleReference_.set (x);
      }

      const SimSpace_Occupied::T24CommRefrigEPD_optional& SimSpace_Occupied::
      T24CommRefrigEPD () const
      {
        return this->T24CommRefrigEPD_;
      }

      SimSpace_Occupied::T24CommRefrigEPD_optional& SimSpace_Occupied::
      T24CommRefrigEPD ()
      {
        return this->T24CommRefrigEPD_;
      }

      void SimSpace_Occupied::
      T24CommRefrigEPD (const T24CommRefrigEPD_type& x)
      {
        this->T24CommRefrigEPD_.set (x);
      }

      void SimSpace_Occupied::
      T24CommRefrigEPD (const T24CommRefrigEPD_optional& x)
      {
        this->T24CommRefrigEPD_ = x;
      }

      const SimSpace_Occupied::T24CommercialRefrigerationEPDExceptionalCondition_optional& SimSpace_Occupied::
      T24CommercialRefrigerationEPDExceptionalCondition () const
      {
        return this->T24CommercialRefrigerationEPDExceptionalCondition_;
      }

      SimSpace_Occupied::T24CommercialRefrigerationEPDExceptionalCondition_optional& SimSpace_Occupied::
      T24CommercialRefrigerationEPDExceptionalCondition ()
      {
        return this->T24CommercialRefrigerationEPDExceptionalCondition_;
      }

      void SimSpace_Occupied::
      T24CommercialRefrigerationEPDExceptionalCondition (const T24CommercialRefrigerationEPDExceptionalCondition_type& x)
      {
        this->T24CommercialRefrigerationEPDExceptionalCondition_.set (x);
      }

      void SimSpace_Occupied::
      T24CommercialRefrigerationEPDExceptionalCondition (const T24CommercialRefrigerationEPDExceptionalCondition_optional& x)
      {
        this->T24CommercialRefrigerationEPDExceptionalCondition_ = x;
      }

      const SimSpace_Occupied::T24CommRefrigEqmtSchedRef_optional& SimSpace_Occupied::
      T24CommRefrigEqmtSchedRef () const
      {
        return this->T24CommRefrigEqmtSchedRef_;
      }

      SimSpace_Occupied::T24CommRefrigEqmtSchedRef_optional& SimSpace_Occupied::
      T24CommRefrigEqmtSchedRef ()
      {
        return this->T24CommRefrigEqmtSchedRef_;
      }

      void SimSpace_Occupied::
      T24CommRefrigEqmtSchedRef (const T24CommRefrigEqmtSchedRef_type& x)
      {
        this->T24CommRefrigEqmtSchedRef_.set (x);
      }

      void SimSpace_Occupied::
      T24CommRefrigEqmtSchedRef (const T24CommRefrigEqmtSchedRef_optional& x)
      {
        this->T24CommRefrigEqmtSchedRef_ = x;
      }

      void SimSpace_Occupied::
      T24CommRefrigEqmtSchedRef (::std::auto_ptr< T24CommRefrigEqmtSchedRef_type > x)
      {
        this->T24CommRefrigEqmtSchedRef_.set (x);
      }

      const SimSpace_Occupied::T24CommRefrigLatentFraction_optional& SimSpace_Occupied::
      T24CommRefrigLatentFraction () const
      {
        return this->T24CommRefrigLatentFraction_;
      }

      SimSpace_Occupied::T24CommRefrigLatentFraction_optional& SimSpace_Occupied::
      T24CommRefrigLatentFraction ()
      {
        return this->T24CommRefrigLatentFraction_;
      }

      void SimSpace_Occupied::
      T24CommRefrigLatentFraction (const T24CommRefrigLatentFraction_type& x)
      {
        this->T24CommRefrigLatentFraction_.set (x);
      }

      void SimSpace_Occupied::
      T24CommRefrigLatentFraction (const T24CommRefrigLatentFraction_optional& x)
      {
        this->T24CommRefrigLatentFraction_ = x;
      }

      const SimSpace_Occupied::T24CommRefrigLostFraction_optional& SimSpace_Occupied::
      T24CommRefrigLostFraction () const
      {
        return this->T24CommRefrigLostFraction_;
      }

      SimSpace_Occupied::T24CommRefrigLostFraction_optional& SimSpace_Occupied::
      T24CommRefrigLostFraction ()
      {
        return this->T24CommRefrigLostFraction_;
      }

      void SimSpace_Occupied::
      T24CommRefrigLostFraction (const T24CommRefrigLostFraction_type& x)
      {
        this->T24CommRefrigLostFraction_.set (x);
      }

      void SimSpace_Occupied::
      T24CommRefrigLostFraction (const T24CommRefrigLostFraction_optional& x)
      {
        this->T24CommRefrigLostFraction_ = x;
      }

      const SimSpace_Occupied::T24CommRefrigRadFraction_optional& SimSpace_Occupied::
      T24CommRefrigRadFraction () const
      {
        return this->T24CommRefrigRadFraction_;
      }

      SimSpace_Occupied::T24CommRefrigRadFraction_optional& SimSpace_Occupied::
      T24CommRefrigRadFraction ()
      {
        return this->T24CommRefrigRadFraction_;
      }

      void SimSpace_Occupied::
      T24CommRefrigRadFraction (const T24CommRefrigRadFraction_type& x)
      {
        this->T24CommRefrigRadFraction_.set (x);
      }

      void SimSpace_Occupied::
      T24CommRefrigRadFraction (const T24CommRefrigRadFraction_optional& x)
      {
        this->T24CommRefrigRadFraction_ = x;
      }

      const SimSpace_Occupied::T24EnvelopeStatus_optional& SimSpace_Occupied::
      T24EnvelopeStatus () const
      {
        return this->T24EnvelopeStatus_;
      }

      SimSpace_Occupied::T24EnvelopeStatus_optional& SimSpace_Occupied::
      T24EnvelopeStatus ()
      {
        return this->T24EnvelopeStatus_;
      }

      void SimSpace_Occupied::
      T24EnvelopeStatus (const T24EnvelopeStatus_type& x)
      {
        this->T24EnvelopeStatus_.set (x);
      }

      void SimSpace_Occupied::
      T24EnvelopeStatus (const T24EnvelopeStatus_optional& x)
      {
        this->T24EnvelopeStatus_ = x;
      }

      void SimSpace_Occupied::
      T24EnvelopeStatus (::std::auto_ptr< T24EnvelopeStatus_type > x)
      {
        this->T24EnvelopeStatus_.set (x);
      }

      const SimSpace_Occupied::T24ExhaustAirChangesPerHour_optional& SimSpace_Occupied::
      T24ExhaustAirChangesPerHour () const
      {
        return this->T24ExhaustAirChangesPerHour_;
      }

      SimSpace_Occupied::T24ExhaustAirChangesPerHour_optional& SimSpace_Occupied::
      T24ExhaustAirChangesPerHour ()
      {
        return this->T24ExhaustAirChangesPerHour_;
      }

      void SimSpace_Occupied::
      T24ExhaustAirChangesPerHour (const T24ExhaustAirChangesPerHour_type& x)
      {
        this->T24ExhaustAirChangesPerHour_.set (x);
      }

      void SimSpace_Occupied::
      T24ExhaustAirChangesPerHour (const T24ExhaustAirChangesPerHour_optional& x)
      {
        this->T24ExhaustAirChangesPerHour_ = x;
      }

      const SimSpace_Occupied::T24ExhaustPerArea_optional& SimSpace_Occupied::
      T24ExhaustPerArea () const
      {
        return this->T24ExhaustPerArea_;
      }

      SimSpace_Occupied::T24ExhaustPerArea_optional& SimSpace_Occupied::
      T24ExhaustPerArea ()
      {
        return this->T24ExhaustPerArea_;
      }

      void SimSpace_Occupied::
      T24ExhaustPerArea (const T24ExhaustPerArea_type& x)
      {
        this->T24ExhaustPerArea_.set (x);
      }

      void SimSpace_Occupied::
      T24ExhaustPerArea (const T24ExhaustPerArea_optional& x)
      {
        this->T24ExhaustPerArea_ = x;
      }

      const SimSpace_Occupied::T24ExhaustPerSpace_optional& SimSpace_Occupied::
      T24ExhaustPerSpace () const
      {
        return this->T24ExhaustPerSpace_;
      }

      SimSpace_Occupied::T24ExhaustPerSpace_optional& SimSpace_Occupied::
      T24ExhaustPerSpace ()
      {
        return this->T24ExhaustPerSpace_;
      }

      void SimSpace_Occupied::
      T24ExhaustPerSpace (const T24ExhaustPerSpace_type& x)
      {
        this->T24ExhaustPerSpace_.set (x);
      }

      void SimSpace_Occupied::
      T24ExhaustPerSpace (const T24ExhaustPerSpace_optional& x)
      {
        this->T24ExhaustPerSpace_ = x;
      }

      const SimSpace_Occupied::T24IntLightingSpecMethod_optional& SimSpace_Occupied::
      T24IntLightingSpecMethod () const
      {
        return this->T24IntLightingSpecMethod_;
      }

      SimSpace_Occupied::T24IntLightingSpecMethod_optional& SimSpace_Occupied::
      T24IntLightingSpecMethod ()
      {
        return this->T24IntLightingSpecMethod_;
      }

      void SimSpace_Occupied::
      T24IntLightingSpecMethod (const T24IntLightingSpecMethod_type& x)
      {
        this->T24IntLightingSpecMethod_.set (x);
      }

      void SimSpace_Occupied::
      T24IntLightingSpecMethod (const T24IntLightingSpecMethod_optional& x)
      {
        this->T24IntLightingSpecMethod_ = x;
      }

      void SimSpace_Occupied::
      T24IntLightingSpecMethod (::std::auto_ptr< T24IntLightingSpecMethod_type > x)
      {
        this->T24IntLightingSpecMethod_.set (x);
      }

      const SimSpace_Occupied::T24KitchExhHoodDutyList_optional& SimSpace_Occupied::
      T24KitchExhHoodDutyList () const
      {
        return this->T24KitchExhHoodDutyList_;
      }

      SimSpace_Occupied::T24KitchExhHoodDutyList_optional& SimSpace_Occupied::
      T24KitchExhHoodDutyList ()
      {
        return this->T24KitchExhHoodDutyList_;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodDutyList (const T24KitchExhHoodDutyList_type& x)
      {
        this->T24KitchExhHoodDutyList_.set (x);
      }

      void SimSpace_Occupied::
      T24KitchExhHoodDutyList (const T24KitchExhHoodDutyList_optional& x)
      {
        this->T24KitchExhHoodDutyList_ = x;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodDutyList (::std::auto_ptr< T24KitchExhHoodDutyList_type > x)
      {
        this->T24KitchExhHoodDutyList_.set (x);
      }

      const SimSpace_Occupied::T24KitchExhHoodFlow_optional& SimSpace_Occupied::
      T24KitchExhHoodFlow () const
      {
        return this->T24KitchExhHoodFlow_;
      }

      SimSpace_Occupied::T24KitchExhHoodFlow_optional& SimSpace_Occupied::
      T24KitchExhHoodFlow ()
      {
        return this->T24KitchExhHoodFlow_;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodFlow (const T24KitchExhHoodFlow_type& x)
      {
        this->T24KitchExhHoodFlow_.set (x);
      }

      void SimSpace_Occupied::
      T24KitchExhHoodFlow (const T24KitchExhHoodFlow_optional& x)
      {
        this->T24KitchExhHoodFlow_ = x;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodFlow (::std::auto_ptr< T24KitchExhHoodFlow_type > x)
      {
        this->T24KitchExhHoodFlow_.set (x);
      }

      const SimSpace_Occupied::T24KitchExhHoodLength_optional& SimSpace_Occupied::
      T24KitchExhHoodLength () const
      {
        return this->T24KitchExhHoodLength_;
      }

      SimSpace_Occupied::T24KitchExhHoodLength_optional& SimSpace_Occupied::
      T24KitchExhHoodLength ()
      {
        return this->T24KitchExhHoodLength_;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodLength (const T24KitchExhHoodLength_type& x)
      {
        this->T24KitchExhHoodLength_.set (x);
      }

      void SimSpace_Occupied::
      T24KitchExhHoodLength (const T24KitchExhHoodLength_optional& x)
      {
        this->T24KitchExhHoodLength_ = x;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodLength (::std::auto_ptr< T24KitchExhHoodLength_type > x)
      {
        this->T24KitchExhHoodLength_.set (x);
      }

      const SimSpace_Occupied::T24KitchExhHoodStyleList_optional& SimSpace_Occupied::
      T24KitchExhHoodStyleList () const
      {
        return this->T24KitchExhHoodStyleList_;
      }

      SimSpace_Occupied::T24KitchExhHoodStyleList_optional& SimSpace_Occupied::
      T24KitchExhHoodStyleList ()
      {
        return this->T24KitchExhHoodStyleList_;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodStyleList (const T24KitchExhHoodStyleList_type& x)
      {
        this->T24KitchExhHoodStyleList_.set (x);
      }

      void SimSpace_Occupied::
      T24KitchExhHoodStyleList (const T24KitchExhHoodStyleList_optional& x)
      {
        this->T24KitchExhHoodStyleList_ = x;
      }

      void SimSpace_Occupied::
      T24KitchExhHoodStyleList (::std::auto_ptr< T24KitchExhHoodStyleList_type > x)
      {
        this->T24KitchExhHoodStyleList_.set (x);
      }

      const SimSpace_Occupied::T24LabExhRateType_optional& SimSpace_Occupied::
      T24LabExhRateType () const
      {
        return this->T24LabExhRateType_;
      }

      SimSpace_Occupied::T24LabExhRateType_optional& SimSpace_Occupied::
      T24LabExhRateType ()
      {
        return this->T24LabExhRateType_;
      }

      void SimSpace_Occupied::
      T24LabExhRateType (const T24LabExhRateType_type& x)
      {
        this->T24LabExhRateType_.set (x);
      }

      void SimSpace_Occupied::
      T24LabExhRateType (const T24LabExhRateType_optional& x)
      {
        this->T24LabExhRateType_ = x;
      }

      void SimSpace_Occupied::
      T24LabExhRateType (::std::auto_ptr< T24LabExhRateType_type > x)
      {
        this->T24LabExhRateType_.set (x);
      }

      const SimSpace_Occupied::T24LightingStatus_optional& SimSpace_Occupied::
      T24LightingStatus () const
      {
        return this->T24LightingStatus_;
      }

      SimSpace_Occupied::T24LightingStatus_optional& SimSpace_Occupied::
      T24LightingStatus ()
      {
        return this->T24LightingStatus_;
      }

      void SimSpace_Occupied::
      T24LightingStatus (const T24LightingStatus_type& x)
      {
        this->T24LightingStatus_.set (x);
      }

      void SimSpace_Occupied::
      T24LightingStatus (const T24LightingStatus_optional& x)
      {
        this->T24LightingStatus_ = x;
      }

      void SimSpace_Occupied::
      T24LightingStatus (::std::auto_ptr< T24LightingStatus_type > x)
      {
        this->T24LightingStatus_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlCntRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlCntRpt () const
      {
        return this->T24MandLightCntrlCntRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlCntRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlCntRpt ()
      {
        return this->T24MandLightCntrlCntRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlCntRpt (const T24MandLightCntrlCntRpt_type& x)
      {
        this->T24MandLightCntrlCntRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlCntRpt (const T24MandLightCntrlCntRpt_optional& x)
      {
        this->T24MandLightCntrlCntRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlCntRpt (::std::auto_ptr< T24MandLightCntrlCntRpt_type > x)
      {
        this->T24MandLightCntrlCntRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlDescRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlDescRpt () const
      {
        return this->T24MandLightCntrlDescRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlDescRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlDescRpt ()
      {
        return this->T24MandLightCntrlDescRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlDescRpt (const T24MandLightCntrlDescRpt_type& x)
      {
        this->T24MandLightCntrlDescRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlDescRpt (const T24MandLightCntrlDescRpt_optional& x)
      {
        this->T24MandLightCntrlDescRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlDescRpt (::std::auto_ptr< T24MandLightCntrlDescRpt_type > x)
      {
        this->T24MandLightCntrlDescRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlRpt () const
      {
        return this->T24MandLightCntrlRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlRpt ()
      {
        return this->T24MandLightCntrlRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlRpt (const T24MandLightCntrlRpt_type& x)
      {
        this->T24MandLightCntrlRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlRpt (const T24MandLightCntrlRpt_optional& x)
      {
        this->T24MandLightCntrlRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlRpt (::std::auto_ptr< T24MandLightCntrlRpt_type > x)
      {
        this->T24MandLightCntrlRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlAccepReqRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlAccepReqRpt () const
      {
        return this->T24MandLightCntrlAccepReqRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlAccepReqRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlAccepReqRpt ()
      {
        return this->T24MandLightCntrlAccepReqRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlAccepReqRpt (const T24MandLightCntrlAccepReqRpt_type& x)
      {
        this->T24MandLightCntrlAccepReqRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlAccepReqRpt (const T24MandLightCntrlAccepReqRpt_optional& x)
      {
        this->T24MandLightCntrlAccepReqRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlAccepReqRpt (::std::auto_ptr< T24MandLightCntrlAccepReqRpt_type > x)
      {
        this->T24MandLightCntrlAccepReqRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlIsAutoShOffCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsAutoShOffCntrlRpt () const
      {
        return this->T24MandLightCntrlIsAutoShOffCntrlRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlIsAutoShOffCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsAutoShOffCntrlRpt ()
      {
        return this->T24MandLightCntrlIsAutoShOffCntrlRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsAutoShOffCntrlRpt (const T24MandLightCntrlIsAutoShOffCntrlRpt_type& x)
      {
        this->T24MandLightCntrlIsAutoShOffCntrlRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsAutoShOffCntrlRpt (const T24MandLightCntrlIsAutoShOffCntrlRpt_optional& x)
      {
        this->T24MandLightCntrlIsAutoShOffCntrlRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsAutoShOffCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsAutoShOffCntrlRpt_type > x)
      {
        this->T24MandLightCntrlIsAutoShOffCntrlRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlIsDayltngCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsDayltngCntrlRpt () const
      {
        return this->T24MandLightCntrlIsDayltngCntrlRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlIsDayltngCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsDayltngCntrlRpt ()
      {
        return this->T24MandLightCntrlIsDayltngCntrlRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsDayltngCntrlRpt (const T24MandLightCntrlIsDayltngCntrlRpt_type& x)
      {
        this->T24MandLightCntrlIsDayltngCntrlRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsDayltngCntrlRpt (const T24MandLightCntrlIsDayltngCntrlRpt_optional& x)
      {
        this->T24MandLightCntrlIsDayltngCntrlRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsDayltngCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsDayltngCntrlRpt_type > x)
      {
        this->T24MandLightCntrlIsDayltngCntrlRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlIsDmndRespCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsDmndRespCntrlRpt () const
      {
        return this->T24MandLightCntrlIsDmndRespCntrlRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlIsDmndRespCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsDmndRespCntrlRpt ()
      {
        return this->T24MandLightCntrlIsDmndRespCntrlRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsDmndRespCntrlRpt (const T24MandLightCntrlIsDmndRespCntrlRpt_type& x)
      {
        this->T24MandLightCntrlIsDmndRespCntrlRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsDmndRespCntrlRpt (const T24MandLightCntrlIsDmndRespCntrlRpt_optional& x)
      {
        this->T24MandLightCntrlIsDmndRespCntrlRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsDmndRespCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsDmndRespCntrlRpt_type > x)
      {
        this->T24MandLightCntrlIsDmndRespCntrlRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlIsManAreaCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsManAreaCntrlRpt () const
      {
        return this->T24MandLightCntrlIsManAreaCntrlRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlIsManAreaCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsManAreaCntrlRpt ()
      {
        return this->T24MandLightCntrlIsManAreaCntrlRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsManAreaCntrlRpt (const T24MandLightCntrlIsManAreaCntrlRpt_type& x)
      {
        this->T24MandLightCntrlIsManAreaCntrlRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsManAreaCntrlRpt (const T24MandLightCntrlIsManAreaCntrlRpt_optional& x)
      {
        this->T24MandLightCntrlIsManAreaCntrlRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsManAreaCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsManAreaCntrlRpt_type > x)
      {
        this->T24MandLightCntrlIsManAreaCntrlRpt_.set (x);
      }

      const SimSpace_Occupied::T24MandLightCntrlIsMultLvlCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsMultLvlCntrlRpt () const
      {
        return this->T24MandLightCntrlIsMultLvlCntrlRpt_;
      }

      SimSpace_Occupied::T24MandLightCntrlIsMultLvlCntrlRpt_optional& SimSpace_Occupied::
      T24MandLightCntrlIsMultLvlCntrlRpt ()
      {
        return this->T24MandLightCntrlIsMultLvlCntrlRpt_;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsMultLvlCntrlRpt (const T24MandLightCntrlIsMultLvlCntrlRpt_type& x)
      {
        this->T24MandLightCntrlIsMultLvlCntrlRpt_.set (x);
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsMultLvlCntrlRpt (const T24MandLightCntrlIsMultLvlCntrlRpt_optional& x)
      {
        this->T24MandLightCntrlIsMultLvlCntrlRpt_ = x;
      }

      void SimSpace_Occupied::
      T24MandLightCntrlIsMultLvlCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsMultLvlCntrlRpt_type > x)
      {
        this->T24MandLightCntrlIsMultLvlCntrlRpt_.set (x);
      }

      const SimSpace_Occupied::T24SkylightRqmtExcep_optional& SimSpace_Occupied::
      T24SkylightRqmtExcep () const
      {
        return this->T24SkylightRqmtExcep_;
      }

      SimSpace_Occupied::T24SkylightRqmtExcep_optional& SimSpace_Occupied::
      T24SkylightRqmtExcep ()
      {
        return this->T24SkylightRqmtExcep_;
      }

      void SimSpace_Occupied::
      T24SkylightRqmtExcep (const T24SkylightRqmtExcep_type& x)
      {
        this->T24SkylightRqmtExcep_.set (x);
      }

      void SimSpace_Occupied::
      T24SkylightRqmtExcep (const T24SkylightRqmtExcep_optional& x)
      {
        this->T24SkylightRqmtExcep_ = x;
      }

      void SimSpace_Occupied::
      T24SkylightRqmtExcep (::std::auto_ptr< T24SkylightRqmtExcep_type > x)
      {
        this->T24SkylightRqmtExcep_.set (x);
      }

      const SimSpace_Occupied::T24SpaceFunction_optional& SimSpace_Occupied::
      T24SpaceFunction () const
      {
        return this->T24SpaceFunction_;
      }

      SimSpace_Occupied::T24SpaceFunction_optional& SimSpace_Occupied::
      T24SpaceFunction ()
      {
        return this->T24SpaceFunction_;
      }

      void SimSpace_Occupied::
      T24SpaceFunction (const T24SpaceFunction_type& x)
      {
        this->T24SpaceFunction_.set (x);
      }

      void SimSpace_Occupied::
      T24SpaceFunction (const T24SpaceFunction_optional& x)
      {
        this->T24SpaceFunction_ = x;
      }

      void SimSpace_Occupied::
      T24SpaceFunction (::std::auto_ptr< T24SpaceFunction_type > x)
      {
        this->T24SpaceFunction_.set (x);
      }

      const SimSpace_Occupied::T24ConstructStatus3_optional& SimSpace_Occupied::
      T24ConstructStatus3 () const
      {
        return this->T24ConstructStatus3_;
      }

      SimSpace_Occupied::T24ConstructStatus3_optional& SimSpace_Occupied::
      T24ConstructStatus3 ()
      {
        return this->T24ConstructStatus3_;
      }

      void SimSpace_Occupied::
      T24ConstructStatus3 (const T24ConstructStatus3_type& x)
      {
        this->T24ConstructStatus3_.set (x);
      }

      void SimSpace_Occupied::
      T24ConstructStatus3 (const T24ConstructStatus3_optional& x)
      {
        this->T24ConstructStatus3_ = x;
      }

      void SimSpace_Occupied::
      T24ConstructStatus3 (::std::auto_ptr< T24ConstructStatus3_type > x)
      {
        this->T24ConstructStatus3_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSpace_Occupied
      //

      SimSpace_Occupied::
      SimSpace_Occupied ()
      : ::schema::simxml::BuildingModel::SimSpace (),
        T24BaselineCommercialRefrigerationEPD_ (this),
        T24BaselineCommercialRefrigerationEquipmentScheduleReference_ (this),
        T24BaselineGasEquipmentPowerDensity_ (this),
        T24BaselineGasEquipmentScheduleReference_ (this),
        T24BaselineReceptaclePowerDensity_ (this),
        T24BaselineReceptacleScheduleReference_ (this),
        T24CommRefrigEPD_ (this),
        T24CommercialRefrigerationEPDExceptionalCondition_ (this),
        T24CommRefrigEqmtSchedRef_ (this),
        T24CommRefrigLatentFraction_ (this),
        T24CommRefrigLostFraction_ (this),
        T24CommRefrigRadFraction_ (this),
        T24EnvelopeStatus_ (this),
        T24ExhaustAirChangesPerHour_ (this),
        T24ExhaustPerArea_ (this),
        T24ExhaustPerSpace_ (this),
        T24IntLightingSpecMethod_ (this),
        T24KitchExhHoodDutyList_ (this),
        T24KitchExhHoodFlow_ (this),
        T24KitchExhHoodLength_ (this),
        T24KitchExhHoodStyleList_ (this),
        T24LabExhRateType_ (this),
        T24LightingStatus_ (this),
        T24MandLightCntrlCntRpt_ (this),
        T24MandLightCntrlDescRpt_ (this),
        T24MandLightCntrlRpt_ (this),
        T24MandLightCntrlAccepReqRpt_ (this),
        T24MandLightCntrlIsAutoShOffCntrlRpt_ (this),
        T24MandLightCntrlIsDayltngCntrlRpt_ (this),
        T24MandLightCntrlIsDmndRespCntrlRpt_ (this),
        T24MandLightCntrlIsManAreaCntrlRpt_ (this),
        T24MandLightCntrlIsMultLvlCntrlRpt_ (this),
        T24SkylightRqmtExcep_ (this),
        T24SpaceFunction_ (this),
        T24ConstructStatus3_ (this)
      {
      }

      SimSpace_Occupied::
      SimSpace_Occupied (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSpace (RefId),
        T24BaselineCommercialRefrigerationEPD_ (this),
        T24BaselineCommercialRefrigerationEquipmentScheduleReference_ (this),
        T24BaselineGasEquipmentPowerDensity_ (this),
        T24BaselineGasEquipmentScheduleReference_ (this),
        T24BaselineReceptaclePowerDensity_ (this),
        T24BaselineReceptacleScheduleReference_ (this),
        T24CommRefrigEPD_ (this),
        T24CommercialRefrigerationEPDExceptionalCondition_ (this),
        T24CommRefrigEqmtSchedRef_ (this),
        T24CommRefrigLatentFraction_ (this),
        T24CommRefrigLostFraction_ (this),
        T24CommRefrigRadFraction_ (this),
        T24EnvelopeStatus_ (this),
        T24ExhaustAirChangesPerHour_ (this),
        T24ExhaustPerArea_ (this),
        T24ExhaustPerSpace_ (this),
        T24IntLightingSpecMethod_ (this),
        T24KitchExhHoodDutyList_ (this),
        T24KitchExhHoodFlow_ (this),
        T24KitchExhHoodLength_ (this),
        T24KitchExhHoodStyleList_ (this),
        T24LabExhRateType_ (this),
        T24LightingStatus_ (this),
        T24MandLightCntrlCntRpt_ (this),
        T24MandLightCntrlDescRpt_ (this),
        T24MandLightCntrlRpt_ (this),
        T24MandLightCntrlAccepReqRpt_ (this),
        T24MandLightCntrlIsAutoShOffCntrlRpt_ (this),
        T24MandLightCntrlIsDayltngCntrlRpt_ (this),
        T24MandLightCntrlIsDmndRespCntrlRpt_ (this),
        T24MandLightCntrlIsManAreaCntrlRpt_ (this),
        T24MandLightCntrlIsMultLvlCntrlRpt_ (this),
        T24SkylightRqmtExcep_ (this),
        T24SpaceFunction_ (this),
        T24ConstructStatus3_ (this)
      {
      }

      SimSpace_Occupied::
      SimSpace_Occupied (const SimSpace_Occupied& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSpace (x, f, c),
        T24BaselineCommercialRefrigerationEPD_ (x.T24BaselineCommercialRefrigerationEPD_, f, this),
        T24BaselineCommercialRefrigerationEquipmentScheduleReference_ (x.T24BaselineCommercialRefrigerationEquipmentScheduleReference_, f, this),
        T24BaselineGasEquipmentPowerDensity_ (x.T24BaselineGasEquipmentPowerDensity_, f, this),
        T24BaselineGasEquipmentScheduleReference_ (x.T24BaselineGasEquipmentScheduleReference_, f, this),
        T24BaselineReceptaclePowerDensity_ (x.T24BaselineReceptaclePowerDensity_, f, this),
        T24BaselineReceptacleScheduleReference_ (x.T24BaselineReceptacleScheduleReference_, f, this),
        T24CommRefrigEPD_ (x.T24CommRefrigEPD_, f, this),
        T24CommercialRefrigerationEPDExceptionalCondition_ (x.T24CommercialRefrigerationEPDExceptionalCondition_, f, this),
        T24CommRefrigEqmtSchedRef_ (x.T24CommRefrigEqmtSchedRef_, f, this),
        T24CommRefrigLatentFraction_ (x.T24CommRefrigLatentFraction_, f, this),
        T24CommRefrigLostFraction_ (x.T24CommRefrigLostFraction_, f, this),
        T24CommRefrigRadFraction_ (x.T24CommRefrigRadFraction_, f, this),
        T24EnvelopeStatus_ (x.T24EnvelopeStatus_, f, this),
        T24ExhaustAirChangesPerHour_ (x.T24ExhaustAirChangesPerHour_, f, this),
        T24ExhaustPerArea_ (x.T24ExhaustPerArea_, f, this),
        T24ExhaustPerSpace_ (x.T24ExhaustPerSpace_, f, this),
        T24IntLightingSpecMethod_ (x.T24IntLightingSpecMethod_, f, this),
        T24KitchExhHoodDutyList_ (x.T24KitchExhHoodDutyList_, f, this),
        T24KitchExhHoodFlow_ (x.T24KitchExhHoodFlow_, f, this),
        T24KitchExhHoodLength_ (x.T24KitchExhHoodLength_, f, this),
        T24KitchExhHoodStyleList_ (x.T24KitchExhHoodStyleList_, f, this),
        T24LabExhRateType_ (x.T24LabExhRateType_, f, this),
        T24LightingStatus_ (x.T24LightingStatus_, f, this),
        T24MandLightCntrlCntRpt_ (x.T24MandLightCntrlCntRpt_, f, this),
        T24MandLightCntrlDescRpt_ (x.T24MandLightCntrlDescRpt_, f, this),
        T24MandLightCntrlRpt_ (x.T24MandLightCntrlRpt_, f, this),
        T24MandLightCntrlAccepReqRpt_ (x.T24MandLightCntrlAccepReqRpt_, f, this),
        T24MandLightCntrlIsAutoShOffCntrlRpt_ (x.T24MandLightCntrlIsAutoShOffCntrlRpt_, f, this),
        T24MandLightCntrlIsDayltngCntrlRpt_ (x.T24MandLightCntrlIsDayltngCntrlRpt_, f, this),
        T24MandLightCntrlIsDmndRespCntrlRpt_ (x.T24MandLightCntrlIsDmndRespCntrlRpt_, f, this),
        T24MandLightCntrlIsManAreaCntrlRpt_ (x.T24MandLightCntrlIsManAreaCntrlRpt_, f, this),
        T24MandLightCntrlIsMultLvlCntrlRpt_ (x.T24MandLightCntrlIsMultLvlCntrlRpt_, f, this),
        T24SkylightRqmtExcep_ (x.T24SkylightRqmtExcep_, f, this),
        T24SpaceFunction_ (x.T24SpaceFunction_, f, this),
        T24ConstructStatus3_ (x.T24ConstructStatus3_, f, this)
      {
      }

      SimSpace_Occupied::
      SimSpace_Occupied (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSpace (e, f | ::xml_schema::flags::base, c),
        T24BaselineCommercialRefrigerationEPD_ (this),
        T24BaselineCommercialRefrigerationEquipmentScheduleReference_ (this),
        T24BaselineGasEquipmentPowerDensity_ (this),
        T24BaselineGasEquipmentScheduleReference_ (this),
        T24BaselineReceptaclePowerDensity_ (this),
        T24BaselineReceptacleScheduleReference_ (this),
        T24CommRefrigEPD_ (this),
        T24CommercialRefrigerationEPDExceptionalCondition_ (this),
        T24CommRefrigEqmtSchedRef_ (this),
        T24CommRefrigLatentFraction_ (this),
        T24CommRefrigLostFraction_ (this),
        T24CommRefrigRadFraction_ (this),
        T24EnvelopeStatus_ (this),
        T24ExhaustAirChangesPerHour_ (this),
        T24ExhaustPerArea_ (this),
        T24ExhaustPerSpace_ (this),
        T24IntLightingSpecMethod_ (this),
        T24KitchExhHoodDutyList_ (this),
        T24KitchExhHoodFlow_ (this),
        T24KitchExhHoodLength_ (this),
        T24KitchExhHoodStyleList_ (this),
        T24LabExhRateType_ (this),
        T24LightingStatus_ (this),
        T24MandLightCntrlCntRpt_ (this),
        T24MandLightCntrlDescRpt_ (this),
        T24MandLightCntrlRpt_ (this),
        T24MandLightCntrlAccepReqRpt_ (this),
        T24MandLightCntrlIsAutoShOffCntrlRpt_ (this),
        T24MandLightCntrlIsDayltngCntrlRpt_ (this),
        T24MandLightCntrlIsDmndRespCntrlRpt_ (this),
        T24MandLightCntrlIsManAreaCntrlRpt_ (this),
        T24MandLightCntrlIsMultLvlCntrlRpt_ (this),
        T24SkylightRqmtExcep_ (this),
        T24SpaceFunction_ (this),
        T24ConstructStatus3_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSpace_Occupied::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSpace::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // T24BaselineCommercialRefrigerationEPD
          //
          if (n.name () == "T24BaselineCommercialRefrigerationEPD" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24BaselineCommercialRefrigerationEPD_)
            {
              this->T24BaselineCommercialRefrigerationEPD_.set (T24BaselineCommercialRefrigerationEPD_traits::create (i, f, this));
              continue;
            }
          }

          // T24BaselineCommercialRefrigerationEquipmentScheduleReference
          //
          if (n.name () == "T24BaselineCommercialRefrigerationEquipmentScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24BaselineCommercialRefrigerationEquipmentScheduleReference_type > r (
              T24BaselineCommercialRefrigerationEquipmentScheduleReference_traits::create (i, f, this));

            if (!this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_)
            {
              this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_.set (r);
              continue;
            }
          }

          // T24BaselineGasEquipmentPowerDensity
          //
          if (n.name () == "T24BaselineGasEquipmentPowerDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24BaselineGasEquipmentPowerDensity_)
            {
              this->T24BaselineGasEquipmentPowerDensity_.set (T24BaselineGasEquipmentPowerDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24BaselineGasEquipmentScheduleReference
          //
          if (n.name () == "T24BaselineGasEquipmentScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24BaselineGasEquipmentScheduleReference_type > r (
              T24BaselineGasEquipmentScheduleReference_traits::create (i, f, this));

            if (!this->T24BaselineGasEquipmentScheduleReference_)
            {
              this->T24BaselineGasEquipmentScheduleReference_.set (r);
              continue;
            }
          }

          // T24BaselineReceptaclePowerDensity
          //
          if (n.name () == "T24BaselineReceptaclePowerDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24BaselineReceptaclePowerDensity_)
            {
              this->T24BaselineReceptaclePowerDensity_.set (T24BaselineReceptaclePowerDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24BaselineReceptacleScheduleReference
          //
          if (n.name () == "T24BaselineReceptacleScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24BaselineReceptacleScheduleReference_type > r (
              T24BaselineReceptacleScheduleReference_traits::create (i, f, this));

            if (!this->T24BaselineReceptacleScheduleReference_)
            {
              this->T24BaselineReceptacleScheduleReference_.set (r);
              continue;
            }
          }

          // T24CommRefrigEPD
          //
          if (n.name () == "T24CommRefrigEPD" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigEPD_)
            {
              this->T24CommRefrigEPD_.set (T24CommRefrigEPD_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommercialRefrigerationEPDExceptionalCondition
          //
          if (n.name () == "T24CommercialRefrigerationEPDExceptionalCondition" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommercialRefrigerationEPDExceptionalCondition_)
            {
              this->T24CommercialRefrigerationEPDExceptionalCondition_.set (T24CommercialRefrigerationEPDExceptionalCondition_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommRefrigEqmtSchedRef
          //
          if (n.name () == "T24CommRefrigEqmtSchedRef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CommRefrigEqmtSchedRef_type > r (
              T24CommRefrigEqmtSchedRef_traits::create (i, f, this));

            if (!this->T24CommRefrigEqmtSchedRef_)
            {
              this->T24CommRefrigEqmtSchedRef_.set (r);
              continue;
            }
          }

          // T24CommRefrigLatentFraction
          //
          if (n.name () == "T24CommRefrigLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigLatentFraction_)
            {
              this->T24CommRefrigLatentFraction_.set (T24CommRefrigLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommRefrigLostFraction
          //
          if (n.name () == "T24CommRefrigLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigLostFraction_)
            {
              this->T24CommRefrigLostFraction_.set (T24CommRefrigLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommRefrigRadFraction
          //
          if (n.name () == "T24CommRefrigRadFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigRadFraction_)
            {
              this->T24CommRefrigRadFraction_.set (T24CommRefrigRadFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24EnvelopeStatus
          //
          if (n.name () == "T24EnvelopeStatus" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24EnvelopeStatus_type > r (
              T24EnvelopeStatus_traits::create (i, f, this));

            if (!this->T24EnvelopeStatus_)
            {
              this->T24EnvelopeStatus_.set (r);
              continue;
            }
          }

          // T24ExhaustAirChangesPerHour
          //
          if (n.name () == "T24ExhaustAirChangesPerHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ExhaustAirChangesPerHour_)
            {
              this->T24ExhaustAirChangesPerHour_.set (T24ExhaustAirChangesPerHour_traits::create (i, f, this));
              continue;
            }
          }

          // T24ExhaustPerArea
          //
          if (n.name () == "T24ExhaustPerArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ExhaustPerArea_)
            {
              this->T24ExhaustPerArea_.set (T24ExhaustPerArea_traits::create (i, f, this));
              continue;
            }
          }

          // T24ExhaustPerSpace
          //
          if (n.name () == "T24ExhaustPerSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ExhaustPerSpace_)
            {
              this->T24ExhaustPerSpace_.set (T24ExhaustPerSpace_traits::create (i, f, this));
              continue;
            }
          }

          // T24IntLightingSpecMethod
          //
          if (n.name () == "T24IntLightingSpecMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24IntLightingSpecMethod_type > r (
              T24IntLightingSpecMethod_traits::create (i, f, this));

            if (!this->T24IntLightingSpecMethod_)
            {
              this->T24IntLightingSpecMethod_.set (r);
              continue;
            }
          }

          // T24KitchExhHoodDutyList
          //
          if (n.name () == "T24KitchExhHoodDutyList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24KitchExhHoodDutyList_type > r (
              T24KitchExhHoodDutyList_traits::create (i, f, this));

            if (!this->T24KitchExhHoodDutyList_)
            {
              this->T24KitchExhHoodDutyList_.set (r);
              continue;
            }
          }

          // T24KitchExhHoodFlow
          //
          if (n.name () == "T24KitchExhHoodFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24KitchExhHoodFlow_type > r (
              T24KitchExhHoodFlow_traits::create (i, f, this));

            if (!this->T24KitchExhHoodFlow_)
            {
              this->T24KitchExhHoodFlow_.set (r);
              continue;
            }
          }

          // T24KitchExhHoodLength
          //
          if (n.name () == "T24KitchExhHoodLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24KitchExhHoodLength_type > r (
              T24KitchExhHoodLength_traits::create (i, f, this));

            if (!this->T24KitchExhHoodLength_)
            {
              this->T24KitchExhHoodLength_.set (r);
              continue;
            }
          }

          // T24KitchExhHoodStyleList
          //
          if (n.name () == "T24KitchExhHoodStyleList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24KitchExhHoodStyleList_type > r (
              T24KitchExhHoodStyleList_traits::create (i, f, this));

            if (!this->T24KitchExhHoodStyleList_)
            {
              this->T24KitchExhHoodStyleList_.set (r);
              continue;
            }
          }

          // T24LabExhRateType
          //
          if (n.name () == "T24LabExhRateType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24LabExhRateType_type > r (
              T24LabExhRateType_traits::create (i, f, this));

            if (!this->T24LabExhRateType_)
            {
              this->T24LabExhRateType_.set (r);
              continue;
            }
          }

          // T24LightingStatus
          //
          if (n.name () == "T24LightingStatus" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24LightingStatus_type > r (
              T24LightingStatus_traits::create (i, f, this));

            if (!this->T24LightingStatus_)
            {
              this->T24LightingStatus_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlCntRpt
          //
          if (n.name () == "T24MandLightCntrlCntRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlCntRpt_type > r (
              T24MandLightCntrlCntRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlCntRpt_)
            {
              this->T24MandLightCntrlCntRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlDescRpt
          //
          if (n.name () == "T24MandLightCntrlDescRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlDescRpt_type > r (
              T24MandLightCntrlDescRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlDescRpt_)
            {
              this->T24MandLightCntrlDescRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlRpt
          //
          if (n.name () == "T24MandLightCntrlRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlRpt_type > r (
              T24MandLightCntrlRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlRpt_)
            {
              this->T24MandLightCntrlRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlAccepReqRpt
          //
          if (n.name () == "T24MandLightCntrlAccepReqRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlAccepReqRpt_type > r (
              T24MandLightCntrlAccepReqRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlAccepReqRpt_)
            {
              this->T24MandLightCntrlAccepReqRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlIsAutoShOffCntrlRpt
          //
          if (n.name () == "T24MandLightCntrlIsAutoShOffCntrlRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlIsAutoShOffCntrlRpt_type > r (
              T24MandLightCntrlIsAutoShOffCntrlRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlIsAutoShOffCntrlRpt_)
            {
              this->T24MandLightCntrlIsAutoShOffCntrlRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlIsDayltngCntrlRpt
          //
          if (n.name () == "T24MandLightCntrlIsDayltngCntrlRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlIsDayltngCntrlRpt_type > r (
              T24MandLightCntrlIsDayltngCntrlRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlIsDayltngCntrlRpt_)
            {
              this->T24MandLightCntrlIsDayltngCntrlRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlIsDmndRespCntrlRpt
          //
          if (n.name () == "T24MandLightCntrlIsDmndRespCntrlRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlIsDmndRespCntrlRpt_type > r (
              T24MandLightCntrlIsDmndRespCntrlRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlIsDmndRespCntrlRpt_)
            {
              this->T24MandLightCntrlIsDmndRespCntrlRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlIsManAreaCntrlRpt
          //
          if (n.name () == "T24MandLightCntrlIsManAreaCntrlRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlIsManAreaCntrlRpt_type > r (
              T24MandLightCntrlIsManAreaCntrlRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlIsManAreaCntrlRpt_)
            {
              this->T24MandLightCntrlIsManAreaCntrlRpt_.set (r);
              continue;
            }
          }

          // T24MandLightCntrlIsMultLvlCntrlRpt
          //
          if (n.name () == "T24MandLightCntrlIsMultLvlCntrlRpt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MandLightCntrlIsMultLvlCntrlRpt_type > r (
              T24MandLightCntrlIsMultLvlCntrlRpt_traits::create (i, f, this));

            if (!this->T24MandLightCntrlIsMultLvlCntrlRpt_)
            {
              this->T24MandLightCntrlIsMultLvlCntrlRpt_.set (r);
              continue;
            }
          }

          // T24SkylightRqmtExcep
          //
          if (n.name () == "T24SkylightRqmtExcep" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SkylightRqmtExcep_type > r (
              T24SkylightRqmtExcep_traits::create (i, f, this));

            if (!this->T24SkylightRqmtExcep_)
            {
              this->T24SkylightRqmtExcep_.set (r);
              continue;
            }
          }

          // T24SpaceFunction
          //
          if (n.name () == "T24SpaceFunction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SpaceFunction_type > r (
              T24SpaceFunction_traits::create (i, f, this));

            if (!this->T24SpaceFunction_)
            {
              this->T24SpaceFunction_.set (r);
              continue;
            }
          }

          // T24ConstructStatus3
          //
          if (n.name () == "T24ConstructStatus3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ConstructStatus3_type > r (
              T24ConstructStatus3_traits::create (i, f, this));

            if (!this->T24ConstructStatus3_)
            {
              this->T24ConstructStatus3_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSpace_Occupied* SimSpace_Occupied::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSpace_Occupied (*this, f, c);
      }

      SimSpace_Occupied& SimSpace_Occupied::
      operator= (const SimSpace_Occupied& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSpace& > (*this) = x;
          this->T24BaselineCommercialRefrigerationEPD_ = x.T24BaselineCommercialRefrigerationEPD_;
          this->T24BaselineCommercialRefrigerationEquipmentScheduleReference_ = x.T24BaselineCommercialRefrigerationEquipmentScheduleReference_;
          this->T24BaselineGasEquipmentPowerDensity_ = x.T24BaselineGasEquipmentPowerDensity_;
          this->T24BaselineGasEquipmentScheduleReference_ = x.T24BaselineGasEquipmentScheduleReference_;
          this->T24BaselineReceptaclePowerDensity_ = x.T24BaselineReceptaclePowerDensity_;
          this->T24BaselineReceptacleScheduleReference_ = x.T24BaselineReceptacleScheduleReference_;
          this->T24CommRefrigEPD_ = x.T24CommRefrigEPD_;
          this->T24CommercialRefrigerationEPDExceptionalCondition_ = x.T24CommercialRefrigerationEPDExceptionalCondition_;
          this->T24CommRefrigEqmtSchedRef_ = x.T24CommRefrigEqmtSchedRef_;
          this->T24CommRefrigLatentFraction_ = x.T24CommRefrigLatentFraction_;
          this->T24CommRefrigLostFraction_ = x.T24CommRefrigLostFraction_;
          this->T24CommRefrigRadFraction_ = x.T24CommRefrigRadFraction_;
          this->T24EnvelopeStatus_ = x.T24EnvelopeStatus_;
          this->T24ExhaustAirChangesPerHour_ = x.T24ExhaustAirChangesPerHour_;
          this->T24ExhaustPerArea_ = x.T24ExhaustPerArea_;
          this->T24ExhaustPerSpace_ = x.T24ExhaustPerSpace_;
          this->T24IntLightingSpecMethod_ = x.T24IntLightingSpecMethod_;
          this->T24KitchExhHoodDutyList_ = x.T24KitchExhHoodDutyList_;
          this->T24KitchExhHoodFlow_ = x.T24KitchExhHoodFlow_;
          this->T24KitchExhHoodLength_ = x.T24KitchExhHoodLength_;
          this->T24KitchExhHoodStyleList_ = x.T24KitchExhHoodStyleList_;
          this->T24LabExhRateType_ = x.T24LabExhRateType_;
          this->T24LightingStatus_ = x.T24LightingStatus_;
          this->T24MandLightCntrlCntRpt_ = x.T24MandLightCntrlCntRpt_;
          this->T24MandLightCntrlDescRpt_ = x.T24MandLightCntrlDescRpt_;
          this->T24MandLightCntrlRpt_ = x.T24MandLightCntrlRpt_;
          this->T24MandLightCntrlAccepReqRpt_ = x.T24MandLightCntrlAccepReqRpt_;
          this->T24MandLightCntrlIsAutoShOffCntrlRpt_ = x.T24MandLightCntrlIsAutoShOffCntrlRpt_;
          this->T24MandLightCntrlIsDayltngCntrlRpt_ = x.T24MandLightCntrlIsDayltngCntrlRpt_;
          this->T24MandLightCntrlIsDmndRespCntrlRpt_ = x.T24MandLightCntrlIsDmndRespCntrlRpt_;
          this->T24MandLightCntrlIsManAreaCntrlRpt_ = x.T24MandLightCntrlIsManAreaCntrlRpt_;
          this->T24MandLightCntrlIsMultLvlCntrlRpt_ = x.T24MandLightCntrlIsMultLvlCntrlRpt_;
          this->T24SkylightRqmtExcep_ = x.T24SkylightRqmtExcep_;
          this->T24SpaceFunction_ = x.T24SpaceFunction_;
          this->T24ConstructStatus3_ = x.T24ConstructStatus3_;
        }

        return *this;
      }

      SimSpace_Occupied::
      ~SimSpace_Occupied ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

