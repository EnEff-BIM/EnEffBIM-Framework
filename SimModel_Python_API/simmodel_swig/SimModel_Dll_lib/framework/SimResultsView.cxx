// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimResultsView.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimResultsView
      // 

      const SimResultsView::VariablesInView_optional& SimResultsView::
      VariablesInView () const
      {
        return this->VariablesInView_;
      }

      SimResultsView::VariablesInView_optional& SimResultsView::
      VariablesInView ()
      {
        return this->VariablesInView_;
      }

      void SimResultsView::
      VariablesInView (const VariablesInView_type& x)
      {
        this->VariablesInView_.set (x);
      }

      void SimResultsView::
      VariablesInView (const VariablesInView_optional& x)
      {
        this->VariablesInView_ = x;
      }

      void SimResultsView::
      VariablesInView (::std::auto_ptr< VariablesInView_type > x)
      {
        this->VariablesInView_.set (x);
      }

      const SimResultsView::ViewType_optional& SimResultsView::
      ViewType () const
      {
        return this->ViewType_;
      }

      SimResultsView::ViewType_optional& SimResultsView::
      ViewType ()
      {
        return this->ViewType_;
      }

      void SimResultsView::
      ViewType (const ViewType_type& x)
      {
        this->ViewType_.set (x);
      }

      void SimResultsView::
      ViewType (const ViewType_optional& x)
      {
        this->ViewType_ = x;
      }

      void SimResultsView::
      ViewType (::std::auto_ptr< ViewType_type > x)
      {
        this->ViewType_.set (x);
      }

      const SimResultsView::ChartOrTableType_optional& SimResultsView::
      ChartOrTableType () const
      {
        return this->ChartOrTableType_;
      }

      SimResultsView::ChartOrTableType_optional& SimResultsView::
      ChartOrTableType ()
      {
        return this->ChartOrTableType_;
      }

      void SimResultsView::
      ChartOrTableType (const ChartOrTableType_type& x)
      {
        this->ChartOrTableType_.set (x);
      }

      void SimResultsView::
      ChartOrTableType (const ChartOrTableType_optional& x)
      {
        this->ChartOrTableType_ = x;
      }

      void SimResultsView::
      ChartOrTableType (::std::auto_ptr< ChartOrTableType_type > x)
      {
        this->ChartOrTableType_.set (x);
      }

      const SimResultsView::TimeStep_String_optional& SimResultsView::
      TimeStep_String () const
      {
        return this->TimeStep_String_;
      }

      SimResultsView::TimeStep_String_optional& SimResultsView::
      TimeStep_String ()
      {
        return this->TimeStep_String_;
      }

      void SimResultsView::
      TimeStep_String (const TimeStep_String_type& x)
      {
        this->TimeStep_String_.set (x);
      }

      void SimResultsView::
      TimeStep_String (const TimeStep_String_optional& x)
      {
        this->TimeStep_String_ = x;
      }

      void SimResultsView::
      TimeStep_String (::std::auto_ptr< TimeStep_String_type > x)
      {
        this->TimeStep_String_.set (x);
      }

      const SimResultsView::Font_optional& SimResultsView::
      Font () const
      {
        return this->Font_;
      }

      SimResultsView::Font_optional& SimResultsView::
      Font ()
      {
        return this->Font_;
      }

      void SimResultsView::
      Font (const Font_type& x)
      {
        this->Font_.set (x);
      }

      void SimResultsView::
      Font (const Font_optional& x)
      {
        this->Font_ = x;
      }

      void SimResultsView::
      Font (::std::auto_ptr< Font_type > x)
      {
        this->Font_.set (x);
      }

      const SimResultsView::FontSize_optional& SimResultsView::
      FontSize () const
      {
        return this->FontSize_;
      }

      SimResultsView::FontSize_optional& SimResultsView::
      FontSize ()
      {
        return this->FontSize_;
      }

      void SimResultsView::
      FontSize (const FontSize_type& x)
      {
        this->FontSize_.set (x);
      }

      void SimResultsView::
      FontSize (const FontSize_optional& x)
      {
        this->FontSize_ = x;
      }

      const SimResultsView::X_AxisMeasure_optional& SimResultsView::
      X_AxisMeasure () const
      {
        return this->X_AxisMeasure_;
      }

      SimResultsView::X_AxisMeasure_optional& SimResultsView::
      X_AxisMeasure ()
      {
        return this->X_AxisMeasure_;
      }

      void SimResultsView::
      X_AxisMeasure (const X_AxisMeasure_type& x)
      {
        this->X_AxisMeasure_.set (x);
      }

      void SimResultsView::
      X_AxisMeasure (const X_AxisMeasure_optional& x)
      {
        this->X_AxisMeasure_ = x;
      }

      void SimResultsView::
      X_AxisMeasure (::std::auto_ptr< X_AxisMeasure_type > x)
      {
        this->X_AxisMeasure_.set (x);
      }

      const SimResultsView::X_AxisUnits_optional& SimResultsView::
      X_AxisUnits () const
      {
        return this->X_AxisUnits_;
      }

      SimResultsView::X_AxisUnits_optional& SimResultsView::
      X_AxisUnits ()
      {
        return this->X_AxisUnits_;
      }

      void SimResultsView::
      X_AxisUnits (const X_AxisUnits_type& x)
      {
        this->X_AxisUnits_.set (x);
      }

      void SimResultsView::
      X_AxisUnits (const X_AxisUnits_optional& x)
      {
        this->X_AxisUnits_ = x;
      }

      void SimResultsView::
      X_AxisUnits (::std::auto_ptr< X_AxisUnits_type > x)
      {
        this->X_AxisUnits_.set (x);
      }

      const SimResultsView::Y_AxisMeasure_optional& SimResultsView::
      Y_AxisMeasure () const
      {
        return this->Y_AxisMeasure_;
      }

      SimResultsView::Y_AxisMeasure_optional& SimResultsView::
      Y_AxisMeasure ()
      {
        return this->Y_AxisMeasure_;
      }

      void SimResultsView::
      Y_AxisMeasure (const Y_AxisMeasure_type& x)
      {
        this->Y_AxisMeasure_.set (x);
      }

      void SimResultsView::
      Y_AxisMeasure (const Y_AxisMeasure_optional& x)
      {
        this->Y_AxisMeasure_ = x;
      }

      void SimResultsView::
      Y_AxisMeasure (::std::auto_ptr< Y_AxisMeasure_type > x)
      {
        this->Y_AxisMeasure_.set (x);
      }

      const SimResultsView::Y_AxisUnits_optional& SimResultsView::
      Y_AxisUnits () const
      {
        return this->Y_AxisUnits_;
      }

      SimResultsView::Y_AxisUnits_optional& SimResultsView::
      Y_AxisUnits ()
      {
        return this->Y_AxisUnits_;
      }

      void SimResultsView::
      Y_AxisUnits (const Y_AxisUnits_type& x)
      {
        this->Y_AxisUnits_.set (x);
      }

      void SimResultsView::
      Y_AxisUnits (const Y_AxisUnits_optional& x)
      {
        this->Y_AxisUnits_ = x;
      }

      void SimResultsView::
      Y_AxisUnits (::std::auto_ptr< Y_AxisUnits_type > x)
      {
        this->Y_AxisUnits_.set (x);
      }

      const SimResultsView::Y2_AxisMeasure_optional& SimResultsView::
      Y2_AxisMeasure () const
      {
        return this->Y2_AxisMeasure_;
      }

      SimResultsView::Y2_AxisMeasure_optional& SimResultsView::
      Y2_AxisMeasure ()
      {
        return this->Y2_AxisMeasure_;
      }

      void SimResultsView::
      Y2_AxisMeasure (const Y2_AxisMeasure_type& x)
      {
        this->Y2_AxisMeasure_.set (x);
      }

      void SimResultsView::
      Y2_AxisMeasure (const Y2_AxisMeasure_optional& x)
      {
        this->Y2_AxisMeasure_ = x;
      }

      void SimResultsView::
      Y2_AxisMeasure (::std::auto_ptr< Y2_AxisMeasure_type > x)
      {
        this->Y2_AxisMeasure_.set (x);
      }

      const SimResultsView::Y2_AxisUnits_optional& SimResultsView::
      Y2_AxisUnits () const
      {
        return this->Y2_AxisUnits_;
      }

      SimResultsView::Y2_AxisUnits_optional& SimResultsView::
      Y2_AxisUnits ()
      {
        return this->Y2_AxisUnits_;
      }

      void SimResultsView::
      Y2_AxisUnits (const Y2_AxisUnits_type& x)
      {
        this->Y2_AxisUnits_.set (x);
      }

      void SimResultsView::
      Y2_AxisUnits (const Y2_AxisUnits_optional& x)
      {
        this->Y2_AxisUnits_ = x;
      }

      void SimResultsView::
      Y2_AxisUnits (::std::auto_ptr< Y2_AxisUnits_type > x)
      {
        this->Y2_AxisUnits_.set (x);
      }

      const SimResultsView::StartDate_optional& SimResultsView::
      StartDate () const
      {
        return this->StartDate_;
      }

      SimResultsView::StartDate_optional& SimResultsView::
      StartDate ()
      {
        return this->StartDate_;
      }

      void SimResultsView::
      StartDate (const StartDate_type& x)
      {
        this->StartDate_.set (x);
      }

      void SimResultsView::
      StartDate (const StartDate_optional& x)
      {
        this->StartDate_ = x;
      }

      const SimResultsView::EndDate_optional& SimResultsView::
      EndDate () const
      {
        return this->EndDate_;
      }

      SimResultsView::EndDate_optional& SimResultsView::
      EndDate ()
      {
        return this->EndDate_;
      }

      void SimResultsView::
      EndDate (const EndDate_type& x)
      {
        this->EndDate_.set (x);
      }

      void SimResultsView::
      EndDate (const EndDate_optional& x)
      {
        this->EndDate_ = x;
      }

      const SimResultsView::LegendInclDesignAlt_optional& SimResultsView::
      LegendInclDesignAlt () const
      {
        return this->LegendInclDesignAlt_;
      }

      SimResultsView::LegendInclDesignAlt_optional& SimResultsView::
      LegendInclDesignAlt ()
      {
        return this->LegendInclDesignAlt_;
      }

      void SimResultsView::
      LegendInclDesignAlt (const LegendInclDesignAlt_type& x)
      {
        this->LegendInclDesignAlt_.set (x);
      }

      void SimResultsView::
      LegendInclDesignAlt (const LegendInclDesignAlt_optional& x)
      {
        this->LegendInclDesignAlt_ = x;
      }

      const SimResultsView::LegendInclConfig_optional& SimResultsView::
      LegendInclConfig () const
      {
        return this->LegendInclConfig_;
      }

      SimResultsView::LegendInclConfig_optional& SimResultsView::
      LegendInclConfig ()
      {
        return this->LegendInclConfig_;
      }

      void SimResultsView::
      LegendInclConfig (const LegendInclConfig_type& x)
      {
        this->LegendInclConfig_.set (x);
      }

      void SimResultsView::
      LegendInclConfig (const LegendInclConfig_optional& x)
      {
        this->LegendInclConfig_ = x;
      }

      const SimResultsView::LegendInclRun_optional& SimResultsView::
      LegendInclRun () const
      {
        return this->LegendInclRun_;
      }

      SimResultsView::LegendInclRun_optional& SimResultsView::
      LegendInclRun ()
      {
        return this->LegendInclRun_;
      }

      void SimResultsView::
      LegendInclRun (const LegendInclRun_type& x)
      {
        this->LegendInclRun_.set (x);
      }

      void SimResultsView::
      LegendInclRun (const LegendInclRun_optional& x)
      {
        this->LegendInclRun_ = x;
      }

      const SimResultsView::LegendInclArea_optional& SimResultsView::
      LegendInclArea () const
      {
        return this->LegendInclArea_;
      }

      SimResultsView::LegendInclArea_optional& SimResultsView::
      LegendInclArea ()
      {
        return this->LegendInclArea_;
      }

      void SimResultsView::
      LegendInclArea (const LegendInclArea_type& x)
      {
        this->LegendInclArea_.set (x);
      }

      void SimResultsView::
      LegendInclArea (const LegendInclArea_optional& x)
      {
        this->LegendInclArea_ = x;
      }

      const SimResultsView::ChartTitle_optional& SimResultsView::
      ChartTitle () const
      {
        return this->ChartTitle_;
      }

      SimResultsView::ChartTitle_optional& SimResultsView::
      ChartTitle ()
      {
        return this->ChartTitle_;
      }

      void SimResultsView::
      ChartTitle (const ChartTitle_type& x)
      {
        this->ChartTitle_.set (x);
      }

      void SimResultsView::
      ChartTitle (const ChartTitle_optional& x)
      {
        this->ChartTitle_ = x;
      }

      void SimResultsView::
      ChartTitle (::std::auto_ptr< ChartTitle_type > x)
      {
        this->ChartTitle_.set (x);
      }

      const SimResultsView::LeftAxisLabel_optional& SimResultsView::
      LeftAxisLabel () const
      {
        return this->LeftAxisLabel_;
      }

      SimResultsView::LeftAxisLabel_optional& SimResultsView::
      LeftAxisLabel ()
      {
        return this->LeftAxisLabel_;
      }

      void SimResultsView::
      LeftAxisLabel (const LeftAxisLabel_type& x)
      {
        this->LeftAxisLabel_.set (x);
      }

      void SimResultsView::
      LeftAxisLabel (const LeftAxisLabel_optional& x)
      {
        this->LeftAxisLabel_ = x;
      }

      void SimResultsView::
      LeftAxisLabel (::std::auto_ptr< LeftAxisLabel_type > x)
      {
        this->LeftAxisLabel_.set (x);
      }

      const SimResultsView::RightAxisLabel_optional& SimResultsView::
      RightAxisLabel () const
      {
        return this->RightAxisLabel_;
      }

      SimResultsView::RightAxisLabel_optional& SimResultsView::
      RightAxisLabel ()
      {
        return this->RightAxisLabel_;
      }

      void SimResultsView::
      RightAxisLabel (const RightAxisLabel_type& x)
      {
        this->RightAxisLabel_.set (x);
      }

      void SimResultsView::
      RightAxisLabel (const RightAxisLabel_optional& x)
      {
        this->RightAxisLabel_ = x;
      }

      void SimResultsView::
      RightAxisLabel (::std::auto_ptr< RightAxisLabel_type > x)
      {
        this->RightAxisLabel_.set (x);
      }

      const SimResultsView::BottomAxisLabel_optional& SimResultsView::
      BottomAxisLabel () const
      {
        return this->BottomAxisLabel_;
      }

      SimResultsView::BottomAxisLabel_optional& SimResultsView::
      BottomAxisLabel ()
      {
        return this->BottomAxisLabel_;
      }

      void SimResultsView::
      BottomAxisLabel (const BottomAxisLabel_type& x)
      {
        this->BottomAxisLabel_.set (x);
      }

      void SimResultsView::
      BottomAxisLabel (const BottomAxisLabel_optional& x)
      {
        this->BottomAxisLabel_ = x;
      }

      void SimResultsView::
      BottomAxisLabel (::std::auto_ptr< BottomAxisLabel_type > x)
      {
        this->BottomAxisLabel_.set (x);
      }

      const SimResultsView::Labels_optional& SimResultsView::
      Labels () const
      {
        return this->Labels_;
      }

      SimResultsView::Labels_optional& SimResultsView::
      Labels ()
      {
        return this->Labels_;
      }

      void SimResultsView::
      Labels (const Labels_type& x)
      {
        this->Labels_.set (x);
      }

      void SimResultsView::
      Labels (const Labels_optional& x)
      {
        this->Labels_ = x;
      }

      void SimResultsView::
      Labels (::std::auto_ptr< Labels_type > x)
      {
        this->Labels_.set (x);
      }

      const SimResultsView::LegendAppearence_optional& SimResultsView::
      LegendAppearence () const
      {
        return this->LegendAppearence_;
      }

      SimResultsView::LegendAppearence_optional& SimResultsView::
      LegendAppearence ()
      {
        return this->LegendAppearence_;
      }

      void SimResultsView::
      LegendAppearence (const LegendAppearence_type& x)
      {
        this->LegendAppearence_.set (x);
      }

      void SimResultsView::
      LegendAppearence (const LegendAppearence_optional& x)
      {
        this->LegendAppearence_ = x;
      }

      void SimResultsView::
      LegendAppearence (::std::auto_ptr< LegendAppearence_type > x)
      {
        this->LegendAppearence_.set (x);
      }

      const SimResultsView::ShowLegend_optional& SimResultsView::
      ShowLegend () const
      {
        return this->ShowLegend_;
      }

      SimResultsView::ShowLegend_optional& SimResultsView::
      ShowLegend ()
      {
        return this->ShowLegend_;
      }

      void SimResultsView::
      ShowLegend (const ShowLegend_type& x)
      {
        this->ShowLegend_.set (x);
      }

      void SimResultsView::
      ShowLegend (const ShowLegend_optional& x)
      {
        this->ShowLegend_ = x;
      }

      const SimResultsView::LegendDockStyle_optional& SimResultsView::
      LegendDockStyle () const
      {
        return this->LegendDockStyle_;
      }

      SimResultsView::LegendDockStyle_optional& SimResultsView::
      LegendDockStyle ()
      {
        return this->LegendDockStyle_;
      }

      void SimResultsView::
      LegendDockStyle (const LegendDockStyle_type& x)
      {
        this->LegendDockStyle_.set (x);
      }

      void SimResultsView::
      LegendDockStyle (const LegendDockStyle_optional& x)
      {
        this->LegendDockStyle_ = x;
      }

      void SimResultsView::
      LegendDockStyle (::std::auto_ptr< LegendDockStyle_type > x)
      {
        this->LegendDockStyle_.set (x);
      }

      const SimResultsView::LockAspectRatio_optional& SimResultsView::
      LockAspectRatio () const
      {
        return this->LockAspectRatio_;
      }

      SimResultsView::LockAspectRatio_optional& SimResultsView::
      LockAspectRatio ()
      {
        return this->LockAspectRatio_;
      }

      void SimResultsView::
      LockAspectRatio (const LockAspectRatio_type& x)
      {
        this->LockAspectRatio_.set (x);
      }

      void SimResultsView::
      LockAspectRatio (const LockAspectRatio_optional& x)
      {
        this->LockAspectRatio_ = x;
      }

      const SimResultsView::TableTextStyle_optional& SimResultsView::
      TableTextStyle () const
      {
        return this->TableTextStyle_;
      }

      SimResultsView::TableTextStyle_optional& SimResultsView::
      TableTextStyle ()
      {
        return this->TableTextStyle_;
      }

      void SimResultsView::
      TableTextStyle (const TableTextStyle_type& x)
      {
        this->TableTextStyle_.set (x);
      }

      void SimResultsView::
      TableTextStyle (const TableTextStyle_optional& x)
      {
        this->TableTextStyle_ = x;
      }

      void SimResultsView::
      TableTextStyle (::std::auto_ptr< TableTextStyle_type > x)
      {
        this->TableTextStyle_.set (x);
      }

      const SimResultsView::DecimalPlaces_optional& SimResultsView::
      DecimalPlaces () const
      {
        return this->DecimalPlaces_;
      }

      SimResultsView::DecimalPlaces_optional& SimResultsView::
      DecimalPlaces ()
      {
        return this->DecimalPlaces_;
      }

      void SimResultsView::
      DecimalPlaces (const DecimalPlaces_type& x)
      {
        this->DecimalPlaces_.set (x);
      }

      void SimResultsView::
      DecimalPlaces (const DecimalPlaces_optional& x)
      {
        this->DecimalPlaces_ = x;
      }

      const SimResultsView::LeftAxisTitle_optional& SimResultsView::
      LeftAxisTitle () const
      {
        return this->LeftAxisTitle_;
      }

      SimResultsView::LeftAxisTitle_optional& SimResultsView::
      LeftAxisTitle ()
      {
        return this->LeftAxisTitle_;
      }

      void SimResultsView::
      LeftAxisTitle (const LeftAxisTitle_type& x)
      {
        this->LeftAxisTitle_.set (x);
      }

      void SimResultsView::
      LeftAxisTitle (const LeftAxisTitle_optional& x)
      {
        this->LeftAxisTitle_ = x;
      }

      void SimResultsView::
      LeftAxisTitle (::std::auto_ptr< LeftAxisTitle_type > x)
      {
        this->LeftAxisTitle_.set (x);
      }

      const SimResultsView::RightAxisTitle_optional& SimResultsView::
      RightAxisTitle () const
      {
        return this->RightAxisTitle_;
      }

      SimResultsView::RightAxisTitle_optional& SimResultsView::
      RightAxisTitle ()
      {
        return this->RightAxisTitle_;
      }

      void SimResultsView::
      RightAxisTitle (const RightAxisTitle_type& x)
      {
        this->RightAxisTitle_.set (x);
      }

      void SimResultsView::
      RightAxisTitle (const RightAxisTitle_optional& x)
      {
        this->RightAxisTitle_ = x;
      }

      void SimResultsView::
      RightAxisTitle (::std::auto_ptr< RightAxisTitle_type > x)
      {
        this->RightAxisTitle_.set (x);
      }

      const SimResultsView::BottomAxisTitle_optional& SimResultsView::
      BottomAxisTitle () const
      {
        return this->BottomAxisTitle_;
      }

      SimResultsView::BottomAxisTitle_optional& SimResultsView::
      BottomAxisTitle ()
      {
        return this->BottomAxisTitle_;
      }

      void SimResultsView::
      BottomAxisTitle (const BottomAxisTitle_type& x)
      {
        this->BottomAxisTitle_.set (x);
      }

      void SimResultsView::
      BottomAxisTitle (const BottomAxisTitle_optional& x)
      {
        this->BottomAxisTitle_ = x;
      }

      void SimResultsView::
      BottomAxisTitle (::std::auto_ptr< BottomAxisTitle_type > x)
      {
        this->BottomAxisTitle_.set (x);
      }

      const SimResultsView::StartHour_optional& SimResultsView::
      StartHour () const
      {
        return this->StartHour_;
      }

      SimResultsView::StartHour_optional& SimResultsView::
      StartHour ()
      {
        return this->StartHour_;
      }

      void SimResultsView::
      StartHour (const StartHour_type& x)
      {
        this->StartHour_.set (x);
      }

      void SimResultsView::
      StartHour (const StartHour_optional& x)
      {
        this->StartHour_ = x;
      }

      const SimResultsView::StartDay_optional& SimResultsView::
      StartDay () const
      {
        return this->StartDay_;
      }

      SimResultsView::StartDay_optional& SimResultsView::
      StartDay ()
      {
        return this->StartDay_;
      }

      void SimResultsView::
      StartDay (const StartDay_type& x)
      {
        this->StartDay_.set (x);
      }

      void SimResultsView::
      StartDay (const StartDay_optional& x)
      {
        this->StartDay_ = x;
      }

      const SimResultsView::StartMonth_optional& SimResultsView::
      StartMonth () const
      {
        return this->StartMonth_;
      }

      SimResultsView::StartMonth_optional& SimResultsView::
      StartMonth ()
      {
        return this->StartMonth_;
      }

      void SimResultsView::
      StartMonth (const StartMonth_type& x)
      {
        this->StartMonth_.set (x);
      }

      void SimResultsView::
      StartMonth (const StartMonth_optional& x)
      {
        this->StartMonth_ = x;
      }

      const SimResultsView::EndHour_optional& SimResultsView::
      EndHour () const
      {
        return this->EndHour_;
      }

      SimResultsView::EndHour_optional& SimResultsView::
      EndHour ()
      {
        return this->EndHour_;
      }

      void SimResultsView::
      EndHour (const EndHour_type& x)
      {
        this->EndHour_.set (x);
      }

      void SimResultsView::
      EndHour (const EndHour_optional& x)
      {
        this->EndHour_ = x;
      }

      const SimResultsView::EndDay_optional& SimResultsView::
      EndDay () const
      {
        return this->EndDay_;
      }

      SimResultsView::EndDay_optional& SimResultsView::
      EndDay ()
      {
        return this->EndDay_;
      }

      void SimResultsView::
      EndDay (const EndDay_type& x)
      {
        this->EndDay_.set (x);
      }

      void SimResultsView::
      EndDay (const EndDay_optional& x)
      {
        this->EndDay_ = x;
      }

      const SimResultsView::EndMonth_optional& SimResultsView::
      EndMonth () const
      {
        return this->EndMonth_;
      }

      SimResultsView::EndMonth_optional& SimResultsView::
      EndMonth ()
      {
        return this->EndMonth_;
      }

      void SimResultsView::
      EndMonth (const EndMonth_type& x)
      {
        this->EndMonth_.set (x);
      }

      void SimResultsView::
      EndMonth (const EndMonth_optional& x)
      {
        this->EndMonth_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimResultsView
      //

      SimResultsView::
      SimResultsView ()
      : ::schema::simxml::ResourcesGeneral::SimResultsVisualization (),
        VariablesInView_ (this),
        ViewType_ (this),
        ChartOrTableType_ (this),
        TimeStep_String_ (this),
        Font_ (this),
        FontSize_ (this),
        X_AxisMeasure_ (this),
        X_AxisUnits_ (this),
        Y_AxisMeasure_ (this),
        Y_AxisUnits_ (this),
        Y2_AxisMeasure_ (this),
        Y2_AxisUnits_ (this),
        StartDate_ (this),
        EndDate_ (this),
        LegendInclDesignAlt_ (this),
        LegendInclConfig_ (this),
        LegendInclRun_ (this),
        LegendInclArea_ (this),
        ChartTitle_ (this),
        LeftAxisLabel_ (this),
        RightAxisLabel_ (this),
        BottomAxisLabel_ (this),
        Labels_ (this),
        LegendAppearence_ (this),
        ShowLegend_ (this),
        LegendDockStyle_ (this),
        LockAspectRatio_ (this),
        TableTextStyle_ (this),
        DecimalPlaces_ (this),
        LeftAxisTitle_ (this),
        RightAxisTitle_ (this),
        BottomAxisTitle_ (this),
        StartHour_ (this),
        StartDay_ (this),
        StartMonth_ (this),
        EndHour_ (this),
        EndDay_ (this),
        EndMonth_ (this)
      {
      }

      SimResultsView::
      SimResultsView (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimResultsVisualization (RefId),
        VariablesInView_ (this),
        ViewType_ (this),
        ChartOrTableType_ (this),
        TimeStep_String_ (this),
        Font_ (this),
        FontSize_ (this),
        X_AxisMeasure_ (this),
        X_AxisUnits_ (this),
        Y_AxisMeasure_ (this),
        Y_AxisUnits_ (this),
        Y2_AxisMeasure_ (this),
        Y2_AxisUnits_ (this),
        StartDate_ (this),
        EndDate_ (this),
        LegendInclDesignAlt_ (this),
        LegendInclConfig_ (this),
        LegendInclRun_ (this),
        LegendInclArea_ (this),
        ChartTitle_ (this),
        LeftAxisLabel_ (this),
        RightAxisLabel_ (this),
        BottomAxisLabel_ (this),
        Labels_ (this),
        LegendAppearence_ (this),
        ShowLegend_ (this),
        LegendDockStyle_ (this),
        LockAspectRatio_ (this),
        TableTextStyle_ (this),
        DecimalPlaces_ (this),
        LeftAxisTitle_ (this),
        RightAxisTitle_ (this),
        BottomAxisTitle_ (this),
        StartHour_ (this),
        StartDay_ (this),
        StartMonth_ (this),
        EndHour_ (this),
        EndDay_ (this),
        EndMonth_ (this)
      {
      }

      SimResultsView::
      SimResultsView (const SimResultsView& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimResultsVisualization (x, f, c),
        VariablesInView_ (x.VariablesInView_, f, this),
        ViewType_ (x.ViewType_, f, this),
        ChartOrTableType_ (x.ChartOrTableType_, f, this),
        TimeStep_String_ (x.TimeStep_String_, f, this),
        Font_ (x.Font_, f, this),
        FontSize_ (x.FontSize_, f, this),
        X_AxisMeasure_ (x.X_AxisMeasure_, f, this),
        X_AxisUnits_ (x.X_AxisUnits_, f, this),
        Y_AxisMeasure_ (x.Y_AxisMeasure_, f, this),
        Y_AxisUnits_ (x.Y_AxisUnits_, f, this),
        Y2_AxisMeasure_ (x.Y2_AxisMeasure_, f, this),
        Y2_AxisUnits_ (x.Y2_AxisUnits_, f, this),
        StartDate_ (x.StartDate_, f, this),
        EndDate_ (x.EndDate_, f, this),
        LegendInclDesignAlt_ (x.LegendInclDesignAlt_, f, this),
        LegendInclConfig_ (x.LegendInclConfig_, f, this),
        LegendInclRun_ (x.LegendInclRun_, f, this),
        LegendInclArea_ (x.LegendInclArea_, f, this),
        ChartTitle_ (x.ChartTitle_, f, this),
        LeftAxisLabel_ (x.LeftAxisLabel_, f, this),
        RightAxisLabel_ (x.RightAxisLabel_, f, this),
        BottomAxisLabel_ (x.BottomAxisLabel_, f, this),
        Labels_ (x.Labels_, f, this),
        LegendAppearence_ (x.LegendAppearence_, f, this),
        ShowLegend_ (x.ShowLegend_, f, this),
        LegendDockStyle_ (x.LegendDockStyle_, f, this),
        LockAspectRatio_ (x.LockAspectRatio_, f, this),
        TableTextStyle_ (x.TableTextStyle_, f, this),
        DecimalPlaces_ (x.DecimalPlaces_, f, this),
        LeftAxisTitle_ (x.LeftAxisTitle_, f, this),
        RightAxisTitle_ (x.RightAxisTitle_, f, this),
        BottomAxisTitle_ (x.BottomAxisTitle_, f, this),
        StartHour_ (x.StartHour_, f, this),
        StartDay_ (x.StartDay_, f, this),
        StartMonth_ (x.StartMonth_, f, this),
        EndHour_ (x.EndHour_, f, this),
        EndDay_ (x.EndDay_, f, this),
        EndMonth_ (x.EndMonth_, f, this)
      {
      }

      SimResultsView::
      SimResultsView (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimResultsVisualization (e, f | ::xml_schema::flags::base, c),
        VariablesInView_ (this),
        ViewType_ (this),
        ChartOrTableType_ (this),
        TimeStep_String_ (this),
        Font_ (this),
        FontSize_ (this),
        X_AxisMeasure_ (this),
        X_AxisUnits_ (this),
        Y_AxisMeasure_ (this),
        Y_AxisUnits_ (this),
        Y2_AxisMeasure_ (this),
        Y2_AxisUnits_ (this),
        StartDate_ (this),
        EndDate_ (this),
        LegendInclDesignAlt_ (this),
        LegendInclConfig_ (this),
        LegendInclRun_ (this),
        LegendInclArea_ (this),
        ChartTitle_ (this),
        LeftAxisLabel_ (this),
        RightAxisLabel_ (this),
        BottomAxisLabel_ (this),
        Labels_ (this),
        LegendAppearence_ (this),
        ShowLegend_ (this),
        LegendDockStyle_ (this),
        LockAspectRatio_ (this),
        TableTextStyle_ (this),
        DecimalPlaces_ (this),
        LeftAxisTitle_ (this),
        RightAxisTitle_ (this),
        BottomAxisTitle_ (this),
        StartHour_ (this),
        StartDay_ (this),
        StartMonth_ (this),
        EndHour_ (this),
        EndDay_ (this),
        EndMonth_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimResultsView::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimResultsVisualization::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VariablesInView
          //
          if (n.name () == "VariablesInView" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< VariablesInView_type > r (
              VariablesInView_traits::create (i, f, this));

            if (!this->VariablesInView_)
            {
              this->VariablesInView_.set (r);
              continue;
            }
          }

          // ViewType
          //
          if (n.name () == "ViewType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ViewType_type > r (
              ViewType_traits::create (i, f, this));

            if (!this->ViewType_)
            {
              this->ViewType_.set (r);
              continue;
            }
          }

          // ChartOrTableType
          //
          if (n.name () == "ChartOrTableType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ChartOrTableType_type > r (
              ChartOrTableType_traits::create (i, f, this));

            if (!this->ChartOrTableType_)
            {
              this->ChartOrTableType_.set (r);
              continue;
            }
          }

          // TimeStep_String
          //
          if (n.name () == "TimeStep_String" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TimeStep_String_type > r (
              TimeStep_String_traits::create (i, f, this));

            if (!this->TimeStep_String_)
            {
              this->TimeStep_String_.set (r);
              continue;
            }
          }

          // Font
          //
          if (n.name () == "Font" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Font_type > r (
              Font_traits::create (i, f, this));

            if (!this->Font_)
            {
              this->Font_.set (r);
              continue;
            }
          }

          // FontSize
          //
          if (n.name () == "FontSize" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FontSize_)
            {
              this->FontSize_.set (FontSize_traits::create (i, f, this));
              continue;
            }
          }

          // X_AxisMeasure
          //
          if (n.name () == "X_AxisMeasure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< X_AxisMeasure_type > r (
              X_AxisMeasure_traits::create (i, f, this));

            if (!this->X_AxisMeasure_)
            {
              this->X_AxisMeasure_.set (r);
              continue;
            }
          }

          // X_AxisUnits
          //
          if (n.name () == "X_AxisUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< X_AxisUnits_type > r (
              X_AxisUnits_traits::create (i, f, this));

            if (!this->X_AxisUnits_)
            {
              this->X_AxisUnits_.set (r);
              continue;
            }
          }

          // Y_AxisMeasure
          //
          if (n.name () == "Y_AxisMeasure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Y_AxisMeasure_type > r (
              Y_AxisMeasure_traits::create (i, f, this));

            if (!this->Y_AxisMeasure_)
            {
              this->Y_AxisMeasure_.set (r);
              continue;
            }
          }

          // Y_AxisUnits
          //
          if (n.name () == "Y_AxisUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Y_AxisUnits_type > r (
              Y_AxisUnits_traits::create (i, f, this));

            if (!this->Y_AxisUnits_)
            {
              this->Y_AxisUnits_.set (r);
              continue;
            }
          }

          // Y2_AxisMeasure
          //
          if (n.name () == "Y2_AxisMeasure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Y2_AxisMeasure_type > r (
              Y2_AxisMeasure_traits::create (i, f, this));

            if (!this->Y2_AxisMeasure_)
            {
              this->Y2_AxisMeasure_.set (r);
              continue;
            }
          }

          // Y2_AxisUnits
          //
          if (n.name () == "Y2_AxisUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Y2_AxisUnits_type > r (
              Y2_AxisUnits_traits::create (i, f, this));

            if (!this->Y2_AxisUnits_)
            {
              this->Y2_AxisUnits_.set (r);
              continue;
            }
          }

          // StartDate
          //
          if (n.name () == "StartDate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StartDate_)
            {
              this->StartDate_.set (StartDate_traits::create (i, f, this));
              continue;
            }
          }

          // EndDate
          //
          if (n.name () == "EndDate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->EndDate_)
            {
              this->EndDate_.set (EndDate_traits::create (i, f, this));
              continue;
            }
          }

          // LegendInclDesignAlt
          //
          if (n.name () == "LegendInclDesignAlt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LegendInclDesignAlt_)
            {
              this->LegendInclDesignAlt_.set (LegendInclDesignAlt_traits::create (i, f, this));
              continue;
            }
          }

          // LegendInclConfig
          //
          if (n.name () == "LegendInclConfig" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LegendInclConfig_)
            {
              this->LegendInclConfig_.set (LegendInclConfig_traits::create (i, f, this));
              continue;
            }
          }

          // LegendInclRun
          //
          if (n.name () == "LegendInclRun" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LegendInclRun_)
            {
              this->LegendInclRun_.set (LegendInclRun_traits::create (i, f, this));
              continue;
            }
          }

          // LegendInclArea
          //
          if (n.name () == "LegendInclArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LegendInclArea_)
            {
              this->LegendInclArea_.set (LegendInclArea_traits::create (i, f, this));
              continue;
            }
          }

          // ChartTitle
          //
          if (n.name () == "ChartTitle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ChartTitle_type > r (
              ChartTitle_traits::create (i, f, this));

            if (!this->ChartTitle_)
            {
              this->ChartTitle_.set (r);
              continue;
            }
          }

          // LeftAxisLabel
          //
          if (n.name () == "LeftAxisLabel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< LeftAxisLabel_type > r (
              LeftAxisLabel_traits::create (i, f, this));

            if (!this->LeftAxisLabel_)
            {
              this->LeftAxisLabel_.set (r);
              continue;
            }
          }

          // RightAxisLabel
          //
          if (n.name () == "RightAxisLabel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< RightAxisLabel_type > r (
              RightAxisLabel_traits::create (i, f, this));

            if (!this->RightAxisLabel_)
            {
              this->RightAxisLabel_.set (r);
              continue;
            }
          }

          // BottomAxisLabel
          //
          if (n.name () == "BottomAxisLabel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< BottomAxisLabel_type > r (
              BottomAxisLabel_traits::create (i, f, this));

            if (!this->BottomAxisLabel_)
            {
              this->BottomAxisLabel_.set (r);
              continue;
            }
          }

          // Labels
          //
          if (n.name () == "Labels" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Labels_type > r (
              Labels_traits::create (i, f, this));

            if (!this->Labels_)
            {
              this->Labels_.set (r);
              continue;
            }
          }

          // LegendAppearence
          //
          if (n.name () == "LegendAppearence" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< LegendAppearence_type > r (
              LegendAppearence_traits::create (i, f, this));

            if (!this->LegendAppearence_)
            {
              this->LegendAppearence_.set (r);
              continue;
            }
          }

          // ShowLegend
          //
          if (n.name () == "ShowLegend" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ShowLegend_)
            {
              this->ShowLegend_.set (ShowLegend_traits::create (i, f, this));
              continue;
            }
          }

          // LegendDockStyle
          //
          if (n.name () == "LegendDockStyle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< LegendDockStyle_type > r (
              LegendDockStyle_traits::create (i, f, this));

            if (!this->LegendDockStyle_)
            {
              this->LegendDockStyle_.set (r);
              continue;
            }
          }

          // LockAspectRatio
          //
          if (n.name () == "LockAspectRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LockAspectRatio_)
            {
              this->LockAspectRatio_.set (LockAspectRatio_traits::create (i, f, this));
              continue;
            }
          }

          // TableTextStyle
          //
          if (n.name () == "TableTextStyle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TableTextStyle_type > r (
              TableTextStyle_traits::create (i, f, this));

            if (!this->TableTextStyle_)
            {
              this->TableTextStyle_.set (r);
              continue;
            }
          }

          // DecimalPlaces
          //
          if (n.name () == "DecimalPlaces" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DecimalPlaces_)
            {
              this->DecimalPlaces_.set (DecimalPlaces_traits::create (i, f, this));
              continue;
            }
          }

          // LeftAxisTitle
          //
          if (n.name () == "LeftAxisTitle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< LeftAxisTitle_type > r (
              LeftAxisTitle_traits::create (i, f, this));

            if (!this->LeftAxisTitle_)
            {
              this->LeftAxisTitle_.set (r);
              continue;
            }
          }

          // RightAxisTitle
          //
          if (n.name () == "RightAxisTitle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< RightAxisTitle_type > r (
              RightAxisTitle_traits::create (i, f, this));

            if (!this->RightAxisTitle_)
            {
              this->RightAxisTitle_.set (r);
              continue;
            }
          }

          // BottomAxisTitle
          //
          if (n.name () == "BottomAxisTitle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< BottomAxisTitle_type > r (
              BottomAxisTitle_traits::create (i, f, this));

            if (!this->BottomAxisTitle_)
            {
              this->BottomAxisTitle_.set (r);
              continue;
            }
          }

          // StartHour
          //
          if (n.name () == "StartHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StartHour_)
            {
              this->StartHour_.set (StartHour_traits::create (i, f, this));
              continue;
            }
          }

          // StartDay
          //
          if (n.name () == "StartDay" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StartDay_)
            {
              this->StartDay_.set (StartDay_traits::create (i, f, this));
              continue;
            }
          }

          // StartMonth
          //
          if (n.name () == "StartMonth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StartMonth_)
            {
              this->StartMonth_.set (StartMonth_traits::create (i, f, this));
              continue;
            }
          }

          // EndHour
          //
          if (n.name () == "EndHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->EndHour_)
            {
              this->EndHour_.set (EndHour_traits::create (i, f, this));
              continue;
            }
          }

          // EndDay
          //
          if (n.name () == "EndDay" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->EndDay_)
            {
              this->EndDay_.set (EndDay_traits::create (i, f, this));
              continue;
            }
          }

          // EndMonth
          //
          if (n.name () == "EndMonth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->EndMonth_)
            {
              this->EndMonth_.set (EndMonth_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimResultsView* SimResultsView::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimResultsView (*this, f, c);
      }

      SimResultsView& SimResultsView::
      operator= (const SimResultsView& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimResultsVisualization& > (*this) = x;
          this->VariablesInView_ = x.VariablesInView_;
          this->ViewType_ = x.ViewType_;
          this->ChartOrTableType_ = x.ChartOrTableType_;
          this->TimeStep_String_ = x.TimeStep_String_;
          this->Font_ = x.Font_;
          this->FontSize_ = x.FontSize_;
          this->X_AxisMeasure_ = x.X_AxisMeasure_;
          this->X_AxisUnits_ = x.X_AxisUnits_;
          this->Y_AxisMeasure_ = x.Y_AxisMeasure_;
          this->Y_AxisUnits_ = x.Y_AxisUnits_;
          this->Y2_AxisMeasure_ = x.Y2_AxisMeasure_;
          this->Y2_AxisUnits_ = x.Y2_AxisUnits_;
          this->StartDate_ = x.StartDate_;
          this->EndDate_ = x.EndDate_;
          this->LegendInclDesignAlt_ = x.LegendInclDesignAlt_;
          this->LegendInclConfig_ = x.LegendInclConfig_;
          this->LegendInclRun_ = x.LegendInclRun_;
          this->LegendInclArea_ = x.LegendInclArea_;
          this->ChartTitle_ = x.ChartTitle_;
          this->LeftAxisLabel_ = x.LeftAxisLabel_;
          this->RightAxisLabel_ = x.RightAxisLabel_;
          this->BottomAxisLabel_ = x.BottomAxisLabel_;
          this->Labels_ = x.Labels_;
          this->LegendAppearence_ = x.LegendAppearence_;
          this->ShowLegend_ = x.ShowLegend_;
          this->LegendDockStyle_ = x.LegendDockStyle_;
          this->LockAspectRatio_ = x.LockAspectRatio_;
          this->TableTextStyle_ = x.TableTextStyle_;
          this->DecimalPlaces_ = x.DecimalPlaces_;
          this->LeftAxisTitle_ = x.LeftAxisTitle_;
          this->RightAxisTitle_ = x.RightAxisTitle_;
          this->BottomAxisTitle_ = x.BottomAxisTitle_;
          this->StartHour_ = x.StartHour_;
          this->StartDay_ = x.StartDay_;
          this->StartMonth_ = x.StartMonth_;
          this->EndHour_ = x.EndHour_;
          this->EndDay_ = x.EndDay_;
          this->EndMonth_ = x.EndMonth_;
        }

        return *this;
      }

      SimResultsView::
      ~SimResultsView ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

