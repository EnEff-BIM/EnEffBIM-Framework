// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_HEATING_COIL_WATER_COIL_AIR_PRE_HEAT_WATER_HXX
#define SIM_FLOW_ENERGY_TRANSFER_HEATING_COIL_WATER_COIL_AIR_PRE_HEAT_WATER_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_heatingcoilwater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater
      {
        public:
        // SimFlowEnergyTrans_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AvailSchedName_type > SimFlowEnergyTrans_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AvailSchedName_type, char > SimFlowEnergyTrans_AvailSchedName_traits;

        const SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName () const;

        SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName ();

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x);

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x);

        void
        SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > p);

        // SimFlowEnergyTrans_RatedCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedCap_type > SimFlowEnergyTrans_RatedCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedCap_traits;

        const SimFlowEnergyTrans_RatedCap_optional&
        SimFlowEnergyTrans_RatedCap () const;

        SimFlowEnergyTrans_RatedCap_optional&
        SimFlowEnergyTrans_RatedCap ();

        void
        SimFlowEnergyTrans_RatedCap (const SimFlowEnergyTrans_RatedCap_type& x);

        void
        SimFlowEnergyTrans_RatedCap (const SimFlowEnergyTrans_RatedCap_optional& x);

        // SimFlowEnergyTrans_MaxWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MaxWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxWaterFlowRate_type > SimFlowEnergyTrans_MaxWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MaxWaterFlowRate_traits;

        const SimFlowEnergyTrans_MaxWaterFlowRate_optional&
        SimFlowEnergyTrans_MaxWaterFlowRate () const;

        SimFlowEnergyTrans_MaxWaterFlowRate_optional&
        SimFlowEnergyTrans_MaxWaterFlowRate ();

        void
        SimFlowEnergyTrans_MaxWaterFlowRate (const SimFlowEnergyTrans_MaxWaterFlowRate_type& x);

        void
        SimFlowEnergyTrans_MaxWaterFlowRate (const SimFlowEnergyTrans_MaxWaterFlowRate_optional& x);

        // SimFlowEnergyTrans_UFactorTimesAreaVal
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_UFactorTimesAreaVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_UFactorTimesAreaVal_type > SimFlowEnergyTrans_UFactorTimesAreaVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_UFactorTimesAreaVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_UFactorTimesAreaVal_traits;

        const SimFlowEnergyTrans_UFactorTimesAreaVal_optional&
        SimFlowEnergyTrans_UFactorTimesAreaVal () const;

        SimFlowEnergyTrans_UFactorTimesAreaVal_optional&
        SimFlowEnergyTrans_UFactorTimesAreaVal ();

        void
        SimFlowEnergyTrans_UFactorTimesAreaVal (const SimFlowEnergyTrans_UFactorTimesAreaVal_type& x);

        void
        SimFlowEnergyTrans_UFactorTimesAreaVal (const SimFlowEnergyTrans_UFactorTimesAreaVal_optional& x);

        // SimFlowEnergyTrans_WaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_WaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_WaterInletNodeName_type > SimFlowEnergyTrans_WaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_WaterInletNodeName_type, char > SimFlowEnergyTrans_WaterInletNodeName_traits;

        const SimFlowEnergyTrans_WaterInletNodeName_optional&
        SimFlowEnergyTrans_WaterInletNodeName () const;

        SimFlowEnergyTrans_WaterInletNodeName_optional&
        SimFlowEnergyTrans_WaterInletNodeName ();

        void
        SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_type& x);

        void
        SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_WaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > p);

        // SimFlowEnergyTrans_WaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_WaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_WaterOutletNodeName_type > SimFlowEnergyTrans_WaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_WaterOutletNodeName_type, char > SimFlowEnergyTrans_WaterOutletNodeName_traits;

        const SimFlowEnergyTrans_WaterOutletNodeName_optional&
        SimFlowEnergyTrans_WaterOutletNodeName () const;

        SimFlowEnergyTrans_WaterOutletNodeName_optional&
        SimFlowEnergyTrans_WaterOutletNodeName ();

        void
        SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_WaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > p);

        // SimFlowEnergyTrans_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AirInNodeName_type > SimFlowEnergyTrans_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AirInNodeName_type, char > SimFlowEnergyTrans_AirInNodeName_traits;

        const SimFlowEnergyTrans_AirInNodeName_optional&
        SimFlowEnergyTrans_AirInNodeName () const;

        SimFlowEnergyTrans_AirInNodeName_optional&
        SimFlowEnergyTrans_AirInNodeName ();

        void
        SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x);

        void
        SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x);

        void
        SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > p);

        // SimFlowEnergyTrans_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AirOutNodeName_type > SimFlowEnergyTrans_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AirOutNodeName_type, char > SimFlowEnergyTrans_AirOutNodeName_traits;

        const SimFlowEnergyTrans_AirOutNodeName_optional&
        SimFlowEnergyTrans_AirOutNodeName () const;

        SimFlowEnergyTrans_AirOutNodeName_optional&
        SimFlowEnergyTrans_AirOutNodeName ();

        void
        SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x);

        void
        SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x);

        void
        SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > p);

        // SimFlowEnergyTrans_PerfInputMeth
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_PerfInputMeth_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_PerfInputMeth_type > SimFlowEnergyTrans_PerfInputMeth_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_PerfInputMeth_type, char > SimFlowEnergyTrans_PerfInputMeth_traits;

        const SimFlowEnergyTrans_PerfInputMeth_optional&
        SimFlowEnergyTrans_PerfInputMeth () const;

        SimFlowEnergyTrans_PerfInputMeth_optional&
        SimFlowEnergyTrans_PerfInputMeth ();

        void
        SimFlowEnergyTrans_PerfInputMeth (const SimFlowEnergyTrans_PerfInputMeth_type& x);

        void
        SimFlowEnergyTrans_PerfInputMeth (const SimFlowEnergyTrans_PerfInputMeth_optional& x);

        void
        SimFlowEnergyTrans_PerfInputMeth (::std::auto_ptr< SimFlowEnergyTrans_PerfInputMeth_type > p);

        // SimFlowEnergyTrans_RatedInletWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedInletWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedInletWaterTemp_type > SimFlowEnergyTrans_RatedInletWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedInletWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedInletWaterTemp_traits;

        const SimFlowEnergyTrans_RatedInletWaterTemp_optional&
        SimFlowEnergyTrans_RatedInletWaterTemp () const;

        SimFlowEnergyTrans_RatedInletWaterTemp_optional&
        SimFlowEnergyTrans_RatedInletWaterTemp ();

        void
        SimFlowEnergyTrans_RatedInletWaterTemp (const SimFlowEnergyTrans_RatedInletWaterTemp_type& x);

        void
        SimFlowEnergyTrans_RatedInletWaterTemp (const SimFlowEnergyTrans_RatedInletWaterTemp_optional& x);

        // SimFlowEnergyTrans_RatedInletAirTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedInletAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedInletAirTemp_type > SimFlowEnergyTrans_RatedInletAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedInletAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedInletAirTemp_traits;

        const SimFlowEnergyTrans_RatedInletAirTemp_optional&
        SimFlowEnergyTrans_RatedInletAirTemp () const;

        SimFlowEnergyTrans_RatedInletAirTemp_optional&
        SimFlowEnergyTrans_RatedInletAirTemp ();

        void
        SimFlowEnergyTrans_RatedInletAirTemp (const SimFlowEnergyTrans_RatedInletAirTemp_type& x);

        void
        SimFlowEnergyTrans_RatedInletAirTemp (const SimFlowEnergyTrans_RatedInletAirTemp_optional& x);

        // SimFlowEnergyTrans_RatedOutletWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedOutletWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedOutletWaterTemp_type > SimFlowEnergyTrans_RatedOutletWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedOutletWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedOutletWaterTemp_traits;

        const SimFlowEnergyTrans_RatedOutletWaterTemp_optional&
        SimFlowEnergyTrans_RatedOutletWaterTemp () const;

        SimFlowEnergyTrans_RatedOutletWaterTemp_optional&
        SimFlowEnergyTrans_RatedOutletWaterTemp ();

        void
        SimFlowEnergyTrans_RatedOutletWaterTemp (const SimFlowEnergyTrans_RatedOutletWaterTemp_type& x);

        void
        SimFlowEnergyTrans_RatedOutletWaterTemp (const SimFlowEnergyTrans_RatedOutletWaterTemp_optional& x);

        // SimFlowEnergyTrans_RatedOutletAirTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedOutletAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedOutletAirTemp_type > SimFlowEnergyTrans_RatedOutletAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedOutletAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedOutletAirTemp_traits;

        const SimFlowEnergyTrans_RatedOutletAirTemp_optional&
        SimFlowEnergyTrans_RatedOutletAirTemp () const;

        SimFlowEnergyTrans_RatedOutletAirTemp_optional&
        SimFlowEnergyTrans_RatedOutletAirTemp ();

        void
        SimFlowEnergyTrans_RatedOutletAirTemp (const SimFlowEnergyTrans_RatedOutletAirTemp_type& x);

        void
        SimFlowEnergyTrans_RatedOutletAirTemp (const SimFlowEnergyTrans_RatedOutletAirTemp_optional& x);

        // SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_type > SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_traits;

        const SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_optional&
        SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect () const;

        SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_optional&
        SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect ();

        void
        SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect (const SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_type& x);

        void
        SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect (const SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_optional& x);

        // T24BypassMinimumEfficiencyCheck
        //
        typedef ::xml_schema::int_ T24BypassMinimumEfficiencyCheck_type;
        typedef ::xsd::cxx::tree::optional< T24BypassMinimumEfficiencyCheck_type > T24BypassMinimumEfficiencyCheck_optional;
        typedef ::xsd::cxx::tree::traits< T24BypassMinimumEfficiencyCheck_type, char > T24BypassMinimumEfficiencyCheck_traits;

        const T24BypassMinimumEfficiencyCheck_optional&
        T24BypassMinimumEfficiencyCheck () const;

        T24BypassMinimumEfficiencyCheck_optional&
        T24BypassMinimumEfficiencyCheck ();

        void
        T24BypassMinimumEfficiencyCheck (const T24BypassMinimumEfficiencyCheck_type& x);

        void
        T24BypassMinimumEfficiencyCheck (const T24BypassMinimumEfficiencyCheck_optional& x);

        // T24CoilPressureDrop
        //
        typedef ::xml_schema::double_ T24CoilPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< T24CoilPressureDrop_type > T24CoilPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< T24CoilPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CoilPressureDrop_traits;

        const T24CoilPressureDrop_optional&
        T24CoilPressureDrop () const;

        T24CoilPressureDrop_optional&
        T24CoilPressureDrop ();

        void
        T24CoilPressureDrop (const T24CoilPressureDrop_type& x);

        void
        T24CoilPressureDrop (const T24CoilPressureDrop_optional& x);

        // Constructors.
        //
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater ();

        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater (const RefId_type&);

        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f = 0,
                                                                    ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater& x,
                                                                    ::xml_schema::flags f = 0,
                                                                    ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater&
        operator= (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater& x);

        virtual 
        ~SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_AvailSchedName_optional SimFlowEnergyTrans_AvailSchedName_;
        SimFlowEnergyTrans_RatedCap_optional SimFlowEnergyTrans_RatedCap_;
        SimFlowEnergyTrans_MaxWaterFlowRate_optional SimFlowEnergyTrans_MaxWaterFlowRate_;
        SimFlowEnergyTrans_UFactorTimesAreaVal_optional SimFlowEnergyTrans_UFactorTimesAreaVal_;
        SimFlowEnergyTrans_WaterInletNodeName_optional SimFlowEnergyTrans_WaterInletNodeName_;
        SimFlowEnergyTrans_WaterOutletNodeName_optional SimFlowEnergyTrans_WaterOutletNodeName_;
        SimFlowEnergyTrans_AirInNodeName_optional SimFlowEnergyTrans_AirInNodeName_;
        SimFlowEnergyTrans_AirOutNodeName_optional SimFlowEnergyTrans_AirOutNodeName_;
        SimFlowEnergyTrans_PerfInputMeth_optional SimFlowEnergyTrans_PerfInputMeth_;
        SimFlowEnergyTrans_RatedInletWaterTemp_optional SimFlowEnergyTrans_RatedInletWaterTemp_;
        SimFlowEnergyTrans_RatedInletAirTemp_optional SimFlowEnergyTrans_RatedInletAirTemp_;
        SimFlowEnergyTrans_RatedOutletWaterTemp_optional SimFlowEnergyTrans_RatedOutletWaterTemp_;
        SimFlowEnergyTrans_RatedOutletAirTemp_optional SimFlowEnergyTrans_RatedOutletAirTemp_;
        SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_optional SimFlowEnergyTrans_RatedRatioForAirAndWaterConvect_;
        T24BypassMinimumEfficiencyCheck_optional T24BypassMinimumEfficiencyCheck_;
        T24CoilPressureDrop_optional T24CoilPressureDrop_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_HEATING_COIL_WATER_COIL_AIR_PRE_HEAT_WATER_HXX
