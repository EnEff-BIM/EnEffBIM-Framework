// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBuilding_Building.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimBuilding_Building
      // 

      const SimBuilding_Building::SimBuilding_Name_optional& SimBuilding_Building::
      SimBuilding_Name () const
      {
        return this->SimBuilding_Name_;
      }

      SimBuilding_Building::SimBuilding_Name_optional& SimBuilding_Building::
      SimBuilding_Name ()
      {
        return this->SimBuilding_Name_;
      }

      void SimBuilding_Building::
      SimBuilding_Name (const SimBuilding_Name_type& x)
      {
        this->SimBuilding_Name_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_Name (const SimBuilding_Name_optional& x)
      {
        this->SimBuilding_Name_ = x;
      }

      void SimBuilding_Building::
      SimBuilding_Name (::std::auto_ptr< SimBuilding_Name_type > x)
      {
        this->SimBuilding_Name_.set (x);
      }

      const SimBuilding_Building::SimBuilding_NorthAxis_optional& SimBuilding_Building::
      SimBuilding_NorthAxis () const
      {
        return this->SimBuilding_NorthAxis_;
      }

      SimBuilding_Building::SimBuilding_NorthAxis_optional& SimBuilding_Building::
      SimBuilding_NorthAxis ()
      {
        return this->SimBuilding_NorthAxis_;
      }

      void SimBuilding_Building::
      SimBuilding_NorthAxis (const SimBuilding_NorthAxis_type& x)
      {
        this->SimBuilding_NorthAxis_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_NorthAxis (const SimBuilding_NorthAxis_optional& x)
      {
        this->SimBuilding_NorthAxis_ = x;
      }

      const SimBuilding_Building::SimBuilding_Terrain_optional& SimBuilding_Building::
      SimBuilding_Terrain () const
      {
        return this->SimBuilding_Terrain_;
      }

      SimBuilding_Building::SimBuilding_Terrain_optional& SimBuilding_Building::
      SimBuilding_Terrain ()
      {
        return this->SimBuilding_Terrain_;
      }

      void SimBuilding_Building::
      SimBuilding_Terrain (const SimBuilding_Terrain_type& x)
      {
        this->SimBuilding_Terrain_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_Terrain (const SimBuilding_Terrain_optional& x)
      {
        this->SimBuilding_Terrain_ = x;
      }

      void SimBuilding_Building::
      SimBuilding_Terrain (::std::auto_ptr< SimBuilding_Terrain_type > x)
      {
        this->SimBuilding_Terrain_.set (x);
      }

      const SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional& SimBuilding_Building::
      SimBuilding_LoadsConvergTolVal () const
      {
        return this->SimBuilding_LoadsConvergTolVal_;
      }

      SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional& SimBuilding_Building::
      SimBuilding_LoadsConvergTolVal ()
      {
        return this->SimBuilding_LoadsConvergTolVal_;
      }

      void SimBuilding_Building::
      SimBuilding_LoadsConvergTolVal (const SimBuilding_LoadsConvergTolVal_type& x)
      {
        this->SimBuilding_LoadsConvergTolVal_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_LoadsConvergTolVal (const SimBuilding_LoadsConvergTolVal_optional& x)
      {
        this->SimBuilding_LoadsConvergTolVal_ = x;
      }

      const SimBuilding_Building::SimBuilding_TempConvergTolVal_optional& SimBuilding_Building::
      SimBuilding_TempConvergTolVal () const
      {
        return this->SimBuilding_TempConvergTolVal_;
      }

      SimBuilding_Building::SimBuilding_TempConvergTolVal_optional& SimBuilding_Building::
      SimBuilding_TempConvergTolVal ()
      {
        return this->SimBuilding_TempConvergTolVal_;
      }

      void SimBuilding_Building::
      SimBuilding_TempConvergTolVal (const SimBuilding_TempConvergTolVal_type& x)
      {
        this->SimBuilding_TempConvergTolVal_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_TempConvergTolVal (const SimBuilding_TempConvergTolVal_optional& x)
      {
        this->SimBuilding_TempConvergTolVal_ = x;
      }

      const SimBuilding_Building::SimBuilding_SolarDist_optional& SimBuilding_Building::
      SimBuilding_SolarDist () const
      {
        return this->SimBuilding_SolarDist_;
      }

      SimBuilding_Building::SimBuilding_SolarDist_optional& SimBuilding_Building::
      SimBuilding_SolarDist ()
      {
        return this->SimBuilding_SolarDist_;
      }

      void SimBuilding_Building::
      SimBuilding_SolarDist (const SimBuilding_SolarDist_type& x)
      {
        this->SimBuilding_SolarDist_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_SolarDist (const SimBuilding_SolarDist_optional& x)
      {
        this->SimBuilding_SolarDist_ = x;
      }

      void SimBuilding_Building::
      SimBuilding_SolarDist (::std::auto_ptr< SimBuilding_SolarDist_type > x)
      {
        this->SimBuilding_SolarDist_.set (x);
      }

      const SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional& SimBuilding_Building::
      SimBuilding_MaxNumWarmupDays () const
      {
        return this->SimBuilding_MaxNumWarmupDays_;
      }

      SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional& SimBuilding_Building::
      SimBuilding_MaxNumWarmupDays ()
      {
        return this->SimBuilding_MaxNumWarmupDays_;
      }

      void SimBuilding_Building::
      SimBuilding_MaxNumWarmupDays (const SimBuilding_MaxNumWarmupDays_type& x)
      {
        this->SimBuilding_MaxNumWarmupDays_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_MaxNumWarmupDays (const SimBuilding_MaxNumWarmupDays_optional& x)
      {
        this->SimBuilding_MaxNumWarmupDays_ = x;
      }

      const SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional& SimBuilding_Building::
      SimBuilding_MinNumberWarmupDays () const
      {
        return this->SimBuilding_MinNumberWarmupDays_;
      }

      SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional& SimBuilding_Building::
      SimBuilding_MinNumberWarmupDays ()
      {
        return this->SimBuilding_MinNumberWarmupDays_;
      }

      void SimBuilding_Building::
      SimBuilding_MinNumberWarmupDays (const SimBuilding_MinNumberWarmupDays_type& x)
      {
        this->SimBuilding_MinNumberWarmupDays_.set (x);
      }

      void SimBuilding_Building::
      SimBuilding_MinNumberWarmupDays (const SimBuilding_MinNumberWarmupDays_optional& x)
      {
        this->SimBuilding_MinNumberWarmupDays_ = x;
      }

      const SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional& SimBuilding_Building::
      RoofIrrigation_IrrigationModelType () const
      {
        return this->RoofIrrigation_IrrigationModelType_;
      }

      SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional& SimBuilding_Building::
      RoofIrrigation_IrrigationModelType ()
      {
        return this->RoofIrrigation_IrrigationModelType_;
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationModelType (const RoofIrrigation_IrrigationModelType_type& x)
      {
        this->RoofIrrigation_IrrigationModelType_.set (x);
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationModelType (const RoofIrrigation_IrrigationModelType_optional& x)
      {
        this->RoofIrrigation_IrrigationModelType_ = x;
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationModelType (::std::auto_ptr< RoofIrrigation_IrrigationModelType_type > x)
      {
        this->RoofIrrigation_IrrigationModelType_.set (x);
      }

      const SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional& SimBuilding_Building::
      RoofIrrigation_IrrigationRateSchedName () const
      {
        return this->RoofIrrigation_IrrigationRateSchedName_;
      }

      SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional& SimBuilding_Building::
      RoofIrrigation_IrrigationRateSchedName ()
      {
        return this->RoofIrrigation_IrrigationRateSchedName_;
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationRateSchedName (const RoofIrrigation_IrrigationRateSchedName_type& x)
      {
        this->RoofIrrigation_IrrigationRateSchedName_.set (x);
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationRateSchedName (const RoofIrrigation_IrrigationRateSchedName_optional& x)
      {
        this->RoofIrrigation_IrrigationRateSchedName_ = x;
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationRateSchedName (::std::auto_ptr< RoofIrrigation_IrrigationRateSchedName_type > x)
      {
        this->RoofIrrigation_IrrigationRateSchedName_.set (x);
      }

      const SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional& SimBuilding_Building::
      RoofIrrigation_IrrigationMaxSaturatThreshold () const
      {
        return this->RoofIrrigation_IrrigationMaxSaturatThreshold_;
      }

      SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional& SimBuilding_Building::
      RoofIrrigation_IrrigationMaxSaturatThreshold ()
      {
        return this->RoofIrrigation_IrrigationMaxSaturatThreshold_;
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationMaxSaturatThreshold (const RoofIrrigation_IrrigationMaxSaturatThreshold_type& x)
      {
        this->RoofIrrigation_IrrigationMaxSaturatThreshold_.set (x);
      }

      void SimBuilding_Building::
      RoofIrrigation_IrrigationMaxSaturatThreshold (const RoofIrrigation_IrrigationMaxSaturatThreshold_optional& x)
      {
        this->RoofIrrigation_IrrigationMaxSaturatThreshold_ = x;
      }

      const SimBuilding_Building::T24AboveGradeStoryCountAltered_optional& SimBuilding_Building::
      T24AboveGradeStoryCountAltered () const
      {
        return this->T24AboveGradeStoryCountAltered_;
      }

      SimBuilding_Building::T24AboveGradeStoryCountAltered_optional& SimBuilding_Building::
      T24AboveGradeStoryCountAltered ()
      {
        return this->T24AboveGradeStoryCountAltered_;
      }

      void SimBuilding_Building::
      T24AboveGradeStoryCountAltered (const T24AboveGradeStoryCountAltered_type& x)
      {
        this->T24AboveGradeStoryCountAltered_.set (x);
      }

      void SimBuilding_Building::
      T24AboveGradeStoryCountAltered (const T24AboveGradeStoryCountAltered_optional& x)
      {
        this->T24AboveGradeStoryCountAltered_ = x;
      }

      const SimBuilding_Building::T24AboveGradeStoryCountExists_optional& SimBuilding_Building::
      T24AboveGradeStoryCountExists () const
      {
        return this->T24AboveGradeStoryCountExists_;
      }

      SimBuilding_Building::T24AboveGradeStoryCountExists_optional& SimBuilding_Building::
      T24AboveGradeStoryCountExists ()
      {
        return this->T24AboveGradeStoryCountExists_;
      }

      void SimBuilding_Building::
      T24AboveGradeStoryCountExists (const T24AboveGradeStoryCountExists_type& x)
      {
        this->T24AboveGradeStoryCountExists_.set (x);
      }

      void SimBuilding_Building::
      T24AboveGradeStoryCountExists (const T24AboveGradeStoryCountExists_optional& x)
      {
        this->T24AboveGradeStoryCountExists_ = x;
      }

      const SimBuilding_Building::T24AboveGradeStoryCountNew_optional& SimBuilding_Building::
      T24AboveGradeStoryCountNew () const
      {
        return this->T24AboveGradeStoryCountNew_;
      }

      SimBuilding_Building::T24AboveGradeStoryCountNew_optional& SimBuilding_Building::
      T24AboveGradeStoryCountNew ()
      {
        return this->T24AboveGradeStoryCountNew_;
      }

      void SimBuilding_Building::
      T24AboveGradeStoryCountNew (const T24AboveGradeStoryCountNew_type& x)
      {
        this->T24AboveGradeStoryCountNew_.set (x);
      }

      void SimBuilding_Building::
      T24AboveGradeStoryCountNew (const T24AboveGradeStoryCountNew_optional& x)
      {
        this->T24AboveGradeStoryCountNew_ = x;
      }

      const SimBuilding_Building::T24CoilCoolingCapacity_optional& SimBuilding_Building::
      T24CoilCoolingCapacity () const
      {
        return this->T24CoilCoolingCapacity_;
      }

      SimBuilding_Building::T24CoilCoolingCapacity_optional& SimBuilding_Building::
      T24CoilCoolingCapacity ()
      {
        return this->T24CoilCoolingCapacity_;
      }

      void SimBuilding_Building::
      T24CoilCoolingCapacity (const T24CoilCoolingCapacity_type& x)
      {
        this->T24CoilCoolingCapacity_.set (x);
      }

      void SimBuilding_Building::
      T24CoilCoolingCapacity (const T24CoilCoolingCapacity_optional& x)
      {
        this->T24CoilCoolingCapacity_ = x;
      }

      const SimBuilding_Building::T24CoilHeatingCapacity_optional& SimBuilding_Building::
      T24CoilHeatingCapacity () const
      {
        return this->T24CoilHeatingCapacity_;
      }

      SimBuilding_Building::T24CoilHeatingCapacity_optional& SimBuilding_Building::
      T24CoilHeatingCapacity ()
      {
        return this->T24CoilHeatingCapacity_;
      }

      void SimBuilding_Building::
      T24CoilHeatingCapacity (const T24CoilHeatingCapacity_type& x)
      {
        this->T24CoilHeatingCapacity_.set (x);
      }

      void SimBuilding_Building::
      T24CoilHeatingCapacity (const T24CoilHeatingCapacity_optional& x)
      {
        this->T24CoilHeatingCapacity_ = x;
      }

      const SimBuilding_Building::T24FunctionClassificationMethod_optional& SimBuilding_Building::
      T24FunctionClassificationMethod () const
      {
        return this->T24FunctionClassificationMethod_;
      }

      SimBuilding_Building::T24FunctionClassificationMethod_optional& SimBuilding_Building::
      T24FunctionClassificationMethod ()
      {
        return this->T24FunctionClassificationMethod_;
      }

      void SimBuilding_Building::
      T24FunctionClassificationMethod (const T24FunctionClassificationMethod_type& x)
      {
        this->T24FunctionClassificationMethod_.set (x);
      }

      void SimBuilding_Building::
      T24FunctionClassificationMethod (const T24FunctionClassificationMethod_optional& x)
      {
        this->T24FunctionClassificationMethod_ = x;
      }

      void SimBuilding_Building::
      T24FunctionClassificationMethod (::std::auto_ptr< T24FunctionClassificationMethod_type > x)
      {
        this->T24FunctionClassificationMethod_.set (x);
      }

      const SimBuilding_Building::T24HighRiseResidentialLivingUnitCount_optional& SimBuilding_Building::
      T24HighRiseResidentialLivingUnitCount () const
      {
        return this->T24HighRiseResidentialLivingUnitCount_;
      }

      SimBuilding_Building::T24HighRiseResidentialLivingUnitCount_optional& SimBuilding_Building::
      T24HighRiseResidentialLivingUnitCount ()
      {
        return this->T24HighRiseResidentialLivingUnitCount_;
      }

      void SimBuilding_Building::
      T24HighRiseResidentialLivingUnitCount (const T24HighRiseResidentialLivingUnitCount_type& x)
      {
        this->T24HighRiseResidentialLivingUnitCount_.set (x);
      }

      void SimBuilding_Building::
      T24HighRiseResidentialLivingUnitCount (const T24HighRiseResidentialLivingUnitCount_optional& x)
      {
        this->T24HighRiseResidentialLivingUnitCount_ = x;
      }

      const SimBuilding_Building::T24LivingUnitCountAltered_optional& SimBuilding_Building::
      T24LivingUnitCountAltered () const
      {
        return this->T24LivingUnitCountAltered_;
      }

      SimBuilding_Building::T24LivingUnitCountAltered_optional& SimBuilding_Building::
      T24LivingUnitCountAltered ()
      {
        return this->T24LivingUnitCountAltered_;
      }

      void SimBuilding_Building::
      T24LivingUnitCountAltered (const T24LivingUnitCountAltered_type& x)
      {
        this->T24LivingUnitCountAltered_.set (x);
      }

      void SimBuilding_Building::
      T24LivingUnitCountAltered (const T24LivingUnitCountAltered_optional& x)
      {
        this->T24LivingUnitCountAltered_ = x;
      }

      const SimBuilding_Building::T24LivingUnitCountExisting_optional& SimBuilding_Building::
      T24LivingUnitCountExisting () const
      {
        return this->T24LivingUnitCountExisting_;
      }

      SimBuilding_Building::T24LivingUnitCountExisting_optional& SimBuilding_Building::
      T24LivingUnitCountExisting ()
      {
        return this->T24LivingUnitCountExisting_;
      }

      void SimBuilding_Building::
      T24LivingUnitCountExisting (const T24LivingUnitCountExisting_type& x)
      {
        this->T24LivingUnitCountExisting_.set (x);
      }

      void SimBuilding_Building::
      T24LivingUnitCountExisting (const T24LivingUnitCountExisting_optional& x)
      {
        this->T24LivingUnitCountExisting_ = x;
      }

      const SimBuilding_Building::T24LivingUnitCountNew_optional& SimBuilding_Building::
      T24LivingUnitCountNew () const
      {
        return this->T24LivingUnitCountNew_;
      }

      SimBuilding_Building::T24LivingUnitCountNew_optional& SimBuilding_Building::
      T24LivingUnitCountNew ()
      {
        return this->T24LivingUnitCountNew_;
      }

      void SimBuilding_Building::
      T24LivingUnitCountNew (const T24LivingUnitCountNew_type& x)
      {
        this->T24LivingUnitCountNew_.set (x);
      }

      void SimBuilding_Building::
      T24LivingUnitCountNew (const T24LivingUnitCountNew_optional& x)
      {
        this->T24LivingUnitCountNew_ = x;
      }

      const SimBuilding_Building::T24PlantCoolingCapacity_optional& SimBuilding_Building::
      T24PlantCoolingCapacity () const
      {
        return this->T24PlantCoolingCapacity_;
      }

      SimBuilding_Building::T24PlantCoolingCapacity_optional& SimBuilding_Building::
      T24PlantCoolingCapacity ()
      {
        return this->T24PlantCoolingCapacity_;
      }

      void SimBuilding_Building::
      T24PlantCoolingCapacity (const T24PlantCoolingCapacity_type& x)
      {
        this->T24PlantCoolingCapacity_.set (x);
      }

      void SimBuilding_Building::
      T24PlantCoolingCapacity (const T24PlantCoolingCapacity_optional& x)
      {
        this->T24PlantCoolingCapacity_ = x;
      }

      const SimBuilding_Building::T24PlantHeatingCapacity_optional& SimBuilding_Building::
      T24PlantHeatingCapacity () const
      {
        return this->T24PlantHeatingCapacity_;
      }

      SimBuilding_Building::T24PlantHeatingCapacity_optional& SimBuilding_Building::
      T24PlantHeatingCapacity ()
      {
        return this->T24PlantHeatingCapacity_;
      }

      void SimBuilding_Building::
      T24PlantHeatingCapacity (const T24PlantHeatingCapacity_type& x)
      {
        this->T24PlantHeatingCapacity_.set (x);
      }

      void SimBuilding_Building::
      T24PlantHeatingCapacity (const T24PlantHeatingCapacity_optional& x)
      {
        this->T24PlantHeatingCapacity_ = x;
      }

      const SimBuilding_Building::T24RelocatablePublicSchoolBuilding_optional& SimBuilding_Building::
      T24RelocatablePublicSchoolBuilding () const
      {
        return this->T24RelocatablePublicSchoolBuilding_;
      }

      SimBuilding_Building::T24RelocatablePublicSchoolBuilding_optional& SimBuilding_Building::
      T24RelocatablePublicSchoolBuilding ()
      {
        return this->T24RelocatablePublicSchoolBuilding_;
      }

      void SimBuilding_Building::
      T24RelocatablePublicSchoolBuilding (const T24RelocatablePublicSchoolBuilding_type& x)
      {
        this->T24RelocatablePublicSchoolBuilding_.set (x);
      }

      void SimBuilding_Building::
      T24RelocatablePublicSchoolBuilding (const T24RelocatablePublicSchoolBuilding_optional& x)
      {
        this->T24RelocatablePublicSchoolBuilding_ = x;
      }

      const SimBuilding_Building::T24TotalStoryCountAltered_optional& SimBuilding_Building::
      T24TotalStoryCountAltered () const
      {
        return this->T24TotalStoryCountAltered_;
      }

      SimBuilding_Building::T24TotalStoryCountAltered_optional& SimBuilding_Building::
      T24TotalStoryCountAltered ()
      {
        return this->T24TotalStoryCountAltered_;
      }

      void SimBuilding_Building::
      T24TotalStoryCountAltered (const T24TotalStoryCountAltered_type& x)
      {
        this->T24TotalStoryCountAltered_.set (x);
      }

      void SimBuilding_Building::
      T24TotalStoryCountAltered (const T24TotalStoryCountAltered_optional& x)
      {
        this->T24TotalStoryCountAltered_ = x;
      }

      const SimBuilding_Building::T24TotalStoryCountExisting_optional& SimBuilding_Building::
      T24TotalStoryCountExisting () const
      {
        return this->T24TotalStoryCountExisting_;
      }

      SimBuilding_Building::T24TotalStoryCountExisting_optional& SimBuilding_Building::
      T24TotalStoryCountExisting ()
      {
        return this->T24TotalStoryCountExisting_;
      }

      void SimBuilding_Building::
      T24TotalStoryCountExisting (const T24TotalStoryCountExisting_type& x)
      {
        this->T24TotalStoryCountExisting_.set (x);
      }

      void SimBuilding_Building::
      T24TotalStoryCountExisting (const T24TotalStoryCountExisting_optional& x)
      {
        this->T24TotalStoryCountExisting_ = x;
      }

      const SimBuilding_Building::T24TotalStoryCountNew_optional& SimBuilding_Building::
      T24TotalStoryCountNew () const
      {
        return this->T24TotalStoryCountNew_;
      }

      SimBuilding_Building::T24TotalStoryCountNew_optional& SimBuilding_Building::
      T24TotalStoryCountNew ()
      {
        return this->T24TotalStoryCountNew_;
      }

      void SimBuilding_Building::
      T24TotalStoryCountNew (const T24TotalStoryCountNew_type& x)
      {
        this->T24TotalStoryCountNew_.set (x);
      }

      void SimBuilding_Building::
      T24TotalStoryCountNew (const T24TotalStoryCountNew_optional& x)
      {
        this->T24TotalStoryCountNew_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimBuilding_Building
      //

      SimBuilding_Building::
      SimBuilding_Building ()
      : ::schema::simxml::BuildingModel::SimBuilding (),
        SimBuilding_Name_ (this),
        SimBuilding_NorthAxis_ (this),
        SimBuilding_Terrain_ (this),
        SimBuilding_LoadsConvergTolVal_ (this),
        SimBuilding_TempConvergTolVal_ (this),
        SimBuilding_SolarDist_ (this),
        SimBuilding_MaxNumWarmupDays_ (this),
        SimBuilding_MinNumberWarmupDays_ (this),
        RoofIrrigation_IrrigationModelType_ (this),
        RoofIrrigation_IrrigationRateSchedName_ (this),
        RoofIrrigation_IrrigationMaxSaturatThreshold_ (this),
        T24AboveGradeStoryCountAltered_ (this),
        T24AboveGradeStoryCountExists_ (this),
        T24AboveGradeStoryCountNew_ (this),
        T24CoilCoolingCapacity_ (this),
        T24CoilHeatingCapacity_ (this),
        T24FunctionClassificationMethod_ (this),
        T24HighRiseResidentialLivingUnitCount_ (this),
        T24LivingUnitCountAltered_ (this),
        T24LivingUnitCountExisting_ (this),
        T24LivingUnitCountNew_ (this),
        T24PlantCoolingCapacity_ (this),
        T24PlantHeatingCapacity_ (this),
        T24RelocatablePublicSchoolBuilding_ (this),
        T24TotalStoryCountAltered_ (this),
        T24TotalStoryCountExisting_ (this),
        T24TotalStoryCountNew_ (this)
      {
      }

      SimBuilding_Building::
      SimBuilding_Building (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimBuilding (RefId),
        SimBuilding_Name_ (this),
        SimBuilding_NorthAxis_ (this),
        SimBuilding_Terrain_ (this),
        SimBuilding_LoadsConvergTolVal_ (this),
        SimBuilding_TempConvergTolVal_ (this),
        SimBuilding_SolarDist_ (this),
        SimBuilding_MaxNumWarmupDays_ (this),
        SimBuilding_MinNumberWarmupDays_ (this),
        RoofIrrigation_IrrigationModelType_ (this),
        RoofIrrigation_IrrigationRateSchedName_ (this),
        RoofIrrigation_IrrigationMaxSaturatThreshold_ (this),
        T24AboveGradeStoryCountAltered_ (this),
        T24AboveGradeStoryCountExists_ (this),
        T24AboveGradeStoryCountNew_ (this),
        T24CoilCoolingCapacity_ (this),
        T24CoilHeatingCapacity_ (this),
        T24FunctionClassificationMethod_ (this),
        T24HighRiseResidentialLivingUnitCount_ (this),
        T24LivingUnitCountAltered_ (this),
        T24LivingUnitCountExisting_ (this),
        T24LivingUnitCountNew_ (this),
        T24PlantCoolingCapacity_ (this),
        T24PlantHeatingCapacity_ (this),
        T24RelocatablePublicSchoolBuilding_ (this),
        T24TotalStoryCountAltered_ (this),
        T24TotalStoryCountExisting_ (this),
        T24TotalStoryCountNew_ (this)
      {
      }

      SimBuilding_Building::
      SimBuilding_Building (const SimBuilding_Building& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimBuilding (x, f, c),
        SimBuilding_Name_ (x.SimBuilding_Name_, f, this),
        SimBuilding_NorthAxis_ (x.SimBuilding_NorthAxis_, f, this),
        SimBuilding_Terrain_ (x.SimBuilding_Terrain_, f, this),
        SimBuilding_LoadsConvergTolVal_ (x.SimBuilding_LoadsConvergTolVal_, f, this),
        SimBuilding_TempConvergTolVal_ (x.SimBuilding_TempConvergTolVal_, f, this),
        SimBuilding_SolarDist_ (x.SimBuilding_SolarDist_, f, this),
        SimBuilding_MaxNumWarmupDays_ (x.SimBuilding_MaxNumWarmupDays_, f, this),
        SimBuilding_MinNumberWarmupDays_ (x.SimBuilding_MinNumberWarmupDays_, f, this),
        RoofIrrigation_IrrigationModelType_ (x.RoofIrrigation_IrrigationModelType_, f, this),
        RoofIrrigation_IrrigationRateSchedName_ (x.RoofIrrigation_IrrigationRateSchedName_, f, this),
        RoofIrrigation_IrrigationMaxSaturatThreshold_ (x.RoofIrrigation_IrrigationMaxSaturatThreshold_, f, this),
        T24AboveGradeStoryCountAltered_ (x.T24AboveGradeStoryCountAltered_, f, this),
        T24AboveGradeStoryCountExists_ (x.T24AboveGradeStoryCountExists_, f, this),
        T24AboveGradeStoryCountNew_ (x.T24AboveGradeStoryCountNew_, f, this),
        T24CoilCoolingCapacity_ (x.T24CoilCoolingCapacity_, f, this),
        T24CoilHeatingCapacity_ (x.T24CoilHeatingCapacity_, f, this),
        T24FunctionClassificationMethod_ (x.T24FunctionClassificationMethod_, f, this),
        T24HighRiseResidentialLivingUnitCount_ (x.T24HighRiseResidentialLivingUnitCount_, f, this),
        T24LivingUnitCountAltered_ (x.T24LivingUnitCountAltered_, f, this),
        T24LivingUnitCountExisting_ (x.T24LivingUnitCountExisting_, f, this),
        T24LivingUnitCountNew_ (x.T24LivingUnitCountNew_, f, this),
        T24PlantCoolingCapacity_ (x.T24PlantCoolingCapacity_, f, this),
        T24PlantHeatingCapacity_ (x.T24PlantHeatingCapacity_, f, this),
        T24RelocatablePublicSchoolBuilding_ (x.T24RelocatablePublicSchoolBuilding_, f, this),
        T24TotalStoryCountAltered_ (x.T24TotalStoryCountAltered_, f, this),
        T24TotalStoryCountExisting_ (x.T24TotalStoryCountExisting_, f, this),
        T24TotalStoryCountNew_ (x.T24TotalStoryCountNew_, f, this)
      {
      }

      SimBuilding_Building::
      SimBuilding_Building (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimBuilding (e, f | ::xml_schema::flags::base, c),
        SimBuilding_Name_ (this),
        SimBuilding_NorthAxis_ (this),
        SimBuilding_Terrain_ (this),
        SimBuilding_LoadsConvergTolVal_ (this),
        SimBuilding_TempConvergTolVal_ (this),
        SimBuilding_SolarDist_ (this),
        SimBuilding_MaxNumWarmupDays_ (this),
        SimBuilding_MinNumberWarmupDays_ (this),
        RoofIrrigation_IrrigationModelType_ (this),
        RoofIrrigation_IrrigationRateSchedName_ (this),
        RoofIrrigation_IrrigationMaxSaturatThreshold_ (this),
        T24AboveGradeStoryCountAltered_ (this),
        T24AboveGradeStoryCountExists_ (this),
        T24AboveGradeStoryCountNew_ (this),
        T24CoilCoolingCapacity_ (this),
        T24CoilHeatingCapacity_ (this),
        T24FunctionClassificationMethod_ (this),
        T24HighRiseResidentialLivingUnitCount_ (this),
        T24LivingUnitCountAltered_ (this),
        T24LivingUnitCountExisting_ (this),
        T24LivingUnitCountNew_ (this),
        T24PlantCoolingCapacity_ (this),
        T24PlantHeatingCapacity_ (this),
        T24RelocatablePublicSchoolBuilding_ (this),
        T24TotalStoryCountAltered_ (this),
        T24TotalStoryCountExisting_ (this),
        T24TotalStoryCountNew_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBuilding_Building::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimBuilding::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimBuilding_Name
          //
          if (n.name () == "SimBuilding_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimBuilding_Name_type > r (
              SimBuilding_Name_traits::create (i, f, this));

            if (!this->SimBuilding_Name_)
            {
              this->SimBuilding_Name_.set (r);
              continue;
            }
          }

          // SimBuilding_NorthAxis
          //
          if (n.name () == "SimBuilding_NorthAxis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuilding_NorthAxis_)
            {
              this->SimBuilding_NorthAxis_.set (SimBuilding_NorthAxis_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuilding_Terrain
          //
          if (n.name () == "SimBuilding_Terrain" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimBuilding_Terrain_type > r (
              SimBuilding_Terrain_traits::create (i, f, this));

            if (!this->SimBuilding_Terrain_)
            {
              this->SimBuilding_Terrain_.set (r);
              continue;
            }
          }

          // SimBuilding_LoadsConvergTolVal
          //
          if (n.name () == "SimBuilding_LoadsConvergTolVal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuilding_LoadsConvergTolVal_)
            {
              this->SimBuilding_LoadsConvergTolVal_.set (SimBuilding_LoadsConvergTolVal_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuilding_TempConvergTolVal
          //
          if (n.name () == "SimBuilding_TempConvergTolVal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuilding_TempConvergTolVal_)
            {
              this->SimBuilding_TempConvergTolVal_.set (SimBuilding_TempConvergTolVal_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuilding_SolarDist
          //
          if (n.name () == "SimBuilding_SolarDist" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimBuilding_SolarDist_type > r (
              SimBuilding_SolarDist_traits::create (i, f, this));

            if (!this->SimBuilding_SolarDist_)
            {
              this->SimBuilding_SolarDist_.set (r);
              continue;
            }
          }

          // SimBuilding_MaxNumWarmupDays
          //
          if (n.name () == "SimBuilding_MaxNumWarmupDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuilding_MaxNumWarmupDays_)
            {
              this->SimBuilding_MaxNumWarmupDays_.set (SimBuilding_MaxNumWarmupDays_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuilding_MinNumberWarmupDays
          //
          if (n.name () == "SimBuilding_MinNumberWarmupDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuilding_MinNumberWarmupDays_)
            {
              this->SimBuilding_MinNumberWarmupDays_.set (SimBuilding_MinNumberWarmupDays_traits::create (i, f, this));
              continue;
            }
          }

          // RoofIrrigation_IrrigationModelType
          //
          if (n.name () == "RoofIrrigation_IrrigationModelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< RoofIrrigation_IrrigationModelType_type > r (
              RoofIrrigation_IrrigationModelType_traits::create (i, f, this));

            if (!this->RoofIrrigation_IrrigationModelType_)
            {
              this->RoofIrrigation_IrrigationModelType_.set (r);
              continue;
            }
          }

          // RoofIrrigation_IrrigationRateSchedName
          //
          if (n.name () == "RoofIrrigation_IrrigationRateSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< RoofIrrigation_IrrigationRateSchedName_type > r (
              RoofIrrigation_IrrigationRateSchedName_traits::create (i, f, this));

            if (!this->RoofIrrigation_IrrigationRateSchedName_)
            {
              this->RoofIrrigation_IrrigationRateSchedName_.set (r);
              continue;
            }
          }

          // RoofIrrigation_IrrigationMaxSaturatThreshold
          //
          if (n.name () == "RoofIrrigation_IrrigationMaxSaturatThreshold" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->RoofIrrigation_IrrigationMaxSaturatThreshold_)
            {
              this->RoofIrrigation_IrrigationMaxSaturatThreshold_.set (RoofIrrigation_IrrigationMaxSaturatThreshold_traits::create (i, f, this));
              continue;
            }
          }

          // T24AboveGradeStoryCountAltered
          //
          if (n.name () == "T24AboveGradeStoryCountAltered" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AboveGradeStoryCountAltered_)
            {
              this->T24AboveGradeStoryCountAltered_.set (T24AboveGradeStoryCountAltered_traits::create (i, f, this));
              continue;
            }
          }

          // T24AboveGradeStoryCountExists
          //
          if (n.name () == "T24AboveGradeStoryCountExists" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AboveGradeStoryCountExists_)
            {
              this->T24AboveGradeStoryCountExists_.set (T24AboveGradeStoryCountExists_traits::create (i, f, this));
              continue;
            }
          }

          // T24AboveGradeStoryCountNew
          //
          if (n.name () == "T24AboveGradeStoryCountNew" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AboveGradeStoryCountNew_)
            {
              this->T24AboveGradeStoryCountNew_.set (T24AboveGradeStoryCountNew_traits::create (i, f, this));
              continue;
            }
          }

          // T24CoilCoolingCapacity
          //
          if (n.name () == "T24CoilCoolingCapacity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CoilCoolingCapacity_)
            {
              this->T24CoilCoolingCapacity_.set (T24CoilCoolingCapacity_traits::create (i, f, this));
              continue;
            }
          }

          // T24CoilHeatingCapacity
          //
          if (n.name () == "T24CoilHeatingCapacity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CoilHeatingCapacity_)
            {
              this->T24CoilHeatingCapacity_.set (T24CoilHeatingCapacity_traits::create (i, f, this));
              continue;
            }
          }

          // T24FunctionClassificationMethod
          //
          if (n.name () == "T24FunctionClassificationMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24FunctionClassificationMethod_type > r (
              T24FunctionClassificationMethod_traits::create (i, f, this));

            if (!this->T24FunctionClassificationMethod_)
            {
              this->T24FunctionClassificationMethod_.set (r);
              continue;
            }
          }

          // T24HighRiseResidentialLivingUnitCount
          //
          if (n.name () == "T24HighRiseResidentialLivingUnitCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24HighRiseResidentialLivingUnitCount_)
            {
              this->T24HighRiseResidentialLivingUnitCount_.set (T24HighRiseResidentialLivingUnitCount_traits::create (i, f, this));
              continue;
            }
          }

          // T24LivingUnitCountAltered
          //
          if (n.name () == "T24LivingUnitCountAltered" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24LivingUnitCountAltered_)
            {
              this->T24LivingUnitCountAltered_.set (T24LivingUnitCountAltered_traits::create (i, f, this));
              continue;
            }
          }

          // T24LivingUnitCountExisting
          //
          if (n.name () == "T24LivingUnitCountExisting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24LivingUnitCountExisting_)
            {
              this->T24LivingUnitCountExisting_.set (T24LivingUnitCountExisting_traits::create (i, f, this));
              continue;
            }
          }

          // T24LivingUnitCountNew
          //
          if (n.name () == "T24LivingUnitCountNew" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24LivingUnitCountNew_)
            {
              this->T24LivingUnitCountNew_.set (T24LivingUnitCountNew_traits::create (i, f, this));
              continue;
            }
          }

          // T24PlantCoolingCapacity
          //
          if (n.name () == "T24PlantCoolingCapacity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24PlantCoolingCapacity_)
            {
              this->T24PlantCoolingCapacity_.set (T24PlantCoolingCapacity_traits::create (i, f, this));
              continue;
            }
          }

          // T24PlantHeatingCapacity
          //
          if (n.name () == "T24PlantHeatingCapacity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24PlantHeatingCapacity_)
            {
              this->T24PlantHeatingCapacity_.set (T24PlantHeatingCapacity_traits::create (i, f, this));
              continue;
            }
          }

          // T24RelocatablePublicSchoolBuilding
          //
          if (n.name () == "T24RelocatablePublicSchoolBuilding" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24RelocatablePublicSchoolBuilding_)
            {
              this->T24RelocatablePublicSchoolBuilding_.set (T24RelocatablePublicSchoolBuilding_traits::create (i, f, this));
              continue;
            }
          }

          // T24TotalStoryCountAltered
          //
          if (n.name () == "T24TotalStoryCountAltered" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24TotalStoryCountAltered_)
            {
              this->T24TotalStoryCountAltered_.set (T24TotalStoryCountAltered_traits::create (i, f, this));
              continue;
            }
          }

          // T24TotalStoryCountExisting
          //
          if (n.name () == "T24TotalStoryCountExisting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24TotalStoryCountExisting_)
            {
              this->T24TotalStoryCountExisting_.set (T24TotalStoryCountExisting_traits::create (i, f, this));
              continue;
            }
          }

          // T24TotalStoryCountNew
          //
          if (n.name () == "T24TotalStoryCountNew" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24TotalStoryCountNew_)
            {
              this->T24TotalStoryCountNew_.set (T24TotalStoryCountNew_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimBuilding_Building* SimBuilding_Building::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBuilding_Building (*this, f, c);
      }

      SimBuilding_Building& SimBuilding_Building::
      operator= (const SimBuilding_Building& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimBuilding& > (*this) = x;
          this->SimBuilding_Name_ = x.SimBuilding_Name_;
          this->SimBuilding_NorthAxis_ = x.SimBuilding_NorthAxis_;
          this->SimBuilding_Terrain_ = x.SimBuilding_Terrain_;
          this->SimBuilding_LoadsConvergTolVal_ = x.SimBuilding_LoadsConvergTolVal_;
          this->SimBuilding_TempConvergTolVal_ = x.SimBuilding_TempConvergTolVal_;
          this->SimBuilding_SolarDist_ = x.SimBuilding_SolarDist_;
          this->SimBuilding_MaxNumWarmupDays_ = x.SimBuilding_MaxNumWarmupDays_;
          this->SimBuilding_MinNumberWarmupDays_ = x.SimBuilding_MinNumberWarmupDays_;
          this->RoofIrrigation_IrrigationModelType_ = x.RoofIrrigation_IrrigationModelType_;
          this->RoofIrrigation_IrrigationRateSchedName_ = x.RoofIrrigation_IrrigationRateSchedName_;
          this->RoofIrrigation_IrrigationMaxSaturatThreshold_ = x.RoofIrrigation_IrrigationMaxSaturatThreshold_;
          this->T24AboveGradeStoryCountAltered_ = x.T24AboveGradeStoryCountAltered_;
          this->T24AboveGradeStoryCountExists_ = x.T24AboveGradeStoryCountExists_;
          this->T24AboveGradeStoryCountNew_ = x.T24AboveGradeStoryCountNew_;
          this->T24CoilCoolingCapacity_ = x.T24CoilCoolingCapacity_;
          this->T24CoilHeatingCapacity_ = x.T24CoilHeatingCapacity_;
          this->T24FunctionClassificationMethod_ = x.T24FunctionClassificationMethod_;
          this->T24HighRiseResidentialLivingUnitCount_ = x.T24HighRiseResidentialLivingUnitCount_;
          this->T24LivingUnitCountAltered_ = x.T24LivingUnitCountAltered_;
          this->T24LivingUnitCountExisting_ = x.T24LivingUnitCountExisting_;
          this->T24LivingUnitCountNew_ = x.T24LivingUnitCountNew_;
          this->T24PlantCoolingCapacity_ = x.T24PlantCoolingCapacity_;
          this->T24PlantHeatingCapacity_ = x.T24PlantHeatingCapacity_;
          this->T24RelocatablePublicSchoolBuilding_ = x.T24RelocatablePublicSchoolBuilding_;
          this->T24TotalStoryCountAltered_ = x.T24TotalStoryCountAltered_;
          this->T24TotalStoryCountExisting_ = x.T24TotalStoryCountExisting_;
          this->T24TotalStoryCountNew_ = x.T24TotalStoryCountNew_;
        }

        return *this;
      }

      SimBuilding_Building::
      ~SimBuilding_Building ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

