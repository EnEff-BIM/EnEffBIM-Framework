// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimCost_UtilityCost_Qualify.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCost_UtilityCost_Qualify
      // 

      const SimCost_UtilityCost_Qualify::SimCost_Name_optional& SimCost_UtilityCost_Qualify::
      SimCost_Name () const
      {
        return this->SimCost_Name_;
      }

      SimCost_UtilityCost_Qualify::SimCost_Name_optional& SimCost_UtilityCost_Qualify::
      SimCost_Name ()
      {
        return this->SimCost_Name_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_Name (const SimCost_Name_type& x)
      {
        this->SimCost_Name_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_Name (const SimCost_Name_optional& x)
      {
        this->SimCost_Name_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_Name (::std::auto_ptr< SimCost_Name_type > x)
      {
        this->SimCost_Name_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_TariffName_optional& SimCost_UtilityCost_Qualify::
      SimCost_TariffName () const
      {
        return this->SimCost_TariffName_;
      }

      SimCost_UtilityCost_Qualify::SimCost_TariffName_optional& SimCost_UtilityCost_Qualify::
      SimCost_TariffName ()
      {
        return this->SimCost_TariffName_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_TariffName (const SimCost_TariffName_type& x)
      {
        this->SimCost_TariffName_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_TariffName (const SimCost_TariffName_optional& x)
      {
        this->SimCost_TariffName_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_TariffName (::std::auto_ptr< SimCost_TariffName_type > x)
      {
        this->SimCost_TariffName_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_VarName_optional& SimCost_UtilityCost_Qualify::
      SimCost_VarName () const
      {
        return this->SimCost_VarName_;
      }

      SimCost_UtilityCost_Qualify::SimCost_VarName_optional& SimCost_UtilityCost_Qualify::
      SimCost_VarName ()
      {
        return this->SimCost_VarName_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_VarName (const SimCost_VarName_type& x)
      {
        this->SimCost_VarName_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_VarName (const SimCost_VarName_optional& x)
      {
        this->SimCost_VarName_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_VarName (::std::auto_ptr< SimCost_VarName_type > x)
      {
        this->SimCost_VarName_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_QualifyType_optional& SimCost_UtilityCost_Qualify::
      SimCost_QualifyType () const
      {
        return this->SimCost_QualifyType_;
      }

      SimCost_UtilityCost_Qualify::SimCost_QualifyType_optional& SimCost_UtilityCost_Qualify::
      SimCost_QualifyType ()
      {
        return this->SimCost_QualifyType_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_QualifyType (const SimCost_QualifyType_type& x)
      {
        this->SimCost_QualifyType_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_QualifyType (const SimCost_QualifyType_optional& x)
      {
        this->SimCost_QualifyType_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_QualifyType (::std::auto_ptr< SimCost_QualifyType_type > x)
      {
        this->SimCost_QualifyType_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_ThreshValOrVarName_optional& SimCost_UtilityCost_Qualify::
      SimCost_ThreshValOrVarName () const
      {
        return this->SimCost_ThreshValOrVarName_;
      }

      SimCost_UtilityCost_Qualify::SimCost_ThreshValOrVarName_optional& SimCost_UtilityCost_Qualify::
      SimCost_ThreshValOrVarName ()
      {
        return this->SimCost_ThreshValOrVarName_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_ThreshValOrVarName (const SimCost_ThreshValOrVarName_type& x)
      {
        this->SimCost_ThreshValOrVarName_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_ThreshValOrVarName (const SimCost_ThreshValOrVarName_optional& x)
      {
        this->SimCost_ThreshValOrVarName_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_ThreshValOrVarName (::std::auto_ptr< SimCost_ThreshValOrVarName_type > x)
      {
        this->SimCost_ThreshValOrVarName_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_Season_optional& SimCost_UtilityCost_Qualify::
      SimCost_Season () const
      {
        return this->SimCost_Season_;
      }

      SimCost_UtilityCost_Qualify::SimCost_Season_optional& SimCost_UtilityCost_Qualify::
      SimCost_Season ()
      {
        return this->SimCost_Season_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_Season (const SimCost_Season_type& x)
      {
        this->SimCost_Season_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_Season (const SimCost_Season_optional& x)
      {
        this->SimCost_Season_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_Season (::std::auto_ptr< SimCost_Season_type > x)
      {
        this->SimCost_Season_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_ThreshTest_optional& SimCost_UtilityCost_Qualify::
      SimCost_ThreshTest () const
      {
        return this->SimCost_ThreshTest_;
      }

      SimCost_UtilityCost_Qualify::SimCost_ThreshTest_optional& SimCost_UtilityCost_Qualify::
      SimCost_ThreshTest ()
      {
        return this->SimCost_ThreshTest_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_ThreshTest (const SimCost_ThreshTest_type& x)
      {
        this->SimCost_ThreshTest_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_ThreshTest (const SimCost_ThreshTest_optional& x)
      {
        this->SimCost_ThreshTest_ = x;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_ThreshTest (::std::auto_ptr< SimCost_ThreshTest_type > x)
      {
        this->SimCost_ThreshTest_.set (x);
      }

      const SimCost_UtilityCost_Qualify::SimCost_NumMonths_optional& SimCost_UtilityCost_Qualify::
      SimCost_NumMonths () const
      {
        return this->SimCost_NumMonths_;
      }

      SimCost_UtilityCost_Qualify::SimCost_NumMonths_optional& SimCost_UtilityCost_Qualify::
      SimCost_NumMonths ()
      {
        return this->SimCost_NumMonths_;
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_NumMonths (const SimCost_NumMonths_type& x)
      {
        this->SimCost_NumMonths_.set (x);
      }

      void SimCost_UtilityCost_Qualify::
      SimCost_NumMonths (const SimCost_NumMonths_optional& x)
      {
        this->SimCost_NumMonths_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCost_UtilityCost_Qualify
      //

      SimCost_UtilityCost_Qualify::
      SimCost_UtilityCost_Qualify ()
      : ::schema::simxml::ResourcesGeneral::SimCost_UtilityCost (),
        SimCost_Name_ (this),
        SimCost_TariffName_ (this),
        SimCost_VarName_ (this),
        SimCost_QualifyType_ (this),
        SimCost_ThreshValOrVarName_ (this),
        SimCost_Season_ (this),
        SimCost_ThreshTest_ (this),
        SimCost_NumMonths_ (this)
      {
      }

      SimCost_UtilityCost_Qualify::
      SimCost_UtilityCost_Qualify (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimCost_UtilityCost (RefId),
        SimCost_Name_ (this),
        SimCost_TariffName_ (this),
        SimCost_VarName_ (this),
        SimCost_QualifyType_ (this),
        SimCost_ThreshValOrVarName_ (this),
        SimCost_Season_ (this),
        SimCost_ThreshTest_ (this),
        SimCost_NumMonths_ (this)
      {
      }

      SimCost_UtilityCost_Qualify::
      SimCost_UtilityCost_Qualify (const SimCost_UtilityCost_Qualify& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimCost_UtilityCost (x, f, c),
        SimCost_Name_ (x.SimCost_Name_, f, this),
        SimCost_TariffName_ (x.SimCost_TariffName_, f, this),
        SimCost_VarName_ (x.SimCost_VarName_, f, this),
        SimCost_QualifyType_ (x.SimCost_QualifyType_, f, this),
        SimCost_ThreshValOrVarName_ (x.SimCost_ThreshValOrVarName_, f, this),
        SimCost_Season_ (x.SimCost_Season_, f, this),
        SimCost_ThreshTest_ (x.SimCost_ThreshTest_, f, this),
        SimCost_NumMonths_ (x.SimCost_NumMonths_, f, this)
      {
      }

      SimCost_UtilityCost_Qualify::
      SimCost_UtilityCost_Qualify (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimCost_UtilityCost (e, f | ::xml_schema::flags::base, c),
        SimCost_Name_ (this),
        SimCost_TariffName_ (this),
        SimCost_VarName_ (this),
        SimCost_QualifyType_ (this),
        SimCost_ThreshValOrVarName_ (this),
        SimCost_Season_ (this),
        SimCost_ThreshTest_ (this),
        SimCost_NumMonths_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimCost_UtilityCost_Qualify::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimCost_UtilityCost::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCost_Name
          //
          if (n.name () == "SimCost_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_Name_type > r (
              SimCost_Name_traits::create (i, f, this));

            if (!this->SimCost_Name_)
            {
              this->SimCost_Name_.set (r);
              continue;
            }
          }

          // SimCost_TariffName
          //
          if (n.name () == "SimCost_TariffName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_TariffName_type > r (
              SimCost_TariffName_traits::create (i, f, this));

            if (!this->SimCost_TariffName_)
            {
              this->SimCost_TariffName_.set (r);
              continue;
            }
          }

          // SimCost_VarName
          //
          if (n.name () == "SimCost_VarName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_VarName_type > r (
              SimCost_VarName_traits::create (i, f, this));

            if (!this->SimCost_VarName_)
            {
              this->SimCost_VarName_.set (r);
              continue;
            }
          }

          // SimCost_QualifyType
          //
          if (n.name () == "SimCost_QualifyType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_QualifyType_type > r (
              SimCost_QualifyType_traits::create (i, f, this));

            if (!this->SimCost_QualifyType_)
            {
              this->SimCost_QualifyType_.set (r);
              continue;
            }
          }

          // SimCost_ThreshValOrVarName
          //
          if (n.name () == "SimCost_ThreshValOrVarName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_ThreshValOrVarName_type > r (
              SimCost_ThreshValOrVarName_traits::create (i, f, this));

            if (!this->SimCost_ThreshValOrVarName_)
            {
              this->SimCost_ThreshValOrVarName_.set (r);
              continue;
            }
          }

          // SimCost_Season
          //
          if (n.name () == "SimCost_Season" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_Season_type > r (
              SimCost_Season_traits::create (i, f, this));

            if (!this->SimCost_Season_)
            {
              this->SimCost_Season_.set (r);
              continue;
            }
          }

          // SimCost_ThreshTest
          //
          if (n.name () == "SimCost_ThreshTest" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_ThreshTest_type > r (
              SimCost_ThreshTest_traits::create (i, f, this));

            if (!this->SimCost_ThreshTest_)
            {
              this->SimCost_ThreshTest_.set (r);
              continue;
            }
          }

          // SimCost_NumMonths
          //
          if (n.name () == "SimCost_NumMonths" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_NumMonths_)
            {
              this->SimCost_NumMonths_.set (SimCost_NumMonths_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimCost_UtilityCost_Qualify* SimCost_UtilityCost_Qualify::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimCost_UtilityCost_Qualify (*this, f, c);
      }

      SimCost_UtilityCost_Qualify& SimCost_UtilityCost_Qualify::
      operator= (const SimCost_UtilityCost_Qualify& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimCost_UtilityCost& > (*this) = x;
          this->SimCost_Name_ = x.SimCost_Name_;
          this->SimCost_TariffName_ = x.SimCost_TariffName_;
          this->SimCost_VarName_ = x.SimCost_VarName_;
          this->SimCost_QualifyType_ = x.SimCost_QualifyType_;
          this->SimCost_ThreshValOrVarName_ = x.SimCost_ThreshValOrVarName_;
          this->SimCost_Season_ = x.SimCost_Season_;
          this->SimCost_ThreshTest_ = x.SimCost_ThreshTest_;
          this->SimCost_NumMonths_ = x.SimCost_NumMonths_;
        }

        return *this;
      }

      SimCost_UtilityCost_Qualify::
      ~SimCost_UtilityCost_Qualify ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

