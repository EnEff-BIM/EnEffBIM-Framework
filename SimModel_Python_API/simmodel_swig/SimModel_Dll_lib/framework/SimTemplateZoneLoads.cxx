// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateZoneLoads.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateZoneLoads
      // 

      const SimTemplateZoneLoads::TemplateElectricalEquipment_optional& SimTemplateZoneLoads::
      TemplateElectricalEquipment () const
      {
        return this->TemplateElectricalEquipment_;
      }

      SimTemplateZoneLoads::TemplateElectricalEquipment_optional& SimTemplateZoneLoads::
      TemplateElectricalEquipment ()
      {
        return this->TemplateElectricalEquipment_;
      }

      void SimTemplateZoneLoads::
      TemplateElectricalEquipment (const TemplateElectricalEquipment_type& x)
      {
        this->TemplateElectricalEquipment_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateElectricalEquipment (const TemplateElectricalEquipment_optional& x)
      {
        this->TemplateElectricalEquipment_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateElectricalEquipment (::std::auto_ptr< TemplateElectricalEquipment_type > x)
      {
        this->TemplateElectricalEquipment_.set (x);
      }

      const SimTemplateZoneLoads::TemplateElecEqmt_Elevators_optional& SimTemplateZoneLoads::
      TemplateElecEqmt_Elevators () const
      {
        return this->TemplateElecEqmt_Elevators_;
      }

      SimTemplateZoneLoads::TemplateElecEqmt_Elevators_optional& SimTemplateZoneLoads::
      TemplateElecEqmt_Elevators ()
      {
        return this->TemplateElecEqmt_Elevators_;
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Elevators (const TemplateElecEqmt_Elevators_type& x)
      {
        this->TemplateElecEqmt_Elevators_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Elevators (const TemplateElecEqmt_Elevators_optional& x)
      {
        this->TemplateElecEqmt_Elevators_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Elevators (::std::auto_ptr< TemplateElecEqmt_Elevators_type > x)
      {
        this->TemplateElecEqmt_Elevators_.set (x);
      }

      const SimTemplateZoneLoads::TemplateElecEqmt_Escalators_optional& SimTemplateZoneLoads::
      TemplateElecEqmt_Escalators () const
      {
        return this->TemplateElecEqmt_Escalators_;
      }

      SimTemplateZoneLoads::TemplateElecEqmt_Escalators_optional& SimTemplateZoneLoads::
      TemplateElecEqmt_Escalators ()
      {
        return this->TemplateElecEqmt_Escalators_;
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Escalators (const TemplateElecEqmt_Escalators_type& x)
      {
        this->TemplateElecEqmt_Escalators_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Escalators (const TemplateElecEqmt_Escalators_optional& x)
      {
        this->TemplateElecEqmt_Escalators_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Escalators (::std::auto_ptr< TemplateElecEqmt_Escalators_type > x)
      {
        this->TemplateElecEqmt_Escalators_.set (x);
      }

      const SimTemplateZoneLoads::TemplateElecEqmt_Process_optional& SimTemplateZoneLoads::
      TemplateElecEqmt_Process () const
      {
        return this->TemplateElecEqmt_Process_;
      }

      SimTemplateZoneLoads::TemplateElecEqmt_Process_optional& SimTemplateZoneLoads::
      TemplateElecEqmt_Process ()
      {
        return this->TemplateElecEqmt_Process_;
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Process (const TemplateElecEqmt_Process_type& x)
      {
        this->TemplateElecEqmt_Process_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Process (const TemplateElecEqmt_Process_optional& x)
      {
        this->TemplateElecEqmt_Process_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateElecEqmt_Process (::std::auto_ptr< TemplateElecEqmt_Process_type > x)
      {
        this->TemplateElecEqmt_Process_.set (x);
      }

      const SimTemplateZoneLoads::TemplateGasEquipment_optional& SimTemplateZoneLoads::
      TemplateGasEquipment () const
      {
        return this->TemplateGasEquipment_;
      }

      SimTemplateZoneLoads::TemplateGasEquipment_optional& SimTemplateZoneLoads::
      TemplateGasEquipment ()
      {
        return this->TemplateGasEquipment_;
      }

      void SimTemplateZoneLoads::
      TemplateGasEquipment (const TemplateGasEquipment_type& x)
      {
        this->TemplateGasEquipment_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateGasEquipment (const TemplateGasEquipment_optional& x)
      {
        this->TemplateGasEquipment_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateGasEquipment (::std::auto_ptr< TemplateGasEquipment_type > x)
      {
        this->TemplateGasEquipment_.set (x);
      }

      const SimTemplateZoneLoads::TemplateGasEqmt_Process_optional& SimTemplateZoneLoads::
      TemplateGasEqmt_Process () const
      {
        return this->TemplateGasEqmt_Process_;
      }

      SimTemplateZoneLoads::TemplateGasEqmt_Process_optional& SimTemplateZoneLoads::
      TemplateGasEqmt_Process ()
      {
        return this->TemplateGasEqmt_Process_;
      }

      void SimTemplateZoneLoads::
      TemplateGasEqmt_Process (const TemplateGasEqmt_Process_type& x)
      {
        this->TemplateGasEqmt_Process_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateGasEqmt_Process (const TemplateGasEqmt_Process_optional& x)
      {
        this->TemplateGasEqmt_Process_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateGasEqmt_Process (::std::auto_ptr< TemplateGasEqmt_Process_type > x)
      {
        this->TemplateGasEqmt_Process_.set (x);
      }

      const SimTemplateZoneLoads::TemplateHotWaterEquipment_optional& SimTemplateZoneLoads::
      TemplateHotWaterEquipment () const
      {
        return this->TemplateHotWaterEquipment_;
      }

      SimTemplateZoneLoads::TemplateHotWaterEquipment_optional& SimTemplateZoneLoads::
      TemplateHotWaterEquipment ()
      {
        return this->TemplateHotWaterEquipment_;
      }

      void SimTemplateZoneLoads::
      TemplateHotWaterEquipment (const TemplateHotWaterEquipment_type& x)
      {
        this->TemplateHotWaterEquipment_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateHotWaterEquipment (const TemplateHotWaterEquipment_optional& x)
      {
        this->TemplateHotWaterEquipment_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateHotWaterEquipment (::std::auto_ptr< TemplateHotWaterEquipment_type > x)
      {
        this->TemplateHotWaterEquipment_.set (x);
      }

      const SimTemplateZoneLoads::TemplateSteamEquipment_optional& SimTemplateZoneLoads::
      TemplateSteamEquipment () const
      {
        return this->TemplateSteamEquipment_;
      }

      SimTemplateZoneLoads::TemplateSteamEquipment_optional& SimTemplateZoneLoads::
      TemplateSteamEquipment ()
      {
        return this->TemplateSteamEquipment_;
      }

      void SimTemplateZoneLoads::
      TemplateSteamEquipment (const TemplateSteamEquipment_type& x)
      {
        this->TemplateSteamEquipment_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateSteamEquipment (const TemplateSteamEquipment_optional& x)
      {
        this->TemplateSteamEquipment_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateSteamEquipment (::std::auto_ptr< TemplateSteamEquipment_type > x)
      {
        this->TemplateSteamEquipment_.set (x);
      }

      const SimTemplateZoneLoads::TemplateOtherEquipment_optional& SimTemplateZoneLoads::
      TemplateOtherEquipment () const
      {
        return this->TemplateOtherEquipment_;
      }

      SimTemplateZoneLoads::TemplateOtherEquipment_optional& SimTemplateZoneLoads::
      TemplateOtherEquipment ()
      {
        return this->TemplateOtherEquipment_;
      }

      void SimTemplateZoneLoads::
      TemplateOtherEquipment (const TemplateOtherEquipment_type& x)
      {
        this->TemplateOtherEquipment_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateOtherEquipment (const TemplateOtherEquipment_optional& x)
      {
        this->TemplateOtherEquipment_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateOtherEquipment (::std::auto_ptr< TemplateOtherEquipment_type > x)
      {
        this->TemplateOtherEquipment_.set (x);
      }

      const SimTemplateZoneLoads::TemplatePeopleLoads_optional& SimTemplateZoneLoads::
      TemplatePeopleLoads () const
      {
        return this->TemplatePeopleLoads_;
      }

      SimTemplateZoneLoads::TemplatePeopleLoads_optional& SimTemplateZoneLoads::
      TemplatePeopleLoads ()
      {
        return this->TemplatePeopleLoads_;
      }

      void SimTemplateZoneLoads::
      TemplatePeopleLoads (const TemplatePeopleLoads_type& x)
      {
        this->TemplatePeopleLoads_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplatePeopleLoads (const TemplatePeopleLoads_optional& x)
      {
        this->TemplatePeopleLoads_ = x;
      }

      void SimTemplateZoneLoads::
      TemplatePeopleLoads (::std::auto_ptr< TemplatePeopleLoads_type > x)
      {
        this->TemplatePeopleLoads_.set (x);
      }

      const SimTemplateZoneLoads::TemplateLightingLoads_optional& SimTemplateZoneLoads::
      TemplateLightingLoads () const
      {
        return this->TemplateLightingLoads_;
      }

      SimTemplateZoneLoads::TemplateLightingLoads_optional& SimTemplateZoneLoads::
      TemplateLightingLoads ()
      {
        return this->TemplateLightingLoads_;
      }

      void SimTemplateZoneLoads::
      TemplateLightingLoads (const TemplateLightingLoads_type& x)
      {
        this->TemplateLightingLoads_.set (x);
      }

      void SimTemplateZoneLoads::
      TemplateLightingLoads (const TemplateLightingLoads_optional& x)
      {
        this->TemplateLightingLoads_ = x;
      }

      void SimTemplateZoneLoads::
      TemplateLightingLoads (::std::auto_ptr< TemplateLightingLoads_type > x)
      {
        this->TemplateLightingLoads_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateZoneLoads
      //

      SimTemplateZoneLoads::
      SimTemplateZoneLoads ()
      : ::schema::simxml::SimModelCore::SimTemplate (),
        TemplateElectricalEquipment_ (this),
        TemplateElecEqmt_Elevators_ (this),
        TemplateElecEqmt_Escalators_ (this),
        TemplateElecEqmt_Process_ (this),
        TemplateGasEquipment_ (this),
        TemplateGasEqmt_Process_ (this),
        TemplateHotWaterEquipment_ (this),
        TemplateSteamEquipment_ (this),
        TemplateOtherEquipment_ (this),
        TemplatePeopleLoads_ (this),
        TemplateLightingLoads_ (this)
      {
      }

      SimTemplateZoneLoads::
      SimTemplateZoneLoads (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimTemplate (RefId),
        TemplateElectricalEquipment_ (this),
        TemplateElecEqmt_Elevators_ (this),
        TemplateElecEqmt_Escalators_ (this),
        TemplateElecEqmt_Process_ (this),
        TemplateGasEquipment_ (this),
        TemplateGasEqmt_Process_ (this),
        TemplateHotWaterEquipment_ (this),
        TemplateSteamEquipment_ (this),
        TemplateOtherEquipment_ (this),
        TemplatePeopleLoads_ (this),
        TemplateLightingLoads_ (this)
      {
      }

      SimTemplateZoneLoads::
      SimTemplateZoneLoads (const SimTemplateZoneLoads& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (x, f, c),
        TemplateElectricalEquipment_ (x.TemplateElectricalEquipment_, f, this),
        TemplateElecEqmt_Elevators_ (x.TemplateElecEqmt_Elevators_, f, this),
        TemplateElecEqmt_Escalators_ (x.TemplateElecEqmt_Escalators_, f, this),
        TemplateElecEqmt_Process_ (x.TemplateElecEqmt_Process_, f, this),
        TemplateGasEquipment_ (x.TemplateGasEquipment_, f, this),
        TemplateGasEqmt_Process_ (x.TemplateGasEqmt_Process_, f, this),
        TemplateHotWaterEquipment_ (x.TemplateHotWaterEquipment_, f, this),
        TemplateSteamEquipment_ (x.TemplateSteamEquipment_, f, this),
        TemplateOtherEquipment_ (x.TemplateOtherEquipment_, f, this),
        TemplatePeopleLoads_ (x.TemplatePeopleLoads_, f, this),
        TemplateLightingLoads_ (x.TemplateLightingLoads_, f, this)
      {
      }

      SimTemplateZoneLoads::
      SimTemplateZoneLoads (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateElectricalEquipment_ (this),
        TemplateElecEqmt_Elevators_ (this),
        TemplateElecEqmt_Escalators_ (this),
        TemplateElecEqmt_Process_ (this),
        TemplateGasEquipment_ (this),
        TemplateGasEqmt_Process_ (this),
        TemplateHotWaterEquipment_ (this),
        TemplateSteamEquipment_ (this),
        TemplateOtherEquipment_ (this),
        TemplatePeopleLoads_ (this),
        TemplateLightingLoads_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateZoneLoads::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateElectricalEquipment
          //
          if (n.name () == "TemplateElectricalEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateElectricalEquipment_type > r (
              TemplateElectricalEquipment_traits::create (i, f, this));

            if (!this->TemplateElectricalEquipment_)
            {
              this->TemplateElectricalEquipment_.set (r);
              continue;
            }
          }

          // TemplateElecEqmt_Elevators
          //
          if (n.name () == "TemplateElecEqmt_Elevators" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateElecEqmt_Elevators_type > r (
              TemplateElecEqmt_Elevators_traits::create (i, f, this));

            if (!this->TemplateElecEqmt_Elevators_)
            {
              this->TemplateElecEqmt_Elevators_.set (r);
              continue;
            }
          }

          // TemplateElecEqmt_Escalators
          //
          if (n.name () == "TemplateElecEqmt_Escalators" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateElecEqmt_Escalators_type > r (
              TemplateElecEqmt_Escalators_traits::create (i, f, this));

            if (!this->TemplateElecEqmt_Escalators_)
            {
              this->TemplateElecEqmt_Escalators_.set (r);
              continue;
            }
          }

          // TemplateElecEqmt_Process
          //
          if (n.name () == "TemplateElecEqmt_Process" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateElecEqmt_Process_type > r (
              TemplateElecEqmt_Process_traits::create (i, f, this));

            if (!this->TemplateElecEqmt_Process_)
            {
              this->TemplateElecEqmt_Process_.set (r);
              continue;
            }
          }

          // TemplateGasEquipment
          //
          if (n.name () == "TemplateGasEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateGasEquipment_type > r (
              TemplateGasEquipment_traits::create (i, f, this));

            if (!this->TemplateGasEquipment_)
            {
              this->TemplateGasEquipment_.set (r);
              continue;
            }
          }

          // TemplateGasEqmt_Process
          //
          if (n.name () == "TemplateGasEqmt_Process" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateGasEqmt_Process_type > r (
              TemplateGasEqmt_Process_traits::create (i, f, this));

            if (!this->TemplateGasEqmt_Process_)
            {
              this->TemplateGasEqmt_Process_.set (r);
              continue;
            }
          }

          // TemplateHotWaterEquipment
          //
          if (n.name () == "TemplateHotWaterEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateHotWaterEquipment_type > r (
              TemplateHotWaterEquipment_traits::create (i, f, this));

            if (!this->TemplateHotWaterEquipment_)
            {
              this->TemplateHotWaterEquipment_.set (r);
              continue;
            }
          }

          // TemplateSteamEquipment
          //
          if (n.name () == "TemplateSteamEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSteamEquipment_type > r (
              TemplateSteamEquipment_traits::create (i, f, this));

            if (!this->TemplateSteamEquipment_)
            {
              this->TemplateSteamEquipment_.set (r);
              continue;
            }
          }

          // TemplateOtherEquipment
          //
          if (n.name () == "TemplateOtherEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateOtherEquipment_type > r (
              TemplateOtherEquipment_traits::create (i, f, this));

            if (!this->TemplateOtherEquipment_)
            {
              this->TemplateOtherEquipment_.set (r);
              continue;
            }
          }

          // TemplatePeopleLoads
          //
          if (n.name () == "TemplatePeopleLoads" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplatePeopleLoads_type > r (
              TemplatePeopleLoads_traits::create (i, f, this));

            if (!this->TemplatePeopleLoads_)
            {
              this->TemplatePeopleLoads_.set (r);
              continue;
            }
          }

          // TemplateLightingLoads
          //
          if (n.name () == "TemplateLightingLoads" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateLightingLoads_type > r (
              TemplateLightingLoads_traits::create (i, f, this));

            if (!this->TemplateLightingLoads_)
            {
              this->TemplateLightingLoads_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimTemplateZoneLoads* SimTemplateZoneLoads::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateZoneLoads (*this, f, c);
      }

      SimTemplateZoneLoads& SimTemplateZoneLoads::
      operator= (const SimTemplateZoneLoads& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimTemplate& > (*this) = x;
          this->TemplateElectricalEquipment_ = x.TemplateElectricalEquipment_;
          this->TemplateElecEqmt_Elevators_ = x.TemplateElecEqmt_Elevators_;
          this->TemplateElecEqmt_Escalators_ = x.TemplateElecEqmt_Escalators_;
          this->TemplateElecEqmt_Process_ = x.TemplateElecEqmt_Process_;
          this->TemplateGasEquipment_ = x.TemplateGasEquipment_;
          this->TemplateGasEqmt_Process_ = x.TemplateGasEqmt_Process_;
          this->TemplateHotWaterEquipment_ = x.TemplateHotWaterEquipment_;
          this->TemplateSteamEquipment_ = x.TemplateSteamEquipment_;
          this->TemplateOtherEquipment_ = x.TemplateOtherEquipment_;
          this->TemplatePeopleLoads_ = x.TemplatePeopleLoads_;
          this->TemplateLightingLoads_ = x.TemplateLightingLoads_;
        }

        return *this;
      }

      SimTemplateZoneLoads::
      ~SimTemplateZoneLoads ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

