// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_GlazingMaterial_Shade.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Shade
      // 

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_Name_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Name () const
      {
        return this->SimMaterial_Name_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_Name_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Name ()
      {
        return this->SimMaterial_Name_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Name (const SimMaterial_Name_type& x)
      {
        this->SimMaterial_Name_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Name (const SimMaterial_Name_optional& x)
      {
        this->SimMaterial_Name_ = x;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Name (::std::auto_ptr< SimMaterial_Name_type > x)
      {
        this->SimMaterial_Name_.set (x);
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Thick () const
      {
        return this->SimMaterial_Thick_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Thick ()
      {
        return this->SimMaterial_Thick_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Thick (const SimMaterial_Thick_type& x)
      {
        this->SimMaterial_Thick_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Thick (const SimMaterial_Thick_optional& x)
      {
        this->SimMaterial_Thick_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Cond () const
      {
        return this->SimMaterial_Cond_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Cond ()
      {
        return this->SimMaterial_Cond_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Cond (const SimMaterial_Cond_type& x)
      {
        this->SimMaterial_Cond_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_Cond (const SimMaterial_Cond_optional& x)
      {
        this->SimMaterial_Cond_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_VisTrans_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisTrans () const
      {
        return this->SimMaterial_VisTrans_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_VisTrans_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisTrans ()
      {
        return this->SimMaterial_VisTrans_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisTrans (const SimMaterial_VisTrans_type& x)
      {
        this->SimMaterial_VisTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisTrans (const SimMaterial_VisTrans_optional& x)
      {
        this->SimMaterial_VisTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_InfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredHemisphEmis () const
      {
        return this->SimMaterial_InfraredHemisphEmis_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_InfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredHemisphEmis ()
      {
        return this->SimMaterial_InfraredHemisphEmis_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredHemisphEmis (const SimMaterial_InfraredHemisphEmis_type& x)
      {
        this->SimMaterial_InfraredHemisphEmis_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredHemisphEmis (const SimMaterial_InfraredHemisphEmis_optional& x)
      {
        this->SimMaterial_InfraredHemisphEmis_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_SolarTrans_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarTrans () const
      {
        return this->SimMaterial_SolarTrans_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_SolarTrans_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarTrans ()
      {
        return this->SimMaterial_SolarTrans_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarTrans (const SimMaterial_SolarTrans_type& x)
      {
        this->SimMaterial_SolarTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarTrans (const SimMaterial_SolarTrans_optional& x)
      {
        this->SimMaterial_SolarTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_SolarReflect_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarReflect () const
      {
        return this->SimMaterial_SolarReflect_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_SolarReflect_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarReflect ()
      {
        return this->SimMaterial_SolarReflect_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarReflect (const SimMaterial_SolarReflect_type& x)
      {
        this->SimMaterial_SolarReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_SolarReflect (const SimMaterial_SolarReflect_optional& x)
      {
        this->SimMaterial_SolarReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_VisReflect_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisReflect () const
      {
        return this->SimMaterial_VisReflect_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_VisReflect_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisReflect ()
      {
        return this->SimMaterial_VisReflect_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisReflect (const SimMaterial_VisReflect_type& x)
      {
        this->SimMaterial_VisReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_VisReflect (const SimMaterial_VisReflect_optional& x)
      {
        this->SimMaterial_VisReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_InfraredTransmittance_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredTransmittance () const
      {
        return this->SimMaterial_InfraredTransmittance_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_InfraredTransmittance_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredTransmittance ()
      {
        return this->SimMaterial_InfraredTransmittance_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredTransmittance (const SimMaterial_InfraredTransmittance_type& x)
      {
        this->SimMaterial_InfraredTransmittance_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_InfraredTransmittance (const SimMaterial_InfraredTransmittance_optional& x)
      {
        this->SimMaterial_InfraredTransmittance_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_ShadeToGlassDist_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_ShadeToGlassDist () const
      {
        return this->SimMaterial_ShadeToGlassDist_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_ShadeToGlassDist_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_ShadeToGlassDist ()
      {
        return this->SimMaterial_ShadeToGlassDist_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_ShadeToGlassDist (const SimMaterial_ShadeToGlassDist_type& x)
      {
        this->SimMaterial_ShadeToGlassDist_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_ShadeToGlassDist (const SimMaterial_ShadeToGlassDist_optional& x)
      {
        this->SimMaterial_ShadeToGlassDist_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_TopOpngMult_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_TopOpngMult () const
      {
        return this->SimMaterial_TopOpngMult_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_TopOpngMult_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_TopOpngMult ()
      {
        return this->SimMaterial_TopOpngMult_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_TopOpngMult (const SimMaterial_TopOpngMult_type& x)
      {
        this->SimMaterial_TopOpngMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_TopOpngMult (const SimMaterial_TopOpngMult_optional& x)
      {
        this->SimMaterial_TopOpngMult_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_BotOpngMult_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_BotOpngMult () const
      {
        return this->SimMaterial_BotOpngMult_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_BotOpngMult_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_BotOpngMult ()
      {
        return this->SimMaterial_BotOpngMult_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_BotOpngMult (const SimMaterial_BotOpngMult_type& x)
      {
        this->SimMaterial_BotOpngMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_BotOpngMult (const SimMaterial_BotOpngMult_optional& x)
      {
        this->SimMaterial_BotOpngMult_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_LeftSideOpngMult_2_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_LeftSideOpngMult_2 () const
      {
        return this->SimMaterial_LeftSideOpngMult_2_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_LeftSideOpngMult_2_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_LeftSideOpngMult_2 ()
      {
        return this->SimMaterial_LeftSideOpngMult_2_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_LeftSideOpngMult_2 (const SimMaterial_LeftSideOpngMult_2_type& x)
      {
        this->SimMaterial_LeftSideOpngMult_2_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_LeftSideOpngMult_2 (const SimMaterial_LeftSideOpngMult_2_optional& x)
      {
        this->SimMaterial_LeftSideOpngMult_2_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_RightSideOpngMult_2_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_RightSideOpngMult_2 () const
      {
        return this->SimMaterial_RightSideOpngMult_2_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_RightSideOpngMult_2_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_RightSideOpngMult_2 ()
      {
        return this->SimMaterial_RightSideOpngMult_2_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_RightSideOpngMult_2 (const SimMaterial_RightSideOpngMult_2_type& x)
      {
        this->SimMaterial_RightSideOpngMult_2_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_RightSideOpngMult_2 (const SimMaterial_RightSideOpngMult_2_optional& x)
      {
        this->SimMaterial_RightSideOpngMult_2_ = x;
      }

      const SimMaterial_GlazingMaterial_Shade::SimMaterial_AirflowPermeability_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_AirflowPermeability () const
      {
        return this->SimMaterial_AirflowPermeability_;
      }

      SimMaterial_GlazingMaterial_Shade::SimMaterial_AirflowPermeability_optional& SimMaterial_GlazingMaterial_Shade::
      SimMaterial_AirflowPermeability ()
      {
        return this->SimMaterial_AirflowPermeability_;
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_AirflowPermeability (const SimMaterial_AirflowPermeability_type& x)
      {
        this->SimMaterial_AirflowPermeability_.set (x);
      }

      void SimMaterial_GlazingMaterial_Shade::
      SimMaterial_AirflowPermeability (const SimMaterial_AirflowPermeability_optional& x)
      {
        this->SimMaterial_AirflowPermeability_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Shade
      //

      SimMaterial_GlazingMaterial_Shade::
      SimMaterial_GlazingMaterial_Shade ()
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (),
        SimMaterial_Name_ (this),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_VisTrans_ (this),
        SimMaterial_InfraredHemisphEmis_ (this),
        SimMaterial_SolarTrans_ (this),
        SimMaterial_SolarReflect_ (this),
        SimMaterial_VisReflect_ (this),
        SimMaterial_InfraredTransmittance_ (this),
        SimMaterial_ShadeToGlassDist_ (this),
        SimMaterial_TopOpngMult_ (this),
        SimMaterial_BotOpngMult_ (this),
        SimMaterial_LeftSideOpngMult_2_ (this),
        SimMaterial_RightSideOpngMult_2_ (this),
        SimMaterial_AirflowPermeability_ (this)
      {
      }

      SimMaterial_GlazingMaterial_Shade::
      SimMaterial_GlazingMaterial_Shade (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (RefId),
        SimMaterial_Name_ (this),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_VisTrans_ (this),
        SimMaterial_InfraredHemisphEmis_ (this),
        SimMaterial_SolarTrans_ (this),
        SimMaterial_SolarReflect_ (this),
        SimMaterial_VisReflect_ (this),
        SimMaterial_InfraredTransmittance_ (this),
        SimMaterial_ShadeToGlassDist_ (this),
        SimMaterial_TopOpngMult_ (this),
        SimMaterial_BotOpngMult_ (this),
        SimMaterial_LeftSideOpngMult_2_ (this),
        SimMaterial_RightSideOpngMult_2_ (this),
        SimMaterial_AirflowPermeability_ (this)
      {
      }

      SimMaterial_GlazingMaterial_Shade::
      SimMaterial_GlazingMaterial_Shade (const SimMaterial_GlazingMaterial_Shade& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (x, f, c),
        SimMaterial_Name_ (x.SimMaterial_Name_, f, this),
        SimMaterial_Thick_ (x.SimMaterial_Thick_, f, this),
        SimMaterial_Cond_ (x.SimMaterial_Cond_, f, this),
        SimMaterial_VisTrans_ (x.SimMaterial_VisTrans_, f, this),
        SimMaterial_InfraredHemisphEmis_ (x.SimMaterial_InfraredHemisphEmis_, f, this),
        SimMaterial_SolarTrans_ (x.SimMaterial_SolarTrans_, f, this),
        SimMaterial_SolarReflect_ (x.SimMaterial_SolarReflect_, f, this),
        SimMaterial_VisReflect_ (x.SimMaterial_VisReflect_, f, this),
        SimMaterial_InfraredTransmittance_ (x.SimMaterial_InfraredTransmittance_, f, this),
        SimMaterial_ShadeToGlassDist_ (x.SimMaterial_ShadeToGlassDist_, f, this),
        SimMaterial_TopOpngMult_ (x.SimMaterial_TopOpngMult_, f, this),
        SimMaterial_BotOpngMult_ (x.SimMaterial_BotOpngMult_, f, this),
        SimMaterial_LeftSideOpngMult_2_ (x.SimMaterial_LeftSideOpngMult_2_, f, this),
        SimMaterial_RightSideOpngMult_2_ (x.SimMaterial_RightSideOpngMult_2_, f, this),
        SimMaterial_AirflowPermeability_ (x.SimMaterial_AirflowPermeability_, f, this)
      {
      }

      SimMaterial_GlazingMaterial_Shade::
      SimMaterial_GlazingMaterial_Shade (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_Name_ (this),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_VisTrans_ (this),
        SimMaterial_InfraredHemisphEmis_ (this),
        SimMaterial_SolarTrans_ (this),
        SimMaterial_SolarReflect_ (this),
        SimMaterial_VisReflect_ (this),
        SimMaterial_InfraredTransmittance_ (this),
        SimMaterial_ShadeToGlassDist_ (this),
        SimMaterial_TopOpngMult_ (this),
        SimMaterial_BotOpngMult_ (this),
        SimMaterial_LeftSideOpngMult_2_ (this),
        SimMaterial_RightSideOpngMult_2_ (this),
        SimMaterial_AirflowPermeability_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_GlazingMaterial_Shade::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_Name
          //
          if (n.name () == "SimMaterial_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_Name_type > r (
              SimMaterial_Name_traits::create (i, f, this));

            if (!this->SimMaterial_Name_)
            {
              this->SimMaterial_Name_.set (r);
              continue;
            }
          }

          // SimMaterial_Thick
          //
          if (n.name () == "SimMaterial_Thick" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_Thick_)
            {
              this->SimMaterial_Thick_.set (SimMaterial_Thick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_Cond
          //
          if (n.name () == "SimMaterial_Cond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_Cond_)
            {
              this->SimMaterial_Cond_.set (SimMaterial_Cond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_VisTrans
          //
          if (n.name () == "SimMaterial_VisTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_VisTrans_)
            {
              this->SimMaterial_VisTrans_.set (SimMaterial_VisTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_InfraredHemisphEmis
          //
          if (n.name () == "SimMaterial_InfraredHemisphEmis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_InfraredHemisphEmis_)
            {
              this->SimMaterial_InfraredHemisphEmis_.set (SimMaterial_InfraredHemisphEmis_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SolarTrans
          //
          if (n.name () == "SimMaterial_SolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SolarTrans_)
            {
              this->SimMaterial_SolarTrans_.set (SimMaterial_SolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SolarReflect
          //
          if (n.name () == "SimMaterial_SolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SolarReflect_)
            {
              this->SimMaterial_SolarReflect_.set (SimMaterial_SolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_VisReflect
          //
          if (n.name () == "SimMaterial_VisReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_VisReflect_)
            {
              this->SimMaterial_VisReflect_.set (SimMaterial_VisReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_InfraredTransmittance
          //
          if (n.name () == "SimMaterial_InfraredTransmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_InfraredTransmittance_)
            {
              this->SimMaterial_InfraredTransmittance_.set (SimMaterial_InfraredTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ShadeToGlassDist
          //
          if (n.name () == "SimMaterial_ShadeToGlassDist" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ShadeToGlassDist_)
            {
              this->SimMaterial_ShadeToGlassDist_.set (SimMaterial_ShadeToGlassDist_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_TopOpngMult
          //
          if (n.name () == "SimMaterial_TopOpngMult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_TopOpngMult_)
            {
              this->SimMaterial_TopOpngMult_.set (SimMaterial_TopOpngMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BotOpngMult
          //
          if (n.name () == "SimMaterial_BotOpngMult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BotOpngMult_)
            {
              this->SimMaterial_BotOpngMult_.set (SimMaterial_BotOpngMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_LeftSideOpngMult_2
          //
          if (n.name () == "SimMaterial_LeftSideOpngMult_2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_LeftSideOpngMult_2_)
            {
              this->SimMaterial_LeftSideOpngMult_2_.set (SimMaterial_LeftSideOpngMult_2_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_RightSideOpngMult_2
          //
          if (n.name () == "SimMaterial_RightSideOpngMult_2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_RightSideOpngMult_2_)
            {
              this->SimMaterial_RightSideOpngMult_2_.set (SimMaterial_RightSideOpngMult_2_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_AirflowPermeability
          //
          if (n.name () == "SimMaterial_AirflowPermeability" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_AirflowPermeability_)
            {
              this->SimMaterial_AirflowPermeability_.set (SimMaterial_AirflowPermeability_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_GlazingMaterial_Shade* SimMaterial_GlazingMaterial_Shade::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_GlazingMaterial_Shade (*this, f, c);
      }

      SimMaterial_GlazingMaterial_Shade& SimMaterial_GlazingMaterial_Shade::
      operator= (const SimMaterial_GlazingMaterial_Shade& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial& > (*this) = x;
          this->SimMaterial_Name_ = x.SimMaterial_Name_;
          this->SimMaterial_Thick_ = x.SimMaterial_Thick_;
          this->SimMaterial_Cond_ = x.SimMaterial_Cond_;
          this->SimMaterial_VisTrans_ = x.SimMaterial_VisTrans_;
          this->SimMaterial_InfraredHemisphEmis_ = x.SimMaterial_InfraredHemisphEmis_;
          this->SimMaterial_SolarTrans_ = x.SimMaterial_SolarTrans_;
          this->SimMaterial_SolarReflect_ = x.SimMaterial_SolarReflect_;
          this->SimMaterial_VisReflect_ = x.SimMaterial_VisReflect_;
          this->SimMaterial_InfraredTransmittance_ = x.SimMaterial_InfraredTransmittance_;
          this->SimMaterial_ShadeToGlassDist_ = x.SimMaterial_ShadeToGlassDist_;
          this->SimMaterial_TopOpngMult_ = x.SimMaterial_TopOpngMult_;
          this->SimMaterial_BotOpngMult_ = x.SimMaterial_BotOpngMult_;
          this->SimMaterial_LeftSideOpngMult_2_ = x.SimMaterial_LeftSideOpngMult_2_;
          this->SimMaterial_RightSideOpngMult_2_ = x.SimMaterial_RightSideOpngMult_2_;
          this->SimMaterial_AirflowPermeability_ = x.SimMaterial_AirflowPermeability_;
        }

        return *this;
      }

      SimMaterial_GlazingMaterial_Shade::
      ~SimMaterial_GlazingMaterial_Shade ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

