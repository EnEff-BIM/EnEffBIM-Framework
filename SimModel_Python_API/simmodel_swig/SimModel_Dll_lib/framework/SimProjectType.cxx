// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimProjectType.hxx"

#include "integerlist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimProjectType
      // 

      const SimProjectType::RepresentationMaps_optional& SimProjectType::
      RepresentationMaps () const
      {
        return this->RepresentationMaps_;
      }

      SimProjectType::RepresentationMaps_optional& SimProjectType::
      RepresentationMaps ()
      {
        return this->RepresentationMaps_;
      }

      void SimProjectType::
      RepresentationMaps (const RepresentationMaps_type& x)
      {
        this->RepresentationMaps_.set (x);
      }

      void SimProjectType::
      RepresentationMaps (const RepresentationMaps_optional& x)
      {
        this->RepresentationMaps_ = x;
      }

      void SimProjectType::
      RepresentationMaps (::std::auto_ptr< RepresentationMaps_type > x)
      {
        this->RepresentationMaps_.set (x);
      }

      const SimProjectType::Tag_optional& SimProjectType::
      Tag () const
      {
        return this->Tag_;
      }

      SimProjectType::Tag_optional& SimProjectType::
      Tag ()
      {
        return this->Tag_;
      }

      void SimProjectType::
      Tag (const Tag_type& x)
      {
        this->Tag_.set (x);
      }

      void SimProjectType::
      Tag (const Tag_optional& x)
      {
        this->Tag_ = x;
      }

      void SimProjectType::
      Tag (::std::auto_ptr< Tag_type > x)
      {
        this->Tag_.set (x);
      }

      const SimProjectType::ProjectClientOwner_optional& SimProjectType::
      ProjectClientOwner () const
      {
        return this->ProjectClientOwner_;
      }

      SimProjectType::ProjectClientOwner_optional& SimProjectType::
      ProjectClientOwner ()
      {
        return this->ProjectClientOwner_;
      }

      void SimProjectType::
      ProjectClientOwner (const ProjectClientOwner_type& x)
      {
        this->ProjectClientOwner_.set (x);
      }

      void SimProjectType::
      ProjectClientOwner (const ProjectClientOwner_optional& x)
      {
        this->ProjectClientOwner_ = x;
      }

      void SimProjectType::
      ProjectClientOwner (::std::auto_ptr< ProjectClientOwner_type > x)
      {
        this->ProjectClientOwner_.set (x);
      }

      const SimProjectType::ProjectArchitect_optional& SimProjectType::
      ProjectArchitect () const
      {
        return this->ProjectArchitect_;
      }

      SimProjectType::ProjectArchitect_optional& SimProjectType::
      ProjectArchitect ()
      {
        return this->ProjectArchitect_;
      }

      void SimProjectType::
      ProjectArchitect (const ProjectArchitect_type& x)
      {
        this->ProjectArchitect_.set (x);
      }

      void SimProjectType::
      ProjectArchitect (const ProjectArchitect_optional& x)
      {
        this->ProjectArchitect_ = x;
      }

      void SimProjectType::
      ProjectArchitect (::std::auto_ptr< ProjectArchitect_type > x)
      {
        this->ProjectArchitect_.set (x);
      }

      const SimProjectType::ProjectUnitsList_optional& SimProjectType::
      ProjectUnitsList () const
      {
        return this->ProjectUnitsList_;
      }

      SimProjectType::ProjectUnitsList_optional& SimProjectType::
      ProjectUnitsList ()
      {
        return this->ProjectUnitsList_;
      }

      void SimProjectType::
      ProjectUnitsList (const ProjectUnitsList_type& x)
      {
        this->ProjectUnitsList_.set (x);
      }

      void SimProjectType::
      ProjectUnitsList (const ProjectUnitsList_optional& x)
      {
        this->ProjectUnitsList_ = x;
      }

      void SimProjectType::
      ProjectUnitsList (::std::auto_ptr< ProjectUnitsList_type > x)
      {
        this->ProjectUnitsList_.set (x);
      }

      const SimProjectType::T24ProjectTeamList_optional& SimProjectType::
      T24ProjectTeamList () const
      {
        return this->T24ProjectTeamList_;
      }

      SimProjectType::T24ProjectTeamList_optional& SimProjectType::
      T24ProjectTeamList ()
      {
        return this->T24ProjectTeamList_;
      }

      void SimProjectType::
      T24ProjectTeamList (const T24ProjectTeamList_type& x)
      {
        this->T24ProjectTeamList_.set (x);
      }

      void SimProjectType::
      T24ProjectTeamList (const T24ProjectTeamList_optional& x)
      {
        this->T24ProjectTeamList_ = x;
      }

      void SimProjectType::
      T24ProjectTeamList (::std::auto_ptr< T24ProjectTeamList_type > x)
      {
        this->T24ProjectTeamList_.set (x);
      }

      const SimProjectType::T24AnalysisType_optional& SimProjectType::
      T24AnalysisType () const
      {
        return this->T24AnalysisType_;
      }

      SimProjectType::T24AnalysisType_optional& SimProjectType::
      T24AnalysisType ()
      {
        return this->T24AnalysisType_;
      }

      void SimProjectType::
      T24AnalysisType (const T24AnalysisType_type& x)
      {
        this->T24AnalysisType_.set (x);
      }

      void SimProjectType::
      T24AnalysisType (const T24AnalysisType_optional& x)
      {
        this->T24AnalysisType_ = x;
      }

      void SimProjectType::
      T24AnalysisType (::std::auto_ptr< T24AnalysisType_type > x)
      {
        this->T24AnalysisType_.set (x);
      }

      const SimProjectType::T24AutomaticDaylightingReport_optional& SimProjectType::
      T24AutomaticDaylightingReport () const
      {
        return this->T24AutomaticDaylightingReport_;
      }

      SimProjectType::T24AutomaticDaylightingReport_optional& SimProjectType::
      T24AutomaticDaylightingReport ()
      {
        return this->T24AutomaticDaylightingReport_;
      }

      void SimProjectType::
      T24AutomaticDaylightingReport (const T24AutomaticDaylightingReport_type& x)
      {
        this->T24AutomaticDaylightingReport_.set (x);
      }

      void SimProjectType::
      T24AutomaticDaylightingReport (const T24AutomaticDaylightingReport_optional& x)
      {
        this->T24AutomaticDaylightingReport_ = x;
      }

      const SimProjectType::T24AutomaticTimeSwitchReport_optional& SimProjectType::
      T24AutomaticTimeSwitchReport () const
      {
        return this->T24AutomaticTimeSwitchReport_;
      }

      SimProjectType::T24AutomaticTimeSwitchReport_optional& SimProjectType::
      T24AutomaticTimeSwitchReport ()
      {
        return this->T24AutomaticTimeSwitchReport_;
      }

      void SimProjectType::
      T24AutomaticTimeSwitchReport (const T24AutomaticTimeSwitchReport_type& x)
      {
        this->T24AutomaticTimeSwitchReport_.set (x);
      }

      void SimProjectType::
      T24AutomaticTimeSwitchReport (const T24AutomaticTimeSwitchReport_optional& x)
      {
        this->T24AutomaticTimeSwitchReport_ = x;
      }

      const SimProjectType::T24AverageDryBulbTemperature_optional& SimProjectType::
      T24AverageDryBulbTemperature () const
      {
        return this->T24AverageDryBulbTemperature_;
      }

      SimProjectType::T24AverageDryBulbTemperature_optional& SimProjectType::
      T24AverageDryBulbTemperature ()
      {
        return this->T24AverageDryBulbTemperature_;
      }

      void SimProjectType::
      T24AverageDryBulbTemperature (const T24AverageDryBulbTemperature_type& x)
      {
        this->T24AverageDryBulbTemperature_.set (x);
      }

      void SimProjectType::
      T24AverageDryBulbTemperature (const T24AverageDryBulbTemperature_optional& x)
      {
        this->T24AverageDryBulbTemperature_ = x;
      }

      const SimProjectType::T24AverageElectricityCost_optional& SimProjectType::
      T24AverageElectricityCost () const
      {
        return this->T24AverageElectricityCost_;
      }

      SimProjectType::T24AverageElectricityCost_optional& SimProjectType::
      T24AverageElectricityCost ()
      {
        return this->T24AverageElectricityCost_;
      }

      void SimProjectType::
      T24AverageElectricityCost (const T24AverageElectricityCost_type& x)
      {
        this->T24AverageElectricityCost_.set (x);
      }

      void SimProjectType::
      T24AverageElectricityCost (const T24AverageElectricityCost_optional& x)
      {
        this->T24AverageElectricityCost_ = x;
      }

      const SimProjectType::T24AverageOtherFuelCost_optional& SimProjectType::
      T24AverageOtherFuelCost () const
      {
        return this->T24AverageOtherFuelCost_;
      }

      SimProjectType::T24AverageOtherFuelCost_optional& SimProjectType::
      T24AverageOtherFuelCost ()
      {
        return this->T24AverageOtherFuelCost_;
      }

      void SimProjectType::
      T24AverageOtherFuelCost (const T24AverageOtherFuelCost_type& x)
      {
        this->T24AverageOtherFuelCost_.set (x);
      }

      void SimProjectType::
      T24AverageOtherFuelCost (const T24AverageOtherFuelCost_optional& x)
      {
        this->T24AverageOtherFuelCost_ = x;
      }

      const SimProjectType::T24CommercialRefrigerationMandatoryCompliance_optional& SimProjectType::
      T24CommercialRefrigerationMandatoryCompliance () const
      {
        return this->T24CommercialRefrigerationMandatoryCompliance_;
      }

      SimProjectType::T24CommercialRefrigerationMandatoryCompliance_optional& SimProjectType::
      T24CommercialRefrigerationMandatoryCompliance ()
      {
        return this->T24CommercialRefrigerationMandatoryCompliance_;
      }

      void SimProjectType::
      T24CommercialRefrigerationMandatoryCompliance (const T24CommercialRefrigerationMandatoryCompliance_type& x)
      {
        this->T24CommercialRefrigerationMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24CommercialRefrigerationMandatoryCompliance (const T24CommercialRefrigerationMandatoryCompliance_optional& x)
      {
        this->T24CommercialRefrigerationMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24CommercialRefrigerationMandatoryCompliance (::std::auto_ptr< T24CommercialRefrigerationMandatoryCompliance_type > x)
      {
        this->T24CommercialRefrigerationMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24ComplexHVACMandatoryCompliance_optional& SimProjectType::
      T24ComplexHVACMandatoryCompliance () const
      {
        return this->T24ComplexHVACMandatoryCompliance_;
      }

      SimProjectType::T24ComplexHVACMandatoryCompliance_optional& SimProjectType::
      T24ComplexHVACMandatoryCompliance ()
      {
        return this->T24ComplexHVACMandatoryCompliance_;
      }

      void SimProjectType::
      T24ComplexHVACMandatoryCompliance (const T24ComplexHVACMandatoryCompliance_type& x)
      {
        this->T24ComplexHVACMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24ComplexHVACMandatoryCompliance (const T24ComplexHVACMandatoryCompliance_optional& x)
      {
        this->T24ComplexHVACMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24ComplexHVACMandatoryCompliance (::std::auto_ptr< T24ComplexHVACMandatoryCompliance_type > x)
      {
        this->T24ComplexHVACMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24CompliancePathComputerRoom_optional& SimProjectType::
      T24CompliancePathComputerRoom () const
      {
        return this->T24CompliancePathComputerRoom_;
      }

      SimProjectType::T24CompliancePathComputerRoom_optional& SimProjectType::
      T24CompliancePathComputerRoom ()
      {
        return this->T24CompliancePathComputerRoom_;
      }

      void SimProjectType::
      T24CompliancePathComputerRoom (const T24CompliancePathComputerRoom_type& x)
      {
        this->T24CompliancePathComputerRoom_.set (x);
      }

      void SimProjectType::
      T24CompliancePathComputerRoom (const T24CompliancePathComputerRoom_optional& x)
      {
        this->T24CompliancePathComputerRoom_ = x;
      }

      void SimProjectType::
      T24CompliancePathComputerRoom (::std::auto_ptr< T24CompliancePathComputerRoom_type > x)
      {
        this->T24CompliancePathComputerRoom_.set (x);
      }

      const SimProjectType::T24CompliancePathDomesticHotWater_optional& SimProjectType::
      T24CompliancePathDomesticHotWater () const
      {
        return this->T24CompliancePathDomesticHotWater_;
      }

      SimProjectType::T24CompliancePathDomesticHotWater_optional& SimProjectType::
      T24CompliancePathDomesticHotWater ()
      {
        return this->T24CompliancePathDomesticHotWater_;
      }

      void SimProjectType::
      T24CompliancePathDomesticHotWater (const T24CompliancePathDomesticHotWater_type& x)
      {
        this->T24CompliancePathDomesticHotWater_.set (x);
      }

      void SimProjectType::
      T24CompliancePathDomesticHotWater (const T24CompliancePathDomesticHotWater_optional& x)
      {
        this->T24CompliancePathDomesticHotWater_ = x;
      }

      void SimProjectType::
      T24CompliancePathDomesticHotWater (::std::auto_ptr< T24CompliancePathDomesticHotWater_type > x)
      {
        this->T24CompliancePathDomesticHotWater_.set (x);
      }

      const SimProjectType::T24CompliancePathEnvelope_optional& SimProjectType::
      T24CompliancePathEnvelope () const
      {
        return this->T24CompliancePathEnvelope_;
      }

      SimProjectType::T24CompliancePathEnvelope_optional& SimProjectType::
      T24CompliancePathEnvelope ()
      {
        return this->T24CompliancePathEnvelope_;
      }

      void SimProjectType::
      T24CompliancePathEnvelope (const T24CompliancePathEnvelope_type& x)
      {
        this->T24CompliancePathEnvelope_.set (x);
      }

      void SimProjectType::
      T24CompliancePathEnvelope (const T24CompliancePathEnvelope_optional& x)
      {
        this->T24CompliancePathEnvelope_ = x;
      }

      void SimProjectType::
      T24CompliancePathEnvelope (::std::auto_ptr< T24CompliancePathEnvelope_type > x)
      {
        this->T24CompliancePathEnvelope_.set (x);
      }

      const SimProjectType::T24CompliancePathKitchen_optional& SimProjectType::
      T24CompliancePathKitchen () const
      {
        return this->T24CompliancePathKitchen_;
      }

      SimProjectType::T24CompliancePathKitchen_optional& SimProjectType::
      T24CompliancePathKitchen ()
      {
        return this->T24CompliancePathKitchen_;
      }

      void SimProjectType::
      T24CompliancePathKitchen (const T24CompliancePathKitchen_type& x)
      {
        this->T24CompliancePathKitchen_.set (x);
      }

      void SimProjectType::
      T24CompliancePathKitchen (const T24CompliancePathKitchen_optional& x)
      {
        this->T24CompliancePathKitchen_ = x;
      }

      void SimProjectType::
      T24CompliancePathKitchen (::std::auto_ptr< T24CompliancePathKitchen_type > x)
      {
        this->T24CompliancePathKitchen_.set (x);
      }

      const SimProjectType::T24CompliancePathLaboratory_optional& SimProjectType::
      T24CompliancePathLaboratory () const
      {
        return this->T24CompliancePathLaboratory_;
      }

      SimProjectType::T24CompliancePathLaboratory_optional& SimProjectType::
      T24CompliancePathLaboratory ()
      {
        return this->T24CompliancePathLaboratory_;
      }

      void SimProjectType::
      T24CompliancePathLaboratory (const T24CompliancePathLaboratory_type& x)
      {
        this->T24CompliancePathLaboratory_.set (x);
      }

      void SimProjectType::
      T24CompliancePathLaboratory (const T24CompliancePathLaboratory_optional& x)
      {
        this->T24CompliancePathLaboratory_ = x;
      }

      void SimProjectType::
      T24CompliancePathLaboratory (::std::auto_ptr< T24CompliancePathLaboratory_type > x)
      {
        this->T24CompliancePathLaboratory_.set (x);
      }

      const SimProjectType::T24CompliancePathLighting_optional& SimProjectType::
      T24CompliancePathLighting () const
      {
        return this->T24CompliancePathLighting_;
      }

      SimProjectType::T24CompliancePathLighting_optional& SimProjectType::
      T24CompliancePathLighting ()
      {
        return this->T24CompliancePathLighting_;
      }

      void SimProjectType::
      T24CompliancePathLighting (const T24CompliancePathLighting_type& x)
      {
        this->T24CompliancePathLighting_.set (x);
      }

      void SimProjectType::
      T24CompliancePathLighting (const T24CompliancePathLighting_optional& x)
      {
        this->T24CompliancePathLighting_ = x;
      }

      void SimProjectType::
      T24CompliancePathLighting (::std::auto_ptr< T24CompliancePathLighting_type > x)
      {
        this->T24CompliancePathLighting_.set (x);
      }

      const SimProjectType::T24CompliancePathMechanical_optional& SimProjectType::
      T24CompliancePathMechanical () const
      {
        return this->T24CompliancePathMechanical_;
      }

      SimProjectType::T24CompliancePathMechanical_optional& SimProjectType::
      T24CompliancePathMechanical ()
      {
        return this->T24CompliancePathMechanical_;
      }

      void SimProjectType::
      T24CompliancePathMechanical (const T24CompliancePathMechanical_type& x)
      {
        this->T24CompliancePathMechanical_.set (x);
      }

      void SimProjectType::
      T24CompliancePathMechanical (const T24CompliancePathMechanical_optional& x)
      {
        this->T24CompliancePathMechanical_ = x;
      }

      void SimProjectType::
      T24CompliancePathMechanical (::std::auto_ptr< T24CompliancePathMechanical_type > x)
      {
        this->T24CompliancePathMechanical_.set (x);
      }

      const SimProjectType::T24ComplianceReportPDF_optional& SimProjectType::
      T24ComplianceReportPDF () const
      {
        return this->T24ComplianceReportPDF_;
      }

      SimProjectType::T24ComplianceReportPDF_optional& SimProjectType::
      T24ComplianceReportPDF ()
      {
        return this->T24ComplianceReportPDF_;
      }

      void SimProjectType::
      T24ComplianceReportPDF (const T24ComplianceReportPDF_type& x)
      {
        this->T24ComplianceReportPDF_.set (x);
      }

      void SimProjectType::
      T24ComplianceReportPDF (const T24ComplianceReportPDF_optional& x)
      {
        this->T24ComplianceReportPDF_ = x;
      }

      const SimProjectType::T24ComplianceReportXML_optional& SimProjectType::
      T24ComplianceReportXML () const
      {
        return this->T24ComplianceReportXML_;
      }

      SimProjectType::T24ComplianceReportXML_optional& SimProjectType::
      T24ComplianceReportXML ()
      {
        return this->T24ComplianceReportXML_;
      }

      void SimProjectType::
      T24ComplianceReportXML (const T24ComplianceReportXML_type& x)
      {
        this->T24ComplianceReportXML_.set (x);
      }

      void SimProjectType::
      T24ComplianceReportXML (const T24ComplianceReportXML_optional& x)
      {
        this->T24ComplianceReportXML_ = x;
      }

      const SimProjectType::T24ComplianceType_optional& SimProjectType::
      T24ComplianceType () const
      {
        return this->T24ComplianceType_;
      }

      SimProjectType::T24ComplianceType_optional& SimProjectType::
      T24ComplianceType ()
      {
        return this->T24ComplianceType_;
      }

      void SimProjectType::
      T24ComplianceType (const T24ComplianceType_type& x)
      {
        this->T24ComplianceType_.set (x);
      }

      void SimProjectType::
      T24ComplianceType (const T24ComplianceType_optional& x)
      {
        this->T24ComplianceType_ = x;
      }

      void SimProjectType::
      T24ComplianceType (::std::auto_ptr< T24ComplianceType_type > x)
      {
        this->T24ComplianceType_.set (x);
      }

      const SimProjectType::T24CompressedAirMandatoryCompliance_optional& SimProjectType::
      T24CompressedAirMandatoryCompliance () const
      {
        return this->T24CompressedAirMandatoryCompliance_;
      }

      SimProjectType::T24CompressedAirMandatoryCompliance_optional& SimProjectType::
      T24CompressedAirMandatoryCompliance ()
      {
        return this->T24CompressedAirMandatoryCompliance_;
      }

      void SimProjectType::
      T24CompressedAirMandatoryCompliance (const T24CompressedAirMandatoryCompliance_type& x)
      {
        this->T24CompressedAirMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24CompressedAirMandatoryCompliance (const T24CompressedAirMandatoryCompliance_optional& x)
      {
        this->T24CompressedAirMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24CompressedAirMandatoryCompliance (::std::auto_ptr< T24CompressedAirMandatoryCompliance_type > x)
      {
        this->T24CompressedAirMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24DefaultDaylightingControls_optional& SimProjectType::
      T24DefaultDaylightingControls () const
      {
        return this->T24DefaultDaylightingControls_;
      }

      SimProjectType::T24DefaultDaylightingControls_optional& SimProjectType::
      T24DefaultDaylightingControls ()
      {
        return this->T24DefaultDaylightingControls_;
      }

      void SimProjectType::
      T24DefaultDaylightingControls (const T24DefaultDaylightingControls_type& x)
      {
        this->T24DefaultDaylightingControls_.set (x);
      }

      void SimProjectType::
      T24DefaultDaylightingControls (const T24DefaultDaylightingControls_optional& x)
      {
        this->T24DefaultDaylightingControls_ = x;
      }

      const SimProjectType::T24DemandResponsiveReport_optional& SimProjectType::
      T24DemandResponsiveReport () const
      {
        return this->T24DemandResponsiveReport_;
      }

      SimProjectType::T24DemandResponsiveReport_optional& SimProjectType::
      T24DemandResponsiveReport ()
      {
        return this->T24DemandResponsiveReport_;
      }

      void SimProjectType::
      T24DemandResponsiveReport (const T24DemandResponsiveReport_type& x)
      {
        this->T24DemandResponsiveReport_.set (x);
      }

      void SimProjectType::
      T24DemandResponsiveReport (const T24DemandResponsiveReport_optional& x)
      {
        this->T24DemandResponsiveReport_ = x;
      }

      const SimProjectType::T24DisableDaylightingControls_optional& SimProjectType::
      T24DisableDaylightingControls () const
      {
        return this->T24DisableDaylightingControls_;
      }

      SimProjectType::T24DisableDaylightingControls_optional& SimProjectType::
      T24DisableDaylightingControls ()
      {
        return this->T24DisableDaylightingControls_;
      }

      void SimProjectType::
      T24DisableDaylightingControls (const T24DisableDaylightingControls_type& x)
      {
        this->T24DisableDaylightingControls_.set (x);
      }

      void SimProjectType::
      T24DisableDaylightingControls (const T24DisableDaylightingControls_optional& x)
      {
        this->T24DisableDaylightingControls_ = x;
      }

      const SimProjectType::T24DomesticHotWaterDetailsLocation_optional& SimProjectType::
      T24DomesticHotWaterDetailsLocation () const
      {
        return this->T24DomesticHotWaterDetailsLocation_;
      }

      SimProjectType::T24DomesticHotWaterDetailsLocation_optional& SimProjectType::
      T24DomesticHotWaterDetailsLocation ()
      {
        return this->T24DomesticHotWaterDetailsLocation_;
      }

      void SimProjectType::
      T24DomesticHotWaterDetailsLocation (const T24DomesticHotWaterDetailsLocation_type& x)
      {
        this->T24DomesticHotWaterDetailsLocation_.set (x);
      }

      void SimProjectType::
      T24DomesticHotWaterDetailsLocation (const T24DomesticHotWaterDetailsLocation_optional& x)
      {
        this->T24DomesticHotWaterDetailsLocation_ = x;
      }

      void SimProjectType::
      T24DomesticHotWaterDetailsLocation (::std::auto_ptr< T24DomesticHotWaterDetailsLocation_type > x)
      {
        this->T24DomesticHotWaterDetailsLocation_.set (x);
      }

      const SimProjectType::T24ElectricalMandatoryCompliance_optional& SimProjectType::
      T24ElectricalMandatoryCompliance () const
      {
        return this->T24ElectricalMandatoryCompliance_;
      }

      SimProjectType::T24ElectricalMandatoryCompliance_optional& SimProjectType::
      T24ElectricalMandatoryCompliance ()
      {
        return this->T24ElectricalMandatoryCompliance_;
      }

      void SimProjectType::
      T24ElectricalMandatoryCompliance (const T24ElectricalMandatoryCompliance_type& x)
      {
        this->T24ElectricalMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24ElectricalMandatoryCompliance (const T24ElectricalMandatoryCompliance_optional& x)
      {
        this->T24ElectricalMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24ElectricalMandatoryCompliance (::std::auto_ptr< T24ElectricalMandatoryCompliance_type > x)
      {
        this->T24ElectricalMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24EnvelopeDetailsLocation_optional& SimProjectType::
      T24EnvelopeDetailsLocation () const
      {
        return this->T24EnvelopeDetailsLocation_;
      }

      SimProjectType::T24EnvelopeDetailsLocation_optional& SimProjectType::
      T24EnvelopeDetailsLocation ()
      {
        return this->T24EnvelopeDetailsLocation_;
      }

      void SimProjectType::
      T24EnvelopeDetailsLocation (const T24EnvelopeDetailsLocation_type& x)
      {
        this->T24EnvelopeDetailsLocation_.set (x);
      }

      void SimProjectType::
      T24EnvelopeDetailsLocation (const T24EnvelopeDetailsLocation_optional& x)
      {
        this->T24EnvelopeDetailsLocation_ = x;
      }

      void SimProjectType::
      T24EnvelopeDetailsLocation (::std::auto_ptr< T24EnvelopeDetailsLocation_type > x)
      {
        this->T24EnvelopeDetailsLocation_.set (x);
      }

      const SimProjectType::T24ExcptCondBldg_optional& SimProjectType::
      T24ExcptCondBldg () const
      {
        return this->T24ExcptCondBldg_;
      }

      SimProjectType::T24ExcptCondBldg_optional& SimProjectType::
      T24ExcptCondBldg ()
      {
        return this->T24ExcptCondBldg_;
      }

      void SimProjectType::
      T24ExcptCondBldg (const T24ExcptCondBldg_type& x)
      {
        this->T24ExcptCondBldg_.set (x);
      }

      void SimProjectType::
      T24ExcptCondBldg (const T24ExcptCondBldg_optional& x)
      {
        this->T24ExcptCondBldg_ = x;
      }

      void SimProjectType::
      T24ExcptCondBldg (::std::auto_ptr< T24ExcptCondBldg_type > x)
      {
        this->T24ExcptCondBldg_.set (x);
      }

      const SimProjectType::T24ExcptCondExteriorLighting_optional& SimProjectType::
      T24ExcptCondExteriorLighting () const
      {
        return this->T24ExcptCondExteriorLighting_;
      }

      SimProjectType::T24ExcptCondExteriorLighting_optional& SimProjectType::
      T24ExcptCondExteriorLighting ()
      {
        return this->T24ExcptCondExteriorLighting_;
      }

      void SimProjectType::
      T24ExcptCondExteriorLighting (const T24ExcptCondExteriorLighting_type& x)
      {
        this->T24ExcptCondExteriorLighting_.set (x);
      }

      void SimProjectType::
      T24ExcptCondExteriorLighting (const T24ExcptCondExteriorLighting_optional& x)
      {
        this->T24ExcptCondExteriorLighting_ = x;
      }

      void SimProjectType::
      T24ExcptCondExteriorLighting (::std::auto_ptr< T24ExcptCondExteriorLighting_type > x)
      {
        this->T24ExcptCondExteriorLighting_.set (x);
      }

      const SimProjectType::T24ExcptCondNarrative_optional& SimProjectType::
      T24ExcptCondNarrative () const
      {
        return this->T24ExcptCondNarrative_;
      }

      SimProjectType::T24ExcptCondNarrative_optional& SimProjectType::
      T24ExcptCondNarrative ()
      {
        return this->T24ExcptCondNarrative_;
      }

      void SimProjectType::
      T24ExcptCondNarrative (const T24ExcptCondNarrative_type& x)
      {
        this->T24ExcptCondNarrative_.set (x);
      }

      void SimProjectType::
      T24ExcptCondNarrative (const T24ExcptCondNarrative_optional& x)
      {
        this->T24ExcptCondNarrative_ = x;
      }

      void SimProjectType::
      T24ExcptCondNarrative (::std::auto_ptr< T24ExcptCondNarrative_type > x)
      {
        this->T24ExcptCondNarrative_.set (x);
      }

      const SimProjectType::T24ExcptCondNoCoolingSystem_optional& SimProjectType::
      T24ExcptCondNoCoolingSystem () const
      {
        return this->T24ExcptCondNoCoolingSystem_;
      }

      SimProjectType::T24ExcptCondNoCoolingSystem_optional& SimProjectType::
      T24ExcptCondNoCoolingSystem ()
      {
        return this->T24ExcptCondNoCoolingSystem_;
      }

      void SimProjectType::
      T24ExcptCondNoCoolingSystem (const T24ExcptCondNoCoolingSystem_type& x)
      {
        this->T24ExcptCondNoCoolingSystem_.set (x);
      }

      void SimProjectType::
      T24ExcptCondNoCoolingSystem (const T24ExcptCondNoCoolingSystem_optional& x)
      {
        this->T24ExcptCondNoCoolingSystem_ = x;
      }

      void SimProjectType::
      T24ExcptCondNoCoolingSystem (::std::auto_ptr< T24ExcptCondNoCoolingSystem_type > x)
      {
        this->T24ExcptCondNoCoolingSystem_.set (x);
      }

      const SimProjectType::T24ExcptCondRatedCapacity_optional& SimProjectType::
      T24ExcptCondRatedCapacity () const
      {
        return this->T24ExcptCondRatedCapacity_;
      }

      SimProjectType::T24ExcptCondRatedCapacity_optional& SimProjectType::
      T24ExcptCondRatedCapacity ()
      {
        return this->T24ExcptCondRatedCapacity_;
      }

      void SimProjectType::
      T24ExcptCondRatedCapacity (const T24ExcptCondRatedCapacity_type& x)
      {
        this->T24ExcptCondRatedCapacity_.set (x);
      }

      void SimProjectType::
      T24ExcptCondRatedCapacity (const T24ExcptCondRatedCapacity_optional& x)
      {
        this->T24ExcptCondRatedCapacity_ = x;
      }

      void SimProjectType::
      T24ExcptCondRatedCapacity (::std::auto_ptr< T24ExcptCondRatedCapacity_type > x)
      {
        this->T24ExcptCondRatedCapacity_.set (x);
      }

      const SimProjectType::T24ExceptionalConditionWaterHeaterSizing_optional& SimProjectType::
      T24ExceptionalConditionWaterHeaterSizing () const
      {
        return this->T24ExceptionalConditionWaterHeaterSizing_;
      }

      SimProjectType::T24ExceptionalConditionWaterHeaterSizing_optional& SimProjectType::
      T24ExceptionalConditionWaterHeaterSizing ()
      {
        return this->T24ExceptionalConditionWaterHeaterSizing_;
      }

      void SimProjectType::
      T24ExceptionalConditionWaterHeaterSizing (const T24ExceptionalConditionWaterHeaterSizing_type& x)
      {
        this->T24ExceptionalConditionWaterHeaterSizing_.set (x);
      }

      void SimProjectType::
      T24ExceptionalConditionWaterHeaterSizing (const T24ExceptionalConditionWaterHeaterSizing_optional& x)
      {
        this->T24ExceptionalConditionWaterHeaterSizing_ = x;
      }

      void SimProjectType::
      T24ExceptionalConditionWaterHeaterSizing (::std::auto_ptr< T24ExceptionalConditionWaterHeaterSizing_type > x)
      {
        this->T24ExceptionalConditionWaterHeaterSizing_.set (x);
      }

      const SimProjectType::T24ExcptCondWaterHeater_optional& SimProjectType::
      T24ExcptCondWaterHeater () const
      {
        return this->T24ExcptCondWaterHeater_;
      }

      SimProjectType::T24ExcptCondWaterHeater_optional& SimProjectType::
      T24ExcptCondWaterHeater ()
      {
        return this->T24ExcptCondWaterHeater_;
      }

      void SimProjectType::
      T24ExcptCondWaterHeater (const T24ExcptCondWaterHeater_type& x)
      {
        this->T24ExcptCondWaterHeater_.set (x);
      }

      void SimProjectType::
      T24ExcptCondWaterHeater (const T24ExcptCondWaterHeater_optional& x)
      {
        this->T24ExcptCondWaterHeater_ = x;
      }

      void SimProjectType::
      T24ExcptCondWaterHeater (::std::auto_ptr< T24ExcptCondWaterHeater_type > x)
      {
        this->T24ExcptCondWaterHeater_.set (x);
      }

      const SimProjectType::T24ExceptionalDesignModelFile_optional& SimProjectType::
      T24ExceptionalDesignModelFile () const
      {
        return this->T24ExceptionalDesignModelFile_;
      }

      SimProjectType::T24ExceptionalDesignModelFile_optional& SimProjectType::
      T24ExceptionalDesignModelFile ()
      {
        return this->T24ExceptionalDesignModelFile_;
      }

      void SimProjectType::
      T24ExceptionalDesignModelFile (const T24ExceptionalDesignModelFile_type& x)
      {
        this->T24ExceptionalDesignModelFile_.set (x);
      }

      void SimProjectType::
      T24ExceptionalDesignModelFile (const T24ExceptionalDesignModelFile_optional& x)
      {
        this->T24ExceptionalDesignModelFile_ = x;
      }

      void SimProjectType::
      T24ExceptionalDesignModelFile (::std::auto_ptr< T24ExceptionalDesignModelFile_type > x)
      {
        this->T24ExceptionalDesignModelFile_.set (x);
      }

      const SimProjectType::T24GeometryInputType_optional& SimProjectType::
      T24GeometryInputType () const
      {
        return this->T24GeometryInputType_;
      }

      SimProjectType::T24GeometryInputType_optional& SimProjectType::
      T24GeometryInputType ()
      {
        return this->T24GeometryInputType_;
      }

      void SimProjectType::
      T24GeometryInputType (const T24GeometryInputType_type& x)
      {
        this->T24GeometryInputType_.set (x);
      }

      void SimProjectType::
      T24GeometryInputType (const T24GeometryInputType_optional& x)
      {
        this->T24GeometryInputType_ = x;
      }

      void SimProjectType::
      T24GeometryInputType (::std::auto_ptr< T24GeometryInputType_type > x)
      {
        this->T24GeometryInputType_.set (x);
      }

      const SimProjectType::T24HolidayReference_optional& SimProjectType::
      T24HolidayReference () const
      {
        return this->T24HolidayReference_;
      }

      SimProjectType::T24HolidayReference_optional& SimProjectType::
      T24HolidayReference ()
      {
        return this->T24HolidayReference_;
      }

      void SimProjectType::
      T24HolidayReference (const T24HolidayReference_type& x)
      {
        this->T24HolidayReference_.set (x);
      }

      void SimProjectType::
      T24HolidayReference (const T24HolidayReference_optional& x)
      {
        this->T24HolidayReference_ = x;
      }

      void SimProjectType::
      T24HolidayReference (::std::auto_ptr< T24HolidayReference_type > x)
      {
        this->T24HolidayReference_.set (x);
      }

      const SimProjectType::T24HVACAutoSizing_optional& SimProjectType::
      T24HVACAutoSizing () const
      {
        return this->T24HVACAutoSizing_;
      }

      SimProjectType::T24HVACAutoSizing_optional& SimProjectType::
      T24HVACAutoSizing ()
      {
        return this->T24HVACAutoSizing_;
      }

      void SimProjectType::
      T24HVACAutoSizing (const T24HVACAutoSizing_type& x)
      {
        this->T24HVACAutoSizing_.set (x);
      }

      void SimProjectType::
      T24HVACAutoSizing (const T24HVACAutoSizing_optional& x)
      {
        this->T24HVACAutoSizing_ = x;
      }

      const SimProjectType::T24LightingDetailsLocation_optional& SimProjectType::
      T24LightingDetailsLocation () const
      {
        return this->T24LightingDetailsLocation_;
      }

      SimProjectType::T24LightingDetailsLocation_optional& SimProjectType::
      T24LightingDetailsLocation ()
      {
        return this->T24LightingDetailsLocation_;
      }

      void SimProjectType::
      T24LightingDetailsLocation (const T24LightingDetailsLocation_type& x)
      {
        this->T24LightingDetailsLocation_.set (x);
      }

      void SimProjectType::
      T24LightingDetailsLocation (const T24LightingDetailsLocation_optional& x)
      {
        this->T24LightingDetailsLocation_ = x;
      }

      void SimProjectType::
      T24LightingDetailsLocation (::std::auto_ptr< T24LightingDetailsLocation_type > x)
      {
        this->T24LightingDetailsLocation_.set (x);
      }

      const SimProjectType::T24LightingOutdoorCompliance_optional& SimProjectType::
      T24LightingOutdoorCompliance () const
      {
        return this->T24LightingOutdoorCompliance_;
      }

      SimProjectType::T24LightingOutdoorCompliance_optional& SimProjectType::
      T24LightingOutdoorCompliance ()
      {
        return this->T24LightingOutdoorCompliance_;
      }

      void SimProjectType::
      T24LightingOutdoorCompliance (const T24LightingOutdoorCompliance_type& x)
      {
        this->T24LightingOutdoorCompliance_.set (x);
      }

      void SimProjectType::
      T24LightingOutdoorCompliance (const T24LightingOutdoorCompliance_optional& x)
      {
        this->T24LightingOutdoorCompliance_ = x;
      }

      void SimProjectType::
      T24LightingOutdoorCompliance (::std::auto_ptr< T24LightingOutdoorCompliance_type > x)
      {
        this->T24LightingOutdoorCompliance_.set (x);
      }

      const SimProjectType::T24LightingSignCompliance_optional& SimProjectType::
      T24LightingSignCompliance () const
      {
        return this->T24LightingSignCompliance_;
      }

      SimProjectType::T24LightingSignCompliance_optional& SimProjectType::
      T24LightingSignCompliance ()
      {
        return this->T24LightingSignCompliance_;
      }

      void SimProjectType::
      T24LightingSignCompliance (const T24LightingSignCompliance_type& x)
      {
        this->T24LightingSignCompliance_.set (x);
      }

      void SimProjectType::
      T24LightingSignCompliance (const T24LightingSignCompliance_optional& x)
      {
        this->T24LightingSignCompliance_ = x;
      }

      void SimProjectType::
      T24LightingSignCompliance (::std::auto_ptr< T24LightingSignCompliance_type > x)
      {
        this->T24LightingSignCompliance_.set (x);
      }

      const SimProjectType::T24LightingUnconditionedCompliance_optional& SimProjectType::
      T24LightingUnconditionedCompliance () const
      {
        return this->T24LightingUnconditionedCompliance_;
      }

      SimProjectType::T24LightingUnconditionedCompliance_optional& SimProjectType::
      T24LightingUnconditionedCompliance ()
      {
        return this->T24LightingUnconditionedCompliance_;
      }

      void SimProjectType::
      T24LightingUnconditionedCompliance (const T24LightingUnconditionedCompliance_type& x)
      {
        this->T24LightingUnconditionedCompliance_.set (x);
      }

      void SimProjectType::
      T24LightingUnconditionedCompliance (const T24LightingUnconditionedCompliance_optional& x)
      {
        this->T24LightingUnconditionedCompliance_ = x;
      }

      void SimProjectType::
      T24LightingUnconditionedCompliance (::std::auto_ptr< T24LightingUnconditionedCompliance_type > x)
      {
        this->T24LightingUnconditionedCompliance_.set (x);
      }

      const SimProjectType::T24MechanicalDetailsLocation_optional& SimProjectType::
      T24MechanicalDetailsLocation () const
      {
        return this->T24MechanicalDetailsLocation_;
      }

      SimProjectType::T24MechanicalDetailsLocation_optional& SimProjectType::
      T24MechanicalDetailsLocation ()
      {
        return this->T24MechanicalDetailsLocation_;
      }

      void SimProjectType::
      T24MechanicalDetailsLocation (const T24MechanicalDetailsLocation_type& x)
      {
        this->T24MechanicalDetailsLocation_.set (x);
      }

      void SimProjectType::
      T24MechanicalDetailsLocation (const T24MechanicalDetailsLocation_optional& x)
      {
        this->T24MechanicalDetailsLocation_ = x;
      }

      void SimProjectType::
      T24MechanicalDetailsLocation (::std::auto_ptr< T24MechanicalDetailsLocation_type > x)
      {
        this->T24MechanicalDetailsLocation_.set (x);
      }

      const SimProjectType::T24MonthlyAverageTemperatureMaximumDifference_optional& SimProjectType::
      T24MonthlyAverageTemperatureMaximumDifference () const
      {
        return this->T24MonthlyAverageTemperatureMaximumDifference_;
      }

      SimProjectType::T24MonthlyAverageTemperatureMaximumDifference_optional& SimProjectType::
      T24MonthlyAverageTemperatureMaximumDifference ()
      {
        return this->T24MonthlyAverageTemperatureMaximumDifference_;
      }

      void SimProjectType::
      T24MonthlyAverageTemperatureMaximumDifference (const T24MonthlyAverageTemperatureMaximumDifference_type& x)
      {
        this->T24MonthlyAverageTemperatureMaximumDifference_.set (x);
      }

      void SimProjectType::
      T24MonthlyAverageTemperatureMaximumDifference (const T24MonthlyAverageTemperatureMaximumDifference_optional& x)
      {
        this->T24MonthlyAverageTemperatureMaximumDifference_ = x;
      }

      const SimProjectType::T24NarrativeDetails_optional& SimProjectType::
      T24NarrativeDetails () const
      {
        return this->T24NarrativeDetails_;
      }

      SimProjectType::T24NarrativeDetails_optional& SimProjectType::
      T24NarrativeDetails ()
      {
        return this->T24NarrativeDetails_;
      }

      void SimProjectType::
      T24NarrativeDetails (const T24NarrativeDetails_type& x)
      {
        this->T24NarrativeDetails_.set (x);
      }

      void SimProjectType::
      T24NarrativeDetails (const T24NarrativeDetails_optional& x)
      {
        this->T24NarrativeDetails_ = x;
      }

      void SimProjectType::
      T24NarrativeDetails (::std::auto_ptr< T24NarrativeDetails_type > x)
      {
        this->T24NarrativeDetails_.set (x);
      }

      const SimProjectType::T24NumberOfDaysPerQuickAnalysisPeriod_optional& SimProjectType::
      T24NumberOfDaysPerQuickAnalysisPeriod () const
      {
        return this->T24NumberOfDaysPerQuickAnalysisPeriod_;
      }

      SimProjectType::T24NumberOfDaysPerQuickAnalysisPeriod_optional& SimProjectType::
      T24NumberOfDaysPerQuickAnalysisPeriod ()
      {
        return this->T24NumberOfDaysPerQuickAnalysisPeriod_;
      }

      void SimProjectType::
      T24NumberOfDaysPerQuickAnalysisPeriod (const T24NumberOfDaysPerQuickAnalysisPeriod_type& x)
      {
        this->T24NumberOfDaysPerQuickAnalysisPeriod_.set (x);
      }

      void SimProjectType::
      T24NumberOfDaysPerQuickAnalysisPeriod (const T24NumberOfDaysPerQuickAnalysisPeriod_optional& x)
      {
        this->T24NumberOfDaysPerQuickAnalysisPeriod_ = x;
      }

      const SimProjectType::T24NumberOfQuickAnalysisPeriods_optional& SimProjectType::
      T24NumberOfQuickAnalysisPeriods () const
      {
        return this->T24NumberOfQuickAnalysisPeriods_;
      }

      SimProjectType::T24NumberOfQuickAnalysisPeriods_optional& SimProjectType::
      T24NumberOfQuickAnalysisPeriods ()
      {
        return this->T24NumberOfQuickAnalysisPeriods_;
      }

      void SimProjectType::
      T24NumberOfQuickAnalysisPeriods (const T24NumberOfQuickAnalysisPeriods_type& x)
      {
        this->T24NumberOfQuickAnalysisPeriods_.set (x);
      }

      void SimProjectType::
      T24NumberOfQuickAnalysisPeriods (const T24NumberOfQuickAnalysisPeriods_optional& x)
      {
        this->T24NumberOfQuickAnalysisPeriods_ = x;
      }

      const SimProjectType::T24NumberTimeStepsPerHour_optional& SimProjectType::
      T24NumberTimeStepsPerHour () const
      {
        return this->T24NumberTimeStepsPerHour_;
      }

      SimProjectType::T24NumberTimeStepsPerHour_optional& SimProjectType::
      T24NumberTimeStepsPerHour ()
      {
        return this->T24NumberTimeStepsPerHour_;
      }

      void SimProjectType::
      T24NumberTimeStepsPerHour (const T24NumberTimeStepsPerHour_type& x)
      {
        this->T24NumberTimeStepsPerHour_.set (x);
      }

      void SimProjectType::
      T24NumberTimeStepsPerHour (const T24NumberTimeStepsPerHour_optional& x)
      {
        this->T24NumberTimeStepsPerHour_ = x;
      }

      const SimProjectType::T24OccupancySensorCountReport_optional& SimProjectType::
      T24OccupancySensorCountReport () const
      {
        return this->T24OccupancySensorCountReport_;
      }

      SimProjectType::T24OccupancySensorCountReport_optional& SimProjectType::
      T24OccupancySensorCountReport ()
      {
        return this->T24OccupancySensorCountReport_;
      }

      void SimProjectType::
      T24OccupancySensorCountReport (const T24OccupancySensorCountReport_type& x)
      {
        this->T24OccupancySensorCountReport_.set (x);
      }

      void SimProjectType::
      T24OccupancySensorCountReport (const T24OccupancySensorCountReport_optional& x)
      {
        this->T24OccupancySensorCountReport_ = x;
      }

      const SimProjectType::T24OutdoorControlsReport_optional& SimProjectType::
      T24OutdoorControlsReport () const
      {
        return this->T24OutdoorControlsReport_;
      }

      SimProjectType::T24OutdoorControlsReport_optional& SimProjectType::
      T24OutdoorControlsReport ()
      {
        return this->T24OutdoorControlsReport_;
      }

      void SimProjectType::
      T24OutdoorControlsReport (const T24OutdoorControlsReport_type& x)
      {
        this->T24OutdoorControlsReport_.set (x);
      }

      void SimProjectType::
      T24OutdoorControlsReport (const T24OutdoorControlsReport_optional& x)
      {
        this->T24OutdoorControlsReport_ = x;
      }

      const SimProjectType::T24ParkingGarageMandatoryCompliance_optional& SimProjectType::
      T24ParkingGarageMandatoryCompliance () const
      {
        return this->T24ParkingGarageMandatoryCompliance_;
      }

      SimProjectType::T24ParkingGarageMandatoryCompliance_optional& SimProjectType::
      T24ParkingGarageMandatoryCompliance ()
      {
        return this->T24ParkingGarageMandatoryCompliance_;
      }

      void SimProjectType::
      T24ParkingGarageMandatoryCompliance (const T24ParkingGarageMandatoryCompliance_type& x)
      {
        this->T24ParkingGarageMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24ParkingGarageMandatoryCompliance (const T24ParkingGarageMandatoryCompliance_optional& x)
      {
        this->T24ParkingGarageMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24ParkingGarageMandatoryCompliance (::std::auto_ptr< T24ParkingGarageMandatoryCompliance_type > x)
      {
        this->T24ParkingGarageMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24PermitScope_optional& SimProjectType::
      T24PermitScope () const
      {
        return this->T24PermitScope_;
      }

      SimProjectType::T24PermitScope_optional& SimProjectType::
      T24PermitScope ()
      {
        return this->T24PermitScope_;
      }

      void SimProjectType::
      T24PermitScope (const T24PermitScope_type& x)
      {
        this->T24PermitScope_.set (x);
      }

      void SimProjectType::
      T24PermitScope (const T24PermitScope_optional& x)
      {
        this->T24PermitScope_ = x;
      }

      void SimProjectType::
      T24PermitScope (::std::auto_ptr< T24PermitScope_type > x)
      {
        this->T24PermitScope_.set (x);
      }

      const SimProjectType::T24ProcessBoilerMandatoryCompliance_optional& SimProjectType::
      T24ProcessBoilerMandatoryCompliance () const
      {
        return this->T24ProcessBoilerMandatoryCompliance_;
      }

      SimProjectType::T24ProcessBoilerMandatoryCompliance_optional& SimProjectType::
      T24ProcessBoilerMandatoryCompliance ()
      {
        return this->T24ProcessBoilerMandatoryCompliance_;
      }

      void SimProjectType::
      T24ProcessBoilerMandatoryCompliance (const T24ProcessBoilerMandatoryCompliance_type& x)
      {
        this->T24ProcessBoilerMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24ProcessBoilerMandatoryCompliance (const T24ProcessBoilerMandatoryCompliance_optional& x)
      {
        this->T24ProcessBoilerMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24ProcessBoilerMandatoryCompliance (::std::auto_ptr< T24ProcessBoilerMandatoryCompliance_type > x)
      {
        this->T24ProcessBoilerMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24QuickAnalysis_optional& SimProjectType::
      T24QuickAnalysis () const
      {
        return this->T24QuickAnalysis_;
      }

      SimProjectType::T24QuickAnalysis_optional& SimProjectType::
      T24QuickAnalysis ()
      {
        return this->T24QuickAnalysis_;
      }

      void SimProjectType::
      T24QuickAnalysis (const T24QuickAnalysis_type& x)
      {
        this->T24QuickAnalysis_.set (x);
      }

      void SimProjectType::
      T24QuickAnalysis (const T24QuickAnalysis_optional& x)
      {
        this->T24QuickAnalysis_ = x;
      }

      const SimProjectType::T24QuickAnalysisWeekNumbers_optional& SimProjectType::
      T24QuickAnalysisWeekNumbers () const
      {
        return this->T24QuickAnalysisWeekNumbers_;
      }

      SimProjectType::T24QuickAnalysisWeekNumbers_optional& SimProjectType::
      T24QuickAnalysisWeekNumbers ()
      {
        return this->T24QuickAnalysisWeekNumbers_;
      }

      void SimProjectType::
      T24QuickAnalysisWeekNumbers (const T24QuickAnalysisWeekNumbers_type& x)
      {
        this->T24QuickAnalysisWeekNumbers_.set (x);
      }

      void SimProjectType::
      T24QuickAnalysisWeekNumbers (const T24QuickAnalysisWeekNumbers_optional& x)
      {
        this->T24QuickAnalysisWeekNumbers_ = x;
      }

      void SimProjectType::
      T24QuickAnalysisWeekNumbers (::std::auto_ptr< T24QuickAnalysisWeekNumbers_type > x)
      {
        this->T24QuickAnalysisWeekNumbers_.set (x);
      }

      const SimProjectType::T24RefrigerationWarehouseMandatoryCompliance_optional& SimProjectType::
      T24RefrigerationWarehouseMandatoryCompliance () const
      {
        return this->T24RefrigerationWarehouseMandatoryCompliance_;
      }

      SimProjectType::T24RefrigerationWarehouseMandatoryCompliance_optional& SimProjectType::
      T24RefrigerationWarehouseMandatoryCompliance ()
      {
        return this->T24RefrigerationWarehouseMandatoryCompliance_;
      }

      void SimProjectType::
      T24RefrigerationWarehouseMandatoryCompliance (const T24RefrigerationWarehouseMandatoryCompliance_type& x)
      {
        this->T24RefrigerationWarehouseMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24RefrigerationWarehouseMandatoryCompliance (const T24RefrigerationWarehouseMandatoryCompliance_optional& x)
      {
        this->T24RefrigerationWarehouseMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24RefrigerationWarehouseMandatoryCompliance (::std::auto_ptr< T24RefrigerationWarehouseMandatoryCompliance_type > x)
      {
        this->T24RefrigerationWarehouseMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24RuleRptFileAppend_optional& SimProjectType::
      T24RuleRptFileAppend () const
      {
        return this->T24RuleRptFileAppend_;
      }

      SimProjectType::T24RuleRptFileAppend_optional& SimProjectType::
      T24RuleRptFileAppend ()
      {
        return this->T24RuleRptFileAppend_;
      }

      void SimProjectType::
      T24RuleRptFileAppend (const T24RuleRptFileAppend_type& x)
      {
        this->T24RuleRptFileAppend_.set (x);
      }

      void SimProjectType::
      T24RuleRptFileAppend (const T24RuleRptFileAppend_optional& x)
      {
        this->T24RuleRptFileAppend_ = x;
      }

      void SimProjectType::
      T24RuleRptFileAppend (::std::auto_ptr< T24RuleRptFileAppend_type > x)
      {
        this->T24RuleRptFileAppend_.set (x);
      }

      const SimProjectType::T24RuleRptType_optional& SimProjectType::
      T24RuleRptType () const
      {
        return this->T24RuleRptType_;
      }

      SimProjectType::T24RuleRptType_optional& SimProjectType::
      T24RuleRptType ()
      {
        return this->T24RuleRptType_;
      }

      void SimProjectType::
      T24RuleRptType (const T24RuleRptType_type& x)
      {
        this->T24RuleRptType_.set (x);
      }

      void SimProjectType::
      T24RuleRptType (const T24RuleRptType_optional& x)
      {
        this->T24RuleRptType_ = x;
      }

      void SimProjectType::
      T24RuleRptType (::std::auto_ptr< T24RuleRptType_type > x)
      {
        this->T24RuleRptType_.set (x);
      }

      const SimProjectType::T24SimpleHVACMandatoryCompliance_optional& SimProjectType::
      T24SimpleHVACMandatoryCompliance () const
      {
        return this->T24SimpleHVACMandatoryCompliance_;
      }

      SimProjectType::T24SimpleHVACMandatoryCompliance_optional& SimProjectType::
      T24SimpleHVACMandatoryCompliance ()
      {
        return this->T24SimpleHVACMandatoryCompliance_;
      }

      void SimProjectType::
      T24SimpleHVACMandatoryCompliance (const T24SimpleHVACMandatoryCompliance_type& x)
      {
        this->T24SimpleHVACMandatoryCompliance_.set (x);
      }

      void SimProjectType::
      T24SimpleHVACMandatoryCompliance (const T24SimpleHVACMandatoryCompliance_optional& x)
      {
        this->T24SimpleHVACMandatoryCompliance_ = x;
      }

      void SimProjectType::
      T24SimpleHVACMandatoryCompliance (::std::auto_ptr< T24SimpleHVACMandatoryCompliance_type > x)
      {
        this->T24SimpleHVACMandatoryCompliance_.set (x);
      }

      const SimProjectType::T24SimulateDesignDays_optional& SimProjectType::
      T24SimulateDesignDays () const
      {
        return this->T24SimulateDesignDays_;
      }

      SimProjectType::T24SimulateDesignDays_optional& SimProjectType::
      T24SimulateDesignDays ()
      {
        return this->T24SimulateDesignDays_;
      }

      void SimProjectType::
      T24SimulateDesignDays (const T24SimulateDesignDays_type& x)
      {
        this->T24SimulateDesignDays_.set (x);
      }

      void SimProjectType::
      T24SimulateDesignDays (const T24SimulateDesignDays_optional& x)
      {
        this->T24SimulateDesignDays_ = x;
      }

      const SimProjectType::T24SimVarsDaylighting_optional& SimProjectType::
      T24SimVarsDaylighting () const
      {
        return this->T24SimVarsDaylighting_;
      }

      SimProjectType::T24SimVarsDaylighting_optional& SimProjectType::
      T24SimVarsDaylighting ()
      {
        return this->T24SimVarsDaylighting_;
      }

      void SimProjectType::
      T24SimVarsDaylighting (const T24SimVarsDaylighting_type& x)
      {
        this->T24SimVarsDaylighting_.set (x);
      }

      void SimProjectType::
      T24SimVarsDaylighting (const T24SimVarsDaylighting_optional& x)
      {
        this->T24SimVarsDaylighting_ = x;
      }

      const SimProjectType::T24SimVarsHVACPrimary_optional& SimProjectType::
      T24SimVarsHVACPrimary () const
      {
        return this->T24SimVarsHVACPrimary_;
      }

      SimProjectType::T24SimVarsHVACPrimary_optional& SimProjectType::
      T24SimVarsHVACPrimary ()
      {
        return this->T24SimVarsHVACPrimary_;
      }

      void SimProjectType::
      T24SimVarsHVACPrimary (const T24SimVarsHVACPrimary_type& x)
      {
        this->T24SimVarsHVACPrimary_.set (x);
      }

      void SimProjectType::
      T24SimVarsHVACPrimary (const T24SimVarsHVACPrimary_optional& x)
      {
        this->T24SimVarsHVACPrimary_ = x;
      }

      const SimProjectType::T24SimVarsHVACSecondary_optional& SimProjectType::
      T24SimVarsHVACSecondary () const
      {
        return this->T24SimVarsHVACSecondary_;
      }

      SimProjectType::T24SimVarsHVACSecondary_optional& SimProjectType::
      T24SimVarsHVACSecondary ()
      {
        return this->T24SimVarsHVACSecondary_;
      }

      void SimProjectType::
      T24SimVarsHVACSecondary (const T24SimVarsHVACSecondary_type& x)
      {
        this->T24SimVarsHVACSecondary_.set (x);
      }

      void SimProjectType::
      T24SimVarsHVACSecondary (const T24SimVarsHVACSecondary_optional& x)
      {
        this->T24SimVarsHVACSecondary_ = x;
      }

      const SimProjectType::T24SimVarsHVACZone_optional& SimProjectType::
      T24SimVarsHVACZone () const
      {
        return this->T24SimVarsHVACZone_;
      }

      SimProjectType::T24SimVarsHVACZone_optional& SimProjectType::
      T24SimVarsHVACZone ()
      {
        return this->T24SimVarsHVACZone_;
      }

      void SimProjectType::
      T24SimVarsHVACZone (const T24SimVarsHVACZone_type& x)
      {
        this->T24SimVarsHVACZone_.set (x);
      }

      void SimProjectType::
      T24SimVarsHVACZone (const T24SimVarsHVACZone_optional& x)
      {
        this->T24SimVarsHVACZone_ = x;
      }

      const SimProjectType::T24SimVarsSite_optional& SimProjectType::
      T24SimVarsSite () const
      {
        return this->T24SimVarsSite_;
      }

      SimProjectType::T24SimVarsSite_optional& SimProjectType::
      T24SimVarsSite ()
      {
        return this->T24SimVarsSite_;
      }

      void SimProjectType::
      T24SimVarsSite (const T24SimVarsSite_type& x)
      {
        this->T24SimVarsSite_.set (x);
      }

      void SimProjectType::
      T24SimVarsSite (const T24SimVarsSite_optional& x)
      {
        this->T24SimVarsSite_ = x;
      }

      const SimProjectType::T24SimVarsThermalZone_optional& SimProjectType::
      T24SimVarsThermalZone () const
      {
        return this->T24SimVarsThermalZone_;
      }

      SimProjectType::T24SimVarsThermalZone_optional& SimProjectType::
      T24SimVarsThermalZone ()
      {
        return this->T24SimVarsThermalZone_;
      }

      void SimProjectType::
      T24SimVarsThermalZone (const T24SimVarsThermalZone_type& x)
      {
        this->T24SimVarsThermalZone_.set (x);
      }

      void SimProjectType::
      T24SimVarsThermalZone (const T24SimVarsThermalZone_optional& x)
      {
        this->T24SimVarsThermalZone_ = x;
      }

      const SimProjectType::T24UseExceptionalDesignModel_optional& SimProjectType::
      T24UseExceptionalDesignModel () const
      {
        return this->T24UseExceptionalDesignModel_;
      }

      SimProjectType::T24UseExceptionalDesignModel_optional& SimProjectType::
      T24UseExceptionalDesignModel ()
      {
        return this->T24UseExceptionalDesignModel_;
      }

      void SimProjectType::
      T24UseExceptionalDesignModel (const T24UseExceptionalDesignModel_type& x)
      {
        this->T24UseExceptionalDesignModel_.set (x);
      }

      void SimProjectType::
      T24UseExceptionalDesignModel (const T24UseExceptionalDesignModel_optional& x)
      {
        this->T24UseExceptionalDesignModel_ = x;
      }

      const SimProjectType::T24SiteFuelType_optional& SimProjectType::
      T24SiteFuelType () const
      {
        return this->T24SiteFuelType_;
      }

      SimProjectType::T24SiteFuelType_optional& SimProjectType::
      T24SiteFuelType ()
      {
        return this->T24SiteFuelType_;
      }

      void SimProjectType::
      T24SiteFuelType (const T24SiteFuelType_type& x)
      {
        this->T24SiteFuelType_.set (x);
      }

      void SimProjectType::
      T24SiteFuelType (const T24SiteFuelType_optional& x)
      {
        this->T24SiteFuelType_ = x;
      }

      void SimProjectType::
      T24SiteFuelType (::std::auto_ptr< T24SiteFuelType_type > x)
      {
        this->T24SiteFuelType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimProjectType
      //

      SimProjectType::
      SimProjectType ()
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (),
        RepresentationMaps_ (this),
        Tag_ (this),
        ProjectClientOwner_ (this),
        ProjectArchitect_ (this),
        ProjectUnitsList_ (this),
        T24ProjectTeamList_ (this),
        T24AnalysisType_ (this),
        T24AutomaticDaylightingReport_ (this),
        T24AutomaticTimeSwitchReport_ (this),
        T24AverageDryBulbTemperature_ (this),
        T24AverageElectricityCost_ (this),
        T24AverageOtherFuelCost_ (this),
        T24CommercialRefrigerationMandatoryCompliance_ (this),
        T24ComplexHVACMandatoryCompliance_ (this),
        T24CompliancePathComputerRoom_ (this),
        T24CompliancePathDomesticHotWater_ (this),
        T24CompliancePathEnvelope_ (this),
        T24CompliancePathKitchen_ (this),
        T24CompliancePathLaboratory_ (this),
        T24CompliancePathLighting_ (this),
        T24CompliancePathMechanical_ (this),
        T24ComplianceReportPDF_ (this),
        T24ComplianceReportXML_ (this),
        T24ComplianceType_ (this),
        T24CompressedAirMandatoryCompliance_ (this),
        T24DefaultDaylightingControls_ (this),
        T24DemandResponsiveReport_ (this),
        T24DisableDaylightingControls_ (this),
        T24DomesticHotWaterDetailsLocation_ (this),
        T24ElectricalMandatoryCompliance_ (this),
        T24EnvelopeDetailsLocation_ (this),
        T24ExcptCondBldg_ (this),
        T24ExcptCondExteriorLighting_ (this),
        T24ExcptCondNarrative_ (this),
        T24ExcptCondNoCoolingSystem_ (this),
        T24ExcptCondRatedCapacity_ (this),
        T24ExceptionalConditionWaterHeaterSizing_ (this),
        T24ExcptCondWaterHeater_ (this),
        T24ExceptionalDesignModelFile_ (this),
        T24GeometryInputType_ (this),
        T24HolidayReference_ (this),
        T24HVACAutoSizing_ (this),
        T24LightingDetailsLocation_ (this),
        T24LightingOutdoorCompliance_ (this),
        T24LightingSignCompliance_ (this),
        T24LightingUnconditionedCompliance_ (this),
        T24MechanicalDetailsLocation_ (this),
        T24MonthlyAverageTemperatureMaximumDifference_ (this),
        T24NarrativeDetails_ (this),
        T24NumberOfDaysPerQuickAnalysisPeriod_ (this),
        T24NumberOfQuickAnalysisPeriods_ (this),
        T24NumberTimeStepsPerHour_ (this),
        T24OccupancySensorCountReport_ (this),
        T24OutdoorControlsReport_ (this),
        T24ParkingGarageMandatoryCompliance_ (this),
        T24PermitScope_ (this),
        T24ProcessBoilerMandatoryCompliance_ (this),
        T24QuickAnalysis_ (this),
        T24QuickAnalysisWeekNumbers_ (this),
        T24RefrigerationWarehouseMandatoryCompliance_ (this),
        T24RuleRptFileAppend_ (this),
        T24RuleRptType_ (this),
        T24SimpleHVACMandatoryCompliance_ (this),
        T24SimulateDesignDays_ (this),
        T24SimVarsDaylighting_ (this),
        T24SimVarsHVACPrimary_ (this),
        T24SimVarsHVACSecondary_ (this),
        T24SimVarsHVACZone_ (this),
        T24SimVarsSite_ (this),
        T24SimVarsThermalZone_ (this),
        T24UseExceptionalDesignModel_ (this),
        T24SiteFuelType_ (this)
      {
      }

      SimProjectType::
      SimProjectType (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (RefId),
        RepresentationMaps_ (this),
        Tag_ (this),
        ProjectClientOwner_ (this),
        ProjectArchitect_ (this),
        ProjectUnitsList_ (this),
        T24ProjectTeamList_ (this),
        T24AnalysisType_ (this),
        T24AutomaticDaylightingReport_ (this),
        T24AutomaticTimeSwitchReport_ (this),
        T24AverageDryBulbTemperature_ (this),
        T24AverageElectricityCost_ (this),
        T24AverageOtherFuelCost_ (this),
        T24CommercialRefrigerationMandatoryCompliance_ (this),
        T24ComplexHVACMandatoryCompliance_ (this),
        T24CompliancePathComputerRoom_ (this),
        T24CompliancePathDomesticHotWater_ (this),
        T24CompliancePathEnvelope_ (this),
        T24CompliancePathKitchen_ (this),
        T24CompliancePathLaboratory_ (this),
        T24CompliancePathLighting_ (this),
        T24CompliancePathMechanical_ (this),
        T24ComplianceReportPDF_ (this),
        T24ComplianceReportXML_ (this),
        T24ComplianceType_ (this),
        T24CompressedAirMandatoryCompliance_ (this),
        T24DefaultDaylightingControls_ (this),
        T24DemandResponsiveReport_ (this),
        T24DisableDaylightingControls_ (this),
        T24DomesticHotWaterDetailsLocation_ (this),
        T24ElectricalMandatoryCompliance_ (this),
        T24EnvelopeDetailsLocation_ (this),
        T24ExcptCondBldg_ (this),
        T24ExcptCondExteriorLighting_ (this),
        T24ExcptCondNarrative_ (this),
        T24ExcptCondNoCoolingSystem_ (this),
        T24ExcptCondRatedCapacity_ (this),
        T24ExceptionalConditionWaterHeaterSizing_ (this),
        T24ExcptCondWaterHeater_ (this),
        T24ExceptionalDesignModelFile_ (this),
        T24GeometryInputType_ (this),
        T24HolidayReference_ (this),
        T24HVACAutoSizing_ (this),
        T24LightingDetailsLocation_ (this),
        T24LightingOutdoorCompliance_ (this),
        T24LightingSignCompliance_ (this),
        T24LightingUnconditionedCompliance_ (this),
        T24MechanicalDetailsLocation_ (this),
        T24MonthlyAverageTemperatureMaximumDifference_ (this),
        T24NarrativeDetails_ (this),
        T24NumberOfDaysPerQuickAnalysisPeriod_ (this),
        T24NumberOfQuickAnalysisPeriods_ (this),
        T24NumberTimeStepsPerHour_ (this),
        T24OccupancySensorCountReport_ (this),
        T24OutdoorControlsReport_ (this),
        T24ParkingGarageMandatoryCompliance_ (this),
        T24PermitScope_ (this),
        T24ProcessBoilerMandatoryCompliance_ (this),
        T24QuickAnalysis_ (this),
        T24QuickAnalysisWeekNumbers_ (this),
        T24RefrigerationWarehouseMandatoryCompliance_ (this),
        T24RuleRptFileAppend_ (this),
        T24RuleRptType_ (this),
        T24SimpleHVACMandatoryCompliance_ (this),
        T24SimulateDesignDays_ (this),
        T24SimVarsDaylighting_ (this),
        T24SimVarsHVACPrimary_ (this),
        T24SimVarsHVACSecondary_ (this),
        T24SimVarsHVACZone_ (this),
        T24SimVarsSite_ (this),
        T24SimVarsThermalZone_ (this),
        T24UseExceptionalDesignModel_ (this),
        T24SiteFuelType_ (this)
      {
      }

      SimProjectType::
      SimProjectType (const SimProjectType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (x, f, c),
        RepresentationMaps_ (x.RepresentationMaps_, f, this),
        Tag_ (x.Tag_, f, this),
        ProjectClientOwner_ (x.ProjectClientOwner_, f, this),
        ProjectArchitect_ (x.ProjectArchitect_, f, this),
        ProjectUnitsList_ (x.ProjectUnitsList_, f, this),
        T24ProjectTeamList_ (x.T24ProjectTeamList_, f, this),
        T24AnalysisType_ (x.T24AnalysisType_, f, this),
        T24AutomaticDaylightingReport_ (x.T24AutomaticDaylightingReport_, f, this),
        T24AutomaticTimeSwitchReport_ (x.T24AutomaticTimeSwitchReport_, f, this),
        T24AverageDryBulbTemperature_ (x.T24AverageDryBulbTemperature_, f, this),
        T24AverageElectricityCost_ (x.T24AverageElectricityCost_, f, this),
        T24AverageOtherFuelCost_ (x.T24AverageOtherFuelCost_, f, this),
        T24CommercialRefrigerationMandatoryCompliance_ (x.T24CommercialRefrigerationMandatoryCompliance_, f, this),
        T24ComplexHVACMandatoryCompliance_ (x.T24ComplexHVACMandatoryCompliance_, f, this),
        T24CompliancePathComputerRoom_ (x.T24CompliancePathComputerRoom_, f, this),
        T24CompliancePathDomesticHotWater_ (x.T24CompliancePathDomesticHotWater_, f, this),
        T24CompliancePathEnvelope_ (x.T24CompliancePathEnvelope_, f, this),
        T24CompliancePathKitchen_ (x.T24CompliancePathKitchen_, f, this),
        T24CompliancePathLaboratory_ (x.T24CompliancePathLaboratory_, f, this),
        T24CompliancePathLighting_ (x.T24CompliancePathLighting_, f, this),
        T24CompliancePathMechanical_ (x.T24CompliancePathMechanical_, f, this),
        T24ComplianceReportPDF_ (x.T24ComplianceReportPDF_, f, this),
        T24ComplianceReportXML_ (x.T24ComplianceReportXML_, f, this),
        T24ComplianceType_ (x.T24ComplianceType_, f, this),
        T24CompressedAirMandatoryCompliance_ (x.T24CompressedAirMandatoryCompliance_, f, this),
        T24DefaultDaylightingControls_ (x.T24DefaultDaylightingControls_, f, this),
        T24DemandResponsiveReport_ (x.T24DemandResponsiveReport_, f, this),
        T24DisableDaylightingControls_ (x.T24DisableDaylightingControls_, f, this),
        T24DomesticHotWaterDetailsLocation_ (x.T24DomesticHotWaterDetailsLocation_, f, this),
        T24ElectricalMandatoryCompliance_ (x.T24ElectricalMandatoryCompliance_, f, this),
        T24EnvelopeDetailsLocation_ (x.T24EnvelopeDetailsLocation_, f, this),
        T24ExcptCondBldg_ (x.T24ExcptCondBldg_, f, this),
        T24ExcptCondExteriorLighting_ (x.T24ExcptCondExteriorLighting_, f, this),
        T24ExcptCondNarrative_ (x.T24ExcptCondNarrative_, f, this),
        T24ExcptCondNoCoolingSystem_ (x.T24ExcptCondNoCoolingSystem_, f, this),
        T24ExcptCondRatedCapacity_ (x.T24ExcptCondRatedCapacity_, f, this),
        T24ExceptionalConditionWaterHeaterSizing_ (x.T24ExceptionalConditionWaterHeaterSizing_, f, this),
        T24ExcptCondWaterHeater_ (x.T24ExcptCondWaterHeater_, f, this),
        T24ExceptionalDesignModelFile_ (x.T24ExceptionalDesignModelFile_, f, this),
        T24GeometryInputType_ (x.T24GeometryInputType_, f, this),
        T24HolidayReference_ (x.T24HolidayReference_, f, this),
        T24HVACAutoSizing_ (x.T24HVACAutoSizing_, f, this),
        T24LightingDetailsLocation_ (x.T24LightingDetailsLocation_, f, this),
        T24LightingOutdoorCompliance_ (x.T24LightingOutdoorCompliance_, f, this),
        T24LightingSignCompliance_ (x.T24LightingSignCompliance_, f, this),
        T24LightingUnconditionedCompliance_ (x.T24LightingUnconditionedCompliance_, f, this),
        T24MechanicalDetailsLocation_ (x.T24MechanicalDetailsLocation_, f, this),
        T24MonthlyAverageTemperatureMaximumDifference_ (x.T24MonthlyAverageTemperatureMaximumDifference_, f, this),
        T24NarrativeDetails_ (x.T24NarrativeDetails_, f, this),
        T24NumberOfDaysPerQuickAnalysisPeriod_ (x.T24NumberOfDaysPerQuickAnalysisPeriod_, f, this),
        T24NumberOfQuickAnalysisPeriods_ (x.T24NumberOfQuickAnalysisPeriods_, f, this),
        T24NumberTimeStepsPerHour_ (x.T24NumberTimeStepsPerHour_, f, this),
        T24OccupancySensorCountReport_ (x.T24OccupancySensorCountReport_, f, this),
        T24OutdoorControlsReport_ (x.T24OutdoorControlsReport_, f, this),
        T24ParkingGarageMandatoryCompliance_ (x.T24ParkingGarageMandatoryCompliance_, f, this),
        T24PermitScope_ (x.T24PermitScope_, f, this),
        T24ProcessBoilerMandatoryCompliance_ (x.T24ProcessBoilerMandatoryCompliance_, f, this),
        T24QuickAnalysis_ (x.T24QuickAnalysis_, f, this),
        T24QuickAnalysisWeekNumbers_ (x.T24QuickAnalysisWeekNumbers_, f, this),
        T24RefrigerationWarehouseMandatoryCompliance_ (x.T24RefrigerationWarehouseMandatoryCompliance_, f, this),
        T24RuleRptFileAppend_ (x.T24RuleRptFileAppend_, f, this),
        T24RuleRptType_ (x.T24RuleRptType_, f, this),
        T24SimpleHVACMandatoryCompliance_ (x.T24SimpleHVACMandatoryCompliance_, f, this),
        T24SimulateDesignDays_ (x.T24SimulateDesignDays_, f, this),
        T24SimVarsDaylighting_ (x.T24SimVarsDaylighting_, f, this),
        T24SimVarsHVACPrimary_ (x.T24SimVarsHVACPrimary_, f, this),
        T24SimVarsHVACSecondary_ (x.T24SimVarsHVACSecondary_, f, this),
        T24SimVarsHVACZone_ (x.T24SimVarsHVACZone_, f, this),
        T24SimVarsSite_ (x.T24SimVarsSite_, f, this),
        T24SimVarsThermalZone_ (x.T24SimVarsThermalZone_, f, this),
        T24UseExceptionalDesignModel_ (x.T24UseExceptionalDesignModel_, f, this),
        T24SiteFuelType_ (x.T24SiteFuelType_, f, this)
      {
      }

      SimProjectType::
      SimProjectType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (e, f | ::xml_schema::flags::base, c),
        RepresentationMaps_ (this),
        Tag_ (this),
        ProjectClientOwner_ (this),
        ProjectArchitect_ (this),
        ProjectUnitsList_ (this),
        T24ProjectTeamList_ (this),
        T24AnalysisType_ (this),
        T24AutomaticDaylightingReport_ (this),
        T24AutomaticTimeSwitchReport_ (this),
        T24AverageDryBulbTemperature_ (this),
        T24AverageElectricityCost_ (this),
        T24AverageOtherFuelCost_ (this),
        T24CommercialRefrigerationMandatoryCompliance_ (this),
        T24ComplexHVACMandatoryCompliance_ (this),
        T24CompliancePathComputerRoom_ (this),
        T24CompliancePathDomesticHotWater_ (this),
        T24CompliancePathEnvelope_ (this),
        T24CompliancePathKitchen_ (this),
        T24CompliancePathLaboratory_ (this),
        T24CompliancePathLighting_ (this),
        T24CompliancePathMechanical_ (this),
        T24ComplianceReportPDF_ (this),
        T24ComplianceReportXML_ (this),
        T24ComplianceType_ (this),
        T24CompressedAirMandatoryCompliance_ (this),
        T24DefaultDaylightingControls_ (this),
        T24DemandResponsiveReport_ (this),
        T24DisableDaylightingControls_ (this),
        T24DomesticHotWaterDetailsLocation_ (this),
        T24ElectricalMandatoryCompliance_ (this),
        T24EnvelopeDetailsLocation_ (this),
        T24ExcptCondBldg_ (this),
        T24ExcptCondExteriorLighting_ (this),
        T24ExcptCondNarrative_ (this),
        T24ExcptCondNoCoolingSystem_ (this),
        T24ExcptCondRatedCapacity_ (this),
        T24ExceptionalConditionWaterHeaterSizing_ (this),
        T24ExcptCondWaterHeater_ (this),
        T24ExceptionalDesignModelFile_ (this),
        T24GeometryInputType_ (this),
        T24HolidayReference_ (this),
        T24HVACAutoSizing_ (this),
        T24LightingDetailsLocation_ (this),
        T24LightingOutdoorCompliance_ (this),
        T24LightingSignCompliance_ (this),
        T24LightingUnconditionedCompliance_ (this),
        T24MechanicalDetailsLocation_ (this),
        T24MonthlyAverageTemperatureMaximumDifference_ (this),
        T24NarrativeDetails_ (this),
        T24NumberOfDaysPerQuickAnalysisPeriod_ (this),
        T24NumberOfQuickAnalysisPeriods_ (this),
        T24NumberTimeStepsPerHour_ (this),
        T24OccupancySensorCountReport_ (this),
        T24OutdoorControlsReport_ (this),
        T24ParkingGarageMandatoryCompliance_ (this),
        T24PermitScope_ (this),
        T24ProcessBoilerMandatoryCompliance_ (this),
        T24QuickAnalysis_ (this),
        T24QuickAnalysisWeekNumbers_ (this),
        T24RefrigerationWarehouseMandatoryCompliance_ (this),
        T24RuleRptFileAppend_ (this),
        T24RuleRptType_ (this),
        T24SimpleHVACMandatoryCompliance_ (this),
        T24SimulateDesignDays_ (this),
        T24SimVarsDaylighting_ (this),
        T24SimVarsHVACPrimary_ (this),
        T24SimVarsHVACSecondary_ (this),
        T24SimVarsHVACZone_ (this),
        T24SimVarsSite_ (this),
        T24SimVarsThermalZone_ (this),
        T24UseExceptionalDesignModel_ (this),
        T24SiteFuelType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimProjectType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimObjectTypeDefinition::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RepresentationMaps
          //
          if (n.name () == "RepresentationMaps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< RepresentationMaps_type > r (
              RepresentationMaps_traits::create (i, f, this));

            if (!this->RepresentationMaps_)
            {
              this->RepresentationMaps_.set (r);
              continue;
            }
          }

          // Tag
          //
          if (n.name () == "Tag" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Tag_type > r (
              Tag_traits::create (i, f, this));

            if (!this->Tag_)
            {
              this->Tag_.set (r);
              continue;
            }
          }

          // ProjectClientOwner
          //
          if (n.name () == "ProjectClientOwner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectClientOwner_type > r (
              ProjectClientOwner_traits::create (i, f, this));

            if (!this->ProjectClientOwner_)
            {
              this->ProjectClientOwner_.set (r);
              continue;
            }
          }

          // ProjectArchitect
          //
          if (n.name () == "ProjectArchitect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectArchitect_type > r (
              ProjectArchitect_traits::create (i, f, this));

            if (!this->ProjectArchitect_)
            {
              this->ProjectArchitect_.set (r);
              continue;
            }
          }

          // ProjectUnitsList
          //
          if (n.name () == "ProjectUnitsList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectUnitsList_type > r (
              ProjectUnitsList_traits::create (i, f, this));

            if (!this->ProjectUnitsList_)
            {
              this->ProjectUnitsList_.set (r);
              continue;
            }
          }

          // T24ProjectTeamList
          //
          if (n.name () == "T24ProjectTeamList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ProjectTeamList_type > r (
              T24ProjectTeamList_traits::create (i, f, this));

            if (!this->T24ProjectTeamList_)
            {
              this->T24ProjectTeamList_.set (r);
              continue;
            }
          }

          // T24AnalysisType
          //
          if (n.name () == "T24AnalysisType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24AnalysisType_type > r (
              T24AnalysisType_traits::create (i, f, this));

            if (!this->T24AnalysisType_)
            {
              this->T24AnalysisType_.set (r);
              continue;
            }
          }

          // T24AutomaticDaylightingReport
          //
          if (n.name () == "T24AutomaticDaylightingReport" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AutomaticDaylightingReport_)
            {
              this->T24AutomaticDaylightingReport_.set (T24AutomaticDaylightingReport_traits::create (i, f, this));
              continue;
            }
          }

          // T24AutomaticTimeSwitchReport
          //
          if (n.name () == "T24AutomaticTimeSwitchReport" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AutomaticTimeSwitchReport_)
            {
              this->T24AutomaticTimeSwitchReport_.set (T24AutomaticTimeSwitchReport_traits::create (i, f, this));
              continue;
            }
          }

          // T24AverageDryBulbTemperature
          //
          if (n.name () == "T24AverageDryBulbTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AverageDryBulbTemperature_)
            {
              this->T24AverageDryBulbTemperature_.set (T24AverageDryBulbTemperature_traits::create (i, f, this));
              continue;
            }
          }

          // T24AverageElectricityCost
          //
          if (n.name () == "T24AverageElectricityCost" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AverageElectricityCost_)
            {
              this->T24AverageElectricityCost_.set (T24AverageElectricityCost_traits::create (i, f, this));
              continue;
            }
          }

          // T24AverageOtherFuelCost
          //
          if (n.name () == "T24AverageOtherFuelCost" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24AverageOtherFuelCost_)
            {
              this->T24AverageOtherFuelCost_.set (T24AverageOtherFuelCost_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommercialRefrigerationMandatoryCompliance
          //
          if (n.name () == "T24CommercialRefrigerationMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CommercialRefrigerationMandatoryCompliance_type > r (
              T24CommercialRefrigerationMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24CommercialRefrigerationMandatoryCompliance_)
            {
              this->T24CommercialRefrigerationMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24ComplexHVACMandatoryCompliance
          //
          if (n.name () == "T24ComplexHVACMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ComplexHVACMandatoryCompliance_type > r (
              T24ComplexHVACMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24ComplexHVACMandatoryCompliance_)
            {
              this->T24ComplexHVACMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24CompliancePathComputerRoom
          //
          if (n.name () == "T24CompliancePathComputerRoom" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathComputerRoom_type > r (
              T24CompliancePathComputerRoom_traits::create (i, f, this));

            if (!this->T24CompliancePathComputerRoom_)
            {
              this->T24CompliancePathComputerRoom_.set (r);
              continue;
            }
          }

          // T24CompliancePathDomesticHotWater
          //
          if (n.name () == "T24CompliancePathDomesticHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathDomesticHotWater_type > r (
              T24CompliancePathDomesticHotWater_traits::create (i, f, this));

            if (!this->T24CompliancePathDomesticHotWater_)
            {
              this->T24CompliancePathDomesticHotWater_.set (r);
              continue;
            }
          }

          // T24CompliancePathEnvelope
          //
          if (n.name () == "T24CompliancePathEnvelope" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathEnvelope_type > r (
              T24CompliancePathEnvelope_traits::create (i, f, this));

            if (!this->T24CompliancePathEnvelope_)
            {
              this->T24CompliancePathEnvelope_.set (r);
              continue;
            }
          }

          // T24CompliancePathKitchen
          //
          if (n.name () == "T24CompliancePathKitchen" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathKitchen_type > r (
              T24CompliancePathKitchen_traits::create (i, f, this));

            if (!this->T24CompliancePathKitchen_)
            {
              this->T24CompliancePathKitchen_.set (r);
              continue;
            }
          }

          // T24CompliancePathLaboratory
          //
          if (n.name () == "T24CompliancePathLaboratory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathLaboratory_type > r (
              T24CompliancePathLaboratory_traits::create (i, f, this));

            if (!this->T24CompliancePathLaboratory_)
            {
              this->T24CompliancePathLaboratory_.set (r);
              continue;
            }
          }

          // T24CompliancePathLighting
          //
          if (n.name () == "T24CompliancePathLighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathLighting_type > r (
              T24CompliancePathLighting_traits::create (i, f, this));

            if (!this->T24CompliancePathLighting_)
            {
              this->T24CompliancePathLighting_.set (r);
              continue;
            }
          }

          // T24CompliancePathMechanical
          //
          if (n.name () == "T24CompliancePathMechanical" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompliancePathMechanical_type > r (
              T24CompliancePathMechanical_traits::create (i, f, this));

            if (!this->T24CompliancePathMechanical_)
            {
              this->T24CompliancePathMechanical_.set (r);
              continue;
            }
          }

          // T24ComplianceReportPDF
          //
          if (n.name () == "T24ComplianceReportPDF" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ComplianceReportPDF_)
            {
              this->T24ComplianceReportPDF_.set (T24ComplianceReportPDF_traits::create (i, f, this));
              continue;
            }
          }

          // T24ComplianceReportXML
          //
          if (n.name () == "T24ComplianceReportXML" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ComplianceReportXML_)
            {
              this->T24ComplianceReportXML_.set (T24ComplianceReportXML_traits::create (i, f, this));
              continue;
            }
          }

          // T24ComplianceType
          //
          if (n.name () == "T24ComplianceType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ComplianceType_type > r (
              T24ComplianceType_traits::create (i, f, this));

            if (!this->T24ComplianceType_)
            {
              this->T24ComplianceType_.set (r);
              continue;
            }
          }

          // T24CompressedAirMandatoryCompliance
          //
          if (n.name () == "T24CompressedAirMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CompressedAirMandatoryCompliance_type > r (
              T24CompressedAirMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24CompressedAirMandatoryCompliance_)
            {
              this->T24CompressedAirMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24DefaultDaylightingControls
          //
          if (n.name () == "T24DefaultDaylightingControls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24DefaultDaylightingControls_)
            {
              this->T24DefaultDaylightingControls_.set (T24DefaultDaylightingControls_traits::create (i, f, this));
              continue;
            }
          }

          // T24DemandResponsiveReport
          //
          if (n.name () == "T24DemandResponsiveReport" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24DemandResponsiveReport_)
            {
              this->T24DemandResponsiveReport_.set (T24DemandResponsiveReport_traits::create (i, f, this));
              continue;
            }
          }

          // T24DisableDaylightingControls
          //
          if (n.name () == "T24DisableDaylightingControls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24DisableDaylightingControls_)
            {
              this->T24DisableDaylightingControls_.set (T24DisableDaylightingControls_traits::create (i, f, this));
              continue;
            }
          }

          // T24DomesticHotWaterDetailsLocation
          //
          if (n.name () == "T24DomesticHotWaterDetailsLocation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24DomesticHotWaterDetailsLocation_type > r (
              T24DomesticHotWaterDetailsLocation_traits::create (i, f, this));

            if (!this->T24DomesticHotWaterDetailsLocation_)
            {
              this->T24DomesticHotWaterDetailsLocation_.set (r);
              continue;
            }
          }

          // T24ElectricalMandatoryCompliance
          //
          if (n.name () == "T24ElectricalMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ElectricalMandatoryCompliance_type > r (
              T24ElectricalMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24ElectricalMandatoryCompliance_)
            {
              this->T24ElectricalMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24EnvelopeDetailsLocation
          //
          if (n.name () == "T24EnvelopeDetailsLocation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24EnvelopeDetailsLocation_type > r (
              T24EnvelopeDetailsLocation_traits::create (i, f, this));

            if (!this->T24EnvelopeDetailsLocation_)
            {
              this->T24EnvelopeDetailsLocation_.set (r);
              continue;
            }
          }

          // T24ExcptCondBldg
          //
          if (n.name () == "T24ExcptCondBldg" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExcptCondBldg_type > r (
              T24ExcptCondBldg_traits::create (i, f, this));

            if (!this->T24ExcptCondBldg_)
            {
              this->T24ExcptCondBldg_.set (r);
              continue;
            }
          }

          // T24ExcptCondExteriorLighting
          //
          if (n.name () == "T24ExcptCondExteriorLighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExcptCondExteriorLighting_type > r (
              T24ExcptCondExteriorLighting_traits::create (i, f, this));

            if (!this->T24ExcptCondExteriorLighting_)
            {
              this->T24ExcptCondExteriorLighting_.set (r);
              continue;
            }
          }

          // T24ExcptCondNarrative
          //
          if (n.name () == "T24ExcptCondNarrative" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExcptCondNarrative_type > r (
              T24ExcptCondNarrative_traits::create (i, f, this));

            if (!this->T24ExcptCondNarrative_)
            {
              this->T24ExcptCondNarrative_.set (r);
              continue;
            }
          }

          // T24ExcptCondNoCoolingSystem
          //
          if (n.name () == "T24ExcptCondNoCoolingSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExcptCondNoCoolingSystem_type > r (
              T24ExcptCondNoCoolingSystem_traits::create (i, f, this));

            if (!this->T24ExcptCondNoCoolingSystem_)
            {
              this->T24ExcptCondNoCoolingSystem_.set (r);
              continue;
            }
          }

          // T24ExcptCondRatedCapacity
          //
          if (n.name () == "T24ExcptCondRatedCapacity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExcptCondRatedCapacity_type > r (
              T24ExcptCondRatedCapacity_traits::create (i, f, this));

            if (!this->T24ExcptCondRatedCapacity_)
            {
              this->T24ExcptCondRatedCapacity_.set (r);
              continue;
            }
          }

          // T24ExceptionalConditionWaterHeaterSizing
          //
          if (n.name () == "T24ExceptionalConditionWaterHeaterSizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExceptionalConditionWaterHeaterSizing_type > r (
              T24ExceptionalConditionWaterHeaterSizing_traits::create (i, f, this));

            if (!this->T24ExceptionalConditionWaterHeaterSizing_)
            {
              this->T24ExceptionalConditionWaterHeaterSizing_.set (r);
              continue;
            }
          }

          // T24ExcptCondWaterHeater
          //
          if (n.name () == "T24ExcptCondWaterHeater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExcptCondWaterHeater_type > r (
              T24ExcptCondWaterHeater_traits::create (i, f, this));

            if (!this->T24ExcptCondWaterHeater_)
            {
              this->T24ExcptCondWaterHeater_.set (r);
              continue;
            }
          }

          // T24ExceptionalDesignModelFile
          //
          if (n.name () == "T24ExceptionalDesignModelFile" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ExceptionalDesignModelFile_type > r (
              T24ExceptionalDesignModelFile_traits::create (i, f, this));

            if (!this->T24ExceptionalDesignModelFile_)
            {
              this->T24ExceptionalDesignModelFile_.set (r);
              continue;
            }
          }

          // T24GeometryInputType
          //
          if (n.name () == "T24GeometryInputType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24GeometryInputType_type > r (
              T24GeometryInputType_traits::create (i, f, this));

            if (!this->T24GeometryInputType_)
            {
              this->T24GeometryInputType_.set (r);
              continue;
            }
          }

          // T24HolidayReference
          //
          if (n.name () == "T24HolidayReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24HolidayReference_type > r (
              T24HolidayReference_traits::create (i, f, this));

            if (!this->T24HolidayReference_)
            {
              this->T24HolidayReference_.set (r);
              continue;
            }
          }

          // T24HVACAutoSizing
          //
          if (n.name () == "T24HVACAutoSizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24HVACAutoSizing_)
            {
              this->T24HVACAutoSizing_.set (T24HVACAutoSizing_traits::create (i, f, this));
              continue;
            }
          }

          // T24LightingDetailsLocation
          //
          if (n.name () == "T24LightingDetailsLocation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24LightingDetailsLocation_type > r (
              T24LightingDetailsLocation_traits::create (i, f, this));

            if (!this->T24LightingDetailsLocation_)
            {
              this->T24LightingDetailsLocation_.set (r);
              continue;
            }
          }

          // T24LightingOutdoorCompliance
          //
          if (n.name () == "T24LightingOutdoorCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24LightingOutdoorCompliance_type > r (
              T24LightingOutdoorCompliance_traits::create (i, f, this));

            if (!this->T24LightingOutdoorCompliance_)
            {
              this->T24LightingOutdoorCompliance_.set (r);
              continue;
            }
          }

          // T24LightingSignCompliance
          //
          if (n.name () == "T24LightingSignCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24LightingSignCompliance_type > r (
              T24LightingSignCompliance_traits::create (i, f, this));

            if (!this->T24LightingSignCompliance_)
            {
              this->T24LightingSignCompliance_.set (r);
              continue;
            }
          }

          // T24LightingUnconditionedCompliance
          //
          if (n.name () == "T24LightingUnconditionedCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24LightingUnconditionedCompliance_type > r (
              T24LightingUnconditionedCompliance_traits::create (i, f, this));

            if (!this->T24LightingUnconditionedCompliance_)
            {
              this->T24LightingUnconditionedCompliance_.set (r);
              continue;
            }
          }

          // T24MechanicalDetailsLocation
          //
          if (n.name () == "T24MechanicalDetailsLocation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24MechanicalDetailsLocation_type > r (
              T24MechanicalDetailsLocation_traits::create (i, f, this));

            if (!this->T24MechanicalDetailsLocation_)
            {
              this->T24MechanicalDetailsLocation_.set (r);
              continue;
            }
          }

          // T24MonthlyAverageTemperatureMaximumDifference
          //
          if (n.name () == "T24MonthlyAverageTemperatureMaximumDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24MonthlyAverageTemperatureMaximumDifference_)
            {
              this->T24MonthlyAverageTemperatureMaximumDifference_.set (T24MonthlyAverageTemperatureMaximumDifference_traits::create (i, f, this));
              continue;
            }
          }

          // T24NarrativeDetails
          //
          if (n.name () == "T24NarrativeDetails" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24NarrativeDetails_type > r (
              T24NarrativeDetails_traits::create (i, f, this));

            if (!this->T24NarrativeDetails_)
            {
              this->T24NarrativeDetails_.set (r);
              continue;
            }
          }

          // T24NumberOfDaysPerQuickAnalysisPeriod
          //
          if (n.name () == "T24NumberOfDaysPerQuickAnalysisPeriod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NumberOfDaysPerQuickAnalysisPeriod_)
            {
              this->T24NumberOfDaysPerQuickAnalysisPeriod_.set (T24NumberOfDaysPerQuickAnalysisPeriod_traits::create (i, f, this));
              continue;
            }
          }

          // T24NumberOfQuickAnalysisPeriods
          //
          if (n.name () == "T24NumberOfQuickAnalysisPeriods" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NumberOfQuickAnalysisPeriods_)
            {
              this->T24NumberOfQuickAnalysisPeriods_.set (T24NumberOfQuickAnalysisPeriods_traits::create (i, f, this));
              continue;
            }
          }

          // T24NumberTimeStepsPerHour
          //
          if (n.name () == "T24NumberTimeStepsPerHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24NumberTimeStepsPerHour_)
            {
              this->T24NumberTimeStepsPerHour_.set (T24NumberTimeStepsPerHour_traits::create (i, f, this));
              continue;
            }
          }

          // T24OccupancySensorCountReport
          //
          if (n.name () == "T24OccupancySensorCountReport" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24OccupancySensorCountReport_)
            {
              this->T24OccupancySensorCountReport_.set (T24OccupancySensorCountReport_traits::create (i, f, this));
              continue;
            }
          }

          // T24OutdoorControlsReport
          //
          if (n.name () == "T24OutdoorControlsReport" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24OutdoorControlsReport_)
            {
              this->T24OutdoorControlsReport_.set (T24OutdoorControlsReport_traits::create (i, f, this));
              continue;
            }
          }

          // T24ParkingGarageMandatoryCompliance
          //
          if (n.name () == "T24ParkingGarageMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ParkingGarageMandatoryCompliance_type > r (
              T24ParkingGarageMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24ParkingGarageMandatoryCompliance_)
            {
              this->T24ParkingGarageMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24PermitScope
          //
          if (n.name () == "T24PermitScope" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24PermitScope_type > r (
              T24PermitScope_traits::create (i, f, this));

            if (!this->T24PermitScope_)
            {
              this->T24PermitScope_.set (r);
              continue;
            }
          }

          // T24ProcessBoilerMandatoryCompliance
          //
          if (n.name () == "T24ProcessBoilerMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ProcessBoilerMandatoryCompliance_type > r (
              T24ProcessBoilerMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24ProcessBoilerMandatoryCompliance_)
            {
              this->T24ProcessBoilerMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24QuickAnalysis
          //
          if (n.name () == "T24QuickAnalysis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24QuickAnalysis_)
            {
              this->T24QuickAnalysis_.set (T24QuickAnalysis_traits::create (i, f, this));
              continue;
            }
          }

          // T24QuickAnalysisWeekNumbers
          //
          if (n.name () == "T24QuickAnalysisWeekNumbers" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24QuickAnalysisWeekNumbers_type > r (
              T24QuickAnalysisWeekNumbers_traits::create (i, f, this));

            if (!this->T24QuickAnalysisWeekNumbers_)
            {
              this->T24QuickAnalysisWeekNumbers_.set (r);
              continue;
            }
          }

          // T24RefrigerationWarehouseMandatoryCompliance
          //
          if (n.name () == "T24RefrigerationWarehouseMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24RefrigerationWarehouseMandatoryCompliance_type > r (
              T24RefrigerationWarehouseMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24RefrigerationWarehouseMandatoryCompliance_)
            {
              this->T24RefrigerationWarehouseMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24RuleRptFileAppend
          //
          if (n.name () == "T24RuleRptFileAppend" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24RuleRptFileAppend_type > r (
              T24RuleRptFileAppend_traits::create (i, f, this));

            if (!this->T24RuleRptFileAppend_)
            {
              this->T24RuleRptFileAppend_.set (r);
              continue;
            }
          }

          // T24RuleRptType
          //
          if (n.name () == "T24RuleRptType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24RuleRptType_type > r (
              T24RuleRptType_traits::create (i, f, this));

            if (!this->T24RuleRptType_)
            {
              this->T24RuleRptType_.set (r);
              continue;
            }
          }

          // T24SimpleHVACMandatoryCompliance
          //
          if (n.name () == "T24SimpleHVACMandatoryCompliance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SimpleHVACMandatoryCompliance_type > r (
              T24SimpleHVACMandatoryCompliance_traits::create (i, f, this));

            if (!this->T24SimpleHVACMandatoryCompliance_)
            {
              this->T24SimpleHVACMandatoryCompliance_.set (r);
              continue;
            }
          }

          // T24SimulateDesignDays
          //
          if (n.name () == "T24SimulateDesignDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimulateDesignDays_)
            {
              this->T24SimulateDesignDays_.set (T24SimulateDesignDays_traits::create (i, f, this));
              continue;
            }
          }

          // T24SimVarsDaylighting
          //
          if (n.name () == "T24SimVarsDaylighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimVarsDaylighting_)
            {
              this->T24SimVarsDaylighting_.set (T24SimVarsDaylighting_traits::create (i, f, this));
              continue;
            }
          }

          // T24SimVarsHVACPrimary
          //
          if (n.name () == "T24SimVarsHVACPrimary" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimVarsHVACPrimary_)
            {
              this->T24SimVarsHVACPrimary_.set (T24SimVarsHVACPrimary_traits::create (i, f, this));
              continue;
            }
          }

          // T24SimVarsHVACSecondary
          //
          if (n.name () == "T24SimVarsHVACSecondary" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimVarsHVACSecondary_)
            {
              this->T24SimVarsHVACSecondary_.set (T24SimVarsHVACSecondary_traits::create (i, f, this));
              continue;
            }
          }

          // T24SimVarsHVACZone
          //
          if (n.name () == "T24SimVarsHVACZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimVarsHVACZone_)
            {
              this->T24SimVarsHVACZone_.set (T24SimVarsHVACZone_traits::create (i, f, this));
              continue;
            }
          }

          // T24SimVarsSite
          //
          if (n.name () == "T24SimVarsSite" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimVarsSite_)
            {
              this->T24SimVarsSite_.set (T24SimVarsSite_traits::create (i, f, this));
              continue;
            }
          }

          // T24SimVarsThermalZone
          //
          if (n.name () == "T24SimVarsThermalZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24SimVarsThermalZone_)
            {
              this->T24SimVarsThermalZone_.set (T24SimVarsThermalZone_traits::create (i, f, this));
              continue;
            }
          }

          // T24UseExceptionalDesignModel
          //
          if (n.name () == "T24UseExceptionalDesignModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24UseExceptionalDesignModel_)
            {
              this->T24UseExceptionalDesignModel_.set (T24UseExceptionalDesignModel_traits::create (i, f, this));
              continue;
            }
          }

          // T24SiteFuelType
          //
          if (n.name () == "T24SiteFuelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SiteFuelType_type > r (
              T24SiteFuelType_traits::create (i, f, this));

            if (!this->T24SiteFuelType_)
            {
              this->T24SiteFuelType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimProjectType* SimProjectType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimProjectType (*this, f, c);
      }

      SimProjectType& SimProjectType::
      operator= (const SimProjectType& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimObjectTypeDefinition& > (*this) = x;
          this->RepresentationMaps_ = x.RepresentationMaps_;
          this->Tag_ = x.Tag_;
          this->ProjectClientOwner_ = x.ProjectClientOwner_;
          this->ProjectArchitect_ = x.ProjectArchitect_;
          this->ProjectUnitsList_ = x.ProjectUnitsList_;
          this->T24ProjectTeamList_ = x.T24ProjectTeamList_;
          this->T24AnalysisType_ = x.T24AnalysisType_;
          this->T24AutomaticDaylightingReport_ = x.T24AutomaticDaylightingReport_;
          this->T24AutomaticTimeSwitchReport_ = x.T24AutomaticTimeSwitchReport_;
          this->T24AverageDryBulbTemperature_ = x.T24AverageDryBulbTemperature_;
          this->T24AverageElectricityCost_ = x.T24AverageElectricityCost_;
          this->T24AverageOtherFuelCost_ = x.T24AverageOtherFuelCost_;
          this->T24CommercialRefrigerationMandatoryCompliance_ = x.T24CommercialRefrigerationMandatoryCompliance_;
          this->T24ComplexHVACMandatoryCompliance_ = x.T24ComplexHVACMandatoryCompliance_;
          this->T24CompliancePathComputerRoom_ = x.T24CompliancePathComputerRoom_;
          this->T24CompliancePathDomesticHotWater_ = x.T24CompliancePathDomesticHotWater_;
          this->T24CompliancePathEnvelope_ = x.T24CompliancePathEnvelope_;
          this->T24CompliancePathKitchen_ = x.T24CompliancePathKitchen_;
          this->T24CompliancePathLaboratory_ = x.T24CompliancePathLaboratory_;
          this->T24CompliancePathLighting_ = x.T24CompliancePathLighting_;
          this->T24CompliancePathMechanical_ = x.T24CompliancePathMechanical_;
          this->T24ComplianceReportPDF_ = x.T24ComplianceReportPDF_;
          this->T24ComplianceReportXML_ = x.T24ComplianceReportXML_;
          this->T24ComplianceType_ = x.T24ComplianceType_;
          this->T24CompressedAirMandatoryCompliance_ = x.T24CompressedAirMandatoryCompliance_;
          this->T24DefaultDaylightingControls_ = x.T24DefaultDaylightingControls_;
          this->T24DemandResponsiveReport_ = x.T24DemandResponsiveReport_;
          this->T24DisableDaylightingControls_ = x.T24DisableDaylightingControls_;
          this->T24DomesticHotWaterDetailsLocation_ = x.T24DomesticHotWaterDetailsLocation_;
          this->T24ElectricalMandatoryCompliance_ = x.T24ElectricalMandatoryCompliance_;
          this->T24EnvelopeDetailsLocation_ = x.T24EnvelopeDetailsLocation_;
          this->T24ExcptCondBldg_ = x.T24ExcptCondBldg_;
          this->T24ExcptCondExteriorLighting_ = x.T24ExcptCondExteriorLighting_;
          this->T24ExcptCondNarrative_ = x.T24ExcptCondNarrative_;
          this->T24ExcptCondNoCoolingSystem_ = x.T24ExcptCondNoCoolingSystem_;
          this->T24ExcptCondRatedCapacity_ = x.T24ExcptCondRatedCapacity_;
          this->T24ExceptionalConditionWaterHeaterSizing_ = x.T24ExceptionalConditionWaterHeaterSizing_;
          this->T24ExcptCondWaterHeater_ = x.T24ExcptCondWaterHeater_;
          this->T24ExceptionalDesignModelFile_ = x.T24ExceptionalDesignModelFile_;
          this->T24GeometryInputType_ = x.T24GeometryInputType_;
          this->T24HolidayReference_ = x.T24HolidayReference_;
          this->T24HVACAutoSizing_ = x.T24HVACAutoSizing_;
          this->T24LightingDetailsLocation_ = x.T24LightingDetailsLocation_;
          this->T24LightingOutdoorCompliance_ = x.T24LightingOutdoorCompliance_;
          this->T24LightingSignCompliance_ = x.T24LightingSignCompliance_;
          this->T24LightingUnconditionedCompliance_ = x.T24LightingUnconditionedCompliance_;
          this->T24MechanicalDetailsLocation_ = x.T24MechanicalDetailsLocation_;
          this->T24MonthlyAverageTemperatureMaximumDifference_ = x.T24MonthlyAverageTemperatureMaximumDifference_;
          this->T24NarrativeDetails_ = x.T24NarrativeDetails_;
          this->T24NumberOfDaysPerQuickAnalysisPeriod_ = x.T24NumberOfDaysPerQuickAnalysisPeriod_;
          this->T24NumberOfQuickAnalysisPeriods_ = x.T24NumberOfQuickAnalysisPeriods_;
          this->T24NumberTimeStepsPerHour_ = x.T24NumberTimeStepsPerHour_;
          this->T24OccupancySensorCountReport_ = x.T24OccupancySensorCountReport_;
          this->T24OutdoorControlsReport_ = x.T24OutdoorControlsReport_;
          this->T24ParkingGarageMandatoryCompliance_ = x.T24ParkingGarageMandatoryCompliance_;
          this->T24PermitScope_ = x.T24PermitScope_;
          this->T24ProcessBoilerMandatoryCompliance_ = x.T24ProcessBoilerMandatoryCompliance_;
          this->T24QuickAnalysis_ = x.T24QuickAnalysis_;
          this->T24QuickAnalysisWeekNumbers_ = x.T24QuickAnalysisWeekNumbers_;
          this->T24RefrigerationWarehouseMandatoryCompliance_ = x.T24RefrigerationWarehouseMandatoryCompliance_;
          this->T24RuleRptFileAppend_ = x.T24RuleRptFileAppend_;
          this->T24RuleRptType_ = x.T24RuleRptType_;
          this->T24SimpleHVACMandatoryCompliance_ = x.T24SimpleHVACMandatoryCompliance_;
          this->T24SimulateDesignDays_ = x.T24SimulateDesignDays_;
          this->T24SimVarsDaylighting_ = x.T24SimVarsDaylighting_;
          this->T24SimVarsHVACPrimary_ = x.T24SimVarsHVACPrimary_;
          this->T24SimVarsHVACSecondary_ = x.T24SimVarsHVACSecondary_;
          this->T24SimVarsHVACZone_ = x.T24SimVarsHVACZone_;
          this->T24SimVarsSite_ = x.T24SimVarsSite_;
          this->T24SimVarsThermalZone_ = x.T24SimVarsThermalZone_;
          this->T24UseExceptionalDesignModel_ = x.T24UseExceptionalDesignModel_;
          this->T24SiteFuelType_ = x.T24SiteFuelType_;
        }

        return *this;
      }

      SimProjectType::
      ~SimProjectType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

