// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWall_Wall_Adiabatic.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWall_Wall_Adiabatic
      // 

      const SimWall_Wall_Adiabatic::ContainedBldgElementArrays_optional& SimWall_Wall_Adiabatic::
      ContainedBldgElementArrays () const
      {
        return this->ContainedBldgElementArrays_;
      }

      SimWall_Wall_Adiabatic::ContainedBldgElementArrays_optional& SimWall_Wall_Adiabatic::
      ContainedBldgElementArrays ()
      {
        return this->ContainedBldgElementArrays_;
      }

      void SimWall_Wall_Adiabatic::
      ContainedBldgElementArrays (const ContainedBldgElementArrays_type& x)
      {
        this->ContainedBldgElementArrays_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      ContainedBldgElementArrays (const ContainedBldgElementArrays_optional& x)
      {
        this->ContainedBldgElementArrays_ = x;
      }

      void SimWall_Wall_Adiabatic::
      ContainedBldgElementArrays (::std::auto_ptr< ContainedBldgElementArrays_type > x)
      {
        this->ContainedBldgElementArrays_.set (x);
      }

      const SimWall_Wall_Adiabatic::Name_optional& SimWall_Wall_Adiabatic::
      Name () const
      {
        return this->Name_;
      }

      SimWall_Wall_Adiabatic::Name_optional& SimWall_Wall_Adiabatic::
      Name ()
      {
        return this->Name_;
      }

      void SimWall_Wall_Adiabatic::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimWall_Wall_Adiabatic::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimWall_Wall_Adiabatic::Representation_optional& SimWall_Wall_Adiabatic::
      Representation () const
      {
        return this->Representation_;
      }

      SimWall_Wall_Adiabatic::Representation_optional& SimWall_Wall_Adiabatic::
      Representation ()
      {
        return this->Representation_;
      }

      void SimWall_Wall_Adiabatic::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimWall_Wall_Adiabatic::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimWall_Wall_Adiabatic::ConstructionType_optional& SimWall_Wall_Adiabatic::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimWall_Wall_Adiabatic::ConstructionType_optional& SimWall_Wall_Adiabatic::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimWall_Wall_Adiabatic::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimWall_Wall_Adiabatic::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimWall_Wall_Adiabatic::WallIsExternal_optional& SimWall_Wall_Adiabatic::
      WallIsExternal () const
      {
        return this->WallIsExternal_;
      }

      SimWall_Wall_Adiabatic::WallIsExternal_optional& SimWall_Wall_Adiabatic::
      WallIsExternal ()
      {
        return this->WallIsExternal_;
      }

      void SimWall_Wall_Adiabatic::
      WallIsExternal (const WallIsExternal_type& x)
      {
        this->WallIsExternal_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallIsExternal (const WallIsExternal_optional& x)
      {
        this->WallIsExternal_ = x;
      }

      const SimWall_Wall_Adiabatic::CompositeThermalTrans_optional& SimWall_Wall_Adiabatic::
      CompositeThermalTrans () const
      {
        return this->CompositeThermalTrans_;
      }

      SimWall_Wall_Adiabatic::CompositeThermalTrans_optional& SimWall_Wall_Adiabatic::
      CompositeThermalTrans ()
      {
        return this->CompositeThermalTrans_;
      }

      void SimWall_Wall_Adiabatic::
      CompositeThermalTrans (const CompositeThermalTrans_type& x)
      {
        this->CompositeThermalTrans_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      CompositeThermalTrans (const CompositeThermalTrans_optional& x)
      {
        this->CompositeThermalTrans_ = x;
      }

      const SimWall_Wall_Adiabatic::PhotoVotaicArrayOnElement_optional& SimWall_Wall_Adiabatic::
      PhotoVotaicArrayOnElement () const
      {
        return this->PhotoVotaicArrayOnElement_;
      }

      SimWall_Wall_Adiabatic::PhotoVotaicArrayOnElement_optional& SimWall_Wall_Adiabatic::
      PhotoVotaicArrayOnElement ()
      {
        return this->PhotoVotaicArrayOnElement_;
      }

      void SimWall_Wall_Adiabatic::
      PhotoVotaicArrayOnElement (const PhotoVotaicArrayOnElement_type& x)
      {
        this->PhotoVotaicArrayOnElement_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      PhotoVotaicArrayOnElement (const PhotoVotaicArrayOnElement_optional& x)
      {
        this->PhotoVotaicArrayOnElement_ = x;
      }

      void SimWall_Wall_Adiabatic::
      PhotoVotaicArrayOnElement (::std::auto_ptr< PhotoVotaicArrayOnElement_type > x)
      {
        this->PhotoVotaicArrayOnElement_.set (x);
      }

      const SimWall_Wall_Adiabatic::WallHeight_optional& SimWall_Wall_Adiabatic::
      WallHeight () const
      {
        return this->WallHeight_;
      }

      SimWall_Wall_Adiabatic::WallHeight_optional& SimWall_Wall_Adiabatic::
      WallHeight ()
      {
        return this->WallHeight_;
      }

      void SimWall_Wall_Adiabatic::
      WallHeight (const WallHeight_type& x)
      {
        this->WallHeight_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallHeight (const WallHeight_optional& x)
      {
        this->WallHeight_ = x;
      }

      const SimWall_Wall_Adiabatic::WallLength_optional& SimWall_Wall_Adiabatic::
      WallLength () const
      {
        return this->WallLength_;
      }

      SimWall_Wall_Adiabatic::WallLength_optional& SimWall_Wall_Adiabatic::
      WallLength ()
      {
        return this->WallLength_;
      }

      void SimWall_Wall_Adiabatic::
      WallLength (const WallLength_type& x)
      {
        this->WallLength_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallLength (const WallLength_optional& x)
      {
        this->WallLength_ = x;
      }

      const SimWall_Wall_Adiabatic::WallThickness_optional& SimWall_Wall_Adiabatic::
      WallThickness () const
      {
        return this->WallThickness_;
      }

      SimWall_Wall_Adiabatic::WallThickness_optional& SimWall_Wall_Adiabatic::
      WallThickness ()
      {
        return this->WallThickness_;
      }

      void SimWall_Wall_Adiabatic::
      WallThickness (const WallThickness_type& x)
      {
        this->WallThickness_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallThickness (const WallThickness_optional& x)
      {
        this->WallThickness_ = x;
      }

      const SimWall_Wall_Adiabatic::WallGrossSideArea_optional& SimWall_Wall_Adiabatic::
      WallGrossSideArea () const
      {
        return this->WallGrossSideArea_;
      }

      SimWall_Wall_Adiabatic::WallGrossSideArea_optional& SimWall_Wall_Adiabatic::
      WallGrossSideArea ()
      {
        return this->WallGrossSideArea_;
      }

      void SimWall_Wall_Adiabatic::
      WallGrossSideArea (const WallGrossSideArea_type& x)
      {
        this->WallGrossSideArea_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallGrossSideArea (const WallGrossSideArea_optional& x)
      {
        this->WallGrossSideArea_ = x;
      }

      const SimWall_Wall_Adiabatic::WallNetSideArea_optional& SimWall_Wall_Adiabatic::
      WallNetSideArea () const
      {
        return this->WallNetSideArea_;
      }

      SimWall_Wall_Adiabatic::WallNetSideArea_optional& SimWall_Wall_Adiabatic::
      WallNetSideArea ()
      {
        return this->WallNetSideArea_;
      }

      void SimWall_Wall_Adiabatic::
      WallNetSideArea (const WallNetSideArea_type& x)
      {
        this->WallNetSideArea_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallNetSideArea (const WallNetSideArea_optional& x)
      {
        this->WallNetSideArea_ = x;
      }

      const SimWall_Wall_Adiabatic::WallGrossVolume_optional& SimWall_Wall_Adiabatic::
      WallGrossVolume () const
      {
        return this->WallGrossVolume_;
      }

      SimWall_Wall_Adiabatic::WallGrossVolume_optional& SimWall_Wall_Adiabatic::
      WallGrossVolume ()
      {
        return this->WallGrossVolume_;
      }

      void SimWall_Wall_Adiabatic::
      WallGrossVolume (const WallGrossVolume_type& x)
      {
        this->WallGrossVolume_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallGrossVolume (const WallGrossVolume_optional& x)
      {
        this->WallGrossVolume_ = x;
      }

      const SimWall_Wall_Adiabatic::WallNetVolume_optional& SimWall_Wall_Adiabatic::
      WallNetVolume () const
      {
        return this->WallNetVolume_;
      }

      SimWall_Wall_Adiabatic::WallNetVolume_optional& SimWall_Wall_Adiabatic::
      WallNetVolume ()
      {
        return this->WallNetVolume_;
      }

      void SimWall_Wall_Adiabatic::
      WallNetVolume (const WallNetVolume_type& x)
      {
        this->WallNetVolume_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      WallNetVolume (const WallNetVolume_optional& x)
      {
        this->WallNetVolume_ = x;
      }

      const SimWall_Wall_Adiabatic::ClassRef_UniFormat_optional& SimWall_Wall_Adiabatic::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimWall_Wall_Adiabatic::ClassRef_UniFormat_optional& SimWall_Wall_Adiabatic::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimWall_Wall_Adiabatic::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimWall_Wall_Adiabatic::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimWall_Wall_Adiabatic::MaterialLayerSet_optional& SimWall_Wall_Adiabatic::
      MaterialLayerSet () const
      {
        return this->MaterialLayerSet_;
      }

      SimWall_Wall_Adiabatic::MaterialLayerSet_optional& SimWall_Wall_Adiabatic::
      MaterialLayerSet ()
      {
        return this->MaterialLayerSet_;
      }

      void SimWall_Wall_Adiabatic::
      MaterialLayerSet (const MaterialLayerSet_type& x)
      {
        this->MaterialLayerSet_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      MaterialLayerSet (const MaterialLayerSet_optional& x)
      {
        this->MaterialLayerSet_ = x;
      }

      void SimWall_Wall_Adiabatic::
      MaterialLayerSet (::std::auto_ptr< MaterialLayerSet_type > x)
      {
        this->MaterialLayerSet_.set (x);
      }

      const SimWall_Wall_Adiabatic::ConnectedSlabs_optional& SimWall_Wall_Adiabatic::
      ConnectedSlabs () const
      {
        return this->ConnectedSlabs_;
      }

      SimWall_Wall_Adiabatic::ConnectedSlabs_optional& SimWall_Wall_Adiabatic::
      ConnectedSlabs ()
      {
        return this->ConnectedSlabs_;
      }

      void SimWall_Wall_Adiabatic::
      ConnectedSlabs (const ConnectedSlabs_type& x)
      {
        this->ConnectedSlabs_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      ConnectedSlabs (const ConnectedSlabs_optional& x)
      {
        this->ConnectedSlabs_ = x;
      }

      void SimWall_Wall_Adiabatic::
      ConnectedSlabs (::std::auto_ptr< ConnectedSlabs_type > x)
      {
        this->ConnectedSlabs_.set (x);
      }

      const SimWall_Wall_Adiabatic::ConnectedWalls_optional& SimWall_Wall_Adiabatic::
      ConnectedWalls () const
      {
        return this->ConnectedWalls_;
      }

      SimWall_Wall_Adiabatic::ConnectedWalls_optional& SimWall_Wall_Adiabatic::
      ConnectedWalls ()
      {
        return this->ConnectedWalls_;
      }

      void SimWall_Wall_Adiabatic::
      ConnectedWalls (const ConnectedWalls_type& x)
      {
        this->ConnectedWalls_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      ConnectedWalls (const ConnectedWalls_optional& x)
      {
        this->ConnectedWalls_ = x;
      }

      void SimWall_Wall_Adiabatic::
      ConnectedWalls (::std::auto_ptr< ConnectedWalls_type > x)
      {
        this->ConnectedWalls_.set (x);
      }

      const SimWall_Wall_Adiabatic::SimWall_Name_optional& SimWall_Wall_Adiabatic::
      SimWall_Name () const
      {
        return this->SimWall_Name_;
      }

      SimWall_Wall_Adiabatic::SimWall_Name_optional& SimWall_Wall_Adiabatic::
      SimWall_Name ()
      {
        return this->SimWall_Name_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Name (const SimWall_Name_type& x)
      {
        this->SimWall_Name_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Name (const SimWall_Name_optional& x)
      {
        this->SimWall_Name_ = x;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Name (::std::auto_ptr< SimWall_Name_type > x)
      {
        this->SimWall_Name_.set (x);
      }

      const SimWall_Wall_Adiabatic::SimWall_ConstructionName_optional& SimWall_Wall_Adiabatic::
      SimWall_ConstructionName () const
      {
        return this->SimWall_ConstructionName_;
      }

      SimWall_Wall_Adiabatic::SimWall_ConstructionName_optional& SimWall_Wall_Adiabatic::
      SimWall_ConstructionName ()
      {
        return this->SimWall_ConstructionName_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_ConstructionName (const SimWall_ConstructionName_type& x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_ConstructionName (const SimWall_ConstructionName_optional& x)
      {
        this->SimWall_ConstructionName_ = x;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_ConstructionName (::std::auto_ptr< SimWall_ConstructionName_type > x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      const SimWall_Wall_Adiabatic::SimWall_ZoneName_optional& SimWall_Wall_Adiabatic::
      SimWall_ZoneName () const
      {
        return this->SimWall_ZoneName_;
      }

      SimWall_Wall_Adiabatic::SimWall_ZoneName_optional& SimWall_Wall_Adiabatic::
      SimWall_ZoneName ()
      {
        return this->SimWall_ZoneName_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_ZoneName (const SimWall_ZoneName_type& x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_ZoneName (const SimWall_ZoneName_optional& x)
      {
        this->SimWall_ZoneName_ = x;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_ZoneName (::std::auto_ptr< SimWall_ZoneName_type > x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      const SimWall_Wall_Adiabatic::SimWall_AzimuthAng_optional& SimWall_Wall_Adiabatic::
      SimWall_AzimuthAng () const
      {
        return this->SimWall_AzimuthAng_;
      }

      SimWall_Wall_Adiabatic::SimWall_AzimuthAng_optional& SimWall_Wall_Adiabatic::
      SimWall_AzimuthAng ()
      {
        return this->SimWall_AzimuthAng_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_AzimuthAng (const SimWall_AzimuthAng_type& x)
      {
        this->SimWall_AzimuthAng_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_AzimuthAng (const SimWall_AzimuthAng_optional& x)
      {
        this->SimWall_AzimuthAng_ = x;
      }

      const SimWall_Wall_Adiabatic::SimWall_TiltAng_optional& SimWall_Wall_Adiabatic::
      SimWall_TiltAng () const
      {
        return this->SimWall_TiltAng_;
      }

      SimWall_Wall_Adiabatic::SimWall_TiltAng_optional& SimWall_Wall_Adiabatic::
      SimWall_TiltAng ()
      {
        return this->SimWall_TiltAng_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_TiltAng (const SimWall_TiltAng_type& x)
      {
        this->SimWall_TiltAng_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_TiltAng (const SimWall_TiltAng_optional& x)
      {
        this->SimWall_TiltAng_ = x;
      }

      const SimWall_Wall_Adiabatic::SimWall_StartXCoord_optional& SimWall_Wall_Adiabatic::
      SimWall_StartXCoord () const
      {
        return this->SimWall_StartXCoord_;
      }

      SimWall_Wall_Adiabatic::SimWall_StartXCoord_optional& SimWall_Wall_Adiabatic::
      SimWall_StartXCoord ()
      {
        return this->SimWall_StartXCoord_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_StartXCoord (const SimWall_StartXCoord_type& x)
      {
        this->SimWall_StartXCoord_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_StartXCoord (const SimWall_StartXCoord_optional& x)
      {
        this->SimWall_StartXCoord_ = x;
      }

      const SimWall_Wall_Adiabatic::SimWall_StartYCoord_optional& SimWall_Wall_Adiabatic::
      SimWall_StartYCoord () const
      {
        return this->SimWall_StartYCoord_;
      }

      SimWall_Wall_Adiabatic::SimWall_StartYCoord_optional& SimWall_Wall_Adiabatic::
      SimWall_StartYCoord ()
      {
        return this->SimWall_StartYCoord_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_StartYCoord (const SimWall_StartYCoord_type& x)
      {
        this->SimWall_StartYCoord_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_StartYCoord (const SimWall_StartYCoord_optional& x)
      {
        this->SimWall_StartYCoord_ = x;
      }

      const SimWall_Wall_Adiabatic::SimWall_StartZCoord_optional& SimWall_Wall_Adiabatic::
      SimWall_StartZCoord () const
      {
        return this->SimWall_StartZCoord_;
      }

      SimWall_Wall_Adiabatic::SimWall_StartZCoord_optional& SimWall_Wall_Adiabatic::
      SimWall_StartZCoord ()
      {
        return this->SimWall_StartZCoord_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_StartZCoord (const SimWall_StartZCoord_type& x)
      {
        this->SimWall_StartZCoord_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_StartZCoord (const SimWall_StartZCoord_optional& x)
      {
        this->SimWall_StartZCoord_ = x;
      }

      const SimWall_Wall_Adiabatic::SimWall_Length_optional& SimWall_Wall_Adiabatic::
      SimWall_Length () const
      {
        return this->SimWall_Length_;
      }

      SimWall_Wall_Adiabatic::SimWall_Length_optional& SimWall_Wall_Adiabatic::
      SimWall_Length ()
      {
        return this->SimWall_Length_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Length (const SimWall_Length_type& x)
      {
        this->SimWall_Length_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Length (const SimWall_Length_optional& x)
      {
        this->SimWall_Length_ = x;
      }

      const SimWall_Wall_Adiabatic::SimWall_Ht_optional& SimWall_Wall_Adiabatic::
      SimWall_Ht () const
      {
        return this->SimWall_Ht_;
      }

      SimWall_Wall_Adiabatic::SimWall_Ht_optional& SimWall_Wall_Adiabatic::
      SimWall_Ht ()
      {
        return this->SimWall_Ht_;
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Ht (const SimWall_Ht_type& x)
      {
        this->SimWall_Ht_.set (x);
      }

      void SimWall_Wall_Adiabatic::
      SimWall_Ht (const SimWall_Ht_optional& x)
      {
        this->SimWall_Ht_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWall_Wall_Adiabatic
      //

      SimWall_Wall_Adiabatic::
      SimWall_Wall_Adiabatic ()
      : ::schema::simxml::BuildingModel::SimWall_Wall (),
        ContainedBldgElementArrays_ (this),
        Name_ (this),
        Representation_ (this),
        ConstructionType_ (this),
        WallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        WallHeight_ (this),
        WallLength_ (this),
        WallThickness_ (this),
        WallGrossSideArea_ (this),
        WallNetSideArea_ (this),
        WallGrossVolume_ (this),
        WallNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        SimWall_Name_ (this),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_AzimuthAng_ (this),
        SimWall_TiltAng_ (this),
        SimWall_StartXCoord_ (this),
        SimWall_StartYCoord_ (this),
        SimWall_StartZCoord_ (this),
        SimWall_Length_ (this),
        SimWall_Ht_ (this)
      {
      }

      SimWall_Wall_Adiabatic::
      SimWall_Wall_Adiabatic (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimWall_Wall (RefId),
        ContainedBldgElementArrays_ (this),
        Name_ (this),
        Representation_ (this),
        ConstructionType_ (this),
        WallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        WallHeight_ (this),
        WallLength_ (this),
        WallThickness_ (this),
        WallGrossSideArea_ (this),
        WallNetSideArea_ (this),
        WallGrossVolume_ (this),
        WallNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        SimWall_Name_ (this),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_AzimuthAng_ (this),
        SimWall_TiltAng_ (this),
        SimWall_StartXCoord_ (this),
        SimWall_StartYCoord_ (this),
        SimWall_StartZCoord_ (this),
        SimWall_Length_ (this),
        SimWall_Ht_ (this)
      {
      }

      SimWall_Wall_Adiabatic::
      SimWall_Wall_Adiabatic (const SimWall_Wall_Adiabatic& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWall_Wall (x, f, c),
        ContainedBldgElementArrays_ (x.ContainedBldgElementArrays_, f, this),
        Name_ (x.Name_, f, this),
        Representation_ (x.Representation_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        WallIsExternal_ (x.WallIsExternal_, f, this),
        CompositeThermalTrans_ (x.CompositeThermalTrans_, f, this),
        PhotoVotaicArrayOnElement_ (x.PhotoVotaicArrayOnElement_, f, this),
        WallHeight_ (x.WallHeight_, f, this),
        WallLength_ (x.WallLength_, f, this),
        WallThickness_ (x.WallThickness_, f, this),
        WallGrossSideArea_ (x.WallGrossSideArea_, f, this),
        WallNetSideArea_ (x.WallNetSideArea_, f, this),
        WallGrossVolume_ (x.WallGrossVolume_, f, this),
        WallNetVolume_ (x.WallNetVolume_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialLayerSet_ (x.MaterialLayerSet_, f, this),
        ConnectedSlabs_ (x.ConnectedSlabs_, f, this),
        ConnectedWalls_ (x.ConnectedWalls_, f, this),
        SimWall_Name_ (x.SimWall_Name_, f, this),
        SimWall_ConstructionName_ (x.SimWall_ConstructionName_, f, this),
        SimWall_ZoneName_ (x.SimWall_ZoneName_, f, this),
        SimWall_AzimuthAng_ (x.SimWall_AzimuthAng_, f, this),
        SimWall_TiltAng_ (x.SimWall_TiltAng_, f, this),
        SimWall_StartXCoord_ (x.SimWall_StartXCoord_, f, this),
        SimWall_StartYCoord_ (x.SimWall_StartYCoord_, f, this),
        SimWall_StartZCoord_ (x.SimWall_StartZCoord_, f, this),
        SimWall_Length_ (x.SimWall_Length_, f, this),
        SimWall_Ht_ (x.SimWall_Ht_, f, this)
      {
      }

      SimWall_Wall_Adiabatic::
      SimWall_Wall_Adiabatic (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWall_Wall (e, f | ::xml_schema::flags::base, c),
        ContainedBldgElementArrays_ (this),
        Name_ (this),
        Representation_ (this),
        ConstructionType_ (this),
        WallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        WallHeight_ (this),
        WallLength_ (this),
        WallThickness_ (this),
        WallGrossSideArea_ (this),
        WallNetSideArea_ (this),
        WallGrossVolume_ (this),
        WallNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        SimWall_Name_ (this),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_AzimuthAng_ (this),
        SimWall_TiltAng_ (this),
        SimWall_StartXCoord_ (this),
        SimWall_StartYCoord_ (this),
        SimWall_StartZCoord_ (this),
        SimWall_Length_ (this),
        SimWall_Ht_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWall_Wall_Adiabatic::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimWall_Wall::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ContainedBldgElementArrays
          //
          if (n.name () == "ContainedBldgElementArrays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ContainedBldgElementArrays_type > r (
              ContainedBldgElementArrays_traits::create (i, f, this));

            if (!this->ContainedBldgElementArrays_)
            {
              this->ContainedBldgElementArrays_.set (r);
              continue;
            }
          }

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // WallIsExternal
          //
          if (n.name () == "WallIsExternal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallIsExternal_)
            {
              this->WallIsExternal_.set (WallIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTrans
          //
          if (n.name () == "CompositeThermalTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CompositeThermalTrans_)
            {
              this->CompositeThermalTrans_.set (CompositeThermalTrans_traits::create (i, f, this));
              continue;
            }
          }

          // PhotoVotaicArrayOnElement
          //
          if (n.name () == "PhotoVotaicArrayOnElement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< PhotoVotaicArrayOnElement_type > r (
              PhotoVotaicArrayOnElement_traits::create (i, f, this));

            if (!this->PhotoVotaicArrayOnElement_)
            {
              this->PhotoVotaicArrayOnElement_.set (r);
              continue;
            }
          }

          // WallHeight
          //
          if (n.name () == "WallHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallHeight_)
            {
              this->WallHeight_.set (WallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // WallLength
          //
          if (n.name () == "WallLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallLength_)
            {
              this->WallLength_.set (WallLength_traits::create (i, f, this));
              continue;
            }
          }

          // WallThickness
          //
          if (n.name () == "WallThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallThickness_)
            {
              this->WallThickness_.set (WallThickness_traits::create (i, f, this));
              continue;
            }
          }

          // WallGrossSideArea
          //
          if (n.name () == "WallGrossSideArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallGrossSideArea_)
            {
              this->WallGrossSideArea_.set (WallGrossSideArea_traits::create (i, f, this));
              continue;
            }
          }

          // WallNetSideArea
          //
          if (n.name () == "WallNetSideArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallNetSideArea_)
            {
              this->WallNetSideArea_.set (WallNetSideArea_traits::create (i, f, this));
              continue;
            }
          }

          // WallGrossVolume
          //
          if (n.name () == "WallGrossVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallGrossVolume_)
            {
              this->WallGrossVolume_.set (WallGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // WallNetVolume
          //
          if (n.name () == "WallNetVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallNetVolume_)
            {
              this->WallNetVolume_.set (WallNetVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialLayerSet
          //
          if (n.name () == "MaterialLayerSet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< MaterialLayerSet_type > r (
              MaterialLayerSet_traits::create (i, f, this));

            if (!this->MaterialLayerSet_)
            {
              this->MaterialLayerSet_.set (r);
              continue;
            }
          }

          // ConnectedSlabs
          //
          if (n.name () == "ConnectedSlabs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedSlabs_type > r (
              ConnectedSlabs_traits::create (i, f, this));

            if (!this->ConnectedSlabs_)
            {
              this->ConnectedSlabs_.set (r);
              continue;
            }
          }

          // ConnectedWalls
          //
          if (n.name () == "ConnectedWalls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedWalls_type > r (
              ConnectedWalls_traits::create (i, f, this));

            if (!this->ConnectedWalls_)
            {
              this->ConnectedWalls_.set (r);
              continue;
            }
          }

          // SimWall_Name
          //
          if (n.name () == "SimWall_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_Name_type > r (
              SimWall_Name_traits::create (i, f, this));

            if (!this->SimWall_Name_)
            {
              this->SimWall_Name_.set (r);
              continue;
            }
          }

          // SimWall_ConstructionName
          //
          if (n.name () == "SimWall_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ConstructionName_type > r (
              SimWall_ConstructionName_traits::create (i, f, this));

            if (!this->SimWall_ConstructionName_)
            {
              this->SimWall_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWall_ZoneName
          //
          if (n.name () == "SimWall_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ZoneName_type > r (
              SimWall_ZoneName_traits::create (i, f, this));

            if (!this->SimWall_ZoneName_)
            {
              this->SimWall_ZoneName_.set (r);
              continue;
            }
          }

          // SimWall_AzimuthAng
          //
          if (n.name () == "SimWall_AzimuthAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_AzimuthAng_)
            {
              this->SimWall_AzimuthAng_.set (SimWall_AzimuthAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_TiltAng
          //
          if (n.name () == "SimWall_TiltAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_TiltAng_)
            {
              this->SimWall_TiltAng_.set (SimWall_TiltAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_StartXCoord
          //
          if (n.name () == "SimWall_StartXCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_StartXCoord_)
            {
              this->SimWall_StartXCoord_.set (SimWall_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_StartYCoord
          //
          if (n.name () == "SimWall_StartYCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_StartYCoord_)
            {
              this->SimWall_StartYCoord_.set (SimWall_StartYCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_StartZCoord
          //
          if (n.name () == "SimWall_StartZCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_StartZCoord_)
            {
              this->SimWall_StartZCoord_.set (SimWall_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_Length
          //
          if (n.name () == "SimWall_Length" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_Length_)
            {
              this->SimWall_Length_.set (SimWall_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_Ht
          //
          if (n.name () == "SimWall_Ht" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_Ht_)
            {
              this->SimWall_Ht_.set (SimWall_Ht_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimWall_Wall_Adiabatic* SimWall_Wall_Adiabatic::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWall_Wall_Adiabatic (*this, f, c);
      }

      SimWall_Wall_Adiabatic& SimWall_Wall_Adiabatic::
      operator= (const SimWall_Wall_Adiabatic& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimWall_Wall& > (*this) = x;
          this->ContainedBldgElementArrays_ = x.ContainedBldgElementArrays_;
          this->Name_ = x.Name_;
          this->Representation_ = x.Representation_;
          this->ConstructionType_ = x.ConstructionType_;
          this->WallIsExternal_ = x.WallIsExternal_;
          this->CompositeThermalTrans_ = x.CompositeThermalTrans_;
          this->PhotoVotaicArrayOnElement_ = x.PhotoVotaicArrayOnElement_;
          this->WallHeight_ = x.WallHeight_;
          this->WallLength_ = x.WallLength_;
          this->WallThickness_ = x.WallThickness_;
          this->WallGrossSideArea_ = x.WallGrossSideArea_;
          this->WallNetSideArea_ = x.WallNetSideArea_;
          this->WallGrossVolume_ = x.WallGrossVolume_;
          this->WallNetVolume_ = x.WallNetVolume_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialLayerSet_ = x.MaterialLayerSet_;
          this->ConnectedSlabs_ = x.ConnectedSlabs_;
          this->ConnectedWalls_ = x.ConnectedWalls_;
          this->SimWall_Name_ = x.SimWall_Name_;
          this->SimWall_ConstructionName_ = x.SimWall_ConstructionName_;
          this->SimWall_ZoneName_ = x.SimWall_ZoneName_;
          this->SimWall_AzimuthAng_ = x.SimWall_AzimuthAng_;
          this->SimWall_TiltAng_ = x.SimWall_TiltAng_;
          this->SimWall_StartXCoord_ = x.SimWall_StartXCoord_;
          this->SimWall_StartYCoord_ = x.SimWall_StartYCoord_;
          this->SimWall_StartZCoord_ = x.SimWall_StartZCoord_;
          this->SimWall_Length_ = x.SimWall_Length_;
          this->SimWall_Ht_ = x.SimWall_Ht_;
        }

        return *this;
      }

      SimWall_Wall_Adiabatic::
      ~SimWall_Wall_Adiabatic ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

