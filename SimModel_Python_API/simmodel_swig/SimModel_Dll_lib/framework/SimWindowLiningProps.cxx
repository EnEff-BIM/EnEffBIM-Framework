// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindowLiningProps.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimWindowLiningProps
      // 

      const SimWindowLiningProps::LiningDepth_optional& SimWindowLiningProps::
      LiningDepth () const
      {
        return this->LiningDepth_;
      }

      SimWindowLiningProps::LiningDepth_optional& SimWindowLiningProps::
      LiningDepth ()
      {
        return this->LiningDepth_;
      }

      void SimWindowLiningProps::
      LiningDepth (const LiningDepth_type& x)
      {
        this->LiningDepth_.set (x);
      }

      void SimWindowLiningProps::
      LiningDepth (const LiningDepth_optional& x)
      {
        this->LiningDepth_ = x;
      }

      const SimWindowLiningProps::LiningThickness_optional& SimWindowLiningProps::
      LiningThickness () const
      {
        return this->LiningThickness_;
      }

      SimWindowLiningProps::LiningThickness_optional& SimWindowLiningProps::
      LiningThickness ()
      {
        return this->LiningThickness_;
      }

      void SimWindowLiningProps::
      LiningThickness (const LiningThickness_type& x)
      {
        this->LiningThickness_.set (x);
      }

      void SimWindowLiningProps::
      LiningThickness (const LiningThickness_optional& x)
      {
        this->LiningThickness_ = x;
      }

      const SimWindowLiningProps::TransomThickness_optional& SimWindowLiningProps::
      TransomThickness () const
      {
        return this->TransomThickness_;
      }

      SimWindowLiningProps::TransomThickness_optional& SimWindowLiningProps::
      TransomThickness ()
      {
        return this->TransomThickness_;
      }

      void SimWindowLiningProps::
      TransomThickness (const TransomThickness_type& x)
      {
        this->TransomThickness_.set (x);
      }

      void SimWindowLiningProps::
      TransomThickness (const TransomThickness_optional& x)
      {
        this->TransomThickness_ = x;
      }

      const SimWindowLiningProps::MullionThickness_optional& SimWindowLiningProps::
      MullionThickness () const
      {
        return this->MullionThickness_;
      }

      SimWindowLiningProps::MullionThickness_optional& SimWindowLiningProps::
      MullionThickness ()
      {
        return this->MullionThickness_;
      }

      void SimWindowLiningProps::
      MullionThickness (const MullionThickness_type& x)
      {
        this->MullionThickness_.set (x);
      }

      void SimWindowLiningProps::
      MullionThickness (const MullionThickness_optional& x)
      {
        this->MullionThickness_ = x;
      }

      const SimWindowLiningProps::FirstTransomOffset_optional& SimWindowLiningProps::
      FirstTransomOffset () const
      {
        return this->FirstTransomOffset_;
      }

      SimWindowLiningProps::FirstTransomOffset_optional& SimWindowLiningProps::
      FirstTransomOffset ()
      {
        return this->FirstTransomOffset_;
      }

      void SimWindowLiningProps::
      FirstTransomOffset (const FirstTransomOffset_type& x)
      {
        this->FirstTransomOffset_.set (x);
      }

      void SimWindowLiningProps::
      FirstTransomOffset (const FirstTransomOffset_optional& x)
      {
        this->FirstTransomOffset_ = x;
      }

      const SimWindowLiningProps::SecondTransomOffset_optional& SimWindowLiningProps::
      SecondTransomOffset () const
      {
        return this->SecondTransomOffset_;
      }

      SimWindowLiningProps::SecondTransomOffset_optional& SimWindowLiningProps::
      SecondTransomOffset ()
      {
        return this->SecondTransomOffset_;
      }

      void SimWindowLiningProps::
      SecondTransomOffset (const SecondTransomOffset_type& x)
      {
        this->SecondTransomOffset_.set (x);
      }

      void SimWindowLiningProps::
      SecondTransomOffset (const SecondTransomOffset_optional& x)
      {
        this->SecondTransomOffset_ = x;
      }

      const SimWindowLiningProps::FirstMullionOffset_optional& SimWindowLiningProps::
      FirstMullionOffset () const
      {
        return this->FirstMullionOffset_;
      }

      SimWindowLiningProps::FirstMullionOffset_optional& SimWindowLiningProps::
      FirstMullionOffset ()
      {
        return this->FirstMullionOffset_;
      }

      void SimWindowLiningProps::
      FirstMullionOffset (const FirstMullionOffset_type& x)
      {
        this->FirstMullionOffset_.set (x);
      }

      void SimWindowLiningProps::
      FirstMullionOffset (const FirstMullionOffset_optional& x)
      {
        this->FirstMullionOffset_ = x;
      }

      const SimWindowLiningProps::SecondMullionOffset_optional& SimWindowLiningProps::
      SecondMullionOffset () const
      {
        return this->SecondMullionOffset_;
      }

      SimWindowLiningProps::SecondMullionOffset_optional& SimWindowLiningProps::
      SecondMullionOffset ()
      {
        return this->SecondMullionOffset_;
      }

      void SimWindowLiningProps::
      SecondMullionOffset (const SecondMullionOffset_type& x)
      {
        this->SecondMullionOffset_.set (x);
      }

      void SimWindowLiningProps::
      SecondMullionOffset (const SecondMullionOffset_optional& x)
      {
        this->SecondMullionOffset_ = x;
      }

      const SimWindowLiningProps::ShapeAspectStyle_optional& SimWindowLiningProps::
      ShapeAspectStyle () const
      {
        return this->ShapeAspectStyle_;
      }

      SimWindowLiningProps::ShapeAspectStyle_optional& SimWindowLiningProps::
      ShapeAspectStyle ()
      {
        return this->ShapeAspectStyle_;
      }

      void SimWindowLiningProps::
      ShapeAspectStyle (const ShapeAspectStyle_type& x)
      {
        this->ShapeAspectStyle_.set (x);
      }

      void SimWindowLiningProps::
      ShapeAspectStyle (const ShapeAspectStyle_optional& x)
      {
        this->ShapeAspectStyle_ = x;
      }

      void SimWindowLiningProps::
      ShapeAspectStyle (::std::auto_ptr< ShapeAspectStyle_type > x)
      {
        this->ShapeAspectStyle_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimWindowLiningProps
      //

      SimWindowLiningProps::
      SimWindowLiningProps ()
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (),
        LiningDepth_ (this),
        LiningThickness_ (this),
        TransomThickness_ (this),
        MullionThickness_ (this),
        FirstTransomOffset_ (this),
        SecondTransomOffset_ (this),
        FirstMullionOffset_ (this),
        SecondMullionOffset_ (this),
        ShapeAspectStyle_ (this)
      {
      }

      SimWindowLiningProps::
      SimWindowLiningProps (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (RefId),
        LiningDepth_ (this),
        LiningThickness_ (this),
        TransomThickness_ (this),
        MullionThickness_ (this),
        FirstTransomOffset_ (this),
        SecondTransomOffset_ (this),
        FirstMullionOffset_ (this),
        SecondMullionOffset_ (this),
        ShapeAspectStyle_ (this)
      {
      }

      SimWindowLiningProps::
      SimWindowLiningProps (const SimWindowLiningProps& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (x, f, c),
        LiningDepth_ (x.LiningDepth_, f, this),
        LiningThickness_ (x.LiningThickness_, f, this),
        TransomThickness_ (x.TransomThickness_, f, this),
        MullionThickness_ (x.MullionThickness_, f, this),
        FirstTransomOffset_ (x.FirstTransomOffset_, f, this),
        SecondTransomOffset_ (x.SecondTransomOffset_, f, this),
        FirstMullionOffset_ (x.FirstMullionOffset_, f, this),
        SecondMullionOffset_ (x.SecondMullionOffset_, f, this),
        ShapeAspectStyle_ (x.ShapeAspectStyle_, f, this)
      {
      }

      SimWindowLiningProps::
      SimWindowLiningProps (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (e, f | ::xml_schema::flags::base, c),
        LiningDepth_ (this),
        LiningThickness_ (this),
        TransomThickness_ (this),
        MullionThickness_ (this),
        FirstTransomOffset_ (this),
        SecondTransomOffset_ (this),
        FirstMullionOffset_ (this),
        SecondMullionOffset_ (this),
        ShapeAspectStyle_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindowLiningProps::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimPropertySetDefinition::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LiningDepth
          //
          if (n.name () == "LiningDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LiningDepth_)
            {
              this->LiningDepth_.set (LiningDepth_traits::create (i, f, this));
              continue;
            }
          }

          // LiningThickness
          //
          if (n.name () == "LiningThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LiningThickness_)
            {
              this->LiningThickness_.set (LiningThickness_traits::create (i, f, this));
              continue;
            }
          }

          // TransomThickness
          //
          if (n.name () == "TransomThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->TransomThickness_)
            {
              this->TransomThickness_.set (TransomThickness_traits::create (i, f, this));
              continue;
            }
          }

          // MullionThickness
          //
          if (n.name () == "MullionThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->MullionThickness_)
            {
              this->MullionThickness_.set (MullionThickness_traits::create (i, f, this));
              continue;
            }
          }

          // FirstTransomOffset
          //
          if (n.name () == "FirstTransomOffset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FirstTransomOffset_)
            {
              this->FirstTransomOffset_.set (FirstTransomOffset_traits::create (i, f, this));
              continue;
            }
          }

          // SecondTransomOffset
          //
          if (n.name () == "SecondTransomOffset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SecondTransomOffset_)
            {
              this->SecondTransomOffset_.set (SecondTransomOffset_traits::create (i, f, this));
              continue;
            }
          }

          // FirstMullionOffset
          //
          if (n.name () == "FirstMullionOffset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FirstMullionOffset_)
            {
              this->FirstMullionOffset_.set (FirstMullionOffset_traits::create (i, f, this));
              continue;
            }
          }

          // SecondMullionOffset
          //
          if (n.name () == "SecondMullionOffset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SecondMullionOffset_)
            {
              this->SecondMullionOffset_.set (SecondMullionOffset_traits::create (i, f, this));
              continue;
            }
          }

          // ShapeAspectStyle
          //
          if (n.name () == "ShapeAspectStyle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ShapeAspectStyle_type > r (
              ShapeAspectStyle_traits::create (i, f, this));

            if (!this->ShapeAspectStyle_)
            {
              this->ShapeAspectStyle_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimWindowLiningProps* SimWindowLiningProps::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindowLiningProps (*this, f, c);
      }

      SimWindowLiningProps& SimWindowLiningProps::
      operator= (const SimWindowLiningProps& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimPropertySetDefinition& > (*this) = x;
          this->LiningDepth_ = x.LiningDepth_;
          this->LiningThickness_ = x.LiningThickness_;
          this->TransomThickness_ = x.TransomThickness_;
          this->MullionThickness_ = x.MullionThickness_;
          this->FirstTransomOffset_ = x.FirstTransomOffset_;
          this->SecondTransomOffset_ = x.SecondTransomOffset_;
          this->FirstMullionOffset_ = x.FirstMullionOffset_;
          this->SecondMullionOffset_ = x.SecondMullionOffset_;
          this->ShapeAspectStyle_ = x.ShapeAspectStyle_;
        }

        return *this;
      }

      SimWindowLiningProps::
      ~SimWindowLiningProps ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

