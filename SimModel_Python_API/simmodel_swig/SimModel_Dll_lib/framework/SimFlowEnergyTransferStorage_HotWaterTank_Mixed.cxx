// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransferStorage_HotWaterTank_Mixed.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransferStorage_HotWaterTank_Mixed
      // 

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_Name_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_Name () const
      {
        return this->SimFlowEnergyTransSto_Name_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_Name_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_Name ()
      {
        return this->SimFlowEnergyTransSto_Name_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_Name (const SimFlowEnergyTransSto_Name_type& x)
      {
        this->SimFlowEnergyTransSto_Name_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_Name (const SimFlowEnergyTransSto_Name_optional& x)
      {
        this->SimFlowEnergyTransSto_Name_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_Name (::std::auto_ptr< SimFlowEnergyTransSto_Name_type > x)
      {
        this->SimFlowEnergyTransSto_Name_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_TankVol_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_TankVol () const
      {
        return this->SimFlowEnergyTransSto_TankVol_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_TankVol_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_TankVol ()
      {
        return this->SimFlowEnergyTransSto_TankVol_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_TankVol (const SimFlowEnergyTransSto_TankVol_type& x)
      {
        this->SimFlowEnergyTransSto_TankVol_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_TankVol (const SimFlowEnergyTransSto_TankVol_optional& x)
      {
        this->SimFlowEnergyTransSto_TankVol_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SetpointTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SetpointTempSchedName () const
      {
        return this->SimFlowEnergyTransSto_SetpointTempSchedName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SetpointTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SetpointTempSchedName ()
      {
        return this->SimFlowEnergyTransSto_SetpointTempSchedName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SetpointTempSchedName (const SimFlowEnergyTransSto_SetpointTempSchedName_type& x)
      {
        this->SimFlowEnergyTransSto_SetpointTempSchedName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SetpointTempSchedName (const SimFlowEnergyTransSto_SetpointTempSchedName_optional& x)
      {
        this->SimFlowEnergyTransSto_SetpointTempSchedName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SetpointTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_SetpointTempSchedName_type > x)
      {
        this->SimFlowEnergyTransSto_SetpointTempSchedName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_DeadbandTempDifference_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_DeadbandTempDifference () const
      {
        return this->SimFlowEnergyTransSto_DeadbandTempDifference_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_DeadbandTempDifference_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_DeadbandTempDifference ()
      {
        return this->SimFlowEnergyTransSto_DeadbandTempDifference_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_DeadbandTempDifference (const SimFlowEnergyTransSto_DeadbandTempDifference_type& x)
      {
        this->SimFlowEnergyTransSto_DeadbandTempDifference_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_DeadbandTempDifference (const SimFlowEnergyTransSto_DeadbandTempDifference_optional& x)
      {
        this->SimFlowEnergyTransSto_DeadbandTempDifference_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_MaxTempLimit_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_MaxTempLimit () const
      {
        return this->SimFlowEnergyTransSto_MaxTempLimit_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_MaxTempLimit_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_MaxTempLimit ()
      {
        return this->SimFlowEnergyTransSto_MaxTempLimit_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_MaxTempLimit (const SimFlowEnergyTransSto_MaxTempLimit_type& x)
      {
        this->SimFlowEnergyTransSto_MaxTempLimit_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_MaxTempLimit (const SimFlowEnergyTransSto_MaxTempLimit_optional& x)
      {
        this->SimFlowEnergyTransSto_MaxTempLimit_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatCntlType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatCntlType () const
      {
        return this->SimFlowEnergyTransSto_HeatCntlType_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatCntlType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatCntlType ()
      {
        return this->SimFlowEnergyTransSto_HeatCntlType_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatCntlType (const SimFlowEnergyTransSto_HeatCntlType_type& x)
      {
        this->SimFlowEnergyTransSto_HeatCntlType_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatCntlType (const SimFlowEnergyTransSto_HeatCntlType_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatCntlType_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatCntlType (::std::auto_ptr< SimFlowEnergyTransSto_HeatCntlType_type > x)
      {
        this->SimFlowEnergyTransSto_HeatCntlType_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatMaxCap_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMaxCap () const
      {
        return this->SimFlowEnergyTransSto_HeatMaxCap_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatMaxCap_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMaxCap ()
      {
        return this->SimFlowEnergyTransSto_HeatMaxCap_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMaxCap (const SimFlowEnergyTransSto_HeatMaxCap_type& x)
      {
        this->SimFlowEnergyTransSto_HeatMaxCap_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMaxCap (const SimFlowEnergyTransSto_HeatMaxCap_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatMaxCap_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatMinCap_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMinCap () const
      {
        return this->SimFlowEnergyTransSto_HeatMinCap_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatMinCap_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMinCap ()
      {
        return this->SimFlowEnergyTransSto_HeatMinCap_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMinCap (const SimFlowEnergyTransSto_HeatMinCap_type& x)
      {
        this->SimFlowEnergyTransSto_HeatMinCap_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatMinCap (const SimFlowEnergyTransSto_HeatMinCap_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatMinCap_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionMinFlowRate () const
      {
        return this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionMinFlowRate ()
      {
        return this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionMinFlowRate (const SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_type& x)
      {
        this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionMinFlowRate (const SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatIgnitionDelay_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionDelay () const
      {
        return this->SimFlowEnergyTransSto_HeatIgnitionDelay_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatIgnitionDelay_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionDelay ()
      {
        return this->SimFlowEnergyTransSto_HeatIgnitionDelay_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionDelay (const SimFlowEnergyTransSto_HeatIgnitionDelay_type& x)
      {
        this->SimFlowEnergyTransSto_HeatIgnitionDelay_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatIgnitionDelay (const SimFlowEnergyTransSto_HeatIgnitionDelay_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatIgnitionDelay_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatFuelType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatFuelType () const
      {
        return this->SimFlowEnergyTransSto_HeatFuelType_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatFuelType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatFuelType ()
      {
        return this->SimFlowEnergyTransSto_HeatFuelType_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatFuelType (const SimFlowEnergyTransSto_HeatFuelType_type& x)
      {
        this->SimFlowEnergyTransSto_HeatFuelType_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatFuelType (const SimFlowEnergyTransSto_HeatFuelType_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatFuelType_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatFuelType (::std::auto_ptr< SimFlowEnergyTransSto_HeatFuelType_type > x)
      {
        this->SimFlowEnergyTransSto_HeatFuelType_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatThermalEff_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatThermalEff () const
      {
        return this->SimFlowEnergyTransSto_HeatThermalEff_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_HeatThermalEff_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatThermalEff ()
      {
        return this->SimFlowEnergyTransSto_HeatThermalEff_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatThermalEff (const SimFlowEnergyTransSto_HeatThermalEff_type& x)
      {
        this->SimFlowEnergyTransSto_HeatThermalEff_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_HeatThermalEff (const SimFlowEnergyTransSto_HeatThermalEff_optional& x)
      {
        this->SimFlowEnergyTransSto_HeatThermalEff_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_PartLoadFactorCurveName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PartLoadFactorCurveName () const
      {
        return this->SimFlowEnergyTransSto_PartLoadFactorCurveName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_PartLoadFactorCurveName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PartLoadFactorCurveName ()
      {
        return this->SimFlowEnergyTransSto_PartLoadFactorCurveName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PartLoadFactorCurveName (const SimFlowEnergyTransSto_PartLoadFactorCurveName_type& x)
      {
        this->SimFlowEnergyTransSto_PartLoadFactorCurveName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PartLoadFactorCurveName (const SimFlowEnergyTransSto_PartLoadFactorCurveName_optional& x)
      {
        this->SimFlowEnergyTransSto_PartLoadFactorCurveName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PartLoadFactorCurveName (::std::auto_ptr< SimFlowEnergyTransSto_PartLoadFactorCurveName_type > x)
      {
        this->SimFlowEnergyTransSto_PartLoadFactorCurveName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate () const
      {
        return this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate ()
      {
        return this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_type& x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional& x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleParasiticFuelType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelType () const
      {
        return this->SimFlowEnergyTransSto_fCycleParasiticFuelType_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleParasiticFuelType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelType ()
      {
        return this->SimFlowEnergyTransSto_fCycleParasiticFuelType_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelType (const SimFlowEnergyTransSto_fCycleParasiticFuelType_type& x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticFuelType_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelType (const SimFlowEnergyTransSto_fCycleParasiticFuelType_optional& x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticFuelType_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticFuelType (::std::auto_ptr< SimFlowEnergyTransSto_fCycleParasiticFuelType_type > x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticFuelType_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank () const
      {
        return this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank ()
      {
        return this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_type& x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional& x)
      {
        this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate () const
      {
        return this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate ()
      {
        return this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_type& x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional& x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelType () const
      {
        return this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelType ()
      {
        return this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelType (const SimFlowEnergyTransSto_OnCycleParasiticFuelType_type& x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelType (const SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional& x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticFuelType (::std::auto_ptr< SimFlowEnergyTransSto_OnCycleParasiticFuelType_type > x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank () const
      {
        return this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank ()
      {
        return this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_type& x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional& x)
      {
        this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempdic_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempdic () const
      {
        return this->SimFlowEnergyTransSto_AmbTempdic_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempdic_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempdic ()
      {
        return this->SimFlowEnergyTransSto_AmbTempdic_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempdic (const SimFlowEnergyTransSto_AmbTempdic_type& x)
      {
        this->SimFlowEnergyTransSto_AmbTempdic_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempdic (const SimFlowEnergyTransSto_AmbTempdic_optional& x)
      {
        this->SimFlowEnergyTransSto_AmbTempdic_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempdic (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempdic_type > x)
      {
        this->SimFlowEnergyTransSto_AmbTempdic_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempSchedName () const
      {
        return this->SimFlowEnergyTransSto_AmbTempSchedName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempSchedName ()
      {
        return this->SimFlowEnergyTransSto_AmbTempSchedName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempSchedName (const SimFlowEnergyTransSto_AmbTempSchedName_type& x)
      {
        this->SimFlowEnergyTransSto_AmbTempSchedName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempSchedName (const SimFlowEnergyTransSto_AmbTempSchedName_optional& x)
      {
        this->SimFlowEnergyTransSto_AmbTempSchedName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempSchedName_type > x)
      {
        this->SimFlowEnergyTransSto_AmbTempSchedName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempZoneName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempZoneName () const
      {
        return this->SimFlowEnergyTransSto_AmbTempZoneName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempZoneName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempZoneName ()
      {
        return this->SimFlowEnergyTransSto_AmbTempZoneName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempZoneName (const SimFlowEnergyTransSto_AmbTempZoneName_type& x)
      {
        this->SimFlowEnergyTransSto_AmbTempZoneName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempZoneName (const SimFlowEnergyTransSto_AmbTempZoneName_optional& x)
      {
        this->SimFlowEnergyTransSto_AmbTempZoneName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempZoneName (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempZoneName_type > x)
      {
        this->SimFlowEnergyTransSto_AmbTempZoneName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempOutdrAirNodeName () const
      {
        return this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempOutdrAirNodeName ()
      {
        return this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempOutdrAirNodeName (const SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type& x)
      {
        this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempOutdrAirNodeName (const SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional& x)
      {
        this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_AmbTempOutdrAirNodeName (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type > x)
      {
        this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp () const
      {
        return this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp ()
      {
        return this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_type& x)
      {
        this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional& x)
      {
        this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleLossFractToZone_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossFractToZone () const
      {
        return this->SimFlowEnergyTransSto_fCycleLossFractToZone_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_fCycleLossFractToZone_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossFractToZone ()
      {
        return this->SimFlowEnergyTransSto_fCycleLossFractToZone_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossFractToZone (const SimFlowEnergyTransSto_fCycleLossFractToZone_type& x)
      {
        this->SimFlowEnergyTransSto_fCycleLossFractToZone_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_fCycleLossFractToZone (const SimFlowEnergyTransSto_fCycleLossFractToZone_optional& x)
      {
        this->SimFlowEnergyTransSto_fCycleLossFractToZone_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp () const
      {
        return this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp ()
      {
        return this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_type& x)
      {
        this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional& x)
      {
        this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleLossFractToZone_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossFractToZone () const
      {
        return this->SimFlowEnergyTransSto_OnCycleLossFractToZone_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_OnCycleLossFractToZone_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossFractToZone ()
      {
        return this->SimFlowEnergyTransSto_OnCycleLossFractToZone_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossFractToZone (const SimFlowEnergyTransSto_OnCycleLossFractToZone_type& x)
      {
        this->SimFlowEnergyTransSto_OnCycleLossFractToZone_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_OnCycleLossFractToZone (const SimFlowEnergyTransSto_OnCycleLossFractToZone_optional& x)
      {
        this->SimFlowEnergyTransSto_OnCycleLossFractToZone_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_PeakUseFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PeakUseFlowRate () const
      {
        return this->SimFlowEnergyTransSto_PeakUseFlowRate_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_PeakUseFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PeakUseFlowRate ()
      {
        return this->SimFlowEnergyTransSto_PeakUseFlowRate_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PeakUseFlowRate (const SimFlowEnergyTransSto_PeakUseFlowRate_type& x)
      {
        this->SimFlowEnergyTransSto_PeakUseFlowRate_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_PeakUseFlowRate (const SimFlowEnergyTransSto_PeakUseFlowRate_optional& x)
      {
        this->SimFlowEnergyTransSto_PeakUseFlowRate_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseFlowRateFractSchedName () const
      {
        return this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseFlowRateFractSchedName ()
      {
        return this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseFlowRateFractSchedName (const SimFlowEnergyTransSto_UseFlowRateFractSchedName_type& x)
      {
        this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseFlowRateFractSchedName (const SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional& x)
      {
        this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseFlowRateFractSchedName (::std::auto_ptr< SimFlowEnergyTransSto_UseFlowRateFractSchedName_type > x)
      {
        this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_ColdWaterSupTempSchedName () const
      {
        return this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_ColdWaterSupTempSchedName ()
      {
        return this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_ColdWaterSupTempSchedName (const SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type& x)
      {
        this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_ColdWaterSupTempSchedName (const SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional& x)
      {
        this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_ColdWaterSupTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type > x)
      {
        this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideInletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideInletNodeName () const
      {
        return this->SimFlowEnergyTransSto_UseSideInletNodeName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideInletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideInletNodeName ()
      {
        return this->SimFlowEnergyTransSto_UseSideInletNodeName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideInletNodeName (const SimFlowEnergyTransSto_UseSideInletNodeName_type& x)
      {
        this->SimFlowEnergyTransSto_UseSideInletNodeName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideInletNodeName (const SimFlowEnergyTransSto_UseSideInletNodeName_optional& x)
      {
        this->SimFlowEnergyTransSto_UseSideInletNodeName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideInletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_UseSideInletNodeName_type > x)
      {
        this->SimFlowEnergyTransSto_UseSideInletNodeName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideOutletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideOutletNodeName () const
      {
        return this->SimFlowEnergyTransSto_UseSideOutletNodeName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideOutletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideOutletNodeName ()
      {
        return this->SimFlowEnergyTransSto_UseSideOutletNodeName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideOutletNodeName (const SimFlowEnergyTransSto_UseSideOutletNodeName_type& x)
      {
        this->SimFlowEnergyTransSto_UseSideOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideOutletNodeName (const SimFlowEnergyTransSto_UseSideOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTransSto_UseSideOutletNodeName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideOutletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_UseSideOutletNodeName_type > x)
      {
        this->SimFlowEnergyTransSto_UseSideOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideEffect_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideEffect () const
      {
        return this->SimFlowEnergyTransSto_UseSideEffect_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideEffect_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideEffect ()
      {
        return this->SimFlowEnergyTransSto_UseSideEffect_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideEffect (const SimFlowEnergyTransSto_UseSideEffect_type& x)
      {
        this->SimFlowEnergyTransSto_UseSideEffect_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideEffect (const SimFlowEnergyTransSto_UseSideEffect_optional& x)
      {
        this->SimFlowEnergyTransSto_UseSideEffect_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideInletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideInletNodeName () const
      {
        return this->SimFlowEnergyTransSto_SrcSideInletNodeName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideInletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideInletNodeName ()
      {
        return this->SimFlowEnergyTransSto_SrcSideInletNodeName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideInletNodeName (const SimFlowEnergyTransSto_SrcSideInletNodeName_type& x)
      {
        this->SimFlowEnergyTransSto_SrcSideInletNodeName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideInletNodeName (const SimFlowEnergyTransSto_SrcSideInletNodeName_optional& x)
      {
        this->SimFlowEnergyTransSto_SrcSideInletNodeName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideInletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_SrcSideInletNodeName_type > x)
      {
        this->SimFlowEnergyTransSto_SrcSideInletNodeName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideOutletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideOutletNodeName () const
      {
        return this->SimFlowEnergyTransSto_SrcSideOutletNodeName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideOutletNodeName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideOutletNodeName ()
      {
        return this->SimFlowEnergyTransSto_SrcSideOutletNodeName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideOutletNodeName (const SimFlowEnergyTransSto_SrcSideOutletNodeName_type& x)
      {
        this->SimFlowEnergyTransSto_SrcSideOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideOutletNodeName (const SimFlowEnergyTransSto_SrcSideOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTransSto_SrcSideOutletNodeName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideOutletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_SrcSideOutletNodeName_type > x)
      {
        this->SimFlowEnergyTransSto_SrcSideOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideEffect_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideEffect () const
      {
        return this->SimFlowEnergyTransSto_SrcSideEffect_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideEffect_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideEffect ()
      {
        return this->SimFlowEnergyTransSto_SrcSideEffect_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideEffect (const SimFlowEnergyTransSto_SrcSideEffect_type& x)
      {
        this->SimFlowEnergyTransSto_SrcSideEffect_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideEffect (const SimFlowEnergyTransSto_SrcSideEffect_optional& x)
      {
        this->SimFlowEnergyTransSto_SrcSideEffect_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideDesignFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideDesignFlowRate () const
      {
        return this->SimFlowEnergyTransSto_UseSideDesignFlowRate_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_UseSideDesignFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideDesignFlowRate ()
      {
        return this->SimFlowEnergyTransSto_UseSideDesignFlowRate_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideDesignFlowRate (const SimFlowEnergyTransSto_UseSideDesignFlowRate_type& x)
      {
        this->SimFlowEnergyTransSto_UseSideDesignFlowRate_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_UseSideDesignFlowRate (const SimFlowEnergyTransSto_UseSideDesignFlowRate_optional& x)
      {
        this->SimFlowEnergyTransSto_UseSideDesignFlowRate_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideDesignFlowRate () const
      {
        return this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideDesignFlowRate ()
      {
        return this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideDesignFlowRate (const SimFlowEnergyTransSto_SrcSideDesignFlowRate_type& x)
      {
        this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SrcSideDesignFlowRate (const SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional& x)
      {
        this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_directWaterHeatingRecovTime () const
      {
        return this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_directWaterHeatingRecovTime ()
      {
        return this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_directWaterHeatingRecovTime (const SimFlowEnergyTransSto_directWaterHeatingRecovTime_type& x)
      {
        this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_directWaterHeatingRecovTime (const SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional& x)
      {
        this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SourceSideFlowCntrlMode () const
      {
        return this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SourceSideFlowCntrlMode ()
      {
        return this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SourceSideFlowCntrlMode (const SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type& x)
      {
        this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SourceSideFlowCntrlMode (const SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional& x)
      {
        this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_SourceSideFlowCntrlMode (::std::auto_ptr< SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type > x)
      {
        this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName () const
      {
        return this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName ()
      {
        return this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName (const SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type& x)
      {
        this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName (const SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional& x)
      {
        this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type > x)
      {
        this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24DraftFanPwr_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24DraftFanPwr () const
      {
        return this->T24DraftFanPwr_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24DraftFanPwr_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24DraftFanPwr ()
      {
        return this->T24DraftFanPwr_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24DraftFanPwr (const T24DraftFanPwr_type& x)
      {
        this->T24DraftFanPwr_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24DraftFanPwr (const T24DraftFanPwr_optional& x)
      {
        this->T24DraftFanPwr_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24EnergyFactor_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24EnergyFactor () const
      {
        return this->T24EnergyFactor_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24EnergyFactor_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24EnergyFactor ()
      {
        return this->T24EnergyFactor_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24EnergyFactor (const T24EnergyFactor_type& x)
      {
        this->T24EnergyFactor_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24EnergyFactor (const T24EnergyFactor_optional& x)
      {
        this->T24EnergyFactor_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24ElecIgnit_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ElecIgnit () const
      {
        return this->T24ElecIgnit_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24ElecIgnit_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ElecIgnit ()
      {
        return this->T24ElecIgnit_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ElecIgnit (const T24ElecIgnit_type& x)
      {
        this->T24ElecIgnit_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ElecIgnit (const T24ElecIgnit_optional& x)
      {
        this->T24ElecIgnit_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24PilotEnergy_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24PilotEnergy () const
      {
        return this->T24PilotEnergy_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24PilotEnergy_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24PilotEnergy ()
      {
        return this->T24PilotEnergy_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24PilotEnergy (const T24PilotEnergy_type& x)
      {
        this->T24PilotEnergy_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24PilotEnergy (const T24PilotEnergy_optional& x)
      {
        this->T24PilotEnergy_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24RecEff_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24RecEff () const
      {
        return this->T24RecEff_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24RecEff_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24RecEff ()
      {
        return this->T24RecEff_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24RecEff (const T24RecEff_type& x)
      {
        this->T24RecEff_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24RecEff (const T24RecEff_optional& x)
      {
        this->T24RecEff_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24StdbyLossFrac_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24StdbyLossFrac () const
      {
        return this->T24StdbyLossFrac_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24StdbyLossFrac_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24StdbyLossFrac ()
      {
        return this->T24StdbyLossFrac_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24StdbyLossFrac (const T24StdbyLossFrac_type& x)
      {
        this->T24StdbyLossFrac_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24StdbyLossFrac (const T24StdbyLossFrac_optional& x)
      {
        this->T24StdbyLossFrac_ = x;
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24ConstructStatus2_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ConstructStatus2 () const
      {
        return this->T24ConstructStatus2_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24ConstructStatus2_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ConstructStatus2 ()
      {
        return this->T24ConstructStatus2_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ConstructStatus2 (const T24ConstructStatus2_type& x)
      {
        this->T24ConstructStatus2_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ConstructStatus2 (const T24ConstructStatus2_optional& x)
      {
        this->T24ConstructStatus2_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24ConstructStatus2 (::std::auto_ptr< T24ConstructStatus2_type > x)
      {
        this->T24ConstructStatus2_.set (x);
      }

      const SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24WtrHtrType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24WtrHtrType () const
      {
        return this->T24WtrHtrType_;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::T24WtrHtrType_optional& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24WtrHtrType ()
      {
        return this->T24WtrHtrType_;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24WtrHtrType (const T24WtrHtrType_type& x)
      {
        this->T24WtrHtrType_.set (x);
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24WtrHtrType (const T24WtrHtrType_optional& x)
      {
        this->T24WtrHtrType_ = x;
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      T24WtrHtrType (::std::auto_ptr< T24WtrHtrType_type > x)
      {
        this->T24WtrHtrType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransferStorage_HotWaterTank_Mixed
      //

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank (),
        SimFlowEnergyTransSto_Name_ (this),
        SimFlowEnergyTransSto_TankVol_ (this),
        SimFlowEnergyTransSto_SetpointTempSchedName_ (this),
        SimFlowEnergyTransSto_DeadbandTempDifference_ (this),
        SimFlowEnergyTransSto_MaxTempLimit_ (this),
        SimFlowEnergyTransSto_HeatCntlType_ (this),
        SimFlowEnergyTransSto_HeatMaxCap_ (this),
        SimFlowEnergyTransSto_HeatMinCap_ (this),
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_ (this),
        SimFlowEnergyTransSto_HeatIgnitionDelay_ (this),
        SimFlowEnergyTransSto_HeatFuelType_ (this),
        SimFlowEnergyTransSto_HeatThermalEff_ (this),
        SimFlowEnergyTransSto_PartLoadFactorCurveName_ (this),
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_ (this),
        SimFlowEnergyTransSto_fCycleParasiticFuelType_ (this),
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelType_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_ (this),
        SimFlowEnergyTransSto_AmbTempdic_ (this),
        SimFlowEnergyTransSto_AmbTempSchedName_ (this),
        SimFlowEnergyTransSto_AmbTempZoneName_ (this),
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_ (this),
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_ (this),
        SimFlowEnergyTransSto_fCycleLossFractToZone_ (this),
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_ (this),
        SimFlowEnergyTransSto_OnCycleLossFractToZone_ (this),
        SimFlowEnergyTransSto_PeakUseFlowRate_ (this),
        SimFlowEnergyTransSto_UseFlowRateFractSchedName_ (this),
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName_ (this),
        SimFlowEnergyTransSto_UseSideInletNodeName_ (this),
        SimFlowEnergyTransSto_UseSideOutletNodeName_ (this),
        SimFlowEnergyTransSto_UseSideEffect_ (this),
        SimFlowEnergyTransSto_SrcSideInletNodeName_ (this),
        SimFlowEnergyTransSto_SrcSideOutletNodeName_ (this),
        SimFlowEnergyTransSto_SrcSideEffect_ (this),
        SimFlowEnergyTransSto_UseSideDesignFlowRate_ (this),
        SimFlowEnergyTransSto_SrcSideDesignFlowRate_ (this),
        SimFlowEnergyTransSto_directWaterHeatingRecovTime_ (this),
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode_ (this),
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_ (this),
        T24DraftFanPwr_ (this),
        T24EnergyFactor_ (this),
        T24ElecIgnit_ (this),
        T24PilotEnergy_ (this),
        T24RecEff_ (this),
        T24StdbyLossFrac_ (this),
        T24ConstructStatus2_ (this),
        T24WtrHtrType_ (this)
      {
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank (RefId),
        SimFlowEnergyTransSto_Name_ (this),
        SimFlowEnergyTransSto_TankVol_ (this),
        SimFlowEnergyTransSto_SetpointTempSchedName_ (this),
        SimFlowEnergyTransSto_DeadbandTempDifference_ (this),
        SimFlowEnergyTransSto_MaxTempLimit_ (this),
        SimFlowEnergyTransSto_HeatCntlType_ (this),
        SimFlowEnergyTransSto_HeatMaxCap_ (this),
        SimFlowEnergyTransSto_HeatMinCap_ (this),
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_ (this),
        SimFlowEnergyTransSto_HeatIgnitionDelay_ (this),
        SimFlowEnergyTransSto_HeatFuelType_ (this),
        SimFlowEnergyTransSto_HeatThermalEff_ (this),
        SimFlowEnergyTransSto_PartLoadFactorCurveName_ (this),
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_ (this),
        SimFlowEnergyTransSto_fCycleParasiticFuelType_ (this),
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelType_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_ (this),
        SimFlowEnergyTransSto_AmbTempdic_ (this),
        SimFlowEnergyTransSto_AmbTempSchedName_ (this),
        SimFlowEnergyTransSto_AmbTempZoneName_ (this),
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_ (this),
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_ (this),
        SimFlowEnergyTransSto_fCycleLossFractToZone_ (this),
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_ (this),
        SimFlowEnergyTransSto_OnCycleLossFractToZone_ (this),
        SimFlowEnergyTransSto_PeakUseFlowRate_ (this),
        SimFlowEnergyTransSto_UseFlowRateFractSchedName_ (this),
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName_ (this),
        SimFlowEnergyTransSto_UseSideInletNodeName_ (this),
        SimFlowEnergyTransSto_UseSideOutletNodeName_ (this),
        SimFlowEnergyTransSto_UseSideEffect_ (this),
        SimFlowEnergyTransSto_SrcSideInletNodeName_ (this),
        SimFlowEnergyTransSto_SrcSideOutletNodeName_ (this),
        SimFlowEnergyTransSto_SrcSideEffect_ (this),
        SimFlowEnergyTransSto_UseSideDesignFlowRate_ (this),
        SimFlowEnergyTransSto_SrcSideDesignFlowRate_ (this),
        SimFlowEnergyTransSto_directWaterHeatingRecovTime_ (this),
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode_ (this),
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_ (this),
        T24DraftFanPwr_ (this),
        T24EnergyFactor_ (this),
        T24ElecIgnit_ (this),
        T24PilotEnergy_ (this),
        T24RecEff_ (this),
        T24StdbyLossFrac_ (this),
        T24ConstructStatus2_ (this),
        T24WtrHtrType_ (this)
      {
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const SimFlowEnergyTransferStorage_HotWaterTank_Mixed& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank (x, f, c),
        SimFlowEnergyTransSto_Name_ (x.SimFlowEnergyTransSto_Name_, f, this),
        SimFlowEnergyTransSto_TankVol_ (x.SimFlowEnergyTransSto_TankVol_, f, this),
        SimFlowEnergyTransSto_SetpointTempSchedName_ (x.SimFlowEnergyTransSto_SetpointTempSchedName_, f, this),
        SimFlowEnergyTransSto_DeadbandTempDifference_ (x.SimFlowEnergyTransSto_DeadbandTempDifference_, f, this),
        SimFlowEnergyTransSto_MaxTempLimit_ (x.SimFlowEnergyTransSto_MaxTempLimit_, f, this),
        SimFlowEnergyTransSto_HeatCntlType_ (x.SimFlowEnergyTransSto_HeatCntlType_, f, this),
        SimFlowEnergyTransSto_HeatMaxCap_ (x.SimFlowEnergyTransSto_HeatMaxCap_, f, this),
        SimFlowEnergyTransSto_HeatMinCap_ (x.SimFlowEnergyTransSto_HeatMinCap_, f, this),
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_ (x.SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_, f, this),
        SimFlowEnergyTransSto_HeatIgnitionDelay_ (x.SimFlowEnergyTransSto_HeatIgnitionDelay_, f, this),
        SimFlowEnergyTransSto_HeatFuelType_ (x.SimFlowEnergyTransSto_HeatFuelType_, f, this),
        SimFlowEnergyTransSto_HeatThermalEff_ (x.SimFlowEnergyTransSto_HeatThermalEff_, f, this),
        SimFlowEnergyTransSto_PartLoadFactorCurveName_ (x.SimFlowEnergyTransSto_PartLoadFactorCurveName_, f, this),
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_ (x.SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_, f, this),
        SimFlowEnergyTransSto_fCycleParasiticFuelType_ (x.SimFlowEnergyTransSto_fCycleParasiticFuelType_, f, this),
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_ (x.SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_, f, this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_ (x.SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_, f, this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelType_ (x.SimFlowEnergyTransSto_OnCycleParasiticFuelType_, f, this),
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_ (x.SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_, f, this),
        SimFlowEnergyTransSto_AmbTempdic_ (x.SimFlowEnergyTransSto_AmbTempdic_, f, this),
        SimFlowEnergyTransSto_AmbTempSchedName_ (x.SimFlowEnergyTransSto_AmbTempSchedName_, f, this),
        SimFlowEnergyTransSto_AmbTempZoneName_ (x.SimFlowEnergyTransSto_AmbTempZoneName_, f, this),
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_ (x.SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_, f, this),
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_ (x.SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_, f, this),
        SimFlowEnergyTransSto_fCycleLossFractToZone_ (x.SimFlowEnergyTransSto_fCycleLossFractToZone_, f, this),
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_ (x.SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_, f, this),
        SimFlowEnergyTransSto_OnCycleLossFractToZone_ (x.SimFlowEnergyTransSto_OnCycleLossFractToZone_, f, this),
        SimFlowEnergyTransSto_PeakUseFlowRate_ (x.SimFlowEnergyTransSto_PeakUseFlowRate_, f, this),
        SimFlowEnergyTransSto_UseFlowRateFractSchedName_ (x.SimFlowEnergyTransSto_UseFlowRateFractSchedName_, f, this),
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName_ (x.SimFlowEnergyTransSto_ColdWaterSupTempSchedName_, f, this),
        SimFlowEnergyTransSto_UseSideInletNodeName_ (x.SimFlowEnergyTransSto_UseSideInletNodeName_, f, this),
        SimFlowEnergyTransSto_UseSideOutletNodeName_ (x.SimFlowEnergyTransSto_UseSideOutletNodeName_, f, this),
        SimFlowEnergyTransSto_UseSideEffect_ (x.SimFlowEnergyTransSto_UseSideEffect_, f, this),
        SimFlowEnergyTransSto_SrcSideInletNodeName_ (x.SimFlowEnergyTransSto_SrcSideInletNodeName_, f, this),
        SimFlowEnergyTransSto_SrcSideOutletNodeName_ (x.SimFlowEnergyTransSto_SrcSideOutletNodeName_, f, this),
        SimFlowEnergyTransSto_SrcSideEffect_ (x.SimFlowEnergyTransSto_SrcSideEffect_, f, this),
        SimFlowEnergyTransSto_UseSideDesignFlowRate_ (x.SimFlowEnergyTransSto_UseSideDesignFlowRate_, f, this),
        SimFlowEnergyTransSto_SrcSideDesignFlowRate_ (x.SimFlowEnergyTransSto_SrcSideDesignFlowRate_, f, this),
        SimFlowEnergyTransSto_directWaterHeatingRecovTime_ (x.SimFlowEnergyTransSto_directWaterHeatingRecovTime_, f, this),
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode_ (x.SimFlowEnergyTransSto_SourceSideFlowCntrlMode_, f, this),
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_ (x.SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_, f, this),
        T24DraftFanPwr_ (x.T24DraftFanPwr_, f, this),
        T24EnergyFactor_ (x.T24EnergyFactor_, f, this),
        T24ElecIgnit_ (x.T24ElecIgnit_, f, this),
        T24PilotEnergy_ (x.T24PilotEnergy_, f, this),
        T24RecEff_ (x.T24RecEff_, f, this),
        T24StdbyLossFrac_ (x.T24StdbyLossFrac_, f, this),
        T24ConstructStatus2_ (x.T24ConstructStatus2_, f, this),
        T24WtrHtrType_ (x.T24WtrHtrType_, f, this)
      {
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTransSto_Name_ (this),
        SimFlowEnergyTransSto_TankVol_ (this),
        SimFlowEnergyTransSto_SetpointTempSchedName_ (this),
        SimFlowEnergyTransSto_DeadbandTempDifference_ (this),
        SimFlowEnergyTransSto_MaxTempLimit_ (this),
        SimFlowEnergyTransSto_HeatCntlType_ (this),
        SimFlowEnergyTransSto_HeatMaxCap_ (this),
        SimFlowEnergyTransSto_HeatMinCap_ (this),
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_ (this),
        SimFlowEnergyTransSto_HeatIgnitionDelay_ (this),
        SimFlowEnergyTransSto_HeatFuelType_ (this),
        SimFlowEnergyTransSto_HeatThermalEff_ (this),
        SimFlowEnergyTransSto_PartLoadFactorCurveName_ (this),
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_ (this),
        SimFlowEnergyTransSto_fCycleParasiticFuelType_ (this),
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticFuelType_ (this),
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_ (this),
        SimFlowEnergyTransSto_AmbTempdic_ (this),
        SimFlowEnergyTransSto_AmbTempSchedName_ (this),
        SimFlowEnergyTransSto_AmbTempZoneName_ (this),
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_ (this),
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_ (this),
        SimFlowEnergyTransSto_fCycleLossFractToZone_ (this),
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_ (this),
        SimFlowEnergyTransSto_OnCycleLossFractToZone_ (this),
        SimFlowEnergyTransSto_PeakUseFlowRate_ (this),
        SimFlowEnergyTransSto_UseFlowRateFractSchedName_ (this),
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName_ (this),
        SimFlowEnergyTransSto_UseSideInletNodeName_ (this),
        SimFlowEnergyTransSto_UseSideOutletNodeName_ (this),
        SimFlowEnergyTransSto_UseSideEffect_ (this),
        SimFlowEnergyTransSto_SrcSideInletNodeName_ (this),
        SimFlowEnergyTransSto_SrcSideOutletNodeName_ (this),
        SimFlowEnergyTransSto_SrcSideEffect_ (this),
        SimFlowEnergyTransSto_UseSideDesignFlowRate_ (this),
        SimFlowEnergyTransSto_SrcSideDesignFlowRate_ (this),
        SimFlowEnergyTransSto_directWaterHeatingRecovTime_ (this),
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode_ (this),
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_ (this),
        T24DraftFanPwr_ (this),
        T24EnergyFactor_ (this),
        T24ElecIgnit_ (this),
        T24PilotEnergy_ (this),
        T24RecEff_ (this),
        T24StdbyLossFrac_ (this),
        T24ConstructStatus2_ (this),
        T24WtrHtrType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTransSto_Name
          //
          if (n.name () == "SimFlowEnergyTransSto_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_Name_type > r (
              SimFlowEnergyTransSto_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_Name_)
            {
              this->SimFlowEnergyTransSto_Name_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_TankVol
          //
          if (n.name () == "SimFlowEnergyTransSto_TankVol" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_TankVol_)
            {
              this->SimFlowEnergyTransSto_TankVol_.set (SimFlowEnergyTransSto_TankVol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_SetpointTempSchedName
          //
          if (n.name () == "SimFlowEnergyTransSto_SetpointTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_SetpointTempSchedName_type > r (
              SimFlowEnergyTransSto_SetpointTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_SetpointTempSchedName_)
            {
              this->SimFlowEnergyTransSto_SetpointTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_DeadbandTempDifference
          //
          if (n.name () == "SimFlowEnergyTransSto_DeadbandTempDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_DeadbandTempDifference_)
            {
              this->SimFlowEnergyTransSto_DeadbandTempDifference_.set (SimFlowEnergyTransSto_DeadbandTempDifference_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_MaxTempLimit
          //
          if (n.name () == "SimFlowEnergyTransSto_MaxTempLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_MaxTempLimit_)
            {
              this->SimFlowEnergyTransSto_MaxTempLimit_.set (SimFlowEnergyTransSto_MaxTempLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatCntlType
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatCntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_HeatCntlType_type > r (
              SimFlowEnergyTransSto_HeatCntlType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_HeatCntlType_)
            {
              this->SimFlowEnergyTransSto_HeatCntlType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatMaxCap
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatMaxCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_HeatMaxCap_)
            {
              this->SimFlowEnergyTransSto_HeatMaxCap_.set (SimFlowEnergyTransSto_HeatMaxCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatMinCap
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatMinCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_HeatMinCap_)
            {
              this->SimFlowEnergyTransSto_HeatMinCap_.set (SimFlowEnergyTransSto_HeatMinCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatIgnitionMinFlowRate
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatIgnitionMinFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_)
            {
              this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_.set (SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatIgnitionDelay
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatIgnitionDelay" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_HeatIgnitionDelay_)
            {
              this->SimFlowEnergyTransSto_HeatIgnitionDelay_.set (SimFlowEnergyTransSto_HeatIgnitionDelay_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatFuelType
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatFuelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_HeatFuelType_type > r (
              SimFlowEnergyTransSto_HeatFuelType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_HeatFuelType_)
            {
              this->SimFlowEnergyTransSto_HeatFuelType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_HeatThermalEff
          //
          if (n.name () == "SimFlowEnergyTransSto_HeatThermalEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_HeatThermalEff_)
            {
              this->SimFlowEnergyTransSto_HeatThermalEff_.set (SimFlowEnergyTransSto_HeatThermalEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_PartLoadFactorCurveName
          //
          if (n.name () == "SimFlowEnergyTransSto_PartLoadFactorCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_PartLoadFactorCurveName_type > r (
              SimFlowEnergyTransSto_PartLoadFactorCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_PartLoadFactorCurveName_)
            {
              this->SimFlowEnergyTransSto_PartLoadFactorCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate
          //
          if (n.name () == "SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_)
            {
              this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_.set (SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_fCycleParasiticFuelType
          //
          if (n.name () == "SimFlowEnergyTransSto_fCycleParasiticFuelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_fCycleParasiticFuelType_type > r (
              SimFlowEnergyTransSto_fCycleParasiticFuelType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_fCycleParasiticFuelType_)
            {
              this->SimFlowEnergyTransSto_fCycleParasiticFuelType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank
          //
          if (n.name () == "SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_)
            {
              this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_.set (SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate
          //
          if (n.name () == "SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_)
            {
              this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_.set (SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_OnCycleParasiticFuelType
          //
          if (n.name () == "SimFlowEnergyTransSto_OnCycleParasiticFuelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_OnCycleParasiticFuelType_type > r (
              SimFlowEnergyTransSto_OnCycleParasiticFuelType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_)
            {
              this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank
          //
          if (n.name () == "SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_)
            {
              this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_.set (SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_AmbTempdic
          //
          if (n.name () == "SimFlowEnergyTransSto_AmbTempdic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_AmbTempdic_type > r (
              SimFlowEnergyTransSto_AmbTempdic_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_AmbTempdic_)
            {
              this->SimFlowEnergyTransSto_AmbTempdic_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_AmbTempSchedName
          //
          if (n.name () == "SimFlowEnergyTransSto_AmbTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_AmbTempSchedName_type > r (
              SimFlowEnergyTransSto_AmbTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_AmbTempSchedName_)
            {
              this->SimFlowEnergyTransSto_AmbTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_AmbTempZoneName
          //
          if (n.name () == "SimFlowEnergyTransSto_AmbTempZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_AmbTempZoneName_type > r (
              SimFlowEnergyTransSto_AmbTempZoneName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_AmbTempZoneName_)
            {
              this->SimFlowEnergyTransSto_AmbTempZoneName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_AmbTempOutdrAirNodeName
          //
          if (n.name () == "SimFlowEnergyTransSto_AmbTempOutdrAirNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type > r (
              SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_)
            {
              this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp
          //
          if (n.name () == "SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_)
            {
              this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_.set (SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_fCycleLossFractToZone
          //
          if (n.name () == "SimFlowEnergyTransSto_fCycleLossFractToZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_fCycleLossFractToZone_)
            {
              this->SimFlowEnergyTransSto_fCycleLossFractToZone_.set (SimFlowEnergyTransSto_fCycleLossFractToZone_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp
          //
          if (n.name () == "SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_)
            {
              this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_.set (SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_OnCycleLossFractToZone
          //
          if (n.name () == "SimFlowEnergyTransSto_OnCycleLossFractToZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_OnCycleLossFractToZone_)
            {
              this->SimFlowEnergyTransSto_OnCycleLossFractToZone_.set (SimFlowEnergyTransSto_OnCycleLossFractToZone_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_PeakUseFlowRate
          //
          if (n.name () == "SimFlowEnergyTransSto_PeakUseFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_PeakUseFlowRate_)
            {
              this->SimFlowEnergyTransSto_PeakUseFlowRate_.set (SimFlowEnergyTransSto_PeakUseFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_UseFlowRateFractSchedName
          //
          if (n.name () == "SimFlowEnergyTransSto_UseFlowRateFractSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_UseFlowRateFractSchedName_type > r (
              SimFlowEnergyTransSto_UseFlowRateFractSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_)
            {
              this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_ColdWaterSupTempSchedName
          //
          if (n.name () == "SimFlowEnergyTransSto_ColdWaterSupTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type > r (
              SimFlowEnergyTransSto_ColdWaterSupTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_)
            {
              this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_UseSideInletNodeName
          //
          if (n.name () == "SimFlowEnergyTransSto_UseSideInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_UseSideInletNodeName_type > r (
              SimFlowEnergyTransSto_UseSideInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_UseSideInletNodeName_)
            {
              this->SimFlowEnergyTransSto_UseSideInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_UseSideOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTransSto_UseSideOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_UseSideOutletNodeName_type > r (
              SimFlowEnergyTransSto_UseSideOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_UseSideOutletNodeName_)
            {
              this->SimFlowEnergyTransSto_UseSideOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_UseSideEffect
          //
          if (n.name () == "SimFlowEnergyTransSto_UseSideEffect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_UseSideEffect_)
            {
              this->SimFlowEnergyTransSto_UseSideEffect_.set (SimFlowEnergyTransSto_UseSideEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_SrcSideInletNodeName
          //
          if (n.name () == "SimFlowEnergyTransSto_SrcSideInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_SrcSideInletNodeName_type > r (
              SimFlowEnergyTransSto_SrcSideInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_SrcSideInletNodeName_)
            {
              this->SimFlowEnergyTransSto_SrcSideInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_SrcSideOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTransSto_SrcSideOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_SrcSideOutletNodeName_type > r (
              SimFlowEnergyTransSto_SrcSideOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_SrcSideOutletNodeName_)
            {
              this->SimFlowEnergyTransSto_SrcSideOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_SrcSideEffect
          //
          if (n.name () == "SimFlowEnergyTransSto_SrcSideEffect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_SrcSideEffect_)
            {
              this->SimFlowEnergyTransSto_SrcSideEffect_.set (SimFlowEnergyTransSto_SrcSideEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_UseSideDesignFlowRate
          //
          if (n.name () == "SimFlowEnergyTransSto_UseSideDesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_UseSideDesignFlowRate_)
            {
              this->SimFlowEnergyTransSto_UseSideDesignFlowRate_.set (SimFlowEnergyTransSto_UseSideDesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_SrcSideDesignFlowRate
          //
          if (n.name () == "SimFlowEnergyTransSto_SrcSideDesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_)
            {
              this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_.set (SimFlowEnergyTransSto_SrcSideDesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_directWaterHeatingRecovTime
          //
          if (n.name () == "SimFlowEnergyTransSto_directWaterHeatingRecovTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_)
            {
              this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_.set (SimFlowEnergyTransSto_directWaterHeatingRecovTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTransSto_SourceSideFlowCntrlMode
          //
          if (n.name () == "SimFlowEnergyTransSto_SourceSideFlowCntrlMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type > r (
              SimFlowEnergyTransSto_SourceSideFlowCntrlMode_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_)
            {
              this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName
          //
          if (n.name () == "SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type > r (
              SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_)
            {
              this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_.set (r);
              continue;
            }
          }

          // T24DraftFanPwr
          //
          if (n.name () == "T24DraftFanPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24DraftFanPwr_)
            {
              this->T24DraftFanPwr_.set (T24DraftFanPwr_traits::create (i, f, this));
              continue;
            }
          }

          // T24EnergyFactor
          //
          if (n.name () == "T24EnergyFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24EnergyFactor_)
            {
              this->T24EnergyFactor_.set (T24EnergyFactor_traits::create (i, f, this));
              continue;
            }
          }

          // T24ElecIgnit
          //
          if (n.name () == "T24ElecIgnit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24ElecIgnit_)
            {
              this->T24ElecIgnit_.set (T24ElecIgnit_traits::create (i, f, this));
              continue;
            }
          }

          // T24PilotEnergy
          //
          if (n.name () == "T24PilotEnergy" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24PilotEnergy_)
            {
              this->T24PilotEnergy_.set (T24PilotEnergy_traits::create (i, f, this));
              continue;
            }
          }

          // T24RecEff
          //
          if (n.name () == "T24RecEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24RecEff_)
            {
              this->T24RecEff_.set (T24RecEff_traits::create (i, f, this));
              continue;
            }
          }

          // T24StdbyLossFrac
          //
          if (n.name () == "T24StdbyLossFrac" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24StdbyLossFrac_)
            {
              this->T24StdbyLossFrac_.set (T24StdbyLossFrac_traits::create (i, f, this));
              continue;
            }
          }

          // T24ConstructStatus2
          //
          if (n.name () == "T24ConstructStatus2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24ConstructStatus2_type > r (
              T24ConstructStatus2_traits::create (i, f, this));

            if (!this->T24ConstructStatus2_)
            {
              this->T24ConstructStatus2_.set (r);
              continue;
            }
          }

          // T24WtrHtrType
          //
          if (n.name () == "T24WtrHtrType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24WtrHtrType_type > r (
              T24WtrHtrType_traits::create (i, f, this));

            if (!this->T24WtrHtrType_)
            {
              this->T24WtrHtrType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed* SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransferStorage_HotWaterTank_Mixed (*this, f, c);
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed& SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      operator= (const SimFlowEnergyTransferStorage_HotWaterTank_Mixed& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank& > (*this) = x;
          this->SimFlowEnergyTransSto_Name_ = x.SimFlowEnergyTransSto_Name_;
          this->SimFlowEnergyTransSto_TankVol_ = x.SimFlowEnergyTransSto_TankVol_;
          this->SimFlowEnergyTransSto_SetpointTempSchedName_ = x.SimFlowEnergyTransSto_SetpointTempSchedName_;
          this->SimFlowEnergyTransSto_DeadbandTempDifference_ = x.SimFlowEnergyTransSto_DeadbandTempDifference_;
          this->SimFlowEnergyTransSto_MaxTempLimit_ = x.SimFlowEnergyTransSto_MaxTempLimit_;
          this->SimFlowEnergyTransSto_HeatCntlType_ = x.SimFlowEnergyTransSto_HeatCntlType_;
          this->SimFlowEnergyTransSto_HeatMaxCap_ = x.SimFlowEnergyTransSto_HeatMaxCap_;
          this->SimFlowEnergyTransSto_HeatMinCap_ = x.SimFlowEnergyTransSto_HeatMinCap_;
          this->SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_ = x.SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_;
          this->SimFlowEnergyTransSto_HeatIgnitionDelay_ = x.SimFlowEnergyTransSto_HeatIgnitionDelay_;
          this->SimFlowEnergyTransSto_HeatFuelType_ = x.SimFlowEnergyTransSto_HeatFuelType_;
          this->SimFlowEnergyTransSto_HeatThermalEff_ = x.SimFlowEnergyTransSto_HeatThermalEff_;
          this->SimFlowEnergyTransSto_PartLoadFactorCurveName_ = x.SimFlowEnergyTransSto_PartLoadFactorCurveName_;
          this->SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_ = x.SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_;
          this->SimFlowEnergyTransSto_fCycleParasiticFuelType_ = x.SimFlowEnergyTransSto_fCycleParasiticFuelType_;
          this->SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_ = x.SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_;
          this->SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_ = x.SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_;
          this->SimFlowEnergyTransSto_OnCycleParasiticFuelType_ = x.SimFlowEnergyTransSto_OnCycleParasiticFuelType_;
          this->SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_ = x.SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_;
          this->SimFlowEnergyTransSto_AmbTempdic_ = x.SimFlowEnergyTransSto_AmbTempdic_;
          this->SimFlowEnergyTransSto_AmbTempSchedName_ = x.SimFlowEnergyTransSto_AmbTempSchedName_;
          this->SimFlowEnergyTransSto_AmbTempZoneName_ = x.SimFlowEnergyTransSto_AmbTempZoneName_;
          this->SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_ = x.SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_;
          this->SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_ = x.SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_;
          this->SimFlowEnergyTransSto_fCycleLossFractToZone_ = x.SimFlowEnergyTransSto_fCycleLossFractToZone_;
          this->SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_ = x.SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_;
          this->SimFlowEnergyTransSto_OnCycleLossFractToZone_ = x.SimFlowEnergyTransSto_OnCycleLossFractToZone_;
          this->SimFlowEnergyTransSto_PeakUseFlowRate_ = x.SimFlowEnergyTransSto_PeakUseFlowRate_;
          this->SimFlowEnergyTransSto_UseFlowRateFractSchedName_ = x.SimFlowEnergyTransSto_UseFlowRateFractSchedName_;
          this->SimFlowEnergyTransSto_ColdWaterSupTempSchedName_ = x.SimFlowEnergyTransSto_ColdWaterSupTempSchedName_;
          this->SimFlowEnergyTransSto_UseSideInletNodeName_ = x.SimFlowEnergyTransSto_UseSideInletNodeName_;
          this->SimFlowEnergyTransSto_UseSideOutletNodeName_ = x.SimFlowEnergyTransSto_UseSideOutletNodeName_;
          this->SimFlowEnergyTransSto_UseSideEffect_ = x.SimFlowEnergyTransSto_UseSideEffect_;
          this->SimFlowEnergyTransSto_SrcSideInletNodeName_ = x.SimFlowEnergyTransSto_SrcSideInletNodeName_;
          this->SimFlowEnergyTransSto_SrcSideOutletNodeName_ = x.SimFlowEnergyTransSto_SrcSideOutletNodeName_;
          this->SimFlowEnergyTransSto_SrcSideEffect_ = x.SimFlowEnergyTransSto_SrcSideEffect_;
          this->SimFlowEnergyTransSto_UseSideDesignFlowRate_ = x.SimFlowEnergyTransSto_UseSideDesignFlowRate_;
          this->SimFlowEnergyTransSto_SrcSideDesignFlowRate_ = x.SimFlowEnergyTransSto_SrcSideDesignFlowRate_;
          this->SimFlowEnergyTransSto_directWaterHeatingRecovTime_ = x.SimFlowEnergyTransSto_directWaterHeatingRecovTime_;
          this->SimFlowEnergyTransSto_SourceSideFlowCntrlMode_ = x.SimFlowEnergyTransSto_SourceSideFlowCntrlMode_;
          this->SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_ = x.SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_;
          this->T24DraftFanPwr_ = x.T24DraftFanPwr_;
          this->T24EnergyFactor_ = x.T24EnergyFactor_;
          this->T24ElecIgnit_ = x.T24ElecIgnit_;
          this->T24PilotEnergy_ = x.T24PilotEnergy_;
          this->T24RecEff_ = x.T24RecEff_;
          this->T24StdbyLossFrac_ = x.T24StdbyLossFrac_;
          this->T24ConstructStatus2_ = x.T24ConstructStatus2_;
          this->T24WtrHtrType_ = x.T24WtrHtrType_;
        }

        return *this;
      }

      SimFlowEnergyTransferStorage_HotWaterTank_Mixed::
      ~SimFlowEnergyTransferStorage_HotWaterTank_Mixed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

