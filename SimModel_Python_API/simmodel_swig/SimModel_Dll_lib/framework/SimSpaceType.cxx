// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSpaceType.hxx"

#include "doublelist.hxx"

#include "t24infiltrmthd.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSpaceType
      // 

      const SimSpaceType::RepresentationMaps_optional& SimSpaceType::
      RepresentationMaps () const
      {
        return this->RepresentationMaps_;
      }

      SimSpaceType::RepresentationMaps_optional& SimSpaceType::
      RepresentationMaps ()
      {
        return this->RepresentationMaps_;
      }

      void SimSpaceType::
      RepresentationMaps (const RepresentationMaps_type& x)
      {
        this->RepresentationMaps_.set (x);
      }

      void SimSpaceType::
      RepresentationMaps (const RepresentationMaps_optional& x)
      {
        this->RepresentationMaps_ = x;
      }

      void SimSpaceType::
      RepresentationMaps (::std::auto_ptr< RepresentationMaps_type > x)
      {
        this->RepresentationMaps_.set (x);
      }

      const SimSpaceType::Tag_optional& SimSpaceType::
      Tag () const
      {
        return this->Tag_;
      }

      SimSpaceType::Tag_optional& SimSpaceType::
      Tag ()
      {
        return this->Tag_;
      }

      void SimSpaceType::
      Tag (const Tag_type& x)
      {
        this->Tag_.set (x);
      }

      void SimSpaceType::
      Tag (const Tag_optional& x)
      {
        this->Tag_ = x;
      }

      void SimSpaceType::
      Tag (::std::auto_ptr< Tag_type > x)
      {
        this->Tag_.set (x);
      }

      const SimSpaceType::SpaceThermalSimulationType_optional& SimSpaceType::
      SpaceThermalSimulationType () const
      {
        return this->SpaceThermalSimulationType_;
      }

      SimSpaceType::SpaceThermalSimulationType_optional& SimSpaceType::
      SpaceThermalSimulationType ()
      {
        return this->SpaceThermalSimulationType_;
      }

      void SimSpaceType::
      SpaceThermalSimulationType (const SpaceThermalSimulationType_type& x)
      {
        this->SpaceThermalSimulationType_.set (x);
      }

      void SimSpaceType::
      SpaceThermalSimulationType (const SpaceThermalSimulationType_optional& x)
      {
        this->SpaceThermalSimulationType_ = x;
      }

      void SimSpaceType::
      SpaceThermalSimulationType (::std::auto_ptr< SpaceThermalSimulationType_type > x)
      {
        this->SpaceThermalSimulationType_.set (x);
      }

      const SimSpaceType::SpaceConditioningRequirement_Double_optional& SimSpaceType::
      SpaceConditioningRequirement_Double () const
      {
        return this->SpaceConditioningRequirement_Double_;
      }

      SimSpaceType::SpaceConditioningRequirement_Double_optional& SimSpaceType::
      SpaceConditioningRequirement_Double ()
      {
        return this->SpaceConditioningRequirement_Double_;
      }

      void SimSpaceType::
      SpaceConditioningRequirement_Double (const SpaceConditioningRequirement_Double_type& x)
      {
        this->SpaceConditioningRequirement_Double_.set (x);
      }

      void SimSpaceType::
      SpaceConditioningRequirement_Double (const SpaceConditioningRequirement_Double_optional& x)
      {
        this->SpaceConditioningRequirement_Double_ = x;
      }

      const SimSpaceType::SpaceOccupantDensity_optional& SimSpaceType::
      SpaceOccupantDensity () const
      {
        return this->SpaceOccupantDensity_;
      }

      SimSpaceType::SpaceOccupantDensity_optional& SimSpaceType::
      SpaceOccupantDensity ()
      {
        return this->SpaceOccupantDensity_;
      }

      void SimSpaceType::
      SpaceOccupantDensity (const SpaceOccupantDensity_type& x)
      {
        this->SpaceOccupantDensity_.set (x);
      }

      void SimSpaceType::
      SpaceOccupantDensity (const SpaceOccupantDensity_optional& x)
      {
        this->SpaceOccupantDensity_ = x;
      }

      const SimSpaceType::SpaceOccupantHeatRateLatent_optional& SimSpaceType::
      SpaceOccupantHeatRateLatent () const
      {
        return this->SpaceOccupantHeatRateLatent_;
      }

      SimSpaceType::SpaceOccupantHeatRateLatent_optional& SimSpaceType::
      SpaceOccupantHeatRateLatent ()
      {
        return this->SpaceOccupantHeatRateLatent_;
      }

      void SimSpaceType::
      SpaceOccupantHeatRateLatent (const SpaceOccupantHeatRateLatent_type& x)
      {
        this->SpaceOccupantHeatRateLatent_.set (x);
      }

      void SimSpaceType::
      SpaceOccupantHeatRateLatent (const SpaceOccupantHeatRateLatent_optional& x)
      {
        this->SpaceOccupantHeatRateLatent_ = x;
      }

      const SimSpaceType::SpaceOccupantHeatRateSensible_optional& SimSpaceType::
      SpaceOccupantHeatRateSensible () const
      {
        return this->SpaceOccupantHeatRateSensible_;
      }

      SimSpaceType::SpaceOccupantHeatRateSensible_optional& SimSpaceType::
      SpaceOccupantHeatRateSensible ()
      {
        return this->SpaceOccupantHeatRateSensible_;
      }

      void SimSpaceType::
      SpaceOccupantHeatRateSensible (const SpaceOccupantHeatRateSensible_type& x)
      {
        this->SpaceOccupantHeatRateSensible_.set (x);
      }

      void SimSpaceType::
      SpaceOccupantHeatRateSensible (const SpaceOccupantHeatRateSensible_optional& x)
      {
        this->SpaceOccupantHeatRateSensible_ = x;
      }

      const SimSpaceType::SpaceOccupantLoad_optional& SimSpaceType::
      SpaceOccupantLoad () const
      {
        return this->SpaceOccupantLoad_;
      }

      SimSpaceType::SpaceOccupantLoad_optional& SimSpaceType::
      SpaceOccupantLoad ()
      {
        return this->SpaceOccupantLoad_;
      }

      void SimSpaceType::
      SpaceOccupantLoad (const SpaceOccupantLoad_type& x)
      {
        this->SpaceOccupantLoad_.set (x);
      }

      void SimSpaceType::
      SpaceOccupantLoad (const SpaceOccupantLoad_optional& x)
      {
        this->SpaceOccupantLoad_ = x;
      }

      const SimSpaceType::SpaceEquipmentLoad_optional& SimSpaceType::
      SpaceEquipmentLoad () const
      {
        return this->SpaceEquipmentLoad_;
      }

      SimSpaceType::SpaceEquipmentLoad_optional& SimSpaceType::
      SpaceEquipmentLoad ()
      {
        return this->SpaceEquipmentLoad_;
      }

      void SimSpaceType::
      SpaceEquipmentLoad (const SpaceEquipmentLoad_type& x)
      {
        this->SpaceEquipmentLoad_.set (x);
      }

      void SimSpaceType::
      SpaceEquipmentLoad (const SpaceEquipmentLoad_optional& x)
      {
        this->SpaceEquipmentLoad_ = x;
      }

      const SimSpaceType::SpaceLightingLoad_optional& SimSpaceType::
      SpaceLightingLoad () const
      {
        return this->SpaceLightingLoad_;
      }

      SimSpaceType::SpaceLightingLoad_optional& SimSpaceType::
      SpaceLightingLoad ()
      {
        return this->SpaceLightingLoad_;
      }

      void SimSpaceType::
      SpaceLightingLoad (const SpaceLightingLoad_type& x)
      {
        this->SpaceLightingLoad_.set (x);
      }

      void SimSpaceType::
      SpaceLightingLoad (const SpaceLightingLoad_optional& x)
      {
        this->SpaceLightingLoad_ = x;
      }

      const SimSpaceType::InsideDryBulbTempHeating_Double_optional& SimSpaceType::
      InsideDryBulbTempHeating_Double () const
      {
        return this->InsideDryBulbTempHeating_Double_;
      }

      SimSpaceType::InsideDryBulbTempHeating_Double_optional& SimSpaceType::
      InsideDryBulbTempHeating_Double ()
      {
        return this->InsideDryBulbTempHeating_Double_;
      }

      void SimSpaceType::
      InsideDryBulbTempHeating_Double (const InsideDryBulbTempHeating_Double_type& x)
      {
        this->InsideDryBulbTempHeating_Double_.set (x);
      }

      void SimSpaceType::
      InsideDryBulbTempHeating_Double (const InsideDryBulbTempHeating_Double_optional& x)
      {
        this->InsideDryBulbTempHeating_Double_ = x;
      }

      const SimSpaceType::InsideRelHumidityHeating_optional& SimSpaceType::
      InsideRelHumidityHeating () const
      {
        return this->InsideRelHumidityHeating_;
      }

      SimSpaceType::InsideRelHumidityHeating_optional& SimSpaceType::
      InsideRelHumidityHeating ()
      {
        return this->InsideRelHumidityHeating_;
      }

      void SimSpaceType::
      InsideRelHumidityHeating (const InsideRelHumidityHeating_type& x)
      {
        this->InsideRelHumidityHeating_.set (x);
      }

      void SimSpaceType::
      InsideRelHumidityHeating (const InsideRelHumidityHeating_optional& x)
      {
        this->InsideRelHumidityHeating_ = x;
      }

      const SimSpaceType::InsideDryBulbTempCooling_Double_optional& SimSpaceType::
      InsideDryBulbTempCooling_Double () const
      {
        return this->InsideDryBulbTempCooling_Double_;
      }

      SimSpaceType::InsideDryBulbTempCooling_Double_optional& SimSpaceType::
      InsideDryBulbTempCooling_Double ()
      {
        return this->InsideDryBulbTempCooling_Double_;
      }

      void SimSpaceType::
      InsideDryBulbTempCooling_Double (const InsideDryBulbTempCooling_Double_type& x)
      {
        this->InsideDryBulbTempCooling_Double_.set (x);
      }

      void SimSpaceType::
      InsideDryBulbTempCooling_Double (const InsideDryBulbTempCooling_Double_optional& x)
      {
        this->InsideDryBulbTempCooling_Double_ = x;
      }

      const SimSpaceType::InsideRelHumidityCooling_optional& SimSpaceType::
      InsideRelHumidityCooling () const
      {
        return this->InsideRelHumidityCooling_;
      }

      SimSpaceType::InsideRelHumidityCooling_optional& SimSpaceType::
      InsideRelHumidityCooling ()
      {
        return this->InsideRelHumidityCooling_;
      }

      void SimSpaceType::
      InsideRelHumidityCooling (const InsideRelHumidityCooling_type& x)
      {
        this->InsideRelHumidityCooling_.set (x);
      }

      void SimSpaceType::
      InsideRelHumidityCooling (const InsideRelHumidityCooling_optional& x)
      {
        this->InsideRelHumidityCooling_ = x;
      }

      const SimSpaceType::IncludesReturnAirPlenum_optional& SimSpaceType::
      IncludesReturnAirPlenum () const
      {
        return this->IncludesReturnAirPlenum_;
      }

      SimSpaceType::IncludesReturnAirPlenum_optional& SimSpaceType::
      IncludesReturnAirPlenum ()
      {
        return this->IncludesReturnAirPlenum_;
      }

      void SimSpaceType::
      IncludesReturnAirPlenum (const IncludesReturnAirPlenum_type& x)
      {
        this->IncludesReturnAirPlenum_.set (x);
      }

      void SimSpaceType::
      IncludesReturnAirPlenum (const IncludesReturnAirPlenum_optional& x)
      {
        this->IncludesReturnAirPlenum_ = x;
      }

      const SimSpaceType::PeakAirFlowCooling_Double_optional& SimSpaceType::
      PeakAirFlowCooling_Double () const
      {
        return this->PeakAirFlowCooling_Double_;
      }

      SimSpaceType::PeakAirFlowCooling_Double_optional& SimSpaceType::
      PeakAirFlowCooling_Double ()
      {
        return this->PeakAirFlowCooling_Double_;
      }

      void SimSpaceType::
      PeakAirFlowCooling_Double (const PeakAirFlowCooling_Double_type& x)
      {
        this->PeakAirFlowCooling_Double_.set (x);
      }

      void SimSpaceType::
      PeakAirFlowCooling_Double (const PeakAirFlowCooling_Double_optional& x)
      {
        this->PeakAirFlowCooling_Double_ = x;
      }

      const SimSpaceType::PeakAirFlowHeating_Double_optional& SimSpaceType::
      PeakAirFlowHeating_Double () const
      {
        return this->PeakAirFlowHeating_Double_;
      }

      SimSpaceType::PeakAirFlowHeating_Double_optional& SimSpaceType::
      PeakAirFlowHeating_Double ()
      {
        return this->PeakAirFlowHeating_Double_;
      }

      void SimSpaceType::
      PeakAirFlowHeating_Double (const PeakAirFlowHeating_Double_type& x)
      {
        this->PeakAirFlowHeating_Double_.set (x);
      }

      void SimSpaceType::
      PeakAirFlowHeating_Double (const PeakAirFlowHeating_Double_optional& x)
      {
        this->PeakAirFlowHeating_Double_ = x;
      }

      const SimSpaceType::ExhaustAirFlowRate_Double_optional& SimSpaceType::
      ExhaustAirFlowRate_Double () const
      {
        return this->ExhaustAirFlowRate_Double_;
      }

      SimSpaceType::ExhaustAirFlowRate_Double_optional& SimSpaceType::
      ExhaustAirFlowRate_Double ()
      {
        return this->ExhaustAirFlowRate_Double_;
      }

      void SimSpaceType::
      ExhaustAirFlowRate_Double (const ExhaustAirFlowRate_Double_type& x)
      {
        this->ExhaustAirFlowRate_Double_.set (x);
      }

      void SimSpaceType::
      ExhaustAirFlowRate_Double (const ExhaustAirFlowRate_Double_optional& x)
      {
        this->ExhaustAirFlowRate_Double_ = x;
      }

      const SimSpaceType::NaturalAirChangeRate_Double_optional& SimSpaceType::
      NaturalAirChangeRate_Double () const
      {
        return this->NaturalAirChangeRate_Double_;
      }

      SimSpaceType::NaturalAirChangeRate_Double_optional& SimSpaceType::
      NaturalAirChangeRate_Double ()
      {
        return this->NaturalAirChangeRate_Double_;
      }

      void SimSpaceType::
      NaturalAirChangeRate_Double (const NaturalAirChangeRate_Double_type& x)
      {
        this->NaturalAirChangeRate_Double_.set (x);
      }

      void SimSpaceType::
      NaturalAirChangeRate_Double (const NaturalAirChangeRate_Double_optional& x)
      {
        this->NaturalAirChangeRate_Double_ = x;
      }

      const SimSpaceType::MechanicalAirChangeRate_Double_optional& SimSpaceType::
      MechanicalAirChangeRate_Double () const
      {
        return this->MechanicalAirChangeRate_Double_;
      }

      SimSpaceType::MechanicalAirChangeRate_Double_optional& SimSpaceType::
      MechanicalAirChangeRate_Double ()
      {
        return this->MechanicalAirChangeRate_Double_;
      }

      void SimSpaceType::
      MechanicalAirChangeRate_Double (const MechanicalAirChangeRate_Double_type& x)
      {
        this->MechanicalAirChangeRate_Double_.set (x);
      }

      void SimSpaceType::
      MechanicalAirChangeRate_Double (const MechanicalAirChangeRate_Double_optional& x)
      {
        this->MechanicalAirChangeRate_Double_ = x;
      }

      const SimSpaceType::VentilationType_optional& SimSpaceType::
      VentilationType () const
      {
        return this->VentilationType_;
      }

      SimSpaceType::VentilationType_optional& SimSpaceType::
      VentilationType ()
      {
        return this->VentilationType_;
      }

      void SimSpaceType::
      VentilationType (const VentilationType_type& x)
      {
        this->VentilationType_.set (x);
      }

      void SimSpaceType::
      VentilationType (const VentilationType_optional& x)
      {
        this->VentilationType_ = x;
      }

      void SimSpaceType::
      VentilationType (::std::auto_ptr< VentilationType_type > x)
      {
        this->VentilationType_.set (x);
      }

      const SimSpaceType::OutsideAirPerPerson_Double_optional& SimSpaceType::
      OutsideAirPerPerson_Double () const
      {
        return this->OutsideAirPerPerson_Double_;
      }

      SimSpaceType::OutsideAirPerPerson_Double_optional& SimSpaceType::
      OutsideAirPerPerson_Double ()
      {
        return this->OutsideAirPerPerson_Double_;
      }

      void SimSpaceType::
      OutsideAirPerPerson_Double (const OutsideAirPerPerson_Double_type& x)
      {
        this->OutsideAirPerPerson_Double_.set (x);
      }

      void SimSpaceType::
      OutsideAirPerPerson_Double (const OutsideAirPerPerson_Double_optional& x)
      {
        this->OutsideAirPerPerson_Double_ = x;
      }

      const SimSpaceType::ClassRef_SpaceByFunction_optional& SimSpaceType::
      ClassRef_SpaceByFunction () const
      {
        return this->ClassRef_SpaceByFunction_;
      }

      SimSpaceType::ClassRef_SpaceByFunction_optional& SimSpaceType::
      ClassRef_SpaceByFunction ()
      {
        return this->ClassRef_SpaceByFunction_;
      }

      void SimSpaceType::
      ClassRef_SpaceByFunction (const ClassRef_SpaceByFunction_type& x)
      {
        this->ClassRef_SpaceByFunction_.set (x);
      }

      void SimSpaceType::
      ClassRef_SpaceByFunction (const ClassRef_SpaceByFunction_optional& x)
      {
        this->ClassRef_SpaceByFunction_ = x;
      }

      void SimSpaceType::
      ClassRef_SpaceByFunction (::std::auto_ptr< ClassRef_SpaceByFunction_type > x)
      {
        this->ClassRef_SpaceByFunction_.set (x);
      }

      const SimSpaceType::ClassRef_SpaceTypeOwner_optional& SimSpaceType::
      ClassRef_SpaceTypeOwner () const
      {
        return this->ClassRef_SpaceTypeOwner_;
      }

      SimSpaceType::ClassRef_SpaceTypeOwner_optional& SimSpaceType::
      ClassRef_SpaceTypeOwner ()
      {
        return this->ClassRef_SpaceTypeOwner_;
      }

      void SimSpaceType::
      ClassRef_SpaceTypeOwner (const ClassRef_SpaceTypeOwner_type& x)
      {
        this->ClassRef_SpaceTypeOwner_.set (x);
      }

      void SimSpaceType::
      ClassRef_SpaceTypeOwner (const ClassRef_SpaceTypeOwner_optional& x)
      {
        this->ClassRef_SpaceTypeOwner_ = x;
      }

      void SimSpaceType::
      ClassRef_SpaceTypeOwner (::std::auto_ptr< ClassRef_SpaceTypeOwner_type > x)
      {
        this->ClassRef_SpaceTypeOwner_.set (x);
      }

      const SimSpaceType::ClassRef_SpaceCategoryOwner_optional& SimSpaceType::
      ClassRef_SpaceCategoryOwner () const
      {
        return this->ClassRef_SpaceCategoryOwner_;
      }

      SimSpaceType::ClassRef_SpaceCategoryOwner_optional& SimSpaceType::
      ClassRef_SpaceCategoryOwner ()
      {
        return this->ClassRef_SpaceCategoryOwner_;
      }

      void SimSpaceType::
      ClassRef_SpaceCategoryOwner (const ClassRef_SpaceCategoryOwner_type& x)
      {
        this->ClassRef_SpaceCategoryOwner_.set (x);
      }

      void SimSpaceType::
      ClassRef_SpaceCategoryOwner (const ClassRef_SpaceCategoryOwner_optional& x)
      {
        this->ClassRef_SpaceCategoryOwner_ = x;
      }

      void SimSpaceType::
      ClassRef_SpaceCategoryOwner (::std::auto_ptr< ClassRef_SpaceCategoryOwner_type > x)
      {
        this->ClassRef_SpaceCategoryOwner_.set (x);
      }

      const SimSpaceType::ClassRef_SpaceCategoryBOMA_optional& SimSpaceType::
      ClassRef_SpaceCategoryBOMA () const
      {
        return this->ClassRef_SpaceCategoryBOMA_;
      }

      SimSpaceType::ClassRef_SpaceCategoryBOMA_optional& SimSpaceType::
      ClassRef_SpaceCategoryBOMA ()
      {
        return this->ClassRef_SpaceCategoryBOMA_;
      }

      void SimSpaceType::
      ClassRef_SpaceCategoryBOMA (const ClassRef_SpaceCategoryBOMA_type& x)
      {
        this->ClassRef_SpaceCategoryBOMA_.set (x);
      }

      void SimSpaceType::
      ClassRef_SpaceCategoryBOMA (const ClassRef_SpaceCategoryBOMA_optional& x)
      {
        this->ClassRef_SpaceCategoryBOMA_ = x;
      }

      void SimSpaceType::
      ClassRef_SpaceCategoryBOMA (::std::auto_ptr< ClassRef_SpaceCategoryBOMA_type > x)
      {
        this->ClassRef_SpaceCategoryBOMA_.set (x);
      }

      const SimSpaceType::SpaceOccupantsList_optional& SimSpaceType::
      SpaceOccupantsList () const
      {
        return this->SpaceOccupantsList_;
      }

      SimSpaceType::SpaceOccupantsList_optional& SimSpaceType::
      SpaceOccupantsList ()
      {
        return this->SpaceOccupantsList_;
      }

      void SimSpaceType::
      SpaceOccupantsList (const SpaceOccupantsList_type& x)
      {
        this->SpaceOccupantsList_.set (x);
      }

      void SimSpaceType::
      SpaceOccupantsList (const SpaceOccupantsList_optional& x)
      {
        this->SpaceOccupantsList_ = x;
      }

      void SimSpaceType::
      SpaceOccupantsList (::std::auto_ptr< SpaceOccupantsList_type > x)
      {
        this->SpaceOccupantsList_.set (x);
      }

      const SimSpaceType::OccupancyScheduleAssignment_optional& SimSpaceType::
      OccupancyScheduleAssignment () const
      {
        return this->OccupancyScheduleAssignment_;
      }

      SimSpaceType::OccupancyScheduleAssignment_optional& SimSpaceType::
      OccupancyScheduleAssignment ()
      {
        return this->OccupancyScheduleAssignment_;
      }

      void SimSpaceType::
      OccupancyScheduleAssignment (const OccupancyScheduleAssignment_type& x)
      {
        this->OccupancyScheduleAssignment_.set (x);
      }

      void SimSpaceType::
      OccupancyScheduleAssignment (const OccupancyScheduleAssignment_optional& x)
      {
        this->OccupancyScheduleAssignment_ = x;
      }

      void SimSpaceType::
      OccupancyScheduleAssignment (::std::auto_ptr< OccupancyScheduleAssignment_type > x)
      {
        this->OccupancyScheduleAssignment_.set (x);
      }

      const SimSpaceType::LightingScheduleAssignment_optional& SimSpaceType::
      LightingScheduleAssignment () const
      {
        return this->LightingScheduleAssignment_;
      }

      SimSpaceType::LightingScheduleAssignment_optional& SimSpaceType::
      LightingScheduleAssignment ()
      {
        return this->LightingScheduleAssignment_;
      }

      void SimSpaceType::
      LightingScheduleAssignment (const LightingScheduleAssignment_type& x)
      {
        this->LightingScheduleAssignment_.set (x);
      }

      void SimSpaceType::
      LightingScheduleAssignment (const LightingScheduleAssignment_optional& x)
      {
        this->LightingScheduleAssignment_ = x;
      }

      void SimSpaceType::
      LightingScheduleAssignment (::std::auto_ptr< LightingScheduleAssignment_type > x)
      {
        this->LightingScheduleAssignment_.set (x);
      }

      const SimSpaceType::EquipmentScheduleAssignment_optional& SimSpaceType::
      EquipmentScheduleAssignment () const
      {
        return this->EquipmentScheduleAssignment_;
      }

      SimSpaceType::EquipmentScheduleAssignment_optional& SimSpaceType::
      EquipmentScheduleAssignment ()
      {
        return this->EquipmentScheduleAssignment_;
      }

      void SimSpaceType::
      EquipmentScheduleAssignment (const EquipmentScheduleAssignment_type& x)
      {
        this->EquipmentScheduleAssignment_.set (x);
      }

      void SimSpaceType::
      EquipmentScheduleAssignment (const EquipmentScheduleAssignment_optional& x)
      {
        this->EquipmentScheduleAssignment_ = x;
      }

      void SimSpaceType::
      EquipmentScheduleAssignment (::std::auto_ptr< EquipmentScheduleAssignment_type > x)
      {
        this->EquipmentScheduleAssignment_.set (x);
      }

      const SimSpaceType::T24CommRefrigEPD_optional& SimSpaceType::
      T24CommRefrigEPD () const
      {
        return this->T24CommRefrigEPD_;
      }

      SimSpaceType::T24CommRefrigEPD_optional& SimSpaceType::
      T24CommRefrigEPD ()
      {
        return this->T24CommRefrigEPD_;
      }

      void SimSpaceType::
      T24CommRefrigEPD (const T24CommRefrigEPD_type& x)
      {
        this->T24CommRefrigEPD_.set (x);
      }

      void SimSpaceType::
      T24CommRefrigEPD (const T24CommRefrigEPD_optional& x)
      {
        this->T24CommRefrigEPD_ = x;
      }

      const SimSpaceType::T24CommRefrigEqmtSchedRef_optional& SimSpaceType::
      T24CommRefrigEqmtSchedRef () const
      {
        return this->T24CommRefrigEqmtSchedRef_;
      }

      SimSpaceType::T24CommRefrigEqmtSchedRef_optional& SimSpaceType::
      T24CommRefrigEqmtSchedRef ()
      {
        return this->T24CommRefrigEqmtSchedRef_;
      }

      void SimSpaceType::
      T24CommRefrigEqmtSchedRef (const T24CommRefrigEqmtSchedRef_type& x)
      {
        this->T24CommRefrigEqmtSchedRef_.set (x);
      }

      void SimSpaceType::
      T24CommRefrigEqmtSchedRef (const T24CommRefrigEqmtSchedRef_optional& x)
      {
        this->T24CommRefrigEqmtSchedRef_ = x;
      }

      void SimSpaceType::
      T24CommRefrigEqmtSchedRef (::std::auto_ptr< T24CommRefrigEqmtSchedRef_type > x)
      {
        this->T24CommRefrigEqmtSchedRef_.set (x);
      }

      const SimSpaceType::T24CommRefrigLatentFraction_optional& SimSpaceType::
      T24CommRefrigLatentFraction () const
      {
        return this->T24CommRefrigLatentFraction_;
      }

      SimSpaceType::T24CommRefrigLatentFraction_optional& SimSpaceType::
      T24CommRefrigLatentFraction ()
      {
        return this->T24CommRefrigLatentFraction_;
      }

      void SimSpaceType::
      T24CommRefrigLatentFraction (const T24CommRefrigLatentFraction_type& x)
      {
        this->T24CommRefrigLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24CommRefrigLatentFraction (const T24CommRefrigLatentFraction_optional& x)
      {
        this->T24CommRefrigLatentFraction_ = x;
      }

      const SimSpaceType::T24CommRefrigLostFraction_optional& SimSpaceType::
      T24CommRefrigLostFraction () const
      {
        return this->T24CommRefrigLostFraction_;
      }

      SimSpaceType::T24CommRefrigLostFraction_optional& SimSpaceType::
      T24CommRefrigLostFraction ()
      {
        return this->T24CommRefrigLostFraction_;
      }

      void SimSpaceType::
      T24CommRefrigLostFraction (const T24CommRefrigLostFraction_type& x)
      {
        this->T24CommRefrigLostFraction_.set (x);
      }

      void SimSpaceType::
      T24CommRefrigLostFraction (const T24CommRefrigLostFraction_optional& x)
      {
        this->T24CommRefrigLostFraction_ = x;
      }

      const SimSpaceType::T24CommRefrigRedFraction_optional& SimSpaceType::
      T24CommRefrigRedFraction () const
      {
        return this->T24CommRefrigRedFraction_;
      }

      SimSpaceType::T24CommRefrigRedFraction_optional& SimSpaceType::
      T24CommRefrigRedFraction ()
      {
        return this->T24CommRefrigRedFraction_;
      }

      void SimSpaceType::
      T24CommRefrigRedFraction (const T24CommRefrigRedFraction_type& x)
      {
        this->T24CommRefrigRedFraction_.set (x);
      }

      void SimSpaceType::
      T24CommRefrigRedFraction (const T24CommRefrigRedFraction_optional& x)
      {
        this->T24CommRefrigRedFraction_ = x;
      }

      const SimSpaceType::T24DesignInfiltrationRate_optional& SimSpaceType::
      T24DesignInfiltrationRate () const
      {
        return this->T24DesignInfiltrationRate_;
      }

      SimSpaceType::T24DesignInfiltrationRate_optional& SimSpaceType::
      T24DesignInfiltrationRate ()
      {
        return this->T24DesignInfiltrationRate_;
      }

      void SimSpaceType::
      T24DesignInfiltrationRate (const T24DesignInfiltrationRate_type& x)
      {
        this->T24DesignInfiltrationRate_.set (x);
      }

      void SimSpaceType::
      T24DesignInfiltrationRate (const T24DesignInfiltrationRate_optional& x)
      {
        this->T24DesignInfiltrationRate_ = x;
      }

      void SimSpaceType::
      T24DesignInfiltrationRate (::std::auto_ptr< T24DesignInfiltrationRate_type > x)
      {
        this->T24DesignInfiltrationRate_.set (x);
      }

      const SimSpaceType::T24ElevatorCount_optional& SimSpaceType::
      T24ElevatorCount () const
      {
        return this->T24ElevatorCount_;
      }

      SimSpaceType::T24ElevatorCount_optional& SimSpaceType::
      T24ElevatorCount ()
      {
        return this->T24ElevatorCount_;
      }

      void SimSpaceType::
      T24ElevatorCount (const T24ElevatorCount_type& x)
      {
        this->T24ElevatorCount_.set (x);
      }

      void SimSpaceType::
      T24ElevatorCount (const T24ElevatorCount_optional& x)
      {
        this->T24ElevatorCount_ = x;
      }

      const SimSpaceType::T24ElevatorLatentFraction_optional& SimSpaceType::
      T24ElevatorLatentFraction () const
      {
        return this->T24ElevatorLatentFraction_;
      }

      SimSpaceType::T24ElevatorLatentFraction_optional& SimSpaceType::
      T24ElevatorLatentFraction ()
      {
        return this->T24ElevatorLatentFraction_;
      }

      void SimSpaceType::
      T24ElevatorLatentFraction (const T24ElevatorLatentFraction_type& x)
      {
        this->T24ElevatorLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24ElevatorLatentFraction (const T24ElevatorLatentFraction_optional& x)
      {
        this->T24ElevatorLatentFraction_ = x;
      }

      const SimSpaceType::T24ElevatorLostFraction_optional& SimSpaceType::
      T24ElevatorLostFraction () const
      {
        return this->T24ElevatorLostFraction_;
      }

      SimSpaceType::T24ElevatorLostFraction_optional& SimSpaceType::
      T24ElevatorLostFraction ()
      {
        return this->T24ElevatorLostFraction_;
      }

      void SimSpaceType::
      T24ElevatorLostFraction (const T24ElevatorLostFraction_type& x)
      {
        this->T24ElevatorLostFraction_.set (x);
      }

      void SimSpaceType::
      T24ElevatorLostFraction (const T24ElevatorLostFraction_optional& x)
      {
        this->T24ElevatorLostFraction_ = x;
      }

      const SimSpaceType::T24ElevatorPower_optional& SimSpaceType::
      T24ElevatorPower () const
      {
        return this->T24ElevatorPower_;
      }

      SimSpaceType::T24ElevatorPower_optional& SimSpaceType::
      T24ElevatorPower ()
      {
        return this->T24ElevatorPower_;
      }

      void SimSpaceType::
      T24ElevatorPower (const T24ElevatorPower_type& x)
      {
        this->T24ElevatorPower_.set (x);
      }

      void SimSpaceType::
      T24ElevatorPower (const T24ElevatorPower_optional& x)
      {
        this->T24ElevatorPower_ = x;
      }

      const SimSpaceType::T24ElevatorRadiationFraction_optional& SimSpaceType::
      T24ElevatorRadiationFraction () const
      {
        return this->T24ElevatorRadiationFraction_;
      }

      SimSpaceType::T24ElevatorRadiationFraction_optional& SimSpaceType::
      T24ElevatorRadiationFraction ()
      {
        return this->T24ElevatorRadiationFraction_;
      }

      void SimSpaceType::
      T24ElevatorRadiationFraction (const T24ElevatorRadiationFraction_type& x)
      {
        this->T24ElevatorRadiationFraction_.set (x);
      }

      void SimSpaceType::
      T24ElevatorRadiationFraction (const T24ElevatorRadiationFraction_optional& x)
      {
        this->T24ElevatorRadiationFraction_ = x;
      }

      const SimSpaceType::T24ElevatorScheduleReference_optional& SimSpaceType::
      T24ElevatorScheduleReference () const
      {
        return this->T24ElevatorScheduleReference_;
      }

      SimSpaceType::T24ElevatorScheduleReference_optional& SimSpaceType::
      T24ElevatorScheduleReference ()
      {
        return this->T24ElevatorScheduleReference_;
      }

      void SimSpaceType::
      T24ElevatorScheduleReference (const T24ElevatorScheduleReference_type& x)
      {
        this->T24ElevatorScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24ElevatorScheduleReference (const T24ElevatorScheduleReference_optional& x)
      {
        this->T24ElevatorScheduleReference_ = x;
      }

      void SimSpaceType::
      T24ElevatorScheduleReference (::std::auto_ptr< T24ElevatorScheduleReference_type > x)
      {
        this->T24ElevatorScheduleReference_.set (x);
      }

      const SimSpaceType::T24EscalatorCount_optional& SimSpaceType::
      T24EscalatorCount () const
      {
        return this->T24EscalatorCount_;
      }

      SimSpaceType::T24EscalatorCount_optional& SimSpaceType::
      T24EscalatorCount ()
      {
        return this->T24EscalatorCount_;
      }

      void SimSpaceType::
      T24EscalatorCount (const T24EscalatorCount_type& x)
      {
        this->T24EscalatorCount_.set (x);
      }

      void SimSpaceType::
      T24EscalatorCount (const T24EscalatorCount_optional& x)
      {
        this->T24EscalatorCount_ = x;
      }

      const SimSpaceType::T24EscalatorLatentFraction_optional& SimSpaceType::
      T24EscalatorLatentFraction () const
      {
        return this->T24EscalatorLatentFraction_;
      }

      SimSpaceType::T24EscalatorLatentFraction_optional& SimSpaceType::
      T24EscalatorLatentFraction ()
      {
        return this->T24EscalatorLatentFraction_;
      }

      void SimSpaceType::
      T24EscalatorLatentFraction (const T24EscalatorLatentFraction_type& x)
      {
        this->T24EscalatorLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24EscalatorLatentFraction (const T24EscalatorLatentFraction_optional& x)
      {
        this->T24EscalatorLatentFraction_ = x;
      }

      const SimSpaceType::T24EscalatorLostFraction_optional& SimSpaceType::
      T24EscalatorLostFraction () const
      {
        return this->T24EscalatorLostFraction_;
      }

      SimSpaceType::T24EscalatorLostFraction_optional& SimSpaceType::
      T24EscalatorLostFraction ()
      {
        return this->T24EscalatorLostFraction_;
      }

      void SimSpaceType::
      T24EscalatorLostFraction (const T24EscalatorLostFraction_type& x)
      {
        this->T24EscalatorLostFraction_.set (x);
      }

      void SimSpaceType::
      T24EscalatorLostFraction (const T24EscalatorLostFraction_optional& x)
      {
        this->T24EscalatorLostFraction_ = x;
      }

      const SimSpaceType::T24EscalatorPower_optional& SimSpaceType::
      T24EscalatorPower () const
      {
        return this->T24EscalatorPower_;
      }

      SimSpaceType::T24EscalatorPower_optional& SimSpaceType::
      T24EscalatorPower ()
      {
        return this->T24EscalatorPower_;
      }

      void SimSpaceType::
      T24EscalatorPower (const T24EscalatorPower_type& x)
      {
        this->T24EscalatorPower_.set (x);
      }

      void SimSpaceType::
      T24EscalatorPower (const T24EscalatorPower_optional& x)
      {
        this->T24EscalatorPower_ = x;
      }

      const SimSpaceType::T24EscalatorRadiationFraction_optional& SimSpaceType::
      T24EscalatorRadiationFraction () const
      {
        return this->T24EscalatorRadiationFraction_;
      }

      SimSpaceType::T24EscalatorRadiationFraction_optional& SimSpaceType::
      T24EscalatorRadiationFraction ()
      {
        return this->T24EscalatorRadiationFraction_;
      }

      void SimSpaceType::
      T24EscalatorRadiationFraction (const T24EscalatorRadiationFraction_type& x)
      {
        this->T24EscalatorRadiationFraction_.set (x);
      }

      void SimSpaceType::
      T24EscalatorRadiationFraction (const T24EscalatorRadiationFraction_optional& x)
      {
        this->T24EscalatorRadiationFraction_ = x;
      }

      const SimSpaceType::T24EscalatorScheduleReference_optional& SimSpaceType::
      T24EscalatorScheduleReference () const
      {
        return this->T24EscalatorScheduleReference_;
      }

      SimSpaceType::T24EscalatorScheduleReference_optional& SimSpaceType::
      T24EscalatorScheduleReference ()
      {
        return this->T24EscalatorScheduleReference_;
      }

      void SimSpaceType::
      T24EscalatorScheduleReference (const T24EscalatorScheduleReference_type& x)
      {
        this->T24EscalatorScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24EscalatorScheduleReference (const T24EscalatorScheduleReference_optional& x)
      {
        this->T24EscalatorScheduleReference_ = x;
      }

      void SimSpaceType::
      T24EscalatorScheduleReference (::std::auto_ptr< T24EscalatorScheduleReference_type > x)
      {
        this->T24EscalatorScheduleReference_.set (x);
      }

      const SimSpaceType::T24ExhaustAirChangesPerHour_optional& SimSpaceType::
      T24ExhaustAirChangesPerHour () const
      {
        return this->T24ExhaustAirChangesPerHour_;
      }

      SimSpaceType::T24ExhaustAirChangesPerHour_optional& SimSpaceType::
      T24ExhaustAirChangesPerHour ()
      {
        return this->T24ExhaustAirChangesPerHour_;
      }

      void SimSpaceType::
      T24ExhaustAirChangesPerHour (const T24ExhaustAirChangesPerHour_type& x)
      {
        this->T24ExhaustAirChangesPerHour_.set (x);
      }

      void SimSpaceType::
      T24ExhaustAirChangesPerHour (const T24ExhaustAirChangesPerHour_optional& x)
      {
        this->T24ExhaustAirChangesPerHour_ = x;
      }

      const SimSpaceType::T24ExhaustPerArea_optional& SimSpaceType::
      T24ExhaustPerArea () const
      {
        return this->T24ExhaustPerArea_;
      }

      SimSpaceType::T24ExhaustPerArea_optional& SimSpaceType::
      T24ExhaustPerArea ()
      {
        return this->T24ExhaustPerArea_;
      }

      void SimSpaceType::
      T24ExhaustPerArea (const T24ExhaustPerArea_type& x)
      {
        this->T24ExhaustPerArea_.set (x);
      }

      void SimSpaceType::
      T24ExhaustPerArea (const T24ExhaustPerArea_optional& x)
      {
        this->T24ExhaustPerArea_ = x;
      }

      const SimSpaceType::T24ExhaustPerSpace_optional& SimSpaceType::
      T24ExhaustPerSpace () const
      {
        return this->T24ExhaustPerSpace_;
      }

      SimSpaceType::T24ExhaustPerSpace_optional& SimSpaceType::
      T24ExhaustPerSpace ()
      {
        return this->T24ExhaustPerSpace_;
      }

      void SimSpaceType::
      T24ExhaustPerSpace (const T24ExhaustPerSpace_type& x)
      {
        this->T24ExhaustPerSpace_.set (x);
      }

      void SimSpaceType::
      T24ExhaustPerSpace (const T24ExhaustPerSpace_optional& x)
      {
        this->T24ExhaustPerSpace_ = x;
      }

      const SimSpaceType::T24FuncSchedGrp_optional& SimSpaceType::
      T24FuncSchedGrp () const
      {
        return this->T24FuncSchedGrp_;
      }

      SimSpaceType::T24FuncSchedGrp_optional& SimSpaceType::
      T24FuncSchedGrp ()
      {
        return this->T24FuncSchedGrp_;
      }

      void SimSpaceType::
      T24FuncSchedGrp (const T24FuncSchedGrp_type& x)
      {
        this->T24FuncSchedGrp_.set (x);
      }

      void SimSpaceType::
      T24FuncSchedGrp (const T24FuncSchedGrp_optional& x)
      {
        this->T24FuncSchedGrp_ = x;
      }

      void SimSpaceType::
      T24FuncSchedGrp (::std::auto_ptr< T24FuncSchedGrp_type > x)
      {
        this->T24FuncSchedGrp_.set (x);
      }

      const SimSpaceType::T24GasEquipmentLatentFraction_optional& SimSpaceType::
      T24GasEquipmentLatentFraction () const
      {
        return this->T24GasEquipmentLatentFraction_;
      }

      SimSpaceType::T24GasEquipmentLatentFraction_optional& SimSpaceType::
      T24GasEquipmentLatentFraction ()
      {
        return this->T24GasEquipmentLatentFraction_;
      }

      void SimSpaceType::
      T24GasEquipmentLatentFraction (const T24GasEquipmentLatentFraction_type& x)
      {
        this->T24GasEquipmentLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24GasEquipmentLatentFraction (const T24GasEquipmentLatentFraction_optional& x)
      {
        this->T24GasEquipmentLatentFraction_ = x;
      }

      const SimSpaceType::T24GasEquipmentLostFraction_optional& SimSpaceType::
      T24GasEquipmentLostFraction () const
      {
        return this->T24GasEquipmentLostFraction_;
      }

      SimSpaceType::T24GasEquipmentLostFraction_optional& SimSpaceType::
      T24GasEquipmentLostFraction ()
      {
        return this->T24GasEquipmentLostFraction_;
      }

      void SimSpaceType::
      T24GasEquipmentLostFraction (const T24GasEquipmentLostFraction_type& x)
      {
        this->T24GasEquipmentLostFraction_.set (x);
      }

      void SimSpaceType::
      T24GasEquipmentLostFraction (const T24GasEquipmentLostFraction_optional& x)
      {
        this->T24GasEquipmentLostFraction_ = x;
      }

      const SimSpaceType::T24GasEquipmentPowerDensity_optional& SimSpaceType::
      T24GasEquipmentPowerDensity () const
      {
        return this->T24GasEquipmentPowerDensity_;
      }

      SimSpaceType::T24GasEquipmentPowerDensity_optional& SimSpaceType::
      T24GasEquipmentPowerDensity ()
      {
        return this->T24GasEquipmentPowerDensity_;
      }

      void SimSpaceType::
      T24GasEquipmentPowerDensity (const T24GasEquipmentPowerDensity_type& x)
      {
        this->T24GasEquipmentPowerDensity_.set (x);
      }

      void SimSpaceType::
      T24GasEquipmentPowerDensity (const T24GasEquipmentPowerDensity_optional& x)
      {
        this->T24GasEquipmentPowerDensity_ = x;
      }

      const SimSpaceType::T24GasEquipmentRadiationFraction_optional& SimSpaceType::
      T24GasEquipmentRadiationFraction () const
      {
        return this->T24GasEquipmentRadiationFraction_;
      }

      SimSpaceType::T24GasEquipmentRadiationFraction_optional& SimSpaceType::
      T24GasEquipmentRadiationFraction ()
      {
        return this->T24GasEquipmentRadiationFraction_;
      }

      void SimSpaceType::
      T24GasEquipmentRadiationFraction (const T24GasEquipmentRadiationFraction_type& x)
      {
        this->T24GasEquipmentRadiationFraction_.set (x);
      }

      void SimSpaceType::
      T24GasEquipmentRadiationFraction (const T24GasEquipmentRadiationFraction_optional& x)
      {
        this->T24GasEquipmentRadiationFraction_ = x;
      }

      const SimSpaceType::T24GasEquipmentScheduleReference_optional& SimSpaceType::
      T24GasEquipmentScheduleReference () const
      {
        return this->T24GasEquipmentScheduleReference_;
      }

      SimSpaceType::T24GasEquipmentScheduleReference_optional& SimSpaceType::
      T24GasEquipmentScheduleReference ()
      {
        return this->T24GasEquipmentScheduleReference_;
      }

      void SimSpaceType::
      T24GasEquipmentScheduleReference (const T24GasEquipmentScheduleReference_type& x)
      {
        this->T24GasEquipmentScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24GasEquipmentScheduleReference (const T24GasEquipmentScheduleReference_optional& x)
      {
        this->T24GasEquipmentScheduleReference_ = x;
      }

      void SimSpaceType::
      T24GasEquipmentScheduleReference (::std::auto_ptr< T24GasEquipmentScheduleReference_type > x)
      {
        this->T24GasEquipmentScheduleReference_.set (x);
      }

      const SimSpaceType::T24HotWaterHeatingRate_optional& SimSpaceType::
      T24HotWaterHeatingRate () const
      {
        return this->T24HotWaterHeatingRate_;
      }

      SimSpaceType::T24HotWaterHeatingRate_optional& SimSpaceType::
      T24HotWaterHeatingRate ()
      {
        return this->T24HotWaterHeatingRate_;
      }

      void SimSpaceType::
      T24HotWaterHeatingRate (const T24HotWaterHeatingRate_type& x)
      {
        this->T24HotWaterHeatingRate_.set (x);
      }

      void SimSpaceType::
      T24HotWaterHeatingRate (const T24HotWaterHeatingRate_optional& x)
      {
        this->T24HotWaterHeatingRate_ = x;
      }

      const SimSpaceType::T24HotWaterHeatingScheduleReference_optional& SimSpaceType::
      T24HotWaterHeatingScheduleReference () const
      {
        return this->T24HotWaterHeatingScheduleReference_;
      }

      SimSpaceType::T24HotWaterHeatingScheduleReference_optional& SimSpaceType::
      T24HotWaterHeatingScheduleReference ()
      {
        return this->T24HotWaterHeatingScheduleReference_;
      }

      void SimSpaceType::
      T24HotWaterHeatingScheduleReference (const T24HotWaterHeatingScheduleReference_type& x)
      {
        this->T24HotWaterHeatingScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24HotWaterHeatingScheduleReference (const T24HotWaterHeatingScheduleReference_optional& x)
      {
        this->T24HotWaterHeatingScheduleReference_ = x;
      }

      void SimSpaceType::
      T24HotWaterHeatingScheduleReference (::std::auto_ptr< T24HotWaterHeatingScheduleReference_type > x)
      {
        this->T24HotWaterHeatingScheduleReference_.set (x);
      }

      const SimSpaceType::T24HotWaterSupplyTemperature_optional& SimSpaceType::
      T24HotWaterSupplyTemperature () const
      {
        return this->T24HotWaterSupplyTemperature_;
      }

      SimSpaceType::T24HotWaterSupplyTemperature_optional& SimSpaceType::
      T24HotWaterSupplyTemperature ()
      {
        return this->T24HotWaterSupplyTemperature_;
      }

      void SimSpaceType::
      T24HotWaterSupplyTemperature (const T24HotWaterSupplyTemperature_type& x)
      {
        this->T24HotWaterSupplyTemperature_.set (x);
      }

      void SimSpaceType::
      T24HotWaterSupplyTemperature (const T24HotWaterSupplyTemperature_optional& x)
      {
        this->T24HotWaterSupplyTemperature_ = x;
      }

      const SimSpaceType::T24HotWaterTemteratureSchedulrReference_optional& SimSpaceType::
      T24HotWaterTemteratureSchedulrReference () const
      {
        return this->T24HotWaterTemteratureSchedulrReference_;
      }

      SimSpaceType::T24HotWaterTemteratureSchedulrReference_optional& SimSpaceType::
      T24HotWaterTemteratureSchedulrReference ()
      {
        return this->T24HotWaterTemteratureSchedulrReference_;
      }

      void SimSpaceType::
      T24HotWaterTemteratureSchedulrReference (const T24HotWaterTemteratureSchedulrReference_type& x)
      {
        this->T24HotWaterTemteratureSchedulrReference_.set (x);
      }

      void SimSpaceType::
      T24HotWaterTemteratureSchedulrReference (const T24HotWaterTemteratureSchedulrReference_optional& x)
      {
        this->T24HotWaterTemteratureSchedulrReference_ = x;
      }

      void SimSpaceType::
      T24HotWaterTemteratureSchedulrReference (::std::auto_ptr< T24HotWaterTemteratureSchedulrReference_type > x)
      {
        this->T24HotWaterTemteratureSchedulrReference_.set (x);
      }

      const SimSpaceType::T24InfiltrMthd_optional& SimSpaceType::
      T24InfiltrMthd () const
      {
        return this->T24InfiltrMthd_;
      }

      SimSpaceType::T24InfiltrMthd_optional& SimSpaceType::
      T24InfiltrMthd ()
      {
        return this->T24InfiltrMthd_;
      }

      void SimSpaceType::
      T24InfiltrMthd (const T24InfiltrMthd_type& x)
      {
        this->T24InfiltrMthd_.set (x);
      }

      void SimSpaceType::
      T24InfiltrMthd (const T24InfiltrMthd_optional& x)
      {
        this->T24InfiltrMthd_ = x;
      }

      void SimSpaceType::
      T24InfiltrMthd (::std::auto_ptr< T24InfiltrMthd_type > x)
      {
        this->T24InfiltrMthd_.set (x);
      }

      const SimSpaceType::T24InfiltrationModelCoefficientA_optional& SimSpaceType::
      T24InfiltrationModelCoefficientA () const
      {
        return this->T24InfiltrationModelCoefficientA_;
      }

      SimSpaceType::T24InfiltrationModelCoefficientA_optional& SimSpaceType::
      T24InfiltrationModelCoefficientA ()
      {
        return this->T24InfiltrationModelCoefficientA_;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientA (const T24InfiltrationModelCoefficientA_type& x)
      {
        this->T24InfiltrationModelCoefficientA_.set (x);
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientA (const T24InfiltrationModelCoefficientA_optional& x)
      {
        this->T24InfiltrationModelCoefficientA_ = x;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientA (::std::auto_ptr< T24InfiltrationModelCoefficientA_type > x)
      {
        this->T24InfiltrationModelCoefficientA_.set (x);
      }

      const SimSpaceType::T24InfiltrationModelCoefficientB_optional& SimSpaceType::
      T24InfiltrationModelCoefficientB () const
      {
        return this->T24InfiltrationModelCoefficientB_;
      }

      SimSpaceType::T24InfiltrationModelCoefficientB_optional& SimSpaceType::
      T24InfiltrationModelCoefficientB ()
      {
        return this->T24InfiltrationModelCoefficientB_;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientB (const T24InfiltrationModelCoefficientB_type& x)
      {
        this->T24InfiltrationModelCoefficientB_.set (x);
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientB (const T24InfiltrationModelCoefficientB_optional& x)
      {
        this->T24InfiltrationModelCoefficientB_ = x;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientB (::std::auto_ptr< T24InfiltrationModelCoefficientB_type > x)
      {
        this->T24InfiltrationModelCoefficientB_.set (x);
      }

      const SimSpaceType::T24InfiltrationModelCoefficientC_optional& SimSpaceType::
      T24InfiltrationModelCoefficientC () const
      {
        return this->T24InfiltrationModelCoefficientC_;
      }

      SimSpaceType::T24InfiltrationModelCoefficientC_optional& SimSpaceType::
      T24InfiltrationModelCoefficientC ()
      {
        return this->T24InfiltrationModelCoefficientC_;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientC (const T24InfiltrationModelCoefficientC_type& x)
      {
        this->T24InfiltrationModelCoefficientC_.set (x);
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientC (const T24InfiltrationModelCoefficientC_optional& x)
      {
        this->T24InfiltrationModelCoefficientC_ = x;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientC (::std::auto_ptr< T24InfiltrationModelCoefficientC_type > x)
      {
        this->T24InfiltrationModelCoefficientC_.set (x);
      }

      const SimSpaceType::T24InfiltrationModelCoefficientD_optional& SimSpaceType::
      T24InfiltrationModelCoefficientD () const
      {
        return this->T24InfiltrationModelCoefficientD_;
      }

      SimSpaceType::T24InfiltrationModelCoefficientD_optional& SimSpaceType::
      T24InfiltrationModelCoefficientD ()
      {
        return this->T24InfiltrationModelCoefficientD_;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientD (const T24InfiltrationModelCoefficientD_type& x)
      {
        this->T24InfiltrationModelCoefficientD_.set (x);
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientD (const T24InfiltrationModelCoefficientD_optional& x)
      {
        this->T24InfiltrationModelCoefficientD_ = x;
      }

      void SimSpaceType::
      T24InfiltrationModelCoefficientD (::std::auto_ptr< T24InfiltrationModelCoefficientD_type > x)
      {
        this->T24InfiltrationModelCoefficientD_.set (x);
      }

      const SimSpaceType::T24InfiltrationScheduleReference_optional& SimSpaceType::
      T24InfiltrationScheduleReference () const
      {
        return this->T24InfiltrationScheduleReference_;
      }

      SimSpaceType::T24InfiltrationScheduleReference_optional& SimSpaceType::
      T24InfiltrationScheduleReference ()
      {
        return this->T24InfiltrationScheduleReference_;
      }

      void SimSpaceType::
      T24InfiltrationScheduleReference (const T24InfiltrationScheduleReference_type& x)
      {
        this->T24InfiltrationScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24InfiltrationScheduleReference (const T24InfiltrationScheduleReference_optional& x)
      {
        this->T24InfiltrationScheduleReference_ = x;
      }

      void SimSpaceType::
      T24InfiltrationScheduleReference (::std::auto_ptr< T24InfiltrationScheduleReference_type > x)
      {
        this->T24InfiltrationScheduleReference_.set (x);
      }

      const SimSpaceType::T24InteriorLightingNonRegulatedHeatGainRadiantFraction_optional& SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainRadiantFraction () const
      {
        return this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_;
      }

      SimSpaceType::T24InteriorLightingNonRegulatedHeatGainRadiantFraction_optional& SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainRadiantFraction ()
      {
        return this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_;
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainRadiantFraction (const T24InteriorLightingNonRegulatedHeatGainRadiantFraction_type& x)
      {
        this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainRadiantFraction (const T24InteriorLightingNonRegulatedHeatGainRadiantFraction_optional& x)
      {
        this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_ = x;
      }

      const SimSpaceType::T24InteriorLightingNonRegulatedHeatGainSpaceFraction_optional& SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainSpaceFraction () const
      {
        return this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_;
      }

      SimSpaceType::T24InteriorLightingNonRegulatedHeatGainSpaceFraction_optional& SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainSpaceFraction ()
      {
        return this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_;
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainSpaceFraction (const T24InteriorLightingNonRegulatedHeatGainSpaceFraction_type& x)
      {
        this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedHeatGainSpaceFraction (const T24InteriorLightingNonRegulatedHeatGainSpaceFraction_optional& x)
      {
        this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_ = x;
      }

      const SimSpaceType::T24InteriorLightingNonRegulatedScheduleReference_optional& SimSpaceType::
      T24InteriorLightingNonRegulatedScheduleReference () const
      {
        return this->T24InteriorLightingNonRegulatedScheduleReference_;
      }

      SimSpaceType::T24InteriorLightingNonRegulatedScheduleReference_optional& SimSpaceType::
      T24InteriorLightingNonRegulatedScheduleReference ()
      {
        return this->T24InteriorLightingNonRegulatedScheduleReference_;
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedScheduleReference (const T24InteriorLightingNonRegulatedScheduleReference_type& x)
      {
        this->T24InteriorLightingNonRegulatedScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedScheduleReference (const T24InteriorLightingNonRegulatedScheduleReference_optional& x)
      {
        this->T24InteriorLightingNonRegulatedScheduleReference_ = x;
      }

      void SimSpaceType::
      T24InteriorLightingNonRegulatedScheduleReference (::std::auto_ptr< T24InteriorLightingNonRegulatedScheduleReference_type > x)
      {
        this->T24InteriorLightingNonRegulatedScheduleReference_.set (x);
      }

      const SimSpaceType::T24InteriorLightingPowerDensityNonRegulated_optional& SimSpaceType::
      T24InteriorLightingPowerDensityNonRegulated () const
      {
        return this->T24InteriorLightingPowerDensityNonRegulated_;
      }

      SimSpaceType::T24InteriorLightingPowerDensityNonRegulated_optional& SimSpaceType::
      T24InteriorLightingPowerDensityNonRegulated ()
      {
        return this->T24InteriorLightingPowerDensityNonRegulated_;
      }

      void SimSpaceType::
      T24InteriorLightingPowerDensityNonRegulated (const T24InteriorLightingPowerDensityNonRegulated_type& x)
      {
        this->T24InteriorLightingPowerDensityNonRegulated_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingPowerDensityNonRegulated (const T24InteriorLightingPowerDensityNonRegulated_optional& x)
      {
        this->T24InteriorLightingPowerDensityNonRegulated_ = x;
      }

      const SimSpaceType::T24InteriorLightingPowerDensityRegulated_optional& SimSpaceType::
      T24InteriorLightingPowerDensityRegulated () const
      {
        return this->T24InteriorLightingPowerDensityRegulated_;
      }

      SimSpaceType::T24InteriorLightingPowerDensityRegulated_optional& SimSpaceType::
      T24InteriorLightingPowerDensityRegulated ()
      {
        return this->T24InteriorLightingPowerDensityRegulated_;
      }

      void SimSpaceType::
      T24InteriorLightingPowerDensityRegulated (const T24InteriorLightingPowerDensityRegulated_type& x)
      {
        this->T24InteriorLightingPowerDensityRegulated_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingPowerDensityRegulated (const T24InteriorLightingPowerDensityRegulated_optional& x)
      {
        this->T24InteriorLightingPowerDensityRegulated_ = x;
      }

      const SimSpaceType::T24InteriorLightingRegulatedHeatGainRadiantFraction_optional& SimSpaceType::
      T24InteriorLightingRegulatedHeatGainRadiantFraction () const
      {
        return this->T24InteriorLightingRegulatedHeatGainRadiantFraction_;
      }

      SimSpaceType::T24InteriorLightingRegulatedHeatGainRadiantFraction_optional& SimSpaceType::
      T24InteriorLightingRegulatedHeatGainRadiantFraction ()
      {
        return this->T24InteriorLightingRegulatedHeatGainRadiantFraction_;
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedHeatGainRadiantFraction (const T24InteriorLightingRegulatedHeatGainRadiantFraction_type& x)
      {
        this->T24InteriorLightingRegulatedHeatGainRadiantFraction_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedHeatGainRadiantFraction (const T24InteriorLightingRegulatedHeatGainRadiantFraction_optional& x)
      {
        this->T24InteriorLightingRegulatedHeatGainRadiantFraction_ = x;
      }

      const SimSpaceType::T24InteriorLightingRegulatedHeatGainSpaceFraction_optional& SimSpaceType::
      T24InteriorLightingRegulatedHeatGainSpaceFraction () const
      {
        return this->T24InteriorLightingRegulatedHeatGainSpaceFraction_;
      }

      SimSpaceType::T24InteriorLightingRegulatedHeatGainSpaceFraction_optional& SimSpaceType::
      T24InteriorLightingRegulatedHeatGainSpaceFraction ()
      {
        return this->T24InteriorLightingRegulatedHeatGainSpaceFraction_;
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedHeatGainSpaceFraction (const T24InteriorLightingRegulatedHeatGainSpaceFraction_type& x)
      {
        this->T24InteriorLightingRegulatedHeatGainSpaceFraction_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedHeatGainSpaceFraction (const T24InteriorLightingRegulatedHeatGainSpaceFraction_optional& x)
      {
        this->T24InteriorLightingRegulatedHeatGainSpaceFraction_ = x;
      }

      const SimSpaceType::T24InteriorLightingRegulatedScheduleReference_optional& SimSpaceType::
      T24InteriorLightingRegulatedScheduleReference () const
      {
        return this->T24InteriorLightingRegulatedScheduleReference_;
      }

      SimSpaceType::T24InteriorLightingRegulatedScheduleReference_optional& SimSpaceType::
      T24InteriorLightingRegulatedScheduleReference ()
      {
        return this->T24InteriorLightingRegulatedScheduleReference_;
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedScheduleReference (const T24InteriorLightingRegulatedScheduleReference_type& x)
      {
        this->T24InteriorLightingRegulatedScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedScheduleReference (const T24InteriorLightingRegulatedScheduleReference_optional& x)
      {
        this->T24InteriorLightingRegulatedScheduleReference_ = x;
      }

      void SimSpaceType::
      T24InteriorLightingRegulatedScheduleReference (::std::auto_ptr< T24InteriorLightingRegulatedScheduleReference_type > x)
      {
        this->T24InteriorLightingRegulatedScheduleReference_.set (x);
      }

      const SimSpaceType::T24OccupantDensity_optional& SimSpaceType::
      T24OccupantDensity () const
      {
        return this->T24OccupantDensity_;
      }

      SimSpaceType::T24OccupantDensity_optional& SimSpaceType::
      T24OccupantDensity ()
      {
        return this->T24OccupantDensity_;
      }

      void SimSpaceType::
      T24OccupantDensity (const T24OccupantDensity_type& x)
      {
        this->T24OccupantDensity_.set (x);
      }

      void SimSpaceType::
      T24OccupantDensity (const T24OccupantDensity_optional& x)
      {
        this->T24OccupantDensity_ = x;
      }

      const SimSpaceType::T24ProcessElectricalLatentFraction_optional& SimSpaceType::
      T24ProcessElectricalLatentFraction () const
      {
        return this->T24ProcessElectricalLatentFraction_;
      }

      SimSpaceType::T24ProcessElectricalLatentFraction_optional& SimSpaceType::
      T24ProcessElectricalLatentFraction ()
      {
        return this->T24ProcessElectricalLatentFraction_;
      }

      void SimSpaceType::
      T24ProcessElectricalLatentFraction (const T24ProcessElectricalLatentFraction_type& x)
      {
        this->T24ProcessElectricalLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24ProcessElectricalLatentFraction (const T24ProcessElectricalLatentFraction_optional& x)
      {
        this->T24ProcessElectricalLatentFraction_ = x;
      }

      const SimSpaceType::T24ProcessElectricalLostFraction_optional& SimSpaceType::
      T24ProcessElectricalLostFraction () const
      {
        return this->T24ProcessElectricalLostFraction_;
      }

      SimSpaceType::T24ProcessElectricalLostFraction_optional& SimSpaceType::
      T24ProcessElectricalLostFraction ()
      {
        return this->T24ProcessElectricalLostFraction_;
      }

      void SimSpaceType::
      T24ProcessElectricalLostFraction (const T24ProcessElectricalLostFraction_type& x)
      {
        this->T24ProcessElectricalLostFraction_.set (x);
      }

      void SimSpaceType::
      T24ProcessElectricalLostFraction (const T24ProcessElectricalLostFraction_optional& x)
      {
        this->T24ProcessElectricalLostFraction_ = x;
      }

      const SimSpaceType::T24ProcessElectricalPowerDensity_optional& SimSpaceType::
      T24ProcessElectricalPowerDensity () const
      {
        return this->T24ProcessElectricalPowerDensity_;
      }

      SimSpaceType::T24ProcessElectricalPowerDensity_optional& SimSpaceType::
      T24ProcessElectricalPowerDensity ()
      {
        return this->T24ProcessElectricalPowerDensity_;
      }

      void SimSpaceType::
      T24ProcessElectricalPowerDensity (const T24ProcessElectricalPowerDensity_type& x)
      {
        this->T24ProcessElectricalPowerDensity_.set (x);
      }

      void SimSpaceType::
      T24ProcessElectricalPowerDensity (const T24ProcessElectricalPowerDensity_optional& x)
      {
        this->T24ProcessElectricalPowerDensity_ = x;
      }

      const SimSpaceType::T24ProcessElectricalRadiationFraction_optional& SimSpaceType::
      T24ProcessElectricalRadiationFraction () const
      {
        return this->T24ProcessElectricalRadiationFraction_;
      }

      SimSpaceType::T24ProcessElectricalRadiationFraction_optional& SimSpaceType::
      T24ProcessElectricalRadiationFraction ()
      {
        return this->T24ProcessElectricalRadiationFraction_;
      }

      void SimSpaceType::
      T24ProcessElectricalRadiationFraction (const T24ProcessElectricalRadiationFraction_type& x)
      {
        this->T24ProcessElectricalRadiationFraction_.set (x);
      }

      void SimSpaceType::
      T24ProcessElectricalRadiationFraction (const T24ProcessElectricalRadiationFraction_optional& x)
      {
        this->T24ProcessElectricalRadiationFraction_ = x;
      }

      const SimSpaceType::T24ProcessElectricalScheduleReference_optional& SimSpaceType::
      T24ProcessElectricalScheduleReference () const
      {
        return this->T24ProcessElectricalScheduleReference_;
      }

      SimSpaceType::T24ProcessElectricalScheduleReference_optional& SimSpaceType::
      T24ProcessElectricalScheduleReference ()
      {
        return this->T24ProcessElectricalScheduleReference_;
      }

      void SimSpaceType::
      T24ProcessElectricalScheduleReference (const T24ProcessElectricalScheduleReference_type& x)
      {
        this->T24ProcessElectricalScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24ProcessElectricalScheduleReference (const T24ProcessElectricalScheduleReference_optional& x)
      {
        this->T24ProcessElectricalScheduleReference_ = x;
      }

      void SimSpaceType::
      T24ProcessElectricalScheduleReference (::std::auto_ptr< T24ProcessElectricalScheduleReference_type > x)
      {
        this->T24ProcessElectricalScheduleReference_.set (x);
      }

      const SimSpaceType::T24ProcessGasLatentFraction_optional& SimSpaceType::
      T24ProcessGasLatentFraction () const
      {
        return this->T24ProcessGasLatentFraction_;
      }

      SimSpaceType::T24ProcessGasLatentFraction_optional& SimSpaceType::
      T24ProcessGasLatentFraction ()
      {
        return this->T24ProcessGasLatentFraction_;
      }

      void SimSpaceType::
      T24ProcessGasLatentFraction (const T24ProcessGasLatentFraction_type& x)
      {
        this->T24ProcessGasLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24ProcessGasLatentFraction (const T24ProcessGasLatentFraction_optional& x)
      {
        this->T24ProcessGasLatentFraction_ = x;
      }

      const SimSpaceType::T24ProcessGasLostFraction_optional& SimSpaceType::
      T24ProcessGasLostFraction () const
      {
        return this->T24ProcessGasLostFraction_;
      }

      SimSpaceType::T24ProcessGasLostFraction_optional& SimSpaceType::
      T24ProcessGasLostFraction ()
      {
        return this->T24ProcessGasLostFraction_;
      }

      void SimSpaceType::
      T24ProcessGasLostFraction (const T24ProcessGasLostFraction_type& x)
      {
        this->T24ProcessGasLostFraction_.set (x);
      }

      void SimSpaceType::
      T24ProcessGasLostFraction (const T24ProcessGasLostFraction_optional& x)
      {
        this->T24ProcessGasLostFraction_ = x;
      }

      const SimSpaceType::T24ProcessGasPowerDensity_optional& SimSpaceType::
      T24ProcessGasPowerDensity () const
      {
        return this->T24ProcessGasPowerDensity_;
      }

      SimSpaceType::T24ProcessGasPowerDensity_optional& SimSpaceType::
      T24ProcessGasPowerDensity ()
      {
        return this->T24ProcessGasPowerDensity_;
      }

      void SimSpaceType::
      T24ProcessGasPowerDensity (const T24ProcessGasPowerDensity_type& x)
      {
        this->T24ProcessGasPowerDensity_.set (x);
      }

      void SimSpaceType::
      T24ProcessGasPowerDensity (const T24ProcessGasPowerDensity_optional& x)
      {
        this->T24ProcessGasPowerDensity_ = x;
      }

      const SimSpaceType::T24ProcessGasRadiationFraction_optional& SimSpaceType::
      T24ProcessGasRadiationFraction () const
      {
        return this->T24ProcessGasRadiationFraction_;
      }

      SimSpaceType::T24ProcessGasRadiationFraction_optional& SimSpaceType::
      T24ProcessGasRadiationFraction ()
      {
        return this->T24ProcessGasRadiationFraction_;
      }

      void SimSpaceType::
      T24ProcessGasRadiationFraction (const T24ProcessGasRadiationFraction_type& x)
      {
        this->T24ProcessGasRadiationFraction_.set (x);
      }

      void SimSpaceType::
      T24ProcessGasRadiationFraction (const T24ProcessGasRadiationFraction_optional& x)
      {
        this->T24ProcessGasRadiationFraction_ = x;
      }

      const SimSpaceType::T24ProcessGasScheduleReference_optional& SimSpaceType::
      T24ProcessGasScheduleReference () const
      {
        return this->T24ProcessGasScheduleReference_;
      }

      SimSpaceType::T24ProcessGasScheduleReference_optional& SimSpaceType::
      T24ProcessGasScheduleReference ()
      {
        return this->T24ProcessGasScheduleReference_;
      }

      void SimSpaceType::
      T24ProcessGasScheduleReference (const T24ProcessGasScheduleReference_type& x)
      {
        this->T24ProcessGasScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24ProcessGasScheduleReference (const T24ProcessGasScheduleReference_optional& x)
      {
        this->T24ProcessGasScheduleReference_ = x;
      }

      void SimSpaceType::
      T24ProcessGasScheduleReference (::std::auto_ptr< T24ProcessGasScheduleReference_type > x)
      {
        this->T24ProcessGasScheduleReference_.set (x);
      }

      const SimSpaceType::T24ReceptacleLatentFraction_optional& SimSpaceType::
      T24ReceptacleLatentFraction () const
      {
        return this->T24ReceptacleLatentFraction_;
      }

      SimSpaceType::T24ReceptacleLatentFraction_optional& SimSpaceType::
      T24ReceptacleLatentFraction ()
      {
        return this->T24ReceptacleLatentFraction_;
      }

      void SimSpaceType::
      T24ReceptacleLatentFraction (const T24ReceptacleLatentFraction_type& x)
      {
        this->T24ReceptacleLatentFraction_.set (x);
      }

      void SimSpaceType::
      T24ReceptacleLatentFraction (const T24ReceptacleLatentFraction_optional& x)
      {
        this->T24ReceptacleLatentFraction_ = x;
      }

      const SimSpaceType::T24ReceptacleLostFraction_optional& SimSpaceType::
      T24ReceptacleLostFraction () const
      {
        return this->T24ReceptacleLostFraction_;
      }

      SimSpaceType::T24ReceptacleLostFraction_optional& SimSpaceType::
      T24ReceptacleLostFraction ()
      {
        return this->T24ReceptacleLostFraction_;
      }

      void SimSpaceType::
      T24ReceptacleLostFraction (const T24ReceptacleLostFraction_type& x)
      {
        this->T24ReceptacleLostFraction_.set (x);
      }

      void SimSpaceType::
      T24ReceptacleLostFraction (const T24ReceptacleLostFraction_optional& x)
      {
        this->T24ReceptacleLostFraction_ = x;
      }

      const SimSpaceType::T24ReceptaclePowerDensity_optional& SimSpaceType::
      T24ReceptaclePowerDensity () const
      {
        return this->T24ReceptaclePowerDensity_;
      }

      SimSpaceType::T24ReceptaclePowerDensity_optional& SimSpaceType::
      T24ReceptaclePowerDensity ()
      {
        return this->T24ReceptaclePowerDensity_;
      }

      void SimSpaceType::
      T24ReceptaclePowerDensity (const T24ReceptaclePowerDensity_type& x)
      {
        this->T24ReceptaclePowerDensity_.set (x);
      }

      void SimSpaceType::
      T24ReceptaclePowerDensity (const T24ReceptaclePowerDensity_optional& x)
      {
        this->T24ReceptaclePowerDensity_ = x;
      }

      const SimSpaceType::T24ReceptacleRadiationFraction_optional& SimSpaceType::
      T24ReceptacleRadiationFraction () const
      {
        return this->T24ReceptacleRadiationFraction_;
      }

      SimSpaceType::T24ReceptacleRadiationFraction_optional& SimSpaceType::
      T24ReceptacleRadiationFraction ()
      {
        return this->T24ReceptacleRadiationFraction_;
      }

      void SimSpaceType::
      T24ReceptacleRadiationFraction (const T24ReceptacleRadiationFraction_type& x)
      {
        this->T24ReceptacleRadiationFraction_.set (x);
      }

      void SimSpaceType::
      T24ReceptacleRadiationFraction (const T24ReceptacleRadiationFraction_optional& x)
      {
        this->T24ReceptacleRadiationFraction_ = x;
      }

      const SimSpaceType::T24ReceptacleScheduleReference_optional& SimSpaceType::
      T24ReceptacleScheduleReference () const
      {
        return this->T24ReceptacleScheduleReference_;
      }

      SimSpaceType::T24ReceptacleScheduleReference_optional& SimSpaceType::
      T24ReceptacleScheduleReference ()
      {
        return this->T24ReceptacleScheduleReference_;
      }

      void SimSpaceType::
      T24ReceptacleScheduleReference (const T24ReceptacleScheduleReference_type& x)
      {
        this->T24ReceptacleScheduleReference_.set (x);
      }

      void SimSpaceType::
      T24ReceptacleScheduleReference (const T24ReceptacleScheduleReference_optional& x)
      {
        this->T24ReceptacleScheduleReference_ = x;
      }

      void SimSpaceType::
      T24ReceptacleScheduleReference (::std::auto_ptr< T24ReceptacleScheduleReference_type > x)
      {
        this->T24ReceptacleScheduleReference_.set (x);
      }

      const SimSpaceType::T24RecirculationDHWSystemReference_optional& SimSpaceType::
      T24RecirculationDHWSystemReference () const
      {
        return this->T24RecirculationDHWSystemReference_;
      }

      SimSpaceType::T24RecirculationDHWSystemReference_optional& SimSpaceType::
      T24RecirculationDHWSystemReference ()
      {
        return this->T24RecirculationDHWSystemReference_;
      }

      void SimSpaceType::
      T24RecirculationDHWSystemReference (const T24RecirculationDHWSystemReference_type& x)
      {
        this->T24RecirculationDHWSystemReference_.set (x);
      }

      void SimSpaceType::
      T24RecirculationDHWSystemReference (const T24RecirculationDHWSystemReference_optional& x)
      {
        this->T24RecirculationDHWSystemReference_ = x;
      }

      void SimSpaceType::
      T24RecirculationDHWSystemReference (::std::auto_ptr< T24RecirculationDHWSystemReference_type > x)
      {
        this->T24RecirculationDHWSystemReference_.set (x);
      }

      const SimSpaceType::T24SHWFluidSegmentReference_optional& SimSpaceType::
      T24SHWFluidSegmentReference () const
      {
        return this->T24SHWFluidSegmentReference_;
      }

      SimSpaceType::T24SHWFluidSegmentReference_optional& SimSpaceType::
      T24SHWFluidSegmentReference ()
      {
        return this->T24SHWFluidSegmentReference_;
      }

      void SimSpaceType::
      T24SHWFluidSegmentReference (const T24SHWFluidSegmentReference_type& x)
      {
        this->T24SHWFluidSegmentReference_.set (x);
      }

      void SimSpaceType::
      T24SHWFluidSegmentReference (const T24SHWFluidSegmentReference_optional& x)
      {
        this->T24SHWFluidSegmentReference_ = x;
      }

      void SimSpaceType::
      T24SHWFluidSegmentReference (::std::auto_ptr< T24SHWFluidSegmentReference_type > x)
      {
        this->T24SHWFluidSegmentReference_.set (x);
      }

      const SimSpaceType::T24SpaceFunction_optional& SimSpaceType::
      T24SpaceFunction () const
      {
        return this->T24SpaceFunction_;
      }

      SimSpaceType::T24SpaceFunction_optional& SimSpaceType::
      T24SpaceFunction ()
      {
        return this->T24SpaceFunction_;
      }

      void SimSpaceType::
      T24SpaceFunction (const T24SpaceFunction_type& x)
      {
        this->T24SpaceFunction_.set (x);
      }

      void SimSpaceType::
      T24SpaceFunction (const T24SpaceFunction_optional& x)
      {
        this->T24SpaceFunction_ = x;
      }

      void SimSpaceType::
      T24SpaceFunction (::std::auto_ptr< T24SpaceFunction_type > x)
      {
        this->T24SpaceFunction_.set (x);
      }

      const SimSpaceType::T24VentilationAirChangesPerHour_optional& SimSpaceType::
      T24VentilationAirChangesPerHour () const
      {
        return this->T24VentilationAirChangesPerHour_;
      }

      SimSpaceType::T24VentilationAirChangesPerHour_optional& SimSpaceType::
      T24VentilationAirChangesPerHour ()
      {
        return this->T24VentilationAirChangesPerHour_;
      }

      void SimSpaceType::
      T24VentilationAirChangesPerHour (const T24VentilationAirChangesPerHour_type& x)
      {
        this->T24VentilationAirChangesPerHour_.set (x);
      }

      void SimSpaceType::
      T24VentilationAirChangesPerHour (const T24VentilationAirChangesPerHour_optional& x)
      {
        this->T24VentilationAirChangesPerHour_ = x;
      }

      const SimSpaceType::T24VentilationPerArea_optional& SimSpaceType::
      T24VentilationPerArea () const
      {
        return this->T24VentilationPerArea_;
      }

      SimSpaceType::T24VentilationPerArea_optional& SimSpaceType::
      T24VentilationPerArea ()
      {
        return this->T24VentilationPerArea_;
      }

      void SimSpaceType::
      T24VentilationPerArea (const T24VentilationPerArea_type& x)
      {
        this->T24VentilationPerArea_.set (x);
      }

      void SimSpaceType::
      T24VentilationPerArea (const T24VentilationPerArea_optional& x)
      {
        this->T24VentilationPerArea_ = x;
      }

      const SimSpaceType::T24VentilationPerPerson_optional& SimSpaceType::
      T24VentilationPerPerson () const
      {
        return this->T24VentilationPerPerson_;
      }

      SimSpaceType::T24VentilationPerPerson_optional& SimSpaceType::
      T24VentilationPerPerson ()
      {
        return this->T24VentilationPerPerson_;
      }

      void SimSpaceType::
      T24VentilationPerPerson (const T24VentilationPerPerson_type& x)
      {
        this->T24VentilationPerPerson_.set (x);
      }

      void SimSpaceType::
      T24VentilationPerPerson (const T24VentilationPerPerson_optional& x)
      {
        this->T24VentilationPerPerson_ = x;
      }

      const SimSpaceType::T24VentilationPerSpace_optional& SimSpaceType::
      T24VentilationPerSpace () const
      {
        return this->T24VentilationPerSpace_;
      }

      SimSpaceType::T24VentilationPerSpace_optional& SimSpaceType::
      T24VentilationPerSpace ()
      {
        return this->T24VentilationPerSpace_;
      }

      void SimSpaceType::
      T24VentilationPerSpace (const T24VentilationPerSpace_type& x)
      {
        this->T24VentilationPerSpace_.set (x);
      }

      void SimSpaceType::
      T24VentilationPerSpace (const T24VentilationPerSpace_optional& x)
      {
        this->T24VentilationPerSpace_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSpaceType
      //

      SimSpaceType::
      SimSpaceType ()
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (),
        RepresentationMaps_ (this),
        Tag_ (this),
        SpaceThermalSimulationType_ (this),
        SpaceConditioningRequirement_Double_ (this),
        SpaceOccupantDensity_ (this),
        SpaceOccupantHeatRateLatent_ (this),
        SpaceOccupantHeatRateSensible_ (this),
        SpaceOccupantLoad_ (this),
        SpaceEquipmentLoad_ (this),
        SpaceLightingLoad_ (this),
        InsideDryBulbTempHeating_Double_ (this),
        InsideRelHumidityHeating_ (this),
        InsideDryBulbTempCooling_Double_ (this),
        InsideRelHumidityCooling_ (this),
        IncludesReturnAirPlenum_ (this),
        PeakAirFlowCooling_Double_ (this),
        PeakAirFlowHeating_Double_ (this),
        ExhaustAirFlowRate_Double_ (this),
        NaturalAirChangeRate_Double_ (this),
        MechanicalAirChangeRate_Double_ (this),
        VentilationType_ (this),
        OutsideAirPerPerson_Double_ (this),
        ClassRef_SpaceByFunction_ (this),
        ClassRef_SpaceTypeOwner_ (this),
        ClassRef_SpaceCategoryOwner_ (this),
        ClassRef_SpaceCategoryBOMA_ (this),
        SpaceOccupantsList_ (this),
        OccupancyScheduleAssignment_ (this),
        LightingScheduleAssignment_ (this),
        EquipmentScheduleAssignment_ (this),
        T24CommRefrigEPD_ (this),
        T24CommRefrigEqmtSchedRef_ (this),
        T24CommRefrigLatentFraction_ (this),
        T24CommRefrigLostFraction_ (this),
        T24CommRefrigRedFraction_ (this),
        T24DesignInfiltrationRate_ (this),
        T24ElevatorCount_ (this),
        T24ElevatorLatentFraction_ (this),
        T24ElevatorLostFraction_ (this),
        T24ElevatorPower_ (this),
        T24ElevatorRadiationFraction_ (this),
        T24ElevatorScheduleReference_ (this),
        T24EscalatorCount_ (this),
        T24EscalatorLatentFraction_ (this),
        T24EscalatorLostFraction_ (this),
        T24EscalatorPower_ (this),
        T24EscalatorRadiationFraction_ (this),
        T24EscalatorScheduleReference_ (this),
        T24ExhaustAirChangesPerHour_ (this),
        T24ExhaustPerArea_ (this),
        T24ExhaustPerSpace_ (this),
        T24FuncSchedGrp_ (this),
        T24GasEquipmentLatentFraction_ (this),
        T24GasEquipmentLostFraction_ (this),
        T24GasEquipmentPowerDensity_ (this),
        T24GasEquipmentRadiationFraction_ (this),
        T24GasEquipmentScheduleReference_ (this),
        T24HotWaterHeatingRate_ (this),
        T24HotWaterHeatingScheduleReference_ (this),
        T24HotWaterSupplyTemperature_ (this),
        T24HotWaterTemteratureSchedulrReference_ (this),
        T24InfiltrMthd_ (this),
        T24InfiltrationModelCoefficientA_ (this),
        T24InfiltrationModelCoefficientB_ (this),
        T24InfiltrationModelCoefficientC_ (this),
        T24InfiltrationModelCoefficientD_ (this),
        T24InfiltrationScheduleReference_ (this),
        T24InteriorLightingNonRegulatedHeatGainRadiantFraction_ (this),
        T24InteriorLightingNonRegulatedHeatGainSpaceFraction_ (this),
        T24InteriorLightingNonRegulatedScheduleReference_ (this),
        T24InteriorLightingPowerDensityNonRegulated_ (this),
        T24InteriorLightingPowerDensityRegulated_ (this),
        T24InteriorLightingRegulatedHeatGainRadiantFraction_ (this),
        T24InteriorLightingRegulatedHeatGainSpaceFraction_ (this),
        T24InteriorLightingRegulatedScheduleReference_ (this),
        T24OccupantDensity_ (this),
        T24ProcessElectricalLatentFraction_ (this),
        T24ProcessElectricalLostFraction_ (this),
        T24ProcessElectricalPowerDensity_ (this),
        T24ProcessElectricalRadiationFraction_ (this),
        T24ProcessElectricalScheduleReference_ (this),
        T24ProcessGasLatentFraction_ (this),
        T24ProcessGasLostFraction_ (this),
        T24ProcessGasPowerDensity_ (this),
        T24ProcessGasRadiationFraction_ (this),
        T24ProcessGasScheduleReference_ (this),
        T24ReceptacleLatentFraction_ (this),
        T24ReceptacleLostFraction_ (this),
        T24ReceptaclePowerDensity_ (this),
        T24ReceptacleRadiationFraction_ (this),
        T24ReceptacleScheduleReference_ (this),
        T24RecirculationDHWSystemReference_ (this),
        T24SHWFluidSegmentReference_ (this),
        T24SpaceFunction_ (this),
        T24VentilationAirChangesPerHour_ (this),
        T24VentilationPerArea_ (this),
        T24VentilationPerPerson_ (this),
        T24VentilationPerSpace_ (this)
      {
      }

      SimSpaceType::
      SimSpaceType (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (RefId),
        RepresentationMaps_ (this),
        Tag_ (this),
        SpaceThermalSimulationType_ (this),
        SpaceConditioningRequirement_Double_ (this),
        SpaceOccupantDensity_ (this),
        SpaceOccupantHeatRateLatent_ (this),
        SpaceOccupantHeatRateSensible_ (this),
        SpaceOccupantLoad_ (this),
        SpaceEquipmentLoad_ (this),
        SpaceLightingLoad_ (this),
        InsideDryBulbTempHeating_Double_ (this),
        InsideRelHumidityHeating_ (this),
        InsideDryBulbTempCooling_Double_ (this),
        InsideRelHumidityCooling_ (this),
        IncludesReturnAirPlenum_ (this),
        PeakAirFlowCooling_Double_ (this),
        PeakAirFlowHeating_Double_ (this),
        ExhaustAirFlowRate_Double_ (this),
        NaturalAirChangeRate_Double_ (this),
        MechanicalAirChangeRate_Double_ (this),
        VentilationType_ (this),
        OutsideAirPerPerson_Double_ (this),
        ClassRef_SpaceByFunction_ (this),
        ClassRef_SpaceTypeOwner_ (this),
        ClassRef_SpaceCategoryOwner_ (this),
        ClassRef_SpaceCategoryBOMA_ (this),
        SpaceOccupantsList_ (this),
        OccupancyScheduleAssignment_ (this),
        LightingScheduleAssignment_ (this),
        EquipmentScheduleAssignment_ (this),
        T24CommRefrigEPD_ (this),
        T24CommRefrigEqmtSchedRef_ (this),
        T24CommRefrigLatentFraction_ (this),
        T24CommRefrigLostFraction_ (this),
        T24CommRefrigRedFraction_ (this),
        T24DesignInfiltrationRate_ (this),
        T24ElevatorCount_ (this),
        T24ElevatorLatentFraction_ (this),
        T24ElevatorLostFraction_ (this),
        T24ElevatorPower_ (this),
        T24ElevatorRadiationFraction_ (this),
        T24ElevatorScheduleReference_ (this),
        T24EscalatorCount_ (this),
        T24EscalatorLatentFraction_ (this),
        T24EscalatorLostFraction_ (this),
        T24EscalatorPower_ (this),
        T24EscalatorRadiationFraction_ (this),
        T24EscalatorScheduleReference_ (this),
        T24ExhaustAirChangesPerHour_ (this),
        T24ExhaustPerArea_ (this),
        T24ExhaustPerSpace_ (this),
        T24FuncSchedGrp_ (this),
        T24GasEquipmentLatentFraction_ (this),
        T24GasEquipmentLostFraction_ (this),
        T24GasEquipmentPowerDensity_ (this),
        T24GasEquipmentRadiationFraction_ (this),
        T24GasEquipmentScheduleReference_ (this),
        T24HotWaterHeatingRate_ (this),
        T24HotWaterHeatingScheduleReference_ (this),
        T24HotWaterSupplyTemperature_ (this),
        T24HotWaterTemteratureSchedulrReference_ (this),
        T24InfiltrMthd_ (this),
        T24InfiltrationModelCoefficientA_ (this),
        T24InfiltrationModelCoefficientB_ (this),
        T24InfiltrationModelCoefficientC_ (this),
        T24InfiltrationModelCoefficientD_ (this),
        T24InfiltrationScheduleReference_ (this),
        T24InteriorLightingNonRegulatedHeatGainRadiantFraction_ (this),
        T24InteriorLightingNonRegulatedHeatGainSpaceFraction_ (this),
        T24InteriorLightingNonRegulatedScheduleReference_ (this),
        T24InteriorLightingPowerDensityNonRegulated_ (this),
        T24InteriorLightingPowerDensityRegulated_ (this),
        T24InteriorLightingRegulatedHeatGainRadiantFraction_ (this),
        T24InteriorLightingRegulatedHeatGainSpaceFraction_ (this),
        T24InteriorLightingRegulatedScheduleReference_ (this),
        T24OccupantDensity_ (this),
        T24ProcessElectricalLatentFraction_ (this),
        T24ProcessElectricalLostFraction_ (this),
        T24ProcessElectricalPowerDensity_ (this),
        T24ProcessElectricalRadiationFraction_ (this),
        T24ProcessElectricalScheduleReference_ (this),
        T24ProcessGasLatentFraction_ (this),
        T24ProcessGasLostFraction_ (this),
        T24ProcessGasPowerDensity_ (this),
        T24ProcessGasRadiationFraction_ (this),
        T24ProcessGasScheduleReference_ (this),
        T24ReceptacleLatentFraction_ (this),
        T24ReceptacleLostFraction_ (this),
        T24ReceptaclePowerDensity_ (this),
        T24ReceptacleRadiationFraction_ (this),
        T24ReceptacleScheduleReference_ (this),
        T24RecirculationDHWSystemReference_ (this),
        T24SHWFluidSegmentReference_ (this),
        T24SpaceFunction_ (this),
        T24VentilationAirChangesPerHour_ (this),
        T24VentilationPerArea_ (this),
        T24VentilationPerPerson_ (this),
        T24VentilationPerSpace_ (this)
      {
      }

      SimSpaceType::
      SimSpaceType (const SimSpaceType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (x, f, c),
        RepresentationMaps_ (x.RepresentationMaps_, f, this),
        Tag_ (x.Tag_, f, this),
        SpaceThermalSimulationType_ (x.SpaceThermalSimulationType_, f, this),
        SpaceConditioningRequirement_Double_ (x.SpaceConditioningRequirement_Double_, f, this),
        SpaceOccupantDensity_ (x.SpaceOccupantDensity_, f, this),
        SpaceOccupantHeatRateLatent_ (x.SpaceOccupantHeatRateLatent_, f, this),
        SpaceOccupantHeatRateSensible_ (x.SpaceOccupantHeatRateSensible_, f, this),
        SpaceOccupantLoad_ (x.SpaceOccupantLoad_, f, this),
        SpaceEquipmentLoad_ (x.SpaceEquipmentLoad_, f, this),
        SpaceLightingLoad_ (x.SpaceLightingLoad_, f, this),
        InsideDryBulbTempHeating_Double_ (x.InsideDryBulbTempHeating_Double_, f, this),
        InsideRelHumidityHeating_ (x.InsideRelHumidityHeating_, f, this),
        InsideDryBulbTempCooling_Double_ (x.InsideDryBulbTempCooling_Double_, f, this),
        InsideRelHumidityCooling_ (x.InsideRelHumidityCooling_, f, this),
        IncludesReturnAirPlenum_ (x.IncludesReturnAirPlenum_, f, this),
        PeakAirFlowCooling_Double_ (x.PeakAirFlowCooling_Double_, f, this),
        PeakAirFlowHeating_Double_ (x.PeakAirFlowHeating_Double_, f, this),
        ExhaustAirFlowRate_Double_ (x.ExhaustAirFlowRate_Double_, f, this),
        NaturalAirChangeRate_Double_ (x.NaturalAirChangeRate_Double_, f, this),
        MechanicalAirChangeRate_Double_ (x.MechanicalAirChangeRate_Double_, f, this),
        VentilationType_ (x.VentilationType_, f, this),
        OutsideAirPerPerson_Double_ (x.OutsideAirPerPerson_Double_, f, this),
        ClassRef_SpaceByFunction_ (x.ClassRef_SpaceByFunction_, f, this),
        ClassRef_SpaceTypeOwner_ (x.ClassRef_SpaceTypeOwner_, f, this),
        ClassRef_SpaceCategoryOwner_ (x.ClassRef_SpaceCategoryOwner_, f, this),
        ClassRef_SpaceCategoryBOMA_ (x.ClassRef_SpaceCategoryBOMA_, f, this),
        SpaceOccupantsList_ (x.SpaceOccupantsList_, f, this),
        OccupancyScheduleAssignment_ (x.OccupancyScheduleAssignment_, f, this),
        LightingScheduleAssignment_ (x.LightingScheduleAssignment_, f, this),
        EquipmentScheduleAssignment_ (x.EquipmentScheduleAssignment_, f, this),
        T24CommRefrigEPD_ (x.T24CommRefrigEPD_, f, this),
        T24CommRefrigEqmtSchedRef_ (x.T24CommRefrigEqmtSchedRef_, f, this),
        T24CommRefrigLatentFraction_ (x.T24CommRefrigLatentFraction_, f, this),
        T24CommRefrigLostFraction_ (x.T24CommRefrigLostFraction_, f, this),
        T24CommRefrigRedFraction_ (x.T24CommRefrigRedFraction_, f, this),
        T24DesignInfiltrationRate_ (x.T24DesignInfiltrationRate_, f, this),
        T24ElevatorCount_ (x.T24ElevatorCount_, f, this),
        T24ElevatorLatentFraction_ (x.T24ElevatorLatentFraction_, f, this),
        T24ElevatorLostFraction_ (x.T24ElevatorLostFraction_, f, this),
        T24ElevatorPower_ (x.T24ElevatorPower_, f, this),
        T24ElevatorRadiationFraction_ (x.T24ElevatorRadiationFraction_, f, this),
        T24ElevatorScheduleReference_ (x.T24ElevatorScheduleReference_, f, this),
        T24EscalatorCount_ (x.T24EscalatorCount_, f, this),
        T24EscalatorLatentFraction_ (x.T24EscalatorLatentFraction_, f, this),
        T24EscalatorLostFraction_ (x.T24EscalatorLostFraction_, f, this),
        T24EscalatorPower_ (x.T24EscalatorPower_, f, this),
        T24EscalatorRadiationFraction_ (x.T24EscalatorRadiationFraction_, f, this),
        T24EscalatorScheduleReference_ (x.T24EscalatorScheduleReference_, f, this),
        T24ExhaustAirChangesPerHour_ (x.T24ExhaustAirChangesPerHour_, f, this),
        T24ExhaustPerArea_ (x.T24ExhaustPerArea_, f, this),
        T24ExhaustPerSpace_ (x.T24ExhaustPerSpace_, f, this),
        T24FuncSchedGrp_ (x.T24FuncSchedGrp_, f, this),
        T24GasEquipmentLatentFraction_ (x.T24GasEquipmentLatentFraction_, f, this),
        T24GasEquipmentLostFraction_ (x.T24GasEquipmentLostFraction_, f, this),
        T24GasEquipmentPowerDensity_ (x.T24GasEquipmentPowerDensity_, f, this),
        T24GasEquipmentRadiationFraction_ (x.T24GasEquipmentRadiationFraction_, f, this),
        T24GasEquipmentScheduleReference_ (x.T24GasEquipmentScheduleReference_, f, this),
        T24HotWaterHeatingRate_ (x.T24HotWaterHeatingRate_, f, this),
        T24HotWaterHeatingScheduleReference_ (x.T24HotWaterHeatingScheduleReference_, f, this),
        T24HotWaterSupplyTemperature_ (x.T24HotWaterSupplyTemperature_, f, this),
        T24HotWaterTemteratureSchedulrReference_ (x.T24HotWaterTemteratureSchedulrReference_, f, this),
        T24InfiltrMthd_ (x.T24InfiltrMthd_, f, this),
        T24InfiltrationModelCoefficientA_ (x.T24InfiltrationModelCoefficientA_, f, this),
        T24InfiltrationModelCoefficientB_ (x.T24InfiltrationModelCoefficientB_, f, this),
        T24InfiltrationModelCoefficientC_ (x.T24InfiltrationModelCoefficientC_, f, this),
        T24InfiltrationModelCoefficientD_ (x.T24InfiltrationModelCoefficientD_, f, this),
        T24InfiltrationScheduleReference_ (x.T24InfiltrationScheduleReference_, f, this),
        T24InteriorLightingNonRegulatedHeatGainRadiantFraction_ (x.T24InteriorLightingNonRegulatedHeatGainRadiantFraction_, f, this),
        T24InteriorLightingNonRegulatedHeatGainSpaceFraction_ (x.T24InteriorLightingNonRegulatedHeatGainSpaceFraction_, f, this),
        T24InteriorLightingNonRegulatedScheduleReference_ (x.T24InteriorLightingNonRegulatedScheduleReference_, f, this),
        T24InteriorLightingPowerDensityNonRegulated_ (x.T24InteriorLightingPowerDensityNonRegulated_, f, this),
        T24InteriorLightingPowerDensityRegulated_ (x.T24InteriorLightingPowerDensityRegulated_, f, this),
        T24InteriorLightingRegulatedHeatGainRadiantFraction_ (x.T24InteriorLightingRegulatedHeatGainRadiantFraction_, f, this),
        T24InteriorLightingRegulatedHeatGainSpaceFraction_ (x.T24InteriorLightingRegulatedHeatGainSpaceFraction_, f, this),
        T24InteriorLightingRegulatedScheduleReference_ (x.T24InteriorLightingRegulatedScheduleReference_, f, this),
        T24OccupantDensity_ (x.T24OccupantDensity_, f, this),
        T24ProcessElectricalLatentFraction_ (x.T24ProcessElectricalLatentFraction_, f, this),
        T24ProcessElectricalLostFraction_ (x.T24ProcessElectricalLostFraction_, f, this),
        T24ProcessElectricalPowerDensity_ (x.T24ProcessElectricalPowerDensity_, f, this),
        T24ProcessElectricalRadiationFraction_ (x.T24ProcessElectricalRadiationFraction_, f, this),
        T24ProcessElectricalScheduleReference_ (x.T24ProcessElectricalScheduleReference_, f, this),
        T24ProcessGasLatentFraction_ (x.T24ProcessGasLatentFraction_, f, this),
        T24ProcessGasLostFraction_ (x.T24ProcessGasLostFraction_, f, this),
        T24ProcessGasPowerDensity_ (x.T24ProcessGasPowerDensity_, f, this),
        T24ProcessGasRadiationFraction_ (x.T24ProcessGasRadiationFraction_, f, this),
        T24ProcessGasScheduleReference_ (x.T24ProcessGasScheduleReference_, f, this),
        T24ReceptacleLatentFraction_ (x.T24ReceptacleLatentFraction_, f, this),
        T24ReceptacleLostFraction_ (x.T24ReceptacleLostFraction_, f, this),
        T24ReceptaclePowerDensity_ (x.T24ReceptaclePowerDensity_, f, this),
        T24ReceptacleRadiationFraction_ (x.T24ReceptacleRadiationFraction_, f, this),
        T24ReceptacleScheduleReference_ (x.T24ReceptacleScheduleReference_, f, this),
        T24RecirculationDHWSystemReference_ (x.T24RecirculationDHWSystemReference_, f, this),
        T24SHWFluidSegmentReference_ (x.T24SHWFluidSegmentReference_, f, this),
        T24SpaceFunction_ (x.T24SpaceFunction_, f, this),
        T24VentilationAirChangesPerHour_ (x.T24VentilationAirChangesPerHour_, f, this),
        T24VentilationPerArea_ (x.T24VentilationPerArea_, f, this),
        T24VentilationPerPerson_ (x.T24VentilationPerPerson_, f, this),
        T24VentilationPerSpace_ (x.T24VentilationPerSpace_, f, this)
      {
      }

      SimSpaceType::
      SimSpaceType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (e, f | ::xml_schema::flags::base, c),
        RepresentationMaps_ (this),
        Tag_ (this),
        SpaceThermalSimulationType_ (this),
        SpaceConditioningRequirement_Double_ (this),
        SpaceOccupantDensity_ (this),
        SpaceOccupantHeatRateLatent_ (this),
        SpaceOccupantHeatRateSensible_ (this),
        SpaceOccupantLoad_ (this),
        SpaceEquipmentLoad_ (this),
        SpaceLightingLoad_ (this),
        InsideDryBulbTempHeating_Double_ (this),
        InsideRelHumidityHeating_ (this),
        InsideDryBulbTempCooling_Double_ (this),
        InsideRelHumidityCooling_ (this),
        IncludesReturnAirPlenum_ (this),
        PeakAirFlowCooling_Double_ (this),
        PeakAirFlowHeating_Double_ (this),
        ExhaustAirFlowRate_Double_ (this),
        NaturalAirChangeRate_Double_ (this),
        MechanicalAirChangeRate_Double_ (this),
        VentilationType_ (this),
        OutsideAirPerPerson_Double_ (this),
        ClassRef_SpaceByFunction_ (this),
        ClassRef_SpaceTypeOwner_ (this),
        ClassRef_SpaceCategoryOwner_ (this),
        ClassRef_SpaceCategoryBOMA_ (this),
        SpaceOccupantsList_ (this),
        OccupancyScheduleAssignment_ (this),
        LightingScheduleAssignment_ (this),
        EquipmentScheduleAssignment_ (this),
        T24CommRefrigEPD_ (this),
        T24CommRefrigEqmtSchedRef_ (this),
        T24CommRefrigLatentFraction_ (this),
        T24CommRefrigLostFraction_ (this),
        T24CommRefrigRedFraction_ (this),
        T24DesignInfiltrationRate_ (this),
        T24ElevatorCount_ (this),
        T24ElevatorLatentFraction_ (this),
        T24ElevatorLostFraction_ (this),
        T24ElevatorPower_ (this),
        T24ElevatorRadiationFraction_ (this),
        T24ElevatorScheduleReference_ (this),
        T24EscalatorCount_ (this),
        T24EscalatorLatentFraction_ (this),
        T24EscalatorLostFraction_ (this),
        T24EscalatorPower_ (this),
        T24EscalatorRadiationFraction_ (this),
        T24EscalatorScheduleReference_ (this),
        T24ExhaustAirChangesPerHour_ (this),
        T24ExhaustPerArea_ (this),
        T24ExhaustPerSpace_ (this),
        T24FuncSchedGrp_ (this),
        T24GasEquipmentLatentFraction_ (this),
        T24GasEquipmentLostFraction_ (this),
        T24GasEquipmentPowerDensity_ (this),
        T24GasEquipmentRadiationFraction_ (this),
        T24GasEquipmentScheduleReference_ (this),
        T24HotWaterHeatingRate_ (this),
        T24HotWaterHeatingScheduleReference_ (this),
        T24HotWaterSupplyTemperature_ (this),
        T24HotWaterTemteratureSchedulrReference_ (this),
        T24InfiltrMthd_ (this),
        T24InfiltrationModelCoefficientA_ (this),
        T24InfiltrationModelCoefficientB_ (this),
        T24InfiltrationModelCoefficientC_ (this),
        T24InfiltrationModelCoefficientD_ (this),
        T24InfiltrationScheduleReference_ (this),
        T24InteriorLightingNonRegulatedHeatGainRadiantFraction_ (this),
        T24InteriorLightingNonRegulatedHeatGainSpaceFraction_ (this),
        T24InteriorLightingNonRegulatedScheduleReference_ (this),
        T24InteriorLightingPowerDensityNonRegulated_ (this),
        T24InteriorLightingPowerDensityRegulated_ (this),
        T24InteriorLightingRegulatedHeatGainRadiantFraction_ (this),
        T24InteriorLightingRegulatedHeatGainSpaceFraction_ (this),
        T24InteriorLightingRegulatedScheduleReference_ (this),
        T24OccupantDensity_ (this),
        T24ProcessElectricalLatentFraction_ (this),
        T24ProcessElectricalLostFraction_ (this),
        T24ProcessElectricalPowerDensity_ (this),
        T24ProcessElectricalRadiationFraction_ (this),
        T24ProcessElectricalScheduleReference_ (this),
        T24ProcessGasLatentFraction_ (this),
        T24ProcessGasLostFraction_ (this),
        T24ProcessGasPowerDensity_ (this),
        T24ProcessGasRadiationFraction_ (this),
        T24ProcessGasScheduleReference_ (this),
        T24ReceptacleLatentFraction_ (this),
        T24ReceptacleLostFraction_ (this),
        T24ReceptaclePowerDensity_ (this),
        T24ReceptacleRadiationFraction_ (this),
        T24ReceptacleScheduleReference_ (this),
        T24RecirculationDHWSystemReference_ (this),
        T24SHWFluidSegmentReference_ (this),
        T24SpaceFunction_ (this),
        T24VentilationAirChangesPerHour_ (this),
        T24VentilationPerArea_ (this),
        T24VentilationPerPerson_ (this),
        T24VentilationPerSpace_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSpaceType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimObjectTypeDefinition::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RepresentationMaps
          //
          if (n.name () == "RepresentationMaps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< RepresentationMaps_type > r (
              RepresentationMaps_traits::create (i, f, this));

            if (!this->RepresentationMaps_)
            {
              this->RepresentationMaps_.set (r);
              continue;
            }
          }

          // Tag
          //
          if (n.name () == "Tag" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Tag_type > r (
              Tag_traits::create (i, f, this));

            if (!this->Tag_)
            {
              this->Tag_.set (r);
              continue;
            }
          }

          // SpaceThermalSimulationType
          //
          if (n.name () == "SpaceThermalSimulationType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SpaceThermalSimulationType_type > r (
              SpaceThermalSimulationType_traits::create (i, f, this));

            if (!this->SpaceThermalSimulationType_)
            {
              this->SpaceThermalSimulationType_.set (r);
              continue;
            }
          }

          // SpaceConditioningRequirement_Double
          //
          if (n.name () == "SpaceConditioningRequirement_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceConditioningRequirement_Double_)
            {
              this->SpaceConditioningRequirement_Double_.set (SpaceConditioningRequirement_Double_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantDensity
          //
          if (n.name () == "SpaceOccupantDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceOccupantDensity_)
            {
              this->SpaceOccupantDensity_.set (SpaceOccupantDensity_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantHeatRateLatent
          //
          if (n.name () == "SpaceOccupantHeatRateLatent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceOccupantHeatRateLatent_)
            {
              this->SpaceOccupantHeatRateLatent_.set (SpaceOccupantHeatRateLatent_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantHeatRateSensible
          //
          if (n.name () == "SpaceOccupantHeatRateSensible" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceOccupantHeatRateSensible_)
            {
              this->SpaceOccupantHeatRateSensible_.set (SpaceOccupantHeatRateSensible_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantLoad
          //
          if (n.name () == "SpaceOccupantLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceOccupantLoad_)
            {
              this->SpaceOccupantLoad_.set (SpaceOccupantLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceEquipmentLoad
          //
          if (n.name () == "SpaceEquipmentLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceEquipmentLoad_)
            {
              this->SpaceEquipmentLoad_.set (SpaceEquipmentLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceLightingLoad
          //
          if (n.name () == "SpaceLightingLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SpaceLightingLoad_)
            {
              this->SpaceLightingLoad_.set (SpaceLightingLoad_traits::create (i, f, this));
              continue;
            }
          }

          // InsideDryBulbTempHeating_Double
          //
          if (n.name () == "InsideDryBulbTempHeating_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InsideDryBulbTempHeating_Double_)
            {
              this->InsideDryBulbTempHeating_Double_.set (InsideDryBulbTempHeating_Double_traits::create (i, f, this));
              continue;
            }
          }

          // InsideRelHumidityHeating
          //
          if (n.name () == "InsideRelHumidityHeating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InsideRelHumidityHeating_)
            {
              this->InsideRelHumidityHeating_.set (InsideRelHumidityHeating_traits::create (i, f, this));
              continue;
            }
          }

          // InsideDryBulbTempCooling_Double
          //
          if (n.name () == "InsideDryBulbTempCooling_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InsideDryBulbTempCooling_Double_)
            {
              this->InsideDryBulbTempCooling_Double_.set (InsideDryBulbTempCooling_Double_traits::create (i, f, this));
              continue;
            }
          }

          // InsideRelHumidityCooling
          //
          if (n.name () == "InsideRelHumidityCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InsideRelHumidityCooling_)
            {
              this->InsideRelHumidityCooling_.set (InsideRelHumidityCooling_traits::create (i, f, this));
              continue;
            }
          }

          // IncludesReturnAirPlenum
          //
          if (n.name () == "IncludesReturnAirPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->IncludesReturnAirPlenum_)
            {
              this->IncludesReturnAirPlenum_.set (IncludesReturnAirPlenum_traits::create (i, f, this));
              continue;
            }
          }

          // PeakAirFlowCooling_Double
          //
          if (n.name () == "PeakAirFlowCooling_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PeakAirFlowCooling_Double_)
            {
              this->PeakAirFlowCooling_Double_.set (PeakAirFlowCooling_Double_traits::create (i, f, this));
              continue;
            }
          }

          // PeakAirFlowHeating_Double
          //
          if (n.name () == "PeakAirFlowHeating_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PeakAirFlowHeating_Double_)
            {
              this->PeakAirFlowHeating_Double_.set (PeakAirFlowHeating_Double_traits::create (i, f, this));
              continue;
            }
          }

          // ExhaustAirFlowRate_Double
          //
          if (n.name () == "ExhaustAirFlowRate_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ExhaustAirFlowRate_Double_)
            {
              this->ExhaustAirFlowRate_Double_.set (ExhaustAirFlowRate_Double_traits::create (i, f, this));
              continue;
            }
          }

          // NaturalAirChangeRate_Double
          //
          if (n.name () == "NaturalAirChangeRate_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->NaturalAirChangeRate_Double_)
            {
              this->NaturalAirChangeRate_Double_.set (NaturalAirChangeRate_Double_traits::create (i, f, this));
              continue;
            }
          }

          // MechanicalAirChangeRate_Double
          //
          if (n.name () == "MechanicalAirChangeRate_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MechanicalAirChangeRate_Double_)
            {
              this->MechanicalAirChangeRate_Double_.set (MechanicalAirChangeRate_Double_traits::create (i, f, this));
              continue;
            }
          }

          // VentilationType
          //
          if (n.name () == "VentilationType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< VentilationType_type > r (
              VentilationType_traits::create (i, f, this));

            if (!this->VentilationType_)
            {
              this->VentilationType_.set (r);
              continue;
            }
          }

          // OutsideAirPerPerson_Double
          //
          if (n.name () == "OutsideAirPerPerson_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->OutsideAirPerPerson_Double_)
            {
              this->OutsideAirPerPerson_Double_.set (OutsideAirPerPerson_Double_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_SpaceByFunction
          //
          if (n.name () == "ClassRef_SpaceByFunction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceByFunction_type > r (
              ClassRef_SpaceByFunction_traits::create (i, f, this));

            if (!this->ClassRef_SpaceByFunction_)
            {
              this->ClassRef_SpaceByFunction_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceTypeOwner
          //
          if (n.name () == "ClassRef_SpaceTypeOwner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceTypeOwner_type > r (
              ClassRef_SpaceTypeOwner_traits::create (i, f, this));

            if (!this->ClassRef_SpaceTypeOwner_)
            {
              this->ClassRef_SpaceTypeOwner_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceCategoryOwner
          //
          if (n.name () == "ClassRef_SpaceCategoryOwner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceCategoryOwner_type > r (
              ClassRef_SpaceCategoryOwner_traits::create (i, f, this));

            if (!this->ClassRef_SpaceCategoryOwner_)
            {
              this->ClassRef_SpaceCategoryOwner_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceCategoryBOMA
          //
          if (n.name () == "ClassRef_SpaceCategoryBOMA" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceCategoryBOMA_type > r (
              ClassRef_SpaceCategoryBOMA_traits::create (i, f, this));

            if (!this->ClassRef_SpaceCategoryBOMA_)
            {
              this->ClassRef_SpaceCategoryBOMA_.set (r);
              continue;
            }
          }

          // SpaceOccupantsList
          //
          if (n.name () == "SpaceOccupantsList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SpaceOccupantsList_type > r (
              SpaceOccupantsList_traits::create (i, f, this));

            if (!this->SpaceOccupantsList_)
            {
              this->SpaceOccupantsList_.set (r);
              continue;
            }
          }

          // OccupancyScheduleAssignment
          //
          if (n.name () == "OccupancyScheduleAssignment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< OccupancyScheduleAssignment_type > r (
              OccupancyScheduleAssignment_traits::create (i, f, this));

            if (!this->OccupancyScheduleAssignment_)
            {
              this->OccupancyScheduleAssignment_.set (r);
              continue;
            }
          }

          // LightingScheduleAssignment
          //
          if (n.name () == "LightingScheduleAssignment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< LightingScheduleAssignment_type > r (
              LightingScheduleAssignment_traits::create (i, f, this));

            if (!this->LightingScheduleAssignment_)
            {
              this->LightingScheduleAssignment_.set (r);
              continue;
            }
          }

          // EquipmentScheduleAssignment
          //
          if (n.name () == "EquipmentScheduleAssignment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< EquipmentScheduleAssignment_type > r (
              EquipmentScheduleAssignment_traits::create (i, f, this));

            if (!this->EquipmentScheduleAssignment_)
            {
              this->EquipmentScheduleAssignment_.set (r);
              continue;
            }
          }

          // T24CommRefrigEPD
          //
          if (n.name () == "T24CommRefrigEPD" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigEPD_)
            {
              this->T24CommRefrigEPD_.set (T24CommRefrigEPD_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommRefrigEqmtSchedRef
          //
          if (n.name () == "T24CommRefrigEqmtSchedRef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CommRefrigEqmtSchedRef_type > r (
              T24CommRefrigEqmtSchedRef_traits::create (i, f, this));

            if (!this->T24CommRefrigEqmtSchedRef_)
            {
              this->T24CommRefrigEqmtSchedRef_.set (r);
              continue;
            }
          }

          // T24CommRefrigLatentFraction
          //
          if (n.name () == "T24CommRefrigLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigLatentFraction_)
            {
              this->T24CommRefrigLatentFraction_.set (T24CommRefrigLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommRefrigLostFraction
          //
          if (n.name () == "T24CommRefrigLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigLostFraction_)
            {
              this->T24CommRefrigLostFraction_.set (T24CommRefrigLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24CommRefrigRedFraction
          //
          if (n.name () == "T24CommRefrigRedFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CommRefrigRedFraction_)
            {
              this->T24CommRefrigRedFraction_.set (T24CommRefrigRedFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24DesignInfiltrationRate
          //
          if (n.name () == "T24DesignInfiltrationRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24DesignInfiltrationRate_type > r (
              T24DesignInfiltrationRate_traits::create (i, f, this));

            if (!this->T24DesignInfiltrationRate_)
            {
              this->T24DesignInfiltrationRate_.set (r);
              continue;
            }
          }

          // T24ElevatorCount
          //
          if (n.name () == "T24ElevatorCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ElevatorCount_)
            {
              this->T24ElevatorCount_.set (T24ElevatorCount_traits::create (i, f, this));
              continue;
            }
          }

          // T24ElevatorLatentFraction
          //
          if (n.name () == "T24ElevatorLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ElevatorLatentFraction_)
            {
              this->T24ElevatorLatentFraction_.set (T24ElevatorLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ElevatorLostFraction
          //
          if (n.name () == "T24ElevatorLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ElevatorLostFraction_)
            {
              this->T24ElevatorLostFraction_.set (T24ElevatorLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ElevatorPower
          //
          if (n.name () == "T24ElevatorPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ElevatorPower_)
            {
              this->T24ElevatorPower_.set (T24ElevatorPower_traits::create (i, f, this));
              continue;
            }
          }

          // T24ElevatorRadiationFraction
          //
          if (n.name () == "T24ElevatorRadiationFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ElevatorRadiationFraction_)
            {
              this->T24ElevatorRadiationFraction_.set (T24ElevatorRadiationFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ElevatorScheduleReference
          //
          if (n.name () == "T24ElevatorScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ElevatorScheduleReference_type > r (
              T24ElevatorScheduleReference_traits::create (i, f, this));

            if (!this->T24ElevatorScheduleReference_)
            {
              this->T24ElevatorScheduleReference_.set (r);
              continue;
            }
          }

          // T24EscalatorCount
          //
          if (n.name () == "T24EscalatorCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24EscalatorCount_)
            {
              this->T24EscalatorCount_.set (T24EscalatorCount_traits::create (i, f, this));
              continue;
            }
          }

          // T24EscalatorLatentFraction
          //
          if (n.name () == "T24EscalatorLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24EscalatorLatentFraction_)
            {
              this->T24EscalatorLatentFraction_.set (T24EscalatorLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24EscalatorLostFraction
          //
          if (n.name () == "T24EscalatorLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24EscalatorLostFraction_)
            {
              this->T24EscalatorLostFraction_.set (T24EscalatorLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24EscalatorPower
          //
          if (n.name () == "T24EscalatorPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24EscalatorPower_)
            {
              this->T24EscalatorPower_.set (T24EscalatorPower_traits::create (i, f, this));
              continue;
            }
          }

          // T24EscalatorRadiationFraction
          //
          if (n.name () == "T24EscalatorRadiationFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24EscalatorRadiationFraction_)
            {
              this->T24EscalatorRadiationFraction_.set (T24EscalatorRadiationFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24EscalatorScheduleReference
          //
          if (n.name () == "T24EscalatorScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24EscalatorScheduleReference_type > r (
              T24EscalatorScheduleReference_traits::create (i, f, this));

            if (!this->T24EscalatorScheduleReference_)
            {
              this->T24EscalatorScheduleReference_.set (r);
              continue;
            }
          }

          // T24ExhaustAirChangesPerHour
          //
          if (n.name () == "T24ExhaustAirChangesPerHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ExhaustAirChangesPerHour_)
            {
              this->T24ExhaustAirChangesPerHour_.set (T24ExhaustAirChangesPerHour_traits::create (i, f, this));
              continue;
            }
          }

          // T24ExhaustPerArea
          //
          if (n.name () == "T24ExhaustPerArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ExhaustPerArea_)
            {
              this->T24ExhaustPerArea_.set (T24ExhaustPerArea_traits::create (i, f, this));
              continue;
            }
          }

          // T24ExhaustPerSpace
          //
          if (n.name () == "T24ExhaustPerSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ExhaustPerSpace_)
            {
              this->T24ExhaustPerSpace_.set (T24ExhaustPerSpace_traits::create (i, f, this));
              continue;
            }
          }

          // T24FuncSchedGrp
          //
          if (n.name () == "T24FuncSchedGrp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24FuncSchedGrp_type > r (
              T24FuncSchedGrp_traits::create (i, f, this));

            if (!this->T24FuncSchedGrp_)
            {
              this->T24FuncSchedGrp_.set (r);
              continue;
            }
          }

          // T24GasEquipmentLatentFraction
          //
          if (n.name () == "T24GasEquipmentLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24GasEquipmentLatentFraction_)
            {
              this->T24GasEquipmentLatentFraction_.set (T24GasEquipmentLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24GasEquipmentLostFraction
          //
          if (n.name () == "T24GasEquipmentLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24GasEquipmentLostFraction_)
            {
              this->T24GasEquipmentLostFraction_.set (T24GasEquipmentLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24GasEquipmentPowerDensity
          //
          if (n.name () == "T24GasEquipmentPowerDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24GasEquipmentPowerDensity_)
            {
              this->T24GasEquipmentPowerDensity_.set (T24GasEquipmentPowerDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24GasEquipmentRadiationFraction
          //
          if (n.name () == "T24GasEquipmentRadiationFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24GasEquipmentRadiationFraction_)
            {
              this->T24GasEquipmentRadiationFraction_.set (T24GasEquipmentRadiationFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24GasEquipmentScheduleReference
          //
          if (n.name () == "T24GasEquipmentScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24GasEquipmentScheduleReference_type > r (
              T24GasEquipmentScheduleReference_traits::create (i, f, this));

            if (!this->T24GasEquipmentScheduleReference_)
            {
              this->T24GasEquipmentScheduleReference_.set (r);
              continue;
            }
          }

          // T24HotWaterHeatingRate
          //
          if (n.name () == "T24HotWaterHeatingRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24HotWaterHeatingRate_)
            {
              this->T24HotWaterHeatingRate_.set (T24HotWaterHeatingRate_traits::create (i, f, this));
              continue;
            }
          }

          // T24HotWaterHeatingScheduleReference
          //
          if (n.name () == "T24HotWaterHeatingScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24HotWaterHeatingScheduleReference_type > r (
              T24HotWaterHeatingScheduleReference_traits::create (i, f, this));

            if (!this->T24HotWaterHeatingScheduleReference_)
            {
              this->T24HotWaterHeatingScheduleReference_.set (r);
              continue;
            }
          }

          // T24HotWaterSupplyTemperature
          //
          if (n.name () == "T24HotWaterSupplyTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24HotWaterSupplyTemperature_)
            {
              this->T24HotWaterSupplyTemperature_.set (T24HotWaterSupplyTemperature_traits::create (i, f, this));
              continue;
            }
          }

          // T24HotWaterTemteratureSchedulrReference
          //
          if (n.name () == "T24HotWaterTemteratureSchedulrReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24HotWaterTemteratureSchedulrReference_type > r (
              T24HotWaterTemteratureSchedulrReference_traits::create (i, f, this));

            if (!this->T24HotWaterTemteratureSchedulrReference_)
            {
              this->T24HotWaterTemteratureSchedulrReference_.set (r);
              continue;
            }
          }

          // T24InfiltrMthd
          //
          if (n.name () == "T24InfiltrMthd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InfiltrMthd_type > r (
              T24InfiltrMthd_traits::create (i, f, this));

            if (!this->T24InfiltrMthd_)
            {
              this->T24InfiltrMthd_.set (r);
              continue;
            }
          }

          // T24InfiltrationModelCoefficientA
          //
          if (n.name () == "T24InfiltrationModelCoefficientA" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InfiltrationModelCoefficientA_type > r (
              T24InfiltrationModelCoefficientA_traits::create (i, f, this));

            if (!this->T24InfiltrationModelCoefficientA_)
            {
              this->T24InfiltrationModelCoefficientA_.set (r);
              continue;
            }
          }

          // T24InfiltrationModelCoefficientB
          //
          if (n.name () == "T24InfiltrationModelCoefficientB" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InfiltrationModelCoefficientB_type > r (
              T24InfiltrationModelCoefficientB_traits::create (i, f, this));

            if (!this->T24InfiltrationModelCoefficientB_)
            {
              this->T24InfiltrationModelCoefficientB_.set (r);
              continue;
            }
          }

          // T24InfiltrationModelCoefficientC
          //
          if (n.name () == "T24InfiltrationModelCoefficientC" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InfiltrationModelCoefficientC_type > r (
              T24InfiltrationModelCoefficientC_traits::create (i, f, this));

            if (!this->T24InfiltrationModelCoefficientC_)
            {
              this->T24InfiltrationModelCoefficientC_.set (r);
              continue;
            }
          }

          // T24InfiltrationModelCoefficientD
          //
          if (n.name () == "T24InfiltrationModelCoefficientD" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InfiltrationModelCoefficientD_type > r (
              T24InfiltrationModelCoefficientD_traits::create (i, f, this));

            if (!this->T24InfiltrationModelCoefficientD_)
            {
              this->T24InfiltrationModelCoefficientD_.set (r);
              continue;
            }
          }

          // T24InfiltrationScheduleReference
          //
          if (n.name () == "T24InfiltrationScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InfiltrationScheduleReference_type > r (
              T24InfiltrationScheduleReference_traits::create (i, f, this));

            if (!this->T24InfiltrationScheduleReference_)
            {
              this->T24InfiltrationScheduleReference_.set (r);
              continue;
            }
          }

          // T24InteriorLightingNonRegulatedHeatGainRadiantFraction
          //
          if (n.name () == "T24InteriorLightingNonRegulatedHeatGainRadiantFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_)
            {
              this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_.set (T24InteriorLightingNonRegulatedHeatGainRadiantFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24InteriorLightingNonRegulatedHeatGainSpaceFraction
          //
          if (n.name () == "T24InteriorLightingNonRegulatedHeatGainSpaceFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_)
            {
              this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_.set (T24InteriorLightingNonRegulatedHeatGainSpaceFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24InteriorLightingNonRegulatedScheduleReference
          //
          if (n.name () == "T24InteriorLightingNonRegulatedScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InteriorLightingNonRegulatedScheduleReference_type > r (
              T24InteriorLightingNonRegulatedScheduleReference_traits::create (i, f, this));

            if (!this->T24InteriorLightingNonRegulatedScheduleReference_)
            {
              this->T24InteriorLightingNonRegulatedScheduleReference_.set (r);
              continue;
            }
          }

          // T24InteriorLightingPowerDensityNonRegulated
          //
          if (n.name () == "T24InteriorLightingPowerDensityNonRegulated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24InteriorLightingPowerDensityNonRegulated_)
            {
              this->T24InteriorLightingPowerDensityNonRegulated_.set (T24InteriorLightingPowerDensityNonRegulated_traits::create (i, f, this));
              continue;
            }
          }

          // T24InteriorLightingPowerDensityRegulated
          //
          if (n.name () == "T24InteriorLightingPowerDensityRegulated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24InteriorLightingPowerDensityRegulated_)
            {
              this->T24InteriorLightingPowerDensityRegulated_.set (T24InteriorLightingPowerDensityRegulated_traits::create (i, f, this));
              continue;
            }
          }

          // T24InteriorLightingRegulatedHeatGainRadiantFraction
          //
          if (n.name () == "T24InteriorLightingRegulatedHeatGainRadiantFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24InteriorLightingRegulatedHeatGainRadiantFraction_)
            {
              this->T24InteriorLightingRegulatedHeatGainRadiantFraction_.set (T24InteriorLightingRegulatedHeatGainRadiantFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24InteriorLightingRegulatedHeatGainSpaceFraction
          //
          if (n.name () == "T24InteriorLightingRegulatedHeatGainSpaceFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24InteriorLightingRegulatedHeatGainSpaceFraction_)
            {
              this->T24InteriorLightingRegulatedHeatGainSpaceFraction_.set (T24InteriorLightingRegulatedHeatGainSpaceFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24InteriorLightingRegulatedScheduleReference
          //
          if (n.name () == "T24InteriorLightingRegulatedScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24InteriorLightingRegulatedScheduleReference_type > r (
              T24InteriorLightingRegulatedScheduleReference_traits::create (i, f, this));

            if (!this->T24InteriorLightingRegulatedScheduleReference_)
            {
              this->T24InteriorLightingRegulatedScheduleReference_.set (r);
              continue;
            }
          }

          // T24OccupantDensity
          //
          if (n.name () == "T24OccupantDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24OccupantDensity_)
            {
              this->T24OccupantDensity_.set (T24OccupantDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessElectricalLatentFraction
          //
          if (n.name () == "T24ProcessElectricalLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessElectricalLatentFraction_)
            {
              this->T24ProcessElectricalLatentFraction_.set (T24ProcessElectricalLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessElectricalLostFraction
          //
          if (n.name () == "T24ProcessElectricalLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessElectricalLostFraction_)
            {
              this->T24ProcessElectricalLostFraction_.set (T24ProcessElectricalLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessElectricalPowerDensity
          //
          if (n.name () == "T24ProcessElectricalPowerDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessElectricalPowerDensity_)
            {
              this->T24ProcessElectricalPowerDensity_.set (T24ProcessElectricalPowerDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessElectricalRadiationFraction
          //
          if (n.name () == "T24ProcessElectricalRadiationFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessElectricalRadiationFraction_)
            {
              this->T24ProcessElectricalRadiationFraction_.set (T24ProcessElectricalRadiationFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessElectricalScheduleReference
          //
          if (n.name () == "T24ProcessElectricalScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ProcessElectricalScheduleReference_type > r (
              T24ProcessElectricalScheduleReference_traits::create (i, f, this));

            if (!this->T24ProcessElectricalScheduleReference_)
            {
              this->T24ProcessElectricalScheduleReference_.set (r);
              continue;
            }
          }

          // T24ProcessGasLatentFraction
          //
          if (n.name () == "T24ProcessGasLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessGasLatentFraction_)
            {
              this->T24ProcessGasLatentFraction_.set (T24ProcessGasLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessGasLostFraction
          //
          if (n.name () == "T24ProcessGasLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessGasLostFraction_)
            {
              this->T24ProcessGasLostFraction_.set (T24ProcessGasLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessGasPowerDensity
          //
          if (n.name () == "T24ProcessGasPowerDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessGasPowerDensity_)
            {
              this->T24ProcessGasPowerDensity_.set (T24ProcessGasPowerDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessGasRadiationFraction
          //
          if (n.name () == "T24ProcessGasRadiationFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ProcessGasRadiationFraction_)
            {
              this->T24ProcessGasRadiationFraction_.set (T24ProcessGasRadiationFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ProcessGasScheduleReference
          //
          if (n.name () == "T24ProcessGasScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ProcessGasScheduleReference_type > r (
              T24ProcessGasScheduleReference_traits::create (i, f, this));

            if (!this->T24ProcessGasScheduleReference_)
            {
              this->T24ProcessGasScheduleReference_.set (r);
              continue;
            }
          }

          // T24ReceptacleLatentFraction
          //
          if (n.name () == "T24ReceptacleLatentFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ReceptacleLatentFraction_)
            {
              this->T24ReceptacleLatentFraction_.set (T24ReceptacleLatentFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ReceptacleLostFraction
          //
          if (n.name () == "T24ReceptacleLostFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ReceptacleLostFraction_)
            {
              this->T24ReceptacleLostFraction_.set (T24ReceptacleLostFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ReceptaclePowerDensity
          //
          if (n.name () == "T24ReceptaclePowerDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ReceptaclePowerDensity_)
            {
              this->T24ReceptaclePowerDensity_.set (T24ReceptaclePowerDensity_traits::create (i, f, this));
              continue;
            }
          }

          // T24ReceptacleRadiationFraction
          //
          if (n.name () == "T24ReceptacleRadiationFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24ReceptacleRadiationFraction_)
            {
              this->T24ReceptacleRadiationFraction_.set (T24ReceptacleRadiationFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24ReceptacleScheduleReference
          //
          if (n.name () == "T24ReceptacleScheduleReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ReceptacleScheduleReference_type > r (
              T24ReceptacleScheduleReference_traits::create (i, f, this));

            if (!this->T24ReceptacleScheduleReference_)
            {
              this->T24ReceptacleScheduleReference_.set (r);
              continue;
            }
          }

          // T24RecirculationDHWSystemReference
          //
          if (n.name () == "T24RecirculationDHWSystemReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24RecirculationDHWSystemReference_type > r (
              T24RecirculationDHWSystemReference_traits::create (i, f, this));

            if (!this->T24RecirculationDHWSystemReference_)
            {
              this->T24RecirculationDHWSystemReference_.set (r);
              continue;
            }
          }

          // T24SHWFluidSegmentReference
          //
          if (n.name () == "T24SHWFluidSegmentReference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SHWFluidSegmentReference_type > r (
              T24SHWFluidSegmentReference_traits::create (i, f, this));

            if (!this->T24SHWFluidSegmentReference_)
            {
              this->T24SHWFluidSegmentReference_.set (r);
              continue;
            }
          }

          // T24SpaceFunction
          //
          if (n.name () == "T24SpaceFunction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24SpaceFunction_type > r (
              T24SpaceFunction_traits::create (i, f, this));

            if (!this->T24SpaceFunction_)
            {
              this->T24SpaceFunction_.set (r);
              continue;
            }
          }

          // T24VentilationAirChangesPerHour
          //
          if (n.name () == "T24VentilationAirChangesPerHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24VentilationAirChangesPerHour_)
            {
              this->T24VentilationAirChangesPerHour_.set (T24VentilationAirChangesPerHour_traits::create (i, f, this));
              continue;
            }
          }

          // T24VentilationPerArea
          //
          if (n.name () == "T24VentilationPerArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24VentilationPerArea_)
            {
              this->T24VentilationPerArea_.set (T24VentilationPerArea_traits::create (i, f, this));
              continue;
            }
          }

          // T24VentilationPerPerson
          //
          if (n.name () == "T24VentilationPerPerson" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24VentilationPerPerson_)
            {
              this->T24VentilationPerPerson_.set (T24VentilationPerPerson_traits::create (i, f, this));
              continue;
            }
          }

          // T24VentilationPerSpace
          //
          if (n.name () == "T24VentilationPerSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24VentilationPerSpace_)
            {
              this->T24VentilationPerSpace_.set (T24VentilationPerSpace_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimSpaceType* SimSpaceType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSpaceType (*this, f, c);
      }

      SimSpaceType& SimSpaceType::
      operator= (const SimSpaceType& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimObjectTypeDefinition& > (*this) = x;
          this->RepresentationMaps_ = x.RepresentationMaps_;
          this->Tag_ = x.Tag_;
          this->SpaceThermalSimulationType_ = x.SpaceThermalSimulationType_;
          this->SpaceConditioningRequirement_Double_ = x.SpaceConditioningRequirement_Double_;
          this->SpaceOccupantDensity_ = x.SpaceOccupantDensity_;
          this->SpaceOccupantHeatRateLatent_ = x.SpaceOccupantHeatRateLatent_;
          this->SpaceOccupantHeatRateSensible_ = x.SpaceOccupantHeatRateSensible_;
          this->SpaceOccupantLoad_ = x.SpaceOccupantLoad_;
          this->SpaceEquipmentLoad_ = x.SpaceEquipmentLoad_;
          this->SpaceLightingLoad_ = x.SpaceLightingLoad_;
          this->InsideDryBulbTempHeating_Double_ = x.InsideDryBulbTempHeating_Double_;
          this->InsideRelHumidityHeating_ = x.InsideRelHumidityHeating_;
          this->InsideDryBulbTempCooling_Double_ = x.InsideDryBulbTempCooling_Double_;
          this->InsideRelHumidityCooling_ = x.InsideRelHumidityCooling_;
          this->IncludesReturnAirPlenum_ = x.IncludesReturnAirPlenum_;
          this->PeakAirFlowCooling_Double_ = x.PeakAirFlowCooling_Double_;
          this->PeakAirFlowHeating_Double_ = x.PeakAirFlowHeating_Double_;
          this->ExhaustAirFlowRate_Double_ = x.ExhaustAirFlowRate_Double_;
          this->NaturalAirChangeRate_Double_ = x.NaturalAirChangeRate_Double_;
          this->MechanicalAirChangeRate_Double_ = x.MechanicalAirChangeRate_Double_;
          this->VentilationType_ = x.VentilationType_;
          this->OutsideAirPerPerson_Double_ = x.OutsideAirPerPerson_Double_;
          this->ClassRef_SpaceByFunction_ = x.ClassRef_SpaceByFunction_;
          this->ClassRef_SpaceTypeOwner_ = x.ClassRef_SpaceTypeOwner_;
          this->ClassRef_SpaceCategoryOwner_ = x.ClassRef_SpaceCategoryOwner_;
          this->ClassRef_SpaceCategoryBOMA_ = x.ClassRef_SpaceCategoryBOMA_;
          this->SpaceOccupantsList_ = x.SpaceOccupantsList_;
          this->OccupancyScheduleAssignment_ = x.OccupancyScheduleAssignment_;
          this->LightingScheduleAssignment_ = x.LightingScheduleAssignment_;
          this->EquipmentScheduleAssignment_ = x.EquipmentScheduleAssignment_;
          this->T24CommRefrigEPD_ = x.T24CommRefrigEPD_;
          this->T24CommRefrigEqmtSchedRef_ = x.T24CommRefrigEqmtSchedRef_;
          this->T24CommRefrigLatentFraction_ = x.T24CommRefrigLatentFraction_;
          this->T24CommRefrigLostFraction_ = x.T24CommRefrigLostFraction_;
          this->T24CommRefrigRedFraction_ = x.T24CommRefrigRedFraction_;
          this->T24DesignInfiltrationRate_ = x.T24DesignInfiltrationRate_;
          this->T24ElevatorCount_ = x.T24ElevatorCount_;
          this->T24ElevatorLatentFraction_ = x.T24ElevatorLatentFraction_;
          this->T24ElevatorLostFraction_ = x.T24ElevatorLostFraction_;
          this->T24ElevatorPower_ = x.T24ElevatorPower_;
          this->T24ElevatorRadiationFraction_ = x.T24ElevatorRadiationFraction_;
          this->T24ElevatorScheduleReference_ = x.T24ElevatorScheduleReference_;
          this->T24EscalatorCount_ = x.T24EscalatorCount_;
          this->T24EscalatorLatentFraction_ = x.T24EscalatorLatentFraction_;
          this->T24EscalatorLostFraction_ = x.T24EscalatorLostFraction_;
          this->T24EscalatorPower_ = x.T24EscalatorPower_;
          this->T24EscalatorRadiationFraction_ = x.T24EscalatorRadiationFraction_;
          this->T24EscalatorScheduleReference_ = x.T24EscalatorScheduleReference_;
          this->T24ExhaustAirChangesPerHour_ = x.T24ExhaustAirChangesPerHour_;
          this->T24ExhaustPerArea_ = x.T24ExhaustPerArea_;
          this->T24ExhaustPerSpace_ = x.T24ExhaustPerSpace_;
          this->T24FuncSchedGrp_ = x.T24FuncSchedGrp_;
          this->T24GasEquipmentLatentFraction_ = x.T24GasEquipmentLatentFraction_;
          this->T24GasEquipmentLostFraction_ = x.T24GasEquipmentLostFraction_;
          this->T24GasEquipmentPowerDensity_ = x.T24GasEquipmentPowerDensity_;
          this->T24GasEquipmentRadiationFraction_ = x.T24GasEquipmentRadiationFraction_;
          this->T24GasEquipmentScheduleReference_ = x.T24GasEquipmentScheduleReference_;
          this->T24HotWaterHeatingRate_ = x.T24HotWaterHeatingRate_;
          this->T24HotWaterHeatingScheduleReference_ = x.T24HotWaterHeatingScheduleReference_;
          this->T24HotWaterSupplyTemperature_ = x.T24HotWaterSupplyTemperature_;
          this->T24HotWaterTemteratureSchedulrReference_ = x.T24HotWaterTemteratureSchedulrReference_;
          this->T24InfiltrMthd_ = x.T24InfiltrMthd_;
          this->T24InfiltrationModelCoefficientA_ = x.T24InfiltrationModelCoefficientA_;
          this->T24InfiltrationModelCoefficientB_ = x.T24InfiltrationModelCoefficientB_;
          this->T24InfiltrationModelCoefficientC_ = x.T24InfiltrationModelCoefficientC_;
          this->T24InfiltrationModelCoefficientD_ = x.T24InfiltrationModelCoefficientD_;
          this->T24InfiltrationScheduleReference_ = x.T24InfiltrationScheduleReference_;
          this->T24InteriorLightingNonRegulatedHeatGainRadiantFraction_ = x.T24InteriorLightingNonRegulatedHeatGainRadiantFraction_;
          this->T24InteriorLightingNonRegulatedHeatGainSpaceFraction_ = x.T24InteriorLightingNonRegulatedHeatGainSpaceFraction_;
          this->T24InteriorLightingNonRegulatedScheduleReference_ = x.T24InteriorLightingNonRegulatedScheduleReference_;
          this->T24InteriorLightingPowerDensityNonRegulated_ = x.T24InteriorLightingPowerDensityNonRegulated_;
          this->T24InteriorLightingPowerDensityRegulated_ = x.T24InteriorLightingPowerDensityRegulated_;
          this->T24InteriorLightingRegulatedHeatGainRadiantFraction_ = x.T24InteriorLightingRegulatedHeatGainRadiantFraction_;
          this->T24InteriorLightingRegulatedHeatGainSpaceFraction_ = x.T24InteriorLightingRegulatedHeatGainSpaceFraction_;
          this->T24InteriorLightingRegulatedScheduleReference_ = x.T24InteriorLightingRegulatedScheduleReference_;
          this->T24OccupantDensity_ = x.T24OccupantDensity_;
          this->T24ProcessElectricalLatentFraction_ = x.T24ProcessElectricalLatentFraction_;
          this->T24ProcessElectricalLostFraction_ = x.T24ProcessElectricalLostFraction_;
          this->T24ProcessElectricalPowerDensity_ = x.T24ProcessElectricalPowerDensity_;
          this->T24ProcessElectricalRadiationFraction_ = x.T24ProcessElectricalRadiationFraction_;
          this->T24ProcessElectricalScheduleReference_ = x.T24ProcessElectricalScheduleReference_;
          this->T24ProcessGasLatentFraction_ = x.T24ProcessGasLatentFraction_;
          this->T24ProcessGasLostFraction_ = x.T24ProcessGasLostFraction_;
          this->T24ProcessGasPowerDensity_ = x.T24ProcessGasPowerDensity_;
          this->T24ProcessGasRadiationFraction_ = x.T24ProcessGasRadiationFraction_;
          this->T24ProcessGasScheduleReference_ = x.T24ProcessGasScheduleReference_;
          this->T24ReceptacleLatentFraction_ = x.T24ReceptacleLatentFraction_;
          this->T24ReceptacleLostFraction_ = x.T24ReceptacleLostFraction_;
          this->T24ReceptaclePowerDensity_ = x.T24ReceptaclePowerDensity_;
          this->T24ReceptacleRadiationFraction_ = x.T24ReceptacleRadiationFraction_;
          this->T24ReceptacleScheduleReference_ = x.T24ReceptacleScheduleReference_;
          this->T24RecirculationDHWSystemReference_ = x.T24RecirculationDHWSystemReference_;
          this->T24SHWFluidSegmentReference_ = x.T24SHWFluidSegmentReference_;
          this->T24SpaceFunction_ = x.T24SpaceFunction_;
          this->T24VentilationAirChangesPerHour_ = x.T24VentilationAirChangesPerHour_;
          this->T24VentilationPerArea_ = x.T24VentilationPerArea_;
          this->T24VentilationPerPerson_ = x.T24VentilationPerPerson_;
          this->T24VentilationPerSpace_ = x.T24VentilationPerSpace_;
        }

        return *this;
      }

      SimSpaceType::
      ~SimSpaceType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

