// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowStorage_ElectricalStorage_DefaultElectricalStorage.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowStorage_ElectricalStorage_DefaultElectricalStorage
      // 

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_RadiativeFractForZoneHeatGains_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_RadiativeFractForZoneHeatGains () const
      {
        return this->SimFlowSto_RadiativeFractForZoneHeatGains_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_RadiativeFractForZoneHeatGains_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_RadiativeFractForZoneHeatGains ()
      {
        return this->SimFlowSto_RadiativeFractForZoneHeatGains_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_RadiativeFractForZoneHeatGains (const SimFlowSto_RadiativeFractForZoneHeatGains_type& x)
      {
        this->SimFlowSto_RadiativeFractForZoneHeatGains_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_RadiativeFractForZoneHeatGains (const SimFlowSto_RadiativeFractForZoneHeatGains_optional& x)
      {
        this->SimFlowSto_RadiativeFractForZoneHeatGains_ = x;
      }

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_NomEnergeticEffForCharging_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomEnergeticEffForCharging () const
      {
        return this->SimFlowSto_NomEnergeticEffForCharging_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_NomEnergeticEffForCharging_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomEnergeticEffForCharging ()
      {
        return this->SimFlowSto_NomEnergeticEffForCharging_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomEnergeticEffForCharging (const SimFlowSto_NomEnergeticEffForCharging_type& x)
      {
        this->SimFlowSto_NomEnergeticEffForCharging_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomEnergeticEffForCharging (const SimFlowSto_NomEnergeticEffForCharging_optional& x)
      {
        this->SimFlowSto_NomEnergeticEffForCharging_ = x;
      }

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_NomDischargEnergeticEff_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomDischargEnergeticEff () const
      {
        return this->SimFlowSto_NomDischargEnergeticEff_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_NomDischargEnergeticEff_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomDischargEnergeticEff ()
      {
        return this->SimFlowSto_NomDischargEnergeticEff_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomDischargEnergeticEff (const SimFlowSto_NomDischargEnergeticEff_type& x)
      {
        this->SimFlowSto_NomDischargEnergeticEff_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_NomDischargEnergeticEff (const SimFlowSto_NomDischargEnergeticEff_optional& x)
      {
        this->SimFlowSto_NomDischargEnergeticEff_ = x;
      }

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_MaxStorageCap_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxStorageCap () const
      {
        return this->SimFlowSto_MaxStorageCap_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_MaxStorageCap_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxStorageCap ()
      {
        return this->SimFlowSto_MaxStorageCap_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxStorageCap (const SimFlowSto_MaxStorageCap_type& x)
      {
        this->SimFlowSto_MaxStorageCap_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxStorageCap (const SimFlowSto_MaxStorageCap_optional& x)
      {
        this->SimFlowSto_MaxStorageCap_ = x;
      }

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_MaxPwrForDischarg_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForDischarg () const
      {
        return this->SimFlowSto_MaxPwrForDischarg_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_MaxPwrForDischarg_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForDischarg ()
      {
        return this->SimFlowSto_MaxPwrForDischarg_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForDischarg (const SimFlowSto_MaxPwrForDischarg_type& x)
      {
        this->SimFlowSto_MaxPwrForDischarg_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForDischarg (const SimFlowSto_MaxPwrForDischarg_optional& x)
      {
        this->SimFlowSto_MaxPwrForDischarg_ = x;
      }

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_MaxPwrForCharging_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForCharging () const
      {
        return this->SimFlowSto_MaxPwrForCharging_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_MaxPwrForCharging_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForCharging ()
      {
        return this->SimFlowSto_MaxPwrForCharging_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForCharging (const SimFlowSto_MaxPwrForCharging_type& x)
      {
        this->SimFlowSto_MaxPwrForCharging_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_MaxPwrForCharging (const SimFlowSto_MaxPwrForCharging_optional& x)
      {
        this->SimFlowSto_MaxPwrForCharging_ = x;
      }

      const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_InitStateCharge_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_InitStateCharge () const
      {
        return this->SimFlowSto_InitStateCharge_;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::SimFlowSto_InitStateCharge_optional& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_InitStateCharge ()
      {
        return this->SimFlowSto_InitStateCharge_;
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_InitStateCharge (const SimFlowSto_InitStateCharge_type& x)
      {
        this->SimFlowSto_InitStateCharge_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowSto_InitStateCharge (const SimFlowSto_InitStateCharge_optional& x)
      {
        this->SimFlowSto_InitStateCharge_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowStorage_ElectricalStorage_DefaultElectricalStorage
      //

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage ()
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (),
        SimFlowSto_RadiativeFractForZoneHeatGains_ (this),
        SimFlowSto_NomEnergeticEffForCharging_ (this),
        SimFlowSto_NomDischargEnergeticEff_ (this),
        SimFlowSto_MaxStorageCap_ (this),
        SimFlowSto_MaxPwrForDischarg_ (this),
        SimFlowSto_MaxPwrForCharging_ (this),
        SimFlowSto_InitStateCharge_ (this)
      {
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (RefId),
        SimFlowSto_RadiativeFractForZoneHeatGains_ (this),
        SimFlowSto_NomEnergeticEffForCharging_ (this),
        SimFlowSto_NomDischargEnergeticEff_ (this),
        SimFlowSto_MaxStorageCap_ (this),
        SimFlowSto_MaxPwrForDischarg_ (this),
        SimFlowSto_MaxPwrForCharging_ (this),
        SimFlowSto_InitStateCharge_ (this)
      {
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage (const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage& x,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (x, f, c),
        SimFlowSto_RadiativeFractForZoneHeatGains_ (x.SimFlowSto_RadiativeFractForZoneHeatGains_, f, this),
        SimFlowSto_NomEnergeticEffForCharging_ (x.SimFlowSto_NomEnergeticEffForCharging_, f, this),
        SimFlowSto_NomDischargEnergeticEff_ (x.SimFlowSto_NomDischargEnergeticEff_, f, this),
        SimFlowSto_MaxStorageCap_ (x.SimFlowSto_MaxStorageCap_, f, this),
        SimFlowSto_MaxPwrForDischarg_ (x.SimFlowSto_MaxPwrForDischarg_, f, this),
        SimFlowSto_MaxPwrForCharging_ (x.SimFlowSto_MaxPwrForCharging_, f, this),
        SimFlowSto_InitStateCharge_ (x.SimFlowSto_InitStateCharge_, f, this)
      {
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage (const ::xercesc::DOMElement& e,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (e, f | ::xml_schema::flags::base, c),
        SimFlowSto_RadiativeFractForZoneHeatGains_ (this),
        SimFlowSto_NomEnergeticEffForCharging_ (this),
        SimFlowSto_NomDischargEnergeticEff_ (this),
        SimFlowSto_MaxStorageCap_ (this),
        SimFlowSto_MaxPwrForDischarg_ (this),
        SimFlowSto_MaxPwrForCharging_ (this),
        SimFlowSto_InitStateCharge_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowSto_RadiativeFractForZoneHeatGains
          //
          if (n.name () == "SimFlowSto_RadiativeFractForZoneHeatGains" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_RadiativeFractForZoneHeatGains_)
            {
              this->SimFlowSto_RadiativeFractForZoneHeatGains_.set (SimFlowSto_RadiativeFractForZoneHeatGains_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_NomEnergeticEffForCharging
          //
          if (n.name () == "SimFlowSto_NomEnergeticEffForCharging" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_NomEnergeticEffForCharging_)
            {
              this->SimFlowSto_NomEnergeticEffForCharging_.set (SimFlowSto_NomEnergeticEffForCharging_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_NomDischargEnergeticEff
          //
          if (n.name () == "SimFlowSto_NomDischargEnergeticEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_NomDischargEnergeticEff_)
            {
              this->SimFlowSto_NomDischargEnergeticEff_.set (SimFlowSto_NomDischargEnergeticEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_MaxStorageCap
          //
          if (n.name () == "SimFlowSto_MaxStorageCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_MaxStorageCap_)
            {
              this->SimFlowSto_MaxStorageCap_.set (SimFlowSto_MaxStorageCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_MaxPwrForDischarg
          //
          if (n.name () == "SimFlowSto_MaxPwrForDischarg" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_MaxPwrForDischarg_)
            {
              this->SimFlowSto_MaxPwrForDischarg_.set (SimFlowSto_MaxPwrForDischarg_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_MaxPwrForCharging
          //
          if (n.name () == "SimFlowSto_MaxPwrForCharging" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_MaxPwrForCharging_)
            {
              this->SimFlowSto_MaxPwrForCharging_.set (SimFlowSto_MaxPwrForCharging_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_InitStateCharge
          //
          if (n.name () == "SimFlowSto_InitStateCharge" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_InitStateCharge_)
            {
              this->SimFlowSto_InitStateCharge_.set (SimFlowSto_InitStateCharge_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage* SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowStorage_ElectricalStorage_DefaultElectricalStorage (*this, f, c);
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage& SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      operator= (const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage& > (*this) = x;
          this->SimFlowSto_RadiativeFractForZoneHeatGains_ = x.SimFlowSto_RadiativeFractForZoneHeatGains_;
          this->SimFlowSto_NomEnergeticEffForCharging_ = x.SimFlowSto_NomEnergeticEffForCharging_;
          this->SimFlowSto_NomDischargEnergeticEff_ = x.SimFlowSto_NomDischargEnergeticEff_;
          this->SimFlowSto_MaxStorageCap_ = x.SimFlowSto_MaxStorageCap_;
          this->SimFlowSto_MaxPwrForDischarg_ = x.SimFlowSto_MaxPwrForDischarg_;
          this->SimFlowSto_MaxPwrForCharging_ = x.SimFlowSto_MaxPwrForCharging_;
          this->SimFlowSto_InitStateCharge_ = x.SimFlowSto_InitStateCharge_;
        }

        return *this;
      }

      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage::
      ~SimFlowStorage_ElectricalStorage_DefaultElectricalStorage ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

