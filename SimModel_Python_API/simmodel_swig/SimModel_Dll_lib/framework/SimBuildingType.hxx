// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_BUILDING_TYPE_HXX
#define SIM_BUILDING_TYPE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimBuildingType;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simobjecttypedefinition.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimBuildingType: public ::schema::simxml::SimModelCore::SimObjectTypeDefinition
      {
        public:
        // RepresentationMaps
        //
        typedef ::xml_schema::idrefs RepresentationMaps_type;
        typedef ::xsd::cxx::tree::optional< RepresentationMaps_type > RepresentationMaps_optional;
        typedef ::xsd::cxx::tree::traits< RepresentationMaps_type, char > RepresentationMaps_traits;

        const RepresentationMaps_optional&
        RepresentationMaps () const;

        RepresentationMaps_optional&
        RepresentationMaps ();

        void
        RepresentationMaps (const RepresentationMaps_type& x);

        void
        RepresentationMaps (const RepresentationMaps_optional& x);

        void
        RepresentationMaps (::std::auto_ptr< RepresentationMaps_type > p);

        // Tag
        //
        typedef ::xml_schema::string Tag_type;
        typedef ::xsd::cxx::tree::optional< Tag_type > Tag_optional;
        typedef ::xsd::cxx::tree::traits< Tag_type, char > Tag_traits;

        const Tag_optional&
        Tag () const;

        Tag_optional&
        Tag ();

        void
        Tag (const Tag_type& x);

        void
        Tag (const Tag_optional& x);

        void
        Tag (::std::auto_ptr< Tag_type > p);

        // ContainedBldgStoryTypeDefs
        //
        typedef ::xml_schema::idrefs ContainedBldgStoryTypeDefs_type;
        typedef ::xsd::cxx::tree::optional< ContainedBldgStoryTypeDefs_type > ContainedBldgStoryTypeDefs_optional;
        typedef ::xsd::cxx::tree::traits< ContainedBldgStoryTypeDefs_type, char > ContainedBldgStoryTypeDefs_traits;

        const ContainedBldgStoryTypeDefs_optional&
        ContainedBldgStoryTypeDefs () const;

        ContainedBldgStoryTypeDefs_optional&
        ContainedBldgStoryTypeDefs ();

        void
        ContainedBldgStoryTypeDefs (const ContainedBldgStoryTypeDefs_type& x);

        void
        ContainedBldgStoryTypeDefs (const ContainedBldgStoryTypeDefs_optional& x);

        void
        ContainedBldgStoryTypeDefs (::std::auto_ptr< ContainedBldgStoryTypeDefs_type > p);

        // BuildingOccupancyType
        //
        typedef ::xml_schema::string BuildingOccupancyType_type;
        typedef ::xsd::cxx::tree::optional< BuildingOccupancyType_type > BuildingOccupancyType_optional;
        typedef ::xsd::cxx::tree::traits< BuildingOccupancyType_type, char > BuildingOccupancyType_traits;

        const BuildingOccupancyType_optional&
        BuildingOccupancyType () const;

        BuildingOccupancyType_optional&
        BuildingOccupancyType ();

        void
        BuildingOccupancyType (const BuildingOccupancyType_type& x);

        void
        BuildingOccupancyType (const BuildingOccupancyType_optional& x);

        void
        BuildingOccupancyType (::std::auto_ptr< BuildingOccupancyType_type > p);

        // BuildingEnergyTargetUnits
        //
        typedef ::xml_schema::string BuildingEnergyTargetUnits_type;
        typedef ::xsd::cxx::tree::optional< BuildingEnergyTargetUnits_type > BuildingEnergyTargetUnits_optional;
        typedef ::xsd::cxx::tree::traits< BuildingEnergyTargetUnits_type, char > BuildingEnergyTargetUnits_traits;

        const BuildingEnergyTargetUnits_optional&
        BuildingEnergyTargetUnits () const;

        BuildingEnergyTargetUnits_optional&
        BuildingEnergyTargetUnits ();

        void
        BuildingEnergyTargetUnits (const BuildingEnergyTargetUnits_type& x);

        void
        BuildingEnergyTargetUnits (const BuildingEnergyTargetUnits_optional& x);

        void
        BuildingEnergyTargetUnits (::std::auto_ptr< BuildingEnergyTargetUnits_type > p);

        // BuildingEnergyTargetValue
        //
        typedef ::xml_schema::double_ BuildingEnergyTargetValue_type;
        typedef ::xsd::cxx::tree::optional< BuildingEnergyTargetValue_type > BuildingEnergyTargetValue_optional;
        typedef ::xsd::cxx::tree::traits< BuildingEnergyTargetValue_type, char, ::xsd::cxx::tree::schema_type::double_ > BuildingEnergyTargetValue_traits;

        const BuildingEnergyTargetValue_optional&
        BuildingEnergyTargetValue () const;

        BuildingEnergyTargetValue_optional&
        BuildingEnergyTargetValue ();

        void
        BuildingEnergyTargetValue (const BuildingEnergyTargetValue_type& x);

        void
        BuildingEnergyTargetValue (const BuildingEnergyTargetValue_optional& x);

        // ClassRef_ConstEntByFunction
        //
        typedef ::xml_schema::idref ClassRef_ConstEntByFunction_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_ConstEntByFunction_type > ClassRef_ConstEntByFunction_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_ConstEntByFunction_type, char > ClassRef_ConstEntByFunction_traits;

        const ClassRef_ConstEntByFunction_optional&
        ClassRef_ConstEntByFunction () const;

        ClassRef_ConstEntByFunction_optional&
        ClassRef_ConstEntByFunction ();

        void
        ClassRef_ConstEntByFunction (const ClassRef_ConstEntByFunction_type& x);

        void
        ClassRef_ConstEntByFunction (const ClassRef_ConstEntByFunction_optional& x);

        void
        ClassRef_ConstEntByFunction (::std::auto_ptr< ClassRef_ConstEntByFunction_type > p);

        // BuildingConstructionsTemplate
        //
        typedef ::xml_schema::idref BuildingConstructionsTemplate_type;
        typedef ::xsd::cxx::tree::optional< BuildingConstructionsTemplate_type > BuildingConstructionsTemplate_optional;
        typedef ::xsd::cxx::tree::traits< BuildingConstructionsTemplate_type, char > BuildingConstructionsTemplate_traits;

        const BuildingConstructionsTemplate_optional&
        BuildingConstructionsTemplate () const;

        BuildingConstructionsTemplate_optional&
        BuildingConstructionsTemplate ();

        void
        BuildingConstructionsTemplate (const BuildingConstructionsTemplate_type& x);

        void
        BuildingConstructionsTemplate (const BuildingConstructionsTemplate_optional& x);

        void
        BuildingConstructionsTemplate (::std::auto_ptr< BuildingConstructionsTemplate_type > p);

        // DaylightControlsDefault
        //
        typedef ::xml_schema::idref DaylightControlsDefault_type;
        typedef ::xsd::cxx::tree::optional< DaylightControlsDefault_type > DaylightControlsDefault_optional;
        typedef ::xsd::cxx::tree::traits< DaylightControlsDefault_type, char > DaylightControlsDefault_traits;

        const DaylightControlsDefault_optional&
        DaylightControlsDefault () const;

        DaylightControlsDefault_optional&
        DaylightControlsDefault ();

        void
        DaylightControlsDefault (const DaylightControlsDefault_type& x);

        void
        DaylightControlsDefault (const DaylightControlsDefault_optional& x);

        void
        DaylightControlsDefault (::std::auto_ptr< DaylightControlsDefault_type > p);

        // SkylightControlsDefault
        //
        typedef ::xml_schema::idref SkylightControlsDefault_type;
        typedef ::xsd::cxx::tree::optional< SkylightControlsDefault_type > SkylightControlsDefault_optional;
        typedef ::xsd::cxx::tree::traits< SkylightControlsDefault_type, char > SkylightControlsDefault_traits;

        const SkylightControlsDefault_optional&
        SkylightControlsDefault () const;

        SkylightControlsDefault_optional&
        SkylightControlsDefault ();

        void
        SkylightControlsDefault (const SkylightControlsDefault_type& x);

        void
        SkylightControlsDefault (const SkylightControlsDefault_optional& x);

        void
        SkylightControlsDefault (::std::auto_ptr< SkylightControlsDefault_type > p);

        // NatVentilationDefault
        //
        typedef ::xml_schema::idref NatVentilationDefault_type;
        typedef ::xsd::cxx::tree::optional< NatVentilationDefault_type > NatVentilationDefault_optional;
        typedef ::xsd::cxx::tree::traits< NatVentilationDefault_type, char > NatVentilationDefault_traits;

        const NatVentilationDefault_optional&
        NatVentilationDefault () const;

        NatVentilationDefault_optional&
        NatVentilationDefault ();

        void
        NatVentilationDefault (const NatVentilationDefault_type& x);

        void
        NatVentilationDefault (const NatVentilationDefault_optional& x);

        void
        NatVentilationDefault (::std::auto_ptr< NatVentilationDefault_type > p);

        // BuildingInfiltrationType
        //
        typedef ::xml_schema::string BuildingInfiltrationType_type;
        typedef ::xsd::cxx::tree::optional< BuildingInfiltrationType_type > BuildingInfiltrationType_optional;
        typedef ::xsd::cxx::tree::traits< BuildingInfiltrationType_type, char > BuildingInfiltrationType_traits;

        const BuildingInfiltrationType_optional&
        BuildingInfiltrationType () const;

        BuildingInfiltrationType_optional&
        BuildingInfiltrationType ();

        void
        BuildingInfiltrationType (const BuildingInfiltrationType_type& x);

        void
        BuildingInfiltrationType (const BuildingInfiltrationType_optional& x);

        void
        BuildingInfiltrationType (::std::auto_ptr< BuildingInfiltrationType_type > p);

        // BuildingInfiltrationValue
        //
        typedef ::xml_schema::double_ BuildingInfiltrationValue_type;
        typedef ::xsd::cxx::tree::optional< BuildingInfiltrationValue_type > BuildingInfiltrationValue_optional;
        typedef ::xsd::cxx::tree::traits< BuildingInfiltrationValue_type, char, ::xsd::cxx::tree::schema_type::double_ > BuildingInfiltrationValue_traits;

        const BuildingInfiltrationValue_optional&
        BuildingInfiltrationValue () const;

        BuildingInfiltrationValue_optional&
        BuildingInfiltrationValue ();

        void
        BuildingInfiltrationValue (const BuildingInfiltrationValue_type& x);

        void
        BuildingInfiltrationValue (const BuildingInfiltrationValue_optional& x);

        // SimBuilding_LoadsConvergTolVal
        //
        typedef ::xml_schema::double_ SimBuilding_LoadsConvergTolVal_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_LoadsConvergTolVal_type > SimBuilding_LoadsConvergTolVal_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_LoadsConvergTolVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimBuilding_LoadsConvergTolVal_traits;

        const SimBuilding_LoadsConvergTolVal_optional&
        SimBuilding_LoadsConvergTolVal () const;

        SimBuilding_LoadsConvergTolVal_optional&
        SimBuilding_LoadsConvergTolVal ();

        void
        SimBuilding_LoadsConvergTolVal (const SimBuilding_LoadsConvergTolVal_type& x);

        void
        SimBuilding_LoadsConvergTolVal (const SimBuilding_LoadsConvergTolVal_optional& x);

        // SimBuilding_TempConvergTolVal_Double
        //
        typedef ::xml_schema::double_ SimBuilding_TempConvergTolVal_Double_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_TempConvergTolVal_Double_type > SimBuilding_TempConvergTolVal_Double_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_TempConvergTolVal_Double_type, char, ::xsd::cxx::tree::schema_type::double_ > SimBuilding_TempConvergTolVal_Double_traits;

        const SimBuilding_TempConvergTolVal_Double_optional&
        SimBuilding_TempConvergTolVal_Double () const;

        SimBuilding_TempConvergTolVal_Double_optional&
        SimBuilding_TempConvergTolVal_Double ();

        void
        SimBuilding_TempConvergTolVal_Double (const SimBuilding_TempConvergTolVal_Double_type& x);

        void
        SimBuilding_TempConvergTolVal_Double (const SimBuilding_TempConvergTolVal_Double_optional& x);

        // SimBuilding_MaxNumWarmupDays
        //
        typedef ::xml_schema::int_ SimBuilding_MaxNumWarmupDays_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_MaxNumWarmupDays_type > SimBuilding_MaxNumWarmupDays_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_MaxNumWarmupDays_type, char > SimBuilding_MaxNumWarmupDays_traits;

        const SimBuilding_MaxNumWarmupDays_optional&
        SimBuilding_MaxNumWarmupDays () const;

        SimBuilding_MaxNumWarmupDays_optional&
        SimBuilding_MaxNumWarmupDays ();

        void
        SimBuilding_MaxNumWarmupDays (const SimBuilding_MaxNumWarmupDays_type& x);

        void
        SimBuilding_MaxNumWarmupDays (const SimBuilding_MaxNumWarmupDays_optional& x);

        // SimBuilding_MinNumberWarmupDays
        //
        typedef ::xml_schema::int_ SimBuilding_MinNumberWarmupDays_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_MinNumberWarmupDays_type > SimBuilding_MinNumberWarmupDays_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_MinNumberWarmupDays_type, char > SimBuilding_MinNumberWarmupDays_traits;

        const SimBuilding_MinNumberWarmupDays_optional&
        SimBuilding_MinNumberWarmupDays () const;

        SimBuilding_MinNumberWarmupDays_optional&
        SimBuilding_MinNumberWarmupDays ();

        void
        SimBuilding_MinNumberWarmupDays (const SimBuilding_MinNumberWarmupDays_type& x);

        void
        SimBuilding_MinNumberWarmupDays (const SimBuilding_MinNumberWarmupDays_optional& x);

        // RoofIrrigation_IrrigationModelType
        //
        typedef ::xml_schema::string RoofIrrigation_IrrigationModelType_type;
        typedef ::xsd::cxx::tree::optional< RoofIrrigation_IrrigationModelType_type > RoofIrrigation_IrrigationModelType_optional;
        typedef ::xsd::cxx::tree::traits< RoofIrrigation_IrrigationModelType_type, char > RoofIrrigation_IrrigationModelType_traits;

        const RoofIrrigation_IrrigationModelType_optional&
        RoofIrrigation_IrrigationModelType () const;

        RoofIrrigation_IrrigationModelType_optional&
        RoofIrrigation_IrrigationModelType ();

        void
        RoofIrrigation_IrrigationModelType (const RoofIrrigation_IrrigationModelType_type& x);

        void
        RoofIrrigation_IrrigationModelType (const RoofIrrigation_IrrigationModelType_optional& x);

        void
        RoofIrrigation_IrrigationModelType (::std::auto_ptr< RoofIrrigation_IrrigationModelType_type > p);

        // RoofIrrigation_IrrigationRateSchedName
        //
        typedef ::xml_schema::idref RoofIrrigation_IrrigationRateSchedName_type;
        typedef ::xsd::cxx::tree::optional< RoofIrrigation_IrrigationRateSchedName_type > RoofIrrigation_IrrigationRateSchedName_optional;
        typedef ::xsd::cxx::tree::traits< RoofIrrigation_IrrigationRateSchedName_type, char > RoofIrrigation_IrrigationRateSchedName_traits;

        const RoofIrrigation_IrrigationRateSchedName_optional&
        RoofIrrigation_IrrigationRateSchedName () const;

        RoofIrrigation_IrrigationRateSchedName_optional&
        RoofIrrigation_IrrigationRateSchedName ();

        void
        RoofIrrigation_IrrigationRateSchedName (const RoofIrrigation_IrrigationRateSchedName_type& x);

        void
        RoofIrrigation_IrrigationRateSchedName (const RoofIrrigation_IrrigationRateSchedName_optional& x);

        void
        RoofIrrigation_IrrigationRateSchedName (::std::auto_ptr< RoofIrrigation_IrrigationRateSchedName_type > p);

        // RoofIrrigation_IrrigationMaxSaturatThreshold_Double
        //
        typedef ::xml_schema::double_ RoofIrrigation_IrrigationMaxSaturatThreshold_Double_type;
        typedef ::xsd::cxx::tree::optional< RoofIrrigation_IrrigationMaxSaturatThreshold_Double_type > RoofIrrigation_IrrigationMaxSaturatThreshold_Double_optional;
        typedef ::xsd::cxx::tree::traits< RoofIrrigation_IrrigationMaxSaturatThreshold_Double_type, char, ::xsd::cxx::tree::schema_type::double_ > RoofIrrigation_IrrigationMaxSaturatThreshold_Double_traits;

        const RoofIrrigation_IrrigationMaxSaturatThreshold_Double_optional&
        RoofIrrigation_IrrigationMaxSaturatThreshold_Double () const;

        RoofIrrigation_IrrigationMaxSaturatThreshold_Double_optional&
        RoofIrrigation_IrrigationMaxSaturatThreshold_Double ();

        void
        RoofIrrigation_IrrigationMaxSaturatThreshold_Double (const RoofIrrigation_IrrigationMaxSaturatThreshold_Double_type& x);

        void
        RoofIrrigation_IrrigationMaxSaturatThreshold_Double (const RoofIrrigation_IrrigationMaxSaturatThreshold_Double_optional& x);

        // T24CoilCoolingCapacity_Double
        //
        typedef ::xml_schema::double_ T24CoilCoolingCapacity_Double_type;
        typedef ::xsd::cxx::tree::optional< T24CoilCoolingCapacity_Double_type > T24CoilCoolingCapacity_Double_optional;
        typedef ::xsd::cxx::tree::traits< T24CoilCoolingCapacity_Double_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CoilCoolingCapacity_Double_traits;

        const T24CoilCoolingCapacity_Double_optional&
        T24CoilCoolingCapacity_Double () const;

        T24CoilCoolingCapacity_Double_optional&
        T24CoilCoolingCapacity_Double ();

        void
        T24CoilCoolingCapacity_Double (const T24CoilCoolingCapacity_Double_type& x);

        void
        T24CoilCoolingCapacity_Double (const T24CoilCoolingCapacity_Double_optional& x);

        // T24CoilHeatingCapacity_Double
        //
        typedef ::xml_schema::double_ T24CoilHeatingCapacity_Double_type;
        typedef ::xsd::cxx::tree::optional< T24CoilHeatingCapacity_Double_type > T24CoilHeatingCapacity_Double_optional;
        typedef ::xsd::cxx::tree::traits< T24CoilHeatingCapacity_Double_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CoilHeatingCapacity_Double_traits;

        const T24CoilHeatingCapacity_Double_optional&
        T24CoilHeatingCapacity_Double () const;

        T24CoilHeatingCapacity_Double_optional&
        T24CoilHeatingCapacity_Double ();

        void
        T24CoilHeatingCapacity_Double (const T24CoilHeatingCapacity_Double_type& x);

        void
        T24CoilHeatingCapacity_Double (const T24CoilHeatingCapacity_Double_optional& x);

        // T24FunctionClassificationMethod
        //
        typedef ::xml_schema::string T24FunctionClassificationMethod_type;
        typedef ::xsd::cxx::tree::optional< T24FunctionClassificationMethod_type > T24FunctionClassificationMethod_optional;
        typedef ::xsd::cxx::tree::traits< T24FunctionClassificationMethod_type, char > T24FunctionClassificationMethod_traits;

        const T24FunctionClassificationMethod_optional&
        T24FunctionClassificationMethod () const;

        T24FunctionClassificationMethod_optional&
        T24FunctionClassificationMethod ();

        void
        T24FunctionClassificationMethod (const T24FunctionClassificationMethod_type& x);

        void
        T24FunctionClassificationMethod (const T24FunctionClassificationMethod_optional& x);

        void
        T24FunctionClassificationMethod (::std::auto_ptr< T24FunctionClassificationMethod_type > p);

        // T24PlantCoolingCapacity_Double
        //
        typedef ::xml_schema::double_ T24PlantCoolingCapacity_Double_type;
        typedef ::xsd::cxx::tree::optional< T24PlantCoolingCapacity_Double_type > T24PlantCoolingCapacity_Double_optional;
        typedef ::xsd::cxx::tree::traits< T24PlantCoolingCapacity_Double_type, char, ::xsd::cxx::tree::schema_type::double_ > T24PlantCoolingCapacity_Double_traits;

        const T24PlantCoolingCapacity_Double_optional&
        T24PlantCoolingCapacity_Double () const;

        T24PlantCoolingCapacity_Double_optional&
        T24PlantCoolingCapacity_Double ();

        void
        T24PlantCoolingCapacity_Double (const T24PlantCoolingCapacity_Double_type& x);

        void
        T24PlantCoolingCapacity_Double (const T24PlantCoolingCapacity_Double_optional& x);

        // T24PlantHeatingCapacity_Double
        //
        typedef ::xml_schema::double_ T24PlantHeatingCapacity_Double_type;
        typedef ::xsd::cxx::tree::optional< T24PlantHeatingCapacity_Double_type > T24PlantHeatingCapacity_Double_optional;
        typedef ::xsd::cxx::tree::traits< T24PlantHeatingCapacity_Double_type, char, ::xsd::cxx::tree::schema_type::double_ > T24PlantHeatingCapacity_Double_traits;

        const T24PlantHeatingCapacity_Double_optional&
        T24PlantHeatingCapacity_Double () const;

        T24PlantHeatingCapacity_Double_optional&
        T24PlantHeatingCapacity_Double ();

        void
        T24PlantHeatingCapacity_Double (const T24PlantHeatingCapacity_Double_type& x);

        void
        T24PlantHeatingCapacity_Double (const T24PlantHeatingCapacity_Double_optional& x);

        // RelocatablePublicSchoolBuilding
        //
        typedef ::xml_schema::int_ RelocatablePublicSchoolBuilding_type;
        typedef ::xsd::cxx::tree::optional< RelocatablePublicSchoolBuilding_type > RelocatablePublicSchoolBuilding_optional;
        typedef ::xsd::cxx::tree::traits< RelocatablePublicSchoolBuilding_type, char > RelocatablePublicSchoolBuilding_traits;

        const RelocatablePublicSchoolBuilding_optional&
        RelocatablePublicSchoolBuilding () const;

        RelocatablePublicSchoolBuilding_optional&
        RelocatablePublicSchoolBuilding ();

        void
        RelocatablePublicSchoolBuilding (const RelocatablePublicSchoolBuilding_type& x);

        void
        RelocatablePublicSchoolBuilding (const RelocatablePublicSchoolBuilding_optional& x);

        // Constructors.
        //
        SimBuildingType ();

        SimBuildingType (const RefId_type&);

        SimBuildingType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        SimBuildingType (const SimBuildingType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual SimBuildingType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimBuildingType&
        operator= (const SimBuildingType& x);

        virtual 
        ~SimBuildingType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        RepresentationMaps_optional RepresentationMaps_;
        Tag_optional Tag_;
        ContainedBldgStoryTypeDefs_optional ContainedBldgStoryTypeDefs_;
        BuildingOccupancyType_optional BuildingOccupancyType_;
        BuildingEnergyTargetUnits_optional BuildingEnergyTargetUnits_;
        BuildingEnergyTargetValue_optional BuildingEnergyTargetValue_;
        ClassRef_ConstEntByFunction_optional ClassRef_ConstEntByFunction_;
        BuildingConstructionsTemplate_optional BuildingConstructionsTemplate_;
        DaylightControlsDefault_optional DaylightControlsDefault_;
        SkylightControlsDefault_optional SkylightControlsDefault_;
        NatVentilationDefault_optional NatVentilationDefault_;
        BuildingInfiltrationType_optional BuildingInfiltrationType_;
        BuildingInfiltrationValue_optional BuildingInfiltrationValue_;
        SimBuilding_LoadsConvergTolVal_optional SimBuilding_LoadsConvergTolVal_;
        SimBuilding_TempConvergTolVal_Double_optional SimBuilding_TempConvergTolVal_Double_;
        SimBuilding_MaxNumWarmupDays_optional SimBuilding_MaxNumWarmupDays_;
        SimBuilding_MinNumberWarmupDays_optional SimBuilding_MinNumberWarmupDays_;
        RoofIrrigation_IrrigationModelType_optional RoofIrrigation_IrrigationModelType_;
        RoofIrrigation_IrrigationRateSchedName_optional RoofIrrigation_IrrigationRateSchedName_;
        RoofIrrigation_IrrigationMaxSaturatThreshold_Double_optional RoofIrrigation_IrrigationMaxSaturatThreshold_Double_;
        T24CoilCoolingCapacity_Double_optional T24CoilCoolingCapacity_Double_;
        T24CoilHeatingCapacity_Double_optional T24CoilHeatingCapacity_Double_;
        T24FunctionClassificationMethod_optional T24FunctionClassificationMethod_;
        T24PlantCoolingCapacity_Double_optional T24PlantCoolingCapacity_Double_;
        T24PlantHeatingCapacity_Double_optional T24PlantHeatingCapacity_Double_;
        RelocatablePublicSchoolBuilding_optional RelocatablePublicSchoolBuilding_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_BUILDING_TYPE_HXX
