// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_PIPING_SYSTEM_HXX
#define SIM_FLOW_ENERGY_TRANSFER_PIPING_SYSTEM_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_PipingSystem;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_PipingSystem: public ::schema::simxml::MepModel::SimFlowEnergyTransfer
      {
        public:
        // SimFlowEnergyTrans_Name
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Name_type > SimFlowEnergyTrans_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Name_type, char > SimFlowEnergyTrans_Name_traits;

        const SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name () const;

        SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name ();

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x);

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x);

        void
        SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > p);

        // SimFlowEnergyTrans_SoilThermalCond
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_SoilThermalCond_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SoilThermalCond_type > SimFlowEnergyTrans_SoilThermalCond_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SoilThermalCond_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_SoilThermalCond_traits;

        const SimFlowEnergyTrans_SoilThermalCond_optional&
        SimFlowEnergyTrans_SoilThermalCond () const;

        SimFlowEnergyTrans_SoilThermalCond_optional&
        SimFlowEnergyTrans_SoilThermalCond ();

        void
        SimFlowEnergyTrans_SoilThermalCond (const SimFlowEnergyTrans_SoilThermalCond_type& x);

        void
        SimFlowEnergyTrans_SoilThermalCond (const SimFlowEnergyTrans_SoilThermalCond_optional& x);

        // SimFlowEnergyTrans_SoilDens
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_SoilDens_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SoilDens_type > SimFlowEnergyTrans_SoilDens_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SoilDens_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_SoilDens_traits;

        const SimFlowEnergyTrans_SoilDens_optional&
        SimFlowEnergyTrans_SoilDens () const;

        SimFlowEnergyTrans_SoilDens_optional&
        SimFlowEnergyTrans_SoilDens ();

        void
        SimFlowEnergyTrans_SoilDens (const SimFlowEnergyTrans_SoilDens_type& x);

        void
        SimFlowEnergyTrans_SoilDens (const SimFlowEnergyTrans_SoilDens_optional& x);

        // SimFlowEnergyTrans_SoilSpecificHeat
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_SoilSpecificHeat_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SoilSpecificHeat_type > SimFlowEnergyTrans_SoilSpecificHeat_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SoilSpecificHeat_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_SoilSpecificHeat_traits;

        const SimFlowEnergyTrans_SoilSpecificHeat_optional&
        SimFlowEnergyTrans_SoilSpecificHeat () const;

        SimFlowEnergyTrans_SoilSpecificHeat_optional&
        SimFlowEnergyTrans_SoilSpecificHeat ();

        void
        SimFlowEnergyTrans_SoilSpecificHeat (const SimFlowEnergyTrans_SoilSpecificHeat_type& x);

        void
        SimFlowEnergyTrans_SoilSpecificHeat (const SimFlowEnergyTrans_SoilSpecificHeat_optional& x);

        // SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_type > SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_traits;

        const SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_optional&
        SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp () const;

        SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_optional&
        SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp ();

        void
        SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp (const SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_type& x);

        void
        SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp (const SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_optional& x);

        // SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_type > SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_traits;

        const SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_optional&
        SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp () const;

        SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_optional&
        SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp ();

        void
        SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp (const SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_type& x);

        void
        SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp (const SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_optional& x);

        // SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_type > SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_traits;

        const SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_optional&
        SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp () const;

        SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_optional&
        SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp ();

        void
        SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp (const SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_type& x);

        void
        SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp (const SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_optional& x);

        // SimFlowEnergyTrans_EvapotranspirationGroundCoverParam
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_type > SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_traits;

        const SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_optional&
        SimFlowEnergyTrans_EvapotranspirationGroundCoverParam () const;

        SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_optional&
        SimFlowEnergyTrans_EvapotranspirationGroundCoverParam ();

        void
        SimFlowEnergyTrans_EvapotranspirationGroundCoverParam (const SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_type& x);

        void
        SimFlowEnergyTrans_EvapotranspirationGroundCoverParam (const SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_optional& x);

        // SimFlowEnergyTrans_Xmax
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Xmax_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Xmax_type > SimFlowEnergyTrans_Xmax_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Xmax_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Xmax_traits;

        const SimFlowEnergyTrans_Xmax_optional&
        SimFlowEnergyTrans_Xmax () const;

        SimFlowEnergyTrans_Xmax_optional&
        SimFlowEnergyTrans_Xmax ();

        void
        SimFlowEnergyTrans_Xmax (const SimFlowEnergyTrans_Xmax_type& x);

        void
        SimFlowEnergyTrans_Xmax (const SimFlowEnergyTrans_Xmax_optional& x);

        // SimFlowEnergyTrans_Ymax
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Ymax_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Ymax_type > SimFlowEnergyTrans_Ymax_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Ymax_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Ymax_traits;

        const SimFlowEnergyTrans_Ymax_optional&
        SimFlowEnergyTrans_Ymax () const;

        SimFlowEnergyTrans_Ymax_optional&
        SimFlowEnergyTrans_Ymax ();

        void
        SimFlowEnergyTrans_Ymax (const SimFlowEnergyTrans_Ymax_type& x);

        void
        SimFlowEnergyTrans_Ymax (const SimFlowEnergyTrans_Ymax_optional& x);

        // SimFlowEnergyTrans_Zmax
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Zmax_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Zmax_type > SimFlowEnergyTrans_Zmax_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Zmax_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Zmax_traits;

        const SimFlowEnergyTrans_Zmax_optional&
        SimFlowEnergyTrans_Zmax () const;

        SimFlowEnergyTrans_Zmax_optional&
        SimFlowEnergyTrans_Zmax ();

        void
        SimFlowEnergyTrans_Zmax (const SimFlowEnergyTrans_Zmax_type& x);

        void
        SimFlowEnergyTrans_Zmax (const SimFlowEnergyTrans_Zmax_optional& x);

        // SimFlowEnergyTrans_X_DirMeshDensityParam
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_X_DirMeshDensityParam_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_X_DirMeshDensityParam_type > SimFlowEnergyTrans_X_DirMeshDensityParam_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_X_DirMeshDensityParam_type, char > SimFlowEnergyTrans_X_DirMeshDensityParam_traits;

        const SimFlowEnergyTrans_X_DirMeshDensityParam_optional&
        SimFlowEnergyTrans_X_DirMeshDensityParam () const;

        SimFlowEnergyTrans_X_DirMeshDensityParam_optional&
        SimFlowEnergyTrans_X_DirMeshDensityParam ();

        void
        SimFlowEnergyTrans_X_DirMeshDensityParam (const SimFlowEnergyTrans_X_DirMeshDensityParam_type& x);

        void
        SimFlowEnergyTrans_X_DirMeshDensityParam (const SimFlowEnergyTrans_X_DirMeshDensityParam_optional& x);

        // SimFlowEnergyTrans_X_DirMeshType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_X_DirMeshType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_X_DirMeshType_type > SimFlowEnergyTrans_X_DirMeshType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_X_DirMeshType_type, char > SimFlowEnergyTrans_X_DirMeshType_traits;

        const SimFlowEnergyTrans_X_DirMeshType_optional&
        SimFlowEnergyTrans_X_DirMeshType () const;

        SimFlowEnergyTrans_X_DirMeshType_optional&
        SimFlowEnergyTrans_X_DirMeshType ();

        void
        SimFlowEnergyTrans_X_DirMeshType (const SimFlowEnergyTrans_X_DirMeshType_type& x);

        void
        SimFlowEnergyTrans_X_DirMeshType (const SimFlowEnergyTrans_X_DirMeshType_optional& x);

        void
        SimFlowEnergyTrans_X_DirMeshType (::std::auto_ptr< SimFlowEnergyTrans_X_DirMeshType_type > p);

        // SimFlowEnergyTrans_X_DirGeometricCoeff
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_X_DirGeometricCoeff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_X_DirGeometricCoeff_type > SimFlowEnergyTrans_X_DirGeometricCoeff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_X_DirGeometricCoeff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_X_DirGeometricCoeff_traits;

        const SimFlowEnergyTrans_X_DirGeometricCoeff_optional&
        SimFlowEnergyTrans_X_DirGeometricCoeff () const;

        SimFlowEnergyTrans_X_DirGeometricCoeff_optional&
        SimFlowEnergyTrans_X_DirGeometricCoeff ();

        void
        SimFlowEnergyTrans_X_DirGeometricCoeff (const SimFlowEnergyTrans_X_DirGeometricCoeff_type& x);

        void
        SimFlowEnergyTrans_X_DirGeometricCoeff (const SimFlowEnergyTrans_X_DirGeometricCoeff_optional& x);

        // SimFlowEnergyTrans_Y_DirMeshDensityParam
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_Y_DirMeshDensityParam_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Y_DirMeshDensityParam_type > SimFlowEnergyTrans_Y_DirMeshDensityParam_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Y_DirMeshDensityParam_type, char > SimFlowEnergyTrans_Y_DirMeshDensityParam_traits;

        const SimFlowEnergyTrans_Y_DirMeshDensityParam_optional&
        SimFlowEnergyTrans_Y_DirMeshDensityParam () const;

        SimFlowEnergyTrans_Y_DirMeshDensityParam_optional&
        SimFlowEnergyTrans_Y_DirMeshDensityParam ();

        void
        SimFlowEnergyTrans_Y_DirMeshDensityParam (const SimFlowEnergyTrans_Y_DirMeshDensityParam_type& x);

        void
        SimFlowEnergyTrans_Y_DirMeshDensityParam (const SimFlowEnergyTrans_Y_DirMeshDensityParam_optional& x);

        // SimFlowEnergyTrans_Y_DirMeshType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Y_DirMeshType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Y_DirMeshType_type > SimFlowEnergyTrans_Y_DirMeshType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Y_DirMeshType_type, char > SimFlowEnergyTrans_Y_DirMeshType_traits;

        const SimFlowEnergyTrans_Y_DirMeshType_optional&
        SimFlowEnergyTrans_Y_DirMeshType () const;

        SimFlowEnergyTrans_Y_DirMeshType_optional&
        SimFlowEnergyTrans_Y_DirMeshType ();

        void
        SimFlowEnergyTrans_Y_DirMeshType (const SimFlowEnergyTrans_Y_DirMeshType_type& x);

        void
        SimFlowEnergyTrans_Y_DirMeshType (const SimFlowEnergyTrans_Y_DirMeshType_optional& x);

        void
        SimFlowEnergyTrans_Y_DirMeshType (::std::auto_ptr< SimFlowEnergyTrans_Y_DirMeshType_type > p);

        // SimFlowEnergyTrans_Y_DirGeometricCoeff
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Y_DirGeometricCoeff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Y_DirGeometricCoeff_type > SimFlowEnergyTrans_Y_DirGeometricCoeff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Y_DirGeometricCoeff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Y_DirGeometricCoeff_traits;

        const SimFlowEnergyTrans_Y_DirGeometricCoeff_optional&
        SimFlowEnergyTrans_Y_DirGeometricCoeff () const;

        SimFlowEnergyTrans_Y_DirGeometricCoeff_optional&
        SimFlowEnergyTrans_Y_DirGeometricCoeff ();

        void
        SimFlowEnergyTrans_Y_DirGeometricCoeff (const SimFlowEnergyTrans_Y_DirGeometricCoeff_type& x);

        void
        SimFlowEnergyTrans_Y_DirGeometricCoeff (const SimFlowEnergyTrans_Y_DirGeometricCoeff_optional& x);

        // SimFlowEnergyTrans_Z_DirMeshDensityParam
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_Z_DirMeshDensityParam_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Z_DirMeshDensityParam_type > SimFlowEnergyTrans_Z_DirMeshDensityParam_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Z_DirMeshDensityParam_type, char > SimFlowEnergyTrans_Z_DirMeshDensityParam_traits;

        const SimFlowEnergyTrans_Z_DirMeshDensityParam_optional&
        SimFlowEnergyTrans_Z_DirMeshDensityParam () const;

        SimFlowEnergyTrans_Z_DirMeshDensityParam_optional&
        SimFlowEnergyTrans_Z_DirMeshDensityParam ();

        void
        SimFlowEnergyTrans_Z_DirMeshDensityParam (const SimFlowEnergyTrans_Z_DirMeshDensityParam_type& x);

        void
        SimFlowEnergyTrans_Z_DirMeshDensityParam (const SimFlowEnergyTrans_Z_DirMeshDensityParam_optional& x);

        // SimFlowEnergyTrans_Z_DirMeshType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Z_DirMeshType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Z_DirMeshType_type > SimFlowEnergyTrans_Z_DirMeshType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Z_DirMeshType_type, char > SimFlowEnergyTrans_Z_DirMeshType_traits;

        const SimFlowEnergyTrans_Z_DirMeshType_optional&
        SimFlowEnergyTrans_Z_DirMeshType () const;

        SimFlowEnergyTrans_Z_DirMeshType_optional&
        SimFlowEnergyTrans_Z_DirMeshType ();

        void
        SimFlowEnergyTrans_Z_DirMeshType (const SimFlowEnergyTrans_Z_DirMeshType_type& x);

        void
        SimFlowEnergyTrans_Z_DirMeshType (const SimFlowEnergyTrans_Z_DirMeshType_optional& x);

        void
        SimFlowEnergyTrans_Z_DirMeshType (::std::auto_ptr< SimFlowEnergyTrans_Z_DirMeshType_type > p);

        // SimFlowEnergyTrans_Z_DirGeometricCoeff
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_Z_DirGeometricCoeff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Z_DirGeometricCoeff_type > SimFlowEnergyTrans_Z_DirGeometricCoeff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Z_DirGeometricCoeff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_Z_DirGeometricCoeff_traits;

        const SimFlowEnergyTrans_Z_DirGeometricCoeff_optional&
        SimFlowEnergyTrans_Z_DirGeometricCoeff () const;

        SimFlowEnergyTrans_Z_DirGeometricCoeff_optional&
        SimFlowEnergyTrans_Z_DirGeometricCoeff ();

        void
        SimFlowEnergyTrans_Z_DirGeometricCoeff (const SimFlowEnergyTrans_Z_DirGeometricCoeff_type& x);

        void
        SimFlowEnergyTrans_Z_DirGeometricCoeff (const SimFlowEnergyTrans_Z_DirGeometricCoeff_optional& x);

        // SimFlowEnergyTrans_SoilMoistureContentVolFrac
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_SoilMoistureContentVolFrac_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SoilMoistureContentVolFrac_type > SimFlowEnergyTrans_SoilMoistureContentVolFrac_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SoilMoistureContentVolFrac_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_SoilMoistureContentVolFrac_traits;

        const SimFlowEnergyTrans_SoilMoistureContentVolFrac_optional&
        SimFlowEnergyTrans_SoilMoistureContentVolFrac () const;

        SimFlowEnergyTrans_SoilMoistureContentVolFrac_optional&
        SimFlowEnergyTrans_SoilMoistureContentVolFrac ();

        void
        SimFlowEnergyTrans_SoilMoistureContentVolFrac (const SimFlowEnergyTrans_SoilMoistureContentVolFrac_type& x);

        void
        SimFlowEnergyTrans_SoilMoistureContentVolFrac (const SimFlowEnergyTrans_SoilMoistureContentVolFrac_optional& x);

        // SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_type > SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_traits;

        const SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_optional&
        SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation () const;

        SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_optional&
        SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation ();

        void
        SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation (const SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_type& x);

        void
        SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation (const SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_optional& x);

        // SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_type > SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_type, char > SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_traits;

        const SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_optional&
        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction () const;

        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_optional&
        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction ();

        void
        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction (const SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_type& x);

        void
        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction (const SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_optional& x);

        void
        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction (::std::auto_ptr< SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_type > p);

        // SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_type > SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_traits;

        const SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_optional&
        SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain () const;

        SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_optional&
        SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain ();

        void
        SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain (const SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_type& x);

        void
        SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain (const SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_optional& x);

        // SimFlowEnergyTrans_DepthBsmtWallInGroundDomain
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_type > SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_traits;

        const SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_optional&
        SimFlowEnergyTrans_DepthBsmtWallInGroundDomain () const;

        SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_optional&
        SimFlowEnergyTrans_DepthBsmtWallInGroundDomain ();

        void
        SimFlowEnergyTrans_DepthBsmtWallInGroundDomain (const SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_type& x);

        void
        SimFlowEnergyTrans_DepthBsmtWallInGroundDomain (const SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_optional& x);

        // SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_type > SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_type, char > SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_traits;

        const SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_optional&
        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth () const;

        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_optional&
        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth ();

        void
        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth (const SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_type& x);

        void
        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth (const SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_optional& x);

        void
        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth (::std::auto_ptr< SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_type > p);

        // SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_type > SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_type, char > SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_traits;

        const SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_optional&
        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel () const;

        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_optional&
        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel ();

        void
        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel (const SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_type& x);

        void
        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel (const SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_optional& x);

        void
        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel (::std::auto_ptr< SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_type > p);

        // SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_type > SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_type, char > SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_traits;

        const SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_optional&
        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel () const;

        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_optional&
        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel ();

        void
        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel (const SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_type& x);

        void
        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel (const SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_optional& x);

        void
        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel (::std::auto_ptr< SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_type > p);

        // SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_type > SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_traits;

        const SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_optional&
        SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop () const;

        SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_optional&
        SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop ();

        void
        SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop (const SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_type& x);

        void
        SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop (const SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_optional& x);

        // SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_type > SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_type, char > SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_traits;

        const SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_optional&
        SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop () const;

        SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_optional&
        SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop ();

        void
        SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop (const SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_type& x);

        void
        SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop (const SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_optional& x);

        // SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_type > SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_type, char > SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_traits;

        const SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_optional&
        SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain () const;

        SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_optional&
        SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain ();

        void
        SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain (const SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_type& x);

        void
        SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain (const SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_optional& x);

        // SimFlowEnergyTrans_PipeCircuit_1_6
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_PipeCircuit_1_6_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_PipeCircuit_1_6_type > SimFlowEnergyTrans_PipeCircuit_1_6_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_PipeCircuit_1_6_type, char > SimFlowEnergyTrans_PipeCircuit_1_6_traits;

        const SimFlowEnergyTrans_PipeCircuit_1_6_optional&
        SimFlowEnergyTrans_PipeCircuit_1_6 () const;

        SimFlowEnergyTrans_PipeCircuit_1_6_optional&
        SimFlowEnergyTrans_PipeCircuit_1_6 ();

        void
        SimFlowEnergyTrans_PipeCircuit_1_6 (const SimFlowEnergyTrans_PipeCircuit_1_6_type& x);

        void
        SimFlowEnergyTrans_PipeCircuit_1_6 (const SimFlowEnergyTrans_PipeCircuit_1_6_optional& x);

        void
        SimFlowEnergyTrans_PipeCircuit_1_6 (::std::auto_ptr< SimFlowEnergyTrans_PipeCircuit_1_6_type > p);

        // Constructors.
        //
        SimFlowEnergyTransfer_PipingSystem ();

        SimFlowEnergyTransfer_PipingSystem (const RefId_type&);

        SimFlowEnergyTransfer_PipingSystem (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_PipingSystem (const SimFlowEnergyTransfer_PipingSystem& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_PipingSystem*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_PipingSystem&
        operator= (const SimFlowEnergyTransfer_PipingSystem& x);

        virtual 
        ~SimFlowEnergyTransfer_PipingSystem ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_Name_optional SimFlowEnergyTrans_Name_;
        SimFlowEnergyTrans_SoilThermalCond_optional SimFlowEnergyTrans_SoilThermalCond_;
        SimFlowEnergyTrans_SoilDens_optional SimFlowEnergyTrans_SoilDens_;
        SimFlowEnergyTrans_SoilSpecificHeat_optional SimFlowEnergyTrans_SoilSpecificHeat_;
        SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_optional SimFlowEnergyTrans_Kusuda_AchenbachAverageSurfaceTemp_;
        SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_optional SimFlowEnergyTrans_Kusuda_AchenbachAverageAmplitudeSurfaceTemp_;
        SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_optional SimFlowEnergyTrans_Kusuda_AchenbachPhaseShiftMinSurfaceTemp_;
        SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_optional SimFlowEnergyTrans_EvapotranspirationGroundCoverParam_;
        SimFlowEnergyTrans_Xmax_optional SimFlowEnergyTrans_Xmax_;
        SimFlowEnergyTrans_Ymax_optional SimFlowEnergyTrans_Ymax_;
        SimFlowEnergyTrans_Zmax_optional SimFlowEnergyTrans_Zmax_;
        SimFlowEnergyTrans_X_DirMeshDensityParam_optional SimFlowEnergyTrans_X_DirMeshDensityParam_;
        SimFlowEnergyTrans_X_DirMeshType_optional SimFlowEnergyTrans_X_DirMeshType_;
        SimFlowEnergyTrans_X_DirGeometricCoeff_optional SimFlowEnergyTrans_X_DirGeometricCoeff_;
        SimFlowEnergyTrans_Y_DirMeshDensityParam_optional SimFlowEnergyTrans_Y_DirMeshDensityParam_;
        SimFlowEnergyTrans_Y_DirMeshType_optional SimFlowEnergyTrans_Y_DirMeshType_;
        SimFlowEnergyTrans_Y_DirGeometricCoeff_optional SimFlowEnergyTrans_Y_DirGeometricCoeff_;
        SimFlowEnergyTrans_Z_DirMeshDensityParam_optional SimFlowEnergyTrans_Z_DirMeshDensityParam_;
        SimFlowEnergyTrans_Z_DirMeshType_optional SimFlowEnergyTrans_Z_DirMeshType_;
        SimFlowEnergyTrans_Z_DirGeometricCoeff_optional SimFlowEnergyTrans_Z_DirGeometricCoeff_;
        SimFlowEnergyTrans_SoilMoistureContentVolFrac_optional SimFlowEnergyTrans_SoilMoistureContentVolFrac_;
        SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_optional SimFlowEnergyTrans_SoilMoistureContentVolFracSaturation_;
        SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_optional SimFlowEnergyTrans_DomainIncludesBsmtSurfaceInteraction_;
        SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_optional SimFlowEnergyTrans_WidthBsmtFloorinGroundDomain_;
        SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_optional SimFlowEnergyTrans_DepthBsmtWallInGroundDomain_;
        SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_optional SimFlowEnergyTrans_ShiftPipeXCoordbyBsmtWidth_;
        SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_optional SimFlowEnergyTrans_NameBsmtWallBoundaryConditionModel_;
        SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_optional SimFlowEnergyTrans_NameBsmtFloorBoundaryConditionModel_;
        SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_optional SimFlowEnergyTrans_ConvergCritOuterCartesianDomainIterationLoop_;
        SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_optional SimFlowEnergyTrans_MaxIterationsinOuterCartesianDomainIterationLoop_;
        SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_optional SimFlowEnergyTrans_NumberPipeCircsEnteredthisDomain_;
        SimFlowEnergyTrans_PipeCircuit_1_6_optional SimFlowEnergyTrans_PipeCircuit_1_6_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_PIPING_SYSTEM_HXX
