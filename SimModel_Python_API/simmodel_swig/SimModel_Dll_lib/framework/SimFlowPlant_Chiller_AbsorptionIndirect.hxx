// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_CHILLER_ABSORPTION_INDIRECT_HXX
#define SIM_FLOW_PLANT_CHILLER_ABSORPTION_INDIRECT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_Chiller_AbsorptionIndirect;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_chiller.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_Chiller_AbsorptionIndirect: public ::schema::simxml::MepModel::SimFlowPlant_Chiller
      {
        public:
        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_NomCap
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomCap_type > SimFlowPlant_NomCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomCap_traits;

        const SimFlowPlant_NomCap_optional&
        SimFlowPlant_NomCap () const;

        SimFlowPlant_NomCap_optional&
        SimFlowPlant_NomCap ();

        void
        SimFlowPlant_NomCap (const SimFlowPlant_NomCap_type& x);

        void
        SimFlowPlant_NomCap (const SimFlowPlant_NomCap_optional& x);

        // SimFlowPlant_MinPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_MinPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MinPartLoadRatio_type > SimFlowPlant_MinPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MinPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MinPartLoadRatio_traits;

        const SimFlowPlant_MinPartLoadRatio_optional&
        SimFlowPlant_MinPartLoadRatio () const;

        SimFlowPlant_MinPartLoadRatio_optional&
        SimFlowPlant_MinPartLoadRatio ();

        void
        SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x);

        void
        SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x);

        // SimFlowPlant_MaxPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxPartLoadRatio_type > SimFlowPlant_MaxPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxPartLoadRatio_traits;

        const SimFlowPlant_MaxPartLoadRatio_optional&
        SimFlowPlant_MaxPartLoadRatio () const;

        SimFlowPlant_MaxPartLoadRatio_optional&
        SimFlowPlant_MaxPartLoadRatio ();

        void
        SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x);

        void
        SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x);

        // SimFlowPlant_OptimumPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_OptimumPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_OptimumPartLoadRatio_type > SimFlowPlant_OptimumPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_OptimumPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_OptimumPartLoadRatio_traits;

        const SimFlowPlant_OptimumPartLoadRatio_optional&
        SimFlowPlant_OptimumPartLoadRatio () const;

        SimFlowPlant_OptimumPartLoadRatio_optional&
        SimFlowPlant_OptimumPartLoadRatio ();

        void
        SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x);

        void
        SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x);

        // SimFlowPlant_SizingFactor
        //
        typedef ::xml_schema::double_ SimFlowPlant_SizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SizingFactor_type > SimFlowPlant_SizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_SizingFactor_traits;

        const SimFlowPlant_SizingFactor_optional&
        SimFlowPlant_SizingFactor () const;

        SimFlowPlant_SizingFactor_optional&
        SimFlowPlant_SizingFactor ();

        void
        SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x);

        void
        SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x);

        // SimFlowPlant_ChilledWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_ChilledWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ChilledWaterInletNodeName_type > SimFlowPlant_ChilledWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ChilledWaterInletNodeName_type, char > SimFlowPlant_ChilledWaterInletNodeName_traits;

        const SimFlowPlant_ChilledWaterInletNodeName_optional&
        SimFlowPlant_ChilledWaterInletNodeName () const;

        SimFlowPlant_ChilledWaterInletNodeName_optional&
        SimFlowPlant_ChilledWaterInletNodeName ();

        void
        SimFlowPlant_ChilledWaterInletNodeName (const SimFlowPlant_ChilledWaterInletNodeName_type& x);

        void
        SimFlowPlant_ChilledWaterInletNodeName (const SimFlowPlant_ChilledWaterInletNodeName_optional& x);

        void
        SimFlowPlant_ChilledWaterInletNodeName (::std::auto_ptr< SimFlowPlant_ChilledWaterInletNodeName_type > p);

        // SimFlowPlant_ChilledWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_ChilledWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ChilledWaterOutletNodeName_type > SimFlowPlant_ChilledWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ChilledWaterOutletNodeName_type, char > SimFlowPlant_ChilledWaterOutletNodeName_traits;

        const SimFlowPlant_ChilledWaterOutletNodeName_optional&
        SimFlowPlant_ChilledWaterOutletNodeName () const;

        SimFlowPlant_ChilledWaterOutletNodeName_optional&
        SimFlowPlant_ChilledWaterOutletNodeName ();

        void
        SimFlowPlant_ChilledWaterOutletNodeName (const SimFlowPlant_ChilledWaterOutletNodeName_type& x);

        void
        SimFlowPlant_ChilledWaterOutletNodeName (const SimFlowPlant_ChilledWaterOutletNodeName_optional& x);

        void
        SimFlowPlant_ChilledWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_ChilledWaterOutletNodeName_type > p);

        // SimFlowPlant_CondInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_CondInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CondInletNodeName_type > SimFlowPlant_CondInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CondInletNodeName_type, char > SimFlowPlant_CondInletNodeName_traits;

        const SimFlowPlant_CondInletNodeName_optional&
        SimFlowPlant_CondInletNodeName () const;

        SimFlowPlant_CondInletNodeName_optional&
        SimFlowPlant_CondInletNodeName ();

        void
        SimFlowPlant_CondInletNodeName (const SimFlowPlant_CondInletNodeName_type& x);

        void
        SimFlowPlant_CondInletNodeName (const SimFlowPlant_CondInletNodeName_optional& x);

        void
        SimFlowPlant_CondInletNodeName (::std::auto_ptr< SimFlowPlant_CondInletNodeName_type > p);

        // SimFlowPlant_CondOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_CondOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CondOutletNodeName_type > SimFlowPlant_CondOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CondOutletNodeName_type, char > SimFlowPlant_CondOutletNodeName_traits;

        const SimFlowPlant_CondOutletNodeName_optional&
        SimFlowPlant_CondOutletNodeName () const;

        SimFlowPlant_CondOutletNodeName_optional&
        SimFlowPlant_CondOutletNodeName ();

        void
        SimFlowPlant_CondOutletNodeName (const SimFlowPlant_CondOutletNodeName_type& x);

        void
        SimFlowPlant_CondOutletNodeName (const SimFlowPlant_CondOutletNodeName_optional& x);

        void
        SimFlowPlant_CondOutletNodeName (::std::auto_ptr< SimFlowPlant_CondOutletNodeName_type > p);

        // SimFlowPlant_ChillerFlowMode
        //
        typedef ::xml_schema::string SimFlowPlant_ChillerFlowMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ChillerFlowMode_type > SimFlowPlant_ChillerFlowMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ChillerFlowMode_type, char > SimFlowPlant_ChillerFlowMode_traits;

        const SimFlowPlant_ChillerFlowMode_optional&
        SimFlowPlant_ChillerFlowMode () const;

        SimFlowPlant_ChillerFlowMode_optional&
        SimFlowPlant_ChillerFlowMode ();

        void
        SimFlowPlant_ChillerFlowMode (const SimFlowPlant_ChillerFlowMode_type& x);

        void
        SimFlowPlant_ChillerFlowMode (const SimFlowPlant_ChillerFlowMode_optional& x);

        void
        SimFlowPlant_ChillerFlowMode (::std::auto_ptr< SimFlowPlant_ChillerFlowMode_type > p);

        // SimFlowPlant_DesignCondInletTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignCondInletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignCondInletTemp_type > SimFlowPlant_DesignCondInletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignCondInletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignCondInletTemp_traits;

        const SimFlowPlant_DesignCondInletTemp_optional&
        SimFlowPlant_DesignCondInletTemp () const;

        SimFlowPlant_DesignCondInletTemp_optional&
        SimFlowPlant_DesignCondInletTemp ();

        void
        SimFlowPlant_DesignCondInletTemp (const SimFlowPlant_DesignCondInletTemp_type& x);

        void
        SimFlowPlant_DesignCondInletTemp (const SimFlowPlant_DesignCondInletTemp_optional& x);

        // SimFlowPlant_DesignChilledWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignChilledWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignChilledWaterFlowRate_type > SimFlowPlant_DesignChilledWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignChilledWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignChilledWaterFlowRate_traits;

        const SimFlowPlant_DesignChilledWaterFlowRate_optional&
        SimFlowPlant_DesignChilledWaterFlowRate () const;

        SimFlowPlant_DesignChilledWaterFlowRate_optional&
        SimFlowPlant_DesignChilledWaterFlowRate ();

        void
        SimFlowPlant_DesignChilledWaterFlowRate (const SimFlowPlant_DesignChilledWaterFlowRate_type& x);

        void
        SimFlowPlant_DesignChilledWaterFlowRate (const SimFlowPlant_DesignChilledWaterFlowRate_optional& x);

        // SimFlowPlant_ChilledWaterOutletTempLowLimit
        //
        typedef ::xml_schema::double_ SimFlowPlant_ChilledWaterOutletTempLowLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ChilledWaterOutletTempLowLimit_type > SimFlowPlant_ChilledWaterOutletTempLowLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ChilledWaterOutletTempLowLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_ChilledWaterOutletTempLowLimit_traits;

        const SimFlowPlant_ChilledWaterOutletTempLowLimit_optional&
        SimFlowPlant_ChilledWaterOutletTempLowLimit () const;

        SimFlowPlant_ChilledWaterOutletTempLowLimit_optional&
        SimFlowPlant_ChilledWaterOutletTempLowLimit ();

        void
        SimFlowPlant_ChilledWaterOutletTempLowLimit (const SimFlowPlant_ChilledWaterOutletTempLowLimit_type& x);

        void
        SimFlowPlant_ChilledWaterOutletTempLowLimit (const SimFlowPlant_ChilledWaterOutletTempLowLimit_optional& x);

        // SimFlowPlant_DesignCondWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignCondWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignCondWaterFlowRate_type > SimFlowPlant_DesignCondWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignCondWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignCondWaterFlowRate_traits;

        const SimFlowPlant_DesignCondWaterFlowRate_optional&
        SimFlowPlant_DesignCondWaterFlowRate () const;

        SimFlowPlant_DesignCondWaterFlowRate_optional&
        SimFlowPlant_DesignCondWaterFlowRate ();

        void
        SimFlowPlant_DesignCondWaterFlowRate (const SimFlowPlant_DesignCondWaterFlowRate_type& x);

        void
        SimFlowPlant_DesignCondWaterFlowRate (const SimFlowPlant_DesignCondWaterFlowRate_optional& x);

        // SimFlowPlant_NomPumpingPwr
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomPumpingPwr_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomPumpingPwr_type > SimFlowPlant_NomPumpingPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomPumpingPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomPumpingPwr_traits;

        const SimFlowPlant_NomPumpingPwr_optional&
        SimFlowPlant_NomPumpingPwr () const;

        SimFlowPlant_NomPumpingPwr_optional&
        SimFlowPlant_NomPumpingPwr ();

        void
        SimFlowPlant_NomPumpingPwr (const SimFlowPlant_NomPumpingPwr_type& x);

        void
        SimFlowPlant_NomPumpingPwr (const SimFlowPlant_NomPumpingPwr_optional& x);

        // SimFlowPlant_CondInletTempLowLimit
        //
        typedef ::xml_schema::double_ SimFlowPlant_CondInletTempLowLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CondInletTempLowLimit_type > SimFlowPlant_CondInletTempLowLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CondInletTempLowLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_CondInletTempLowLimit_traits;

        const SimFlowPlant_CondInletTempLowLimit_optional&
        SimFlowPlant_CondInletTempLowLimit () const;

        SimFlowPlant_CondInletTempLowLimit_optional&
        SimFlowPlant_CondInletTempLowLimit ();

        void
        SimFlowPlant_CondInletTempLowLimit (const SimFlowPlant_CondInletTempLowLimit_type& x);

        void
        SimFlowPlant_CondInletTempLowLimit (const SimFlowPlant_CondInletTempLowLimit_optional& x);

        // SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_type > SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_type, char > SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_traits;

        const SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName () const;

        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName ();

        void
        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName (const SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName (const SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_type > p);

        // SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_type > SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_type, char > SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_traits;

        const SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName () const;

        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName ();

        void
        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName (const SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName (const SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_type > p);

        // SimFlowPlant_GenInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_GenInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenInletNodeName_type > SimFlowPlant_GenInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenInletNodeName_type, char > SimFlowPlant_GenInletNodeName_traits;

        const SimFlowPlant_GenInletNodeName_optional&
        SimFlowPlant_GenInletNodeName () const;

        SimFlowPlant_GenInletNodeName_optional&
        SimFlowPlant_GenInletNodeName ();

        void
        SimFlowPlant_GenInletNodeName (const SimFlowPlant_GenInletNodeName_type& x);

        void
        SimFlowPlant_GenInletNodeName (const SimFlowPlant_GenInletNodeName_optional& x);

        void
        SimFlowPlant_GenInletNodeName (::std::auto_ptr< SimFlowPlant_GenInletNodeName_type > p);

        // SimFlowPlant_GenOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_GenOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenOutletNodeName_type > SimFlowPlant_GenOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenOutletNodeName_type, char > SimFlowPlant_GenOutletNodeName_traits;

        const SimFlowPlant_GenOutletNodeName_optional&
        SimFlowPlant_GenOutletNodeName () const;

        SimFlowPlant_GenOutletNodeName_optional&
        SimFlowPlant_GenOutletNodeName ();

        void
        SimFlowPlant_GenOutletNodeName (const SimFlowPlant_GenOutletNodeName_type& x);

        void
        SimFlowPlant_GenOutletNodeName (const SimFlowPlant_GenOutletNodeName_optional& x);

        void
        SimFlowPlant_GenOutletNodeName (::std::auto_ptr< SimFlowPlant_GenOutletNodeName_type > p);

        // SimFlowPlant_CapCorrectFuncCondTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_CapCorrectFuncCondTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CapCorrectFuncCondTempCurveName_type > SimFlowPlant_CapCorrectFuncCondTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CapCorrectFuncCondTempCurveName_type, char > SimFlowPlant_CapCorrectFuncCondTempCurveName_traits;

        const SimFlowPlant_CapCorrectFuncCondTempCurveName_optional&
        SimFlowPlant_CapCorrectFuncCondTempCurveName () const;

        SimFlowPlant_CapCorrectFuncCondTempCurveName_optional&
        SimFlowPlant_CapCorrectFuncCondTempCurveName ();

        void
        SimFlowPlant_CapCorrectFuncCondTempCurveName (const SimFlowPlant_CapCorrectFuncCondTempCurveName_type& x);

        void
        SimFlowPlant_CapCorrectFuncCondTempCurveName (const SimFlowPlant_CapCorrectFuncCondTempCurveName_optional& x);

        void
        SimFlowPlant_CapCorrectFuncCondTempCurveName (::std::auto_ptr< SimFlowPlant_CapCorrectFuncCondTempCurveName_type > p);

        // SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_type > SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_type, char > SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_traits;

        const SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_optional&
        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName () const;

        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_optional&
        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName ();

        void
        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName (const SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_type& x);

        void
        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName (const SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_optional& x);

        void
        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName (::std::auto_ptr< SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_type > p);

        // SimFlowPlant_CapCorrectFuncGenTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_CapCorrectFuncGenTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CapCorrectFuncGenTempCurveName_type > SimFlowPlant_CapCorrectFuncGenTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CapCorrectFuncGenTempCurveName_type, char > SimFlowPlant_CapCorrectFuncGenTempCurveName_traits;

        const SimFlowPlant_CapCorrectFuncGenTempCurveName_optional&
        SimFlowPlant_CapCorrectFuncGenTempCurveName () const;

        SimFlowPlant_CapCorrectFuncGenTempCurveName_optional&
        SimFlowPlant_CapCorrectFuncGenTempCurveName ();

        void
        SimFlowPlant_CapCorrectFuncGenTempCurveName (const SimFlowPlant_CapCorrectFuncGenTempCurveName_type& x);

        void
        SimFlowPlant_CapCorrectFuncGenTempCurveName (const SimFlowPlant_CapCorrectFuncGenTempCurveName_optional& x);

        void
        SimFlowPlant_CapCorrectFuncGenTempCurveName (::std::auto_ptr< SimFlowPlant_CapCorrectFuncGenTempCurveName_type > p);

        // SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_type > SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_type, char > SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_traits;

        const SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_optional&
        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName () const;

        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_optional&
        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName ();

        void
        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName (const SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_type& x);

        void
        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName (const SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_optional& x);

        void
        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName (::std::auto_ptr< SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_type > p);

        // SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_type > SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_type, char > SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_traits;

        const SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_optional&
        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName () const;

        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_optional&
        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName ();

        void
        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName (const SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_type& x);

        void
        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName (const SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_optional& x);

        void
        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName (::std::auto_ptr< SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_type > p);

        // SimFlowPlant_GenHeatSrcType
        //
        typedef ::xml_schema::string SimFlowPlant_GenHeatSrcType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenHeatSrcType_type > SimFlowPlant_GenHeatSrcType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenHeatSrcType_type, char > SimFlowPlant_GenHeatSrcType_traits;

        const SimFlowPlant_GenHeatSrcType_optional&
        SimFlowPlant_GenHeatSrcType () const;

        SimFlowPlant_GenHeatSrcType_optional&
        SimFlowPlant_GenHeatSrcType ();

        void
        SimFlowPlant_GenHeatSrcType (const SimFlowPlant_GenHeatSrcType_type& x);

        void
        SimFlowPlant_GenHeatSrcType (const SimFlowPlant_GenHeatSrcType_optional& x);

        void
        SimFlowPlant_GenHeatSrcType (::std::auto_ptr< SimFlowPlant_GenHeatSrcType_type > p);

        // SimFlowPlant_DesignGenFluidFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignGenFluidFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignGenFluidFlowRate_type > SimFlowPlant_DesignGenFluidFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignGenFluidFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignGenFluidFlowRate_traits;

        const SimFlowPlant_DesignGenFluidFlowRate_optional&
        SimFlowPlant_DesignGenFluidFlowRate () const;

        SimFlowPlant_DesignGenFluidFlowRate_optional&
        SimFlowPlant_DesignGenFluidFlowRate ();

        void
        SimFlowPlant_DesignGenFluidFlowRate (const SimFlowPlant_DesignGenFluidFlowRate_type& x);

        void
        SimFlowPlant_DesignGenFluidFlowRate (const SimFlowPlant_DesignGenFluidFlowRate_optional& x);

        // SimFlowPlant_TempLowLimitGenInlet
        //
        typedef ::xml_schema::double_ SimFlowPlant_TempLowLimitGenInlet_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_TempLowLimitGenInlet_type > SimFlowPlant_TempLowLimitGenInlet_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_TempLowLimitGenInlet_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_TempLowLimitGenInlet_traits;

        const SimFlowPlant_TempLowLimitGenInlet_optional&
        SimFlowPlant_TempLowLimitGenInlet () const;

        SimFlowPlant_TempLowLimitGenInlet_optional&
        SimFlowPlant_TempLowLimitGenInlet ();

        void
        SimFlowPlant_TempLowLimitGenInlet (const SimFlowPlant_TempLowLimitGenInlet_type& x);

        void
        SimFlowPlant_TempLowLimitGenInlet (const SimFlowPlant_TempLowLimitGenInlet_optional& x);

        // SimFlowPlant_DegreeSubcoolingSteamGen
        //
        typedef ::xml_schema::double_ SimFlowPlant_DegreeSubcoolingSteamGen_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DegreeSubcoolingSteamGen_type > SimFlowPlant_DegreeSubcoolingSteamGen_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DegreeSubcoolingSteamGen_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DegreeSubcoolingSteamGen_traits;

        const SimFlowPlant_DegreeSubcoolingSteamGen_optional&
        SimFlowPlant_DegreeSubcoolingSteamGen () const;

        SimFlowPlant_DegreeSubcoolingSteamGen_optional&
        SimFlowPlant_DegreeSubcoolingSteamGen ();

        void
        SimFlowPlant_DegreeSubcoolingSteamGen (const SimFlowPlant_DegreeSubcoolingSteamGen_type& x);

        void
        SimFlowPlant_DegreeSubcoolingSteamGen (const SimFlowPlant_DegreeSubcoolingSteamGen_optional& x);

        // SimFlowPlant_DegreeSubcoolingSteamCondsLoop
        //
        typedef ::xml_schema::double_ SimFlowPlant_DegreeSubcoolingSteamCondsLoop_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DegreeSubcoolingSteamCondsLoop_type > SimFlowPlant_DegreeSubcoolingSteamCondsLoop_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DegreeSubcoolingSteamCondsLoop_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DegreeSubcoolingSteamCondsLoop_traits;

        const SimFlowPlant_DegreeSubcoolingSteamCondsLoop_optional&
        SimFlowPlant_DegreeSubcoolingSteamCondsLoop () const;

        SimFlowPlant_DegreeSubcoolingSteamCondsLoop_optional&
        SimFlowPlant_DegreeSubcoolingSteamCondsLoop ();

        void
        SimFlowPlant_DegreeSubcoolingSteamCondsLoop (const SimFlowPlant_DegreeSubcoolingSteamCondsLoop_type& x);

        void
        SimFlowPlant_DegreeSubcoolingSteamCondsLoop (const SimFlowPlant_DegreeSubcoolingSteamCondsLoop_optional& x);

        // Constructors.
        //
        SimFlowPlant_Chiller_AbsorptionIndirect ();

        SimFlowPlant_Chiller_AbsorptionIndirect (const RefId_type&);

        SimFlowPlant_Chiller_AbsorptionIndirect (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        SimFlowPlant_Chiller_AbsorptionIndirect (const SimFlowPlant_Chiller_AbsorptionIndirect& x,
                                                 ::xml_schema::flags f = 0,
                                                 ::xml_schema::container* c = 0);

        virtual SimFlowPlant_Chiller_AbsorptionIndirect*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_Chiller_AbsorptionIndirect&
        operator= (const SimFlowPlant_Chiller_AbsorptionIndirect& x);

        virtual 
        ~SimFlowPlant_Chiller_AbsorptionIndirect ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_NomCap_optional SimFlowPlant_NomCap_;
        SimFlowPlant_MinPartLoadRatio_optional SimFlowPlant_MinPartLoadRatio_;
        SimFlowPlant_MaxPartLoadRatio_optional SimFlowPlant_MaxPartLoadRatio_;
        SimFlowPlant_OptimumPartLoadRatio_optional SimFlowPlant_OptimumPartLoadRatio_;
        SimFlowPlant_SizingFactor_optional SimFlowPlant_SizingFactor_;
        SimFlowPlant_ChilledWaterInletNodeName_optional SimFlowPlant_ChilledWaterInletNodeName_;
        SimFlowPlant_ChilledWaterOutletNodeName_optional SimFlowPlant_ChilledWaterOutletNodeName_;
        SimFlowPlant_CondInletNodeName_optional SimFlowPlant_CondInletNodeName_;
        SimFlowPlant_CondOutletNodeName_optional SimFlowPlant_CondOutletNodeName_;
        SimFlowPlant_ChillerFlowMode_optional SimFlowPlant_ChillerFlowMode_;
        SimFlowPlant_DesignCondInletTemp_optional SimFlowPlant_DesignCondInletTemp_;
        SimFlowPlant_DesignChilledWaterFlowRate_optional SimFlowPlant_DesignChilledWaterFlowRate_;
        SimFlowPlant_ChilledWaterOutletTempLowLimit_optional SimFlowPlant_ChilledWaterOutletTempLowLimit_;
        SimFlowPlant_DesignCondWaterFlowRate_optional SimFlowPlant_DesignCondWaterFlowRate_;
        SimFlowPlant_NomPumpingPwr_optional SimFlowPlant_NomPumpingPwr_;
        SimFlowPlant_CondInletTempLowLimit_optional SimFlowPlant_CondInletTempLowLimit_;
        SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_optional SimFlowPlant_GenHeatInputFuncPartLoadRatioCurveName_;
        SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_optional SimFlowPlant_PumpElecInputFuncPartLoadRatioCurveName_;
        SimFlowPlant_GenInletNodeName_optional SimFlowPlant_GenInletNodeName_;
        SimFlowPlant_GenOutletNodeName_optional SimFlowPlant_GenOutletNodeName_;
        SimFlowPlant_CapCorrectFuncCondTempCurveName_optional SimFlowPlant_CapCorrectFuncCondTempCurveName_;
        SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_optional SimFlowPlant_CapCorrectFuncChilledWaterTempCurveName_;
        SimFlowPlant_CapCorrectFuncGenTempCurveName_optional SimFlowPlant_CapCorrectFuncGenTempCurveName_;
        SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_optional SimFlowPlant_GenHeatInputCorrectFuncCondTempCurveName_;
        SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_optional SimFlowPlant_GenHeatInputCorrectFuncChilledWaterTempCurveName_;
        SimFlowPlant_GenHeatSrcType_optional SimFlowPlant_GenHeatSrcType_;
        SimFlowPlant_DesignGenFluidFlowRate_optional SimFlowPlant_DesignGenFluidFlowRate_;
        SimFlowPlant_TempLowLimitGenInlet_optional SimFlowPlant_TempLowLimitGenInlet_;
        SimFlowPlant_DegreeSubcoolingSteamGen_optional SimFlowPlant_DegreeSubcoolingSteamGen_;
        SimFlowPlant_DegreeSubcoolingSteamCondsLoop_optional SimFlowPlant_DegreeSubcoolingSteamCondsLoop_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_CHILLER_ABSORPTION_INDIRECT_HXX
