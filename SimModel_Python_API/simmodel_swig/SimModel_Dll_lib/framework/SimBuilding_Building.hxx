// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_BUILDING_BUILDING_HXX
#define SIM_BUILDING_BUILDING_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
//#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimBuilding_Building;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simbuilding.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class __declspec(dllexport) SimBuilding_Building: public ::schema::simxml::BuildingModel::SimBuilding
      {
        public:
        // SimBuilding_Name
        //
        typedef ::xml_schema::string SimBuilding_Name_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_Name_type, false > SimBuilding_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_Name_type, char > SimBuilding_Name_traits;

        const SimBuilding_Name_optional&
        SimBuilding_Name () const;

        SimBuilding_Name_optional&
        SimBuilding_Name ();

        void
        SimBuilding_Name (const SimBuilding_Name_type& x);

        void
        SimBuilding_Name (const SimBuilding_Name_optional& x);

        void
        SimBuilding_Name (::std::auto_ptr< SimBuilding_Name_type > p);

        // SimBuilding_NorthAxis
        //
        typedef ::xml_schema::double_ SimBuilding_NorthAxis_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_NorthAxis_type, true > SimBuilding_NorthAxis_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_NorthAxis_type, char, ::xsd::cxx::tree::schema_type::double_ > SimBuilding_NorthAxis_traits;

        const SimBuilding_NorthAxis_optional&
        SimBuilding_NorthAxis () const;

        SimBuilding_NorthAxis_optional&
        SimBuilding_NorthAxis ();

        void
        SimBuilding_NorthAxis (const SimBuilding_NorthAxis_type& x);

        void
        SimBuilding_NorthAxis (const SimBuilding_NorthAxis_optional& x);

        // SimBuilding_Terrain
        //
        typedef ::xml_schema::string SimBuilding_Terrain_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_Terrain_type, false > SimBuilding_Terrain_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_Terrain_type, char > SimBuilding_Terrain_traits;

        const SimBuilding_Terrain_optional&
        SimBuilding_Terrain () const;

        SimBuilding_Terrain_optional&
        SimBuilding_Terrain ();

        void
        SimBuilding_Terrain (const SimBuilding_Terrain_type& x);

        void
        SimBuilding_Terrain (const SimBuilding_Terrain_optional& x);

        void
        SimBuilding_Terrain (::std::auto_ptr< SimBuilding_Terrain_type > p);

        // SimBuilding_LoadsConvergTolVal
        //
        typedef ::xml_schema::double_ SimBuilding_LoadsConvergTolVal_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_LoadsConvergTolVal_type, true > SimBuilding_LoadsConvergTolVal_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_LoadsConvergTolVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimBuilding_LoadsConvergTolVal_traits;

        const SimBuilding_LoadsConvergTolVal_optional&
        SimBuilding_LoadsConvergTolVal () const;

        SimBuilding_LoadsConvergTolVal_optional&
        SimBuilding_LoadsConvergTolVal ();

        void
        SimBuilding_LoadsConvergTolVal (const SimBuilding_LoadsConvergTolVal_type& x);

        void
        SimBuilding_LoadsConvergTolVal (const SimBuilding_LoadsConvergTolVal_optional& x);

        // SimBuilding_TempConvergTolVal
        //
        typedef ::xml_schema::double_ SimBuilding_TempConvergTolVal_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_TempConvergTolVal_type, true > SimBuilding_TempConvergTolVal_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_TempConvergTolVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimBuilding_TempConvergTolVal_traits;

        const SimBuilding_TempConvergTolVal_optional&
        SimBuilding_TempConvergTolVal () const;

        SimBuilding_TempConvergTolVal_optional&
        SimBuilding_TempConvergTolVal ();

        void
        SimBuilding_TempConvergTolVal (const SimBuilding_TempConvergTolVal_type& x);

        void
        SimBuilding_TempConvergTolVal (const SimBuilding_TempConvergTolVal_optional& x);

        // SimBuilding_SolarDist
        //
        typedef ::xml_schema::string SimBuilding_SolarDist_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_SolarDist_type, false > SimBuilding_SolarDist_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_SolarDist_type, char > SimBuilding_SolarDist_traits;

        const SimBuilding_SolarDist_optional&
        SimBuilding_SolarDist () const;

        SimBuilding_SolarDist_optional&
        SimBuilding_SolarDist ();

        void
        SimBuilding_SolarDist (const SimBuilding_SolarDist_type& x);

        void
        SimBuilding_SolarDist (const SimBuilding_SolarDist_optional& x);

        void
        SimBuilding_SolarDist (::std::auto_ptr< SimBuilding_SolarDist_type > p);

        // SimBuilding_MaxNumWarmupDays
        //
        typedef ::xml_schema::int_ SimBuilding_MaxNumWarmupDays_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_MaxNumWarmupDays_type, true > SimBuilding_MaxNumWarmupDays_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_MaxNumWarmupDays_type, char > SimBuilding_MaxNumWarmupDays_traits;

        const SimBuilding_MaxNumWarmupDays_optional&
        SimBuilding_MaxNumWarmupDays () const;

        SimBuilding_MaxNumWarmupDays_optional&
        SimBuilding_MaxNumWarmupDays ();

        void
        SimBuilding_MaxNumWarmupDays (const SimBuilding_MaxNumWarmupDays_type& x);

        void
        SimBuilding_MaxNumWarmupDays (const SimBuilding_MaxNumWarmupDays_optional& x);

        // SimBuilding_MinNumberWarmupDays
        //
        typedef ::xml_schema::int_ SimBuilding_MinNumberWarmupDays_type;
        typedef ::xsd::cxx::tree::optional< SimBuilding_MinNumberWarmupDays_type, true > SimBuilding_MinNumberWarmupDays_optional;
        typedef ::xsd::cxx::tree::traits< SimBuilding_MinNumberWarmupDays_type, char > SimBuilding_MinNumberWarmupDays_traits;

        const SimBuilding_MinNumberWarmupDays_optional&
        SimBuilding_MinNumberWarmupDays () const;

        SimBuilding_MinNumberWarmupDays_optional&
        SimBuilding_MinNumberWarmupDays ();

        void
        SimBuilding_MinNumberWarmupDays (const SimBuilding_MinNumberWarmupDays_type& x);

        void
        SimBuilding_MinNumberWarmupDays (const SimBuilding_MinNumberWarmupDays_optional& x);

        // RoofIrrigation_IrrigationModelType
        //
        typedef ::xml_schema::string RoofIrrigation_IrrigationModelType_type;
        typedef ::xsd::cxx::tree::optional< RoofIrrigation_IrrigationModelType_type, false > RoofIrrigation_IrrigationModelType_optional;
        typedef ::xsd::cxx::tree::traits< RoofIrrigation_IrrigationModelType_type, char > RoofIrrigation_IrrigationModelType_traits;

        const RoofIrrigation_IrrigationModelType_optional&
        RoofIrrigation_IrrigationModelType () const;

        RoofIrrigation_IrrigationModelType_optional&
        RoofIrrigation_IrrigationModelType ();

        void
        RoofIrrigation_IrrigationModelType (const RoofIrrigation_IrrigationModelType_type& x);

        void
        RoofIrrigation_IrrigationModelType (const RoofIrrigation_IrrigationModelType_optional& x);

        void
        RoofIrrigation_IrrigationModelType (::std::auto_ptr< RoofIrrigation_IrrigationModelType_type > p);

        // RoofIrrigation_IrrigationRateSchedName
        //
        typedef ::xml_schema::idref RoofIrrigation_IrrigationRateSchedName_type;
        typedef ::xsd::cxx::tree::optional< RoofIrrigation_IrrigationRateSchedName_type, false > RoofIrrigation_IrrigationRateSchedName_optional;
        typedef ::xsd::cxx::tree::traits< RoofIrrigation_IrrigationRateSchedName_type, char > RoofIrrigation_IrrigationRateSchedName_traits;

        const RoofIrrigation_IrrigationRateSchedName_optional&
        RoofIrrigation_IrrigationRateSchedName () const;

        RoofIrrigation_IrrigationRateSchedName_optional&
        RoofIrrigation_IrrigationRateSchedName ();

        void
        RoofIrrigation_IrrigationRateSchedName (const RoofIrrigation_IrrigationRateSchedName_type& x);

        void
        RoofIrrigation_IrrigationRateSchedName (const RoofIrrigation_IrrigationRateSchedName_optional& x);

        void
        RoofIrrigation_IrrigationRateSchedName (::std::auto_ptr< RoofIrrigation_IrrigationRateSchedName_type > p);

        // RoofIrrigation_IrrigationMaxSaturatThreshold
        //
        typedef ::xml_schema::double_ RoofIrrigation_IrrigationMaxSaturatThreshold_type;
        typedef ::xsd::cxx::tree::optional< RoofIrrigation_IrrigationMaxSaturatThreshold_type, true > RoofIrrigation_IrrigationMaxSaturatThreshold_optional;
        typedef ::xsd::cxx::tree::traits< RoofIrrigation_IrrigationMaxSaturatThreshold_type, char, ::xsd::cxx::tree::schema_type::double_ > RoofIrrigation_IrrigationMaxSaturatThreshold_traits;

        const RoofIrrigation_IrrigationMaxSaturatThreshold_optional&
        RoofIrrigation_IrrigationMaxSaturatThreshold () const;

        RoofIrrigation_IrrigationMaxSaturatThreshold_optional&
        RoofIrrigation_IrrigationMaxSaturatThreshold ();

        void
        RoofIrrigation_IrrigationMaxSaturatThreshold (const RoofIrrigation_IrrigationMaxSaturatThreshold_type& x);

        void
        RoofIrrigation_IrrigationMaxSaturatThreshold (const RoofIrrigation_IrrigationMaxSaturatThreshold_optional& x);

        // T24AboveGradeStoryCountAltered
        //
        typedef ::xml_schema::int_ T24AboveGradeStoryCountAltered_type;
        typedef ::xsd::cxx::tree::optional< T24AboveGradeStoryCountAltered_type, true > T24AboveGradeStoryCountAltered_optional;
        typedef ::xsd::cxx::tree::traits< T24AboveGradeStoryCountAltered_type, char > T24AboveGradeStoryCountAltered_traits;

        const T24AboveGradeStoryCountAltered_optional&
        T24AboveGradeStoryCountAltered () const;

        T24AboveGradeStoryCountAltered_optional&
        T24AboveGradeStoryCountAltered ();

        void
        T24AboveGradeStoryCountAltered (const T24AboveGradeStoryCountAltered_type& x);

        void
        T24AboveGradeStoryCountAltered (const T24AboveGradeStoryCountAltered_optional& x);

        // T24AboveGradeStoryCountExists
        //
        typedef ::xml_schema::int_ T24AboveGradeStoryCountExists_type;
        typedef ::xsd::cxx::tree::optional< T24AboveGradeStoryCountExists_type, true > T24AboveGradeStoryCountExists_optional;
        typedef ::xsd::cxx::tree::traits< T24AboveGradeStoryCountExists_type, char > T24AboveGradeStoryCountExists_traits;

        const T24AboveGradeStoryCountExists_optional&
        T24AboveGradeStoryCountExists () const;

        T24AboveGradeStoryCountExists_optional&
        T24AboveGradeStoryCountExists ();

        void
        T24AboveGradeStoryCountExists (const T24AboveGradeStoryCountExists_type& x);

        void
        T24AboveGradeStoryCountExists (const T24AboveGradeStoryCountExists_optional& x);

        // T24AboveGradeStoryCountNew
        //
        typedef ::xml_schema::int_ T24AboveGradeStoryCountNew_type;
        typedef ::xsd::cxx::tree::optional< T24AboveGradeStoryCountNew_type, true > T24AboveGradeStoryCountNew_optional;
        typedef ::xsd::cxx::tree::traits< T24AboveGradeStoryCountNew_type, char > T24AboveGradeStoryCountNew_traits;

        const T24AboveGradeStoryCountNew_optional&
        T24AboveGradeStoryCountNew () const;

        T24AboveGradeStoryCountNew_optional&
        T24AboveGradeStoryCountNew ();

        void
        T24AboveGradeStoryCountNew (const T24AboveGradeStoryCountNew_type& x);

        void
        T24AboveGradeStoryCountNew (const T24AboveGradeStoryCountNew_optional& x);

        // T24CoilCoolingCapacity
        //
        typedef ::xml_schema::double_ T24CoilCoolingCapacity_type;
        typedef ::xsd::cxx::tree::optional< T24CoilCoolingCapacity_type, true > T24CoilCoolingCapacity_optional;
        typedef ::xsd::cxx::tree::traits< T24CoilCoolingCapacity_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CoilCoolingCapacity_traits;

        const T24CoilCoolingCapacity_optional&
        T24CoilCoolingCapacity () const;

        T24CoilCoolingCapacity_optional&
        T24CoilCoolingCapacity ();

        void
        T24CoilCoolingCapacity (const T24CoilCoolingCapacity_type& x);

        void
        T24CoilCoolingCapacity (const T24CoilCoolingCapacity_optional& x);

        // T24CoilHeatingCapacity
        //
        typedef ::xml_schema::double_ T24CoilHeatingCapacity_type;
        typedef ::xsd::cxx::tree::optional< T24CoilHeatingCapacity_type, true > T24CoilHeatingCapacity_optional;
        typedef ::xsd::cxx::tree::traits< T24CoilHeatingCapacity_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CoilHeatingCapacity_traits;

        const T24CoilHeatingCapacity_optional&
        T24CoilHeatingCapacity () const;

        T24CoilHeatingCapacity_optional&
        T24CoilHeatingCapacity ();

        void
        T24CoilHeatingCapacity (const T24CoilHeatingCapacity_type& x);

        void
        T24CoilHeatingCapacity (const T24CoilHeatingCapacity_optional& x);

        // T24FunctionClassificationMethod
        //
        typedef ::xml_schema::string T24FunctionClassificationMethod_type;
        typedef ::xsd::cxx::tree::optional< T24FunctionClassificationMethod_type, false > T24FunctionClassificationMethod_optional;
        typedef ::xsd::cxx::tree::traits< T24FunctionClassificationMethod_type, char > T24FunctionClassificationMethod_traits;

        const T24FunctionClassificationMethod_optional&
        T24FunctionClassificationMethod () const;

        T24FunctionClassificationMethod_optional&
        T24FunctionClassificationMethod ();

        void
        T24FunctionClassificationMethod (const T24FunctionClassificationMethod_type& x);

        void
        T24FunctionClassificationMethod (const T24FunctionClassificationMethod_optional& x);

        void
        T24FunctionClassificationMethod (::std::auto_ptr< T24FunctionClassificationMethod_type > p);

        // T24HighRiseResidentialLivingUnitCount
        //
        typedef ::xml_schema::int_ T24HighRiseResidentialLivingUnitCount_type;
        typedef ::xsd::cxx::tree::optional< T24HighRiseResidentialLivingUnitCount_type, true > T24HighRiseResidentialLivingUnitCount_optional;
        typedef ::xsd::cxx::tree::traits< T24HighRiseResidentialLivingUnitCount_type, char > T24HighRiseResidentialLivingUnitCount_traits;

        const T24HighRiseResidentialLivingUnitCount_optional&
        T24HighRiseResidentialLivingUnitCount () const;

        T24HighRiseResidentialLivingUnitCount_optional&
        T24HighRiseResidentialLivingUnitCount ();

        void
        T24HighRiseResidentialLivingUnitCount (const T24HighRiseResidentialLivingUnitCount_type& x);

        void
        T24HighRiseResidentialLivingUnitCount (const T24HighRiseResidentialLivingUnitCount_optional& x);

        // T24LivingUnitCountAltered
        //
        typedef ::xml_schema::int_ T24LivingUnitCountAltered_type;
        typedef ::xsd::cxx::tree::optional< T24LivingUnitCountAltered_type, true > T24LivingUnitCountAltered_optional;
        typedef ::xsd::cxx::tree::traits< T24LivingUnitCountAltered_type, char > T24LivingUnitCountAltered_traits;

        const T24LivingUnitCountAltered_optional&
        T24LivingUnitCountAltered () const;

        T24LivingUnitCountAltered_optional&
        T24LivingUnitCountAltered ();

        void
        T24LivingUnitCountAltered (const T24LivingUnitCountAltered_type& x);

        void
        T24LivingUnitCountAltered (const T24LivingUnitCountAltered_optional& x);

        // T24LivingUnitCountExisting
        //
        typedef ::xml_schema::int_ T24LivingUnitCountExisting_type;
        typedef ::xsd::cxx::tree::optional< T24LivingUnitCountExisting_type, true > T24LivingUnitCountExisting_optional;
        typedef ::xsd::cxx::tree::traits< T24LivingUnitCountExisting_type, char > T24LivingUnitCountExisting_traits;

        const T24LivingUnitCountExisting_optional&
        T24LivingUnitCountExisting () const;

        T24LivingUnitCountExisting_optional&
        T24LivingUnitCountExisting ();

        void
        T24LivingUnitCountExisting (const T24LivingUnitCountExisting_type& x);

        void
        T24LivingUnitCountExisting (const T24LivingUnitCountExisting_optional& x);

        // T24LivingUnitCountNew
        //
        typedef ::xml_schema::int_ T24LivingUnitCountNew_type;
        typedef ::xsd::cxx::tree::optional< T24LivingUnitCountNew_type, true > T24LivingUnitCountNew_optional;
        typedef ::xsd::cxx::tree::traits< T24LivingUnitCountNew_type, char > T24LivingUnitCountNew_traits;

        const T24LivingUnitCountNew_optional&
        T24LivingUnitCountNew () const;

        T24LivingUnitCountNew_optional&
        T24LivingUnitCountNew ();

        void
        T24LivingUnitCountNew (const T24LivingUnitCountNew_type& x);

        void
        T24LivingUnitCountNew (const T24LivingUnitCountNew_optional& x);

        // T24PlantCoolingCapacity
        //
        typedef ::xml_schema::double_ T24PlantCoolingCapacity_type;
        typedef ::xsd::cxx::tree::optional< T24PlantCoolingCapacity_type, true > T24PlantCoolingCapacity_optional;
        typedef ::xsd::cxx::tree::traits< T24PlantCoolingCapacity_type, char, ::xsd::cxx::tree::schema_type::double_ > T24PlantCoolingCapacity_traits;

        const T24PlantCoolingCapacity_optional&
        T24PlantCoolingCapacity () const;

        T24PlantCoolingCapacity_optional&
        T24PlantCoolingCapacity ();

        void
        T24PlantCoolingCapacity (const T24PlantCoolingCapacity_type& x);

        void
        T24PlantCoolingCapacity (const T24PlantCoolingCapacity_optional& x);

        // T24PlantHeatingCapacity
        //
        typedef ::xml_schema::double_ T24PlantHeatingCapacity_type;
        typedef ::xsd::cxx::tree::optional< T24PlantHeatingCapacity_type, true > T24PlantHeatingCapacity_optional;
        typedef ::xsd::cxx::tree::traits< T24PlantHeatingCapacity_type, char, ::xsd::cxx::tree::schema_type::double_ > T24PlantHeatingCapacity_traits;

        const T24PlantHeatingCapacity_optional&
        T24PlantHeatingCapacity () const;

        T24PlantHeatingCapacity_optional&
        T24PlantHeatingCapacity ();

        void
        T24PlantHeatingCapacity (const T24PlantHeatingCapacity_type& x);

        void
        T24PlantHeatingCapacity (const T24PlantHeatingCapacity_optional& x);

        // T24RelocatablePublicSchoolBuilding
        //
        typedef ::xml_schema::int_ T24RelocatablePublicSchoolBuilding_type;
        typedef ::xsd::cxx::tree::optional< T24RelocatablePublicSchoolBuilding_type, true > T24RelocatablePublicSchoolBuilding_optional;
        typedef ::xsd::cxx::tree::traits< T24RelocatablePublicSchoolBuilding_type, char > T24RelocatablePublicSchoolBuilding_traits;

        const T24RelocatablePublicSchoolBuilding_optional&
        T24RelocatablePublicSchoolBuilding () const;

        T24RelocatablePublicSchoolBuilding_optional&
        T24RelocatablePublicSchoolBuilding ();

        void
        T24RelocatablePublicSchoolBuilding (const T24RelocatablePublicSchoolBuilding_type& x);

        void
        T24RelocatablePublicSchoolBuilding (const T24RelocatablePublicSchoolBuilding_optional& x);

        // T24TotalStoryCountAltered
        //
        typedef ::xml_schema::int_ T24TotalStoryCountAltered_type;
        typedef ::xsd::cxx::tree::optional< T24TotalStoryCountAltered_type, true > T24TotalStoryCountAltered_optional;
        typedef ::xsd::cxx::tree::traits< T24TotalStoryCountAltered_type, char > T24TotalStoryCountAltered_traits;

        const T24TotalStoryCountAltered_optional&
        T24TotalStoryCountAltered () const;

        T24TotalStoryCountAltered_optional&
        T24TotalStoryCountAltered ();

        void
        T24TotalStoryCountAltered (const T24TotalStoryCountAltered_type& x);

        void
        T24TotalStoryCountAltered (const T24TotalStoryCountAltered_optional& x);

        // T24TotalStoryCountExisting
        //
        typedef ::xml_schema::int_ T24TotalStoryCountExisting_type;
        typedef ::xsd::cxx::tree::optional< T24TotalStoryCountExisting_type, true > T24TotalStoryCountExisting_optional;
        typedef ::xsd::cxx::tree::traits< T24TotalStoryCountExisting_type, char > T24TotalStoryCountExisting_traits;

        const T24TotalStoryCountExisting_optional&
        T24TotalStoryCountExisting () const;

        T24TotalStoryCountExisting_optional&
        T24TotalStoryCountExisting ();

        void
        T24TotalStoryCountExisting (const T24TotalStoryCountExisting_type& x);

        void
        T24TotalStoryCountExisting (const T24TotalStoryCountExisting_optional& x);

        // T24TotalStoryCountNew
        //
        typedef ::xml_schema::int_ T24TotalStoryCountNew_type;
        typedef ::xsd::cxx::tree::optional< T24TotalStoryCountNew_type, true > T24TotalStoryCountNew_optional;
        typedef ::xsd::cxx::tree::traits< T24TotalStoryCountNew_type, char > T24TotalStoryCountNew_traits;

        const T24TotalStoryCountNew_optional&
        T24TotalStoryCountNew () const;

        T24TotalStoryCountNew_optional&
        T24TotalStoryCountNew ();

        void
        T24TotalStoryCountNew (const T24TotalStoryCountNew_type& x);

        void
        T24TotalStoryCountNew (const T24TotalStoryCountNew_optional& x);

        // Constructors.
        //
        SimBuilding_Building ();

        SimBuilding_Building (const RefId_type&);

        SimBuilding_Building (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        SimBuilding_Building (const SimBuilding_Building& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        virtual SimBuilding_Building*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimBuilding_Building&
        operator= (const SimBuilding_Building& x);

        virtual 
        ~SimBuilding_Building ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimBuilding_Name_optional SimBuilding_Name_;
        SimBuilding_NorthAxis_optional SimBuilding_NorthAxis_;
        SimBuilding_Terrain_optional SimBuilding_Terrain_;
        SimBuilding_LoadsConvergTolVal_optional SimBuilding_LoadsConvergTolVal_;
        SimBuilding_TempConvergTolVal_optional SimBuilding_TempConvergTolVal_;
        SimBuilding_SolarDist_optional SimBuilding_SolarDist_;
        SimBuilding_MaxNumWarmupDays_optional SimBuilding_MaxNumWarmupDays_;
        SimBuilding_MinNumberWarmupDays_optional SimBuilding_MinNumberWarmupDays_;
        RoofIrrigation_IrrigationModelType_optional RoofIrrigation_IrrigationModelType_;
        RoofIrrigation_IrrigationRateSchedName_optional RoofIrrigation_IrrigationRateSchedName_;
        RoofIrrigation_IrrigationMaxSaturatThreshold_optional RoofIrrigation_IrrigationMaxSaturatThreshold_;
        T24AboveGradeStoryCountAltered_optional T24AboveGradeStoryCountAltered_;
        T24AboveGradeStoryCountExists_optional T24AboveGradeStoryCountExists_;
        T24AboveGradeStoryCountNew_optional T24AboveGradeStoryCountNew_;
        T24CoilCoolingCapacity_optional T24CoilCoolingCapacity_;
        T24CoilHeatingCapacity_optional T24CoilHeatingCapacity_;
        T24FunctionClassificationMethod_optional T24FunctionClassificationMethod_;
        T24HighRiseResidentialLivingUnitCount_optional T24HighRiseResidentialLivingUnitCount_;
        T24LivingUnitCountAltered_optional T24LivingUnitCountAltered_;
        T24LivingUnitCountExisting_optional T24LivingUnitCountExisting_;
        T24LivingUnitCountNew_optional T24LivingUnitCountNew_;
        T24PlantCoolingCapacity_optional T24PlantCoolingCapacity_;
        T24PlantHeatingCapacity_optional T24PlantHeatingCapacity_;
        T24RelocatablePublicSchoolBuilding_optional T24RelocatablePublicSchoolBuilding_;
        T24TotalStoryCountAltered_optional T24TotalStoryCountAltered_;
        T24TotalStoryCountExisting_optional T24TotalStoryCountExisting_;
        T24TotalStoryCountNew_optional T24TotalStoryCountNew_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_BUILDING_BUILDING_HXX
