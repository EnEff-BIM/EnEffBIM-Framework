// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow
      // 

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_Name_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_Name () const
      {
        return this->SimFlowCompEqmt_Name_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_Name_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_Name ()
      {
        return this->SimFlowCompEqmt_Name_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_type& x)
      {
        this->SimFlowCompEqmt_Name_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_optional& x)
      {
        this->SimFlowCompEqmt_Name_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_Name (::std::auto_ptr< SimFlowCompEqmt_Name_type > x)
      {
        this->SimFlowCompEqmt_Name_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxSupplyAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxSupplyAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxSupplyAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxSupplyAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxSupplyAirFlowRate (const SimFlowCompEqmt_MaxSupplyAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxSupplyAirFlowRate (const SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxOutdrAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxOutdrAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxOutdrAirFlowRate (const SimFlowCompEqmt_MaxOutdrAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_MaxOutdrAirFlowRate (const SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirInNodeName () const
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirInNodeName ()
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirInNodeName (::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirOutNodeName () const
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirOutNodeName ()
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AirOutNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_OutdoorAirMixerObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdoorAirMixerObjType () const
      {
        return this->SimFlowCompEqmt_OutdoorAirMixerObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_OutdoorAirMixerObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdoorAirMixerObjType ()
      {
        return this->SimFlowCompEqmt_OutdoorAirMixerObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdoorAirMixerObjType (const SimFlowCompEqmt_OutdoorAirMixerObjType_type& x)
      {
        this->SimFlowCompEqmt_OutdoorAirMixerObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdoorAirMixerObjType (const SimFlowCompEqmt_OutdoorAirMixerObjType_optional& x)
      {
        this->SimFlowCompEqmt_OutdoorAirMixerObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdoorAirMixerObjType (::std::auto_ptr< SimFlowCompEqmt_OutdoorAirMixerObjType_type > x)
      {
        this->SimFlowCompEqmt_OutdoorAirMixerObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_OutdrAirMixerName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdrAirMixerName () const
      {
        return this->SimFlowCompEqmt_OutdrAirMixerName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_OutdrAirMixerName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdrAirMixerName ()
      {
        return this->SimFlowCompEqmt_OutdrAirMixerName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdrAirMixerName (const SimFlowCompEqmt_OutdrAirMixerName_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirMixerName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdrAirMixerName (const SimFlowCompEqmt_OutdrAirMixerName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirMixerName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_OutdrAirMixerName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirMixerName_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirMixerName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanObjType () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanObjType ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanObjType (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingCoilObjType () const
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingCoilObjType ()
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_CoolingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingConvergTol () const
      {
        return this->SimFlowCompEqmt_CoolingConvergTol_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_CoolingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingConvergTol ()
      {
        return this->SimFlowCompEqmt_CoolingConvergTol_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingConvergTol (const SimFlowCompEqmt_CoolingConvergTol_type& x)
      {
        this->SimFlowCompEqmt_CoolingConvergTol_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_CoolingConvergTol (const SimFlowCompEqmt_CoolingConvergTol_optional& x)
      {
        this->SimFlowCompEqmt_CoolingConvergTol_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailMngrListName () const
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailMngrListName ()
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_type& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_optional& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_AvailMngrListName (::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_DXCoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_DXCoolingCoilName () const
      {
        return this->SimFlowCompEqmt_DXCoolingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_DXCoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_DXCoolingCoilName ()
      {
        return this->SimFlowCompEqmt_DXCoolingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_DXCoolingCoilName (const SimFlowCompEqmt_DXCoolingCoilName_type& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_DXCoolingCoilName (const SimFlowCompEqmt_DXCoolingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_DXCoolingCoilName (::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilName_type > x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_FanPlacement () const
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_FanPlacement ()
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_type& x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_optional& x)
      {
        this->SimFlowCompEqmt_FanPlacement_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompEqmt_FanPlacement (::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow
      //

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow ()
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (this),
        SimFlowCompEqmt_OutdrAirMixerName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_DXCoolingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (RefId),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (this),
        SimFlowCompEqmt_OutdrAirMixerName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_DXCoolingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow (const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow& x,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (x, f, c),
        SimFlowCompEqmt_Name_ (x.SimFlowCompEqmt_Name_, f, this),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (x.SimFlowCompEqmt_MaxSupplyAirFlowRate_, f, this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (x.SimFlowCompEqmt_MaxOutdrAirFlowRate_, f, this),
        SimFlowCompEqmt_AirInNodeName_ (x.SimFlowCompEqmt_AirInNodeName_, f, this),
        SimFlowCompEqmt_AirOutNodeName_ (x.SimFlowCompEqmt_AirOutNodeName_, f, this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (x.SimFlowCompEqmt_OutdoorAirMixerObjType_, f, this),
        SimFlowCompEqmt_OutdrAirMixerName_ (x.SimFlowCompEqmt_OutdrAirMixerName_, f, this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (x.SimFlowCompEqmt_SupplyAirFanObjType_, f, this),
        SimFlowCompEqmt_SupplyAirFanName_ (x.SimFlowCompEqmt_SupplyAirFanName_, f, this),
        SimFlowCompEqmt_CoolingCoilObjType_ (x.SimFlowCompEqmt_CoolingCoilObjType_, f, this),
        SimFlowCompEqmt_CoolingConvergTol_ (x.SimFlowCompEqmt_CoolingConvergTol_, f, this),
        SimFlowCompEqmt_AvailMngrListName_ (x.SimFlowCompEqmt_AvailMngrListName_, f, this),
        SimFlowCompEqmt_DXCoolingCoilName_ (x.SimFlowCompEqmt_DXCoolingCoilName_, f, this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (x.SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_, f, this),
        SimFlowCompEqmt_FanPlacement_ (x.SimFlowCompEqmt_FanPlacement_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow (const ::xercesc::DOMElement& e,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (this),
        SimFlowCompEqmt_OutdrAirMixerName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_DXCoolingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_Name
          //
          if (n.name () == "SimFlowCompEqmt_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_Name_type > r (
              SimFlowCompEqmt_Name_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_Name_)
            {
              this->SimFlowCompEqmt_Name_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxSupplyAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxSupplyAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxSupplyAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxSupplyAirFlowRate_.set (SimFlowCompEqmt_MaxSupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxOutdrAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxOutdrAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxOutdrAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxOutdrAirFlowRate_.set (SimFlowCompEqmt_MaxOutdrAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AirInNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > r (
              SimFlowCompEqmt_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirInNodeName_)
            {
              this->SimFlowCompEqmt_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirOutNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > r (
              SimFlowCompEqmt_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirOutNodeName_)
            {
              this->SimFlowCompEqmt_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdoorAirMixerObjType
          //
          if (n.name () == "SimFlowCompEqmt_OutdoorAirMixerObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdoorAirMixerObjType_type > r (
              SimFlowCompEqmt_OutdoorAirMixerObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdoorAirMixerObjType_)
            {
              this->SimFlowCompEqmt_OutdoorAirMixerObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirMixerName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirMixerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirMixerName_type > r (
              SimFlowCompEqmt_OutdrAirMixerName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirMixerName_)
            {
              this->SimFlowCompEqmt_OutdrAirMixerName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanObjType
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > r (
              SimFlowCompEqmt_SupplyAirFanObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanObjType_)
            {
              this->SimFlowCompEqmt_SupplyAirFanObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > r (
              SimFlowCompEqmt_SupplyAirFanName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > r (
              SimFlowCompEqmt_CoolingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilObjType_)
            {
              this->SimFlowCompEqmt_CoolingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingConvergTol
          //
          if (n.name () == "SimFlowCompEqmt_CoolingConvergTol" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_CoolingConvergTol_)
            {
              this->SimFlowCompEqmt_CoolingConvergTol_.set (SimFlowCompEqmt_CoolingConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AvailMngrListName
          //
          if (n.name () == "SimFlowCompEqmt_AvailMngrListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > r (
              SimFlowCompEqmt_AvailMngrListName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailMngrListName_)
            {
              this->SimFlowCompEqmt_AvailMngrListName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DXCoolingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_DXCoolingCoilName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilName_type > r (
              SimFlowCompEqmt_DXCoolingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DXCoolingCoilName_)
            {
              this->SimFlowCompEqmt_DXCoolingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanOperatModeSchedName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanOperatModeSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > r (
              SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FanPlacement
          //
          if (n.name () == "SimFlowCompEqmt_FanPlacement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > r (
              SimFlowCompEqmt_FanPlacement_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FanPlacement_)
            {
              this->SimFlowCompEqmt_FanPlacement_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow* SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow& SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt& > (*this) = x;
          this->SimFlowCompEqmt_Name_ = x.SimFlowCompEqmt_Name_;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_MaxSupplyAirFlowRate_ = x.SimFlowCompEqmt_MaxSupplyAirFlowRate_;
          this->SimFlowCompEqmt_MaxOutdrAirFlowRate_ = x.SimFlowCompEqmt_MaxOutdrAirFlowRate_;
          this->SimFlowCompEqmt_AirInNodeName_ = x.SimFlowCompEqmt_AirInNodeName_;
          this->SimFlowCompEqmt_AirOutNodeName_ = x.SimFlowCompEqmt_AirOutNodeName_;
          this->SimFlowCompEqmt_OutdoorAirMixerObjType_ = x.SimFlowCompEqmt_OutdoorAirMixerObjType_;
          this->SimFlowCompEqmt_OutdrAirMixerName_ = x.SimFlowCompEqmt_OutdrAirMixerName_;
          this->SimFlowCompEqmt_SupplyAirFanObjType_ = x.SimFlowCompEqmt_SupplyAirFanObjType_;
          this->SimFlowCompEqmt_SupplyAirFanName_ = x.SimFlowCompEqmt_SupplyAirFanName_;
          this->SimFlowCompEqmt_CoolingCoilObjType_ = x.SimFlowCompEqmt_CoolingCoilObjType_;
          this->SimFlowCompEqmt_CoolingConvergTol_ = x.SimFlowCompEqmt_CoolingConvergTol_;
          this->SimFlowCompEqmt_AvailMngrListName_ = x.SimFlowCompEqmt_AvailMngrListName_;
          this->SimFlowCompEqmt_DXCoolingCoilName_ = x.SimFlowCompEqmt_DXCoolingCoilName_;
          this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ = x.SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
          this->SimFlowCompEqmt_FanPlacement_ = x.SimFlowCompEqmt_FanPlacement_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow::
      ~SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

