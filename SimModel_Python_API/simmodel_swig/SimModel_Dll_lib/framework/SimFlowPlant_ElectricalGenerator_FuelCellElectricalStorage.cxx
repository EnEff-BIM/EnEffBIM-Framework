// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage
      // 

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_ChoiceModel_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ChoiceModel () const
      {
        return this->SimFlowPlant_ChoiceModel_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_ChoiceModel_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ChoiceModel ()
      {
        return this->SimFlowPlant_ChoiceModel_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ChoiceModel (const SimFlowPlant_ChoiceModel_type& x)
      {
        this->SimFlowPlant_ChoiceModel_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ChoiceModel (const SimFlowPlant_ChoiceModel_optional& x)
      {
        this->SimFlowPlant_ChoiceModel_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ChoiceModel (::std::auto_ptr< SimFlowPlant_ChoiceModel_type > x)
      {
        this->SimFlowPlant_ChoiceModel_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_NomChargingEnergeticEff_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomChargingEnergeticEff () const
      {
        return this->SimFlowPlant_NomChargingEnergeticEff_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_NomChargingEnergeticEff_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomChargingEnergeticEff ()
      {
        return this->SimFlowPlant_NomChargingEnergeticEff_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomChargingEnergeticEff (const SimFlowPlant_NomChargingEnergeticEff_type& x)
      {
        this->SimFlowPlant_NomChargingEnergeticEff_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomChargingEnergeticEff (const SimFlowPlant_NomChargingEnergeticEff_optional& x)
      {
        this->SimFlowPlant_NomChargingEnergeticEff_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_NomDischargEnergeticEff_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomDischargEnergeticEff () const
      {
        return this->SimFlowPlant_NomDischargEnergeticEff_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_NomDischargEnergeticEff_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomDischargEnergeticEff ()
      {
        return this->SimFlowPlant_NomDischargEnergeticEff_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomDischargEnergeticEff (const SimFlowPlant_NomDischargEnergeticEff_type& x)
      {
        this->SimFlowPlant_NomDischargEnergeticEff_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_NomDischargEnergeticEff (const SimFlowPlant_NomDischargEnergeticEff_optional& x)
      {
        this->SimFlowPlant_NomDischargEnergeticEff_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_SimpleMaxCap_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxCap () const
      {
        return this->SimFlowPlant_SimpleMaxCap_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_SimpleMaxCap_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxCap ()
      {
        return this->SimFlowPlant_SimpleMaxCap_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxCap (const SimFlowPlant_SimpleMaxCap_type& x)
      {
        this->SimFlowPlant_SimpleMaxCap_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxCap (const SimFlowPlant_SimpleMaxCap_optional& x)
      {
        this->SimFlowPlant_SimpleMaxCap_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_SimpleMaxPwrDraw_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrDraw () const
      {
        return this->SimFlowPlant_SimpleMaxPwrDraw_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_SimpleMaxPwrDraw_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrDraw ()
      {
        return this->SimFlowPlant_SimpleMaxPwrDraw_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrDraw (const SimFlowPlant_SimpleMaxPwrDraw_type& x)
      {
        this->SimFlowPlant_SimpleMaxPwrDraw_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrDraw (const SimFlowPlant_SimpleMaxPwrDraw_optional& x)
      {
        this->SimFlowPlant_SimpleMaxPwrDraw_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_SimpleMaxPwrStore_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrStore () const
      {
        return this->SimFlowPlant_SimpleMaxPwrStore_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_SimpleMaxPwrStore_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrStore ()
      {
        return this->SimFlowPlant_SimpleMaxPwrStore_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrStore (const SimFlowPlant_SimpleMaxPwrStore_type& x)
      {
        this->SimFlowPlant_SimpleMaxPwrStore_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_SimpleMaxPwrStore (const SimFlowPlant_SimpleMaxPwrStore_optional& x)
      {
        this->SimFlowPlant_SimpleMaxPwrStore_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_InitChargeState_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_InitChargeState () const
      {
        return this->SimFlowPlant_InitChargeState_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::SimFlowPlant_InitChargeState_optional& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_InitChargeState ()
      {
        return this->SimFlowPlant_InitChargeState_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_InitChargeState (const SimFlowPlant_InitChargeState_type& x)
      {
        this->SimFlowPlant_InitChargeState_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_InitChargeState (const SimFlowPlant_InitChargeState_optional& x)
      {
        this->SimFlowPlant_InitChargeState_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage
      //

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage ()
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_ChoiceModel_ (this),
        SimFlowPlant_NomChargingEnergeticEff_ (this),
        SimFlowPlant_NomDischargEnergeticEff_ (this),
        SimFlowPlant_SimpleMaxCap_ (this),
        SimFlowPlant_SimpleMaxPwrDraw_ (this),
        SimFlowPlant_SimpleMaxPwrStore_ (this),
        SimFlowPlant_InitChargeState_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_ChoiceModel_ (this),
        SimFlowPlant_NomChargingEnergeticEff_ (this),
        SimFlowPlant_NomDischargEnergeticEff_ (this),
        SimFlowPlant_SimpleMaxCap_ (this),
        SimFlowPlant_SimpleMaxPwrDraw_ (this),
        SimFlowPlant_SimpleMaxPwrStore_ (this),
        SimFlowPlant_InitChargeState_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage (const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage& x,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_ChoiceModel_ (x.SimFlowPlant_ChoiceModel_, f, this),
        SimFlowPlant_NomChargingEnergeticEff_ (x.SimFlowPlant_NomChargingEnergeticEff_, f, this),
        SimFlowPlant_NomDischargEnergeticEff_ (x.SimFlowPlant_NomDischargEnergeticEff_, f, this),
        SimFlowPlant_SimpleMaxCap_ (x.SimFlowPlant_SimpleMaxCap_, f, this),
        SimFlowPlant_SimpleMaxPwrDraw_ (x.SimFlowPlant_SimpleMaxPwrDraw_, f, this),
        SimFlowPlant_SimpleMaxPwrStore_ (x.SimFlowPlant_SimpleMaxPwrStore_, f, this),
        SimFlowPlant_InitChargeState_ (x.SimFlowPlant_InitChargeState_, f, this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage (const ::xercesc::DOMElement& e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_ChoiceModel_ (this),
        SimFlowPlant_NomChargingEnergeticEff_ (this),
        SimFlowPlant_NomDischargEnergeticEff_ (this),
        SimFlowPlant_SimpleMaxCap_ (this),
        SimFlowPlant_SimpleMaxPwrDraw_ (this),
        SimFlowPlant_SimpleMaxPwrStore_ (this),
        SimFlowPlant_InitChargeState_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ChoiceModel
          //
          if (n.name () == "SimFlowPlant_ChoiceModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ChoiceModel_type > r (
              SimFlowPlant_ChoiceModel_traits::create (i, f, this));

            if (!this->SimFlowPlant_ChoiceModel_)
            {
              this->SimFlowPlant_ChoiceModel_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NomChargingEnergeticEff
          //
          if (n.name () == "SimFlowPlant_NomChargingEnergeticEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NomChargingEnergeticEff_)
            {
              this->SimFlowPlant_NomChargingEnergeticEff_.set (SimFlowPlant_NomChargingEnergeticEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NomDischargEnergeticEff
          //
          if (n.name () == "SimFlowPlant_NomDischargEnergeticEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NomDischargEnergeticEff_)
            {
              this->SimFlowPlant_NomDischargEnergeticEff_.set (SimFlowPlant_NomDischargEnergeticEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SimpleMaxCap
          //
          if (n.name () == "SimFlowPlant_SimpleMaxCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SimpleMaxCap_)
            {
              this->SimFlowPlant_SimpleMaxCap_.set (SimFlowPlant_SimpleMaxCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SimpleMaxPwrDraw
          //
          if (n.name () == "SimFlowPlant_SimpleMaxPwrDraw" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SimpleMaxPwrDraw_)
            {
              this->SimFlowPlant_SimpleMaxPwrDraw_.set (SimFlowPlant_SimpleMaxPwrDraw_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SimpleMaxPwrStore
          //
          if (n.name () == "SimFlowPlant_SimpleMaxPwrStore" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SimpleMaxPwrStore_)
            {
              this->SimFlowPlant_SimpleMaxPwrStore_.set (SimFlowPlant_SimpleMaxPwrStore_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_InitChargeState
          //
          if (n.name () == "SimFlowPlant_InitChargeState" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_InitChargeState_)
            {
              this->SimFlowPlant_InitChargeState_.set (SimFlowPlant_InitChargeState_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage* SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage (*this, f, c);
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage& SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      operator= (const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_ChoiceModel_ = x.SimFlowPlant_ChoiceModel_;
          this->SimFlowPlant_NomChargingEnergeticEff_ = x.SimFlowPlant_NomChargingEnergeticEff_;
          this->SimFlowPlant_NomDischargEnergeticEff_ = x.SimFlowPlant_NomDischargEnergeticEff_;
          this->SimFlowPlant_SimpleMaxCap_ = x.SimFlowPlant_SimpleMaxCap_;
          this->SimFlowPlant_SimpleMaxPwrDraw_ = x.SimFlowPlant_SimpleMaxPwrDraw_;
          this->SimFlowPlant_SimpleMaxPwrStore_ = x.SimFlowPlant_SimpleMaxPwrStore_;
          this->SimFlowPlant_InitChargeState_ = x.SimFlowPlant_InitChargeState_;
        }

        return *this;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage::
      ~SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

