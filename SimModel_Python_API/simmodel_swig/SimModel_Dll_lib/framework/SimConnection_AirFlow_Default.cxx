// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimConnection_AirFlow_Default.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimConnection_AirFlow_Default
      // 

      const SimConnection_AirFlow_Default::SimConnect_Name_optional& SimConnection_AirFlow_Default::
      SimConnect_Name () const
      {
        return this->SimConnect_Name_;
      }

      SimConnection_AirFlow_Default::SimConnect_Name_optional& SimConnection_AirFlow_Default::
      SimConnect_Name ()
      {
        return this->SimConnect_Name_;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_Name (const SimConnect_Name_type& x)
      {
        this->SimConnect_Name_.set (x);
      }

      void SimConnection_AirFlow_Default::
      SimConnect_Name (const SimConnect_Name_optional& x)
      {
        this->SimConnect_Name_ = x;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_Name (::std::auto_ptr< SimConnect_Name_type > x)
      {
        this->SimConnect_Name_.set (x);
      }

      const SimConnection_AirFlow_Default::SimConnect_AirDistUnitOutletNodeName_optional& SimConnection_AirFlow_Default::
      SimConnect_AirDistUnitOutletNodeName () const
      {
        return this->SimConnect_AirDistUnitOutletNodeName_;
      }

      SimConnection_AirFlow_Default::SimConnect_AirDistUnitOutletNodeName_optional& SimConnection_AirFlow_Default::
      SimConnect_AirDistUnitOutletNodeName ()
      {
        return this->SimConnect_AirDistUnitOutletNodeName_;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirDistUnitOutletNodeName (const SimConnect_AirDistUnitOutletNodeName_type& x)
      {
        this->SimConnect_AirDistUnitOutletNodeName_.set (x);
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirDistUnitOutletNodeName (const SimConnect_AirDistUnitOutletNodeName_optional& x)
      {
        this->SimConnect_AirDistUnitOutletNodeName_ = x;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirDistUnitOutletNodeName (::std::auto_ptr< SimConnect_AirDistUnitOutletNodeName_type > x)
      {
        this->SimConnect_AirDistUnitOutletNodeName_.set (x);
      }

      const SimConnection_AirFlow_Default::SimConnect_AirTermObjType_optional& SimConnection_AirFlow_Default::
      SimConnect_AirTermObjType () const
      {
        return this->SimConnect_AirTermObjType_;
      }

      SimConnection_AirFlow_Default::SimConnect_AirTermObjType_optional& SimConnection_AirFlow_Default::
      SimConnect_AirTermObjType ()
      {
        return this->SimConnect_AirTermObjType_;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirTermObjType (const SimConnect_AirTermObjType_type& x)
      {
        this->SimConnect_AirTermObjType_.set (x);
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirTermObjType (const SimConnect_AirTermObjType_optional& x)
      {
        this->SimConnect_AirTermObjType_ = x;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirTermObjType (::std::auto_ptr< SimConnect_AirTermObjType_type > x)
      {
        this->SimConnect_AirTermObjType_.set (x);
      }

      const SimConnection_AirFlow_Default::SimConnect_AirTermName_optional& SimConnection_AirFlow_Default::
      SimConnect_AirTermName () const
      {
        return this->SimConnect_AirTermName_;
      }

      SimConnection_AirFlow_Default::SimConnect_AirTermName_optional& SimConnection_AirFlow_Default::
      SimConnect_AirTermName ()
      {
        return this->SimConnect_AirTermName_;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirTermName (const SimConnect_AirTermName_type& x)
      {
        this->SimConnect_AirTermName_.set (x);
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirTermName (const SimConnect_AirTermName_optional& x)
      {
        this->SimConnect_AirTermName_ = x;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_AirTermName (::std::auto_ptr< SimConnect_AirTermName_type > x)
      {
        this->SimConnect_AirTermName_.set (x);
      }

      const SimConnection_AirFlow_Default::SimConnect_NomUpstreamLeakageFract_optional& SimConnection_AirFlow_Default::
      SimConnect_NomUpstreamLeakageFract () const
      {
        return this->SimConnect_NomUpstreamLeakageFract_;
      }

      SimConnection_AirFlow_Default::SimConnect_NomUpstreamLeakageFract_optional& SimConnection_AirFlow_Default::
      SimConnect_NomUpstreamLeakageFract ()
      {
        return this->SimConnect_NomUpstreamLeakageFract_;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_NomUpstreamLeakageFract (const SimConnect_NomUpstreamLeakageFract_type& x)
      {
        this->SimConnect_NomUpstreamLeakageFract_.set (x);
      }

      void SimConnection_AirFlow_Default::
      SimConnect_NomUpstreamLeakageFract (const SimConnect_NomUpstreamLeakageFract_optional& x)
      {
        this->SimConnect_NomUpstreamLeakageFract_ = x;
      }

      const SimConnection_AirFlow_Default::SimConnect_ConstDownstreamLeakageFract_optional& SimConnection_AirFlow_Default::
      SimConnect_ConstDownstreamLeakageFract () const
      {
        return this->SimConnect_ConstDownstreamLeakageFract_;
      }

      SimConnection_AirFlow_Default::SimConnect_ConstDownstreamLeakageFract_optional& SimConnection_AirFlow_Default::
      SimConnect_ConstDownstreamLeakageFract ()
      {
        return this->SimConnect_ConstDownstreamLeakageFract_;
      }

      void SimConnection_AirFlow_Default::
      SimConnect_ConstDownstreamLeakageFract (const SimConnect_ConstDownstreamLeakageFract_type& x)
      {
        this->SimConnect_ConstDownstreamLeakageFract_.set (x);
      }

      void SimConnection_AirFlow_Default::
      SimConnect_ConstDownstreamLeakageFract (const SimConnect_ConstDownstreamLeakageFract_optional& x)
      {
        this->SimConnect_ConstDownstreamLeakageFract_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimConnection_AirFlow_Default
      //

      SimConnection_AirFlow_Default::
      SimConnection_AirFlow_Default ()
      : ::schema::simxml::ResourcesGeneral::SimConnection_AirFlow (),
        SimConnect_Name_ (this),
        SimConnect_AirDistUnitOutletNodeName_ (this),
        SimConnect_AirTermObjType_ (this),
        SimConnect_AirTermName_ (this),
        SimConnect_NomUpstreamLeakageFract_ (this),
        SimConnect_ConstDownstreamLeakageFract_ (this)
      {
      }

      SimConnection_AirFlow_Default::
      SimConnection_AirFlow_Default (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimConnection_AirFlow (RefId),
        SimConnect_Name_ (this),
        SimConnect_AirDistUnitOutletNodeName_ (this),
        SimConnect_AirTermObjType_ (this),
        SimConnect_AirTermName_ (this),
        SimConnect_NomUpstreamLeakageFract_ (this),
        SimConnect_ConstDownstreamLeakageFract_ (this)
      {
      }

      SimConnection_AirFlow_Default::
      SimConnection_AirFlow_Default (const SimConnection_AirFlow_Default& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimConnection_AirFlow (x, f, c),
        SimConnect_Name_ (x.SimConnect_Name_, f, this),
        SimConnect_AirDistUnitOutletNodeName_ (x.SimConnect_AirDistUnitOutletNodeName_, f, this),
        SimConnect_AirTermObjType_ (x.SimConnect_AirTermObjType_, f, this),
        SimConnect_AirTermName_ (x.SimConnect_AirTermName_, f, this),
        SimConnect_NomUpstreamLeakageFract_ (x.SimConnect_NomUpstreamLeakageFract_, f, this),
        SimConnect_ConstDownstreamLeakageFract_ (x.SimConnect_ConstDownstreamLeakageFract_, f, this)
      {
      }

      SimConnection_AirFlow_Default::
      SimConnection_AirFlow_Default (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimConnection_AirFlow (e, f | ::xml_schema::flags::base, c),
        SimConnect_Name_ (this),
        SimConnect_AirDistUnitOutletNodeName_ (this),
        SimConnect_AirTermObjType_ (this),
        SimConnect_AirTermName_ (this),
        SimConnect_NomUpstreamLeakageFract_ (this),
        SimConnect_ConstDownstreamLeakageFract_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimConnection_AirFlow_Default::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimConnection_AirFlow::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimConnect_Name
          //
          if (n.name () == "SimConnect_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_Name_type > r (
              SimConnect_Name_traits::create (i, f, this));

            if (!this->SimConnect_Name_)
            {
              this->SimConnect_Name_.set (r);
              continue;
            }
          }

          // SimConnect_AirDistUnitOutletNodeName
          //
          if (n.name () == "SimConnect_AirDistUnitOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_AirDistUnitOutletNodeName_type > r (
              SimConnect_AirDistUnitOutletNodeName_traits::create (i, f, this));

            if (!this->SimConnect_AirDistUnitOutletNodeName_)
            {
              this->SimConnect_AirDistUnitOutletNodeName_.set (r);
              continue;
            }
          }

          // SimConnect_AirTermObjType
          //
          if (n.name () == "SimConnect_AirTermObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_AirTermObjType_type > r (
              SimConnect_AirTermObjType_traits::create (i, f, this));

            if (!this->SimConnect_AirTermObjType_)
            {
              this->SimConnect_AirTermObjType_.set (r);
              continue;
            }
          }

          // SimConnect_AirTermName
          //
          if (n.name () == "SimConnect_AirTermName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_AirTermName_type > r (
              SimConnect_AirTermName_traits::create (i, f, this));

            if (!this->SimConnect_AirTermName_)
            {
              this->SimConnect_AirTermName_.set (r);
              continue;
            }
          }

          // SimConnect_NomUpstreamLeakageFract
          //
          if (n.name () == "SimConnect_NomUpstreamLeakageFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimConnect_NomUpstreamLeakageFract_)
            {
              this->SimConnect_NomUpstreamLeakageFract_.set (SimConnect_NomUpstreamLeakageFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimConnect_ConstDownstreamLeakageFract
          //
          if (n.name () == "SimConnect_ConstDownstreamLeakageFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimConnect_ConstDownstreamLeakageFract_)
            {
              this->SimConnect_ConstDownstreamLeakageFract_.set (SimConnect_ConstDownstreamLeakageFract_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimConnection_AirFlow_Default* SimConnection_AirFlow_Default::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimConnection_AirFlow_Default (*this, f, c);
      }

      SimConnection_AirFlow_Default& SimConnection_AirFlow_Default::
      operator= (const SimConnection_AirFlow_Default& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimConnection_AirFlow& > (*this) = x;
          this->SimConnect_Name_ = x.SimConnect_Name_;
          this->SimConnect_AirDistUnitOutletNodeName_ = x.SimConnect_AirDistUnitOutletNodeName_;
          this->SimConnect_AirTermObjType_ = x.SimConnect_AirTermObjType_;
          this->SimConnect_AirTermName_ = x.SimConnect_AirTermName_;
          this->SimConnect_NomUpstreamLeakageFract_ = x.SimConnect_NomUpstreamLeakageFract_;
          this->SimConnect_ConstDownstreamLeakageFract_ = x.SimConnect_ConstDownstreamLeakageFract_;
        }

        return *this;
      }

      SimConnection_AirFlow_Default::
      ~SimConnection_AirFlow_Default ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

