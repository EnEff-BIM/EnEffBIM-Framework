// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan
      // 

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_Name_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_Name () const
      {
        return this->SimFlowTerm_Name_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_Name_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_Name ()
      {
        return this->SimFlowTerm_Name_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_Name (const SimFlowTerm_Name_type& x)
      {
        this->SimFlowTerm_Name_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_Name (const SimFlowTerm_Name_optional& x)
      {
        this->SimFlowTerm_Name_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_Name (::std::auto_ptr< SimFlowTerm_Name_type > x)
      {
        this->SimFlowTerm_Name_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingCoilObjType_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilObjType () const
      {
        return this->SimFlowTerm_HeatingCoilObjType_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingCoilObjType_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilObjType ()
      {
        return this->SimFlowTerm_HeatingCoilObjType_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilObjType (const SimFlowTerm_HeatingCoilObjType_type& x)
      {
        this->SimFlowTerm_HeatingCoilObjType_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilObjType (const SimFlowTerm_HeatingCoilObjType_optional& x)
      {
        this->SimFlowTerm_HeatingCoilObjType_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilObjType (::std::auto_ptr< SimFlowTerm_HeatingCoilObjType_type > x)
      {
        this->SimFlowTerm_HeatingCoilObjType_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AvailSchedName () const
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AvailSchedName ()
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_type& x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_optional& x)
      {
        this->SimFlowTerm_AvailSchedName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AvailSchedName (::std::auto_ptr< SimFlowTerm_AvailSchedName_type > x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_AirOutNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirOutNodeName () const
      {
        return this->SimFlowTerm_AirOutNodeName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_AirOutNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirOutNodeName ()
      {
        return this->SimFlowTerm_AirOutNodeName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirOutNodeName (const SimFlowTerm_AirOutNodeName_type& x)
      {
        this->SimFlowTerm_AirOutNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirOutNodeName (const SimFlowTerm_AirOutNodeName_optional& x)
      {
        this->SimFlowTerm_AirOutNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirOutNodeName (::std::auto_ptr< SimFlowTerm_AirOutNodeName_type > x)
      {
        this->SimFlowTerm_AirOutNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_AirInNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirInNodeName () const
      {
        return this->SimFlowTerm_AirInNodeName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_AirInNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirInNodeName ()
      {
        return this->SimFlowTerm_AirInNodeName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirInNodeName (const SimFlowTerm_AirInNodeName_type& x)
      {
        this->SimFlowTerm_AirInNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirInNodeName (const SimFlowTerm_AirInNodeName_optional& x)
      {
        this->SimFlowTerm_AirInNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_AirInNodeName (::std::auto_ptr< SimFlowTerm_AirInNodeName_type > x)
      {
        this->SimFlowTerm_AirInNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_ZoneMinAirFlowFract_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_ZoneMinAirFlowFract () const
      {
        return this->SimFlowTerm_ZoneMinAirFlowFract_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_ZoneMinAirFlowFract_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_ZoneMinAirFlowFract ()
      {
        return this->SimFlowTerm_ZoneMinAirFlowFract_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_ZoneMinAirFlowFract (const SimFlowTerm_ZoneMinAirFlowFract_type& x)
      {
        this->SimFlowTerm_ZoneMinAirFlowFract_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_ZoneMinAirFlowFract (const SimFlowTerm_ZoneMinAirFlowFract_optional& x)
      {
        this->SimFlowTerm_ZoneMinAirFlowFract_ = x;
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HotWaterOrSteamInletNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HotWaterOrSteamInletNodeName () const
      {
        return this->SimFlowTerm_HotWaterOrSteamInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HotWaterOrSteamInletNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HotWaterOrSteamInletNodeName ()
      {
        return this->SimFlowTerm_HotWaterOrSteamInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HotWaterOrSteamInletNodeName (const SimFlowTerm_HotWaterOrSteamInletNodeName_type& x)
      {
        this->SimFlowTerm_HotWaterOrSteamInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HotWaterOrSteamInletNodeName (const SimFlowTerm_HotWaterOrSteamInletNodeName_optional& x)
      {
        this->SimFlowTerm_HotWaterOrSteamInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HotWaterOrSteamInletNodeName (::std::auto_ptr< SimFlowTerm_HotWaterOrSteamInletNodeName_type > x)
      {
        this->SimFlowTerm_HotWaterOrSteamInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MaxHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate () const
      {
        return this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MaxHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate ()
      {
        return this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate (const SimFlowTerm_MaxHotWaterOrSteamFlowRate_type& x)
      {
        this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate (const SimFlowTerm_MaxHotWaterOrSteamFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MinHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MinHotWaterOrSteamFlowRate () const
      {
        return this->SimFlowTerm_MinHotWaterOrSteamFlowRate_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MinHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MinHotWaterOrSteamFlowRate ()
      {
        return this->SimFlowTerm_MinHotWaterOrSteamFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MinHotWaterOrSteamFlowRate (const SimFlowTerm_MinHotWaterOrSteamFlowRate_type& x)
      {
        this->SimFlowTerm_MinHotWaterOrSteamFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MinHotWaterOrSteamFlowRate (const SimFlowTerm_MinHotWaterOrSteamFlowRate_optional& x)
      {
        this->SimFlowTerm_MinHotWaterOrSteamFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MaxCoolAirFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxCoolAirFlowRate () const
      {
        return this->SimFlowTerm_MaxCoolAirFlowRate_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MaxCoolAirFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxCoolAirFlowRate ()
      {
        return this->SimFlowTerm_MaxCoolAirFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxCoolAirFlowRate (const SimFlowTerm_MaxCoolAirFlowRate_type& x)
      {
        this->SimFlowTerm_MaxCoolAirFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxCoolAirFlowRate (const SimFlowTerm_MaxCoolAirFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxCoolAirFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MaxHeatingAirFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHeatingAirFlowRate () const
      {
        return this->SimFlowTerm_MaxHeatingAirFlowRate_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_MaxHeatingAirFlowRate_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHeatingAirFlowRate ()
      {
        return this->SimFlowTerm_MaxHeatingAirFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHeatingAirFlowRate (const SimFlowTerm_MaxHeatingAirFlowRate_type& x)
      {
        this->SimFlowTerm_MaxHeatingAirFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_MaxHeatingAirFlowRate (const SimFlowTerm_MaxHeatingAirFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxHeatingAirFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingCoilAirInletNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilAirInletNodeName () const
      {
        return this->SimFlowTerm_HeatingCoilAirInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingCoilAirInletNodeName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilAirInletNodeName ()
      {
        return this->SimFlowTerm_HeatingCoilAirInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilAirInletNodeName (const SimFlowTerm_HeatingCoilAirInletNodeName_type& x)
      {
        this->SimFlowTerm_HeatingCoilAirInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilAirInletNodeName (const SimFlowTerm_HeatingCoilAirInletNodeName_optional& x)
      {
        this->SimFlowTerm_HeatingCoilAirInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilAirInletNodeName (::std::auto_ptr< SimFlowTerm_HeatingCoilAirInletNodeName_type > x)
      {
        this->SimFlowTerm_HeatingCoilAirInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_FanObjType_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanObjType () const
      {
        return this->SimFlowTerm_FanObjType_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_FanObjType_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanObjType ()
      {
        return this->SimFlowTerm_FanObjType_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanObjType (const SimFlowTerm_FanObjType_type& x)
      {
        this->SimFlowTerm_FanObjType_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanObjType (const SimFlowTerm_FanObjType_optional& x)
      {
        this->SimFlowTerm_FanObjType_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanObjType (::std::auto_ptr< SimFlowTerm_FanObjType_type > x)
      {
        this->SimFlowTerm_FanObjType_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_FanName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanName () const
      {
        return this->SimFlowTerm_FanName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_FanName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanName ()
      {
        return this->SimFlowTerm_FanName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanName (const SimFlowTerm_FanName_type& x)
      {
        this->SimFlowTerm_FanName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanName (const SimFlowTerm_FanName_optional& x)
      {
        this->SimFlowTerm_FanName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_FanName (::std::auto_ptr< SimFlowTerm_FanName_type > x)
      {
        this->SimFlowTerm_FanName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingCoilName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilName () const
      {
        return this->SimFlowTerm_HeatingCoilName_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingCoilName_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilName ()
      {
        return this->SimFlowTerm_HeatingCoilName_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilName (const SimFlowTerm_HeatingCoilName_type& x)
      {
        this->SimFlowTerm_HeatingCoilName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilName (const SimFlowTerm_HeatingCoilName_optional& x)
      {
        this->SimFlowTerm_HeatingCoilName_ = x;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingCoilName (::std::auto_ptr< SimFlowTerm_HeatingCoilName_type > x)
      {
        this->SimFlowTerm_HeatingCoilName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingConvergTol_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingConvergTol () const
      {
        return this->SimFlowTerm_HeatingConvergTol_;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::SimFlowTerm_HeatingConvergTol_optional& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingConvergTol ()
      {
        return this->SimFlowTerm_HeatingConvergTol_;
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingConvergTol (const SimFlowTerm_HeatingConvergTol_type& x)
      {
        this->SimFlowTerm_HeatingConvergTol_.set (x);
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerm_HeatingConvergTol (const SimFlowTerm_HeatingConvergTol_optional& x)
      {
        this->SimFlowTerm_HeatingConvergTol_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan
      //

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan ()
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_HeatingCoilObjType_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_AirOutNodeName_ (this),
        SimFlowTerm_AirInNodeName_ (this),
        SimFlowTerm_ZoneMinAirFlowFract_ (this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MaxCoolAirFlowRate_ (this),
        SimFlowTerm_MaxHeatingAirFlowRate_ (this),
        SimFlowTerm_HeatingCoilAirInletNodeName_ (this),
        SimFlowTerm_FanObjType_ (this),
        SimFlowTerm_FanName_ (this),
        SimFlowTerm_HeatingCoilName_ (this),
        SimFlowTerm_HeatingConvergTol_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (RefId),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_HeatingCoilObjType_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_AirOutNodeName_ (this),
        SimFlowTerm_AirInNodeName_ (this),
        SimFlowTerm_ZoneMinAirFlowFract_ (this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MaxCoolAirFlowRate_ (this),
        SimFlowTerm_MaxHeatingAirFlowRate_ (this),
        SimFlowTerm_HeatingCoilAirInletNodeName_ (this),
        SimFlowTerm_FanObjType_ (this),
        SimFlowTerm_FanName_ (this),
        SimFlowTerm_HeatingCoilName_ (this),
        SimFlowTerm_HeatingConvergTol_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan (const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (x, f, c),
        SimFlowTerm_Name_ (x.SimFlowTerm_Name_, f, this),
        SimFlowTerm_HeatingCoilObjType_ (x.SimFlowTerm_HeatingCoilObjType_, f, this),
        SimFlowTerm_AvailSchedName_ (x.SimFlowTerm_AvailSchedName_, f, this),
        SimFlowTerm_AirOutNodeName_ (x.SimFlowTerm_AirOutNodeName_, f, this),
        SimFlowTerm_AirInNodeName_ (x.SimFlowTerm_AirInNodeName_, f, this),
        SimFlowTerm_ZoneMinAirFlowFract_ (x.SimFlowTerm_ZoneMinAirFlowFract_, f, this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (x.SimFlowTerm_HotWaterOrSteamInletNodeName_, f, this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (x.SimFlowTerm_MaxHotWaterOrSteamFlowRate_, f, this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (x.SimFlowTerm_MinHotWaterOrSteamFlowRate_, f, this),
        SimFlowTerm_MaxCoolAirFlowRate_ (x.SimFlowTerm_MaxCoolAirFlowRate_, f, this),
        SimFlowTerm_MaxHeatingAirFlowRate_ (x.SimFlowTerm_MaxHeatingAirFlowRate_, f, this),
        SimFlowTerm_HeatingCoilAirInletNodeName_ (x.SimFlowTerm_HeatingCoilAirInletNodeName_, f, this),
        SimFlowTerm_FanObjType_ (x.SimFlowTerm_FanObjType_, f, this),
        SimFlowTerm_FanName_ (x.SimFlowTerm_FanName_, f, this),
        SimFlowTerm_HeatingCoilName_ (x.SimFlowTerm_HeatingCoilName_, f, this),
        SimFlowTerm_HeatingConvergTol_ (x.SimFlowTerm_HeatingConvergTol_, f, this)
      {
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (e, f | ::xml_schema::flags::base, c),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_HeatingCoilObjType_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_AirOutNodeName_ (this),
        SimFlowTerm_AirInNodeName_ (this),
        SimFlowTerm_ZoneMinAirFlowFract_ (this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MaxCoolAirFlowRate_ (this),
        SimFlowTerm_MaxHeatingAirFlowRate_ (this),
        SimFlowTerm_HeatingCoilAirInletNodeName_ (this),
        SimFlowTerm_FanObjType_ (this),
        SimFlowTerm_FanName_ (this),
        SimFlowTerm_HeatingCoilName_ (this),
        SimFlowTerm_HeatingConvergTol_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowTerminal_AirTerminal::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowTerm_Name
          //
          if (n.name () == "SimFlowTerm_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_Name_type > r (
              SimFlowTerm_Name_traits::create (i, f, this));

            if (!this->SimFlowTerm_Name_)
            {
              this->SimFlowTerm_Name_.set (r);
              continue;
            }
          }

          // SimFlowTerm_HeatingCoilObjType
          //
          if (n.name () == "SimFlowTerm_HeatingCoilObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_HeatingCoilObjType_type > r (
              SimFlowTerm_HeatingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowTerm_HeatingCoilObjType_)
            {
              this->SimFlowTerm_HeatingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowTerm_AvailSchedName
          //
          if (n.name () == "SimFlowTerm_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_AvailSchedName_type > r (
              SimFlowTerm_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_AvailSchedName_)
            {
              this->SimFlowTerm_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_AirOutNodeName
          //
          if (n.name () == "SimFlowTerm_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_AirOutNodeName_type > r (
              SimFlowTerm_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_AirOutNodeName_)
            {
              this->SimFlowTerm_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_AirInNodeName
          //
          if (n.name () == "SimFlowTerm_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_AirInNodeName_type > r (
              SimFlowTerm_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_AirInNodeName_)
            {
              this->SimFlowTerm_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ZoneMinAirFlowFract
          //
          if (n.name () == "SimFlowTerm_ZoneMinAirFlowFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ZoneMinAirFlowFract_)
            {
              this->SimFlowTerm_ZoneMinAirFlowFract_.set (SimFlowTerm_ZoneMinAirFlowFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_HotWaterOrSteamInletNodeName
          //
          if (n.name () == "SimFlowTerm_HotWaterOrSteamInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_HotWaterOrSteamInletNodeName_type > r (
              SimFlowTerm_HotWaterOrSteamInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_HotWaterOrSteamInletNodeName_)
            {
              this->SimFlowTerm_HotWaterOrSteamInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_MaxHotWaterOrSteamFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxHotWaterOrSteamFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_)
            {
              this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_.set (SimFlowTerm_MaxHotWaterOrSteamFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_MinHotWaterOrSteamFlowRate
          //
          if (n.name () == "SimFlowTerm_MinHotWaterOrSteamFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_MinHotWaterOrSteamFlowRate_)
            {
              this->SimFlowTerm_MinHotWaterOrSteamFlowRate_.set (SimFlowTerm_MinHotWaterOrSteamFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_MaxCoolAirFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxCoolAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_MaxCoolAirFlowRate_)
            {
              this->SimFlowTerm_MaxCoolAirFlowRate_.set (SimFlowTerm_MaxCoolAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_MaxHeatingAirFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxHeatingAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_MaxHeatingAirFlowRate_)
            {
              this->SimFlowTerm_MaxHeatingAirFlowRate_.set (SimFlowTerm_MaxHeatingAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_HeatingCoilAirInletNodeName
          //
          if (n.name () == "SimFlowTerm_HeatingCoilAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_HeatingCoilAirInletNodeName_type > r (
              SimFlowTerm_HeatingCoilAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_HeatingCoilAirInletNodeName_)
            {
              this->SimFlowTerm_HeatingCoilAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_FanObjType
          //
          if (n.name () == "SimFlowTerm_FanObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_FanObjType_type > r (
              SimFlowTerm_FanObjType_traits::create (i, f, this));

            if (!this->SimFlowTerm_FanObjType_)
            {
              this->SimFlowTerm_FanObjType_.set (r);
              continue;
            }
          }

          // SimFlowTerm_FanName
          //
          if (n.name () == "SimFlowTerm_FanName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_FanName_type > r (
              SimFlowTerm_FanName_traits::create (i, f, this));

            if (!this->SimFlowTerm_FanName_)
            {
              this->SimFlowTerm_FanName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_HeatingCoilName
          //
          if (n.name () == "SimFlowTerm_HeatingCoilName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_HeatingCoilName_type > r (
              SimFlowTerm_HeatingCoilName_traits::create (i, f, this));

            if (!this->SimFlowTerm_HeatingCoilName_)
            {
              this->SimFlowTerm_HeatingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_HeatingConvergTol
          //
          if (n.name () == "SimFlowTerm_HeatingConvergTol" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_HeatingConvergTol_)
            {
              this->SimFlowTerm_HeatingConvergTol_.set (SimFlowTerm_HeatingConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan* SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan (*this, f, c);
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan& SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      operator= (const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal& > (*this) = x;
          this->SimFlowTerm_Name_ = x.SimFlowTerm_Name_;
          this->SimFlowTerm_HeatingCoilObjType_ = x.SimFlowTerm_HeatingCoilObjType_;
          this->SimFlowTerm_AvailSchedName_ = x.SimFlowTerm_AvailSchedName_;
          this->SimFlowTerm_AirOutNodeName_ = x.SimFlowTerm_AirOutNodeName_;
          this->SimFlowTerm_AirInNodeName_ = x.SimFlowTerm_AirInNodeName_;
          this->SimFlowTerm_ZoneMinAirFlowFract_ = x.SimFlowTerm_ZoneMinAirFlowFract_;
          this->SimFlowTerm_HotWaterOrSteamInletNodeName_ = x.SimFlowTerm_HotWaterOrSteamInletNodeName_;
          this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_ = x.SimFlowTerm_MaxHotWaterOrSteamFlowRate_;
          this->SimFlowTerm_MinHotWaterOrSteamFlowRate_ = x.SimFlowTerm_MinHotWaterOrSteamFlowRate_;
          this->SimFlowTerm_MaxCoolAirFlowRate_ = x.SimFlowTerm_MaxCoolAirFlowRate_;
          this->SimFlowTerm_MaxHeatingAirFlowRate_ = x.SimFlowTerm_MaxHeatingAirFlowRate_;
          this->SimFlowTerm_HeatingCoilAirInletNodeName_ = x.SimFlowTerm_HeatingCoilAirInletNodeName_;
          this->SimFlowTerm_FanObjType_ = x.SimFlowTerm_FanObjType_;
          this->SimFlowTerm_FanName_ = x.SimFlowTerm_FanName_;
          this->SimFlowTerm_HeatingCoilName_ = x.SimFlowTerm_HeatingCoilName_;
          this->SimFlowTerm_HeatingConvergTol_ = x.SimFlowTerm_HeatingConvergTol_;
        }

        return *this;
      }

      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan::
      ~SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

