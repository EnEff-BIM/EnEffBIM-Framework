// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimController_OutdoorAir_OutdoorAirPreconditioningController.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimController_OutdoorAir_OutdoorAirPreconditioningController
      // 

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_Name_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_Name () const
      {
        return this->SimCntrl_Name_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_Name_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_Name ()
      {
        return this->SimCntrl_Name_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_Name (const SimCntrl_Name_type& x)
      {
        this->SimCntrl_Name_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_Name (const SimCntrl_Name_optional& x)
      {
        this->SimCntrl_Name_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_Name (::std::auto_ptr< SimCntrl_Name_type > x)
      {
        this->SimCntrl_Name_.set (x);
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_CntlVar_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_CntlVar () const
      {
        return this->SimCntrl_CntlVar_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_CntlVar_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_CntlVar ()
      {
        return this->SimCntrl_CntlVar_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_CntlVar (const SimCntrl_CntlVar_type& x)
      {
        this->SimCntrl_CntlVar_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_CntlVar (const SimCntrl_CntlVar_optional& x)
      {
        this->SimCntrl_CntlVar_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_CntlVar (::std::auto_ptr< SimCntrl_CntlVar_type > x)
      {
        this->SimCntrl_CntlVar_.set (x);
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MinSetpointTemp_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointTemp () const
      {
        return this->SimCntrl_MinSetpointTemp_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MinSetpointTemp_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointTemp ()
      {
        return this->SimCntrl_MinSetpointTemp_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointTemp (const SimCntrl_MinSetpointTemp_type& x)
      {
        this->SimCntrl_MinSetpointTemp_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointTemp (const SimCntrl_MinSetpointTemp_optional& x)
      {
        this->SimCntrl_MinSetpointTemp_ = x;
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MaxSetpointTemp_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointTemp () const
      {
        return this->SimCntrl_MaxSetpointTemp_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MaxSetpointTemp_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointTemp ()
      {
        return this->SimCntrl_MaxSetpointTemp_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointTemp (const SimCntrl_MaxSetpointTemp_type& x)
      {
        this->SimCntrl_MaxSetpointTemp_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointTemp (const SimCntrl_MaxSetpointTemp_optional& x)
      {
        this->SimCntrl_MaxSetpointTemp_ = x;
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MinSetpointHumidRatio_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointHumidRatio () const
      {
        return this->SimCntrl_MinSetpointHumidRatio_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MinSetpointHumidRatio_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointHumidRatio ()
      {
        return this->SimCntrl_MinSetpointHumidRatio_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointHumidRatio (const SimCntrl_MinSetpointHumidRatio_type& x)
      {
        this->SimCntrl_MinSetpointHumidRatio_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MinSetpointHumidRatio (const SimCntrl_MinSetpointHumidRatio_optional& x)
      {
        this->SimCntrl_MinSetpointHumidRatio_ = x;
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MaxSetpointHumidRatio_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointHumidRatio () const
      {
        return this->SimCntrl_MaxSetpointHumidRatio_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MaxSetpointHumidRatio_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointHumidRatio ()
      {
        return this->SimCntrl_MaxSetpointHumidRatio_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointHumidRatio (const SimCntrl_MaxSetpointHumidRatio_type& x)
      {
        this->SimCntrl_MaxSetpointHumidRatio_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MaxSetpointHumidRatio (const SimCntrl_MaxSetpointHumidRatio_optional& x)
      {
        this->SimCntrl_MaxSetpointHumidRatio_ = x;
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_RefSetpointNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RefSetpointNodeName () const
      {
        return this->SimCntrl_RefSetpointNodeName_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_RefSetpointNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RefSetpointNodeName ()
      {
        return this->SimCntrl_RefSetpointNodeName_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RefSetpointNodeName (const SimCntrl_RefSetpointNodeName_type& x)
      {
        this->SimCntrl_RefSetpointNodeName_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RefSetpointNodeName (const SimCntrl_RefSetpointNodeName_optional& x)
      {
        this->SimCntrl_RefSetpointNodeName_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RefSetpointNodeName (::std::auto_ptr< SimCntrl_RefSetpointNodeName_type > x)
      {
        this->SimCntrl_RefSetpointNodeName_.set (x);
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MixedAirStreamNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MixedAirStreamNodeName () const
      {
        return this->SimCntrl_MixedAirStreamNodeName_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_MixedAirStreamNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MixedAirStreamNodeName ()
      {
        return this->SimCntrl_MixedAirStreamNodeName_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MixedAirStreamNodeName (const SimCntrl_MixedAirStreamNodeName_type& x)
      {
        this->SimCntrl_MixedAirStreamNodeName_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MixedAirStreamNodeName (const SimCntrl_MixedAirStreamNodeName_optional& x)
      {
        this->SimCntrl_MixedAirStreamNodeName_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_MixedAirStreamNodeName (::std::auto_ptr< SimCntrl_MixedAirStreamNodeName_type > x)
      {
        this->SimCntrl_MixedAirStreamNodeName_.set (x);
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_OutdrAirStreamNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_OutdrAirStreamNodeName () const
      {
        return this->SimCntrl_OutdrAirStreamNodeName_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_OutdrAirStreamNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_OutdrAirStreamNodeName ()
      {
        return this->SimCntrl_OutdrAirStreamNodeName_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_OutdrAirStreamNodeName (const SimCntrl_OutdrAirStreamNodeName_type& x)
      {
        this->SimCntrl_OutdrAirStreamNodeName_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_OutdrAirStreamNodeName (const SimCntrl_OutdrAirStreamNodeName_optional& x)
      {
        this->SimCntrl_OutdrAirStreamNodeName_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_OutdrAirStreamNodeName (::std::auto_ptr< SimCntrl_OutdrAirStreamNodeName_type > x)
      {
        this->SimCntrl_OutdrAirStreamNodeName_.set (x);
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_RtnAirStreamNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RtnAirStreamNodeName () const
      {
        return this->SimCntrl_RtnAirStreamNodeName_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_RtnAirStreamNodeName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RtnAirStreamNodeName ()
      {
        return this->SimCntrl_RtnAirStreamNodeName_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RtnAirStreamNodeName (const SimCntrl_RtnAirStreamNodeName_type& x)
      {
        this->SimCntrl_RtnAirStreamNodeName_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RtnAirStreamNodeName (const SimCntrl_RtnAirStreamNodeName_optional& x)
      {
        this->SimCntrl_RtnAirStreamNodeName_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_RtnAirStreamNodeName (::std::auto_ptr< SimCntrl_RtnAirStreamNodeName_type > x)
      {
        this->SimCntrl_RtnAirStreamNodeName_.set (x);
      }

      const SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_SetpointNodeOrNodeListName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_SetpointNodeOrNodeListName () const
      {
        return this->SimCntrl_SetpointNodeOrNodeListName_;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::SimCntrl_SetpointNodeOrNodeListName_optional& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_SetpointNodeOrNodeListName ()
      {
        return this->SimCntrl_SetpointNodeOrNodeListName_;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_SetpointNodeOrNodeListName (const SimCntrl_SetpointNodeOrNodeListName_type& x)
      {
        this->SimCntrl_SetpointNodeOrNodeListName_.set (x);
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_SetpointNodeOrNodeListName (const SimCntrl_SetpointNodeOrNodeListName_optional& x)
      {
        this->SimCntrl_SetpointNodeOrNodeListName_ = x;
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimCntrl_SetpointNodeOrNodeListName (::std::auto_ptr< SimCntrl_SetpointNodeOrNodeListName_type > x)
      {
        this->SimCntrl_SetpointNodeOrNodeListName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimController_OutdoorAir_OutdoorAirPreconditioningController
      //

      SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimController_OutdoorAir_OutdoorAirPreconditioningController ()
      : ::schema::simxml::MepModel::SimController_OutdoorAir (),
        SimCntrl_Name_ (this),
        SimCntrl_CntlVar_ (this),
        SimCntrl_MinSetpointTemp_ (this),
        SimCntrl_MaxSetpointTemp_ (this),
        SimCntrl_MinSetpointHumidRatio_ (this),
        SimCntrl_MaxSetpointHumidRatio_ (this),
        SimCntrl_RefSetpointNodeName_ (this),
        SimCntrl_MixedAirStreamNodeName_ (this),
        SimCntrl_OutdrAirStreamNodeName_ (this),
        SimCntrl_RtnAirStreamNodeName_ (this),
        SimCntrl_SetpointNodeOrNodeListName_ (this)
      {
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimController_OutdoorAir_OutdoorAirPreconditioningController (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimController_OutdoorAir (RefId),
        SimCntrl_Name_ (this),
        SimCntrl_CntlVar_ (this),
        SimCntrl_MinSetpointTemp_ (this),
        SimCntrl_MaxSetpointTemp_ (this),
        SimCntrl_MinSetpointHumidRatio_ (this),
        SimCntrl_MaxSetpointHumidRatio_ (this),
        SimCntrl_RefSetpointNodeName_ (this),
        SimCntrl_MixedAirStreamNodeName_ (this),
        SimCntrl_OutdrAirStreamNodeName_ (this),
        SimCntrl_RtnAirStreamNodeName_ (this),
        SimCntrl_SetpointNodeOrNodeListName_ (this)
      {
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimController_OutdoorAir_OutdoorAirPreconditioningController (const SimController_OutdoorAir_OutdoorAirPreconditioningController& x,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimController_OutdoorAir (x, f, c),
        SimCntrl_Name_ (x.SimCntrl_Name_, f, this),
        SimCntrl_CntlVar_ (x.SimCntrl_CntlVar_, f, this),
        SimCntrl_MinSetpointTemp_ (x.SimCntrl_MinSetpointTemp_, f, this),
        SimCntrl_MaxSetpointTemp_ (x.SimCntrl_MaxSetpointTemp_, f, this),
        SimCntrl_MinSetpointHumidRatio_ (x.SimCntrl_MinSetpointHumidRatio_, f, this),
        SimCntrl_MaxSetpointHumidRatio_ (x.SimCntrl_MaxSetpointHumidRatio_, f, this),
        SimCntrl_RefSetpointNodeName_ (x.SimCntrl_RefSetpointNodeName_, f, this),
        SimCntrl_MixedAirStreamNodeName_ (x.SimCntrl_MixedAirStreamNodeName_, f, this),
        SimCntrl_OutdrAirStreamNodeName_ (x.SimCntrl_OutdrAirStreamNodeName_, f, this),
        SimCntrl_RtnAirStreamNodeName_ (x.SimCntrl_RtnAirStreamNodeName_, f, this),
        SimCntrl_SetpointNodeOrNodeListName_ (x.SimCntrl_SetpointNodeOrNodeListName_, f, this)
      {
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::
      SimController_OutdoorAir_OutdoorAirPreconditioningController (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimController_OutdoorAir (e, f | ::xml_schema::flags::base, c),
        SimCntrl_Name_ (this),
        SimCntrl_CntlVar_ (this),
        SimCntrl_MinSetpointTemp_ (this),
        SimCntrl_MaxSetpointTemp_ (this),
        SimCntrl_MinSetpointHumidRatio_ (this),
        SimCntrl_MaxSetpointHumidRatio_ (this),
        SimCntrl_RefSetpointNodeName_ (this),
        SimCntrl_MixedAirStreamNodeName_ (this),
        SimCntrl_OutdrAirStreamNodeName_ (this),
        SimCntrl_RtnAirStreamNodeName_ (this),
        SimCntrl_SetpointNodeOrNodeListName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimController_OutdoorAir_OutdoorAirPreconditioningController::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimController_OutdoorAir::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrl_Name
          //
          if (n.name () == "SimCntrl_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_Name_type > r (
              SimCntrl_Name_traits::create (i, f, this));

            if (!this->SimCntrl_Name_)
            {
              this->SimCntrl_Name_.set (r);
              continue;
            }
          }

          // SimCntrl_CntlVar
          //
          if (n.name () == "SimCntrl_CntlVar" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_CntlVar_type > r (
              SimCntrl_CntlVar_traits::create (i, f, this));

            if (!this->SimCntrl_CntlVar_)
            {
              this->SimCntrl_CntlVar_.set (r);
              continue;
            }
          }

          // SimCntrl_MinSetpointTemp
          //
          if (n.name () == "SimCntrl_MinSetpointTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimCntrl_MinSetpointTemp_)
            {
              this->SimCntrl_MinSetpointTemp_.set (SimCntrl_MinSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrl_MaxSetpointTemp
          //
          if (n.name () == "SimCntrl_MaxSetpointTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimCntrl_MaxSetpointTemp_)
            {
              this->SimCntrl_MaxSetpointTemp_.set (SimCntrl_MaxSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrl_MinSetpointHumidRatio
          //
          if (n.name () == "SimCntrl_MinSetpointHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimCntrl_MinSetpointHumidRatio_)
            {
              this->SimCntrl_MinSetpointHumidRatio_.set (SimCntrl_MinSetpointHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrl_MaxSetpointHumidRatio
          //
          if (n.name () == "SimCntrl_MaxSetpointHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimCntrl_MaxSetpointHumidRatio_)
            {
              this->SimCntrl_MaxSetpointHumidRatio_.set (SimCntrl_MaxSetpointHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrl_RefSetpointNodeName
          //
          if (n.name () == "SimCntrl_RefSetpointNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_RefSetpointNodeName_type > r (
              SimCntrl_RefSetpointNodeName_traits::create (i, f, this));

            if (!this->SimCntrl_RefSetpointNodeName_)
            {
              this->SimCntrl_RefSetpointNodeName_.set (r);
              continue;
            }
          }

          // SimCntrl_MixedAirStreamNodeName
          //
          if (n.name () == "SimCntrl_MixedAirStreamNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_MixedAirStreamNodeName_type > r (
              SimCntrl_MixedAirStreamNodeName_traits::create (i, f, this));

            if (!this->SimCntrl_MixedAirStreamNodeName_)
            {
              this->SimCntrl_MixedAirStreamNodeName_.set (r);
              continue;
            }
          }

          // SimCntrl_OutdrAirStreamNodeName
          //
          if (n.name () == "SimCntrl_OutdrAirStreamNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_OutdrAirStreamNodeName_type > r (
              SimCntrl_OutdrAirStreamNodeName_traits::create (i, f, this));

            if (!this->SimCntrl_OutdrAirStreamNodeName_)
            {
              this->SimCntrl_OutdrAirStreamNodeName_.set (r);
              continue;
            }
          }

          // SimCntrl_RtnAirStreamNodeName
          //
          if (n.name () == "SimCntrl_RtnAirStreamNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_RtnAirStreamNodeName_type > r (
              SimCntrl_RtnAirStreamNodeName_traits::create (i, f, this));

            if (!this->SimCntrl_RtnAirStreamNodeName_)
            {
              this->SimCntrl_RtnAirStreamNodeName_.set (r);
              continue;
            }
          }

          // SimCntrl_SetpointNodeOrNodeListName
          //
          if (n.name () == "SimCntrl_SetpointNodeOrNodeListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimCntrl_SetpointNodeOrNodeListName_type > r (
              SimCntrl_SetpointNodeOrNodeListName_traits::create (i, f, this));

            if (!this->SimCntrl_SetpointNodeOrNodeListName_)
            {
              this->SimCntrl_SetpointNodeOrNodeListName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController* SimController_OutdoorAir_OutdoorAirPreconditioningController::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimController_OutdoorAir_OutdoorAirPreconditioningController (*this, f, c);
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController& SimController_OutdoorAir_OutdoorAirPreconditioningController::
      operator= (const SimController_OutdoorAir_OutdoorAirPreconditioningController& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimController_OutdoorAir& > (*this) = x;
          this->SimCntrl_Name_ = x.SimCntrl_Name_;
          this->SimCntrl_CntlVar_ = x.SimCntrl_CntlVar_;
          this->SimCntrl_MinSetpointTemp_ = x.SimCntrl_MinSetpointTemp_;
          this->SimCntrl_MaxSetpointTemp_ = x.SimCntrl_MaxSetpointTemp_;
          this->SimCntrl_MinSetpointHumidRatio_ = x.SimCntrl_MinSetpointHumidRatio_;
          this->SimCntrl_MaxSetpointHumidRatio_ = x.SimCntrl_MaxSetpointHumidRatio_;
          this->SimCntrl_RefSetpointNodeName_ = x.SimCntrl_RefSetpointNodeName_;
          this->SimCntrl_MixedAirStreamNodeName_ = x.SimCntrl_MixedAirStreamNodeName_;
          this->SimCntrl_OutdrAirStreamNodeName_ = x.SimCntrl_OutdrAirStreamNodeName_;
          this->SimCntrl_RtnAirStreamNodeName_ = x.SimCntrl_RtnAirStreamNodeName_;
          this->SimCntrl_SetpointNodeOrNodeListName_ = x.SimCntrl_SetpointNodeOrNodeListName_;
        }

        return *this;
      }

      SimController_OutdoorAir_OutdoorAirPreconditioningController::
      ~SimController_OutdoorAir_OutdoorAirPreconditioningController ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

