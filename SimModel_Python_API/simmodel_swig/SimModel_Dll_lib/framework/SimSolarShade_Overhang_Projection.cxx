// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSolarShade_Overhang_Projection.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSolarShade_Overhang_Projection
      // 

      const SimSolarShade_Overhang_Projection::SimSolarShade_WindOrDoorName_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_WindOrDoorName () const
      {
        return this->SimSolarShade_WindOrDoorName_;
      }

      SimSolarShade_Overhang_Projection::SimSolarShade_WindOrDoorName_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_WindOrDoorName ()
      {
        return this->SimSolarShade_WindOrDoorName_;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_WindOrDoorName (const SimSolarShade_WindOrDoorName_type& x)
      {
        this->SimSolarShade_WindOrDoorName_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_WindOrDoorName (const SimSolarShade_WindOrDoorName_optional& x)
      {
        this->SimSolarShade_WindOrDoorName_ = x;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_WindOrDoorName (::std::auto_ptr< SimSolarShade_WindOrDoorName_type > x)
      {
        this->SimSolarShade_WindOrDoorName_.set (x);
      }

      const SimSolarShade_Overhang_Projection::SimSolarShade_HtAbvWindOrDoor_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_HtAbvWindOrDoor () const
      {
        return this->SimSolarShade_HtAbvWindOrDoor_;
      }

      SimSolarShade_Overhang_Projection::SimSolarShade_HtAbvWindOrDoor_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_HtAbvWindOrDoor ()
      {
        return this->SimSolarShade_HtAbvWindOrDoor_;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_HtAbvWindOrDoor (const SimSolarShade_HtAbvWindOrDoor_type& x)
      {
        this->SimSolarShade_HtAbvWindOrDoor_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_HtAbvWindOrDoor (const SimSolarShade_HtAbvWindOrDoor_optional& x)
      {
        this->SimSolarShade_HtAbvWindOrDoor_ = x;
      }

      const SimSolarShade_Overhang_Projection::SimSolarShade_TiltAngFromWind_Door_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_TiltAngFromWind_Door () const
      {
        return this->SimSolarShade_TiltAngFromWind_Door_;
      }

      SimSolarShade_Overhang_Projection::SimSolarShade_TiltAngFromWind_Door_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_TiltAngFromWind_Door ()
      {
        return this->SimSolarShade_TiltAngFromWind_Door_;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_TiltAngFromWind_Door (const SimSolarShade_TiltAngFromWind_Door_type& x)
      {
        this->SimSolarShade_TiltAngFromWind_Door_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_TiltAngFromWind_Door (const SimSolarShade_TiltAngFromWind_Door_optional& x)
      {
        this->SimSolarShade_TiltAngFromWind_Door_ = x;
      }

      const SimSolarShade_Overhang_Projection::SimSolarShade_LeftExtFromWind_DoorWidth_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_LeftExtFromWind_DoorWidth () const
      {
        return this->SimSolarShade_LeftExtFromWind_DoorWidth_;
      }

      SimSolarShade_Overhang_Projection::SimSolarShade_LeftExtFromWind_DoorWidth_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_LeftExtFromWind_DoorWidth ()
      {
        return this->SimSolarShade_LeftExtFromWind_DoorWidth_;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_LeftExtFromWind_DoorWidth (const SimSolarShade_LeftExtFromWind_DoorWidth_type& x)
      {
        this->SimSolarShade_LeftExtFromWind_DoorWidth_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_LeftExtFromWind_DoorWidth (const SimSolarShade_LeftExtFromWind_DoorWidth_optional& x)
      {
        this->SimSolarShade_LeftExtFromWind_DoorWidth_ = x;
      }

      const SimSolarShade_Overhang_Projection::SimSolarShade_RightExtFromWind_DoorWidth_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_RightExtFromWind_DoorWidth () const
      {
        return this->SimSolarShade_RightExtFromWind_DoorWidth_;
      }

      SimSolarShade_Overhang_Projection::SimSolarShade_RightExtFromWind_DoorWidth_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_RightExtFromWind_DoorWidth ()
      {
        return this->SimSolarShade_RightExtFromWind_DoorWidth_;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_RightExtFromWind_DoorWidth (const SimSolarShade_RightExtFromWind_DoorWidth_type& x)
      {
        this->SimSolarShade_RightExtFromWind_DoorWidth_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_RightExtFromWind_DoorWidth (const SimSolarShade_RightExtFromWind_DoorWidth_optional& x)
      {
        this->SimSolarShade_RightExtFromWind_DoorWidth_ = x;
      }

      const SimSolarShade_Overhang_Projection::SimSolarShade_DepthAsFracWind_DoorHt_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_DepthAsFracWind_DoorHt () const
      {
        return this->SimSolarShade_DepthAsFracWind_DoorHt_;
      }

      SimSolarShade_Overhang_Projection::SimSolarShade_DepthAsFracWind_DoorHt_optional& SimSolarShade_Overhang_Projection::
      SimSolarShade_DepthAsFracWind_DoorHt ()
      {
        return this->SimSolarShade_DepthAsFracWind_DoorHt_;
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_DepthAsFracWind_DoorHt (const SimSolarShade_DepthAsFracWind_DoorHt_type& x)
      {
        this->SimSolarShade_DepthAsFracWind_DoorHt_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      SimSolarShade_DepthAsFracWind_DoorHt (const SimSolarShade_DepthAsFracWind_DoorHt_optional& x)
      {
        this->SimSolarShade_DepthAsFracWind_DoorHt_ = x;
      }

      const SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_ShadingSurfName_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_ShadingSurfName () const
      {
        return this->ShadingProp_Reflectance_ShadingSurfName_;
      }

      SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_ShadingSurfName_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_ShadingSurfName ()
      {
        return this->ShadingProp_Reflectance_ShadingSurfName_;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_ShadingSurfName (const ShadingProp_Reflectance_ShadingSurfName_type& x)
      {
        this->ShadingProp_Reflectance_ShadingSurfName_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_ShadingSurfName (const ShadingProp_Reflectance_ShadingSurfName_optional& x)
      {
        this->ShadingProp_Reflectance_ShadingSurfName_ = x;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_ShadingSurfName (::std::auto_ptr< ShadingProp_Reflectance_ShadingSurfName_type > x)
      {
        this->ShadingProp_Reflectance_ShadingSurfName_.set (x);
      }

      const SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf () const
      {
        return this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_;
      }

      SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf ()
      {
        return this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_type& x)
      {
        this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_optional& x)
      {
        this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ = x;
      }

      const SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf () const
      {
        return this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_;
      }

      SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf ()
      {
        return this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_type& x)
      {
        this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_optional& x)
      {
        this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ = x;
      }

      const SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed () const
      {
        return this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_;
      }

      SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed ()
      {
        return this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed (const ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_type& x)
      {
        this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed (const ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_optional& x)
      {
        this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ = x;
      }

      const SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_GlazingConstructionName_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_GlazingConstructionName () const
      {
        return this->ShadingProp_Reflectance_GlazingConstructionName_;
      }

      SimSolarShade_Overhang_Projection::ShadingProp_Reflectance_GlazingConstructionName_optional& SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_GlazingConstructionName ()
      {
        return this->ShadingProp_Reflectance_GlazingConstructionName_;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_GlazingConstructionName (const ShadingProp_Reflectance_GlazingConstructionName_type& x)
      {
        this->ShadingProp_Reflectance_GlazingConstructionName_.set (x);
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_GlazingConstructionName (const ShadingProp_Reflectance_GlazingConstructionName_optional& x)
      {
        this->ShadingProp_Reflectance_GlazingConstructionName_ = x;
      }

      void SimSolarShade_Overhang_Projection::
      ShadingProp_Reflectance_GlazingConstructionName (::std::auto_ptr< ShadingProp_Reflectance_GlazingConstructionName_type > x)
      {
        this->ShadingProp_Reflectance_GlazingConstructionName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSolarShade_Overhang_Projection
      //

      SimSolarShade_Overhang_Projection::
      SimSolarShade_Overhang_Projection ()
      : ::schema::simxml::BuildingModel::SimSolarShade_Overhang (),
        SimSolarShade_WindOrDoorName_ (this),
        SimSolarShade_HtAbvWindOrDoor_ (this),
        SimSolarShade_TiltAngFromWind_Door_ (this),
        SimSolarShade_LeftExtFromWind_DoorWidth_ (this),
        SimSolarShade_RightExtFromWind_DoorWidth_ (this),
        SimSolarShade_DepthAsFracWind_DoorHt_ (this),
        ShadingProp_Reflectance_ShadingSurfName_ (this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (this),
        ShadingProp_Reflectance_GlazingConstructionName_ (this)
      {
      }

      SimSolarShade_Overhang_Projection::
      SimSolarShade_Overhang_Projection (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSolarShade_Overhang (RefId),
        SimSolarShade_WindOrDoorName_ (this),
        SimSolarShade_HtAbvWindOrDoor_ (this),
        SimSolarShade_TiltAngFromWind_Door_ (this),
        SimSolarShade_LeftExtFromWind_DoorWidth_ (this),
        SimSolarShade_RightExtFromWind_DoorWidth_ (this),
        SimSolarShade_DepthAsFracWind_DoorHt_ (this),
        ShadingProp_Reflectance_ShadingSurfName_ (this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (this),
        ShadingProp_Reflectance_GlazingConstructionName_ (this)
      {
      }

      SimSolarShade_Overhang_Projection::
      SimSolarShade_Overhang_Projection (const SimSolarShade_Overhang_Projection& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSolarShade_Overhang (x, f, c),
        SimSolarShade_WindOrDoorName_ (x.SimSolarShade_WindOrDoorName_, f, this),
        SimSolarShade_HtAbvWindOrDoor_ (x.SimSolarShade_HtAbvWindOrDoor_, f, this),
        SimSolarShade_TiltAngFromWind_Door_ (x.SimSolarShade_TiltAngFromWind_Door_, f, this),
        SimSolarShade_LeftExtFromWind_DoorWidth_ (x.SimSolarShade_LeftExtFromWind_DoorWidth_, f, this),
        SimSolarShade_RightExtFromWind_DoorWidth_ (x.SimSolarShade_RightExtFromWind_DoorWidth_, f, this),
        SimSolarShade_DepthAsFracWind_DoorHt_ (x.SimSolarShade_DepthAsFracWind_DoorHt_, f, this),
        ShadingProp_Reflectance_ShadingSurfName_ (x.ShadingProp_Reflectance_ShadingSurfName_, f, this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (x.ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_, f, this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (x.ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_, f, this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (x.ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_, f, this),
        ShadingProp_Reflectance_GlazingConstructionName_ (x.ShadingProp_Reflectance_GlazingConstructionName_, f, this)
      {
      }

      SimSolarShade_Overhang_Projection::
      SimSolarShade_Overhang_Projection (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSolarShade_Overhang (e, f | ::xml_schema::flags::base, c),
        SimSolarShade_WindOrDoorName_ (this),
        SimSolarShade_HtAbvWindOrDoor_ (this),
        SimSolarShade_TiltAngFromWind_Door_ (this),
        SimSolarShade_LeftExtFromWind_DoorWidth_ (this),
        SimSolarShade_RightExtFromWind_DoorWidth_ (this),
        SimSolarShade_DepthAsFracWind_DoorHt_ (this),
        ShadingProp_Reflectance_ShadingSurfName_ (this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (this),
        ShadingProp_Reflectance_GlazingConstructionName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSolarShade_Overhang_Projection::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSolarShade_Overhang::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSolarShade_WindOrDoorName
          //
          if (n.name () == "SimSolarShade_WindOrDoorName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSolarShade_WindOrDoorName_type > r (
              SimSolarShade_WindOrDoorName_traits::create (i, f, this));

            if (!this->SimSolarShade_WindOrDoorName_)
            {
              this->SimSolarShade_WindOrDoorName_.set (r);
              continue;
            }
          }

          // SimSolarShade_HtAbvWindOrDoor
          //
          if (n.name () == "SimSolarShade_HtAbvWindOrDoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSolarShade_HtAbvWindOrDoor_)
            {
              this->SimSolarShade_HtAbvWindOrDoor_.set (SimSolarShade_HtAbvWindOrDoor_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_TiltAngFromWind_Door
          //
          if (n.name () == "SimSolarShade_TiltAngFromWind_Door" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSolarShade_TiltAngFromWind_Door_)
            {
              this->SimSolarShade_TiltAngFromWind_Door_.set (SimSolarShade_TiltAngFromWind_Door_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_LeftExtFromWind_DoorWidth
          //
          if (n.name () == "SimSolarShade_LeftExtFromWind_DoorWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSolarShade_LeftExtFromWind_DoorWidth_)
            {
              this->SimSolarShade_LeftExtFromWind_DoorWidth_.set (SimSolarShade_LeftExtFromWind_DoorWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_RightExtFromWind_DoorWidth
          //
          if (n.name () == "SimSolarShade_RightExtFromWind_DoorWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSolarShade_RightExtFromWind_DoorWidth_)
            {
              this->SimSolarShade_RightExtFromWind_DoorWidth_.set (SimSolarShade_RightExtFromWind_DoorWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_DepthAsFracWind_DoorHt
          //
          if (n.name () == "SimSolarShade_DepthAsFracWind_DoorHt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSolarShade_DepthAsFracWind_DoorHt_)
            {
              this->SimSolarShade_DepthAsFracWind_DoorHt_.set (SimSolarShade_DepthAsFracWind_DoorHt_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_ShadingSurfName
          //
          if (n.name () == "ShadingProp_Reflectance_ShadingSurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ShadingProp_Reflectance_ShadingSurfName_type > r (
              ShadingProp_Reflectance_ShadingSurfName_traits::create (i, f, this));

            if (!this->ShadingProp_Reflectance_ShadingSurfName_)
            {
              this->ShadingProp_Reflectance_ShadingSurfName_.set (r);
              continue;
            }
          }

          // ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf
          //
          if (n.name () == "ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_)
            {
              this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_.set (ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf
          //
          if (n.name () == "ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_)
            {
              this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_.set (ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed
          //
          if (n.name () == "ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_)
            {
              this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_.set (ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_GlazingConstructionName
          //
          if (n.name () == "ShadingProp_Reflectance_GlazingConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ShadingProp_Reflectance_GlazingConstructionName_type > r (
              ShadingProp_Reflectance_GlazingConstructionName_traits::create (i, f, this));

            if (!this->ShadingProp_Reflectance_GlazingConstructionName_)
            {
              this->ShadingProp_Reflectance_GlazingConstructionName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSolarShade_Overhang_Projection* SimSolarShade_Overhang_Projection::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSolarShade_Overhang_Projection (*this, f, c);
      }

      SimSolarShade_Overhang_Projection& SimSolarShade_Overhang_Projection::
      operator= (const SimSolarShade_Overhang_Projection& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSolarShade_Overhang& > (*this) = x;
          this->SimSolarShade_WindOrDoorName_ = x.SimSolarShade_WindOrDoorName_;
          this->SimSolarShade_HtAbvWindOrDoor_ = x.SimSolarShade_HtAbvWindOrDoor_;
          this->SimSolarShade_TiltAngFromWind_Door_ = x.SimSolarShade_TiltAngFromWind_Door_;
          this->SimSolarShade_LeftExtFromWind_DoorWidth_ = x.SimSolarShade_LeftExtFromWind_DoorWidth_;
          this->SimSolarShade_RightExtFromWind_DoorWidth_ = x.SimSolarShade_RightExtFromWind_DoorWidth_;
          this->SimSolarShade_DepthAsFracWind_DoorHt_ = x.SimSolarShade_DepthAsFracWind_DoorHt_;
          this->ShadingProp_Reflectance_ShadingSurfName_ = x.ShadingProp_Reflectance_ShadingSurfName_;
          this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ = x.ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_;
          this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ = x.ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_;
          this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ = x.ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_;
          this->ShadingProp_Reflectance_GlazingConstructionName_ = x.ShadingProp_Reflectance_GlazingConstructionName_;
        }

        return *this;
      }

      SimSolarShade_Overhang_Projection::
      ~SimSolarShade_Overhang_Projection ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

