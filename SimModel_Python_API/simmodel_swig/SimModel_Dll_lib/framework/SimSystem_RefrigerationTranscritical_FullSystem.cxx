// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSystem_RefrigerationTranscritical_FullSystem.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSystem_RefrigerationTranscritical_FullSystem
      // 

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_RefrigSysWorkingFluidType_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigSysWorkingFluidType () const
      {
        return this->SimSys_RefrigSysWorkingFluidType_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_RefrigSysWorkingFluidType_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigSysWorkingFluidType ()
      {
        return this->SimSys_RefrigSysWorkingFluidType_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigSysWorkingFluidType (const SimSys_RefrigSysWorkingFluidType_type& x)
      {
        this->SimSys_RefrigSysWorkingFluidType_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigSysWorkingFluidType (const SimSys_RefrigSysWorkingFluidType_optional& x)
      {
        this->SimSys_RefrigSysWorkingFluidType_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigSysWorkingFluidType (::std::auto_ptr< SimSys_RefrigSysWorkingFluidType_type > x)
      {
        this->SimSys_RefrigSysWorkingFluidType_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_EndUseSubCat_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_EndUseSubCat () const
      {
        return this->SimSys_EndUseSubCat_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_EndUseSubCat_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_EndUseSubCat ()
      {
        return this->SimSys_EndUseSubCat_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_EndUseSubCat (const SimSys_EndUseSubCat_type& x)
      {
        this->SimSys_EndUseSubCat_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_EndUseSubCat (const SimSys_EndUseSubCat_optional& x)
      {
        this->SimSys_EndUseSubCat_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_EndUseSubCat (::std::auto_ptr< SimSys_EndUseSubCat_type > x)
      {
        this->SimSys_EndUseSubCat_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SystemType_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SystemType () const
      {
        return this->SimSys_SystemType_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SystemType_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SystemType ()
      {
        return this->SimSys_SystemType_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SystemType (const SimSys_SystemType_type& x)
      {
        this->SimSys_SystemType_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SystemType (const SimSys_SystemType_optional& x)
      {
        this->SimSys_SystemType_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SystemType (::std::auto_ptr< SimSys_SystemType_type > x)
      {
        this->SimSys_SystemType_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName () const
      {
        return this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName ()
      {
        return this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName (const SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_type& x)
      {
        this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName (const SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_optional& x)
      {
        this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName (::std::auto_ptr< SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_type > x)
      {
        this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName () const
      {
        return this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName ()
      {
        return this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName (const SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_type& x)
      {
        this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName (const SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_optional& x)
      {
        this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName (::std::auto_ptr< SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_type > x)
      {
        this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_RefrigerationGasCoolerName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigerationGasCoolerName () const
      {
        return this->SimSys_RefrigerationGasCoolerName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_RefrigerationGasCoolerName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigerationGasCoolerName ()
      {
        return this->SimSys_RefrigerationGasCoolerName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigerationGasCoolerName (const SimSys_RefrigerationGasCoolerName_type& x)
      {
        this->SimSys_RefrigerationGasCoolerName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigerationGasCoolerName (const SimSys_RefrigerationGasCoolerName_optional& x)
      {
        this->SimSys_RefrigerationGasCoolerName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_RefrigerationGasCoolerName (::std::auto_ptr< SimSys_RefrigerationGasCoolerName_type > x)
      {
        this->SimSys_RefrigerationGasCoolerName_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_HighPressCompressOrCompressListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_HighPressCompressOrCompressListName () const
      {
        return this->SimSys_HighPressCompressOrCompressListName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_HighPressCompressOrCompressListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_HighPressCompressOrCompressListName ()
      {
        return this->SimSys_HighPressCompressOrCompressListName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_HighPressCompressOrCompressListName (const SimSys_HighPressCompressOrCompressListName_type& x)
      {
        this->SimSys_HighPressCompressOrCompressListName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_HighPressCompressOrCompressListName (const SimSys_HighPressCompressOrCompressListName_optional& x)
      {
        this->SimSys_HighPressCompressOrCompressListName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_HighPressCompressOrCompressListName (::std::auto_ptr< SimSys_HighPressCompressOrCompressListName_type > x)
      {
        this->SimSys_HighPressCompressOrCompressListName_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_LowPressureCompressOrCompressListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowPressureCompressOrCompressListName () const
      {
        return this->SimSys_LowPressureCompressOrCompressListName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_LowPressureCompressOrCompressListName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowPressureCompressOrCompressListName ()
      {
        return this->SimSys_LowPressureCompressOrCompressListName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowPressureCompressOrCompressListName (const SimSys_LowPressureCompressOrCompressListName_type& x)
      {
        this->SimSys_LowPressureCompressOrCompressListName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowPressureCompressOrCompressListName (const SimSys_LowPressureCompressOrCompressListName_optional& x)
      {
        this->SimSys_LowPressureCompressOrCompressListName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowPressureCompressOrCompressListName (::std::auto_ptr< SimSys_LowPressureCompressOrCompressListName_type > x)
      {
        this->SimSys_LowPressureCompressOrCompressListName_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_ReceiverPressure_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_ReceiverPressure () const
      {
        return this->SimSys_ReceiverPressure_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_ReceiverPressure_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_ReceiverPressure ()
      {
        return this->SimSys_ReceiverPressure_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_ReceiverPressure (const SimSys_ReceiverPressure_type& x)
      {
        this->SimSys_ReceiverPressure_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_ReceiverPressure (const SimSys_ReceiverPressure_optional& x)
      {
        this->SimSys_ReceiverPressure_ = x;
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SubcoolerEffectiveness_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SubcoolerEffectiveness () const
      {
        return this->SimSys_SubcoolerEffectiveness_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SubcoolerEffectiveness_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SubcoolerEffectiveness ()
      {
        return this->SimSys_SubcoolerEffectiveness_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SubcoolerEffectiveness (const SimSys_SubcoolerEffectiveness_type& x)
      {
        this->SimSys_SubcoolerEffectiveness_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SubcoolerEffectiveness (const SimSys_SubcoolerEffectiveness_optional& x)
      {
        this->SimSys_SubcoolerEffectiveness_ = x;
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SumUASuctionPipingforMediumTempLoads_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforMediumTempLoads () const
      {
        return this->SimSys_SumUASuctionPipingforMediumTempLoads_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SumUASuctionPipingforMediumTempLoads_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforMediumTempLoads ()
      {
        return this->SimSys_SumUASuctionPipingforMediumTempLoads_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforMediumTempLoads (const SimSys_SumUASuctionPipingforMediumTempLoads_type& x)
      {
        this->SimSys_SumUASuctionPipingforMediumTempLoads_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforMediumTempLoads (const SimSys_SumUASuctionPipingforMediumTempLoads_optional& x)
      {
        this->SimSys_SumUASuctionPipingforMediumTempLoads_ = x;
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_MediumTempSuctionPipingZoneName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempSuctionPipingZoneName () const
      {
        return this->SimSys_MediumTempSuctionPipingZoneName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_MediumTempSuctionPipingZoneName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempSuctionPipingZoneName ()
      {
        return this->SimSys_MediumTempSuctionPipingZoneName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempSuctionPipingZoneName (const SimSys_MediumTempSuctionPipingZoneName_type& x)
      {
        this->SimSys_MediumTempSuctionPipingZoneName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempSuctionPipingZoneName (const SimSys_MediumTempSuctionPipingZoneName_optional& x)
      {
        this->SimSys_MediumTempSuctionPipingZoneName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_MediumTempSuctionPipingZoneName (::std::auto_ptr< SimSys_MediumTempSuctionPipingZoneName_type > x)
      {
        this->SimSys_MediumTempSuctionPipingZoneName_.set (x);
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SumUASuctionPipingforLowTempLoads_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforLowTempLoads () const
      {
        return this->SimSys_SumUASuctionPipingforLowTempLoads_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_SumUASuctionPipingforLowTempLoads_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforLowTempLoads ()
      {
        return this->SimSys_SumUASuctionPipingforLowTempLoads_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforLowTempLoads (const SimSys_SumUASuctionPipingforLowTempLoads_type& x)
      {
        this->SimSys_SumUASuctionPipingforLowTempLoads_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_SumUASuctionPipingforLowTempLoads (const SimSys_SumUASuctionPipingforLowTempLoads_optional& x)
      {
        this->SimSys_SumUASuctionPipingforLowTempLoads_ = x;
      }

      const SimSystem_RefrigerationTranscritical_FullSystem::SimSys_LowTempSuctionPipingZoneName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempSuctionPipingZoneName () const
      {
        return this->SimSys_LowTempSuctionPipingZoneName_;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::SimSys_LowTempSuctionPipingZoneName_optional& SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempSuctionPipingZoneName ()
      {
        return this->SimSys_LowTempSuctionPipingZoneName_;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempSuctionPipingZoneName (const SimSys_LowTempSuctionPipingZoneName_type& x)
      {
        this->SimSys_LowTempSuctionPipingZoneName_.set (x);
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempSuctionPipingZoneName (const SimSys_LowTempSuctionPipingZoneName_optional& x)
      {
        this->SimSys_LowTempSuctionPipingZoneName_ = x;
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      SimSys_LowTempSuctionPipingZoneName (::std::auto_ptr< SimSys_LowTempSuctionPipingZoneName_type > x)
      {
        this->SimSys_LowTempSuctionPipingZoneName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSystem_RefrigerationTranscritical_FullSystem
      //

      SimSystem_RefrigerationTranscritical_FullSystem::
      SimSystem_RefrigerationTranscritical_FullSystem ()
      : ::schema::simxml::BuildingModel::SimSystem_RefrigerationTranscritical (),
        SimSys_RefrigSysWorkingFluidType_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_SystemType_ (this),
        SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (this),
        SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (this),
        SimSys_RefrigerationGasCoolerName_ (this),
        SimSys_HighPressCompressOrCompressListName_ (this),
        SimSys_LowPressureCompressOrCompressListName_ (this),
        SimSys_ReceiverPressure_ (this),
        SimSys_SubcoolerEffectiveness_ (this),
        SimSys_SumUASuctionPipingforMediumTempLoads_ (this),
        SimSys_MediumTempSuctionPipingZoneName_ (this),
        SimSys_SumUASuctionPipingforLowTempLoads_ (this),
        SimSys_LowTempSuctionPipingZoneName_ (this)
      {
      }

      SimSystem_RefrigerationTranscritical_FullSystem::
      SimSystem_RefrigerationTranscritical_FullSystem (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSystem_RefrigerationTranscritical (RefId),
        SimSys_RefrigSysWorkingFluidType_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_SystemType_ (this),
        SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (this),
        SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (this),
        SimSys_RefrigerationGasCoolerName_ (this),
        SimSys_HighPressCompressOrCompressListName_ (this),
        SimSys_LowPressureCompressOrCompressListName_ (this),
        SimSys_ReceiverPressure_ (this),
        SimSys_SubcoolerEffectiveness_ (this),
        SimSys_SumUASuctionPipingforMediumTempLoads_ (this),
        SimSys_MediumTempSuctionPipingZoneName_ (this),
        SimSys_SumUASuctionPipingforLowTempLoads_ (this),
        SimSys_LowTempSuctionPipingZoneName_ (this)
      {
      }

      SimSystem_RefrigerationTranscritical_FullSystem::
      SimSystem_RefrigerationTranscritical_FullSystem (const SimSystem_RefrigerationTranscritical_FullSystem& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSystem_RefrigerationTranscritical (x, f, c),
        SimSys_RefrigSysWorkingFluidType_ (x.SimSys_RefrigSysWorkingFluidType_, f, this),
        SimSys_EndUseSubCat_ (x.SimSys_EndUseSubCat_, f, this),
        SimSys_SystemType_ (x.SimSys_SystemType_, f, this),
        SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (x.SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_, f, this),
        SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (x.SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_, f, this),
        SimSys_RefrigerationGasCoolerName_ (x.SimSys_RefrigerationGasCoolerName_, f, this),
        SimSys_HighPressCompressOrCompressListName_ (x.SimSys_HighPressCompressOrCompressListName_, f, this),
        SimSys_LowPressureCompressOrCompressListName_ (x.SimSys_LowPressureCompressOrCompressListName_, f, this),
        SimSys_ReceiverPressure_ (x.SimSys_ReceiverPressure_, f, this),
        SimSys_SubcoolerEffectiveness_ (x.SimSys_SubcoolerEffectiveness_, f, this),
        SimSys_SumUASuctionPipingforMediumTempLoads_ (x.SimSys_SumUASuctionPipingforMediumTempLoads_, f, this),
        SimSys_MediumTempSuctionPipingZoneName_ (x.SimSys_MediumTempSuctionPipingZoneName_, f, this),
        SimSys_SumUASuctionPipingforLowTempLoads_ (x.SimSys_SumUASuctionPipingforLowTempLoads_, f, this),
        SimSys_LowTempSuctionPipingZoneName_ (x.SimSys_LowTempSuctionPipingZoneName_, f, this)
      {
      }

      SimSystem_RefrigerationTranscritical_FullSystem::
      SimSystem_RefrigerationTranscritical_FullSystem (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSystem_RefrigerationTranscritical (e, f | ::xml_schema::flags::base, c),
        SimSys_RefrigSysWorkingFluidType_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_SystemType_ (this),
        SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (this),
        SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_ (this),
        SimSys_RefrigerationGasCoolerName_ (this),
        SimSys_HighPressCompressOrCompressListName_ (this),
        SimSys_LowPressureCompressOrCompressListName_ (this),
        SimSys_ReceiverPressure_ (this),
        SimSys_SubcoolerEffectiveness_ (this),
        SimSys_SumUASuctionPipingforMediumTempLoads_ (this),
        SimSys_MediumTempSuctionPipingZoneName_ (this),
        SimSys_SumUASuctionPipingforLowTempLoads_ (this),
        SimSys_LowTempSuctionPipingZoneName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSystem_RefrigerationTranscritical_FullSystem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSystem_RefrigerationTranscritical::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSys_RefrigSysWorkingFluidType
          //
          if (n.name () == "SimSys_RefrigSysWorkingFluidType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigSysWorkingFluidType_type > r (
              SimSys_RefrigSysWorkingFluidType_traits::create (i, f, this));

            if (!this->SimSys_RefrigSysWorkingFluidType_)
            {
              this->SimSys_RefrigSysWorkingFluidType_.set (r);
              continue;
            }
          }

          // SimSys_EndUseSubCat
          //
          if (n.name () == "SimSys_EndUseSubCat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_EndUseSubCat_type > r (
              SimSys_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimSys_EndUseSubCat_)
            {
              this->SimSys_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimSys_SystemType
          //
          if (n.name () == "SimSys_SystemType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_SystemType_type > r (
              SimSys_SystemType_traits::create (i, f, this));

            if (!this->SimSys_SystemType_)
            {
              this->SimSys_SystemType_.set (r);
              continue;
            }
          }

          // SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName
          //
          if (n.name () == "SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_type > r (
              SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_traits::create (i, f, this));

            if (!this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_)
            {
              this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_.set (r);
              continue;
            }
          }

          // SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName
          //
          if (n.name () == "SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_type > r (
              SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_traits::create (i, f, this));

            if (!this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_)
            {
              this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_.set (r);
              continue;
            }
          }

          // SimSys_RefrigerationGasCoolerName
          //
          if (n.name () == "SimSys_RefrigerationGasCoolerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigerationGasCoolerName_type > r (
              SimSys_RefrigerationGasCoolerName_traits::create (i, f, this));

            if (!this->SimSys_RefrigerationGasCoolerName_)
            {
              this->SimSys_RefrigerationGasCoolerName_.set (r);
              continue;
            }
          }

          // SimSys_HighPressCompressOrCompressListName
          //
          if (n.name () == "SimSys_HighPressCompressOrCompressListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_HighPressCompressOrCompressListName_type > r (
              SimSys_HighPressCompressOrCompressListName_traits::create (i, f, this));

            if (!this->SimSys_HighPressCompressOrCompressListName_)
            {
              this->SimSys_HighPressCompressOrCompressListName_.set (r);
              continue;
            }
          }

          // SimSys_LowPressureCompressOrCompressListName
          //
          if (n.name () == "SimSys_LowPressureCompressOrCompressListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LowPressureCompressOrCompressListName_type > r (
              SimSys_LowPressureCompressOrCompressListName_traits::create (i, f, this));

            if (!this->SimSys_LowPressureCompressOrCompressListName_)
            {
              this->SimSys_LowPressureCompressOrCompressListName_.set (r);
              continue;
            }
          }

          // SimSys_ReceiverPressure
          //
          if (n.name () == "SimSys_ReceiverPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_ReceiverPressure_)
            {
              this->SimSys_ReceiverPressure_.set (SimSys_ReceiverPressure_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_SubcoolerEffectiveness
          //
          if (n.name () == "SimSys_SubcoolerEffectiveness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_SubcoolerEffectiveness_)
            {
              this->SimSys_SubcoolerEffectiveness_.set (SimSys_SubcoolerEffectiveness_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_SumUASuctionPipingforMediumTempLoads
          //
          if (n.name () == "SimSys_SumUASuctionPipingforMediumTempLoads" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_SumUASuctionPipingforMediumTempLoads_)
            {
              this->SimSys_SumUASuctionPipingforMediumTempLoads_.set (SimSys_SumUASuctionPipingforMediumTempLoads_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MediumTempSuctionPipingZoneName
          //
          if (n.name () == "SimSys_MediumTempSuctionPipingZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_MediumTempSuctionPipingZoneName_type > r (
              SimSys_MediumTempSuctionPipingZoneName_traits::create (i, f, this));

            if (!this->SimSys_MediumTempSuctionPipingZoneName_)
            {
              this->SimSys_MediumTempSuctionPipingZoneName_.set (r);
              continue;
            }
          }

          // SimSys_SumUASuctionPipingforLowTempLoads
          //
          if (n.name () == "SimSys_SumUASuctionPipingforLowTempLoads" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_SumUASuctionPipingforLowTempLoads_)
            {
              this->SimSys_SumUASuctionPipingforLowTempLoads_.set (SimSys_SumUASuctionPipingforLowTempLoads_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_LowTempSuctionPipingZoneName
          //
          if (n.name () == "SimSys_LowTempSuctionPipingZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LowTempSuctionPipingZoneName_type > r (
              SimSys_LowTempSuctionPipingZoneName_traits::create (i, f, this));

            if (!this->SimSys_LowTempSuctionPipingZoneName_)
            {
              this->SimSys_LowTempSuctionPipingZoneName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSystem_RefrigerationTranscritical_FullSystem* SimSystem_RefrigerationTranscritical_FullSystem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSystem_RefrigerationTranscritical_FullSystem (*this, f, c);
      }

      SimSystem_RefrigerationTranscritical_FullSystem& SimSystem_RefrigerationTranscritical_FullSystem::
      operator= (const SimSystem_RefrigerationTranscritical_FullSystem& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSystem_RefrigerationTranscritical& > (*this) = x;
          this->SimSys_RefrigSysWorkingFluidType_ = x.SimSys_RefrigSysWorkingFluidType_;
          this->SimSys_EndUseSubCat_ = x.SimSys_EndUseSubCat_;
          this->SimSys_SystemType_ = x.SimSys_SystemType_;
          this->SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_ = x.SimSys_MediumTempRefrigCaseorWalkinOrCaseAndWalkInListName_;
          this->SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_ = x.SimSys_LowTempRefrigCaseorWalkinOrCaseAndWalkInListName_;
          this->SimSys_RefrigerationGasCoolerName_ = x.SimSys_RefrigerationGasCoolerName_;
          this->SimSys_HighPressCompressOrCompressListName_ = x.SimSys_HighPressCompressOrCompressListName_;
          this->SimSys_LowPressureCompressOrCompressListName_ = x.SimSys_LowPressureCompressOrCompressListName_;
          this->SimSys_ReceiverPressure_ = x.SimSys_ReceiverPressure_;
          this->SimSys_SubcoolerEffectiveness_ = x.SimSys_SubcoolerEffectiveness_;
          this->SimSys_SumUASuctionPipingforMediumTempLoads_ = x.SimSys_SumUASuctionPipingforMediumTempLoads_;
          this->SimSys_MediumTempSuctionPipingZoneName_ = x.SimSys_MediumTempSuctionPipingZoneName_;
          this->SimSys_SumUASuctionPipingforLowTempLoads_ = x.SimSys_SumUASuctionPipingforLowTempLoads_;
          this->SimSys_LowTempSuctionPipingZoneName_ = x.SimSys_LowTempSuctionPipingZoneName_;
        }

        return *this;
      }

      SimSystem_RefrigerationTranscritical_FullSystem::
      ~SimSystem_RefrigerationTranscritical_FullSystem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

