// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ElectricalGenerator_FuelCellPowerModule.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellPowerModule
      // 

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_EffCurveMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveMode () const
      {
        return this->SimFlowPlant_EffCurveMode_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_EffCurveMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveMode ()
      {
        return this->SimFlowPlant_EffCurveMode_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveMode (const SimFlowPlant_EffCurveMode_type& x)
      {
        this->SimFlowPlant_EffCurveMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveMode (const SimFlowPlant_EffCurveMode_optional& x)
      {
        this->SimFlowPlant_EffCurveMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveMode (::std::auto_ptr< SimFlowPlant_EffCurveMode_type > x)
      {
        this->SimFlowPlant_EffCurveMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_EffCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveName () const
      {
        return this->SimFlowPlant_EffCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_EffCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveName ()
      {
        return this->SimFlowPlant_EffCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveName (const SimFlowPlant_EffCurveName_type& x)
      {
        this->SimFlowPlant_EffCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveName (const SimFlowPlant_EffCurveName_optional& x)
      {
        this->SimFlowPlant_EffCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_EffCurveName (::std::auto_ptr< SimFlowPlant_EffCurveName_type > x)
      {
        this->SimFlowPlant_EffCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NomEff_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomEff () const
      {
        return this->SimFlowPlant_NomEff_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NomEff_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomEff ()
      {
        return this->SimFlowPlant_NomEff_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomEff (const SimFlowPlant_NomEff_type& x)
      {
        this->SimFlowPlant_NomEff_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomEff (const SimFlowPlant_NomEff_optional& x)
      {
        this->SimFlowPlant_NomEff_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NomElecPwr_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomElecPwr () const
      {
        return this->SimFlowPlant_NomElecPwr_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NomElecPwr_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomElecPwr ()
      {
        return this->SimFlowPlant_NomElecPwr_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomElecPwr (const SimFlowPlant_NomElecPwr_type& x)
      {
        this->SimFlowPlant_NomElecPwr_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NomElecPwr (const SimFlowPlant_NomElecPwr_optional& x)
      {
        this->SimFlowPlant_NomElecPwr_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NumStopsAtStartSim_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumStopsAtStartSim () const
      {
        return this->SimFlowPlant_NumStopsAtStartSim_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NumStopsAtStartSim_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumStopsAtStartSim ()
      {
        return this->SimFlowPlant_NumStopsAtStartSim_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumStopsAtStartSim (const SimFlowPlant_NumStopsAtStartSim_type& x)
      {
        this->SimFlowPlant_NumStopsAtStartSim_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumStopsAtStartSim (const SimFlowPlant_NumStopsAtStartSim_optional& x)
      {
        this->SimFlowPlant_NumStopsAtStartSim_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_CyclingPerfDegradCoef_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_CyclingPerfDegradCoef () const
      {
        return this->SimFlowPlant_CyclingPerfDegradCoef_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_CyclingPerfDegradCoef_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_CyclingPerfDegradCoef ()
      {
        return this->SimFlowPlant_CyclingPerfDegradCoef_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_CyclingPerfDegradCoef (const SimFlowPlant_CyclingPerfDegradCoef_type& x)
      {
        this->SimFlowPlant_CyclingPerfDegradCoef_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_CyclingPerfDegradCoef (const SimFlowPlant_CyclingPerfDegradCoef_optional& x)
      {
        this->SimFlowPlant_CyclingPerfDegradCoef_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NumRunHoursAtBeginningSim_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumRunHoursAtBeginningSim () const
      {
        return this->SimFlowPlant_NumRunHoursAtBeginningSim_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_NumRunHoursAtBeginningSim_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumRunHoursAtBeginningSim ()
      {
        return this->SimFlowPlant_NumRunHoursAtBeginningSim_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumRunHoursAtBeginningSim (const SimFlowPlant_NumRunHoursAtBeginningSim_type& x)
      {
        this->SimFlowPlant_NumRunHoursAtBeginningSim_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_NumRunHoursAtBeginningSim (const SimFlowPlant_NumRunHoursAtBeginningSim_optional& x)
      {
        this->SimFlowPlant_NumRunHoursAtBeginningSim_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_AccumRunTimeDegradCoef_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AccumRunTimeDegradCoef () const
      {
        return this->SimFlowPlant_AccumRunTimeDegradCoef_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_AccumRunTimeDegradCoef_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AccumRunTimeDegradCoef ()
      {
        return this->SimFlowPlant_AccumRunTimeDegradCoef_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AccumRunTimeDegradCoef (const SimFlowPlant_AccumRunTimeDegradCoef_type& x)
      {
        this->SimFlowPlant_AccumRunTimeDegradCoef_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AccumRunTimeDegradCoef (const SimFlowPlant_AccumRunTimeDegradCoef_optional& x)
      {
        this->SimFlowPlant_AccumRunTimeDegradCoef_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_RunTimeDegradTimeThresh_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_RunTimeDegradTimeThresh () const
      {
        return this->SimFlowPlant_RunTimeDegradTimeThresh_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_RunTimeDegradTimeThresh_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_RunTimeDegradTimeThresh ()
      {
        return this->SimFlowPlant_RunTimeDegradTimeThresh_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_RunTimeDegradTimeThresh (const SimFlowPlant_RunTimeDegradTimeThresh_type& x)
      {
        this->SimFlowPlant_RunTimeDegradTimeThresh_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_RunTimeDegradTimeThresh (const SimFlowPlant_RunTimeDegradTimeThresh_optional& x)
      {
        this->SimFlowPlant_RunTimeDegradTimeThresh_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_PwrUpTransientLimit_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrUpTransientLimit () const
      {
        return this->SimFlowPlant_PwrUpTransientLimit_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_PwrUpTransientLimit_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrUpTransientLimit ()
      {
        return this->SimFlowPlant_PwrUpTransientLimit_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrUpTransientLimit (const SimFlowPlant_PwrUpTransientLimit_type& x)
      {
        this->SimFlowPlant_PwrUpTransientLimit_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrUpTransientLimit (const SimFlowPlant_PwrUpTransientLimit_optional& x)
      {
        this->SimFlowPlant_PwrUpTransientLimit_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_PwrDownTransientLimit_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrDownTransientLimit () const
      {
        return this->SimFlowPlant_PwrDownTransientLimit_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_PwrDownTransientLimit_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrDownTransientLimit ()
      {
        return this->SimFlowPlant_PwrDownTransientLimit_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrDownTransientLimit (const SimFlowPlant_PwrDownTransientLimit_type& x)
      {
        this->SimFlowPlant_PwrDownTransientLimit_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_PwrDownTransientLimit (const SimFlowPlant_PwrDownTransientLimit_optional& x)
      {
        this->SimFlowPlant_PwrDownTransientLimit_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpTime_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpTime () const
      {
        return this->SimFlowPlant_StartUpTime_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpTime_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpTime ()
      {
        return this->SimFlowPlant_StartUpTime_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpTime (const SimFlowPlant_StartUpTime_type& x)
      {
        this->SimFlowPlant_StartUpTime_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpTime (const SimFlowPlant_StartUpTime_optional& x)
      {
        this->SimFlowPlant_StartUpTime_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpFuel_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpFuel () const
      {
        return this->SimFlowPlant_StartUpFuel_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpFuel_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpFuel ()
      {
        return this->SimFlowPlant_StartUpFuel_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpFuel (const SimFlowPlant_StartUpFuel_type& x)
      {
        this->SimFlowPlant_StartUpFuel_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpFuel (const SimFlowPlant_StartUpFuel_optional& x)
      {
        this->SimFlowPlant_StartUpFuel_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpElecityConsump_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityConsump () const
      {
        return this->SimFlowPlant_StartUpElecityConsump_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpElecityConsump_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityConsump ()
      {
        return this->SimFlowPlant_StartUpElecityConsump_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityConsump (const SimFlowPlant_StartUpElecityConsump_type& x)
      {
        this->SimFlowPlant_StartUpElecityConsump_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityConsump (const SimFlowPlant_StartUpElecityConsump_optional& x)
      {
        this->SimFlowPlant_StartUpElecityConsump_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpElecityProInduced_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityProInduced () const
      {
        return this->SimFlowPlant_StartUpElecityProInduced_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StartUpElecityProInduced_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityProInduced ()
      {
        return this->SimFlowPlant_StartUpElecityProInduced_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityProInduced (const SimFlowPlant_StartUpElecityProInduced_type& x)
      {
        this->SimFlowPlant_StartUpElecityProInduced_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StartUpElecityProInduced (const SimFlowPlant_StartUpElecityProInduced_optional& x)
      {
        this->SimFlowPlant_StartUpElecityProInduced_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ShutDownTime_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownTime () const
      {
        return this->SimFlowPlant_ShutDownTime_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ShutDownTime_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownTime ()
      {
        return this->SimFlowPlant_ShutDownTime_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownTime (const SimFlowPlant_ShutDownTime_type& x)
      {
        this->SimFlowPlant_ShutDownTime_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownTime (const SimFlowPlant_ShutDownTime_optional& x)
      {
        this->SimFlowPlant_ShutDownTime_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ShutDownFuel_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownFuel () const
      {
        return this->SimFlowPlant_ShutDownFuel_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ShutDownFuel_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownFuel ()
      {
        return this->SimFlowPlant_ShutDownFuel_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownFuel (const SimFlowPlant_ShutDownFuel_type& x)
      {
        this->SimFlowPlant_ShutDownFuel_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownFuel (const SimFlowPlant_ShutDownFuel_optional& x)
      {
        this->SimFlowPlant_ShutDownFuel_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ShutDownElecityConsump_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownElecityConsump () const
      {
        return this->SimFlowPlant_ShutDownElecityConsump_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ShutDownElecityConsump_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownElecityConsump ()
      {
        return this->SimFlowPlant_ShutDownElecityConsump_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownElecityConsump (const SimFlowPlant_ShutDownElecityConsump_type& x)
      {
        this->SimFlowPlant_ShutDownElecityConsump_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ShutDownElecityConsump (const SimFlowPlant_ShutDownElecityConsump_optional& x)
      {
        this->SimFlowPlant_ShutDownElecityConsump_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_AncilliaryElecityConstTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityConstTerm () const
      {
        return this->SimFlowPlant_AncilliaryElecityConstTerm_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_AncilliaryElecityConstTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityConstTerm ()
      {
        return this->SimFlowPlant_AncilliaryElecityConstTerm_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityConstTerm (const SimFlowPlant_AncilliaryElecityConstTerm_type& x)
      {
        this->SimFlowPlant_AncilliaryElecityConstTerm_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityConstTerm (const SimFlowPlant_AncilliaryElecityConstTerm_optional& x)
      {
        this->SimFlowPlant_AncilliaryElecityConstTerm_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_AncilliaryElecityLinearTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityLinearTerm () const
      {
        return this->SimFlowPlant_AncilliaryElecityLinearTerm_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_AncilliaryElecityLinearTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityLinearTerm ()
      {
        return this->SimFlowPlant_AncilliaryElecityLinearTerm_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityLinearTerm (const SimFlowPlant_AncilliaryElecityLinearTerm_type& x)
      {
        this->SimFlowPlant_AncilliaryElecityLinearTerm_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_AncilliaryElecityLinearTerm (const SimFlowPlant_AncilliaryElecityLinearTerm_optional& x)
      {
        this->SimFlowPlant_AncilliaryElecityLinearTerm_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossCalcMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossCalcMode () const
      {
        return this->SimFlowPlant_SkinLossCalcMode_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossCalcMode_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossCalcMode ()
      {
        return this->SimFlowPlant_SkinLossCalcMode_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossCalcMode (const SimFlowPlant_SkinLossCalcMode_type& x)
      {
        this->SimFlowPlant_SkinLossCalcMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossCalcMode (const SimFlowPlant_SkinLossCalcMode_optional& x)
      {
        this->SimFlowPlant_SkinLossCalcMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossCalcMode (::std::auto_ptr< SimFlowPlant_SkinLossCalcMode_type > x)
      {
        this->SimFlowPlant_SkinLossCalcMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ZoneName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ZoneName () const
      {
        return this->SimFlowPlant_ZoneName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ZoneName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ZoneName ()
      {
        return this->SimFlowPlant_ZoneName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ZoneName (const SimFlowPlant_ZoneName_type& x)
      {
        this->SimFlowPlant_ZoneName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ZoneName (const SimFlowPlant_ZoneName_optional& x)
      {
        this->SimFlowPlant_ZoneName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ZoneName (::std::auto_ptr< SimFlowPlant_ZoneName_type > x)
      {
        this->SimFlowPlant_ZoneName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossRadiativeFract_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossRadiativeFract () const
      {
        return this->SimFlowPlant_SkinLossRadiativeFract_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossRadiativeFract_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossRadiativeFract ()
      {
        return this->SimFlowPlant_SkinLossRadiativeFract_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossRadiativeFract (const SimFlowPlant_SkinLossRadiativeFract_type& x)
      {
        this->SimFlowPlant_SkinLossRadiativeFract_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossRadiativeFract (const SimFlowPlant_SkinLossRadiativeFract_optional& x)
      {
        this->SimFlowPlant_SkinLossRadiativeFract_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ConstSkinLossRate_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ConstSkinLossRate () const
      {
        return this->SimFlowPlant_ConstSkinLossRate_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_ConstSkinLossRate_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ConstSkinLossRate ()
      {
        return this->SimFlowPlant_ConstSkinLossRate_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ConstSkinLossRate (const SimFlowPlant_ConstSkinLossRate_type& x)
      {
        this->SimFlowPlant_ConstSkinLossRate_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ConstSkinLossRate (const SimFlowPlant_ConstSkinLossRate_optional& x)
      {
        this->SimFlowPlant_ConstSkinLossRate_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossUFactorTimesAreaTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossUFactorTimesAreaTerm () const
      {
        return this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossUFactorTimesAreaTerm_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossUFactorTimesAreaTerm ()
      {
        return this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossUFactorTimesAreaTerm (const SimFlowPlant_SkinLossUFactorTimesAreaTerm_type& x)
      {
        this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossUFactorTimesAreaTerm (const SimFlowPlant_SkinLossUFactorTimesAreaTerm_optional& x)
      {
        this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossQuadraticCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossQuadraticCurveName () const
      {
        return this->SimFlowPlant_SkinLossQuadraticCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_SkinLossQuadraticCurveName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossQuadraticCurveName ()
      {
        return this->SimFlowPlant_SkinLossQuadraticCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossQuadraticCurveName (const SimFlowPlant_SkinLossQuadraticCurveName_type& x)
      {
        this->SimFlowPlant_SkinLossQuadraticCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossQuadraticCurveName (const SimFlowPlant_SkinLossQuadraticCurveName_optional& x)
      {
        this->SimFlowPlant_SkinLossQuadraticCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_SkinLossQuadraticCurveName (::std::auto_ptr< SimFlowPlant_SkinLossQuadraticCurveName_type > x)
      {
        this->SimFlowPlant_SkinLossQuadraticCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_DilutionAirFlowRate_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionAirFlowRate () const
      {
        return this->SimFlowPlant_DilutionAirFlowRate_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_DilutionAirFlowRate_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionAirFlowRate ()
      {
        return this->SimFlowPlant_DilutionAirFlowRate_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionAirFlowRate (const SimFlowPlant_DilutionAirFlowRate_type& x)
      {
        this->SimFlowPlant_DilutionAirFlowRate_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionAirFlowRate (const SimFlowPlant_DilutionAirFlowRate_optional& x)
      {
        this->SimFlowPlant_DilutionAirFlowRate_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StackHeatLossToDilutionAir_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StackHeatLossToDilutionAir () const
      {
        return this->SimFlowPlant_StackHeatLossToDilutionAir_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_StackHeatLossToDilutionAir_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StackHeatLossToDilutionAir ()
      {
        return this->SimFlowPlant_StackHeatLossToDilutionAir_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StackHeatLossToDilutionAir (const SimFlowPlant_StackHeatLossToDilutionAir_type& x)
      {
        this->SimFlowPlant_StackHeatLossToDilutionAir_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_StackHeatLossToDilutionAir (const SimFlowPlant_StackHeatLossToDilutionAir_optional& x)
      {
        this->SimFlowPlant_StackHeatLossToDilutionAir_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_DilutionInletAirNodeName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionInletAirNodeName () const
      {
        return this->SimFlowPlant_DilutionInletAirNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_DilutionInletAirNodeName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionInletAirNodeName ()
      {
        return this->SimFlowPlant_DilutionInletAirNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionInletAirNodeName (const SimFlowPlant_DilutionInletAirNodeName_type& x)
      {
        this->SimFlowPlant_DilutionInletAirNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionInletAirNodeName (const SimFlowPlant_DilutionInletAirNodeName_optional& x)
      {
        this->SimFlowPlant_DilutionInletAirNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionInletAirNodeName (::std::auto_ptr< SimFlowPlant_DilutionInletAirNodeName_type > x)
      {
        this->SimFlowPlant_DilutionInletAirNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_DilutionOutletAirNodeName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionOutletAirNodeName () const
      {
        return this->SimFlowPlant_DilutionOutletAirNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_DilutionOutletAirNodeName_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionOutletAirNodeName ()
      {
        return this->SimFlowPlant_DilutionOutletAirNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionOutletAirNodeName (const SimFlowPlant_DilutionOutletAirNodeName_type& x)
      {
        this->SimFlowPlant_DilutionOutletAirNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionOutletAirNodeName (const SimFlowPlant_DilutionOutletAirNodeName_optional& x)
      {
        this->SimFlowPlant_DilutionOutletAirNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_DilutionOutletAirNodeName (::std::auto_ptr< SimFlowPlant_DilutionOutletAirNodeName_type > x)
      {
        this->SimFlowPlant_DilutionOutletAirNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_MinOperatPoint_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MinOperatPoint () const
      {
        return this->SimFlowPlant_MinOperatPoint_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_MinOperatPoint_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MinOperatPoint ()
      {
        return this->SimFlowPlant_MinOperatPoint_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MinOperatPoint (const SimFlowPlant_MinOperatPoint_type& x)
      {
        this->SimFlowPlant_MinOperatPoint_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MinOperatPoint (const SimFlowPlant_MinOperatPoint_optional& x)
      {
        this->SimFlowPlant_MinOperatPoint_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_MaxOperatPoint_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MaxOperatPoint () const
      {
        return this->SimFlowPlant_MaxOperatPoint_;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::SimFlowPlant_MaxOperatPoint_optional& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MaxOperatPoint ()
      {
        return this->SimFlowPlant_MaxOperatPoint_;
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MaxOperatPoint (const SimFlowPlant_MaxOperatPoint_type& x)
      {
        this->SimFlowPlant_MaxOperatPoint_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_MaxOperatPoint (const SimFlowPlant_MaxOperatPoint_optional& x)
      {
        this->SimFlowPlant_MaxOperatPoint_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_FuelCellPowerModule
      //

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule ()
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_EffCurveMode_ (this),
        SimFlowPlant_EffCurveName_ (this),
        SimFlowPlant_NomEff_ (this),
        SimFlowPlant_NomElecPwr_ (this),
        SimFlowPlant_NumStopsAtStartSim_ (this),
        SimFlowPlant_CyclingPerfDegradCoef_ (this),
        SimFlowPlant_NumRunHoursAtBeginningSim_ (this),
        SimFlowPlant_AccumRunTimeDegradCoef_ (this),
        SimFlowPlant_RunTimeDegradTimeThresh_ (this),
        SimFlowPlant_PwrUpTransientLimit_ (this),
        SimFlowPlant_PwrDownTransientLimit_ (this),
        SimFlowPlant_StartUpTime_ (this),
        SimFlowPlant_StartUpFuel_ (this),
        SimFlowPlant_StartUpElecityConsump_ (this),
        SimFlowPlant_StartUpElecityProInduced_ (this),
        SimFlowPlant_ShutDownTime_ (this),
        SimFlowPlant_ShutDownFuel_ (this),
        SimFlowPlant_ShutDownElecityConsump_ (this),
        SimFlowPlant_AncilliaryElecityConstTerm_ (this),
        SimFlowPlant_AncilliaryElecityLinearTerm_ (this),
        SimFlowPlant_SkinLossCalcMode_ (this),
        SimFlowPlant_ZoneName_ (this),
        SimFlowPlant_SkinLossRadiativeFract_ (this),
        SimFlowPlant_ConstSkinLossRate_ (this),
        SimFlowPlant_SkinLossUFactorTimesAreaTerm_ (this),
        SimFlowPlant_SkinLossQuadraticCurveName_ (this),
        SimFlowPlant_DilutionAirFlowRate_ (this),
        SimFlowPlant_StackHeatLossToDilutionAir_ (this),
        SimFlowPlant_DilutionInletAirNodeName_ (this),
        SimFlowPlant_DilutionOutletAirNodeName_ (this),
        SimFlowPlant_MinOperatPoint_ (this),
        SimFlowPlant_MaxOperatPoint_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_EffCurveMode_ (this),
        SimFlowPlant_EffCurveName_ (this),
        SimFlowPlant_NomEff_ (this),
        SimFlowPlant_NomElecPwr_ (this),
        SimFlowPlant_NumStopsAtStartSim_ (this),
        SimFlowPlant_CyclingPerfDegradCoef_ (this),
        SimFlowPlant_NumRunHoursAtBeginningSim_ (this),
        SimFlowPlant_AccumRunTimeDegradCoef_ (this),
        SimFlowPlant_RunTimeDegradTimeThresh_ (this),
        SimFlowPlant_PwrUpTransientLimit_ (this),
        SimFlowPlant_PwrDownTransientLimit_ (this),
        SimFlowPlant_StartUpTime_ (this),
        SimFlowPlant_StartUpFuel_ (this),
        SimFlowPlant_StartUpElecityConsump_ (this),
        SimFlowPlant_StartUpElecityProInduced_ (this),
        SimFlowPlant_ShutDownTime_ (this),
        SimFlowPlant_ShutDownFuel_ (this),
        SimFlowPlant_ShutDownElecityConsump_ (this),
        SimFlowPlant_AncilliaryElecityConstTerm_ (this),
        SimFlowPlant_AncilliaryElecityLinearTerm_ (this),
        SimFlowPlant_SkinLossCalcMode_ (this),
        SimFlowPlant_ZoneName_ (this),
        SimFlowPlant_SkinLossRadiativeFract_ (this),
        SimFlowPlant_ConstSkinLossRate_ (this),
        SimFlowPlant_SkinLossUFactorTimesAreaTerm_ (this),
        SimFlowPlant_SkinLossQuadraticCurveName_ (this),
        SimFlowPlant_DilutionAirFlowRate_ (this),
        SimFlowPlant_StackHeatLossToDilutionAir_ (this),
        SimFlowPlant_DilutionInletAirNodeName_ (this),
        SimFlowPlant_DilutionOutletAirNodeName_ (this),
        SimFlowPlant_MinOperatPoint_ (this),
        SimFlowPlant_MaxOperatPoint_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule (const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule& x,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_EffCurveMode_ (x.SimFlowPlant_EffCurveMode_, f, this),
        SimFlowPlant_EffCurveName_ (x.SimFlowPlant_EffCurveName_, f, this),
        SimFlowPlant_NomEff_ (x.SimFlowPlant_NomEff_, f, this),
        SimFlowPlant_NomElecPwr_ (x.SimFlowPlant_NomElecPwr_, f, this),
        SimFlowPlant_NumStopsAtStartSim_ (x.SimFlowPlant_NumStopsAtStartSim_, f, this),
        SimFlowPlant_CyclingPerfDegradCoef_ (x.SimFlowPlant_CyclingPerfDegradCoef_, f, this),
        SimFlowPlant_NumRunHoursAtBeginningSim_ (x.SimFlowPlant_NumRunHoursAtBeginningSim_, f, this),
        SimFlowPlant_AccumRunTimeDegradCoef_ (x.SimFlowPlant_AccumRunTimeDegradCoef_, f, this),
        SimFlowPlant_RunTimeDegradTimeThresh_ (x.SimFlowPlant_RunTimeDegradTimeThresh_, f, this),
        SimFlowPlant_PwrUpTransientLimit_ (x.SimFlowPlant_PwrUpTransientLimit_, f, this),
        SimFlowPlant_PwrDownTransientLimit_ (x.SimFlowPlant_PwrDownTransientLimit_, f, this),
        SimFlowPlant_StartUpTime_ (x.SimFlowPlant_StartUpTime_, f, this),
        SimFlowPlant_StartUpFuel_ (x.SimFlowPlant_StartUpFuel_, f, this),
        SimFlowPlant_StartUpElecityConsump_ (x.SimFlowPlant_StartUpElecityConsump_, f, this),
        SimFlowPlant_StartUpElecityProInduced_ (x.SimFlowPlant_StartUpElecityProInduced_, f, this),
        SimFlowPlant_ShutDownTime_ (x.SimFlowPlant_ShutDownTime_, f, this),
        SimFlowPlant_ShutDownFuel_ (x.SimFlowPlant_ShutDownFuel_, f, this),
        SimFlowPlant_ShutDownElecityConsump_ (x.SimFlowPlant_ShutDownElecityConsump_, f, this),
        SimFlowPlant_AncilliaryElecityConstTerm_ (x.SimFlowPlant_AncilliaryElecityConstTerm_, f, this),
        SimFlowPlant_AncilliaryElecityLinearTerm_ (x.SimFlowPlant_AncilliaryElecityLinearTerm_, f, this),
        SimFlowPlant_SkinLossCalcMode_ (x.SimFlowPlant_SkinLossCalcMode_, f, this),
        SimFlowPlant_ZoneName_ (x.SimFlowPlant_ZoneName_, f, this),
        SimFlowPlant_SkinLossRadiativeFract_ (x.SimFlowPlant_SkinLossRadiativeFract_, f, this),
        SimFlowPlant_ConstSkinLossRate_ (x.SimFlowPlant_ConstSkinLossRate_, f, this),
        SimFlowPlant_SkinLossUFactorTimesAreaTerm_ (x.SimFlowPlant_SkinLossUFactorTimesAreaTerm_, f, this),
        SimFlowPlant_SkinLossQuadraticCurveName_ (x.SimFlowPlant_SkinLossQuadraticCurveName_, f, this),
        SimFlowPlant_DilutionAirFlowRate_ (x.SimFlowPlant_DilutionAirFlowRate_, f, this),
        SimFlowPlant_StackHeatLossToDilutionAir_ (x.SimFlowPlant_StackHeatLossToDilutionAir_, f, this),
        SimFlowPlant_DilutionInletAirNodeName_ (x.SimFlowPlant_DilutionInletAirNodeName_, f, this),
        SimFlowPlant_DilutionOutletAirNodeName_ (x.SimFlowPlant_DilutionOutletAirNodeName_, f, this),
        SimFlowPlant_MinOperatPoint_ (x.SimFlowPlant_MinOperatPoint_, f, this),
        SimFlowPlant_MaxOperatPoint_ (x.SimFlowPlant_MaxOperatPoint_, f, this)
      {
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_EffCurveMode_ (this),
        SimFlowPlant_EffCurveName_ (this),
        SimFlowPlant_NomEff_ (this),
        SimFlowPlant_NomElecPwr_ (this),
        SimFlowPlant_NumStopsAtStartSim_ (this),
        SimFlowPlant_CyclingPerfDegradCoef_ (this),
        SimFlowPlant_NumRunHoursAtBeginningSim_ (this),
        SimFlowPlant_AccumRunTimeDegradCoef_ (this),
        SimFlowPlant_RunTimeDegradTimeThresh_ (this),
        SimFlowPlant_PwrUpTransientLimit_ (this),
        SimFlowPlant_PwrDownTransientLimit_ (this),
        SimFlowPlant_StartUpTime_ (this),
        SimFlowPlant_StartUpFuel_ (this),
        SimFlowPlant_StartUpElecityConsump_ (this),
        SimFlowPlant_StartUpElecityProInduced_ (this),
        SimFlowPlant_ShutDownTime_ (this),
        SimFlowPlant_ShutDownFuel_ (this),
        SimFlowPlant_ShutDownElecityConsump_ (this),
        SimFlowPlant_AncilliaryElecityConstTerm_ (this),
        SimFlowPlant_AncilliaryElecityLinearTerm_ (this),
        SimFlowPlant_SkinLossCalcMode_ (this),
        SimFlowPlant_ZoneName_ (this),
        SimFlowPlant_SkinLossRadiativeFract_ (this),
        SimFlowPlant_ConstSkinLossRate_ (this),
        SimFlowPlant_SkinLossUFactorTimesAreaTerm_ (this),
        SimFlowPlant_SkinLossQuadraticCurveName_ (this),
        SimFlowPlant_DilutionAirFlowRate_ (this),
        SimFlowPlant_StackHeatLossToDilutionAir_ (this),
        SimFlowPlant_DilutionInletAirNodeName_ (this),
        SimFlowPlant_DilutionOutletAirNodeName_ (this),
        SimFlowPlant_MinOperatPoint_ (this),
        SimFlowPlant_MaxOperatPoint_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_EffCurveMode
          //
          if (n.name () == "SimFlowPlant_EffCurveMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_EffCurveMode_type > r (
              SimFlowPlant_EffCurveMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_EffCurveMode_)
            {
              this->SimFlowPlant_EffCurveMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_EffCurveName
          //
          if (n.name () == "SimFlowPlant_EffCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_EffCurveName_type > r (
              SimFlowPlant_EffCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_EffCurveName_)
            {
              this->SimFlowPlant_EffCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NomEff
          //
          if (n.name () == "SimFlowPlant_NomEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NomEff_)
            {
              this->SimFlowPlant_NomEff_.set (SimFlowPlant_NomEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NomElecPwr
          //
          if (n.name () == "SimFlowPlant_NomElecPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NomElecPwr_)
            {
              this->SimFlowPlant_NomElecPwr_.set (SimFlowPlant_NomElecPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NumStopsAtStartSim
          //
          if (n.name () == "SimFlowPlant_NumStopsAtStartSim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NumStopsAtStartSim_)
            {
              this->SimFlowPlant_NumStopsAtStartSim_.set (SimFlowPlant_NumStopsAtStartSim_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CyclingPerfDegradCoef
          //
          if (n.name () == "SimFlowPlant_CyclingPerfDegradCoef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_CyclingPerfDegradCoef_)
            {
              this->SimFlowPlant_CyclingPerfDegradCoef_.set (SimFlowPlant_CyclingPerfDegradCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NumRunHoursAtBeginningSim
          //
          if (n.name () == "SimFlowPlant_NumRunHoursAtBeginningSim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NumRunHoursAtBeginningSim_)
            {
              this->SimFlowPlant_NumRunHoursAtBeginningSim_.set (SimFlowPlant_NumRunHoursAtBeginningSim_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AccumRunTimeDegradCoef
          //
          if (n.name () == "SimFlowPlant_AccumRunTimeDegradCoef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_AccumRunTimeDegradCoef_)
            {
              this->SimFlowPlant_AccumRunTimeDegradCoef_.set (SimFlowPlant_AccumRunTimeDegradCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RunTimeDegradTimeThresh
          //
          if (n.name () == "SimFlowPlant_RunTimeDegradTimeThresh" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RunTimeDegradTimeThresh_)
            {
              this->SimFlowPlant_RunTimeDegradTimeThresh_.set (SimFlowPlant_RunTimeDegradTimeThresh_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_PwrUpTransientLimit
          //
          if (n.name () == "SimFlowPlant_PwrUpTransientLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_PwrUpTransientLimit_)
            {
              this->SimFlowPlant_PwrUpTransientLimit_.set (SimFlowPlant_PwrUpTransientLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_PwrDownTransientLimit
          //
          if (n.name () == "SimFlowPlant_PwrDownTransientLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_PwrDownTransientLimit_)
            {
              this->SimFlowPlant_PwrDownTransientLimit_.set (SimFlowPlant_PwrDownTransientLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_StartUpTime
          //
          if (n.name () == "SimFlowPlant_StartUpTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_StartUpTime_)
            {
              this->SimFlowPlant_StartUpTime_.set (SimFlowPlant_StartUpTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_StartUpFuel
          //
          if (n.name () == "SimFlowPlant_StartUpFuel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_StartUpFuel_)
            {
              this->SimFlowPlant_StartUpFuel_.set (SimFlowPlant_StartUpFuel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_StartUpElecityConsump
          //
          if (n.name () == "SimFlowPlant_StartUpElecityConsump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_StartUpElecityConsump_)
            {
              this->SimFlowPlant_StartUpElecityConsump_.set (SimFlowPlant_StartUpElecityConsump_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_StartUpElecityProInduced
          //
          if (n.name () == "SimFlowPlant_StartUpElecityProInduced" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_StartUpElecityProInduced_)
            {
              this->SimFlowPlant_StartUpElecityProInduced_.set (SimFlowPlant_StartUpElecityProInduced_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ShutDownTime
          //
          if (n.name () == "SimFlowPlant_ShutDownTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_ShutDownTime_)
            {
              this->SimFlowPlant_ShutDownTime_.set (SimFlowPlant_ShutDownTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ShutDownFuel
          //
          if (n.name () == "SimFlowPlant_ShutDownFuel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_ShutDownFuel_)
            {
              this->SimFlowPlant_ShutDownFuel_.set (SimFlowPlant_ShutDownFuel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ShutDownElecityConsump
          //
          if (n.name () == "SimFlowPlant_ShutDownElecityConsump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_ShutDownElecityConsump_)
            {
              this->SimFlowPlant_ShutDownElecityConsump_.set (SimFlowPlant_ShutDownElecityConsump_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AncilliaryElecityConstTerm
          //
          if (n.name () == "SimFlowPlant_AncilliaryElecityConstTerm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_AncilliaryElecityConstTerm_)
            {
              this->SimFlowPlant_AncilliaryElecityConstTerm_.set (SimFlowPlant_AncilliaryElecityConstTerm_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AncilliaryElecityLinearTerm
          //
          if (n.name () == "SimFlowPlant_AncilliaryElecityLinearTerm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_AncilliaryElecityLinearTerm_)
            {
              this->SimFlowPlant_AncilliaryElecityLinearTerm_.set (SimFlowPlant_AncilliaryElecityLinearTerm_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SkinLossCalcMode
          //
          if (n.name () == "SimFlowPlant_SkinLossCalcMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SkinLossCalcMode_type > r (
              SimFlowPlant_SkinLossCalcMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_SkinLossCalcMode_)
            {
              this->SimFlowPlant_SkinLossCalcMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ZoneName
          //
          if (n.name () == "SimFlowPlant_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ZoneName_type > r (
              SimFlowPlant_ZoneName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ZoneName_)
            {
              this->SimFlowPlant_ZoneName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SkinLossRadiativeFract
          //
          if (n.name () == "SimFlowPlant_SkinLossRadiativeFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SkinLossRadiativeFract_)
            {
              this->SimFlowPlant_SkinLossRadiativeFract_.set (SimFlowPlant_SkinLossRadiativeFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ConstSkinLossRate
          //
          if (n.name () == "SimFlowPlant_ConstSkinLossRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_ConstSkinLossRate_)
            {
              this->SimFlowPlant_ConstSkinLossRate_.set (SimFlowPlant_ConstSkinLossRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SkinLossUFactorTimesAreaTerm
          //
          if (n.name () == "SimFlowPlant_SkinLossUFactorTimesAreaTerm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_)
            {
              this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_.set (SimFlowPlant_SkinLossUFactorTimesAreaTerm_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SkinLossQuadraticCurveName
          //
          if (n.name () == "SimFlowPlant_SkinLossQuadraticCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SkinLossQuadraticCurveName_type > r (
              SimFlowPlant_SkinLossQuadraticCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SkinLossQuadraticCurveName_)
            {
              this->SimFlowPlant_SkinLossQuadraticCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DilutionAirFlowRate
          //
          if (n.name () == "SimFlowPlant_DilutionAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DilutionAirFlowRate_)
            {
              this->SimFlowPlant_DilutionAirFlowRate_.set (SimFlowPlant_DilutionAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_StackHeatLossToDilutionAir
          //
          if (n.name () == "SimFlowPlant_StackHeatLossToDilutionAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_StackHeatLossToDilutionAir_)
            {
              this->SimFlowPlant_StackHeatLossToDilutionAir_.set (SimFlowPlant_StackHeatLossToDilutionAir_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DilutionInletAirNodeName
          //
          if (n.name () == "SimFlowPlant_DilutionInletAirNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_DilutionInletAirNodeName_type > r (
              SimFlowPlant_DilutionInletAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_DilutionInletAirNodeName_)
            {
              this->SimFlowPlant_DilutionInletAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DilutionOutletAirNodeName
          //
          if (n.name () == "SimFlowPlant_DilutionOutletAirNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_DilutionOutletAirNodeName_type > r (
              SimFlowPlant_DilutionOutletAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_DilutionOutletAirNodeName_)
            {
              this->SimFlowPlant_DilutionOutletAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_MinOperatPoint
          //
          if (n.name () == "SimFlowPlant_MinOperatPoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MinOperatPoint_)
            {
              this->SimFlowPlant_MinOperatPoint_.set (SimFlowPlant_MinOperatPoint_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxOperatPoint
          //
          if (n.name () == "SimFlowPlant_MaxOperatPoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MaxOperatPoint_)
            {
              this->SimFlowPlant_MaxOperatPoint_.set (SimFlowPlant_MaxOperatPoint_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule* SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ElectricalGenerator_FuelCellPowerModule (*this, f, c);
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule& SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      operator= (const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_EffCurveMode_ = x.SimFlowPlant_EffCurveMode_;
          this->SimFlowPlant_EffCurveName_ = x.SimFlowPlant_EffCurveName_;
          this->SimFlowPlant_NomEff_ = x.SimFlowPlant_NomEff_;
          this->SimFlowPlant_NomElecPwr_ = x.SimFlowPlant_NomElecPwr_;
          this->SimFlowPlant_NumStopsAtStartSim_ = x.SimFlowPlant_NumStopsAtStartSim_;
          this->SimFlowPlant_CyclingPerfDegradCoef_ = x.SimFlowPlant_CyclingPerfDegradCoef_;
          this->SimFlowPlant_NumRunHoursAtBeginningSim_ = x.SimFlowPlant_NumRunHoursAtBeginningSim_;
          this->SimFlowPlant_AccumRunTimeDegradCoef_ = x.SimFlowPlant_AccumRunTimeDegradCoef_;
          this->SimFlowPlant_RunTimeDegradTimeThresh_ = x.SimFlowPlant_RunTimeDegradTimeThresh_;
          this->SimFlowPlant_PwrUpTransientLimit_ = x.SimFlowPlant_PwrUpTransientLimit_;
          this->SimFlowPlant_PwrDownTransientLimit_ = x.SimFlowPlant_PwrDownTransientLimit_;
          this->SimFlowPlant_StartUpTime_ = x.SimFlowPlant_StartUpTime_;
          this->SimFlowPlant_StartUpFuel_ = x.SimFlowPlant_StartUpFuel_;
          this->SimFlowPlant_StartUpElecityConsump_ = x.SimFlowPlant_StartUpElecityConsump_;
          this->SimFlowPlant_StartUpElecityProInduced_ = x.SimFlowPlant_StartUpElecityProInduced_;
          this->SimFlowPlant_ShutDownTime_ = x.SimFlowPlant_ShutDownTime_;
          this->SimFlowPlant_ShutDownFuel_ = x.SimFlowPlant_ShutDownFuel_;
          this->SimFlowPlant_ShutDownElecityConsump_ = x.SimFlowPlant_ShutDownElecityConsump_;
          this->SimFlowPlant_AncilliaryElecityConstTerm_ = x.SimFlowPlant_AncilliaryElecityConstTerm_;
          this->SimFlowPlant_AncilliaryElecityLinearTerm_ = x.SimFlowPlant_AncilliaryElecityLinearTerm_;
          this->SimFlowPlant_SkinLossCalcMode_ = x.SimFlowPlant_SkinLossCalcMode_;
          this->SimFlowPlant_ZoneName_ = x.SimFlowPlant_ZoneName_;
          this->SimFlowPlant_SkinLossRadiativeFract_ = x.SimFlowPlant_SkinLossRadiativeFract_;
          this->SimFlowPlant_ConstSkinLossRate_ = x.SimFlowPlant_ConstSkinLossRate_;
          this->SimFlowPlant_SkinLossUFactorTimesAreaTerm_ = x.SimFlowPlant_SkinLossUFactorTimesAreaTerm_;
          this->SimFlowPlant_SkinLossQuadraticCurveName_ = x.SimFlowPlant_SkinLossQuadraticCurveName_;
          this->SimFlowPlant_DilutionAirFlowRate_ = x.SimFlowPlant_DilutionAirFlowRate_;
          this->SimFlowPlant_StackHeatLossToDilutionAir_ = x.SimFlowPlant_StackHeatLossToDilutionAir_;
          this->SimFlowPlant_DilutionInletAirNodeName_ = x.SimFlowPlant_DilutionInletAirNodeName_;
          this->SimFlowPlant_DilutionOutletAirNodeName_ = x.SimFlowPlant_DilutionOutletAirNodeName_;
          this->SimFlowPlant_MinOperatPoint_ = x.SimFlowPlant_MinOperatPoint_;
          this->SimFlowPlant_MaxOperatPoint_ = x.SimFlowPlant_MaxOperatPoint_;
        }

        return *this;
      }

      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule::
      ~SimFlowPlant_ElectricalGenerator_FuelCellPowerModule ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

