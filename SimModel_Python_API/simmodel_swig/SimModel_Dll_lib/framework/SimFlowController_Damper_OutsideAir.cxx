// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowController_Damper_OutsideAir.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowController_Damper_OutsideAir
      // 

      const SimFlowController_Damper_OutsideAir::SimFlowCntrl_Name_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Name () const
      {
        return this->SimFlowCntrl_Name_;
      }

      SimFlowController_Damper_OutsideAir::SimFlowCntrl_Name_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Name ()
      {
        return this->SimFlowCntrl_Name_;
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Name (const SimFlowCntrl_Name_type& x)
      {
        this->SimFlowCntrl_Name_.set (x);
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Name (const SimFlowCntrl_Name_optional& x)
      {
        this->SimFlowCntrl_Name_ = x;
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Name (::std::auto_ptr< SimFlowCntrl_Name_type > x)
      {
        this->SimFlowCntrl_Name_.set (x);
      }

      const SimFlowController_Damper_OutsideAir::SimFlowCntrl_MaxPresDrop_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxPresDrop () const
      {
        return this->SimFlowCntrl_MaxPresDrop_;
      }

      SimFlowController_Damper_OutsideAir::SimFlowCntrl_MaxPresDrop_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxPresDrop ()
      {
        return this->SimFlowCntrl_MaxPresDrop_;
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxPresDrop (const SimFlowCntrl_MaxPresDrop_type& x)
      {
        this->SimFlowCntrl_MaxPresDrop_.set (x);
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxPresDrop (const SimFlowCntrl_MaxPresDrop_optional& x)
      {
        this->SimFlowCntrl_MaxPresDrop_ = x;
      }

      const SimFlowController_Damper_OutsideAir::SimFlowCntrl_MaxFlowRate_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxFlowRate () const
      {
        return this->SimFlowCntrl_MaxFlowRate_;
      }

      SimFlowController_Damper_OutsideAir::SimFlowCntrl_MaxFlowRate_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxFlowRate ()
      {
        return this->SimFlowCntrl_MaxFlowRate_;
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxFlowRate (const SimFlowCntrl_MaxFlowRate_type& x)
      {
        this->SimFlowCntrl_MaxFlowRate_.set (x);
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_MaxFlowRate (const SimFlowCntrl_MaxFlowRate_optional& x)
      {
        this->SimFlowCntrl_MaxFlowRate_ = x;
      }

      const SimFlowController_Damper_OutsideAir::SimFlowCntrl_Width_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Width () const
      {
        return this->SimFlowCntrl_Width_;
      }

      SimFlowController_Damper_OutsideAir::SimFlowCntrl_Width_optional& SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Width ()
      {
        return this->SimFlowCntrl_Width_;
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Width (const SimFlowCntrl_Width_type& x)
      {
        this->SimFlowCntrl_Width_.set (x);
      }

      void SimFlowController_Damper_OutsideAir::
      SimFlowCntrl_Width (const SimFlowCntrl_Width_optional& x)
      {
        this->SimFlowCntrl_Width_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowController_Damper_OutsideAir
      //

      SimFlowController_Damper_OutsideAir::
      SimFlowController_Damper_OutsideAir ()
      : ::schema::simxml::MepModel::SimFlowController_Damper (),
        SimFlowCntrl_Name_ (this),
        SimFlowCntrl_MaxPresDrop_ (this),
        SimFlowCntrl_MaxFlowRate_ (this),
        SimFlowCntrl_Width_ (this)
      {
      }

      SimFlowController_Damper_OutsideAir::
      SimFlowController_Damper_OutsideAir (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowController_Damper (RefId),
        SimFlowCntrl_Name_ (this),
        SimFlowCntrl_MaxPresDrop_ (this),
        SimFlowCntrl_MaxFlowRate_ (this),
        SimFlowCntrl_Width_ (this)
      {
      }

      SimFlowController_Damper_OutsideAir::
      SimFlowController_Damper_OutsideAir (const SimFlowController_Damper_OutsideAir& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowController_Damper (x, f, c),
        SimFlowCntrl_Name_ (x.SimFlowCntrl_Name_, f, this),
        SimFlowCntrl_MaxPresDrop_ (x.SimFlowCntrl_MaxPresDrop_, f, this),
        SimFlowCntrl_MaxFlowRate_ (x.SimFlowCntrl_MaxFlowRate_, f, this),
        SimFlowCntrl_Width_ (x.SimFlowCntrl_Width_, f, this)
      {
      }

      SimFlowController_Damper_OutsideAir::
      SimFlowController_Damper_OutsideAir (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowController_Damper (e, f | ::xml_schema::flags::base, c),
        SimFlowCntrl_Name_ (this),
        SimFlowCntrl_MaxPresDrop_ (this),
        SimFlowCntrl_MaxFlowRate_ (this),
        SimFlowCntrl_Width_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowController_Damper_OutsideAir::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowController_Damper::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCntrl_Name
          //
          if (n.name () == "SimFlowCntrl_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCntrl_Name_type > r (
              SimFlowCntrl_Name_traits::create (i, f, this));

            if (!this->SimFlowCntrl_Name_)
            {
              this->SimFlowCntrl_Name_.set (r);
              continue;
            }
          }

          // SimFlowCntrl_MaxPresDrop
          //
          if (n.name () == "SimFlowCntrl_MaxPresDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCntrl_MaxPresDrop_)
            {
              this->SimFlowCntrl_MaxPresDrop_.set (SimFlowCntrl_MaxPresDrop_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCntrl_MaxFlowRate
          //
          if (n.name () == "SimFlowCntrl_MaxFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCntrl_MaxFlowRate_)
            {
              this->SimFlowCntrl_MaxFlowRate_.set (SimFlowCntrl_MaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCntrl_Width
          //
          if (n.name () == "SimFlowCntrl_Width" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCntrl_Width_)
            {
              this->SimFlowCntrl_Width_.set (SimFlowCntrl_Width_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowController_Damper_OutsideAir* SimFlowController_Damper_OutsideAir::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowController_Damper_OutsideAir (*this, f, c);
      }

      SimFlowController_Damper_OutsideAir& SimFlowController_Damper_OutsideAir::
      operator= (const SimFlowController_Damper_OutsideAir& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowController_Damper& > (*this) = x;
          this->SimFlowCntrl_Name_ = x.SimFlowCntrl_Name_;
          this->SimFlowCntrl_MaxPresDrop_ = x.SimFlowCntrl_MaxPresDrop_;
          this->SimFlowCntrl_MaxFlowRate_ = x.SimFlowCntrl_MaxFlowRate_;
          this->SimFlowCntrl_Width_ = x.SimFlowCntrl_Width_;
        }

        return *this;
      }

      SimFlowController_Damper_OutsideAir::
      ~SimFlowController_Damper_OutsideAir ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

