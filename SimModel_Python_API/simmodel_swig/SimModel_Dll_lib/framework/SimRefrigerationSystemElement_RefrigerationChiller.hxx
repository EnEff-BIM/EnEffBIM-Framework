// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_REFRIGERATION_SYSTEM_ELEMENT_REFRIGERATION_CHILLER_HXX
#define SIM_REFRIGERATION_SYSTEM_ELEMENT_REFRIGERATION_CHILLER_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_RefrigerationChiller;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simrefrigerationsystemelement.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_RefrigerationChiller: public ::schema::simxml::MepModel::SimRefrigerationSystemElement
      {
        public:
        // SimRefrigSysElem_Name
        //
        typedef ::xml_schema::string SimRefrigSysElem_Name_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_Name_type > SimRefrigSysElem_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_Name_type, char > SimRefrigSysElem_Name_traits;

        const SimRefrigSysElem_Name_optional&
        SimRefrigSysElem_Name () const;

        SimRefrigSysElem_Name_optional&
        SimRefrigSysElem_Name ();

        void
        SimRefrigSysElem_Name (const SimRefrigSysElem_Name_type& x);

        void
        SimRefrigSysElem_Name (const SimRefrigSysElem_Name_optional& x);

        void
        SimRefrigSysElem_Name (::std::auto_ptr< SimRefrigSysElem_Name_type > p);

        // SimRefrigSysElem_AvailSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AvailSchedName_type > SimRefrigSysElem_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AvailSchedName_type, char > SimRefrigSysElem_AvailSchedName_traits;

        const SimRefrigSysElem_AvailSchedName_optional&
        SimRefrigSysElem_AvailSchedName () const;

        SimRefrigSysElem_AvailSchedName_optional&
        SimRefrigSysElem_AvailSchedName ();

        void
        SimRefrigSysElem_AvailSchedName (const SimRefrigSysElem_AvailSchedName_type& x);

        void
        SimRefrigSysElem_AvailSchedName (const SimRefrigSysElem_AvailSchedName_optional& x);

        void
        SimRefrigSysElem_AvailSchedName (::std::auto_ptr< SimRefrigSysElem_AvailSchedName_type > p);

        // SimRefrigSysElem_AverageRefrigChargeInvent
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_AverageRefrigChargeInvent_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AverageRefrigChargeInvent_type > SimRefrigSysElem_AverageRefrigChargeInvent_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AverageRefrigChargeInvent_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_AverageRefrigChargeInvent_traits;

        const SimRefrigSysElem_AverageRefrigChargeInvent_optional&
        SimRefrigSysElem_AverageRefrigChargeInvent () const;

        SimRefrigSysElem_AverageRefrigChargeInvent_optional&
        SimRefrigSysElem_AverageRefrigChargeInvent ();

        void
        SimRefrigSysElem_AverageRefrigChargeInvent (const SimRefrigSysElem_AverageRefrigChargeInvent_type& x);

        void
        SimRefrigSysElem_AverageRefrigChargeInvent (const SimRefrigSysElem_AverageRefrigChargeInvent_optional& x);

        // SimRefrigSysElem_RatedFanPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedFanPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedFanPwr_type > SimRefrigSysElem_RatedFanPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedFanPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedFanPwr_traits;

        const SimRefrigSysElem_RatedFanPwr_optional&
        SimRefrigSysElem_RatedFanPwr () const;

        SimRefrigSysElem_RatedFanPwr_optional&
        SimRefrigSysElem_RatedFanPwr ();

        void
        SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_type& x);

        void
        SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_optional& x);

        // SimRefrigSysElem_MinFanAirFlowRatio
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_MinFanAirFlowRatio_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_MinFanAirFlowRatio_type > SimRefrigSysElem_MinFanAirFlowRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_MinFanAirFlowRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_MinFanAirFlowRatio_traits;

        const SimRefrigSysElem_MinFanAirFlowRatio_optional&
        SimRefrigSysElem_MinFanAirFlowRatio () const;

        SimRefrigSysElem_MinFanAirFlowRatio_optional&
        SimRefrigSysElem_MinFanAirFlowRatio ();

        void
        SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_type& x);

        void
        SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_optional& x);

        // SimRefrigSysElem_FanSpeedCntlType
        //
        typedef ::xml_schema::string SimRefrigSysElem_FanSpeedCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_FanSpeedCntlType_type > SimRefrigSysElem_FanSpeedCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_FanSpeedCntlType_type, char > SimRefrigSysElem_FanSpeedCntlType_traits;

        const SimRefrigSysElem_FanSpeedCntlType_optional&
        SimRefrigSysElem_FanSpeedCntlType () const;

        SimRefrigSysElem_FanSpeedCntlType_optional&
        SimRefrigSysElem_FanSpeedCntlType ();

        void
        SimRefrigSysElem_FanSpeedCntlType (const SimRefrigSysElem_FanSpeedCntlType_type& x);

        void
        SimRefrigSysElem_FanSpeedCntlType (const SimRefrigSysElem_FanSpeedCntlType_optional& x);

        void
        SimRefrigSysElem_FanSpeedCntlType (::std::auto_ptr< SimRefrigSysElem_FanSpeedCntlType_type > p);

        // SimRefrigSysElem_RatedCoolingSrcTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedCoolingSrcTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedCoolingSrcTemp_type > SimRefrigSysElem_RatedCoolingSrcTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedCoolingSrcTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedCoolingSrcTemp_traits;

        const SimRefrigSysElem_RatedCoolingSrcTemp_optional&
        SimRefrigSysElem_RatedCoolingSrcTemp () const;

        SimRefrigSysElem_RatedCoolingSrcTemp_optional&
        SimRefrigSysElem_RatedCoolingSrcTemp ();

        void
        SimRefrigSysElem_RatedCoolingSrcTemp (const SimRefrigSysElem_RatedCoolingSrcTemp_type& x);

        void
        SimRefrigSysElem_RatedCoolingSrcTemp (const SimRefrigSysElem_RatedCoolingSrcTemp_optional& x);

        // SimRefrigSysElem_RatedTotalHeatingPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedTotalHeatingPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedTotalHeatingPwr_type > SimRefrigSysElem_RatedTotalHeatingPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedTotalHeatingPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedTotalHeatingPwr_traits;

        const SimRefrigSysElem_RatedTotalHeatingPwr_optional&
        SimRefrigSysElem_RatedTotalHeatingPwr () const;

        SimRefrigSysElem_RatedTotalHeatingPwr_optional&
        SimRefrigSysElem_RatedTotalHeatingPwr ();

        void
        SimRefrigSysElem_RatedTotalHeatingPwr (const SimRefrigSysElem_RatedTotalHeatingPwr_type& x);

        void
        SimRefrigSysElem_RatedTotalHeatingPwr (const SimRefrigSysElem_RatedTotalHeatingPwr_optional& x);

        // SimRefrigSysElem_HeatingPwrSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_HeatingPwrSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_HeatingPwrSchedName_type > SimRefrigSysElem_HeatingPwrSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_HeatingPwrSchedName_type, char > SimRefrigSysElem_HeatingPwrSchedName_traits;

        const SimRefrigSysElem_HeatingPwrSchedName_optional&
        SimRefrigSysElem_HeatingPwrSchedName () const;

        SimRefrigSysElem_HeatingPwrSchedName_optional&
        SimRefrigSysElem_HeatingPwrSchedName ();

        void
        SimRefrigSysElem_HeatingPwrSchedName (const SimRefrigSysElem_HeatingPwrSchedName_type& x);

        void
        SimRefrigSysElem_HeatingPwrSchedName (const SimRefrigSysElem_HeatingPwrSchedName_optional& x);

        void
        SimRefrigSysElem_HeatingPwrSchedName (::std::auto_ptr< SimRefrigSysElem_HeatingPwrSchedName_type > p);

        // SimRefrigSysElem_DefrostType
        //
        typedef ::xml_schema::string SimRefrigSysElem_DefrostType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostType_type > SimRefrigSysElem_DefrostType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostType_type, char > SimRefrigSysElem_DefrostType_traits;

        const SimRefrigSysElem_DefrostType_optional&
        SimRefrigSysElem_DefrostType () const;

        SimRefrigSysElem_DefrostType_optional&
        SimRefrigSysElem_DefrostType ();

        void
        SimRefrigSysElem_DefrostType (const SimRefrigSysElem_DefrostType_type& x);

        void
        SimRefrigSysElem_DefrostType (const SimRefrigSysElem_DefrostType_optional& x);

        void
        SimRefrigSysElem_DefrostType (::std::auto_ptr< SimRefrigSysElem_DefrostType_type > p);

        // SimRefrigSysElem_DefrostCntlType
        //
        typedef ::xml_schema::string SimRefrigSysElem_DefrostCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostCntlType_type > SimRefrigSysElem_DefrostCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostCntlType_type, char > SimRefrigSysElem_DefrostCntlType_traits;

        const SimRefrigSysElem_DefrostCntlType_optional&
        SimRefrigSysElem_DefrostCntlType () const;

        SimRefrigSysElem_DefrostCntlType_optional&
        SimRefrigSysElem_DefrostCntlType ();

        void
        SimRefrigSysElem_DefrostCntlType (const SimRefrigSysElem_DefrostCntlType_type& x);

        void
        SimRefrigSysElem_DefrostCntlType (const SimRefrigSysElem_DefrostCntlType_optional& x);

        void
        SimRefrigSysElem_DefrostCntlType (::std::auto_ptr< SimRefrigSysElem_DefrostCntlType_type > p);

        // SimRefrigSysElem_DefrostSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_DefrostSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostSchedName_type > SimRefrigSysElem_DefrostSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostSchedName_type, char > SimRefrigSysElem_DefrostSchedName_traits;

        const SimRefrigSysElem_DefrostSchedName_optional&
        SimRefrigSysElem_DefrostSchedName () const;

        SimRefrigSysElem_DefrostSchedName_optional&
        SimRefrigSysElem_DefrostSchedName ();

        void
        SimRefrigSysElem_DefrostSchedName (const SimRefrigSysElem_DefrostSchedName_type& x);

        void
        SimRefrigSysElem_DefrostSchedName (const SimRefrigSysElem_DefrostSchedName_optional& x);

        void
        SimRefrigSysElem_DefrostSchedName (::std::auto_ptr< SimRefrigSysElem_DefrostSchedName_type > p);

        // SimRefrigSysElem_DefrostDripDownSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_DefrostDripDownSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostDripDownSchedName_type > SimRefrigSysElem_DefrostDripDownSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostDripDownSchedName_type, char > SimRefrigSysElem_DefrostDripDownSchedName_traits;

        const SimRefrigSysElem_DefrostDripDownSchedName_optional&
        SimRefrigSysElem_DefrostDripDownSchedName () const;

        SimRefrigSysElem_DefrostDripDownSchedName_optional&
        SimRefrigSysElem_DefrostDripDownSchedName ();

        void
        SimRefrigSysElem_DefrostDripDownSchedName (const SimRefrigSysElem_DefrostDripDownSchedName_type& x);

        void
        SimRefrigSysElem_DefrostDripDownSchedName (const SimRefrigSysElem_DefrostDripDownSchedName_optional& x);

        void
        SimRefrigSysElem_DefrostDripDownSchedName (::std::auto_ptr< SimRefrigSysElem_DefrostDripDownSchedName_type > p);

        // SimRefrigSysElem_DefrostPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_DefrostPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostPwr_type > SimRefrigSysElem_DefrostPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_DefrostPwr_traits;

        const SimRefrigSysElem_DefrostPwr_optional&
        SimRefrigSysElem_DefrostPwr () const;

        SimRefrigSysElem_DefrostPwr_optional&
        SimRefrigSysElem_DefrostPwr ();

        void
        SimRefrigSysElem_DefrostPwr (const SimRefrigSysElem_DefrostPwr_type& x);

        void
        SimRefrigSysElem_DefrostPwr (const SimRefrigSysElem_DefrostPwr_optional& x);

        // SimRefrigSysElem_TempTerminationDefrostFractToIce
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_TempTerminationDefrostFractToIce_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_TempTerminationDefrostFractToIce_type > SimRefrigSysElem_TempTerminationDefrostFractToIce_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_TempTerminationDefrostFractToIce_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_TempTerminationDefrostFractToIce_traits;

        const SimRefrigSysElem_TempTerminationDefrostFractToIce_optional&
        SimRefrigSysElem_TempTerminationDefrostFractToIce () const;

        SimRefrigSysElem_TempTerminationDefrostFractToIce_optional&
        SimRefrigSysElem_TempTerminationDefrostFractToIce ();

        void
        SimRefrigSysElem_TempTerminationDefrostFractToIce (const SimRefrigSysElem_TempTerminationDefrostFractToIce_type& x);

        void
        SimRefrigSysElem_TempTerminationDefrostFractToIce (const SimRefrigSysElem_TempTerminationDefrostFractToIce_optional& x);

        // SimRefrigSysElem_CapRatingType
        //
        typedef ::xml_schema::string SimRefrigSysElem_CapRatingType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CapRatingType_type > SimRefrigSysElem_CapRatingType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CapRatingType_type, char > SimRefrigSysElem_CapRatingType_traits;

        const SimRefrigSysElem_CapRatingType_optional&
        SimRefrigSysElem_CapRatingType () const;

        SimRefrigSysElem_CapRatingType_optional&
        SimRefrigSysElem_CapRatingType ();

        void
        SimRefrigSysElem_CapRatingType (const SimRefrigSysElem_CapRatingType_type& x);

        void
        SimRefrigSysElem_CapRatingType (const SimRefrigSysElem_CapRatingType_optional& x);

        void
        SimRefrigSysElem_CapRatingType (::std::auto_ptr< SimRefrigSysElem_CapRatingType_type > p);

        // SimRefrigSysElem_RatedUnitLoadFactor
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedUnitLoadFactor_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedUnitLoadFactor_type > SimRefrigSysElem_RatedUnitLoadFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedUnitLoadFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedUnitLoadFactor_traits;

        const SimRefrigSysElem_RatedUnitLoadFactor_optional&
        SimRefrigSysElem_RatedUnitLoadFactor () const;

        SimRefrigSysElem_RatedUnitLoadFactor_optional&
        SimRefrigSysElem_RatedUnitLoadFactor ();

        void
        SimRefrigSysElem_RatedUnitLoadFactor (const SimRefrigSysElem_RatedUnitLoadFactor_type& x);

        void
        SimRefrigSysElem_RatedUnitLoadFactor (const SimRefrigSysElem_RatedUnitLoadFactor_optional& x);

        // SimRefrigSysElem_RatedCap
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedCap_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedCap_type > SimRefrigSysElem_RatedCap_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedCap_traits;

        const SimRefrigSysElem_RatedCap_optional&
        SimRefrigSysElem_RatedCap () const;

        SimRefrigSysElem_RatedCap_optional&
        SimRefrigSysElem_RatedCap ();

        void
        SimRefrigSysElem_RatedCap (const SimRefrigSysElem_RatedCap_type& x);

        void
        SimRefrigSysElem_RatedCap (const SimRefrigSysElem_RatedCap_optional& x);

        // SimRefrigSysElem_RatedRelativeHumd
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedRelativeHumd_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedRelativeHumd_type > SimRefrigSysElem_RatedRelativeHumd_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedRelativeHumd_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedRelativeHumd_traits;

        const SimRefrigSysElem_RatedRelativeHumd_optional&
        SimRefrigSysElem_RatedRelativeHumd () const;

        SimRefrigSysElem_RatedRelativeHumd_optional&
        SimRefrigSysElem_RatedRelativeHumd ();

        void
        SimRefrigSysElem_RatedRelativeHumd (const SimRefrigSysElem_RatedRelativeHumd_type& x);

        void
        SimRefrigSysElem_RatedRelativeHumd (const SimRefrigSysElem_RatedRelativeHumd_optional& x);

        // SimRefrigSysElem_RatedTempDiffDT1
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedTempDiffDT1_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedTempDiffDT1_type > SimRefrigSysElem_RatedTempDiffDT1_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedTempDiffDT1_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedTempDiffDT1_traits;

        const SimRefrigSysElem_RatedTempDiffDT1_optional&
        SimRefrigSysElem_RatedTempDiffDT1 () const;

        SimRefrigSysElem_RatedTempDiffDT1_optional&
        SimRefrigSysElem_RatedTempDiffDT1 ();

        void
        SimRefrigSysElem_RatedTempDiffDT1 (const SimRefrigSysElem_RatedTempDiffDT1_type& x);

        void
        SimRefrigSysElem_RatedTempDiffDT1 (const SimRefrigSysElem_RatedTempDiffDT1_optional& x);

        // SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_type > SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_traits;

        const SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_optional&
        SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp () const;

        SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_optional&
        SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp ();

        void
        SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp (const SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_type& x);

        void
        SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp (const SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_optional& x);

        // SimRefrigSysElem_CoilFlowRatio
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_CoilFlowRatio_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CoilFlowRatio_type > SimRefrigSysElem_CoilFlowRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CoilFlowRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_CoilFlowRatio_traits;

        const SimRefrigSysElem_CoilFlowRatio_optional&
        SimRefrigSysElem_CoilFlowRatio () const;

        SimRefrigSysElem_CoilFlowRatio_optional&
        SimRefrigSysElem_CoilFlowRatio ();

        void
        SimRefrigSysElem_CoilFlowRatio (const SimRefrigSysElem_CoilFlowRatio_type& x);

        void
        SimRefrigSysElem_CoilFlowRatio (const SimRefrigSysElem_CoilFlowRatio_optional& x);

        // SimRefrigSysElem_RefrigerantCorrecFactor
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RefrigerantCorrecFactor_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RefrigerantCorrecFactor_type > SimRefrigSysElem_RefrigerantCorrecFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RefrigerantCorrecFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RefrigerantCorrecFactor_traits;

        const SimRefrigSysElem_RefrigerantCorrecFactor_optional&
        SimRefrigSysElem_RefrigerantCorrecFactor () const;

        SimRefrigSysElem_RefrigerantCorrecFactor_optional&
        SimRefrigSysElem_RefrigerantCorrecFactor ();

        void
        SimRefrigSysElem_RefrigerantCorrecFactor (const SimRefrigSysElem_RefrigerantCorrecFactor_type& x);

        void
        SimRefrigSysElem_RefrigerantCorrecFactor (const SimRefrigSysElem_RefrigerantCorrecFactor_optional& x);

        // SimRefrigSysElem_CapCorrecCurveType
        //
        typedef ::xml_schema::string SimRefrigSysElem_CapCorrecCurveType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CapCorrecCurveType_type > SimRefrigSysElem_CapCorrecCurveType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CapCorrecCurveType_type, char > SimRefrigSysElem_CapCorrecCurveType_traits;

        const SimRefrigSysElem_CapCorrecCurveType_optional&
        SimRefrigSysElem_CapCorrecCurveType () const;

        SimRefrigSysElem_CapCorrecCurveType_optional&
        SimRefrigSysElem_CapCorrecCurveType ();

        void
        SimRefrigSysElem_CapCorrecCurveType (const SimRefrigSysElem_CapCorrecCurveType_type& x);

        void
        SimRefrigSysElem_CapCorrecCurveType (const SimRefrigSysElem_CapCorrecCurveType_optional& x);

        void
        SimRefrigSysElem_CapCorrecCurveType (::std::auto_ptr< SimRefrigSysElem_CapCorrecCurveType_type > p);

        // SimRefrigSysElem_CapCorrecCurveName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CapCorrecCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CapCorrecCurveName_type > SimRefrigSysElem_CapCorrecCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CapCorrecCurveName_type, char > SimRefrigSysElem_CapCorrecCurveName_traits;

        const SimRefrigSysElem_CapCorrecCurveName_optional&
        SimRefrigSysElem_CapCorrecCurveName () const;

        SimRefrigSysElem_CapCorrecCurveName_optional&
        SimRefrigSysElem_CapCorrecCurveName ();

        void
        SimRefrigSysElem_CapCorrecCurveName (const SimRefrigSysElem_CapCorrecCurveName_type& x);

        void
        SimRefrigSysElem_CapCorrecCurveName (const SimRefrigSysElem_CapCorrecCurveName_optional& x);

        void
        SimRefrigSysElem_CapCorrecCurveName (::std::auto_ptr< SimRefrigSysElem_CapCorrecCurveName_type > p);

        // SimRefrigSysElem_SHR60CorrecFactor
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_SHR60CorrecFactor_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_SHR60CorrecFactor_type > SimRefrigSysElem_SHR60CorrecFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_SHR60CorrecFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_SHR60CorrecFactor_traits;

        const SimRefrigSysElem_SHR60CorrecFactor_optional&
        SimRefrigSysElem_SHR60CorrecFactor () const;

        SimRefrigSysElem_SHR60CorrecFactor_optional&
        SimRefrigSysElem_SHR60CorrecFactor ();

        void
        SimRefrigSysElem_SHR60CorrecFactor (const SimRefrigSysElem_SHR60CorrecFactor_type& x);

        void
        SimRefrigSysElem_SHR60CorrecFactor (const SimRefrigSysElem_SHR60CorrecFactor_optional& x);

        // SimRefrigSysElem_RatedAirFlow
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedAirFlow_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedAirFlow_type > SimRefrigSysElem_RatedAirFlow_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedAirFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedAirFlow_traits;

        const SimRefrigSysElem_RatedAirFlow_optional&
        SimRefrigSysElem_RatedAirFlow () const;

        SimRefrigSysElem_RatedAirFlow_optional&
        SimRefrigSysElem_RatedAirFlow ();

        void
        SimRefrigSysElem_RatedAirFlow (const SimRefrigSysElem_RatedAirFlow_type& x);

        void
        SimRefrigSysElem_RatedAirFlow (const SimRefrigSysElem_RatedAirFlow_optional& x);

        // SimRefrigSysElem_VertLocation
        //
        typedef ::xml_schema::string SimRefrigSysElem_VertLocation_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_VertLocation_type > SimRefrigSysElem_VertLocation_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_VertLocation_type, char > SimRefrigSysElem_VertLocation_traits;

        const SimRefrigSysElem_VertLocation_optional&
        SimRefrigSysElem_VertLocation () const;

        SimRefrigSysElem_VertLocation_optional&
        SimRefrigSysElem_VertLocation ();

        void
        SimRefrigSysElem_VertLocation (const SimRefrigSysElem_VertLocation_type& x);

        void
        SimRefrigSysElem_VertLocation (const SimRefrigSysElem_VertLocation_optional& x);

        void
        SimRefrigSysElem_VertLocation (::std::auto_ptr< SimRefrigSysElem_VertLocation_type > p);

        // Constructors.
        //
        SimRefrigerationSystemElement_RefrigerationChiller ();

        SimRefrigerationSystemElement_RefrigerationChiller (const RefId_type&);

        SimRefrigerationSystemElement_RefrigerationChiller (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        SimRefrigerationSystemElement_RefrigerationChiller (const SimRefrigerationSystemElement_RefrigerationChiller& x,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        virtual SimRefrigerationSystemElement_RefrigerationChiller*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimRefrigerationSystemElement_RefrigerationChiller&
        operator= (const SimRefrigerationSystemElement_RefrigerationChiller& x);

        virtual 
        ~SimRefrigerationSystemElement_RefrigerationChiller ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimRefrigSysElem_Name_optional SimRefrigSysElem_Name_;
        SimRefrigSysElem_AvailSchedName_optional SimRefrigSysElem_AvailSchedName_;
        SimRefrigSysElem_AverageRefrigChargeInvent_optional SimRefrigSysElem_AverageRefrigChargeInvent_;
        SimRefrigSysElem_RatedFanPwr_optional SimRefrigSysElem_RatedFanPwr_;
        SimRefrigSysElem_MinFanAirFlowRatio_optional SimRefrigSysElem_MinFanAirFlowRatio_;
        SimRefrigSysElem_FanSpeedCntlType_optional SimRefrigSysElem_FanSpeedCntlType_;
        SimRefrigSysElem_RatedCoolingSrcTemp_optional SimRefrigSysElem_RatedCoolingSrcTemp_;
        SimRefrigSysElem_RatedTotalHeatingPwr_optional SimRefrigSysElem_RatedTotalHeatingPwr_;
        SimRefrigSysElem_HeatingPwrSchedName_optional SimRefrigSysElem_HeatingPwrSchedName_;
        SimRefrigSysElem_DefrostType_optional SimRefrigSysElem_DefrostType_;
        SimRefrigSysElem_DefrostCntlType_optional SimRefrigSysElem_DefrostCntlType_;
        SimRefrigSysElem_DefrostSchedName_optional SimRefrigSysElem_DefrostSchedName_;
        SimRefrigSysElem_DefrostDripDownSchedName_optional SimRefrigSysElem_DefrostDripDownSchedName_;
        SimRefrigSysElem_DefrostPwr_optional SimRefrigSysElem_DefrostPwr_;
        SimRefrigSysElem_TempTerminationDefrostFractToIce_optional SimRefrigSysElem_TempTerminationDefrostFractToIce_;
        SimRefrigSysElem_CapRatingType_optional SimRefrigSysElem_CapRatingType_;
        SimRefrigSysElem_RatedUnitLoadFactor_optional SimRefrigSysElem_RatedUnitLoadFactor_;
        SimRefrigSysElem_RatedCap_optional SimRefrigSysElem_RatedCap_;
        SimRefrigSysElem_RatedRelativeHumd_optional SimRefrigSysElem_RatedRelativeHumd_;
        SimRefrigSysElem_RatedTempDiffDT1_optional SimRefrigSysElem_RatedTempDiffDT1_;
        SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_optional SimRefrigSysElem_MaxTempDiffBetweenInletAirandEvaporatingTemp_;
        SimRefrigSysElem_CoilFlowRatio_optional SimRefrigSysElem_CoilFlowRatio_;
        SimRefrigSysElem_RefrigerantCorrecFactor_optional SimRefrigSysElem_RefrigerantCorrecFactor_;
        SimRefrigSysElem_CapCorrecCurveType_optional SimRefrigSysElem_CapCorrecCurveType_;
        SimRefrigSysElem_CapCorrecCurveName_optional SimRefrigSysElem_CapCorrecCurveName_;
        SimRefrigSysElem_SHR60CorrecFactor_optional SimRefrigSysElem_SHR60CorrecFactor_;
        SimRefrigSysElem_RatedAirFlow_optional SimRefrigSysElem_RatedAirFlow_;
        SimRefrigSysElem_VertLocation_optional SimRefrigSysElem_VertLocation_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_REFRIGERATION_SYSTEM_ELEMENT_REFRIGERATION_CHILLER_HXX
