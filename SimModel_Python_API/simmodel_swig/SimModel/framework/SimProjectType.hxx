// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_PROJECT_TYPE_HXX
#define SIM_PROJECT_TYPE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimProjectType;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simobjecttypedefinition.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class integerList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimProjectType: public ::schema::simxml::SimModelCore::SimObjectTypeDefinition
      {
        public:
        // RepresentationMaps
        //
        typedef ::xml_schema::idrefs RepresentationMaps_type;
        typedef ::xsd::cxx::tree::optional< RepresentationMaps_type > RepresentationMaps_optional;
        typedef ::xsd::cxx::tree::traits< RepresentationMaps_type, char > RepresentationMaps_traits;

        const RepresentationMaps_optional&
        RepresentationMaps () const;

        RepresentationMaps_optional&
        RepresentationMaps ();

        void
        RepresentationMaps (const RepresentationMaps_type& x);

        void
        RepresentationMaps (const RepresentationMaps_optional& x);

        void
        RepresentationMaps (::std::auto_ptr< RepresentationMaps_type > p);

        // Tag
        //
        typedef ::xml_schema::string Tag_type;
        typedef ::xsd::cxx::tree::optional< Tag_type > Tag_optional;
        typedef ::xsd::cxx::tree::traits< Tag_type, char > Tag_traits;

        const Tag_optional&
        Tag () const;

        Tag_optional&
        Tag ();

        void
        Tag (const Tag_type& x);

        void
        Tag (const Tag_optional& x);

        void
        Tag (::std::auto_ptr< Tag_type > p);

        // ProjectClientOwner
        //
        typedef ::xml_schema::idref ProjectClientOwner_type;
        typedef ::xsd::cxx::tree::optional< ProjectClientOwner_type > ProjectClientOwner_optional;
        typedef ::xsd::cxx::tree::traits< ProjectClientOwner_type, char > ProjectClientOwner_traits;

        const ProjectClientOwner_optional&
        ProjectClientOwner () const;

        ProjectClientOwner_optional&
        ProjectClientOwner ();

        void
        ProjectClientOwner (const ProjectClientOwner_type& x);

        void
        ProjectClientOwner (const ProjectClientOwner_optional& x);

        void
        ProjectClientOwner (::std::auto_ptr< ProjectClientOwner_type > p);

        // ProjectArchitect
        //
        typedef ::xml_schema::idref ProjectArchitect_type;
        typedef ::xsd::cxx::tree::optional< ProjectArchitect_type > ProjectArchitect_optional;
        typedef ::xsd::cxx::tree::traits< ProjectArchitect_type, char > ProjectArchitect_traits;

        const ProjectArchitect_optional&
        ProjectArchitect () const;

        ProjectArchitect_optional&
        ProjectArchitect ();

        void
        ProjectArchitect (const ProjectArchitect_type& x);

        void
        ProjectArchitect (const ProjectArchitect_optional& x);

        void
        ProjectArchitect (::std::auto_ptr< ProjectArchitect_type > p);

        // ProjectUnitsList
        //
        typedef ::xml_schema::idref ProjectUnitsList_type;
        typedef ::xsd::cxx::tree::optional< ProjectUnitsList_type > ProjectUnitsList_optional;
        typedef ::xsd::cxx::tree::traits< ProjectUnitsList_type, char > ProjectUnitsList_traits;

        const ProjectUnitsList_optional&
        ProjectUnitsList () const;

        ProjectUnitsList_optional&
        ProjectUnitsList ();

        void
        ProjectUnitsList (const ProjectUnitsList_type& x);

        void
        ProjectUnitsList (const ProjectUnitsList_optional& x);

        void
        ProjectUnitsList (::std::auto_ptr< ProjectUnitsList_type > p);

        // T24ProjectTeamList
        //
        typedef ::xml_schema::idrefs T24ProjectTeamList_type;
        typedef ::xsd::cxx::tree::optional< T24ProjectTeamList_type > T24ProjectTeamList_optional;
        typedef ::xsd::cxx::tree::traits< T24ProjectTeamList_type, char > T24ProjectTeamList_traits;

        const T24ProjectTeamList_optional&
        T24ProjectTeamList () const;

        T24ProjectTeamList_optional&
        T24ProjectTeamList ();

        void
        T24ProjectTeamList (const T24ProjectTeamList_type& x);

        void
        T24ProjectTeamList (const T24ProjectTeamList_optional& x);

        void
        T24ProjectTeamList (::std::auto_ptr< T24ProjectTeamList_type > p);

        // T24AnalysisType
        //
        typedef ::xml_schema::string T24AnalysisType_type;
        typedef ::xsd::cxx::tree::optional< T24AnalysisType_type > T24AnalysisType_optional;
        typedef ::xsd::cxx::tree::traits< T24AnalysisType_type, char > T24AnalysisType_traits;

        const T24AnalysisType_optional&
        T24AnalysisType () const;

        T24AnalysisType_optional&
        T24AnalysisType ();

        void
        T24AnalysisType (const T24AnalysisType_type& x);

        void
        T24AnalysisType (const T24AnalysisType_optional& x);

        void
        T24AnalysisType (::std::auto_ptr< T24AnalysisType_type > p);

        // T24AutomaticDaylightingReport
        //
        typedef ::xml_schema::int_ T24AutomaticDaylightingReport_type;
        typedef ::xsd::cxx::tree::optional< T24AutomaticDaylightingReport_type > T24AutomaticDaylightingReport_optional;
        typedef ::xsd::cxx::tree::traits< T24AutomaticDaylightingReport_type, char > T24AutomaticDaylightingReport_traits;

        const T24AutomaticDaylightingReport_optional&
        T24AutomaticDaylightingReport () const;

        T24AutomaticDaylightingReport_optional&
        T24AutomaticDaylightingReport ();

        void
        T24AutomaticDaylightingReport (const T24AutomaticDaylightingReport_type& x);

        void
        T24AutomaticDaylightingReport (const T24AutomaticDaylightingReport_optional& x);

        // T24AutomaticTimeSwitchReport
        //
        typedef ::xml_schema::int_ T24AutomaticTimeSwitchReport_type;
        typedef ::xsd::cxx::tree::optional< T24AutomaticTimeSwitchReport_type > T24AutomaticTimeSwitchReport_optional;
        typedef ::xsd::cxx::tree::traits< T24AutomaticTimeSwitchReport_type, char > T24AutomaticTimeSwitchReport_traits;

        const T24AutomaticTimeSwitchReport_optional&
        T24AutomaticTimeSwitchReport () const;

        T24AutomaticTimeSwitchReport_optional&
        T24AutomaticTimeSwitchReport ();

        void
        T24AutomaticTimeSwitchReport (const T24AutomaticTimeSwitchReport_type& x);

        void
        T24AutomaticTimeSwitchReport (const T24AutomaticTimeSwitchReport_optional& x);

        // T24AverageDryBulbTemperature
        //
        typedef ::xml_schema::double_ T24AverageDryBulbTemperature_type;
        typedef ::xsd::cxx::tree::optional< T24AverageDryBulbTemperature_type > T24AverageDryBulbTemperature_optional;
        typedef ::xsd::cxx::tree::traits< T24AverageDryBulbTemperature_type, char, ::xsd::cxx::tree::schema_type::double_ > T24AverageDryBulbTemperature_traits;

        const T24AverageDryBulbTemperature_optional&
        T24AverageDryBulbTemperature () const;

        T24AverageDryBulbTemperature_optional&
        T24AverageDryBulbTemperature ();

        void
        T24AverageDryBulbTemperature (const T24AverageDryBulbTemperature_type& x);

        void
        T24AverageDryBulbTemperature (const T24AverageDryBulbTemperature_optional& x);

        // T24AverageElectricityCost
        //
        typedef ::xml_schema::double_ T24AverageElectricityCost_type;
        typedef ::xsd::cxx::tree::optional< T24AverageElectricityCost_type > T24AverageElectricityCost_optional;
        typedef ::xsd::cxx::tree::traits< T24AverageElectricityCost_type, char, ::xsd::cxx::tree::schema_type::double_ > T24AverageElectricityCost_traits;

        const T24AverageElectricityCost_optional&
        T24AverageElectricityCost () const;

        T24AverageElectricityCost_optional&
        T24AverageElectricityCost ();

        void
        T24AverageElectricityCost (const T24AverageElectricityCost_type& x);

        void
        T24AverageElectricityCost (const T24AverageElectricityCost_optional& x);

        // T24AverageOtherFuelCost
        //
        typedef ::xml_schema::double_ T24AverageOtherFuelCost_type;
        typedef ::xsd::cxx::tree::optional< T24AverageOtherFuelCost_type > T24AverageOtherFuelCost_optional;
        typedef ::xsd::cxx::tree::traits< T24AverageOtherFuelCost_type, char, ::xsd::cxx::tree::schema_type::double_ > T24AverageOtherFuelCost_traits;

        const T24AverageOtherFuelCost_optional&
        T24AverageOtherFuelCost () const;

        T24AverageOtherFuelCost_optional&
        T24AverageOtherFuelCost ();

        void
        T24AverageOtherFuelCost (const T24AverageOtherFuelCost_type& x);

        void
        T24AverageOtherFuelCost (const T24AverageOtherFuelCost_optional& x);

        // T24CommercialRefrigerationMandatoryCompliance
        //
        typedef ::xml_schema::string T24CommercialRefrigerationMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24CommercialRefrigerationMandatoryCompliance_type > T24CommercialRefrigerationMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24CommercialRefrigerationMandatoryCompliance_type, char > T24CommercialRefrigerationMandatoryCompliance_traits;

        const T24CommercialRefrigerationMandatoryCompliance_optional&
        T24CommercialRefrigerationMandatoryCompliance () const;

        T24CommercialRefrigerationMandatoryCompliance_optional&
        T24CommercialRefrigerationMandatoryCompliance ();

        void
        T24CommercialRefrigerationMandatoryCompliance (const T24CommercialRefrigerationMandatoryCompliance_type& x);

        void
        T24CommercialRefrigerationMandatoryCompliance (const T24CommercialRefrigerationMandatoryCompliance_optional& x);

        void
        T24CommercialRefrigerationMandatoryCompliance (::std::auto_ptr< T24CommercialRefrigerationMandatoryCompliance_type > p);

        // T24ComplexHVACMandatoryCompliance
        //
        typedef ::xml_schema::string T24ComplexHVACMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24ComplexHVACMandatoryCompliance_type > T24ComplexHVACMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24ComplexHVACMandatoryCompliance_type, char > T24ComplexHVACMandatoryCompliance_traits;

        const T24ComplexHVACMandatoryCompliance_optional&
        T24ComplexHVACMandatoryCompliance () const;

        T24ComplexHVACMandatoryCompliance_optional&
        T24ComplexHVACMandatoryCompliance ();

        void
        T24ComplexHVACMandatoryCompliance (const T24ComplexHVACMandatoryCompliance_type& x);

        void
        T24ComplexHVACMandatoryCompliance (const T24ComplexHVACMandatoryCompliance_optional& x);

        void
        T24ComplexHVACMandatoryCompliance (::std::auto_ptr< T24ComplexHVACMandatoryCompliance_type > p);

        // T24CompliancePathComputerRoom
        //
        typedef ::xml_schema::string T24CompliancePathComputerRoom_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathComputerRoom_type > T24CompliancePathComputerRoom_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathComputerRoom_type, char > T24CompliancePathComputerRoom_traits;

        const T24CompliancePathComputerRoom_optional&
        T24CompliancePathComputerRoom () const;

        T24CompliancePathComputerRoom_optional&
        T24CompliancePathComputerRoom ();

        void
        T24CompliancePathComputerRoom (const T24CompliancePathComputerRoom_type& x);

        void
        T24CompliancePathComputerRoom (const T24CompliancePathComputerRoom_optional& x);

        void
        T24CompliancePathComputerRoom (::std::auto_ptr< T24CompliancePathComputerRoom_type > p);

        // T24CompliancePathDomesticHotWater
        //
        typedef ::xml_schema::string T24CompliancePathDomesticHotWater_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathDomesticHotWater_type > T24CompliancePathDomesticHotWater_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathDomesticHotWater_type, char > T24CompliancePathDomesticHotWater_traits;

        const T24CompliancePathDomesticHotWater_optional&
        T24CompliancePathDomesticHotWater () const;

        T24CompliancePathDomesticHotWater_optional&
        T24CompliancePathDomesticHotWater ();

        void
        T24CompliancePathDomesticHotWater (const T24CompliancePathDomesticHotWater_type& x);

        void
        T24CompliancePathDomesticHotWater (const T24CompliancePathDomesticHotWater_optional& x);

        void
        T24CompliancePathDomesticHotWater (::std::auto_ptr< T24CompliancePathDomesticHotWater_type > p);

        // T24CompliancePathEnvelope
        //
        typedef ::xml_schema::string T24CompliancePathEnvelope_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathEnvelope_type > T24CompliancePathEnvelope_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathEnvelope_type, char > T24CompliancePathEnvelope_traits;

        const T24CompliancePathEnvelope_optional&
        T24CompliancePathEnvelope () const;

        T24CompliancePathEnvelope_optional&
        T24CompliancePathEnvelope ();

        void
        T24CompliancePathEnvelope (const T24CompliancePathEnvelope_type& x);

        void
        T24CompliancePathEnvelope (const T24CompliancePathEnvelope_optional& x);

        void
        T24CompliancePathEnvelope (::std::auto_ptr< T24CompliancePathEnvelope_type > p);

        // T24CompliancePathKitchen
        //
        typedef ::xml_schema::string T24CompliancePathKitchen_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathKitchen_type > T24CompliancePathKitchen_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathKitchen_type, char > T24CompliancePathKitchen_traits;

        const T24CompliancePathKitchen_optional&
        T24CompliancePathKitchen () const;

        T24CompliancePathKitchen_optional&
        T24CompliancePathKitchen ();

        void
        T24CompliancePathKitchen (const T24CompliancePathKitchen_type& x);

        void
        T24CompliancePathKitchen (const T24CompliancePathKitchen_optional& x);

        void
        T24CompliancePathKitchen (::std::auto_ptr< T24CompliancePathKitchen_type > p);

        // T24CompliancePathLaboratory
        //
        typedef ::xml_schema::string T24CompliancePathLaboratory_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathLaboratory_type > T24CompliancePathLaboratory_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathLaboratory_type, char > T24CompliancePathLaboratory_traits;

        const T24CompliancePathLaboratory_optional&
        T24CompliancePathLaboratory () const;

        T24CompliancePathLaboratory_optional&
        T24CompliancePathLaboratory ();

        void
        T24CompliancePathLaboratory (const T24CompliancePathLaboratory_type& x);

        void
        T24CompliancePathLaboratory (const T24CompliancePathLaboratory_optional& x);

        void
        T24CompliancePathLaboratory (::std::auto_ptr< T24CompliancePathLaboratory_type > p);

        // T24CompliancePathLighting
        //
        typedef ::xml_schema::string T24CompliancePathLighting_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathLighting_type > T24CompliancePathLighting_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathLighting_type, char > T24CompliancePathLighting_traits;

        const T24CompliancePathLighting_optional&
        T24CompliancePathLighting () const;

        T24CompliancePathLighting_optional&
        T24CompliancePathLighting ();

        void
        T24CompliancePathLighting (const T24CompliancePathLighting_type& x);

        void
        T24CompliancePathLighting (const T24CompliancePathLighting_optional& x);

        void
        T24CompliancePathLighting (::std::auto_ptr< T24CompliancePathLighting_type > p);

        // T24CompliancePathMechanical
        //
        typedef ::xml_schema::string T24CompliancePathMechanical_type;
        typedef ::xsd::cxx::tree::optional< T24CompliancePathMechanical_type > T24CompliancePathMechanical_optional;
        typedef ::xsd::cxx::tree::traits< T24CompliancePathMechanical_type, char > T24CompliancePathMechanical_traits;

        const T24CompliancePathMechanical_optional&
        T24CompliancePathMechanical () const;

        T24CompliancePathMechanical_optional&
        T24CompliancePathMechanical ();

        void
        T24CompliancePathMechanical (const T24CompliancePathMechanical_type& x);

        void
        T24CompliancePathMechanical (const T24CompliancePathMechanical_optional& x);

        void
        T24CompliancePathMechanical (::std::auto_ptr< T24CompliancePathMechanical_type > p);

        // T24ComplianceReportPDF
        //
        typedef ::xml_schema::int_ T24ComplianceReportPDF_type;
        typedef ::xsd::cxx::tree::optional< T24ComplianceReportPDF_type > T24ComplianceReportPDF_optional;
        typedef ::xsd::cxx::tree::traits< T24ComplianceReportPDF_type, char > T24ComplianceReportPDF_traits;

        const T24ComplianceReportPDF_optional&
        T24ComplianceReportPDF () const;

        T24ComplianceReportPDF_optional&
        T24ComplianceReportPDF ();

        void
        T24ComplianceReportPDF (const T24ComplianceReportPDF_type& x);

        void
        T24ComplianceReportPDF (const T24ComplianceReportPDF_optional& x);

        // T24ComplianceReportXML
        //
        typedef ::xml_schema::int_ T24ComplianceReportXML_type;
        typedef ::xsd::cxx::tree::optional< T24ComplianceReportXML_type > T24ComplianceReportXML_optional;
        typedef ::xsd::cxx::tree::traits< T24ComplianceReportXML_type, char > T24ComplianceReportXML_traits;

        const T24ComplianceReportXML_optional&
        T24ComplianceReportXML () const;

        T24ComplianceReportXML_optional&
        T24ComplianceReportXML ();

        void
        T24ComplianceReportXML (const T24ComplianceReportXML_type& x);

        void
        T24ComplianceReportXML (const T24ComplianceReportXML_optional& x);

        // T24ComplianceType
        //
        typedef ::xml_schema::string T24ComplianceType_type;
        typedef ::xsd::cxx::tree::optional< T24ComplianceType_type > T24ComplianceType_optional;
        typedef ::xsd::cxx::tree::traits< T24ComplianceType_type, char > T24ComplianceType_traits;

        const T24ComplianceType_optional&
        T24ComplianceType () const;

        T24ComplianceType_optional&
        T24ComplianceType ();

        void
        T24ComplianceType (const T24ComplianceType_type& x);

        void
        T24ComplianceType (const T24ComplianceType_optional& x);

        void
        T24ComplianceType (::std::auto_ptr< T24ComplianceType_type > p);

        // T24CompressedAirMandatoryCompliance
        //
        typedef ::xml_schema::string T24CompressedAirMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24CompressedAirMandatoryCompliance_type > T24CompressedAirMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24CompressedAirMandatoryCompliance_type, char > T24CompressedAirMandatoryCompliance_traits;

        const T24CompressedAirMandatoryCompliance_optional&
        T24CompressedAirMandatoryCompliance () const;

        T24CompressedAirMandatoryCompliance_optional&
        T24CompressedAirMandatoryCompliance ();

        void
        T24CompressedAirMandatoryCompliance (const T24CompressedAirMandatoryCompliance_type& x);

        void
        T24CompressedAirMandatoryCompliance (const T24CompressedAirMandatoryCompliance_optional& x);

        void
        T24CompressedAirMandatoryCompliance (::std::auto_ptr< T24CompressedAirMandatoryCompliance_type > p);

        // T24DefaultDaylightingControls
        //
        typedef ::xml_schema::int_ T24DefaultDaylightingControls_type;
        typedef ::xsd::cxx::tree::optional< T24DefaultDaylightingControls_type > T24DefaultDaylightingControls_optional;
        typedef ::xsd::cxx::tree::traits< T24DefaultDaylightingControls_type, char > T24DefaultDaylightingControls_traits;

        const T24DefaultDaylightingControls_optional&
        T24DefaultDaylightingControls () const;

        T24DefaultDaylightingControls_optional&
        T24DefaultDaylightingControls ();

        void
        T24DefaultDaylightingControls (const T24DefaultDaylightingControls_type& x);

        void
        T24DefaultDaylightingControls (const T24DefaultDaylightingControls_optional& x);

        // T24DemandResponsiveReport
        //
        typedef ::xml_schema::int_ T24DemandResponsiveReport_type;
        typedef ::xsd::cxx::tree::optional< T24DemandResponsiveReport_type > T24DemandResponsiveReport_optional;
        typedef ::xsd::cxx::tree::traits< T24DemandResponsiveReport_type, char > T24DemandResponsiveReport_traits;

        const T24DemandResponsiveReport_optional&
        T24DemandResponsiveReport () const;

        T24DemandResponsiveReport_optional&
        T24DemandResponsiveReport ();

        void
        T24DemandResponsiveReport (const T24DemandResponsiveReport_type& x);

        void
        T24DemandResponsiveReport (const T24DemandResponsiveReport_optional& x);

        // T24DisableDaylightingControls
        //
        typedef ::xml_schema::int_ T24DisableDaylightingControls_type;
        typedef ::xsd::cxx::tree::optional< T24DisableDaylightingControls_type > T24DisableDaylightingControls_optional;
        typedef ::xsd::cxx::tree::traits< T24DisableDaylightingControls_type, char > T24DisableDaylightingControls_traits;

        const T24DisableDaylightingControls_optional&
        T24DisableDaylightingControls () const;

        T24DisableDaylightingControls_optional&
        T24DisableDaylightingControls ();

        void
        T24DisableDaylightingControls (const T24DisableDaylightingControls_type& x);

        void
        T24DisableDaylightingControls (const T24DisableDaylightingControls_optional& x);

        // T24DomesticHotWaterDetailsLocation
        //
        typedef ::xml_schema::string T24DomesticHotWaterDetailsLocation_type;
        typedef ::xsd::cxx::tree::optional< T24DomesticHotWaterDetailsLocation_type > T24DomesticHotWaterDetailsLocation_optional;
        typedef ::xsd::cxx::tree::traits< T24DomesticHotWaterDetailsLocation_type, char > T24DomesticHotWaterDetailsLocation_traits;

        const T24DomesticHotWaterDetailsLocation_optional&
        T24DomesticHotWaterDetailsLocation () const;

        T24DomesticHotWaterDetailsLocation_optional&
        T24DomesticHotWaterDetailsLocation ();

        void
        T24DomesticHotWaterDetailsLocation (const T24DomesticHotWaterDetailsLocation_type& x);

        void
        T24DomesticHotWaterDetailsLocation (const T24DomesticHotWaterDetailsLocation_optional& x);

        void
        T24DomesticHotWaterDetailsLocation (::std::auto_ptr< T24DomesticHotWaterDetailsLocation_type > p);

        // T24ElectricalMandatoryCompliance
        //
        typedef ::xml_schema::string T24ElectricalMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24ElectricalMandatoryCompliance_type > T24ElectricalMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24ElectricalMandatoryCompliance_type, char > T24ElectricalMandatoryCompliance_traits;

        const T24ElectricalMandatoryCompliance_optional&
        T24ElectricalMandatoryCompliance () const;

        T24ElectricalMandatoryCompliance_optional&
        T24ElectricalMandatoryCompliance ();

        void
        T24ElectricalMandatoryCompliance (const T24ElectricalMandatoryCompliance_type& x);

        void
        T24ElectricalMandatoryCompliance (const T24ElectricalMandatoryCompliance_optional& x);

        void
        T24ElectricalMandatoryCompliance (::std::auto_ptr< T24ElectricalMandatoryCompliance_type > p);

        // T24EnvelopeDetailsLocation
        //
        typedef ::xml_schema::string T24EnvelopeDetailsLocation_type;
        typedef ::xsd::cxx::tree::optional< T24EnvelopeDetailsLocation_type > T24EnvelopeDetailsLocation_optional;
        typedef ::xsd::cxx::tree::traits< T24EnvelopeDetailsLocation_type, char > T24EnvelopeDetailsLocation_traits;

        const T24EnvelopeDetailsLocation_optional&
        T24EnvelopeDetailsLocation () const;

        T24EnvelopeDetailsLocation_optional&
        T24EnvelopeDetailsLocation ();

        void
        T24EnvelopeDetailsLocation (const T24EnvelopeDetailsLocation_type& x);

        void
        T24EnvelopeDetailsLocation (const T24EnvelopeDetailsLocation_optional& x);

        void
        T24EnvelopeDetailsLocation (::std::auto_ptr< T24EnvelopeDetailsLocation_type > p);

        // T24ExcptCondBldg
        //
        typedef ::xml_schema::string T24ExcptCondBldg_type;
        typedef ::xsd::cxx::tree::optional< T24ExcptCondBldg_type > T24ExcptCondBldg_optional;
        typedef ::xsd::cxx::tree::traits< T24ExcptCondBldg_type, char > T24ExcptCondBldg_traits;

        const T24ExcptCondBldg_optional&
        T24ExcptCondBldg () const;

        T24ExcptCondBldg_optional&
        T24ExcptCondBldg ();

        void
        T24ExcptCondBldg (const T24ExcptCondBldg_type& x);

        void
        T24ExcptCondBldg (const T24ExcptCondBldg_optional& x);

        void
        T24ExcptCondBldg (::std::auto_ptr< T24ExcptCondBldg_type > p);

        // T24ExcptCondExteriorLighting
        //
        typedef ::xml_schema::string T24ExcptCondExteriorLighting_type;
        typedef ::xsd::cxx::tree::optional< T24ExcptCondExteriorLighting_type > T24ExcptCondExteriorLighting_optional;
        typedef ::xsd::cxx::tree::traits< T24ExcptCondExteriorLighting_type, char > T24ExcptCondExteriorLighting_traits;

        const T24ExcptCondExteriorLighting_optional&
        T24ExcptCondExteriorLighting () const;

        T24ExcptCondExteriorLighting_optional&
        T24ExcptCondExteriorLighting ();

        void
        T24ExcptCondExteriorLighting (const T24ExcptCondExteriorLighting_type& x);

        void
        T24ExcptCondExteriorLighting (const T24ExcptCondExteriorLighting_optional& x);

        void
        T24ExcptCondExteriorLighting (::std::auto_ptr< T24ExcptCondExteriorLighting_type > p);

        // T24ExcptCondNarrative
        //
        typedef ::xml_schema::string T24ExcptCondNarrative_type;
        typedef ::xsd::cxx::tree::optional< T24ExcptCondNarrative_type > T24ExcptCondNarrative_optional;
        typedef ::xsd::cxx::tree::traits< T24ExcptCondNarrative_type, char > T24ExcptCondNarrative_traits;

        const T24ExcptCondNarrative_optional&
        T24ExcptCondNarrative () const;

        T24ExcptCondNarrative_optional&
        T24ExcptCondNarrative ();

        void
        T24ExcptCondNarrative (const T24ExcptCondNarrative_type& x);

        void
        T24ExcptCondNarrative (const T24ExcptCondNarrative_optional& x);

        void
        T24ExcptCondNarrative (::std::auto_ptr< T24ExcptCondNarrative_type > p);

        // T24ExcptCondNoCoolingSystem
        //
        typedef ::xml_schema::string T24ExcptCondNoCoolingSystem_type;
        typedef ::xsd::cxx::tree::optional< T24ExcptCondNoCoolingSystem_type > T24ExcptCondNoCoolingSystem_optional;
        typedef ::xsd::cxx::tree::traits< T24ExcptCondNoCoolingSystem_type, char > T24ExcptCondNoCoolingSystem_traits;

        const T24ExcptCondNoCoolingSystem_optional&
        T24ExcptCondNoCoolingSystem () const;

        T24ExcptCondNoCoolingSystem_optional&
        T24ExcptCondNoCoolingSystem ();

        void
        T24ExcptCondNoCoolingSystem (const T24ExcptCondNoCoolingSystem_type& x);

        void
        T24ExcptCondNoCoolingSystem (const T24ExcptCondNoCoolingSystem_optional& x);

        void
        T24ExcptCondNoCoolingSystem (::std::auto_ptr< T24ExcptCondNoCoolingSystem_type > p);

        // T24ExcptCondRatedCapacity
        //
        typedef ::xml_schema::string T24ExcptCondRatedCapacity_type;
        typedef ::xsd::cxx::tree::optional< T24ExcptCondRatedCapacity_type > T24ExcptCondRatedCapacity_optional;
        typedef ::xsd::cxx::tree::traits< T24ExcptCondRatedCapacity_type, char > T24ExcptCondRatedCapacity_traits;

        const T24ExcptCondRatedCapacity_optional&
        T24ExcptCondRatedCapacity () const;

        T24ExcptCondRatedCapacity_optional&
        T24ExcptCondRatedCapacity ();

        void
        T24ExcptCondRatedCapacity (const T24ExcptCondRatedCapacity_type& x);

        void
        T24ExcptCondRatedCapacity (const T24ExcptCondRatedCapacity_optional& x);

        void
        T24ExcptCondRatedCapacity (::std::auto_ptr< T24ExcptCondRatedCapacity_type > p);

        // T24ExceptionalConditionWaterHeaterSizing
        //
        typedef ::xml_schema::string T24ExceptionalConditionWaterHeaterSizing_type;
        typedef ::xsd::cxx::tree::optional< T24ExceptionalConditionWaterHeaterSizing_type > T24ExceptionalConditionWaterHeaterSizing_optional;
        typedef ::xsd::cxx::tree::traits< T24ExceptionalConditionWaterHeaterSizing_type, char > T24ExceptionalConditionWaterHeaterSizing_traits;

        const T24ExceptionalConditionWaterHeaterSizing_optional&
        T24ExceptionalConditionWaterHeaterSizing () const;

        T24ExceptionalConditionWaterHeaterSizing_optional&
        T24ExceptionalConditionWaterHeaterSizing ();

        void
        T24ExceptionalConditionWaterHeaterSizing (const T24ExceptionalConditionWaterHeaterSizing_type& x);

        void
        T24ExceptionalConditionWaterHeaterSizing (const T24ExceptionalConditionWaterHeaterSizing_optional& x);

        void
        T24ExceptionalConditionWaterHeaterSizing (::std::auto_ptr< T24ExceptionalConditionWaterHeaterSizing_type > p);

        // T24ExcptCondWaterHeater
        //
        typedef ::xml_schema::string T24ExcptCondWaterHeater_type;
        typedef ::xsd::cxx::tree::optional< T24ExcptCondWaterHeater_type > T24ExcptCondWaterHeater_optional;
        typedef ::xsd::cxx::tree::traits< T24ExcptCondWaterHeater_type, char > T24ExcptCondWaterHeater_traits;

        const T24ExcptCondWaterHeater_optional&
        T24ExcptCondWaterHeater () const;

        T24ExcptCondWaterHeater_optional&
        T24ExcptCondWaterHeater ();

        void
        T24ExcptCondWaterHeater (const T24ExcptCondWaterHeater_type& x);

        void
        T24ExcptCondWaterHeater (const T24ExcptCondWaterHeater_optional& x);

        void
        T24ExcptCondWaterHeater (::std::auto_ptr< T24ExcptCondWaterHeater_type > p);

        // T24ExceptionalDesignModelFile
        //
        typedef ::xml_schema::string T24ExceptionalDesignModelFile_type;
        typedef ::xsd::cxx::tree::optional< T24ExceptionalDesignModelFile_type > T24ExceptionalDesignModelFile_optional;
        typedef ::xsd::cxx::tree::traits< T24ExceptionalDesignModelFile_type, char > T24ExceptionalDesignModelFile_traits;

        const T24ExceptionalDesignModelFile_optional&
        T24ExceptionalDesignModelFile () const;

        T24ExceptionalDesignModelFile_optional&
        T24ExceptionalDesignModelFile ();

        void
        T24ExceptionalDesignModelFile (const T24ExceptionalDesignModelFile_type& x);

        void
        T24ExceptionalDesignModelFile (const T24ExceptionalDesignModelFile_optional& x);

        void
        T24ExceptionalDesignModelFile (::std::auto_ptr< T24ExceptionalDesignModelFile_type > p);

        // T24GeometryInputType
        //
        typedef ::xml_schema::string T24GeometryInputType_type;
        typedef ::xsd::cxx::tree::optional< T24GeometryInputType_type > T24GeometryInputType_optional;
        typedef ::xsd::cxx::tree::traits< T24GeometryInputType_type, char > T24GeometryInputType_traits;

        const T24GeometryInputType_optional&
        T24GeometryInputType () const;

        T24GeometryInputType_optional&
        T24GeometryInputType ();

        void
        T24GeometryInputType (const T24GeometryInputType_type& x);

        void
        T24GeometryInputType (const T24GeometryInputType_optional& x);

        void
        T24GeometryInputType (::std::auto_ptr< T24GeometryInputType_type > p);

        // T24HolidayReference
        //
        typedef ::xml_schema::idrefs T24HolidayReference_type;
        typedef ::xsd::cxx::tree::optional< T24HolidayReference_type > T24HolidayReference_optional;
        typedef ::xsd::cxx::tree::traits< T24HolidayReference_type, char > T24HolidayReference_traits;

        const T24HolidayReference_optional&
        T24HolidayReference () const;

        T24HolidayReference_optional&
        T24HolidayReference ();

        void
        T24HolidayReference (const T24HolidayReference_type& x);

        void
        T24HolidayReference (const T24HolidayReference_optional& x);

        void
        T24HolidayReference (::std::auto_ptr< T24HolidayReference_type > p);

        // T24HVACAutoSizing
        //
        typedef ::xml_schema::int_ T24HVACAutoSizing_type;
        typedef ::xsd::cxx::tree::optional< T24HVACAutoSizing_type > T24HVACAutoSizing_optional;
        typedef ::xsd::cxx::tree::traits< T24HVACAutoSizing_type, char > T24HVACAutoSizing_traits;

        const T24HVACAutoSizing_optional&
        T24HVACAutoSizing () const;

        T24HVACAutoSizing_optional&
        T24HVACAutoSizing ();

        void
        T24HVACAutoSizing (const T24HVACAutoSizing_type& x);

        void
        T24HVACAutoSizing (const T24HVACAutoSizing_optional& x);

        // T24LightingDetailsLocation
        //
        typedef ::xml_schema::string T24LightingDetailsLocation_type;
        typedef ::xsd::cxx::tree::optional< T24LightingDetailsLocation_type > T24LightingDetailsLocation_optional;
        typedef ::xsd::cxx::tree::traits< T24LightingDetailsLocation_type, char > T24LightingDetailsLocation_traits;

        const T24LightingDetailsLocation_optional&
        T24LightingDetailsLocation () const;

        T24LightingDetailsLocation_optional&
        T24LightingDetailsLocation ();

        void
        T24LightingDetailsLocation (const T24LightingDetailsLocation_type& x);

        void
        T24LightingDetailsLocation (const T24LightingDetailsLocation_optional& x);

        void
        T24LightingDetailsLocation (::std::auto_ptr< T24LightingDetailsLocation_type > p);

        // T24LightingOutdoorCompliance
        //
        typedef ::xml_schema::string T24LightingOutdoorCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24LightingOutdoorCompliance_type > T24LightingOutdoorCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24LightingOutdoorCompliance_type, char > T24LightingOutdoorCompliance_traits;

        const T24LightingOutdoorCompliance_optional&
        T24LightingOutdoorCompliance () const;

        T24LightingOutdoorCompliance_optional&
        T24LightingOutdoorCompliance ();

        void
        T24LightingOutdoorCompliance (const T24LightingOutdoorCompliance_type& x);

        void
        T24LightingOutdoorCompliance (const T24LightingOutdoorCompliance_optional& x);

        void
        T24LightingOutdoorCompliance (::std::auto_ptr< T24LightingOutdoorCompliance_type > p);

        // T24LightingSignCompliance
        //
        typedef ::xml_schema::string T24LightingSignCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24LightingSignCompliance_type > T24LightingSignCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24LightingSignCompliance_type, char > T24LightingSignCompliance_traits;

        const T24LightingSignCompliance_optional&
        T24LightingSignCompliance () const;

        T24LightingSignCompliance_optional&
        T24LightingSignCompliance ();

        void
        T24LightingSignCompliance (const T24LightingSignCompliance_type& x);

        void
        T24LightingSignCompliance (const T24LightingSignCompliance_optional& x);

        void
        T24LightingSignCompliance (::std::auto_ptr< T24LightingSignCompliance_type > p);

        // T24LightingUnconditionedCompliance
        //
        typedef ::xml_schema::string T24LightingUnconditionedCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24LightingUnconditionedCompliance_type > T24LightingUnconditionedCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24LightingUnconditionedCompliance_type, char > T24LightingUnconditionedCompliance_traits;

        const T24LightingUnconditionedCompliance_optional&
        T24LightingUnconditionedCompliance () const;

        T24LightingUnconditionedCompliance_optional&
        T24LightingUnconditionedCompliance ();

        void
        T24LightingUnconditionedCompliance (const T24LightingUnconditionedCompliance_type& x);

        void
        T24LightingUnconditionedCompliance (const T24LightingUnconditionedCompliance_optional& x);

        void
        T24LightingUnconditionedCompliance (::std::auto_ptr< T24LightingUnconditionedCompliance_type > p);

        // T24MechanicalDetailsLocation
        //
        typedef ::xml_schema::string T24MechanicalDetailsLocation_type;
        typedef ::xsd::cxx::tree::optional< T24MechanicalDetailsLocation_type > T24MechanicalDetailsLocation_optional;
        typedef ::xsd::cxx::tree::traits< T24MechanicalDetailsLocation_type, char > T24MechanicalDetailsLocation_traits;

        const T24MechanicalDetailsLocation_optional&
        T24MechanicalDetailsLocation () const;

        T24MechanicalDetailsLocation_optional&
        T24MechanicalDetailsLocation ();

        void
        T24MechanicalDetailsLocation (const T24MechanicalDetailsLocation_type& x);

        void
        T24MechanicalDetailsLocation (const T24MechanicalDetailsLocation_optional& x);

        void
        T24MechanicalDetailsLocation (::std::auto_ptr< T24MechanicalDetailsLocation_type > p);

        // T24MonthlyAverageTemperatureMaximumDifference
        //
        typedef ::xml_schema::double_ T24MonthlyAverageTemperatureMaximumDifference_type;
        typedef ::xsd::cxx::tree::optional< T24MonthlyAverageTemperatureMaximumDifference_type > T24MonthlyAverageTemperatureMaximumDifference_optional;
        typedef ::xsd::cxx::tree::traits< T24MonthlyAverageTemperatureMaximumDifference_type, char, ::xsd::cxx::tree::schema_type::double_ > T24MonthlyAverageTemperatureMaximumDifference_traits;

        const T24MonthlyAverageTemperatureMaximumDifference_optional&
        T24MonthlyAverageTemperatureMaximumDifference () const;

        T24MonthlyAverageTemperatureMaximumDifference_optional&
        T24MonthlyAverageTemperatureMaximumDifference ();

        void
        T24MonthlyAverageTemperatureMaximumDifference (const T24MonthlyAverageTemperatureMaximumDifference_type& x);

        void
        T24MonthlyAverageTemperatureMaximumDifference (const T24MonthlyAverageTemperatureMaximumDifference_optional& x);

        // T24NarrativeDetails
        //
        typedef ::xml_schema::string T24NarrativeDetails_type;
        typedef ::xsd::cxx::tree::optional< T24NarrativeDetails_type > T24NarrativeDetails_optional;
        typedef ::xsd::cxx::tree::traits< T24NarrativeDetails_type, char > T24NarrativeDetails_traits;

        const T24NarrativeDetails_optional&
        T24NarrativeDetails () const;

        T24NarrativeDetails_optional&
        T24NarrativeDetails ();

        void
        T24NarrativeDetails (const T24NarrativeDetails_type& x);

        void
        T24NarrativeDetails (const T24NarrativeDetails_optional& x);

        void
        T24NarrativeDetails (::std::auto_ptr< T24NarrativeDetails_type > p);

        // T24NumberOfDaysPerQuickAnalysisPeriod
        //
        typedef ::xml_schema::int_ T24NumberOfDaysPerQuickAnalysisPeriod_type;
        typedef ::xsd::cxx::tree::optional< T24NumberOfDaysPerQuickAnalysisPeriod_type > T24NumberOfDaysPerQuickAnalysisPeriod_optional;
        typedef ::xsd::cxx::tree::traits< T24NumberOfDaysPerQuickAnalysisPeriod_type, char > T24NumberOfDaysPerQuickAnalysisPeriod_traits;

        const T24NumberOfDaysPerQuickAnalysisPeriod_optional&
        T24NumberOfDaysPerQuickAnalysisPeriod () const;

        T24NumberOfDaysPerQuickAnalysisPeriod_optional&
        T24NumberOfDaysPerQuickAnalysisPeriod ();

        void
        T24NumberOfDaysPerQuickAnalysisPeriod (const T24NumberOfDaysPerQuickAnalysisPeriod_type& x);

        void
        T24NumberOfDaysPerQuickAnalysisPeriod (const T24NumberOfDaysPerQuickAnalysisPeriod_optional& x);

        // T24NumberOfQuickAnalysisPeriods
        //
        typedef ::xml_schema::int_ T24NumberOfQuickAnalysisPeriods_type;
        typedef ::xsd::cxx::tree::optional< T24NumberOfQuickAnalysisPeriods_type > T24NumberOfQuickAnalysisPeriods_optional;
        typedef ::xsd::cxx::tree::traits< T24NumberOfQuickAnalysisPeriods_type, char > T24NumberOfQuickAnalysisPeriods_traits;

        const T24NumberOfQuickAnalysisPeriods_optional&
        T24NumberOfQuickAnalysisPeriods () const;

        T24NumberOfQuickAnalysisPeriods_optional&
        T24NumberOfQuickAnalysisPeriods ();

        void
        T24NumberOfQuickAnalysisPeriods (const T24NumberOfQuickAnalysisPeriods_type& x);

        void
        T24NumberOfQuickAnalysisPeriods (const T24NumberOfQuickAnalysisPeriods_optional& x);

        // T24NumberTimeStepsPerHour
        //
        typedef ::xml_schema::int_ T24NumberTimeStepsPerHour_type;
        typedef ::xsd::cxx::tree::optional< T24NumberTimeStepsPerHour_type > T24NumberTimeStepsPerHour_optional;
        typedef ::xsd::cxx::tree::traits< T24NumberTimeStepsPerHour_type, char > T24NumberTimeStepsPerHour_traits;

        const T24NumberTimeStepsPerHour_optional&
        T24NumberTimeStepsPerHour () const;

        T24NumberTimeStepsPerHour_optional&
        T24NumberTimeStepsPerHour ();

        void
        T24NumberTimeStepsPerHour (const T24NumberTimeStepsPerHour_type& x);

        void
        T24NumberTimeStepsPerHour (const T24NumberTimeStepsPerHour_optional& x);

        // T24OccupancySensorCountReport
        //
        typedef ::xml_schema::int_ T24OccupancySensorCountReport_type;
        typedef ::xsd::cxx::tree::optional< T24OccupancySensorCountReport_type > T24OccupancySensorCountReport_optional;
        typedef ::xsd::cxx::tree::traits< T24OccupancySensorCountReport_type, char > T24OccupancySensorCountReport_traits;

        const T24OccupancySensorCountReport_optional&
        T24OccupancySensorCountReport () const;

        T24OccupancySensorCountReport_optional&
        T24OccupancySensorCountReport ();

        void
        T24OccupancySensorCountReport (const T24OccupancySensorCountReport_type& x);

        void
        T24OccupancySensorCountReport (const T24OccupancySensorCountReport_optional& x);

        // T24OutdoorControlsReport
        //
        typedef ::xml_schema::int_ T24OutdoorControlsReport_type;
        typedef ::xsd::cxx::tree::optional< T24OutdoorControlsReport_type > T24OutdoorControlsReport_optional;
        typedef ::xsd::cxx::tree::traits< T24OutdoorControlsReport_type, char > T24OutdoorControlsReport_traits;

        const T24OutdoorControlsReport_optional&
        T24OutdoorControlsReport () const;

        T24OutdoorControlsReport_optional&
        T24OutdoorControlsReport ();

        void
        T24OutdoorControlsReport (const T24OutdoorControlsReport_type& x);

        void
        T24OutdoorControlsReport (const T24OutdoorControlsReport_optional& x);

        // T24ParkingGarageMandatoryCompliance
        //
        typedef ::xml_schema::string T24ParkingGarageMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24ParkingGarageMandatoryCompliance_type > T24ParkingGarageMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24ParkingGarageMandatoryCompliance_type, char > T24ParkingGarageMandatoryCompliance_traits;

        const T24ParkingGarageMandatoryCompliance_optional&
        T24ParkingGarageMandatoryCompliance () const;

        T24ParkingGarageMandatoryCompliance_optional&
        T24ParkingGarageMandatoryCompliance ();

        void
        T24ParkingGarageMandatoryCompliance (const T24ParkingGarageMandatoryCompliance_type& x);

        void
        T24ParkingGarageMandatoryCompliance (const T24ParkingGarageMandatoryCompliance_optional& x);

        void
        T24ParkingGarageMandatoryCompliance (::std::auto_ptr< T24ParkingGarageMandatoryCompliance_type > p);

        // T24PermitScope
        //
        typedef ::xml_schema::string T24PermitScope_type;
        typedef ::xsd::cxx::tree::optional< T24PermitScope_type > T24PermitScope_optional;
        typedef ::xsd::cxx::tree::traits< T24PermitScope_type, char > T24PermitScope_traits;

        const T24PermitScope_optional&
        T24PermitScope () const;

        T24PermitScope_optional&
        T24PermitScope ();

        void
        T24PermitScope (const T24PermitScope_type& x);

        void
        T24PermitScope (const T24PermitScope_optional& x);

        void
        T24PermitScope (::std::auto_ptr< T24PermitScope_type > p);

        // T24ProcessBoilerMandatoryCompliance
        //
        typedef ::xml_schema::string T24ProcessBoilerMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24ProcessBoilerMandatoryCompliance_type > T24ProcessBoilerMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24ProcessBoilerMandatoryCompliance_type, char > T24ProcessBoilerMandatoryCompliance_traits;

        const T24ProcessBoilerMandatoryCompliance_optional&
        T24ProcessBoilerMandatoryCompliance () const;

        T24ProcessBoilerMandatoryCompliance_optional&
        T24ProcessBoilerMandatoryCompliance ();

        void
        T24ProcessBoilerMandatoryCompliance (const T24ProcessBoilerMandatoryCompliance_type& x);

        void
        T24ProcessBoilerMandatoryCompliance (const T24ProcessBoilerMandatoryCompliance_optional& x);

        void
        T24ProcessBoilerMandatoryCompliance (::std::auto_ptr< T24ProcessBoilerMandatoryCompliance_type > p);

        // T24QuickAnalysis
        //
        typedef ::xml_schema::int_ T24QuickAnalysis_type;
        typedef ::xsd::cxx::tree::optional< T24QuickAnalysis_type > T24QuickAnalysis_optional;
        typedef ::xsd::cxx::tree::traits< T24QuickAnalysis_type, char > T24QuickAnalysis_traits;

        const T24QuickAnalysis_optional&
        T24QuickAnalysis () const;

        T24QuickAnalysis_optional&
        T24QuickAnalysis ();

        void
        T24QuickAnalysis (const T24QuickAnalysis_type& x);

        void
        T24QuickAnalysis (const T24QuickAnalysis_optional& x);

        // T24QuickAnalysisWeekNumbers
        //
        typedef ::schema::simxml::SimModelCore::integerList T24QuickAnalysisWeekNumbers_type;
        typedef ::xsd::cxx::tree::optional< T24QuickAnalysisWeekNumbers_type > T24QuickAnalysisWeekNumbers_optional;
        typedef ::xsd::cxx::tree::traits< T24QuickAnalysisWeekNumbers_type, char > T24QuickAnalysisWeekNumbers_traits;

        const T24QuickAnalysisWeekNumbers_optional&
        T24QuickAnalysisWeekNumbers () const;

        T24QuickAnalysisWeekNumbers_optional&
        T24QuickAnalysisWeekNumbers ();

        void
        T24QuickAnalysisWeekNumbers (const T24QuickAnalysisWeekNumbers_type& x);

        void
        T24QuickAnalysisWeekNumbers (const T24QuickAnalysisWeekNumbers_optional& x);

        void
        T24QuickAnalysisWeekNumbers (::std::auto_ptr< T24QuickAnalysisWeekNumbers_type > p);

        // T24RefrigerationWarehouseMandatoryCompliance
        //
        typedef ::xml_schema::string T24RefrigerationWarehouseMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24RefrigerationWarehouseMandatoryCompliance_type > T24RefrigerationWarehouseMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24RefrigerationWarehouseMandatoryCompliance_type, char > T24RefrigerationWarehouseMandatoryCompliance_traits;

        const T24RefrigerationWarehouseMandatoryCompliance_optional&
        T24RefrigerationWarehouseMandatoryCompliance () const;

        T24RefrigerationWarehouseMandatoryCompliance_optional&
        T24RefrigerationWarehouseMandatoryCompliance ();

        void
        T24RefrigerationWarehouseMandatoryCompliance (const T24RefrigerationWarehouseMandatoryCompliance_type& x);

        void
        T24RefrigerationWarehouseMandatoryCompliance (const T24RefrigerationWarehouseMandatoryCompliance_optional& x);

        void
        T24RefrigerationWarehouseMandatoryCompliance (::std::auto_ptr< T24RefrigerationWarehouseMandatoryCompliance_type > p);

        // T24RuleRptFileAppend
        //
        typedef ::xml_schema::string T24RuleRptFileAppend_type;
        typedef ::xsd::cxx::tree::optional< T24RuleRptFileAppend_type > T24RuleRptFileAppend_optional;
        typedef ::xsd::cxx::tree::traits< T24RuleRptFileAppend_type, char > T24RuleRptFileAppend_traits;

        const T24RuleRptFileAppend_optional&
        T24RuleRptFileAppend () const;

        T24RuleRptFileAppend_optional&
        T24RuleRptFileAppend ();

        void
        T24RuleRptFileAppend (const T24RuleRptFileAppend_type& x);

        void
        T24RuleRptFileAppend (const T24RuleRptFileAppend_optional& x);

        void
        T24RuleRptFileAppend (::std::auto_ptr< T24RuleRptFileAppend_type > p);

        // T24RuleRptType
        //
        typedef ::xml_schema::string T24RuleRptType_type;
        typedef ::xsd::cxx::tree::optional< T24RuleRptType_type > T24RuleRptType_optional;
        typedef ::xsd::cxx::tree::traits< T24RuleRptType_type, char > T24RuleRptType_traits;

        const T24RuleRptType_optional&
        T24RuleRptType () const;

        T24RuleRptType_optional&
        T24RuleRptType ();

        void
        T24RuleRptType (const T24RuleRptType_type& x);

        void
        T24RuleRptType (const T24RuleRptType_optional& x);

        void
        T24RuleRptType (::std::auto_ptr< T24RuleRptType_type > p);

        // T24SimpleHVACMandatoryCompliance
        //
        typedef ::xml_schema::string T24SimpleHVACMandatoryCompliance_type;
        typedef ::xsd::cxx::tree::optional< T24SimpleHVACMandatoryCompliance_type > T24SimpleHVACMandatoryCompliance_optional;
        typedef ::xsd::cxx::tree::traits< T24SimpleHVACMandatoryCompliance_type, char > T24SimpleHVACMandatoryCompliance_traits;

        const T24SimpleHVACMandatoryCompliance_optional&
        T24SimpleHVACMandatoryCompliance () const;

        T24SimpleHVACMandatoryCompliance_optional&
        T24SimpleHVACMandatoryCompliance ();

        void
        T24SimpleHVACMandatoryCompliance (const T24SimpleHVACMandatoryCompliance_type& x);

        void
        T24SimpleHVACMandatoryCompliance (const T24SimpleHVACMandatoryCompliance_optional& x);

        void
        T24SimpleHVACMandatoryCompliance (::std::auto_ptr< T24SimpleHVACMandatoryCompliance_type > p);

        // T24SimulateDesignDays
        //
        typedef ::xml_schema::int_ T24SimulateDesignDays_type;
        typedef ::xsd::cxx::tree::optional< T24SimulateDesignDays_type > T24SimulateDesignDays_optional;
        typedef ::xsd::cxx::tree::traits< T24SimulateDesignDays_type, char > T24SimulateDesignDays_traits;

        const T24SimulateDesignDays_optional&
        T24SimulateDesignDays () const;

        T24SimulateDesignDays_optional&
        T24SimulateDesignDays ();

        void
        T24SimulateDesignDays (const T24SimulateDesignDays_type& x);

        void
        T24SimulateDesignDays (const T24SimulateDesignDays_optional& x);

        // T24SimVarsDaylighting
        //
        typedef ::xml_schema::int_ T24SimVarsDaylighting_type;
        typedef ::xsd::cxx::tree::optional< T24SimVarsDaylighting_type > T24SimVarsDaylighting_optional;
        typedef ::xsd::cxx::tree::traits< T24SimVarsDaylighting_type, char > T24SimVarsDaylighting_traits;

        const T24SimVarsDaylighting_optional&
        T24SimVarsDaylighting () const;

        T24SimVarsDaylighting_optional&
        T24SimVarsDaylighting ();

        void
        T24SimVarsDaylighting (const T24SimVarsDaylighting_type& x);

        void
        T24SimVarsDaylighting (const T24SimVarsDaylighting_optional& x);

        // T24SimVarsHVACPrimary
        //
        typedef ::xml_schema::int_ T24SimVarsHVACPrimary_type;
        typedef ::xsd::cxx::tree::optional< T24SimVarsHVACPrimary_type > T24SimVarsHVACPrimary_optional;
        typedef ::xsd::cxx::tree::traits< T24SimVarsHVACPrimary_type, char > T24SimVarsHVACPrimary_traits;

        const T24SimVarsHVACPrimary_optional&
        T24SimVarsHVACPrimary () const;

        T24SimVarsHVACPrimary_optional&
        T24SimVarsHVACPrimary ();

        void
        T24SimVarsHVACPrimary (const T24SimVarsHVACPrimary_type& x);

        void
        T24SimVarsHVACPrimary (const T24SimVarsHVACPrimary_optional& x);

        // T24SimVarsHVACSecondary
        //
        typedef ::xml_schema::int_ T24SimVarsHVACSecondary_type;
        typedef ::xsd::cxx::tree::optional< T24SimVarsHVACSecondary_type > T24SimVarsHVACSecondary_optional;
        typedef ::xsd::cxx::tree::traits< T24SimVarsHVACSecondary_type, char > T24SimVarsHVACSecondary_traits;

        const T24SimVarsHVACSecondary_optional&
        T24SimVarsHVACSecondary () const;

        T24SimVarsHVACSecondary_optional&
        T24SimVarsHVACSecondary ();

        void
        T24SimVarsHVACSecondary (const T24SimVarsHVACSecondary_type& x);

        void
        T24SimVarsHVACSecondary (const T24SimVarsHVACSecondary_optional& x);

        // T24SimVarsHVACZone
        //
        typedef ::xml_schema::int_ T24SimVarsHVACZone_type;
        typedef ::xsd::cxx::tree::optional< T24SimVarsHVACZone_type > T24SimVarsHVACZone_optional;
        typedef ::xsd::cxx::tree::traits< T24SimVarsHVACZone_type, char > T24SimVarsHVACZone_traits;

        const T24SimVarsHVACZone_optional&
        T24SimVarsHVACZone () const;

        T24SimVarsHVACZone_optional&
        T24SimVarsHVACZone ();

        void
        T24SimVarsHVACZone (const T24SimVarsHVACZone_type& x);

        void
        T24SimVarsHVACZone (const T24SimVarsHVACZone_optional& x);

        // T24SimVarsSite
        //
        typedef ::xml_schema::int_ T24SimVarsSite_type;
        typedef ::xsd::cxx::tree::optional< T24SimVarsSite_type > T24SimVarsSite_optional;
        typedef ::xsd::cxx::tree::traits< T24SimVarsSite_type, char > T24SimVarsSite_traits;

        const T24SimVarsSite_optional&
        T24SimVarsSite () const;

        T24SimVarsSite_optional&
        T24SimVarsSite ();

        void
        T24SimVarsSite (const T24SimVarsSite_type& x);

        void
        T24SimVarsSite (const T24SimVarsSite_optional& x);

        // T24SimVarsThermalZone
        //
        typedef ::xml_schema::int_ T24SimVarsThermalZone_type;
        typedef ::xsd::cxx::tree::optional< T24SimVarsThermalZone_type > T24SimVarsThermalZone_optional;
        typedef ::xsd::cxx::tree::traits< T24SimVarsThermalZone_type, char > T24SimVarsThermalZone_traits;

        const T24SimVarsThermalZone_optional&
        T24SimVarsThermalZone () const;

        T24SimVarsThermalZone_optional&
        T24SimVarsThermalZone ();

        void
        T24SimVarsThermalZone (const T24SimVarsThermalZone_type& x);

        void
        T24SimVarsThermalZone (const T24SimVarsThermalZone_optional& x);

        // T24UseExceptionalDesignModel
        //
        typedef ::xml_schema::int_ T24UseExceptionalDesignModel_type;
        typedef ::xsd::cxx::tree::optional< T24UseExceptionalDesignModel_type > T24UseExceptionalDesignModel_optional;
        typedef ::xsd::cxx::tree::traits< T24UseExceptionalDesignModel_type, char > T24UseExceptionalDesignModel_traits;

        const T24UseExceptionalDesignModel_optional&
        T24UseExceptionalDesignModel () const;

        T24UseExceptionalDesignModel_optional&
        T24UseExceptionalDesignModel ();

        void
        T24UseExceptionalDesignModel (const T24UseExceptionalDesignModel_type& x);

        void
        T24UseExceptionalDesignModel (const T24UseExceptionalDesignModel_optional& x);

        // T24SiteFuelType
        //
        typedef ::xml_schema::string T24SiteFuelType_type;
        typedef ::xsd::cxx::tree::optional< T24SiteFuelType_type > T24SiteFuelType_optional;
        typedef ::xsd::cxx::tree::traits< T24SiteFuelType_type, char > T24SiteFuelType_traits;

        const T24SiteFuelType_optional&
        T24SiteFuelType () const;

        T24SiteFuelType_optional&
        T24SiteFuelType ();

        void
        T24SiteFuelType (const T24SiteFuelType_type& x);

        void
        T24SiteFuelType (const T24SiteFuelType_optional& x);

        void
        T24SiteFuelType (::std::auto_ptr< T24SiteFuelType_type > p);

        // Constructors.
        //
        SimProjectType ();

        SimProjectType (const RefId_type&);

        SimProjectType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SimProjectType (const SimProjectType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual SimProjectType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimProjectType&
        operator= (const SimProjectType& x);

        virtual 
        ~SimProjectType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        RepresentationMaps_optional RepresentationMaps_;
        Tag_optional Tag_;
        ProjectClientOwner_optional ProjectClientOwner_;
        ProjectArchitect_optional ProjectArchitect_;
        ProjectUnitsList_optional ProjectUnitsList_;
        T24ProjectTeamList_optional T24ProjectTeamList_;
        T24AnalysisType_optional T24AnalysisType_;
        T24AutomaticDaylightingReport_optional T24AutomaticDaylightingReport_;
        T24AutomaticTimeSwitchReport_optional T24AutomaticTimeSwitchReport_;
        T24AverageDryBulbTemperature_optional T24AverageDryBulbTemperature_;
        T24AverageElectricityCost_optional T24AverageElectricityCost_;
        T24AverageOtherFuelCost_optional T24AverageOtherFuelCost_;
        T24CommercialRefrigerationMandatoryCompliance_optional T24CommercialRefrigerationMandatoryCompliance_;
        T24ComplexHVACMandatoryCompliance_optional T24ComplexHVACMandatoryCompliance_;
        T24CompliancePathComputerRoom_optional T24CompliancePathComputerRoom_;
        T24CompliancePathDomesticHotWater_optional T24CompliancePathDomesticHotWater_;
        T24CompliancePathEnvelope_optional T24CompliancePathEnvelope_;
        T24CompliancePathKitchen_optional T24CompliancePathKitchen_;
        T24CompliancePathLaboratory_optional T24CompliancePathLaboratory_;
        T24CompliancePathLighting_optional T24CompliancePathLighting_;
        T24CompliancePathMechanical_optional T24CompliancePathMechanical_;
        T24ComplianceReportPDF_optional T24ComplianceReportPDF_;
        T24ComplianceReportXML_optional T24ComplianceReportXML_;
        T24ComplianceType_optional T24ComplianceType_;
        T24CompressedAirMandatoryCompliance_optional T24CompressedAirMandatoryCompliance_;
        T24DefaultDaylightingControls_optional T24DefaultDaylightingControls_;
        T24DemandResponsiveReport_optional T24DemandResponsiveReport_;
        T24DisableDaylightingControls_optional T24DisableDaylightingControls_;
        T24DomesticHotWaterDetailsLocation_optional T24DomesticHotWaterDetailsLocation_;
        T24ElectricalMandatoryCompliance_optional T24ElectricalMandatoryCompliance_;
        T24EnvelopeDetailsLocation_optional T24EnvelopeDetailsLocation_;
        T24ExcptCondBldg_optional T24ExcptCondBldg_;
        T24ExcptCondExteriorLighting_optional T24ExcptCondExteriorLighting_;
        T24ExcptCondNarrative_optional T24ExcptCondNarrative_;
        T24ExcptCondNoCoolingSystem_optional T24ExcptCondNoCoolingSystem_;
        T24ExcptCondRatedCapacity_optional T24ExcptCondRatedCapacity_;
        T24ExceptionalConditionWaterHeaterSizing_optional T24ExceptionalConditionWaterHeaterSizing_;
        T24ExcptCondWaterHeater_optional T24ExcptCondWaterHeater_;
        T24ExceptionalDesignModelFile_optional T24ExceptionalDesignModelFile_;
        T24GeometryInputType_optional T24GeometryInputType_;
        T24HolidayReference_optional T24HolidayReference_;
        T24HVACAutoSizing_optional T24HVACAutoSizing_;
        T24LightingDetailsLocation_optional T24LightingDetailsLocation_;
        T24LightingOutdoorCompliance_optional T24LightingOutdoorCompliance_;
        T24LightingSignCompliance_optional T24LightingSignCompliance_;
        T24LightingUnconditionedCompliance_optional T24LightingUnconditionedCompliance_;
        T24MechanicalDetailsLocation_optional T24MechanicalDetailsLocation_;
        T24MonthlyAverageTemperatureMaximumDifference_optional T24MonthlyAverageTemperatureMaximumDifference_;
        T24NarrativeDetails_optional T24NarrativeDetails_;
        T24NumberOfDaysPerQuickAnalysisPeriod_optional T24NumberOfDaysPerQuickAnalysisPeriod_;
        T24NumberOfQuickAnalysisPeriods_optional T24NumberOfQuickAnalysisPeriods_;
        T24NumberTimeStepsPerHour_optional T24NumberTimeStepsPerHour_;
        T24OccupancySensorCountReport_optional T24OccupancySensorCountReport_;
        T24OutdoorControlsReport_optional T24OutdoorControlsReport_;
        T24ParkingGarageMandatoryCompliance_optional T24ParkingGarageMandatoryCompliance_;
        T24PermitScope_optional T24PermitScope_;
        T24ProcessBoilerMandatoryCompliance_optional T24ProcessBoilerMandatoryCompliance_;
        T24QuickAnalysis_optional T24QuickAnalysis_;
        T24QuickAnalysisWeekNumbers_optional T24QuickAnalysisWeekNumbers_;
        T24RefrigerationWarehouseMandatoryCompliance_optional T24RefrigerationWarehouseMandatoryCompliance_;
        T24RuleRptFileAppend_optional T24RuleRptFileAppend_;
        T24RuleRptType_optional T24RuleRptType_;
        T24SimpleHVACMandatoryCompliance_optional T24SimpleHVACMandatoryCompliance_;
        T24SimulateDesignDays_optional T24SimulateDesignDays_;
        T24SimVarsDaylighting_optional T24SimVarsDaylighting_;
        T24SimVarsHVACPrimary_optional T24SimVarsHVACPrimary_;
        T24SimVarsHVACSecondary_optional T24SimVarsHVACSecondary_;
        T24SimVarsHVACZone_optional T24SimVarsHVACZone_;
        T24SimVarsSite_optional T24SimVarsSite_;
        T24SimVarsThermalZone_optional T24SimVarsThermalZone_;
        T24UseExceptionalDesignModel_optional T24UseExceptionalDesignModel_;
        T24SiteFuelType_optional T24SiteFuelType_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_PROJECT_TYPE_HXX
