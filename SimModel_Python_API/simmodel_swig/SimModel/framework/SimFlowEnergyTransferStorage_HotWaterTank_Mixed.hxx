// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_STORAGE_HOT_WATER_TANK_MIXED_HXX
#define SIM_FLOW_ENERGY_TRANSFER_STORAGE_HOT_WATER_TANK_MIXED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
//#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransferStorage_HotWaterTank_Mixed;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransferstorage_hotwatertank.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransferStorage_HotWaterTank_Mixed: public ::schema::simxml::MepModel::SimFlowEnergyTransferStorage_HotWaterTank
      {
        public:
        // SimFlowEnergyTransSto_Name
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_Name_type > SimFlowEnergyTransSto_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_Name_type, char > SimFlowEnergyTransSto_Name_traits;

        const SimFlowEnergyTransSto_Name_optional&
        SimFlowEnergyTransSto_Name () const;

        SimFlowEnergyTransSto_Name_optional&
        SimFlowEnergyTransSto_Name ();

        void
        SimFlowEnergyTransSto_Name (const SimFlowEnergyTransSto_Name_type& x);

        void
        SimFlowEnergyTransSto_Name (const SimFlowEnergyTransSto_Name_optional& x);

        void
        SimFlowEnergyTransSto_Name (::std::auto_ptr< SimFlowEnergyTransSto_Name_type > p);

        // SimFlowEnergyTransSto_TankVol
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_TankVol_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_TankVol_type > SimFlowEnergyTransSto_TankVol_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_TankVol_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_TankVol_traits;

        const SimFlowEnergyTransSto_TankVol_optional&
        SimFlowEnergyTransSto_TankVol () const;

        SimFlowEnergyTransSto_TankVol_optional&
        SimFlowEnergyTransSto_TankVol ();

        void
        SimFlowEnergyTransSto_TankVol (const SimFlowEnergyTransSto_TankVol_type& x);

        void
        SimFlowEnergyTransSto_TankVol (const SimFlowEnergyTransSto_TankVol_optional& x);

        // SimFlowEnergyTransSto_SetpointTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_SetpointTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_SetpointTempSchedName_type > SimFlowEnergyTransSto_SetpointTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_SetpointTempSchedName_type, char > SimFlowEnergyTransSto_SetpointTempSchedName_traits;

        const SimFlowEnergyTransSto_SetpointTempSchedName_optional&
        SimFlowEnergyTransSto_SetpointTempSchedName () const;

        SimFlowEnergyTransSto_SetpointTempSchedName_optional&
        SimFlowEnergyTransSto_SetpointTempSchedName ();

        void
        SimFlowEnergyTransSto_SetpointTempSchedName (const SimFlowEnergyTransSto_SetpointTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_SetpointTempSchedName (const SimFlowEnergyTransSto_SetpointTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_SetpointTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_SetpointTempSchedName_type > p);

        // SimFlowEnergyTransSto_DeadbandTempDifference
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_DeadbandTempDifference_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_DeadbandTempDifference_type > SimFlowEnergyTransSto_DeadbandTempDifference_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_DeadbandTempDifference_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_DeadbandTempDifference_traits;

        const SimFlowEnergyTransSto_DeadbandTempDifference_optional&
        SimFlowEnergyTransSto_DeadbandTempDifference () const;

        SimFlowEnergyTransSto_DeadbandTempDifference_optional&
        SimFlowEnergyTransSto_DeadbandTempDifference ();

        void
        SimFlowEnergyTransSto_DeadbandTempDifference (const SimFlowEnergyTransSto_DeadbandTempDifference_type& x);

        void
        SimFlowEnergyTransSto_DeadbandTempDifference (const SimFlowEnergyTransSto_DeadbandTempDifference_optional& x);

        // SimFlowEnergyTransSto_MaxTempLimit
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_MaxTempLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_MaxTempLimit_type > SimFlowEnergyTransSto_MaxTempLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_MaxTempLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_MaxTempLimit_traits;

        const SimFlowEnergyTransSto_MaxTempLimit_optional&
        SimFlowEnergyTransSto_MaxTempLimit () const;

        SimFlowEnergyTransSto_MaxTempLimit_optional&
        SimFlowEnergyTransSto_MaxTempLimit ();

        void
        SimFlowEnergyTransSto_MaxTempLimit (const SimFlowEnergyTransSto_MaxTempLimit_type& x);

        void
        SimFlowEnergyTransSto_MaxTempLimit (const SimFlowEnergyTransSto_MaxTempLimit_optional& x);

        // SimFlowEnergyTransSto_HeatCntlType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_HeatCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatCntlType_type > SimFlowEnergyTransSto_HeatCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatCntlType_type, char > SimFlowEnergyTransSto_HeatCntlType_traits;

        const SimFlowEnergyTransSto_HeatCntlType_optional&
        SimFlowEnergyTransSto_HeatCntlType () const;

        SimFlowEnergyTransSto_HeatCntlType_optional&
        SimFlowEnergyTransSto_HeatCntlType ();

        void
        SimFlowEnergyTransSto_HeatCntlType (const SimFlowEnergyTransSto_HeatCntlType_type& x);

        void
        SimFlowEnergyTransSto_HeatCntlType (const SimFlowEnergyTransSto_HeatCntlType_optional& x);

        void
        SimFlowEnergyTransSto_HeatCntlType (::std::auto_ptr< SimFlowEnergyTransSto_HeatCntlType_type > p);

        // SimFlowEnergyTransSto_HeatMaxCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_HeatMaxCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatMaxCap_type > SimFlowEnergyTransSto_HeatMaxCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatMaxCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_HeatMaxCap_traits;

        const SimFlowEnergyTransSto_HeatMaxCap_optional&
        SimFlowEnergyTransSto_HeatMaxCap () const;

        SimFlowEnergyTransSto_HeatMaxCap_optional&
        SimFlowEnergyTransSto_HeatMaxCap ();

        void
        SimFlowEnergyTransSto_HeatMaxCap (const SimFlowEnergyTransSto_HeatMaxCap_type& x);

        void
        SimFlowEnergyTransSto_HeatMaxCap (const SimFlowEnergyTransSto_HeatMaxCap_optional& x);

        // SimFlowEnergyTransSto_HeatMinCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_HeatMinCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatMinCap_type > SimFlowEnergyTransSto_HeatMinCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatMinCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_HeatMinCap_traits;

        const SimFlowEnergyTransSto_HeatMinCap_optional&
        SimFlowEnergyTransSto_HeatMinCap () const;

        SimFlowEnergyTransSto_HeatMinCap_optional&
        SimFlowEnergyTransSto_HeatMinCap ();

        void
        SimFlowEnergyTransSto_HeatMinCap (const SimFlowEnergyTransSto_HeatMinCap_type& x);

        void
        SimFlowEnergyTransSto_HeatMinCap (const SimFlowEnergyTransSto_HeatMinCap_optional& x);

        // SimFlowEnergyTransSto_HeatIgnitionMinFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_type > SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_traits;

        const SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional&
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate () const;

        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional&
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate ();

        void
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate (const SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_type& x);

        void
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate (const SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional& x);

        // SimFlowEnergyTransSto_HeatIgnitionDelay
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_HeatIgnitionDelay_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatIgnitionDelay_type > SimFlowEnergyTransSto_HeatIgnitionDelay_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatIgnitionDelay_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_HeatIgnitionDelay_traits;

        const SimFlowEnergyTransSto_HeatIgnitionDelay_optional&
        SimFlowEnergyTransSto_HeatIgnitionDelay () const;

        SimFlowEnergyTransSto_HeatIgnitionDelay_optional&
        SimFlowEnergyTransSto_HeatIgnitionDelay ();

        void
        SimFlowEnergyTransSto_HeatIgnitionDelay (const SimFlowEnergyTransSto_HeatIgnitionDelay_type& x);

        void
        SimFlowEnergyTransSto_HeatIgnitionDelay (const SimFlowEnergyTransSto_HeatIgnitionDelay_optional& x);

        // SimFlowEnergyTransSto_HeatFuelType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_HeatFuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatFuelType_type > SimFlowEnergyTransSto_HeatFuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatFuelType_type, char > SimFlowEnergyTransSto_HeatFuelType_traits;

        const SimFlowEnergyTransSto_HeatFuelType_optional&
        SimFlowEnergyTransSto_HeatFuelType () const;

        SimFlowEnergyTransSto_HeatFuelType_optional&
        SimFlowEnergyTransSto_HeatFuelType ();

        void
        SimFlowEnergyTransSto_HeatFuelType (const SimFlowEnergyTransSto_HeatFuelType_type& x);

        void
        SimFlowEnergyTransSto_HeatFuelType (const SimFlowEnergyTransSto_HeatFuelType_optional& x);

        void
        SimFlowEnergyTransSto_HeatFuelType (::std::auto_ptr< SimFlowEnergyTransSto_HeatFuelType_type > p);

        // SimFlowEnergyTransSto_HeatThermalEff
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_HeatThermalEff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_HeatThermalEff_type > SimFlowEnergyTransSto_HeatThermalEff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_HeatThermalEff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_HeatThermalEff_traits;

        const SimFlowEnergyTransSto_HeatThermalEff_optional&
        SimFlowEnergyTransSto_HeatThermalEff () const;

        SimFlowEnergyTransSto_HeatThermalEff_optional&
        SimFlowEnergyTransSto_HeatThermalEff ();

        void
        SimFlowEnergyTransSto_HeatThermalEff (const SimFlowEnergyTransSto_HeatThermalEff_type& x);

        void
        SimFlowEnergyTransSto_HeatThermalEff (const SimFlowEnergyTransSto_HeatThermalEff_optional& x);

        // SimFlowEnergyTransSto_PartLoadFactorCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_PartLoadFactorCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_PartLoadFactorCurveName_type > SimFlowEnergyTransSto_PartLoadFactorCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_PartLoadFactorCurveName_type, char > SimFlowEnergyTransSto_PartLoadFactorCurveName_traits;

        const SimFlowEnergyTransSto_PartLoadFactorCurveName_optional&
        SimFlowEnergyTransSto_PartLoadFactorCurveName () const;

        SimFlowEnergyTransSto_PartLoadFactorCurveName_optional&
        SimFlowEnergyTransSto_PartLoadFactorCurveName ();

        void
        SimFlowEnergyTransSto_PartLoadFactorCurveName (const SimFlowEnergyTransSto_PartLoadFactorCurveName_type& x);

        void
        SimFlowEnergyTransSto_PartLoadFactorCurveName (const SimFlowEnergyTransSto_PartLoadFactorCurveName_optional& x);

        void
        SimFlowEnergyTransSto_PartLoadFactorCurveName (::std::auto_ptr< SimFlowEnergyTransSto_PartLoadFactorCurveName_type > p);

        // SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_type > SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_traits;

        const SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional&
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate () const;

        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional&
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate ();

        void
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_type& x);

        void
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional& x);

        // SimFlowEnergyTransSto_fCycleParasiticFuelType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_fCycleParasiticFuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_fCycleParasiticFuelType_type > SimFlowEnergyTransSto_fCycleParasiticFuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_fCycleParasiticFuelType_type, char > SimFlowEnergyTransSto_fCycleParasiticFuelType_traits;

        const SimFlowEnergyTransSto_fCycleParasiticFuelType_optional&
        SimFlowEnergyTransSto_fCycleParasiticFuelType () const;

        SimFlowEnergyTransSto_fCycleParasiticFuelType_optional&
        SimFlowEnergyTransSto_fCycleParasiticFuelType ();

        void
        SimFlowEnergyTransSto_fCycleParasiticFuelType (const SimFlowEnergyTransSto_fCycleParasiticFuelType_type& x);

        void
        SimFlowEnergyTransSto_fCycleParasiticFuelType (const SimFlowEnergyTransSto_fCycleParasiticFuelType_optional& x);

        void
        SimFlowEnergyTransSto_fCycleParasiticFuelType (::std::auto_ptr< SimFlowEnergyTransSto_fCycleParasiticFuelType_type > p);

        // SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_type > SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_traits;

        const SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional&
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank () const;

        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional&
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank ();

        void
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_type& x);

        void
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional& x);

        // SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_type > SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_traits;

        const SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional&
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate () const;

        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional&
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate ();

        void
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_type& x);

        void
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate (const SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional& x);

        // SimFlowEnergyTransSto_OnCycleParasiticFuelType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_OnCycleParasiticFuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OnCycleParasiticFuelType_type > SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OnCycleParasiticFuelType_type, char > SimFlowEnergyTransSto_OnCycleParasiticFuelType_traits;

        const SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional&
        SimFlowEnergyTransSto_OnCycleParasiticFuelType () const;

        SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional&
        SimFlowEnergyTransSto_OnCycleParasiticFuelType ();

        void
        SimFlowEnergyTransSto_OnCycleParasiticFuelType (const SimFlowEnergyTransSto_OnCycleParasiticFuelType_type& x);

        void
        SimFlowEnergyTransSto_OnCycleParasiticFuelType (const SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional& x);

        void
        SimFlowEnergyTransSto_OnCycleParasiticFuelType (::std::auto_ptr< SimFlowEnergyTransSto_OnCycleParasiticFuelType_type > p);

        // SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_type > SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_traits;

        const SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional&
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank () const;

        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional&
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank ();

        void
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_type& x);

        void
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank (const SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional& x);

        // SimFlowEnergyTransSto_AmbTempdic
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_AmbTempdic_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AmbTempdic_type > SimFlowEnergyTransSto_AmbTempdic_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AmbTempdic_type, char > SimFlowEnergyTransSto_AmbTempdic_traits;

        const SimFlowEnergyTransSto_AmbTempdic_optional&
        SimFlowEnergyTransSto_AmbTempdic () const;

        SimFlowEnergyTransSto_AmbTempdic_optional&
        SimFlowEnergyTransSto_AmbTempdic ();

        void
        SimFlowEnergyTransSto_AmbTempdic (const SimFlowEnergyTransSto_AmbTempdic_type& x);

        void
        SimFlowEnergyTransSto_AmbTempdic (const SimFlowEnergyTransSto_AmbTempdic_optional& x);

        void
        SimFlowEnergyTransSto_AmbTempdic (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempdic_type > p);

        // SimFlowEnergyTransSto_AmbTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_AmbTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AmbTempSchedName_type > SimFlowEnergyTransSto_AmbTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AmbTempSchedName_type, char > SimFlowEnergyTransSto_AmbTempSchedName_traits;

        const SimFlowEnergyTransSto_AmbTempSchedName_optional&
        SimFlowEnergyTransSto_AmbTempSchedName () const;

        SimFlowEnergyTransSto_AmbTempSchedName_optional&
        SimFlowEnergyTransSto_AmbTempSchedName ();

        void
        SimFlowEnergyTransSto_AmbTempSchedName (const SimFlowEnergyTransSto_AmbTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_AmbTempSchedName (const SimFlowEnergyTransSto_AmbTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_AmbTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempSchedName_type > p);

        // SimFlowEnergyTransSto_AmbTempZoneName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_AmbTempZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AmbTempZoneName_type > SimFlowEnergyTransSto_AmbTempZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AmbTempZoneName_type, char > SimFlowEnergyTransSto_AmbTempZoneName_traits;

        const SimFlowEnergyTransSto_AmbTempZoneName_optional&
        SimFlowEnergyTransSto_AmbTempZoneName () const;

        SimFlowEnergyTransSto_AmbTempZoneName_optional&
        SimFlowEnergyTransSto_AmbTempZoneName ();

        void
        SimFlowEnergyTransSto_AmbTempZoneName (const SimFlowEnergyTransSto_AmbTempZoneName_type& x);

        void
        SimFlowEnergyTransSto_AmbTempZoneName (const SimFlowEnergyTransSto_AmbTempZoneName_optional& x);

        void
        SimFlowEnergyTransSto_AmbTempZoneName (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempZoneName_type > p);

        // SimFlowEnergyTransSto_AmbTempOutdrAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type > SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type, char > SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_traits;

        const SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional&
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName () const;

        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional&
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName ();

        void
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName (const SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type& x);

        void
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName (const SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional& x);

        void
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName (::std::auto_ptr< SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_type > p);

        // SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_type > SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_traits;

        const SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional&
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp () const;

        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional&
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp ();

        void
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_type& x);

        void
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional& x);

        // SimFlowEnergyTransSto_fCycleLossFractToZone
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_fCycleLossFractToZone_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_fCycleLossFractToZone_type > SimFlowEnergyTransSto_fCycleLossFractToZone_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_fCycleLossFractToZone_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_fCycleLossFractToZone_traits;

        const SimFlowEnergyTransSto_fCycleLossFractToZone_optional&
        SimFlowEnergyTransSto_fCycleLossFractToZone () const;

        SimFlowEnergyTransSto_fCycleLossFractToZone_optional&
        SimFlowEnergyTransSto_fCycleLossFractToZone ();

        void
        SimFlowEnergyTransSto_fCycleLossFractToZone (const SimFlowEnergyTransSto_fCycleLossFractToZone_type& x);

        void
        SimFlowEnergyTransSto_fCycleLossFractToZone (const SimFlowEnergyTransSto_fCycleLossFractToZone_optional& x);

        // SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_type > SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_traits;

        const SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional&
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp () const;

        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional&
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp ();

        void
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_type& x);

        void
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp (const SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional& x);

        // SimFlowEnergyTransSto_OnCycleLossFractToZone
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_OnCycleLossFractToZone_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OnCycleLossFractToZone_type > SimFlowEnergyTransSto_OnCycleLossFractToZone_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OnCycleLossFractToZone_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_OnCycleLossFractToZone_traits;

        const SimFlowEnergyTransSto_OnCycleLossFractToZone_optional&
        SimFlowEnergyTransSto_OnCycleLossFractToZone () const;

        SimFlowEnergyTransSto_OnCycleLossFractToZone_optional&
        SimFlowEnergyTransSto_OnCycleLossFractToZone ();

        void
        SimFlowEnergyTransSto_OnCycleLossFractToZone (const SimFlowEnergyTransSto_OnCycleLossFractToZone_type& x);

        void
        SimFlowEnergyTransSto_OnCycleLossFractToZone (const SimFlowEnergyTransSto_OnCycleLossFractToZone_optional& x);

        // SimFlowEnergyTransSto_PeakUseFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_PeakUseFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_PeakUseFlowRate_type > SimFlowEnergyTransSto_PeakUseFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_PeakUseFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_PeakUseFlowRate_traits;

        const SimFlowEnergyTransSto_PeakUseFlowRate_optional&
        SimFlowEnergyTransSto_PeakUseFlowRate () const;

        SimFlowEnergyTransSto_PeakUseFlowRate_optional&
        SimFlowEnergyTransSto_PeakUseFlowRate ();

        void
        SimFlowEnergyTransSto_PeakUseFlowRate (const SimFlowEnergyTransSto_PeakUseFlowRate_type& x);

        void
        SimFlowEnergyTransSto_PeakUseFlowRate (const SimFlowEnergyTransSto_PeakUseFlowRate_optional& x);

        // SimFlowEnergyTransSto_UseFlowRateFractSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_UseFlowRateFractSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_UseFlowRateFractSchedName_type > SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_UseFlowRateFractSchedName_type, char > SimFlowEnergyTransSto_UseFlowRateFractSchedName_traits;

        const SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional&
        SimFlowEnergyTransSto_UseFlowRateFractSchedName () const;

        SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional&
        SimFlowEnergyTransSto_UseFlowRateFractSchedName ();

        void
        SimFlowEnergyTransSto_UseFlowRateFractSchedName (const SimFlowEnergyTransSto_UseFlowRateFractSchedName_type& x);

        void
        SimFlowEnergyTransSto_UseFlowRateFractSchedName (const SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional& x);

        void
        SimFlowEnergyTransSto_UseFlowRateFractSchedName (::std::auto_ptr< SimFlowEnergyTransSto_UseFlowRateFractSchedName_type > p);

        // SimFlowEnergyTransSto_ColdWaterSupTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type > SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type, char > SimFlowEnergyTransSto_ColdWaterSupTempSchedName_traits;

        const SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional&
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName () const;

        SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional&
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName ();

        void
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName (const SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName (const SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_ColdWaterSupTempSchedName_type > p);

        // SimFlowEnergyTransSto_UseSideInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_UseSideInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_UseSideInletNodeName_type > SimFlowEnergyTransSto_UseSideInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_UseSideInletNodeName_type, char > SimFlowEnergyTransSto_UseSideInletNodeName_traits;

        const SimFlowEnergyTransSto_UseSideInletNodeName_optional&
        SimFlowEnergyTransSto_UseSideInletNodeName () const;

        SimFlowEnergyTransSto_UseSideInletNodeName_optional&
        SimFlowEnergyTransSto_UseSideInletNodeName ();

        void
        SimFlowEnergyTransSto_UseSideInletNodeName (const SimFlowEnergyTransSto_UseSideInletNodeName_type& x);

        void
        SimFlowEnergyTransSto_UseSideInletNodeName (const SimFlowEnergyTransSto_UseSideInletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_UseSideInletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_UseSideInletNodeName_type > p);

        // SimFlowEnergyTransSto_UseSideOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_UseSideOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_UseSideOutletNodeName_type > SimFlowEnergyTransSto_UseSideOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_UseSideOutletNodeName_type, char > SimFlowEnergyTransSto_UseSideOutletNodeName_traits;

        const SimFlowEnergyTransSto_UseSideOutletNodeName_optional&
        SimFlowEnergyTransSto_UseSideOutletNodeName () const;

        SimFlowEnergyTransSto_UseSideOutletNodeName_optional&
        SimFlowEnergyTransSto_UseSideOutletNodeName ();

        void
        SimFlowEnergyTransSto_UseSideOutletNodeName (const SimFlowEnergyTransSto_UseSideOutletNodeName_type& x);

        void
        SimFlowEnergyTransSto_UseSideOutletNodeName (const SimFlowEnergyTransSto_UseSideOutletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_UseSideOutletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_UseSideOutletNodeName_type > p);

        // SimFlowEnergyTransSto_UseSideEffect
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_UseSideEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_UseSideEffect_type > SimFlowEnergyTransSto_UseSideEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_UseSideEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_UseSideEffect_traits;

        const SimFlowEnergyTransSto_UseSideEffect_optional&
        SimFlowEnergyTransSto_UseSideEffect () const;

        SimFlowEnergyTransSto_UseSideEffect_optional&
        SimFlowEnergyTransSto_UseSideEffect ();

        void
        SimFlowEnergyTransSto_UseSideEffect (const SimFlowEnergyTransSto_UseSideEffect_type& x);

        void
        SimFlowEnergyTransSto_UseSideEffect (const SimFlowEnergyTransSto_UseSideEffect_optional& x);

        // SimFlowEnergyTransSto_SrcSideInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_SrcSideInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_SrcSideInletNodeName_type > SimFlowEnergyTransSto_SrcSideInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_SrcSideInletNodeName_type, char > SimFlowEnergyTransSto_SrcSideInletNodeName_traits;

        const SimFlowEnergyTransSto_SrcSideInletNodeName_optional&
        SimFlowEnergyTransSto_SrcSideInletNodeName () const;

        SimFlowEnergyTransSto_SrcSideInletNodeName_optional&
        SimFlowEnergyTransSto_SrcSideInletNodeName ();

        void
        SimFlowEnergyTransSto_SrcSideInletNodeName (const SimFlowEnergyTransSto_SrcSideInletNodeName_type& x);

        void
        SimFlowEnergyTransSto_SrcSideInletNodeName (const SimFlowEnergyTransSto_SrcSideInletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_SrcSideInletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_SrcSideInletNodeName_type > p);

        // SimFlowEnergyTransSto_SrcSideOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_SrcSideOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_SrcSideOutletNodeName_type > SimFlowEnergyTransSto_SrcSideOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_SrcSideOutletNodeName_type, char > SimFlowEnergyTransSto_SrcSideOutletNodeName_traits;

        const SimFlowEnergyTransSto_SrcSideOutletNodeName_optional&
        SimFlowEnergyTransSto_SrcSideOutletNodeName () const;

        SimFlowEnergyTransSto_SrcSideOutletNodeName_optional&
        SimFlowEnergyTransSto_SrcSideOutletNodeName ();

        void
        SimFlowEnergyTransSto_SrcSideOutletNodeName (const SimFlowEnergyTransSto_SrcSideOutletNodeName_type& x);

        void
        SimFlowEnergyTransSto_SrcSideOutletNodeName (const SimFlowEnergyTransSto_SrcSideOutletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_SrcSideOutletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_SrcSideOutletNodeName_type > p);

        // SimFlowEnergyTransSto_SrcSideEffect
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_SrcSideEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_SrcSideEffect_type > SimFlowEnergyTransSto_SrcSideEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_SrcSideEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_SrcSideEffect_traits;

        const SimFlowEnergyTransSto_SrcSideEffect_optional&
        SimFlowEnergyTransSto_SrcSideEffect () const;

        SimFlowEnergyTransSto_SrcSideEffect_optional&
        SimFlowEnergyTransSto_SrcSideEffect ();

        void
        SimFlowEnergyTransSto_SrcSideEffect (const SimFlowEnergyTransSto_SrcSideEffect_type& x);

        void
        SimFlowEnergyTransSto_SrcSideEffect (const SimFlowEnergyTransSto_SrcSideEffect_optional& x);

        // SimFlowEnergyTransSto_UseSideDesignFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_UseSideDesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_UseSideDesignFlowRate_type > SimFlowEnergyTransSto_UseSideDesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_UseSideDesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_UseSideDesignFlowRate_traits;

        const SimFlowEnergyTransSto_UseSideDesignFlowRate_optional&
        SimFlowEnergyTransSto_UseSideDesignFlowRate () const;

        SimFlowEnergyTransSto_UseSideDesignFlowRate_optional&
        SimFlowEnergyTransSto_UseSideDesignFlowRate ();

        void
        SimFlowEnergyTransSto_UseSideDesignFlowRate (const SimFlowEnergyTransSto_UseSideDesignFlowRate_type& x);

        void
        SimFlowEnergyTransSto_UseSideDesignFlowRate (const SimFlowEnergyTransSto_UseSideDesignFlowRate_optional& x);

        // SimFlowEnergyTransSto_SrcSideDesignFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_SrcSideDesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_SrcSideDesignFlowRate_type > SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_SrcSideDesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_SrcSideDesignFlowRate_traits;

        const SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional&
        SimFlowEnergyTransSto_SrcSideDesignFlowRate () const;

        SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional&
        SimFlowEnergyTransSto_SrcSideDesignFlowRate ();

        void
        SimFlowEnergyTransSto_SrcSideDesignFlowRate (const SimFlowEnergyTransSto_SrcSideDesignFlowRate_type& x);

        void
        SimFlowEnergyTransSto_SrcSideDesignFlowRate (const SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional& x);

        // SimFlowEnergyTransSto_directWaterHeatingRecovTime
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_directWaterHeatingRecovTime_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_directWaterHeatingRecovTime_type > SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_directWaterHeatingRecovTime_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_directWaterHeatingRecovTime_traits;

        const SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional&
        SimFlowEnergyTransSto_directWaterHeatingRecovTime () const;

        SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional&
        SimFlowEnergyTransSto_directWaterHeatingRecovTime ();

        void
        SimFlowEnergyTransSto_directWaterHeatingRecovTime (const SimFlowEnergyTransSto_directWaterHeatingRecovTime_type& x);

        void
        SimFlowEnergyTransSto_directWaterHeatingRecovTime (const SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional& x);

        // SimFlowEnergyTransSto_SourceSideFlowCntrlMode
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type > SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type, char > SimFlowEnergyTransSto_SourceSideFlowCntrlMode_traits;

        const SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional&
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode () const;

        SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional&
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode ();

        void
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode (const SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type& x);

        void
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode (const SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional& x);

        void
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode (::std::auto_ptr< SimFlowEnergyTransSto_SourceSideFlowCntrlMode_type > p);

        // SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type > SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type, char > SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_traits;

        const SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional&
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName () const;

        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional&
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName ();

        void
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName (const SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName (const SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_type > p);

        // T24DraftFanPwr
        //
        typedef ::xml_schema::double_ T24DraftFanPwr_type;
        typedef ::xsd::cxx::tree::optional< T24DraftFanPwr_type > T24DraftFanPwr_optional;
        typedef ::xsd::cxx::tree::traits< T24DraftFanPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > T24DraftFanPwr_traits;

        const T24DraftFanPwr_optional&
        T24DraftFanPwr () const;

        T24DraftFanPwr_optional&
        T24DraftFanPwr ();

        void
        T24DraftFanPwr (const T24DraftFanPwr_type& x);

        void
        T24DraftFanPwr (const T24DraftFanPwr_optional& x);

        // T24EnergyFactor
        //
        typedef ::xml_schema::double_ T24EnergyFactor_type;
        typedef ::xsd::cxx::tree::optional< T24EnergyFactor_type > T24EnergyFactor_optional;
        typedef ::xsd::cxx::tree::traits< T24EnergyFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > T24EnergyFactor_traits;

        const T24EnergyFactor_optional&
        T24EnergyFactor () const;

        T24EnergyFactor_optional&
        T24EnergyFactor ();

        void
        T24EnergyFactor (const T24EnergyFactor_type& x);

        void
        T24EnergyFactor (const T24EnergyFactor_optional& x);

        // T24ElecIgnit
        //
        typedef ::xml_schema::int_ T24ElecIgnit_type;
        typedef ::xsd::cxx::tree::optional< T24ElecIgnit_type > T24ElecIgnit_optional;
        typedef ::xsd::cxx::tree::traits< T24ElecIgnit_type, char > T24ElecIgnit_traits;

        const T24ElecIgnit_optional&
        T24ElecIgnit () const;

        T24ElecIgnit_optional&
        T24ElecIgnit ();

        void
        T24ElecIgnit (const T24ElecIgnit_type& x);

        void
        T24ElecIgnit (const T24ElecIgnit_optional& x);

        // T24PilotEnergy
        //
        typedef ::xml_schema::double_ T24PilotEnergy_type;
        typedef ::xsd::cxx::tree::optional< T24PilotEnergy_type, true > T24PilotEnergy_optional;
        typedef ::xsd::cxx::tree::traits< T24PilotEnergy_type, char, ::xsd::cxx::tree::schema_type::double_ > T24PilotEnergy_traits;

        const T24PilotEnergy_optional&
        T24PilotEnergy () const;

        T24PilotEnergy_optional&
        T24PilotEnergy ();

        void
        T24PilotEnergy (const T24PilotEnergy_type& x);

        void
        T24PilotEnergy (const T24PilotEnergy_optional& x);

        // T24RecEff
        //
        typedef ::xml_schema::double_ T24RecEff_type;
        typedef ::xsd::cxx::tree::optional< T24RecEff_type > T24RecEff_optional;
        typedef ::xsd::cxx::tree::traits< T24RecEff_type, char, ::xsd::cxx::tree::schema_type::double_ > T24RecEff_traits;

        const T24RecEff_optional&
        T24RecEff () const;

        T24RecEff_optional&
        T24RecEff ();

        void
        T24RecEff (const T24RecEff_type& x);

        void
        T24RecEff (const T24RecEff_optional& x);

        // T24StdbyLossFrac
        //
        typedef ::xml_schema::double_ T24StdbyLossFrac_type;
        typedef ::xsd::cxx::tree::optional< T24StdbyLossFrac_type > T24StdbyLossFrac_optional;
        typedef ::xsd::cxx::tree::traits< T24StdbyLossFrac_type, char, ::xsd::cxx::tree::schema_type::double_ > T24StdbyLossFrac_traits;

        const T24StdbyLossFrac_optional&
        T24StdbyLossFrac () const;

        T24StdbyLossFrac_optional&
        T24StdbyLossFrac ();

        void
        T24StdbyLossFrac (const T24StdbyLossFrac_type& x);

        void
        T24StdbyLossFrac (const T24StdbyLossFrac_optional& x);

        // T24ConstructStatus2
        //
        typedef ::xml_schema::string T24ConstructStatus2_type;
        typedef ::xsd::cxx::tree::optional< T24ConstructStatus2_type > T24ConstructStatus2_optional;
        typedef ::xsd::cxx::tree::traits< T24ConstructStatus2_type, char > T24ConstructStatus2_traits;

        const T24ConstructStatus2_optional&
        T24ConstructStatus2 () const;

        T24ConstructStatus2_optional&
        T24ConstructStatus2 ();

        void
        T24ConstructStatus2 (const T24ConstructStatus2_type& x);

        void
        T24ConstructStatus2 (const T24ConstructStatus2_optional& x);

        void
        T24ConstructStatus2 (::std::auto_ptr< T24ConstructStatus2_type > p);

        // T24WtrHtrType
        //
        typedef ::xml_schema::string T24WtrHtrType_type;
        typedef ::xsd::cxx::tree::optional< T24WtrHtrType_type > T24WtrHtrType_optional;
        typedef ::xsd::cxx::tree::traits< T24WtrHtrType_type, char > T24WtrHtrType_traits;

        const T24WtrHtrType_optional&
        T24WtrHtrType () const;

        T24WtrHtrType_optional&
        T24WtrHtrType ();

        void
        T24WtrHtrType (const T24WtrHtrType_type& x);

        void
        T24WtrHtrType (const T24WtrHtrType_optional& x);

        void
        T24WtrHtrType (::std::auto_ptr< T24WtrHtrType_type > p);

        // Constructors.
        //
        SimFlowEnergyTransferStorage_HotWaterTank_Mixed ();

        SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const RefId_type&);

        SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

        SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const SimFlowEnergyTransferStorage_HotWaterTank_Mixed& x,
                                                         ::xml_schema::flags f = 0,
                                                         ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransferStorage_HotWaterTank_Mixed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransferStorage_HotWaterTank_Mixed&
        operator= (const SimFlowEnergyTransferStorage_HotWaterTank_Mixed& x);

        virtual 
        ~SimFlowEnergyTransferStorage_HotWaterTank_Mixed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTransSto_Name_optional SimFlowEnergyTransSto_Name_;
        SimFlowEnergyTransSto_TankVol_optional SimFlowEnergyTransSto_TankVol_;
        SimFlowEnergyTransSto_SetpointTempSchedName_optional SimFlowEnergyTransSto_SetpointTempSchedName_;
        SimFlowEnergyTransSto_DeadbandTempDifference_optional SimFlowEnergyTransSto_DeadbandTempDifference_;
        SimFlowEnergyTransSto_MaxTempLimit_optional SimFlowEnergyTransSto_MaxTempLimit_;
        SimFlowEnergyTransSto_HeatCntlType_optional SimFlowEnergyTransSto_HeatCntlType_;
        SimFlowEnergyTransSto_HeatMaxCap_optional SimFlowEnergyTransSto_HeatMaxCap_;
        SimFlowEnergyTransSto_HeatMinCap_optional SimFlowEnergyTransSto_HeatMinCap_;
        SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_optional SimFlowEnergyTransSto_HeatIgnitionMinFlowRate_;
        SimFlowEnergyTransSto_HeatIgnitionDelay_optional SimFlowEnergyTransSto_HeatIgnitionDelay_;
        SimFlowEnergyTransSto_HeatFuelType_optional SimFlowEnergyTransSto_HeatFuelType_;
        SimFlowEnergyTransSto_HeatThermalEff_optional SimFlowEnergyTransSto_HeatThermalEff_;
        SimFlowEnergyTransSto_PartLoadFactorCurveName_optional SimFlowEnergyTransSto_PartLoadFactorCurveName_;
        SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_optional SimFlowEnergyTransSto_fCycleParasiticFuelConsumpRate_;
        SimFlowEnergyTransSto_fCycleParasiticFuelType_optional SimFlowEnergyTransSto_fCycleParasiticFuelType_;
        SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_optional SimFlowEnergyTransSto_fCycleParasiticHeatFractToTank_;
        SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_optional SimFlowEnergyTransSto_OnCycleParasiticFuelConsumpRate_;
        SimFlowEnergyTransSto_OnCycleParasiticFuelType_optional SimFlowEnergyTransSto_OnCycleParasiticFuelType_;
        SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_optional SimFlowEnergyTransSto_OnCycleParasiticHeatFractToTank_;
        SimFlowEnergyTransSto_AmbTempdic_optional SimFlowEnergyTransSto_AmbTempdic_;
        SimFlowEnergyTransSto_AmbTempSchedName_optional SimFlowEnergyTransSto_AmbTempSchedName_;
        SimFlowEnergyTransSto_AmbTempZoneName_optional SimFlowEnergyTransSto_AmbTempZoneName_;
        SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_optional SimFlowEnergyTransSto_AmbTempOutdrAirNodeName_;
        SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_optional SimFlowEnergyTransSto_fCycleLossCoefToAmbTemp_;
        SimFlowEnergyTransSto_fCycleLossFractToZone_optional SimFlowEnergyTransSto_fCycleLossFractToZone_;
        SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_optional SimFlowEnergyTransSto_OnCycleLossCoefToAmbTemp_;
        SimFlowEnergyTransSto_OnCycleLossFractToZone_optional SimFlowEnergyTransSto_OnCycleLossFractToZone_;
        SimFlowEnergyTransSto_PeakUseFlowRate_optional SimFlowEnergyTransSto_PeakUseFlowRate_;
        SimFlowEnergyTransSto_UseFlowRateFractSchedName_optional SimFlowEnergyTransSto_UseFlowRateFractSchedName_;
        SimFlowEnergyTransSto_ColdWaterSupTempSchedName_optional SimFlowEnergyTransSto_ColdWaterSupTempSchedName_;
        SimFlowEnergyTransSto_UseSideInletNodeName_optional SimFlowEnergyTransSto_UseSideInletNodeName_;
        SimFlowEnergyTransSto_UseSideOutletNodeName_optional SimFlowEnergyTransSto_UseSideOutletNodeName_;
        SimFlowEnergyTransSto_UseSideEffect_optional SimFlowEnergyTransSto_UseSideEffect_;
        SimFlowEnergyTransSto_SrcSideInletNodeName_optional SimFlowEnergyTransSto_SrcSideInletNodeName_;
        SimFlowEnergyTransSto_SrcSideOutletNodeName_optional SimFlowEnergyTransSto_SrcSideOutletNodeName_;
        SimFlowEnergyTransSto_SrcSideEffect_optional SimFlowEnergyTransSto_SrcSideEffect_;
        SimFlowEnergyTransSto_UseSideDesignFlowRate_optional SimFlowEnergyTransSto_UseSideDesignFlowRate_;
        SimFlowEnergyTransSto_SrcSideDesignFlowRate_optional SimFlowEnergyTransSto_SrcSideDesignFlowRate_;
        SimFlowEnergyTransSto_directWaterHeatingRecovTime_optional SimFlowEnergyTransSto_directWaterHeatingRecovTime_;
        SimFlowEnergyTransSto_SourceSideFlowCntrlMode_optional SimFlowEnergyTransSto_SourceSideFlowCntrlMode_;
        SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_optional SimFlowEnergyTransSto_IndirectAlternateSetptTempSchedName_;
        T24DraftFanPwr_optional T24DraftFanPwr_;
        T24EnergyFactor_optional T24EnergyFactor_;
        T24ElecIgnit_optional T24ElecIgnit_;
        T24PilotEnergy_optional T24PilotEnergy_;
        T24RecEff_optional T24RecEff_;
        T24StdbyLossFrac_optional T24StdbyLossFrac_;
        T24ConstructStatus2_optional T24ConstructStatus2_;
        T24WtrHtrType_optional T24WtrHtrType_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_STORAGE_HOT_WATER_TANK_MIXED_HXX
