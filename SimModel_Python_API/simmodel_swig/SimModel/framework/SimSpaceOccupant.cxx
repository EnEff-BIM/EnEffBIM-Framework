// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSpaceOccupant.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSpaceOccupant
      // 

      const SimSpaceOccupant::SpaceOccOrgAbbrev_optional& SimSpaceOccupant::
      SpaceOccOrgAbbrev () const
      {
        return this->SpaceOccOrgAbbrev_;
      }

      SimSpaceOccupant::SpaceOccOrgAbbrev_optional& SimSpaceOccupant::
      SpaceOccOrgAbbrev ()
      {
        return this->SpaceOccOrgAbbrev_;
      }

      void SimSpaceOccupant::
      SpaceOccOrgAbbrev (const SpaceOccOrgAbbrev_type& x)
      {
        this->SpaceOccOrgAbbrev_.set (x);
      }

      void SimSpaceOccupant::
      SpaceOccOrgAbbrev (const SpaceOccOrgAbbrev_optional& x)
      {
        this->SpaceOccOrgAbbrev_ = x;
      }

      void SimSpaceOccupant::
      SpaceOccOrgAbbrev (::std::auto_ptr< SpaceOccOrgAbbrev_type > x)
      {
        this->SpaceOccOrgAbbrev_.set (x);
      }

      const SimSpaceOccupant::SpaceOccOrgName_optional& SimSpaceOccupant::
      SpaceOccOrgName () const
      {
        return this->SpaceOccOrgName_;
      }

      SimSpaceOccupant::SpaceOccOrgName_optional& SimSpaceOccupant::
      SpaceOccOrgName ()
      {
        return this->SpaceOccOrgName_;
      }

      void SimSpaceOccupant::
      SpaceOccOrgName (const SpaceOccOrgName_type& x)
      {
        this->SpaceOccOrgName_.set (x);
      }

      void SimSpaceOccupant::
      SpaceOccOrgName (const SpaceOccOrgName_optional& x)
      {
        this->SpaceOccOrgName_ = x;
      }

      void SimSpaceOccupant::
      SpaceOccOrgName (::std::auto_ptr< SpaceOccOrgName_type > x)
      {
        this->SpaceOccOrgName_.set (x);
      }

      const SimSpaceOccupant::ClassRef_SpaceOccOrgID_optional& SimSpaceOccupant::
      ClassRef_SpaceOccOrgID () const
      {
        return this->ClassRef_SpaceOccOrgID_;
      }

      SimSpaceOccupant::ClassRef_SpaceOccOrgID_optional& SimSpaceOccupant::
      ClassRef_SpaceOccOrgID ()
      {
        return this->ClassRef_SpaceOccOrgID_;
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccOrgID (const ClassRef_SpaceOccOrgID_type& x)
      {
        this->ClassRef_SpaceOccOrgID_.set (x);
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccOrgID (const ClassRef_SpaceOccOrgID_optional& x)
      {
        this->ClassRef_SpaceOccOrgID_ = x;
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccOrgID (::std::auto_ptr< ClassRef_SpaceOccOrgID_type > x)
      {
        this->ClassRef_SpaceOccOrgID_.set (x);
      }

      const SimSpaceOccupant::ClassRef_SpaceOccSubOrgID_optional& SimSpaceOccupant::
      ClassRef_SpaceOccSubOrgID () const
      {
        return this->ClassRef_SpaceOccSubOrgID_;
      }

      SimSpaceOccupant::ClassRef_SpaceOccSubOrgID_optional& SimSpaceOccupant::
      ClassRef_SpaceOccSubOrgID ()
      {
        return this->ClassRef_SpaceOccSubOrgID_;
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccSubOrgID (const ClassRef_SpaceOccSubOrgID_type& x)
      {
        this->ClassRef_SpaceOccSubOrgID_.set (x);
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccSubOrgID (const ClassRef_SpaceOccSubOrgID_optional& x)
      {
        this->ClassRef_SpaceOccSubOrgID_ = x;
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccSubOrgID (::std::auto_ptr< ClassRef_SpaceOccSubOrgID_type > x)
      {
        this->ClassRef_SpaceOccSubOrgID_.set (x);
      }

      const SimSpaceOccupant::ClassRef_SpaceOccOrgBillingID_optional& SimSpaceOccupant::
      ClassRef_SpaceOccOrgBillingID () const
      {
        return this->ClassRef_SpaceOccOrgBillingID_;
      }

      SimSpaceOccupant::ClassRef_SpaceOccOrgBillingID_optional& SimSpaceOccupant::
      ClassRef_SpaceOccOrgBillingID ()
      {
        return this->ClassRef_SpaceOccOrgBillingID_;
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccOrgBillingID (const ClassRef_SpaceOccOrgBillingID_type& x)
      {
        this->ClassRef_SpaceOccOrgBillingID_.set (x);
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccOrgBillingID (const ClassRef_SpaceOccOrgBillingID_optional& x)
      {
        this->ClassRef_SpaceOccOrgBillingID_ = x;
      }

      void SimSpaceOccupant::
      ClassRef_SpaceOccOrgBillingID (::std::auto_ptr< ClassRef_SpaceOccOrgBillingID_type > x)
      {
        this->ClassRef_SpaceOccOrgBillingID_.set (x);
      }

      const SimSpaceOccupant::AssignedSpaces_optional& SimSpaceOccupant::
      AssignedSpaces () const
      {
        return this->AssignedSpaces_;
      }

      SimSpaceOccupant::AssignedSpaces_optional& SimSpaceOccupant::
      AssignedSpaces ()
      {
        return this->AssignedSpaces_;
      }

      void SimSpaceOccupant::
      AssignedSpaces (const AssignedSpaces_type& x)
      {
        this->AssignedSpaces_.set (x);
      }

      void SimSpaceOccupant::
      AssignedSpaces (const AssignedSpaces_optional& x)
      {
        this->AssignedSpaces_ = x;
      }

      void SimSpaceOccupant::
      AssignedSpaces (::std::auto_ptr< AssignedSpaces_type > x)
      {
        this->AssignedSpaces_.set (x);
      }

      const SimSpaceOccupant::PredefinedType_optional& SimSpaceOccupant::
      PredefinedType () const
      {
        return this->PredefinedType_;
      }

      SimSpaceOccupant::PredefinedType_optional& SimSpaceOccupant::
      PredefinedType ()
      {
        return this->PredefinedType_;
      }

      void SimSpaceOccupant::
      PredefinedType (const PredefinedType_type& x)
      {
        this->PredefinedType_.set (x);
      }

      void SimSpaceOccupant::
      PredefinedType (const PredefinedType_optional& x)
      {
        this->PredefinedType_ = x;
      }

      void SimSpaceOccupant::
      PredefinedType (::std::auto_ptr< PredefinedType_type > x)
      {
        this->PredefinedType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSpaceOccupant
      //

      SimSpaceOccupant::
      SimSpaceOccupant ()
      : ::schema::simxml::ResourcesGeneral::SimActor (),
        SpaceOccOrgAbbrev_ (this),
        SpaceOccOrgName_ (this),
        ClassRef_SpaceOccOrgID_ (this),
        ClassRef_SpaceOccSubOrgID_ (this),
        ClassRef_SpaceOccOrgBillingID_ (this),
        AssignedSpaces_ (this),
        PredefinedType_ (this)
      {
      }

      SimSpaceOccupant::
      SimSpaceOccupant (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimActor (RefId),
        SpaceOccOrgAbbrev_ (this),
        SpaceOccOrgName_ (this),
        ClassRef_SpaceOccOrgID_ (this),
        ClassRef_SpaceOccSubOrgID_ (this),
        ClassRef_SpaceOccOrgBillingID_ (this),
        AssignedSpaces_ (this),
        PredefinedType_ (this)
      {
      }

      SimSpaceOccupant::
      SimSpaceOccupant (const SimSpaceOccupant& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimActor (x, f, c),
        SpaceOccOrgAbbrev_ (x.SpaceOccOrgAbbrev_, f, this),
        SpaceOccOrgName_ (x.SpaceOccOrgName_, f, this),
        ClassRef_SpaceOccOrgID_ (x.ClassRef_SpaceOccOrgID_, f, this),
        ClassRef_SpaceOccSubOrgID_ (x.ClassRef_SpaceOccSubOrgID_, f, this),
        ClassRef_SpaceOccOrgBillingID_ (x.ClassRef_SpaceOccOrgBillingID_, f, this),
        AssignedSpaces_ (x.AssignedSpaces_, f, this),
        PredefinedType_ (x.PredefinedType_, f, this)
      {
      }

      SimSpaceOccupant::
      SimSpaceOccupant (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimActor (e, f | ::xml_schema::flags::base, c),
        SpaceOccOrgAbbrev_ (this),
        SpaceOccOrgName_ (this),
        ClassRef_SpaceOccOrgID_ (this),
        ClassRef_SpaceOccSubOrgID_ (this),
        ClassRef_SpaceOccOrgBillingID_ (this),
        AssignedSpaces_ (this),
        PredefinedType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSpaceOccupant::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimActor::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SpaceOccOrgAbbrev
          //
          if (n.name () == "SpaceOccOrgAbbrev" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceOccOrgAbbrev_type > r (
              SpaceOccOrgAbbrev_traits::create (i, f, this));

            if (!this->SpaceOccOrgAbbrev_)
            {
              this->SpaceOccOrgAbbrev_.set (r);
              continue;
            }
          }

          // SpaceOccOrgName
          //
          if (n.name () == "SpaceOccOrgName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceOccOrgName_type > r (
              SpaceOccOrgName_traits::create (i, f, this));

            if (!this->SpaceOccOrgName_)
            {
              this->SpaceOccOrgName_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceOccOrgID
          //
          if (n.name () == "ClassRef_SpaceOccOrgID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ClassRef_SpaceOccOrgID_type > r (
              ClassRef_SpaceOccOrgID_traits::create (i, f, this));

            if (!this->ClassRef_SpaceOccOrgID_)
            {
              this->ClassRef_SpaceOccOrgID_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceOccSubOrgID
          //
          if (n.name () == "ClassRef_SpaceOccSubOrgID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ClassRef_SpaceOccSubOrgID_type > r (
              ClassRef_SpaceOccSubOrgID_traits::create (i, f, this));

            if (!this->ClassRef_SpaceOccSubOrgID_)
            {
              this->ClassRef_SpaceOccSubOrgID_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceOccOrgBillingID
          //
          if (n.name () == "ClassRef_SpaceOccOrgBillingID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ClassRef_SpaceOccOrgBillingID_type > r (
              ClassRef_SpaceOccOrgBillingID_traits::create (i, f, this));

            if (!this->ClassRef_SpaceOccOrgBillingID_)
            {
              this->ClassRef_SpaceOccOrgBillingID_.set (r);
              continue;
            }
          }

          // AssignedSpaces
          //
          if (n.name () == "AssignedSpaces" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< AssignedSpaces_type > r (
              AssignedSpaces_traits::create (i, f, this));

            if (!this->AssignedSpaces_)
            {
              this->AssignedSpaces_.set (r);
              continue;
            }
          }

          // PredefinedType
          //
          if (n.name () == "PredefinedType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PredefinedType_type > r (
              PredefinedType_traits::create (i, f, this));

            if (!this->PredefinedType_)
            {
              this->PredefinedType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSpaceOccupant* SimSpaceOccupant::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSpaceOccupant (*this, f, c);
      }

      SimSpaceOccupant& SimSpaceOccupant::
      operator= (const SimSpaceOccupant& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimActor& > (*this) = x;
          this->SpaceOccOrgAbbrev_ = x.SpaceOccOrgAbbrev_;
          this->SpaceOccOrgName_ = x.SpaceOccOrgName_;
          this->ClassRef_SpaceOccOrgID_ = x.ClassRef_SpaceOccOrgID_;
          this->ClassRef_SpaceOccSubOrgID_ = x.ClassRef_SpaceOccSubOrgID_;
          this->ClassRef_SpaceOccOrgBillingID_ = x.ClassRef_SpaceOccOrgBillingID_;
          this->AssignedSpaces_ = x.AssignedSpaces_;
          this->PredefinedType_ = x.PredefinedType_;
        }

        return *this;
      }

      SimSpaceOccupant::
      ~SimSpaceOccupant ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

