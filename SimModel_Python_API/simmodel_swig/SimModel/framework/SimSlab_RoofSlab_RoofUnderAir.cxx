// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSlab_RoofSlab_RoofUnderAir.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSlab_RoofSlab_RoofUnderAir
      // 

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_SurfType_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_SurfType () const
      {
        return this->SimSlab_SurfType_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_SurfType_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_SurfType ()
      {
        return this->SimSlab_SurfType_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_SurfType (const SimSlab_SurfType_type& x)
      {
        this->SimSlab_SurfType_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_SurfType (const SimSlab_SurfType_optional& x)
      {
        this->SimSlab_SurfType_ = x;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_SurfType (::std::auto_ptr< SimSlab_SurfType_type > x)
      {
        this->SimSlab_SurfType_.set (x);
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_Vertex_1_120_X_Coord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_X_Coord () const
      {
        return this->SimSlab_Vertex_1_120_X_Coord_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_Vertex_1_120_X_Coord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_X_Coord ()
      {
        return this->SimSlab_Vertex_1_120_X_Coord_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_X_Coord (const SimSlab_Vertex_1_120_X_Coord_type& x)
      {
        this->SimSlab_Vertex_1_120_X_Coord_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_X_Coord (const SimSlab_Vertex_1_120_X_Coord_optional& x)
      {
        this->SimSlab_Vertex_1_120_X_Coord_ = x;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_X_Coord (::std::auto_ptr< SimSlab_Vertex_1_120_X_Coord_type > x)
      {
        this->SimSlab_Vertex_1_120_X_Coord_.set (x);
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_Vertex_1_120_Y_Coord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Y_Coord () const
      {
        return this->SimSlab_Vertex_1_120_Y_Coord_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_Vertex_1_120_Y_Coord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Y_Coord ()
      {
        return this->SimSlab_Vertex_1_120_Y_Coord_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Y_Coord (const SimSlab_Vertex_1_120_Y_Coord_type& x)
      {
        this->SimSlab_Vertex_1_120_Y_Coord_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Y_Coord (const SimSlab_Vertex_1_120_Y_Coord_optional& x)
      {
        this->SimSlab_Vertex_1_120_Y_Coord_ = x;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Y_Coord (::std::auto_ptr< SimSlab_Vertex_1_120_Y_Coord_type > x)
      {
        this->SimSlab_Vertex_1_120_Y_Coord_.set (x);
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_Vertex_1_120_Z_Coord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Z_Coord () const
      {
        return this->SimSlab_Vertex_1_120_Z_Coord_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_Vertex_1_120_Z_Coord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Z_Coord ()
      {
        return this->SimSlab_Vertex_1_120_Z_Coord_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Z_Coord (const SimSlab_Vertex_1_120_Z_Coord_type& x)
      {
        this->SimSlab_Vertex_1_120_Z_Coord_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Z_Coord (const SimSlab_Vertex_1_120_Z_Coord_optional& x)
      {
        this->SimSlab_Vertex_1_120_Z_Coord_ = x;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Vertex_1_120_Z_Coord (::std::auto_ptr< SimSlab_Vertex_1_120_Z_Coord_type > x)
      {
        this->SimSlab_Vertex_1_120_Z_Coord_.set (x);
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_AzimuthAng_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_AzimuthAng () const
      {
        return this->SimSlab_AzimuthAng_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_AzimuthAng_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_AzimuthAng ()
      {
        return this->SimSlab_AzimuthAng_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_AzimuthAng (const SimSlab_AzimuthAng_type& x)
      {
        this->SimSlab_AzimuthAng_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_AzimuthAng (const SimSlab_AzimuthAng_optional& x)
      {
        this->SimSlab_AzimuthAng_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_TiltAng_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_TiltAng () const
      {
        return this->SimSlab_TiltAng_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_TiltAng_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_TiltAng ()
      {
        return this->SimSlab_TiltAng_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_TiltAng (const SimSlab_TiltAng_type& x)
      {
        this->SimSlab_TiltAng_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_TiltAng (const SimSlab_TiltAng_optional& x)
      {
        this->SimSlab_TiltAng_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_StartXCoord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartXCoord () const
      {
        return this->SimSlab_StartXCoord_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_StartXCoord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartXCoord ()
      {
        return this->SimSlab_StartXCoord_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartXCoord (const SimSlab_StartXCoord_type& x)
      {
        this->SimSlab_StartXCoord_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartXCoord (const SimSlab_StartXCoord_optional& x)
      {
        this->SimSlab_StartXCoord_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_StartYCoord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartYCoord () const
      {
        return this->SimSlab_StartYCoord_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_StartYCoord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartYCoord ()
      {
        return this->SimSlab_StartYCoord_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartYCoord (const SimSlab_StartYCoord_type& x)
      {
        this->SimSlab_StartYCoord_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartYCoord (const SimSlab_StartYCoord_optional& x)
      {
        this->SimSlab_StartYCoord_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_StartZCoord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartZCoord () const
      {
        return this->SimSlab_StartZCoord_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_StartZCoord_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartZCoord ()
      {
        return this->SimSlab_StartZCoord_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartZCoord (const SimSlab_StartZCoord_type& x)
      {
        this->SimSlab_StartZCoord_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_StartZCoord (const SimSlab_StartZCoord_optional& x)
      {
        this->SimSlab_StartZCoord_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_Length_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Length () const
      {
        return this->SimSlab_Length_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_Length_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Length ()
      {
        return this->SimSlab_Length_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Length (const SimSlab_Length_type& x)
      {
        this->SimSlab_Length_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Length (const SimSlab_Length_optional& x)
      {
        this->SimSlab_Length_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::SimSlab_Width_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Width () const
      {
        return this->SimSlab_Width_;
      }

      SimSlab_RoofSlab_RoofUnderAir::SimSlab_Width_optional& SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Width ()
      {
        return this->SimSlab_Width_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Width (const SimSlab_Width_type& x)
      {
        this->SimSlab_Width_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_Width (const SimSlab_Width_optional& x)
      {
        this->SimSlab_Width_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCAgedEmittance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedEmittance () const
      {
        return this->T24CRRCAgedEmittance_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCAgedEmittance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedEmittance ()
      {
        return this->T24CRRCAgedEmittance_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedEmittance (const T24CRRCAgedEmittance_type& x)
      {
        this->T24CRRCAgedEmittance_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedEmittance (const T24CRRCAgedEmittance_optional& x)
      {
        this->T24CRRCAgedEmittance_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCAgedReflectance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedReflectance () const
      {
        return this->T24CRRCAgedReflectance_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCAgedReflectance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedReflectance ()
      {
        return this->T24CRRCAgedReflectance_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedReflectance (const T24CRRCAgedReflectance_type& x)
      {
        this->T24CRRCAgedReflectance_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedReflectance (const T24CRRCAgedReflectance_optional& x)
      {
        this->T24CRRCAgedReflectance_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCAgedSRI_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedSRI () const
      {
        return this->T24CRRCAgedSRI_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCAgedSRI_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedSRI ()
      {
        return this->T24CRRCAgedSRI_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedSRI (const T24CRRCAgedSRI_type& x)
      {
        this->T24CRRCAgedSRI_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCAgedSRI (const T24CRRCAgedSRI_optional& x)
      {
        this->T24CRRCAgedSRI_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCInitialEmittance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialEmittance () const
      {
        return this->T24CRRCInitialEmittance_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCInitialEmittance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialEmittance ()
      {
        return this->T24CRRCInitialEmittance_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialEmittance (const T24CRRCInitialEmittance_type& x)
      {
        this->T24CRRCInitialEmittance_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialEmittance (const T24CRRCInitialEmittance_optional& x)
      {
        this->T24CRRCInitialEmittance_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCInitialReflectance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialReflectance () const
      {
        return this->T24CRRCInitialReflectance_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCInitialReflectance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialReflectance ()
      {
        return this->T24CRRCInitialReflectance_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialReflectance (const T24CRRCInitialReflectance_type& x)
      {
        this->T24CRRCInitialReflectance_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialReflectance (const T24CRRCInitialReflectance_optional& x)
      {
        this->T24CRRCInitialReflectance_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCInitialSRI_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialSRI () const
      {
        return this->T24CRRCInitialSRI_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCInitialSRI_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialSRI ()
      {
        return this->T24CRRCInitialSRI_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialSRI (const T24CRRCInitialSRI_type& x)
      {
        this->T24CRRCInitialSRI_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCInitialSRI (const T24CRRCInitialSRI_optional& x)
      {
        this->T24CRRCInitialSRI_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24CRRCProductID_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCProductID () const
      {
        return this->T24CRRCProductID_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24CRRCProductID_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCProductID ()
      {
        return this->T24CRRCProductID_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCProductID (const T24CRRCProductID_type& x)
      {
        this->T24CRRCProductID_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCProductID (const T24CRRCProductID_optional& x)
      {
        this->T24CRRCProductID_ = x;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24CRRCProductID (::std::auto_ptr< T24CRRCProductID_type > x)
      {
        this->T24CRRCProductID_.set (x);
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24FieldAppliedCoating_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24FieldAppliedCoating () const
      {
        return this->T24FieldAppliedCoating_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24FieldAppliedCoating_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24FieldAppliedCoating ()
      {
        return this->T24FieldAppliedCoating_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24FieldAppliedCoating (const T24FieldAppliedCoating_type& x)
      {
        this->T24FieldAppliedCoating_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24FieldAppliedCoating (const T24FieldAppliedCoating_optional& x)
      {
        this->T24FieldAppliedCoating_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24RoofAgedSolarReflectance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedSolarReflectance () const
      {
        return this->T24RoofAgedSolarReflectance_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24RoofAgedSolarReflectance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedSolarReflectance ()
      {
        return this->T24RoofAgedSolarReflectance_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedSolarReflectance (const T24RoofAgedSolarReflectance_type& x)
      {
        this->T24RoofAgedSolarReflectance_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedSolarReflectance (const T24RoofAgedSolarReflectance_optional& x)
      {
        this->T24RoofAgedSolarReflectance_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24RoofAgedThermalEmittance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedThermalEmittance () const
      {
        return this->T24RoofAgedThermalEmittance_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24RoofAgedThermalEmittance_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedThermalEmittance ()
      {
        return this->T24RoofAgedThermalEmittance_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedThermalEmittance (const T24RoofAgedThermalEmittance_type& x)
      {
        this->T24RoofAgedThermalEmittance_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24RoofAgedThermalEmittance (const T24RoofAgedThermalEmittance_optional& x)
      {
        this->T24RoofAgedThermalEmittance_ = x;
      }

      const SimSlab_RoofSlab_RoofUnderAir::T24ConstructStatus3_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24ConstructStatus3 () const
      {
        return this->T24ConstructStatus3_;
      }

      SimSlab_RoofSlab_RoofUnderAir::T24ConstructStatus3_optional& SimSlab_RoofSlab_RoofUnderAir::
      T24ConstructStatus3 ()
      {
        return this->T24ConstructStatus3_;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24ConstructStatus3 (const T24ConstructStatus3_type& x)
      {
        this->T24ConstructStatus3_.set (x);
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24ConstructStatus3 (const T24ConstructStatus3_optional& x)
      {
        this->T24ConstructStatus3_ = x;
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      T24ConstructStatus3 (::std::auto_ptr< T24ConstructStatus3_type > x)
      {
        this->T24ConstructStatus3_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSlab_RoofSlab_RoofUnderAir
      //

      SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_RoofSlab_RoofUnderAir ()
      : ::schema::simxml::BuildingModel::SimSlab_RoofSlab (),
        SimSlab_SurfType_ (this),
        SimSlab_Vertex_1_120_X_Coord_ (this),
        SimSlab_Vertex_1_120_Y_Coord_ (this),
        SimSlab_Vertex_1_120_Z_Coord_ (this),
        SimSlab_AzimuthAng_ (this),
        SimSlab_TiltAng_ (this),
        SimSlab_StartXCoord_ (this),
        SimSlab_StartYCoord_ (this),
        SimSlab_StartZCoord_ (this),
        SimSlab_Length_ (this),
        SimSlab_Width_ (this),
        T24CRRCAgedEmittance_ (this),
        T24CRRCAgedReflectance_ (this),
        T24CRRCAgedSRI_ (this),
        T24CRRCInitialEmittance_ (this),
        T24CRRCInitialReflectance_ (this),
        T24CRRCInitialSRI_ (this),
        T24CRRCProductID_ (this),
        T24FieldAppliedCoating_ (this),
        T24RoofAgedSolarReflectance_ (this),
        T24RoofAgedThermalEmittance_ (this),
        T24ConstructStatus3_ (this)
      {
      }

      SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_RoofSlab_RoofUnderAir (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSlab_RoofSlab (RefId),
        SimSlab_SurfType_ (this),
        SimSlab_Vertex_1_120_X_Coord_ (this),
        SimSlab_Vertex_1_120_Y_Coord_ (this),
        SimSlab_Vertex_1_120_Z_Coord_ (this),
        SimSlab_AzimuthAng_ (this),
        SimSlab_TiltAng_ (this),
        SimSlab_StartXCoord_ (this),
        SimSlab_StartYCoord_ (this),
        SimSlab_StartZCoord_ (this),
        SimSlab_Length_ (this),
        SimSlab_Width_ (this),
        T24CRRCAgedEmittance_ (this),
        T24CRRCAgedReflectance_ (this),
        T24CRRCAgedSRI_ (this),
        T24CRRCInitialEmittance_ (this),
        T24CRRCInitialReflectance_ (this),
        T24CRRCInitialSRI_ (this),
        T24CRRCProductID_ (this),
        T24FieldAppliedCoating_ (this),
        T24RoofAgedSolarReflectance_ (this),
        T24RoofAgedThermalEmittance_ (this),
        T24ConstructStatus3_ (this)
      {
      }

      SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_RoofSlab_RoofUnderAir (const SimSlab_RoofSlab_RoofUnderAir& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSlab_RoofSlab (x, f, c),
        SimSlab_SurfType_ (x.SimSlab_SurfType_, f, this),
        SimSlab_Vertex_1_120_X_Coord_ (x.SimSlab_Vertex_1_120_X_Coord_, f, this),
        SimSlab_Vertex_1_120_Y_Coord_ (x.SimSlab_Vertex_1_120_Y_Coord_, f, this),
        SimSlab_Vertex_1_120_Z_Coord_ (x.SimSlab_Vertex_1_120_Z_Coord_, f, this),
        SimSlab_AzimuthAng_ (x.SimSlab_AzimuthAng_, f, this),
        SimSlab_TiltAng_ (x.SimSlab_TiltAng_, f, this),
        SimSlab_StartXCoord_ (x.SimSlab_StartXCoord_, f, this),
        SimSlab_StartYCoord_ (x.SimSlab_StartYCoord_, f, this),
        SimSlab_StartZCoord_ (x.SimSlab_StartZCoord_, f, this),
        SimSlab_Length_ (x.SimSlab_Length_, f, this),
        SimSlab_Width_ (x.SimSlab_Width_, f, this),
        T24CRRCAgedEmittance_ (x.T24CRRCAgedEmittance_, f, this),
        T24CRRCAgedReflectance_ (x.T24CRRCAgedReflectance_, f, this),
        T24CRRCAgedSRI_ (x.T24CRRCAgedSRI_, f, this),
        T24CRRCInitialEmittance_ (x.T24CRRCInitialEmittance_, f, this),
        T24CRRCInitialReflectance_ (x.T24CRRCInitialReflectance_, f, this),
        T24CRRCInitialSRI_ (x.T24CRRCInitialSRI_, f, this),
        T24CRRCProductID_ (x.T24CRRCProductID_, f, this),
        T24FieldAppliedCoating_ (x.T24FieldAppliedCoating_, f, this),
        T24RoofAgedSolarReflectance_ (x.T24RoofAgedSolarReflectance_, f, this),
        T24RoofAgedThermalEmittance_ (x.T24RoofAgedThermalEmittance_, f, this),
        T24ConstructStatus3_ (x.T24ConstructStatus3_, f, this)
      {
      }

      SimSlab_RoofSlab_RoofUnderAir::
      SimSlab_RoofSlab_RoofUnderAir (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSlab_RoofSlab (e, f | ::xml_schema::flags::base, c),
        SimSlab_SurfType_ (this),
        SimSlab_Vertex_1_120_X_Coord_ (this),
        SimSlab_Vertex_1_120_Y_Coord_ (this),
        SimSlab_Vertex_1_120_Z_Coord_ (this),
        SimSlab_AzimuthAng_ (this),
        SimSlab_TiltAng_ (this),
        SimSlab_StartXCoord_ (this),
        SimSlab_StartYCoord_ (this),
        SimSlab_StartZCoord_ (this),
        SimSlab_Length_ (this),
        SimSlab_Width_ (this),
        T24CRRCAgedEmittance_ (this),
        T24CRRCAgedReflectance_ (this),
        T24CRRCAgedSRI_ (this),
        T24CRRCInitialEmittance_ (this),
        T24CRRCInitialReflectance_ (this),
        T24CRRCInitialSRI_ (this),
        T24CRRCProductID_ (this),
        T24FieldAppliedCoating_ (this),
        T24RoofAgedSolarReflectance_ (this),
        T24RoofAgedThermalEmittance_ (this),
        T24ConstructStatus3_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSlab_RoofSlab_RoofUnderAir::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSlab_RoofSlab::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSlab_SurfType
          //
          if (n.name () == "SimSlab_SurfType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_SurfType_type > r (
              SimSlab_SurfType_traits::create (i, f, this));

            if (!this->SimSlab_SurfType_)
            {
              this->SimSlab_SurfType_.set (r);
              continue;
            }
          }

          // SimSlab_Vertex_1_120_X_Coord
          //
          if (n.name () == "SimSlab_Vertex_1_120_X_Coord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_Vertex_1_120_X_Coord_type > r (
              SimSlab_Vertex_1_120_X_Coord_traits::create (i, f, this));

            if (!this->SimSlab_Vertex_1_120_X_Coord_)
            {
              this->SimSlab_Vertex_1_120_X_Coord_.set (r);
              continue;
            }
          }

          // SimSlab_Vertex_1_120_Y_Coord
          //
          if (n.name () == "SimSlab_Vertex_1_120_Y_Coord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_Vertex_1_120_Y_Coord_type > r (
              SimSlab_Vertex_1_120_Y_Coord_traits::create (i, f, this));

            if (!this->SimSlab_Vertex_1_120_Y_Coord_)
            {
              this->SimSlab_Vertex_1_120_Y_Coord_.set (r);
              continue;
            }
          }

          // SimSlab_Vertex_1_120_Z_Coord
          //
          if (n.name () == "SimSlab_Vertex_1_120_Z_Coord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_Vertex_1_120_Z_Coord_type > r (
              SimSlab_Vertex_1_120_Z_Coord_traits::create (i, f, this));

            if (!this->SimSlab_Vertex_1_120_Z_Coord_)
            {
              this->SimSlab_Vertex_1_120_Z_Coord_.set (r);
              continue;
            }
          }

          // SimSlab_AzimuthAng
          //
          if (n.name () == "SimSlab_AzimuthAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_AzimuthAng_)
            {
              this->SimSlab_AzimuthAng_.set (SimSlab_AzimuthAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_TiltAng
          //
          if (n.name () == "SimSlab_TiltAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_TiltAng_)
            {
              this->SimSlab_TiltAng_.set (SimSlab_TiltAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_StartXCoord
          //
          if (n.name () == "SimSlab_StartXCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_StartXCoord_)
            {
              this->SimSlab_StartXCoord_.set (SimSlab_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_StartYCoord
          //
          if (n.name () == "SimSlab_StartYCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_StartYCoord_)
            {
              this->SimSlab_StartYCoord_.set (SimSlab_StartYCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_StartZCoord
          //
          if (n.name () == "SimSlab_StartZCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_StartZCoord_)
            {
              this->SimSlab_StartZCoord_.set (SimSlab_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_Length
          //
          if (n.name () == "SimSlab_Length" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_Length_)
            {
              this->SimSlab_Length_.set (SimSlab_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_Width
          //
          if (n.name () == "SimSlab_Width" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_Width_)
            {
              this->SimSlab_Width_.set (SimSlab_Width_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCAgedEmittance
          //
          if (n.name () == "T24CRRCAgedEmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CRRCAgedEmittance_)
            {
              this->T24CRRCAgedEmittance_.set (T24CRRCAgedEmittance_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCAgedReflectance
          //
          if (n.name () == "T24CRRCAgedReflectance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CRRCAgedReflectance_)
            {
              this->T24CRRCAgedReflectance_.set (T24CRRCAgedReflectance_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCAgedSRI
          //
          if (n.name () == "T24CRRCAgedSRI" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CRRCAgedSRI_)
            {
              this->T24CRRCAgedSRI_.set (T24CRRCAgedSRI_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCInitialEmittance
          //
          if (n.name () == "T24CRRCInitialEmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CRRCInitialEmittance_)
            {
              this->T24CRRCInitialEmittance_.set (T24CRRCInitialEmittance_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCInitialReflectance
          //
          if (n.name () == "T24CRRCInitialReflectance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CRRCInitialReflectance_)
            {
              this->T24CRRCInitialReflectance_.set (T24CRRCInitialReflectance_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCInitialSRI
          //
          if (n.name () == "T24CRRCInitialSRI" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24CRRCInitialSRI_)
            {
              this->T24CRRCInitialSRI_.set (T24CRRCInitialSRI_traits::create (i, f, this));
              continue;
            }
          }

          // T24CRRCProductID
          //
          if (n.name () == "T24CRRCProductID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24CRRCProductID_type > r (
              T24CRRCProductID_traits::create (i, f, this));

            if (!this->T24CRRCProductID_)
            {
              this->T24CRRCProductID_.set (r);
              continue;
            }
          }

          // T24FieldAppliedCoating
          //
          if (n.name () == "T24FieldAppliedCoating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24FieldAppliedCoating_)
            {
              this->T24FieldAppliedCoating_.set (T24FieldAppliedCoating_traits::create (i, f, this));
              continue;
            }
          }

          // T24RoofAgedSolarReflectance
          //
          if (n.name () == "T24RoofAgedSolarReflectance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24RoofAgedSolarReflectance_)
            {
              this->T24RoofAgedSolarReflectance_.set (T24RoofAgedSolarReflectance_traits::create (i, f, this));
              continue;
            }
          }

          // T24RoofAgedThermalEmittance
          //
          if (n.name () == "T24RoofAgedThermalEmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->T24RoofAgedThermalEmittance_)
            {
              this->T24RoofAgedThermalEmittance_.set (T24RoofAgedThermalEmittance_traits::create (i, f, this));
              continue;
            }
          }

          // T24ConstructStatus3
          //
          if (n.name () == "T24ConstructStatus3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ConstructStatus3_type > r (
              T24ConstructStatus3_traits::create (i, f, this));

            if (!this->T24ConstructStatus3_)
            {
              this->T24ConstructStatus3_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSlab_RoofSlab_RoofUnderAir* SimSlab_RoofSlab_RoofUnderAir::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSlab_RoofSlab_RoofUnderAir (*this, f, c);
      }

      SimSlab_RoofSlab_RoofUnderAir& SimSlab_RoofSlab_RoofUnderAir::
      operator= (const SimSlab_RoofSlab_RoofUnderAir& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSlab_RoofSlab& > (*this) = x;
          this->SimSlab_SurfType_ = x.SimSlab_SurfType_;
          this->SimSlab_Vertex_1_120_X_Coord_ = x.SimSlab_Vertex_1_120_X_Coord_;
          this->SimSlab_Vertex_1_120_Y_Coord_ = x.SimSlab_Vertex_1_120_Y_Coord_;
          this->SimSlab_Vertex_1_120_Z_Coord_ = x.SimSlab_Vertex_1_120_Z_Coord_;
          this->SimSlab_AzimuthAng_ = x.SimSlab_AzimuthAng_;
          this->SimSlab_TiltAng_ = x.SimSlab_TiltAng_;
          this->SimSlab_StartXCoord_ = x.SimSlab_StartXCoord_;
          this->SimSlab_StartYCoord_ = x.SimSlab_StartYCoord_;
          this->SimSlab_StartZCoord_ = x.SimSlab_StartZCoord_;
          this->SimSlab_Length_ = x.SimSlab_Length_;
          this->SimSlab_Width_ = x.SimSlab_Width_;
          this->T24CRRCAgedEmittance_ = x.T24CRRCAgedEmittance_;
          this->T24CRRCAgedReflectance_ = x.T24CRRCAgedReflectance_;
          this->T24CRRCAgedSRI_ = x.T24CRRCAgedSRI_;
          this->T24CRRCInitialEmittance_ = x.T24CRRCInitialEmittance_;
          this->T24CRRCInitialReflectance_ = x.T24CRRCInitialReflectance_;
          this->T24CRRCInitialSRI_ = x.T24CRRCInitialSRI_;
          this->T24CRRCProductID_ = x.T24CRRCProductID_;
          this->T24FieldAppliedCoating_ = x.T24FieldAppliedCoating_;
          this->T24RoofAgedSolarReflectance_ = x.T24RoofAgedSolarReflectance_;
          this->T24RoofAgedThermalEmittance_ = x.T24RoofAgedThermalEmittance_;
          this->T24ConstructStatus3_ = x.T24ConstructStatus3_;
        }

        return *this;
      }

      SimSlab_RoofSlab_RoofUnderAir::
      ~SimSlab_RoofSlab_RoofUnderAir ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

