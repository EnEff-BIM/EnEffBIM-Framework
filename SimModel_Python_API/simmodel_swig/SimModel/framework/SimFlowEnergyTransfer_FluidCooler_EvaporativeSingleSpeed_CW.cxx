// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW
      // 

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignAirFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRate_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignAirFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRate_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRate (const SimFlowEnergyTrans_DesignAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRate (const SimFlowEnergyTrans_DesignAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SupWaterStoTankName () const
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SupWaterStoTankName ()
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownConcentrationRatio () const
      {
        return this->SimFlowEnergyTrans_BlowdownConcentrationRatio_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownConcentrationRatio ()
      {
        return this->SimFlowEnergyTrans_BlowdownConcentrationRatio_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownConcentrationRatio (const SimFlowEnergyTrans_BlowdownConcentrationRatio_type& x)
      {
        this->SimFlowEnergyTrans_BlowdownConcentrationRatio_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownConcentrationRatio (const SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& x)
      {
        this->SimFlowEnergyTrans_BlowdownConcentrationRatio_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignAirFlowRateFanPower_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateFanPower () const
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignAirFlowRateFanPower_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateFanPower ()
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateFanPower (const SimFlowEnergyTrans_DesignAirFlowRateFanPower_type& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateFanPower (const SimFlowEnergyTrans_DesignAirFlowRateFanPower_optional& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignSprayWaterFlowRate () const
      {
        return this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignSprayWaterFlowRate ()
      {
        return this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignSprayWaterFlowRate (const SimFlowEnergyTrans_DesignSprayWaterFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignSprayWaterFlowRate (const SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio () const
      {
        return this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio ()
      {
        return this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio (const SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_type& x)
      {
        this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio (const SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional& x)
      {
        this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_StandardDesignCap_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_StandardDesignCap () const
      {
        return this->SimFlowEnergyTrans_StandardDesignCap_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_StandardDesignCap_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_StandardDesignCap ()
      {
        return this->SimFlowEnergyTrans_StandardDesignCap_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_StandardDesignCap (const SimFlowEnergyTrans_StandardDesignCap_type& x)
      {
        this->SimFlowEnergyTrans_StandardDesignCap_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_StandardDesignCap (const SimFlowEnergyTrans_StandardDesignCap_optional& x)
      {
        this->SimFlowEnergyTrans_StandardDesignCap_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue () const
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue ()
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue (const SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_type& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue (const SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_optional& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_UserSpecifiedDesignCap_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_UserSpecifiedDesignCap () const
      {
        return this->SimFlowEnergyTrans_UserSpecifiedDesignCap_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_UserSpecifiedDesignCap_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_UserSpecifiedDesignCap ()
      {
        return this->SimFlowEnergyTrans_UserSpecifiedDesignCap_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_UserSpecifiedDesignCap (const SimFlowEnergyTrans_UserSpecifiedDesignCap_type& x)
      {
        this->SimFlowEnergyTrans_UserSpecifiedDesignCap_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_UserSpecifiedDesignCap (const SimFlowEnergyTrans_UserSpecifiedDesignCap_optional& x)
      {
        this->SimFlowEnergyTrans_UserSpecifiedDesignCap_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp () const
      {
        return this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp ()
      {
        return this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp (const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp (const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_CapCntl_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_CapCntl () const
      {
        return this->SimFlowEnergyTrans_CapCntl_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_CapCntl_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_CapCntl ()
      {
        return this->SimFlowEnergyTrans_CapCntl_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_CapCntl (const SimFlowEnergyTrans_CapCntl_type& x)
      {
        this->SimFlowEnergyTrans_CapCntl_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_CapCntl (const SimFlowEnergyTrans_CapCntl_optional& x)
      {
        this->SimFlowEnergyTrans_CapCntl_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_CapCntl (::std::auto_ptr< SimFlowEnergyTrans_CapCntl_type > x)
      {
        this->SimFlowEnergyTrans_CapCntl_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_SizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SizingFactor () const
      {
        return this->SimFlowEnergyTrans_SizingFactor_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_SizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SizingFactor ()
      {
        return this->SimFlowEnergyTrans_SizingFactor_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SizingFactor (const SimFlowEnergyTrans_SizingFactor_type& x)
      {
        this->SimFlowEnergyTrans_SizingFactor_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_SizingFactor (const SimFlowEnergyTrans_SizingFactor_optional& x)
      {
        this->SimFlowEnergyTrans_SizingFactor_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_EvapLossMode_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossMode () const
      {
        return this->SimFlowEnergyTrans_EvapLossMode_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_EvapLossMode_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossMode ()
      {
        return this->SimFlowEnergyTrans_EvapLossMode_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossMode (const SimFlowEnergyTrans_EvapLossMode_type& x)
      {
        this->SimFlowEnergyTrans_EvapLossMode_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossMode (const SimFlowEnergyTrans_EvapLossMode_optional& x)
      {
        this->SimFlowEnergyTrans_EvapLossMode_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossMode (::std::auto_ptr< SimFlowEnergyTrans_EvapLossMode_type > x)
      {
        this->SimFlowEnergyTrans_EvapLossMode_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_EvapLossFactor_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossFactor () const
      {
        return this->SimFlowEnergyTrans_EvapLossFactor_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_EvapLossFactor_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossFactor ()
      {
        return this->SimFlowEnergyTrans_EvapLossFactor_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossFactor (const SimFlowEnergyTrans_EvapLossFactor_type& x)
      {
        this->SimFlowEnergyTrans_EvapLossFactor_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_EvapLossFactor (const SimFlowEnergyTrans_EvapLossFactor_optional& x)
      {
        this->SimFlowEnergyTrans_EvapLossFactor_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DriftLossPercent_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DriftLossPercent () const
      {
        return this->SimFlowEnergyTrans_DriftLossPercent_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_DriftLossPercent_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DriftLossPercent ()
      {
        return this->SimFlowEnergyTrans_DriftLossPercent_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DriftLossPercent (const SimFlowEnergyTrans_DriftLossPercent_type& x)
      {
        this->SimFlowEnergyTrans_DriftLossPercent_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_DriftLossPercent (const SimFlowEnergyTrans_DriftLossPercent_optional& x)
      {
        this->SimFlowEnergyTrans_DriftLossPercent_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_BlowdownCalcMode_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownCalcMode () const
      {
        return this->SimFlowEnergyTrans_BlowdownCalcMode_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_BlowdownCalcMode_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownCalcMode ()
      {
        return this->SimFlowEnergyTrans_BlowdownCalcMode_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownCalcMode (const SimFlowEnergyTrans_BlowdownCalcMode_type& x)
      {
        this->SimFlowEnergyTrans_BlowdownCalcMode_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownCalcMode (const SimFlowEnergyTrans_BlowdownCalcMode_optional& x)
      {
        this->SimFlowEnergyTrans_BlowdownCalcMode_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownCalcMode (::std::auto_ptr< SimFlowEnergyTrans_BlowdownCalcMode_type > x)
      {
        this->SimFlowEnergyTrans_BlowdownCalcMode_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName () const
      {
        return this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName ()
      {
        return this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName (const SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type& x)
      {
        this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName (const SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName (::std::auto_ptr< SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type > x)
      {
        this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW
      //

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (),
        SimFlowEnergyTrans_DesignAirFlowRate_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (this),
        SimFlowEnergyTrans_DesignAirFlowRateFanPower_ (this),
        SimFlowEnergyTrans_DesignSprayWaterFlowRate_ (this),
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_ (this),
        SimFlowEnergyTrans_StandardDesignCap_ (this),
        SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_UserSpecifiedDesignCap_ (this),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (this),
        SimFlowEnergyTrans_CapCntl_ (this),
        SimFlowEnergyTrans_SizingFactor_ (this),
        SimFlowEnergyTrans_EvapLossMode_ (this),
        SimFlowEnergyTrans_EvapLossFactor_ (this),
        SimFlowEnergyTrans_DriftLossPercent_ (this),
        SimFlowEnergyTrans_BlowdownCalcMode_ (this),
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (RefId),
        SimFlowEnergyTrans_DesignAirFlowRate_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (this),
        SimFlowEnergyTrans_DesignAirFlowRateFanPower_ (this),
        SimFlowEnergyTrans_DesignSprayWaterFlowRate_ (this),
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_ (this),
        SimFlowEnergyTrans_StandardDesignCap_ (this),
        SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_UserSpecifiedDesignCap_ (this),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (this),
        SimFlowEnergyTrans_CapCntl_ (this),
        SimFlowEnergyTrans_SizingFactor_ (this),
        SimFlowEnergyTrans_EvapLossMode_ (this),
        SimFlowEnergyTrans_EvapLossFactor_ (this),
        SimFlowEnergyTrans_DriftLossPercent_ (this),
        SimFlowEnergyTrans_BlowdownCalcMode_ (this),
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW& x,
                                                                   ::xml_schema::flags f,
                                                                   ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (x, f, c),
        SimFlowEnergyTrans_DesignAirFlowRate_ (x.SimFlowEnergyTrans_DesignAirFlowRate_, f, this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (x.SimFlowEnergyTrans_SupWaterStoTankName_, f, this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (x.SimFlowEnergyTrans_BlowdownConcentrationRatio_, f, this),
        SimFlowEnergyTrans_DesignAirFlowRateFanPower_ (x.SimFlowEnergyTrans_DesignAirFlowRateFanPower_, f, this),
        SimFlowEnergyTrans_DesignSprayWaterFlowRate_ (x.SimFlowEnergyTrans_DesignSprayWaterFlowRate_, f, this),
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_ (x.SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_, f, this),
        SimFlowEnergyTrans_StandardDesignCap_ (x.SimFlowEnergyTrans_StandardDesignCap_, f, this),
        SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_ (x.SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_, f, this),
        SimFlowEnergyTrans_UserSpecifiedDesignCap_ (x.SimFlowEnergyTrans_UserSpecifiedDesignCap_, f, this),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (x.SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_, f, this),
        SimFlowEnergyTrans_CapCntl_ (x.SimFlowEnergyTrans_CapCntl_, f, this),
        SimFlowEnergyTrans_SizingFactor_ (x.SimFlowEnergyTrans_SizingFactor_, f, this),
        SimFlowEnergyTrans_EvapLossMode_ (x.SimFlowEnergyTrans_EvapLossMode_, f, this),
        SimFlowEnergyTrans_EvapLossFactor_ (x.SimFlowEnergyTrans_EvapLossFactor_, f, this),
        SimFlowEnergyTrans_DriftLossPercent_ (x.SimFlowEnergyTrans_DriftLossPercent_, f, this),
        SimFlowEnergyTrans_BlowdownCalcMode_ (x.SimFlowEnergyTrans_BlowdownCalcMode_, f, this),
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_ (x.SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_, f, this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW (const ::xercesc::DOMElement& e,
                                                                   ::xml_schema::flags f,
                                                                   ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_DesignAirFlowRate_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (this),
        SimFlowEnergyTrans_DesignAirFlowRateFanPower_ (this),
        SimFlowEnergyTrans_DesignSprayWaterFlowRate_ (this),
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_ (this),
        SimFlowEnergyTrans_StandardDesignCap_ (this),
        SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_UserSpecifiedDesignCap_ (this),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (this),
        SimFlowEnergyTrans_CapCntl_ (this),
        SimFlowEnergyTrans_SizingFactor_ (this),
        SimFlowEnergyTrans_EvapLossMode_ (this),
        SimFlowEnergyTrans_EvapLossFactor_ (this),
        SimFlowEnergyTrans_DriftLossPercent_ (this),
        SimFlowEnergyTrans_BlowdownCalcMode_ (this),
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_DesignAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_DesignAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignAirFlowRate_)
            {
              this->SimFlowEnergyTrans_DesignAirFlowRate_.set (SimFlowEnergyTrans_DesignAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SupWaterStoTankName
          //
          if (n.name () == "SimFlowEnergyTrans_SupWaterStoTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > r (
              SimFlowEnergyTrans_SupWaterStoTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupWaterStoTankName_)
            {
              this->SimFlowEnergyTrans_SupWaterStoTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_BlowdownConcentrationRatio
          //
          if (n.name () == "SimFlowEnergyTrans_BlowdownConcentrationRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BlowdownConcentrationRatio_)
            {
              this->SimFlowEnergyTrans_BlowdownConcentrationRatio_.set (SimFlowEnergyTrans_BlowdownConcentrationRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignAirFlowRateFanPower
          //
          if (n.name () == "SimFlowEnergyTrans_DesignAirFlowRateFanPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_)
            {
              this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_.set (SimFlowEnergyTrans_DesignAirFlowRateFanPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignSprayWaterFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_DesignSprayWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_)
            {
              this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_.set (SimFlowEnergyTrans_DesignSprayWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio
          //
          if (n.name () == "SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_)
            {
              this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_.set (SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_StandardDesignCap
          //
          if (n.name () == "SimFlowEnergyTrans_StandardDesignCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_StandardDesignCap_)
            {
              this->SimFlowEnergyTrans_StandardDesignCap_.set (SimFlowEnergyTrans_StandardDesignCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue
          //
          if (n.name () == "SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_)
            {
              this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_.set (SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_UserSpecifiedDesignCap
          //
          if (n.name () == "SimFlowEnergyTrans_UserSpecifiedDesignCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_UserSpecifiedDesignCap_)
            {
              this->SimFlowEnergyTrans_UserSpecifiedDesignCap_.set (SimFlowEnergyTrans_UserSpecifiedDesignCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignEnterAirWetbulbTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignEnterAirWetbulbTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_)
            {
              this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_.set (SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CapCntl
          //
          if (n.name () == "SimFlowEnergyTrans_CapCntl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CapCntl_type > r (
              SimFlowEnergyTrans_CapCntl_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CapCntl_)
            {
              this->SimFlowEnergyTrans_CapCntl_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SizingFactor
          //
          if (n.name () == "SimFlowEnergyTrans_SizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SizingFactor_)
            {
              this->SimFlowEnergyTrans_SizingFactor_.set (SimFlowEnergyTrans_SizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_EvapLossMode
          //
          if (n.name () == "SimFlowEnergyTrans_EvapLossMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EvapLossMode_type > r (
              SimFlowEnergyTrans_EvapLossMode_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EvapLossMode_)
            {
              this->SimFlowEnergyTrans_EvapLossMode_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EvapLossFactor
          //
          if (n.name () == "SimFlowEnergyTrans_EvapLossFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_EvapLossFactor_)
            {
              this->SimFlowEnergyTrans_EvapLossFactor_.set (SimFlowEnergyTrans_EvapLossFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DriftLossPercent
          //
          if (n.name () == "SimFlowEnergyTrans_DriftLossPercent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DriftLossPercent_)
            {
              this->SimFlowEnergyTrans_DriftLossPercent_.set (SimFlowEnergyTrans_DriftLossPercent_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BlowdownCalcMode
          //
          if (n.name () == "SimFlowEnergyTrans_BlowdownCalcMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_BlowdownCalcMode_type > r (
              SimFlowEnergyTrans_BlowdownCalcMode_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_BlowdownCalcMode_)
            {
              this->SimFlowEnergyTrans_BlowdownCalcMode_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type > r (
              SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_)
            {
              this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW* SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW (*this, f, c);
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW& SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      operator= (const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler& > (*this) = x;
          this->SimFlowEnergyTrans_DesignAirFlowRate_ = x.SimFlowEnergyTrans_DesignAirFlowRate_;
          this->SimFlowEnergyTrans_SupWaterStoTankName_ = x.SimFlowEnergyTrans_SupWaterStoTankName_;
          this->SimFlowEnergyTrans_BlowdownConcentrationRatio_ = x.SimFlowEnergyTrans_BlowdownConcentrationRatio_;
          this->SimFlowEnergyTrans_DesignAirFlowRateFanPower_ = x.SimFlowEnergyTrans_DesignAirFlowRateFanPower_;
          this->SimFlowEnergyTrans_DesignSprayWaterFlowRate_ = x.SimFlowEnergyTrans_DesignSprayWaterFlowRate_;
          this->SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_ = x.SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_;
          this->SimFlowEnergyTrans_StandardDesignCap_ = x.SimFlowEnergyTrans_StandardDesignCap_;
          this->SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_ = x.SimFlowEnergyTrans_DesignAirFlowRateU_factorTimesAreaValue_;
          this->SimFlowEnergyTrans_UserSpecifiedDesignCap_ = x.SimFlowEnergyTrans_UserSpecifiedDesignCap_;
          this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ = x.SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
          this->SimFlowEnergyTrans_CapCntl_ = x.SimFlowEnergyTrans_CapCntl_;
          this->SimFlowEnergyTrans_SizingFactor_ = x.SimFlowEnergyTrans_SizingFactor_;
          this->SimFlowEnergyTrans_EvapLossMode_ = x.SimFlowEnergyTrans_EvapLossMode_;
          this->SimFlowEnergyTrans_EvapLossFactor_ = x.SimFlowEnergyTrans_EvapLossFactor_;
          this->SimFlowEnergyTrans_DriftLossPercent_ = x.SimFlowEnergyTrans_DriftLossPercent_;
          this->SimFlowEnergyTrans_BlowdownCalcMode_ = x.SimFlowEnergyTrans_BlowdownCalcMode_;
          this->SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_ = x.SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW::
      ~SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

