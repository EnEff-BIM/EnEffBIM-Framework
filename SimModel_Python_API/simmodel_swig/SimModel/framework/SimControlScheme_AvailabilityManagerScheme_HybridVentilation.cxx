// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimControlScheme_AvailabilityManagerScheme_HybridVentilation.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_AvailabilityManagerScheme_HybridVentilation
      // 

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_Name_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_Name () const
      {
        return this->SimCntrlSchm_Name_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_Name_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_Name ()
      {
        return this->SimCntrlSchm_Name_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_Name (const SimCntrlSchm_Name_type& x)
      {
        this->SimCntrlSchm_Name_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_Name (const SimCntrlSchm_Name_optional& x)
      {
        this->SimCntrlSchm_Name_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_Name (::std::auto_ptr< SimCntrlSchm_Name_type > x)
      {
        this->SimCntrlSchm_Name_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_HVACAirLoopName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_HVACAirLoopName () const
      {
        return this->SimCntrlSchm_HVACAirLoopName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_HVACAirLoopName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_HVACAirLoopName ()
      {
        return this->SimCntrlSchm_HVACAirLoopName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_HVACAirLoopName (const SimCntrlSchm_HVACAirLoopName_type& x)
      {
        this->SimCntrlSchm_HVACAirLoopName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_HVACAirLoopName (const SimCntrlSchm_HVACAirLoopName_optional& x)
      {
        this->SimCntrlSchm_HVACAirLoopName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_HVACAirLoopName (::std::auto_ptr< SimCntrlSchm_HVACAirLoopName_type > x)
      {
        this->SimCntrlSchm_HVACAirLoopName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_CntlledZoneName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_CntlledZoneName () const
      {
        return this->SimCntrlSchm_CntlledZoneName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_CntlledZoneName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_CntlledZoneName ()
      {
        return this->SimCntrlSchm_CntlledZoneName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_CntlledZoneName (const SimCntrlSchm_CntlledZoneName_type& x)
      {
        this->SimCntrlSchm_CntlledZoneName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_CntlledZoneName (const SimCntrlSchm_CntlledZoneName_optional& x)
      {
        this->SimCntrlSchm_CntlledZoneName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_CntlledZoneName (::std::auto_ptr< SimCntrlSchm_CntlledZoneName_type > x)
      {
        this->SimCntrlSchm_CntlledZoneName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_VentCntlModeSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_VentCntlModeSchedName () const
      {
        return this->SimCntrlSchm_VentCntlModeSchedName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_VentCntlModeSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_VentCntlModeSchedName ()
      {
        return this->SimCntrlSchm_VentCntlModeSchedName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_VentCntlModeSchedName (const SimCntrlSchm_VentCntlModeSchedName_type& x)
      {
        this->SimCntrlSchm_VentCntlModeSchedName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_VentCntlModeSchedName (const SimCntrlSchm_VentCntlModeSchedName_optional& x)
      {
        this->SimCntrlSchm_VentCntlModeSchedName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_VentCntlModeSchedName (::std::auto_ptr< SimCntrlSchm_VentCntlModeSchedName_type > x)
      {
        this->SimCntrlSchm_VentCntlModeSchedName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_UseWeatherFileRaindics_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_UseWeatherFileRaindics () const
      {
        return this->SimCntrlSchm_UseWeatherFileRaindics_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_UseWeatherFileRaindics_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_UseWeatherFileRaindics ()
      {
        return this->SimCntrlSchm_UseWeatherFileRaindics_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_UseWeatherFileRaindics (const SimCntrlSchm_UseWeatherFileRaindics_type& x)
      {
        this->SimCntrlSchm_UseWeatherFileRaindics_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_UseWeatherFileRaindics (const SimCntrlSchm_UseWeatherFileRaindics_optional& x)
      {
        this->SimCntrlSchm_UseWeatherFileRaindics_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_UseWeatherFileRaindics (::std::auto_ptr< SimCntrlSchm_UseWeatherFileRaindics_type > x)
      {
        this->SimCntrlSchm_UseWeatherFileRaindics_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxWindSpd_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxWindSpd () const
      {
        return this->SimCntrlSchm_MaxWindSpd_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxWindSpd_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxWindSpd ()
      {
        return this->SimCntrlSchm_MaxWindSpd_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxWindSpd (const SimCntrlSchm_MaxWindSpd_type& x)
      {
        this->SimCntrlSchm_MaxWindSpd_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxWindSpd (const SimCntrlSchm_MaxWindSpd_optional& x)
      {
        this->SimCntrlSchm_MaxWindSpd_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrTemp_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrTemp () const
      {
        return this->SimCntrlSchm_MinOutdrTemp_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrTemp_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrTemp ()
      {
        return this->SimCntrlSchm_MinOutdrTemp_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrTemp (const SimCntrlSchm_MinOutdrTemp_type& x)
      {
        this->SimCntrlSchm_MinOutdrTemp_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrTemp (const SimCntrlSchm_MinOutdrTemp_optional& x)
      {
        this->SimCntrlSchm_MinOutdrTemp_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxOutdrTemp_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrTemp () const
      {
        return this->SimCntrlSchm_MaxOutdrTemp_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxOutdrTemp_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrTemp ()
      {
        return this->SimCntrlSchm_MaxOutdrTemp_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrTemp (const SimCntrlSchm_MaxOutdrTemp_type& x)
      {
        this->SimCntrlSchm_MaxOutdrTemp_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrTemp (const SimCntrlSchm_MaxOutdrTemp_optional& x)
      {
        this->SimCntrlSchm_MaxOutdrTemp_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrEnthalpy_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrEnthalpy () const
      {
        return this->SimCntrlSchm_MinOutdrEnthalpy_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrEnthalpy_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrEnthalpy ()
      {
        return this->SimCntrlSchm_MinOutdrEnthalpy_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrEnthalpy (const SimCntrlSchm_MinOutdrEnthalpy_type& x)
      {
        this->SimCntrlSchm_MinOutdrEnthalpy_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrEnthalpy (const SimCntrlSchm_MinOutdrEnthalpy_optional& x)
      {
        this->SimCntrlSchm_MinOutdrEnthalpy_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxOutdrEnthalpy_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrEnthalpy () const
      {
        return this->SimCntrlSchm_MaxOutdrEnthalpy_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxOutdrEnthalpy_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrEnthalpy ()
      {
        return this->SimCntrlSchm_MaxOutdrEnthalpy_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrEnthalpy (const SimCntrlSchm_MaxOutdrEnthalpy_type& x)
      {
        this->SimCntrlSchm_MaxOutdrEnthalpy_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrEnthalpy (const SimCntrlSchm_MaxOutdrEnthalpy_optional& x)
      {
        this->SimCntrlSchm_MaxOutdrEnthalpy_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrDewpoint_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrDewpoint () const
      {
        return this->SimCntrlSchm_MinOutdrDewpoint_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrDewpoint_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrDewpoint ()
      {
        return this->SimCntrlSchm_MinOutdrDewpoint_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrDewpoint (const SimCntrlSchm_MinOutdrDewpoint_type& x)
      {
        this->SimCntrlSchm_MinOutdrDewpoint_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrDewpoint (const SimCntrlSchm_MinOutdrDewpoint_optional& x)
      {
        this->SimCntrlSchm_MinOutdrDewpoint_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxOutdrDewpoint_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrDewpoint () const
      {
        return this->SimCntrlSchm_MaxOutdrDewpoint_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MaxOutdrDewpoint_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrDewpoint ()
      {
        return this->SimCntrlSchm_MaxOutdrDewpoint_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrDewpoint (const SimCntrlSchm_MaxOutdrDewpoint_type& x)
      {
        this->SimCntrlSchm_MaxOutdrDewpoint_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MaxOutdrDewpoint (const SimCntrlSchm_MaxOutdrDewpoint_optional& x)
      {
        this->SimCntrlSchm_MaxOutdrDewpoint_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrVentAirSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrVentAirSchedName () const
      {
        return this->SimCntrlSchm_MinOutdrVentAirSchedName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_MinOutdrVentAirSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrVentAirSchedName ()
      {
        return this->SimCntrlSchm_MinOutdrVentAirSchedName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrVentAirSchedName (const SimCntrlSchm_MinOutdrVentAirSchedName_type& x)
      {
        this->SimCntrlSchm_MinOutdrVentAirSchedName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrVentAirSchedName (const SimCntrlSchm_MinOutdrVentAirSchedName_optional& x)
      {
        this->SimCntrlSchm_MinOutdrVentAirSchedName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_MinOutdrVentAirSchedName (::std::auto_ptr< SimCntrlSchm_MinOutdrVentAirSchedName_type > x)
      {
        this->SimCntrlSchm_MinOutdrVentAirSchedName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_OpngFactorFuncWindSpeedCurveName () const
      {
        return this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_OpngFactorFuncWindSpeedCurveName ()
      {
        return this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_OpngFactorFuncWindSpeedCurveName (const SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_type& x)
      {
        this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_OpngFactorFuncWindSpeedCurveName (const SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_optional& x)
      {
        this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_OpngFactorFuncWindSpeedCurveName (::std::auto_ptr< SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_type > x)
      {
        this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_AirflowNetCntlTypeSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_AirflowNetCntlTypeSchedName () const
      {
        return this->SimCntrlSchm_AirflowNetCntlTypeSchedName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_AirflowNetCntlTypeSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_AirflowNetCntlTypeSchedName ()
      {
        return this->SimCntrlSchm_AirflowNetCntlTypeSchedName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_AirflowNetCntlTypeSchedName (const SimCntrlSchm_AirflowNetCntlTypeSchedName_type& x)
      {
        this->SimCntrlSchm_AirflowNetCntlTypeSchedName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_AirflowNetCntlTypeSchedName (const SimCntrlSchm_AirflowNetCntlTypeSchedName_optional& x)
      {
        this->SimCntrlSchm_AirflowNetCntlTypeSchedName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_AirflowNetCntlTypeSchedName (::std::auto_ptr< SimCntrlSchm_AirflowNetCntlTypeSchedName_type > x)
      {
        this->SimCntrlSchm_AirflowNetCntlTypeSchedName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_SimpleAirflowCntlTypeSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_SimpleAirflowCntlTypeSchedName () const
      {
        return this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_SimpleAirflowCntlTypeSchedName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_SimpleAirflowCntlTypeSchedName ()
      {
        return this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_SimpleAirflowCntlTypeSchedName (const SimCntrlSchm_SimpleAirflowCntlTypeSchedName_type& x)
      {
        this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_SimpleAirflowCntlTypeSchedName (const SimCntrlSchm_SimpleAirflowCntlTypeSchedName_optional& x)
      {
        this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_SimpleAirflowCntlTypeSchedName (::std::auto_ptr< SimCntrlSchm_SimpleAirflowCntlTypeSchedName_type > x)
      {
        this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_ZoneVentObjectName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_ZoneVentObjectName () const
      {
        return this->SimCntrlSchm_ZoneVentObjectName_;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::SimCntrlSchm_ZoneVentObjectName_optional& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_ZoneVentObjectName ()
      {
        return this->SimCntrlSchm_ZoneVentObjectName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_ZoneVentObjectName (const SimCntrlSchm_ZoneVentObjectName_type& x)
      {
        this->SimCntrlSchm_ZoneVentObjectName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_ZoneVentObjectName (const SimCntrlSchm_ZoneVentObjectName_optional& x)
      {
        this->SimCntrlSchm_ZoneVentObjectName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimCntrlSchm_ZoneVentObjectName (::std::auto_ptr< SimCntrlSchm_ZoneVentObjectName_type > x)
      {
        this->SimCntrlSchm_ZoneVentObjectName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_AvailabilityManagerScheme_HybridVentilation
      //

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation ()
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (),
        SimCntrlSchm_Name_ (this),
        SimCntrlSchm_HVACAirLoopName_ (this),
        SimCntrlSchm_CntlledZoneName_ (this),
        SimCntrlSchm_VentCntlModeSchedName_ (this),
        SimCntrlSchm_UseWeatherFileRaindics_ (this),
        SimCntrlSchm_MaxWindSpd_ (this),
        SimCntrlSchm_MinOutdrTemp_ (this),
        SimCntrlSchm_MaxOutdrTemp_ (this),
        SimCntrlSchm_MinOutdrEnthalpy_ (this),
        SimCntrlSchm_MaxOutdrEnthalpy_ (this),
        SimCntrlSchm_MinOutdrDewpoint_ (this),
        SimCntrlSchm_MaxOutdrDewpoint_ (this),
        SimCntrlSchm_MinOutdrVentAirSchedName_ (this),
        SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_ (this),
        SimCntrlSchm_AirflowNetCntlTypeSchedName_ (this),
        SimCntrlSchm_SimpleAirflowCntlTypeSchedName_ (this),
        SimCntrlSchm_ZoneVentObjectName_ (this)
      {
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (RefId),
        SimCntrlSchm_Name_ (this),
        SimCntrlSchm_HVACAirLoopName_ (this),
        SimCntrlSchm_CntlledZoneName_ (this),
        SimCntrlSchm_VentCntlModeSchedName_ (this),
        SimCntrlSchm_UseWeatherFileRaindics_ (this),
        SimCntrlSchm_MaxWindSpd_ (this),
        SimCntrlSchm_MinOutdrTemp_ (this),
        SimCntrlSchm_MaxOutdrTemp_ (this),
        SimCntrlSchm_MinOutdrEnthalpy_ (this),
        SimCntrlSchm_MaxOutdrEnthalpy_ (this),
        SimCntrlSchm_MinOutdrDewpoint_ (this),
        SimCntrlSchm_MaxOutdrDewpoint_ (this),
        SimCntrlSchm_MinOutdrVentAirSchedName_ (this),
        SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_ (this),
        SimCntrlSchm_AirflowNetCntlTypeSchedName_ (this),
        SimCntrlSchm_SimpleAirflowCntlTypeSchedName_ (this),
        SimCntrlSchm_ZoneVentObjectName_ (this)
      {
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation (const SimControlScheme_AvailabilityManagerScheme_HybridVentilation& x,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (x, f, c),
        SimCntrlSchm_Name_ (x.SimCntrlSchm_Name_, f, this),
        SimCntrlSchm_HVACAirLoopName_ (x.SimCntrlSchm_HVACAirLoopName_, f, this),
        SimCntrlSchm_CntlledZoneName_ (x.SimCntrlSchm_CntlledZoneName_, f, this),
        SimCntrlSchm_VentCntlModeSchedName_ (x.SimCntrlSchm_VentCntlModeSchedName_, f, this),
        SimCntrlSchm_UseWeatherFileRaindics_ (x.SimCntrlSchm_UseWeatherFileRaindics_, f, this),
        SimCntrlSchm_MaxWindSpd_ (x.SimCntrlSchm_MaxWindSpd_, f, this),
        SimCntrlSchm_MinOutdrTemp_ (x.SimCntrlSchm_MinOutdrTemp_, f, this),
        SimCntrlSchm_MaxOutdrTemp_ (x.SimCntrlSchm_MaxOutdrTemp_, f, this),
        SimCntrlSchm_MinOutdrEnthalpy_ (x.SimCntrlSchm_MinOutdrEnthalpy_, f, this),
        SimCntrlSchm_MaxOutdrEnthalpy_ (x.SimCntrlSchm_MaxOutdrEnthalpy_, f, this),
        SimCntrlSchm_MinOutdrDewpoint_ (x.SimCntrlSchm_MinOutdrDewpoint_, f, this),
        SimCntrlSchm_MaxOutdrDewpoint_ (x.SimCntrlSchm_MaxOutdrDewpoint_, f, this),
        SimCntrlSchm_MinOutdrVentAirSchedName_ (x.SimCntrlSchm_MinOutdrVentAirSchedName_, f, this),
        SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_ (x.SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_, f, this),
        SimCntrlSchm_AirflowNetCntlTypeSchedName_ (x.SimCntrlSchm_AirflowNetCntlTypeSchedName_, f, this),
        SimCntrlSchm_SimpleAirflowCntlTypeSchedName_ (x.SimCntrlSchm_SimpleAirflowCntlTypeSchedName_, f, this),
        SimCntrlSchm_ZoneVentObjectName_ (x.SimCntrlSchm_ZoneVentObjectName_, f, this)
      {
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (e, f | ::xml_schema::flags::base, c),
        SimCntrlSchm_Name_ (this),
        SimCntrlSchm_HVACAirLoopName_ (this),
        SimCntrlSchm_CntlledZoneName_ (this),
        SimCntrlSchm_VentCntlModeSchedName_ (this),
        SimCntrlSchm_UseWeatherFileRaindics_ (this),
        SimCntrlSchm_MaxWindSpd_ (this),
        SimCntrlSchm_MinOutdrTemp_ (this),
        SimCntrlSchm_MaxOutdrTemp_ (this),
        SimCntrlSchm_MinOutdrEnthalpy_ (this),
        SimCntrlSchm_MaxOutdrEnthalpy_ (this),
        SimCntrlSchm_MinOutdrDewpoint_ (this),
        SimCntrlSchm_MaxOutdrDewpoint_ (this),
        SimCntrlSchm_MinOutdrVentAirSchedName_ (this),
        SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_ (this),
        SimCntrlSchm_AirflowNetCntlTypeSchedName_ (this),
        SimCntrlSchm_SimpleAirflowCntlTypeSchedName_ (this),
        SimCntrlSchm_ZoneVentObjectName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrlSchm_Name
          //
          if (n.name () == "SimCntrlSchm_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_Name_type > r (
              SimCntrlSchm_Name_traits::create (i, f, this));

            if (!this->SimCntrlSchm_Name_)
            {
              this->SimCntrlSchm_Name_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_HVACAirLoopName
          //
          if (n.name () == "SimCntrlSchm_HVACAirLoopName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_HVACAirLoopName_type > r (
              SimCntrlSchm_HVACAirLoopName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_HVACAirLoopName_)
            {
              this->SimCntrlSchm_HVACAirLoopName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_CntlledZoneName
          //
          if (n.name () == "SimCntrlSchm_CntlledZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_CntlledZoneName_type > r (
              SimCntrlSchm_CntlledZoneName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_CntlledZoneName_)
            {
              this->SimCntrlSchm_CntlledZoneName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_VentCntlModeSchedName
          //
          if (n.name () == "SimCntrlSchm_VentCntlModeSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_VentCntlModeSchedName_type > r (
              SimCntrlSchm_VentCntlModeSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_VentCntlModeSchedName_)
            {
              this->SimCntrlSchm_VentCntlModeSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_UseWeatherFileRaindics
          //
          if (n.name () == "SimCntrlSchm_UseWeatherFileRaindics" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_UseWeatherFileRaindics_type > r (
              SimCntrlSchm_UseWeatherFileRaindics_traits::create (i, f, this));

            if (!this->SimCntrlSchm_UseWeatherFileRaindics_)
            {
              this->SimCntrlSchm_UseWeatherFileRaindics_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_MaxWindSpd
          //
          if (n.name () == "SimCntrlSchm_MaxWindSpd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MaxWindSpd_)
            {
              this->SimCntrlSchm_MaxWindSpd_.set (SimCntrlSchm_MaxWindSpd_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MinOutdrTemp
          //
          if (n.name () == "SimCntrlSchm_MinOutdrTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MinOutdrTemp_)
            {
              this->SimCntrlSchm_MinOutdrTemp_.set (SimCntrlSchm_MinOutdrTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MaxOutdrTemp
          //
          if (n.name () == "SimCntrlSchm_MaxOutdrTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MaxOutdrTemp_)
            {
              this->SimCntrlSchm_MaxOutdrTemp_.set (SimCntrlSchm_MaxOutdrTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MinOutdrEnthalpy
          //
          if (n.name () == "SimCntrlSchm_MinOutdrEnthalpy" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MinOutdrEnthalpy_)
            {
              this->SimCntrlSchm_MinOutdrEnthalpy_.set (SimCntrlSchm_MinOutdrEnthalpy_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MaxOutdrEnthalpy
          //
          if (n.name () == "SimCntrlSchm_MaxOutdrEnthalpy" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MaxOutdrEnthalpy_)
            {
              this->SimCntrlSchm_MaxOutdrEnthalpy_.set (SimCntrlSchm_MaxOutdrEnthalpy_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MinOutdrDewpoint
          //
          if (n.name () == "SimCntrlSchm_MinOutdrDewpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MinOutdrDewpoint_)
            {
              this->SimCntrlSchm_MinOutdrDewpoint_.set (SimCntrlSchm_MinOutdrDewpoint_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MaxOutdrDewpoint
          //
          if (n.name () == "SimCntrlSchm_MaxOutdrDewpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MaxOutdrDewpoint_)
            {
              this->SimCntrlSchm_MaxOutdrDewpoint_.set (SimCntrlSchm_MaxOutdrDewpoint_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_MinOutdrVentAirSchedName
          //
          if (n.name () == "SimCntrlSchm_MinOutdrVentAirSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_MinOutdrVentAirSchedName_type > r (
              SimCntrlSchm_MinOutdrVentAirSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_MinOutdrVentAirSchedName_)
            {
              this->SimCntrlSchm_MinOutdrVentAirSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_OpngFactorFuncWindSpeedCurveName
          //
          if (n.name () == "SimCntrlSchm_OpngFactorFuncWindSpeedCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_type > r (
              SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_)
            {
              this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_AirflowNetCntlTypeSchedName
          //
          if (n.name () == "SimCntrlSchm_AirflowNetCntlTypeSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_AirflowNetCntlTypeSchedName_type > r (
              SimCntrlSchm_AirflowNetCntlTypeSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_AirflowNetCntlTypeSchedName_)
            {
              this->SimCntrlSchm_AirflowNetCntlTypeSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_SimpleAirflowCntlTypeSchedName
          //
          if (n.name () == "SimCntrlSchm_SimpleAirflowCntlTypeSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_SimpleAirflowCntlTypeSchedName_type > r (
              SimCntrlSchm_SimpleAirflowCntlTypeSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_)
            {
              this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_ZoneVentObjectName
          //
          if (n.name () == "SimCntrlSchm_ZoneVentObjectName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_ZoneVentObjectName_type > r (
              SimCntrlSchm_ZoneVentObjectName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_ZoneVentObjectName_)
            {
              this->SimCntrlSchm_ZoneVentObjectName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation* SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimControlScheme_AvailabilityManagerScheme_HybridVentilation (*this, f, c);
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation& SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      operator= (const SimControlScheme_AvailabilityManagerScheme_HybridVentilation& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme& > (*this) = x;
          this->SimCntrlSchm_Name_ = x.SimCntrlSchm_Name_;
          this->SimCntrlSchm_HVACAirLoopName_ = x.SimCntrlSchm_HVACAirLoopName_;
          this->SimCntrlSchm_CntlledZoneName_ = x.SimCntrlSchm_CntlledZoneName_;
          this->SimCntrlSchm_VentCntlModeSchedName_ = x.SimCntrlSchm_VentCntlModeSchedName_;
          this->SimCntrlSchm_UseWeatherFileRaindics_ = x.SimCntrlSchm_UseWeatherFileRaindics_;
          this->SimCntrlSchm_MaxWindSpd_ = x.SimCntrlSchm_MaxWindSpd_;
          this->SimCntrlSchm_MinOutdrTemp_ = x.SimCntrlSchm_MinOutdrTemp_;
          this->SimCntrlSchm_MaxOutdrTemp_ = x.SimCntrlSchm_MaxOutdrTemp_;
          this->SimCntrlSchm_MinOutdrEnthalpy_ = x.SimCntrlSchm_MinOutdrEnthalpy_;
          this->SimCntrlSchm_MaxOutdrEnthalpy_ = x.SimCntrlSchm_MaxOutdrEnthalpy_;
          this->SimCntrlSchm_MinOutdrDewpoint_ = x.SimCntrlSchm_MinOutdrDewpoint_;
          this->SimCntrlSchm_MaxOutdrDewpoint_ = x.SimCntrlSchm_MaxOutdrDewpoint_;
          this->SimCntrlSchm_MinOutdrVentAirSchedName_ = x.SimCntrlSchm_MinOutdrVentAirSchedName_;
          this->SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_ = x.SimCntrlSchm_OpngFactorFuncWindSpeedCurveName_;
          this->SimCntrlSchm_AirflowNetCntlTypeSchedName_ = x.SimCntrlSchm_AirflowNetCntlTypeSchedName_;
          this->SimCntrlSchm_SimpleAirflowCntlTypeSchedName_ = x.SimCntrlSchm_SimpleAirflowCntlTypeSchedName_;
          this->SimCntrlSchm_ZoneVentObjectName_ = x.SimCntrlSchm_ZoneVentObjectName_;
        }

        return *this;
      }

      SimControlScheme_AvailabilityManagerScheme_HybridVentilation::
      ~SimControlScheme_AvailabilityManagerScheme_HybridVentilation ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

