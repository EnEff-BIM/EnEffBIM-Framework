// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimArrayParams_ArrayParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimArrayParams_ArrayParams
      // 

      const SimArrayParams_ArrayParams::ArrayType_optional& SimArrayParams_ArrayParams::
      ArrayType () const
      {
        return this->ArrayType_;
      }

      SimArrayParams_ArrayParams::ArrayType_optional& SimArrayParams_ArrayParams::
      ArrayType ()
      {
        return this->ArrayType_;
      }

      void SimArrayParams_ArrayParams::
      ArrayType (const ArrayType_type& x)
      {
        this->ArrayType_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayType (const ArrayType_optional& x)
      {
        this->ArrayType_ = x;
      }

      void SimArrayParams_ArrayParams::
      ArrayType (::std::auto_ptr< ArrayType_type > x)
      {
        this->ArrayType_.set (x);
      }

      const SimArrayParams_ArrayParams::ArrayCount_optional& SimArrayParams_ArrayParams::
      ArrayCount () const
      {
        return this->ArrayCount_;
      }

      SimArrayParams_ArrayParams::ArrayCount_optional& SimArrayParams_ArrayParams::
      ArrayCount ()
      {
        return this->ArrayCount_;
      }

      void SimArrayParams_ArrayParams::
      ArrayCount (const ArrayCount_type& x)
      {
        this->ArrayCount_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayCount (const ArrayCount_optional& x)
      {
        this->ArrayCount_ = x;
      }

      const SimArrayParams_ArrayParams::ArrayElementHeight_optional& SimArrayParams_ArrayParams::
      ArrayElementHeight () const
      {
        return this->ArrayElementHeight_;
      }

      SimArrayParams_ArrayParams::ArrayElementHeight_optional& SimArrayParams_ArrayParams::
      ArrayElementHeight ()
      {
        return this->ArrayElementHeight_;
      }

      void SimArrayParams_ArrayParams::
      ArrayElementHeight (const ArrayElementHeight_type& x)
      {
        this->ArrayElementHeight_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayElementHeight (const ArrayElementHeight_optional& x)
      {
        this->ArrayElementHeight_ = x;
      }

      const SimArrayParams_ArrayParams::ArrayElementWidth_optional& SimArrayParams_ArrayParams::
      ArrayElementWidth () const
      {
        return this->ArrayElementWidth_;
      }

      SimArrayParams_ArrayParams::ArrayElementWidth_optional& SimArrayParams_ArrayParams::
      ArrayElementWidth ()
      {
        return this->ArrayElementWidth_;
      }

      void SimArrayParams_ArrayParams::
      ArrayElementWidth (const ArrayElementWidth_type& x)
      {
        this->ArrayElementWidth_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayElementWidth (const ArrayElementWidth_optional& x)
      {
        this->ArrayElementWidth_ = x;
      }

      const SimArrayParams_ArrayParams::ArrayTopElevation_optional& SimArrayParams_ArrayParams::
      ArrayTopElevation () const
      {
        return this->ArrayTopElevation_;
      }

      SimArrayParams_ArrayParams::ArrayTopElevation_optional& SimArrayParams_ArrayParams::
      ArrayTopElevation ()
      {
        return this->ArrayTopElevation_;
      }

      void SimArrayParams_ArrayParams::
      ArrayTopElevation (const ArrayTopElevation_type& x)
      {
        this->ArrayTopElevation_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayTopElevation (const ArrayTopElevation_optional& x)
      {
        this->ArrayTopElevation_ = x;
      }

      const SimArrayParams_ArrayParams::ArrayMinSpacing_optional& SimArrayParams_ArrayParams::
      ArrayMinSpacing () const
      {
        return this->ArrayMinSpacing_;
      }

      SimArrayParams_ArrayParams::ArrayMinSpacing_optional& SimArrayParams_ArrayParams::
      ArrayMinSpacing ()
      {
        return this->ArrayMinSpacing_;
      }

      void SimArrayParams_ArrayParams::
      ArrayMinSpacing (const ArrayMinSpacing_type& x)
      {
        this->ArrayMinSpacing_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayMinSpacing (const ArrayMinSpacing_optional& x)
      {
        this->ArrayMinSpacing_ = x;
      }

      const SimArrayParams_ArrayParams::ArrayActualSpacing_optional& SimArrayParams_ArrayParams::
      ArrayActualSpacing () const
      {
        return this->ArrayActualSpacing_;
      }

      SimArrayParams_ArrayParams::ArrayActualSpacing_optional& SimArrayParams_ArrayParams::
      ArrayActualSpacing ()
      {
        return this->ArrayActualSpacing_;
      }

      void SimArrayParams_ArrayParams::
      ArrayActualSpacing (const ArrayActualSpacing_type& x)
      {
        this->ArrayActualSpacing_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayActualSpacing (const ArrayActualSpacing_optional& x)
      {
        this->ArrayActualSpacing_ = x;
      }

      const SimArrayParams_ArrayParams::ArrayElementProfilePath_optional& SimArrayParams_ArrayParams::
      ArrayElementProfilePath () const
      {
        return this->ArrayElementProfilePath_;
      }

      SimArrayParams_ArrayParams::ArrayElementProfilePath_optional& SimArrayParams_ArrayParams::
      ArrayElementProfilePath ()
      {
        return this->ArrayElementProfilePath_;
      }

      void SimArrayParams_ArrayParams::
      ArrayElementProfilePath (const ArrayElementProfilePath_type& x)
      {
        this->ArrayElementProfilePath_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayElementProfilePath (const ArrayElementProfilePath_optional& x)
      {
        this->ArrayElementProfilePath_ = x;
      }

      void SimArrayParams_ArrayParams::
      ArrayElementProfilePath (::std::auto_ptr< ArrayElementProfilePath_type > x)
      {
        this->ArrayElementProfilePath_.set (x);
      }

      const SimArrayParams_ArrayParams::ArrayElements_optional& SimArrayParams_ArrayParams::
      ArrayElements () const
      {
        return this->ArrayElements_;
      }

      SimArrayParams_ArrayParams::ArrayElements_optional& SimArrayParams_ArrayParams::
      ArrayElements ()
      {
        return this->ArrayElements_;
      }

      void SimArrayParams_ArrayParams::
      ArrayElements (const ArrayElements_type& x)
      {
        this->ArrayElements_.set (x);
      }

      void SimArrayParams_ArrayParams::
      ArrayElements (const ArrayElements_optional& x)
      {
        this->ArrayElements_ = x;
      }

      void SimArrayParams_ArrayParams::
      ArrayElements (::std::auto_ptr< ArrayElements_type > x)
      {
        this->ArrayElements_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimArrayParams_ArrayParams
      //

      SimArrayParams_ArrayParams::
      SimArrayParams_ArrayParams ()
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (),
        ArrayType_ (this),
        ArrayCount_ (this),
        ArrayElementHeight_ (this),
        ArrayElementWidth_ (this),
        ArrayTopElevation_ (this),
        ArrayMinSpacing_ (this),
        ArrayActualSpacing_ (this),
        ArrayElementProfilePath_ (this),
        ArrayElements_ (this)
      {
      }

      SimArrayParams_ArrayParams::
      SimArrayParams_ArrayParams (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (RefId),
        ArrayType_ (this),
        ArrayCount_ (this),
        ArrayElementHeight_ (this),
        ArrayElementWidth_ (this),
        ArrayTopElevation_ (this),
        ArrayMinSpacing_ (this),
        ArrayActualSpacing_ (this),
        ArrayElementProfilePath_ (this),
        ArrayElements_ (this)
      {
      }

      SimArrayParams_ArrayParams::
      SimArrayParams_ArrayParams (const SimArrayParams_ArrayParams& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (x, f, c),
        ArrayType_ (x.ArrayType_, f, this),
        ArrayCount_ (x.ArrayCount_, f, this),
        ArrayElementHeight_ (x.ArrayElementHeight_, f, this),
        ArrayElementWidth_ (x.ArrayElementWidth_, f, this),
        ArrayTopElevation_ (x.ArrayTopElevation_, f, this),
        ArrayMinSpacing_ (x.ArrayMinSpacing_, f, this),
        ArrayActualSpacing_ (x.ArrayActualSpacing_, f, this),
        ArrayElementProfilePath_ (x.ArrayElementProfilePath_, f, this),
        ArrayElements_ (x.ArrayElements_, f, this)
      {
      }

      SimArrayParams_ArrayParams::
      SimArrayParams_ArrayParams (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (e, f | ::xml_schema::flags::base, c),
        ArrayType_ (this),
        ArrayCount_ (this),
        ArrayElementHeight_ (this),
        ArrayElementWidth_ (this),
        ArrayTopElevation_ (this),
        ArrayMinSpacing_ (this),
        ArrayActualSpacing_ (this),
        ArrayElementProfilePath_ (this),
        ArrayElements_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimArrayParams_ArrayParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimArrayParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ArrayType
          //
          if (n.name () == "ArrayType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ArrayType_type > r (
              ArrayType_traits::create (i, f, this));

            if (!this->ArrayType_)
            {
              this->ArrayType_.set (r);
              continue;
            }
          }

          // ArrayCount
          //
          if (n.name () == "ArrayCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayCount_)
            {
              this->ArrayCount_.set (ArrayCount_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayElementHeight
          //
          if (n.name () == "ArrayElementHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayElementHeight_)
            {
              this->ArrayElementHeight_.set (ArrayElementHeight_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayElementWidth
          //
          if (n.name () == "ArrayElementWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayElementWidth_)
            {
              this->ArrayElementWidth_.set (ArrayElementWidth_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayTopElevation
          //
          if (n.name () == "ArrayTopElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayTopElevation_)
            {
              this->ArrayTopElevation_.set (ArrayTopElevation_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayMinSpacing
          //
          if (n.name () == "ArrayMinSpacing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayMinSpacing_)
            {
              this->ArrayMinSpacing_.set (ArrayMinSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayActualSpacing
          //
          if (n.name () == "ArrayActualSpacing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayActualSpacing_)
            {
              this->ArrayActualSpacing_.set (ArrayActualSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayElementProfilePath
          //
          if (n.name () == "ArrayElementProfilePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ArrayElementProfilePath_type > r (
              ArrayElementProfilePath_traits::create (i, f, this));

            if (!this->ArrayElementProfilePath_)
            {
              this->ArrayElementProfilePath_.set (r);
              continue;
            }
          }

          // ArrayElements
          //
          if (n.name () == "ArrayElements" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ArrayElements_type > r (
              ArrayElements_traits::create (i, f, this));

            if (!this->ArrayElements_)
            {
              this->ArrayElements_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimArrayParams_ArrayParams* SimArrayParams_ArrayParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimArrayParams_ArrayParams (*this, f, c);
      }

      SimArrayParams_ArrayParams& SimArrayParams_ArrayParams::
      operator= (const SimArrayParams_ArrayParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimArrayParams& > (*this) = x;
          this->ArrayType_ = x.ArrayType_;
          this->ArrayCount_ = x.ArrayCount_;
          this->ArrayElementHeight_ = x.ArrayElementHeight_;
          this->ArrayElementWidth_ = x.ArrayElementWidth_;
          this->ArrayTopElevation_ = x.ArrayTopElevation_;
          this->ArrayMinSpacing_ = x.ArrayMinSpacing_;
          this->ArrayActualSpacing_ = x.ArrayActualSpacing_;
          this->ArrayElementProfilePath_ = x.ArrayElementProfilePath_;
          this->ArrayElements_ = x.ArrayElements_;
        }

        return *this;
      }

      SimArrayParams_ArrayParams::
      ~SimArrayParams_ArrayParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

