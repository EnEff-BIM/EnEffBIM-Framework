// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_RESULTS_VIEW_HXX
#define SIM_RESULTS_VIEW_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimResultsView;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simresultsvisualization.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimResultsView: public ::schema::simxml::ResourcesGeneral::SimResultsVisualization
      {
        public:
        // VariablesInView
        //
        typedef ::xml_schema::idrefs VariablesInView_type;
        typedef ::xsd::cxx::tree::optional< VariablesInView_type > VariablesInView_optional;
        typedef ::xsd::cxx::tree::traits< VariablesInView_type, char > VariablesInView_traits;

        const VariablesInView_optional&
        VariablesInView () const;

        VariablesInView_optional&
        VariablesInView ();

        void
        VariablesInView (const VariablesInView_type& x);

        void
        VariablesInView (const VariablesInView_optional& x);

        void
        VariablesInView (::std::auto_ptr< VariablesInView_type > p);

        // ViewType
        //
        typedef ::xml_schema::string ViewType_type;
        typedef ::xsd::cxx::tree::optional< ViewType_type > ViewType_optional;
        typedef ::xsd::cxx::tree::traits< ViewType_type, char > ViewType_traits;

        const ViewType_optional&
        ViewType () const;

        ViewType_optional&
        ViewType ();

        void
        ViewType (const ViewType_type& x);

        void
        ViewType (const ViewType_optional& x);

        void
        ViewType (::std::auto_ptr< ViewType_type > p);

        // ChartOrTableType
        //
        typedef ::xml_schema::string ChartOrTableType_type;
        typedef ::xsd::cxx::tree::optional< ChartOrTableType_type > ChartOrTableType_optional;
        typedef ::xsd::cxx::tree::traits< ChartOrTableType_type, char > ChartOrTableType_traits;

        const ChartOrTableType_optional&
        ChartOrTableType () const;

        ChartOrTableType_optional&
        ChartOrTableType ();

        void
        ChartOrTableType (const ChartOrTableType_type& x);

        void
        ChartOrTableType (const ChartOrTableType_optional& x);

        void
        ChartOrTableType (::std::auto_ptr< ChartOrTableType_type > p);

        // TimeStep_String
        //
        typedef ::xml_schema::string TimeStep_String_type;
        typedef ::xsd::cxx::tree::optional< TimeStep_String_type > TimeStep_String_optional;
        typedef ::xsd::cxx::tree::traits< TimeStep_String_type, char > TimeStep_String_traits;

        const TimeStep_String_optional&
        TimeStep_String () const;

        TimeStep_String_optional&
        TimeStep_String ();

        void
        TimeStep_String (const TimeStep_String_type& x);

        void
        TimeStep_String (const TimeStep_String_optional& x);

        void
        TimeStep_String (::std::auto_ptr< TimeStep_String_type > p);

        // Font
        //
        typedef ::xml_schema::string Font_type;
        typedef ::xsd::cxx::tree::optional< Font_type > Font_optional;
        typedef ::xsd::cxx::tree::traits< Font_type, char > Font_traits;

        const Font_optional&
        Font () const;

        Font_optional&
        Font ();

        void
        Font (const Font_type& x);

        void
        Font (const Font_optional& x);

        void
        Font (::std::auto_ptr< Font_type > p);

        // FontSize
        //
        typedef ::xml_schema::double_ FontSize_type;
        typedef ::xsd::cxx::tree::optional< FontSize_type > FontSize_optional;
        typedef ::xsd::cxx::tree::traits< FontSize_type, char, ::xsd::cxx::tree::schema_type::double_ > FontSize_traits;

        const FontSize_optional&
        FontSize () const;

        FontSize_optional&
        FontSize ();

        void
        FontSize (const FontSize_type& x);

        void
        FontSize (const FontSize_optional& x);

        // X_AxisMeasure
        //
        typedef ::xml_schema::string X_AxisMeasure_type;
        typedef ::xsd::cxx::tree::optional< X_AxisMeasure_type > X_AxisMeasure_optional;
        typedef ::xsd::cxx::tree::traits< X_AxisMeasure_type, char > X_AxisMeasure_traits;

        const X_AxisMeasure_optional&
        X_AxisMeasure () const;

        X_AxisMeasure_optional&
        X_AxisMeasure ();

        void
        X_AxisMeasure (const X_AxisMeasure_type& x);

        void
        X_AxisMeasure (const X_AxisMeasure_optional& x);

        void
        X_AxisMeasure (::std::auto_ptr< X_AxisMeasure_type > p);

        // X_AxisUnits
        //
        typedef ::xml_schema::string X_AxisUnits_type;
        typedef ::xsd::cxx::tree::optional< X_AxisUnits_type > X_AxisUnits_optional;
        typedef ::xsd::cxx::tree::traits< X_AxisUnits_type, char > X_AxisUnits_traits;

        const X_AxisUnits_optional&
        X_AxisUnits () const;

        X_AxisUnits_optional&
        X_AxisUnits ();

        void
        X_AxisUnits (const X_AxisUnits_type& x);

        void
        X_AxisUnits (const X_AxisUnits_optional& x);

        void
        X_AxisUnits (::std::auto_ptr< X_AxisUnits_type > p);

        // Y_AxisMeasure
        //
        typedef ::xml_schema::string Y_AxisMeasure_type;
        typedef ::xsd::cxx::tree::optional< Y_AxisMeasure_type > Y_AxisMeasure_optional;
        typedef ::xsd::cxx::tree::traits< Y_AxisMeasure_type, char > Y_AxisMeasure_traits;

        const Y_AxisMeasure_optional&
        Y_AxisMeasure () const;

        Y_AxisMeasure_optional&
        Y_AxisMeasure ();

        void
        Y_AxisMeasure (const Y_AxisMeasure_type& x);

        void
        Y_AxisMeasure (const Y_AxisMeasure_optional& x);

        void
        Y_AxisMeasure (::std::auto_ptr< Y_AxisMeasure_type > p);

        // Y_AxisUnits
        //
        typedef ::xml_schema::string Y_AxisUnits_type;
        typedef ::xsd::cxx::tree::optional< Y_AxisUnits_type > Y_AxisUnits_optional;
        typedef ::xsd::cxx::tree::traits< Y_AxisUnits_type, char > Y_AxisUnits_traits;

        const Y_AxisUnits_optional&
        Y_AxisUnits () const;

        Y_AxisUnits_optional&
        Y_AxisUnits ();

        void
        Y_AxisUnits (const Y_AxisUnits_type& x);

        void
        Y_AxisUnits (const Y_AxisUnits_optional& x);

        void
        Y_AxisUnits (::std::auto_ptr< Y_AxisUnits_type > p);

        // Y2_AxisMeasure
        //
        typedef ::xml_schema::string Y2_AxisMeasure_type;
        typedef ::xsd::cxx::tree::optional< Y2_AxisMeasure_type > Y2_AxisMeasure_optional;
        typedef ::xsd::cxx::tree::traits< Y2_AxisMeasure_type, char > Y2_AxisMeasure_traits;

        const Y2_AxisMeasure_optional&
        Y2_AxisMeasure () const;

        Y2_AxisMeasure_optional&
        Y2_AxisMeasure ();

        void
        Y2_AxisMeasure (const Y2_AxisMeasure_type& x);

        void
        Y2_AxisMeasure (const Y2_AxisMeasure_optional& x);

        void
        Y2_AxisMeasure (::std::auto_ptr< Y2_AxisMeasure_type > p);

        // Y2_AxisUnits
        //
        typedef ::xml_schema::string Y2_AxisUnits_type;
        typedef ::xsd::cxx::tree::optional< Y2_AxisUnits_type > Y2_AxisUnits_optional;
        typedef ::xsd::cxx::tree::traits< Y2_AxisUnits_type, char > Y2_AxisUnits_traits;

        const Y2_AxisUnits_optional&
        Y2_AxisUnits () const;

        Y2_AxisUnits_optional&
        Y2_AxisUnits ();

        void
        Y2_AxisUnits (const Y2_AxisUnits_type& x);

        void
        Y2_AxisUnits (const Y2_AxisUnits_optional& x);

        void
        Y2_AxisUnits (::std::auto_ptr< Y2_AxisUnits_type > p);

        // StartDate
        //
        typedef ::xml_schema::int_ StartDate_type;
        typedef ::xsd::cxx::tree::optional< StartDate_type > StartDate_optional;
        typedef ::xsd::cxx::tree::traits< StartDate_type, char > StartDate_traits;

        const StartDate_optional&
        StartDate () const;

        StartDate_optional&
        StartDate ();

        void
        StartDate (const StartDate_type& x);

        void
        StartDate (const StartDate_optional& x);

        // EndDate
        //
        typedef ::xml_schema::int_ EndDate_type;
        typedef ::xsd::cxx::tree::optional< EndDate_type > EndDate_optional;
        typedef ::xsd::cxx::tree::traits< EndDate_type, char > EndDate_traits;

        const EndDate_optional&
        EndDate () const;

        EndDate_optional&
        EndDate ();

        void
        EndDate (const EndDate_type& x);

        void
        EndDate (const EndDate_optional& x);

        // LegendInclDesignAlt
        //
        typedef ::xml_schema::boolean LegendInclDesignAlt_type;
        typedef ::xsd::cxx::tree::optional< LegendInclDesignAlt_type > LegendInclDesignAlt_optional;
        typedef ::xsd::cxx::tree::traits< LegendInclDesignAlt_type, char > LegendInclDesignAlt_traits;

        const LegendInclDesignAlt_optional&
        LegendInclDesignAlt () const;

        LegendInclDesignAlt_optional&
        LegendInclDesignAlt ();

        void
        LegendInclDesignAlt (const LegendInclDesignAlt_type& x);

        void
        LegendInclDesignAlt (const LegendInclDesignAlt_optional& x);

        // LegendInclConfig
        //
        typedef ::xml_schema::boolean LegendInclConfig_type;
        typedef ::xsd::cxx::tree::optional< LegendInclConfig_type > LegendInclConfig_optional;
        typedef ::xsd::cxx::tree::traits< LegendInclConfig_type, char > LegendInclConfig_traits;

        const LegendInclConfig_optional&
        LegendInclConfig () const;

        LegendInclConfig_optional&
        LegendInclConfig ();

        void
        LegendInclConfig (const LegendInclConfig_type& x);

        void
        LegendInclConfig (const LegendInclConfig_optional& x);

        // LegendInclRun
        //
        typedef ::xml_schema::boolean LegendInclRun_type;
        typedef ::xsd::cxx::tree::optional< LegendInclRun_type > LegendInclRun_optional;
        typedef ::xsd::cxx::tree::traits< LegendInclRun_type, char > LegendInclRun_traits;

        const LegendInclRun_optional&
        LegendInclRun () const;

        LegendInclRun_optional&
        LegendInclRun ();

        void
        LegendInclRun (const LegendInclRun_type& x);

        void
        LegendInclRun (const LegendInclRun_optional& x);

        // LegendInclArea
        //
        typedef ::xml_schema::boolean LegendInclArea_type;
        typedef ::xsd::cxx::tree::optional< LegendInclArea_type > LegendInclArea_optional;
        typedef ::xsd::cxx::tree::traits< LegendInclArea_type, char > LegendInclArea_traits;

        const LegendInclArea_optional&
        LegendInclArea () const;

        LegendInclArea_optional&
        LegendInclArea ();

        void
        LegendInclArea (const LegendInclArea_type& x);

        void
        LegendInclArea (const LegendInclArea_optional& x);

        // ChartTitle
        //
        typedef ::xml_schema::idref ChartTitle_type;
        typedef ::xsd::cxx::tree::optional< ChartTitle_type > ChartTitle_optional;
        typedef ::xsd::cxx::tree::traits< ChartTitle_type, char > ChartTitle_traits;

        const ChartTitle_optional&
        ChartTitle () const;

        ChartTitle_optional&
        ChartTitle ();

        void
        ChartTitle (const ChartTitle_type& x);

        void
        ChartTitle (const ChartTitle_optional& x);

        void
        ChartTitle (::std::auto_ptr< ChartTitle_type > p);

        // LeftAxisLabel
        //
        typedef ::xml_schema::idref LeftAxisLabel_type;
        typedef ::xsd::cxx::tree::optional< LeftAxisLabel_type > LeftAxisLabel_optional;
        typedef ::xsd::cxx::tree::traits< LeftAxisLabel_type, char > LeftAxisLabel_traits;

        const LeftAxisLabel_optional&
        LeftAxisLabel () const;

        LeftAxisLabel_optional&
        LeftAxisLabel ();

        void
        LeftAxisLabel (const LeftAxisLabel_type& x);

        void
        LeftAxisLabel (const LeftAxisLabel_optional& x);

        void
        LeftAxisLabel (::std::auto_ptr< LeftAxisLabel_type > p);

        // RightAxisLabel
        //
        typedef ::xml_schema::idref RightAxisLabel_type;
        typedef ::xsd::cxx::tree::optional< RightAxisLabel_type > RightAxisLabel_optional;
        typedef ::xsd::cxx::tree::traits< RightAxisLabel_type, char > RightAxisLabel_traits;

        const RightAxisLabel_optional&
        RightAxisLabel () const;

        RightAxisLabel_optional&
        RightAxisLabel ();

        void
        RightAxisLabel (const RightAxisLabel_type& x);

        void
        RightAxisLabel (const RightAxisLabel_optional& x);

        void
        RightAxisLabel (::std::auto_ptr< RightAxisLabel_type > p);

        // BottomAxisLabel
        //
        typedef ::xml_schema::idref BottomAxisLabel_type;
        typedef ::xsd::cxx::tree::optional< BottomAxisLabel_type > BottomAxisLabel_optional;
        typedef ::xsd::cxx::tree::traits< BottomAxisLabel_type, char > BottomAxisLabel_traits;

        const BottomAxisLabel_optional&
        BottomAxisLabel () const;

        BottomAxisLabel_optional&
        BottomAxisLabel ();

        void
        BottomAxisLabel (const BottomAxisLabel_type& x);

        void
        BottomAxisLabel (const BottomAxisLabel_optional& x);

        void
        BottomAxisLabel (::std::auto_ptr< BottomAxisLabel_type > p);

        // Labels
        //
        typedef ::xml_schema::idref Labels_type;
        typedef ::xsd::cxx::tree::optional< Labels_type > Labels_optional;
        typedef ::xsd::cxx::tree::traits< Labels_type, char > Labels_traits;

        const Labels_optional&
        Labels () const;

        Labels_optional&
        Labels ();

        void
        Labels (const Labels_type& x);

        void
        Labels (const Labels_optional& x);

        void
        Labels (::std::auto_ptr< Labels_type > p);

        // LegendAppearence
        //
        typedef ::xml_schema::idref LegendAppearence_type;
        typedef ::xsd::cxx::tree::optional< LegendAppearence_type > LegendAppearence_optional;
        typedef ::xsd::cxx::tree::traits< LegendAppearence_type, char > LegendAppearence_traits;

        const LegendAppearence_optional&
        LegendAppearence () const;

        LegendAppearence_optional&
        LegendAppearence ();

        void
        LegendAppearence (const LegendAppearence_type& x);

        void
        LegendAppearence (const LegendAppearence_optional& x);

        void
        LegendAppearence (::std::auto_ptr< LegendAppearence_type > p);

        // ShowLegend
        //
        typedef ::xml_schema::boolean ShowLegend_type;
        typedef ::xsd::cxx::tree::optional< ShowLegend_type > ShowLegend_optional;
        typedef ::xsd::cxx::tree::traits< ShowLegend_type, char > ShowLegend_traits;

        const ShowLegend_optional&
        ShowLegend () const;

        ShowLegend_optional&
        ShowLegend ();

        void
        ShowLegend (const ShowLegend_type& x);

        void
        ShowLegend (const ShowLegend_optional& x);

        // LegendDockStyle
        //
        typedef ::xml_schema::string LegendDockStyle_type;
        typedef ::xsd::cxx::tree::optional< LegendDockStyle_type > LegendDockStyle_optional;
        typedef ::xsd::cxx::tree::traits< LegendDockStyle_type, char > LegendDockStyle_traits;

        const LegendDockStyle_optional&
        LegendDockStyle () const;

        LegendDockStyle_optional&
        LegendDockStyle ();

        void
        LegendDockStyle (const LegendDockStyle_type& x);

        void
        LegendDockStyle (const LegendDockStyle_optional& x);

        void
        LegendDockStyle (::std::auto_ptr< LegendDockStyle_type > p);

        // LockAspectRatio
        //
        typedef ::xml_schema::boolean LockAspectRatio_type;
        typedef ::xsd::cxx::tree::optional< LockAspectRatio_type > LockAspectRatio_optional;
        typedef ::xsd::cxx::tree::traits< LockAspectRatio_type, char > LockAspectRatio_traits;

        const LockAspectRatio_optional&
        LockAspectRatio () const;

        LockAspectRatio_optional&
        LockAspectRatio ();

        void
        LockAspectRatio (const LockAspectRatio_type& x);

        void
        LockAspectRatio (const LockAspectRatio_optional& x);

        // TableTextStyle
        //
        typedef ::xml_schema::idref TableTextStyle_type;
        typedef ::xsd::cxx::tree::optional< TableTextStyle_type > TableTextStyle_optional;
        typedef ::xsd::cxx::tree::traits< TableTextStyle_type, char > TableTextStyle_traits;

        const TableTextStyle_optional&
        TableTextStyle () const;

        TableTextStyle_optional&
        TableTextStyle ();

        void
        TableTextStyle (const TableTextStyle_type& x);

        void
        TableTextStyle (const TableTextStyle_optional& x);

        void
        TableTextStyle (::std::auto_ptr< TableTextStyle_type > p);

        // DecimalPlaces
        //
        typedef ::xml_schema::int_ DecimalPlaces_type;
        typedef ::xsd::cxx::tree::optional< DecimalPlaces_type > DecimalPlaces_optional;
        typedef ::xsd::cxx::tree::traits< DecimalPlaces_type, char > DecimalPlaces_traits;

        const DecimalPlaces_optional&
        DecimalPlaces () const;

        DecimalPlaces_optional&
        DecimalPlaces ();

        void
        DecimalPlaces (const DecimalPlaces_type& x);

        void
        DecimalPlaces (const DecimalPlaces_optional& x);

        // LeftAxisTitle
        //
        typedef ::xml_schema::idref LeftAxisTitle_type;
        typedef ::xsd::cxx::tree::optional< LeftAxisTitle_type > LeftAxisTitle_optional;
        typedef ::xsd::cxx::tree::traits< LeftAxisTitle_type, char > LeftAxisTitle_traits;

        const LeftAxisTitle_optional&
        LeftAxisTitle () const;

        LeftAxisTitle_optional&
        LeftAxisTitle ();

        void
        LeftAxisTitle (const LeftAxisTitle_type& x);

        void
        LeftAxisTitle (const LeftAxisTitle_optional& x);

        void
        LeftAxisTitle (::std::auto_ptr< LeftAxisTitle_type > p);

        // RightAxisTitle
        //
        typedef ::xml_schema::idref RightAxisTitle_type;
        typedef ::xsd::cxx::tree::optional< RightAxisTitle_type > RightAxisTitle_optional;
        typedef ::xsd::cxx::tree::traits< RightAxisTitle_type, char > RightAxisTitle_traits;

        const RightAxisTitle_optional&
        RightAxisTitle () const;

        RightAxisTitle_optional&
        RightAxisTitle ();

        void
        RightAxisTitle (const RightAxisTitle_type& x);

        void
        RightAxisTitle (const RightAxisTitle_optional& x);

        void
        RightAxisTitle (::std::auto_ptr< RightAxisTitle_type > p);

        // BottomAxisTitle
        //
        typedef ::xml_schema::idref BottomAxisTitle_type;
        typedef ::xsd::cxx::tree::optional< BottomAxisTitle_type > BottomAxisTitle_optional;
        typedef ::xsd::cxx::tree::traits< BottomAxisTitle_type, char > BottomAxisTitle_traits;

        const BottomAxisTitle_optional&
        BottomAxisTitle () const;

        BottomAxisTitle_optional&
        BottomAxisTitle ();

        void
        BottomAxisTitle (const BottomAxisTitle_type& x);

        void
        BottomAxisTitle (const BottomAxisTitle_optional& x);

        void
        BottomAxisTitle (::std::auto_ptr< BottomAxisTitle_type > p);

        // StartHour
        //
        typedef ::xml_schema::int_ StartHour_type;
        typedef ::xsd::cxx::tree::optional< StartHour_type > StartHour_optional;
        typedef ::xsd::cxx::tree::traits< StartHour_type, char > StartHour_traits;

        const StartHour_optional&
        StartHour () const;

        StartHour_optional&
        StartHour ();

        void
        StartHour (const StartHour_type& x);

        void
        StartHour (const StartHour_optional& x);

        // StartDay
        //
        typedef ::xml_schema::int_ StartDay_type;
        typedef ::xsd::cxx::tree::optional< StartDay_type > StartDay_optional;
        typedef ::xsd::cxx::tree::traits< StartDay_type, char > StartDay_traits;

        const StartDay_optional&
        StartDay () const;

        StartDay_optional&
        StartDay ();

        void
        StartDay (const StartDay_type& x);

        void
        StartDay (const StartDay_optional& x);

        // StartMonth
        //
        typedef ::xml_schema::int_ StartMonth_type;
        typedef ::xsd::cxx::tree::optional< StartMonth_type > StartMonth_optional;
        typedef ::xsd::cxx::tree::traits< StartMonth_type, char > StartMonth_traits;

        const StartMonth_optional&
        StartMonth () const;

        StartMonth_optional&
        StartMonth ();

        void
        StartMonth (const StartMonth_type& x);

        void
        StartMonth (const StartMonth_optional& x);

        // EndHour
        //
        typedef ::xml_schema::int_ EndHour_type;
        typedef ::xsd::cxx::tree::optional< EndHour_type > EndHour_optional;
        typedef ::xsd::cxx::tree::traits< EndHour_type, char > EndHour_traits;

        const EndHour_optional&
        EndHour () const;

        EndHour_optional&
        EndHour ();

        void
        EndHour (const EndHour_type& x);

        void
        EndHour (const EndHour_optional& x);

        // EndDay
        //
        typedef ::xml_schema::int_ EndDay_type;
        typedef ::xsd::cxx::tree::optional< EndDay_type > EndDay_optional;
        typedef ::xsd::cxx::tree::traits< EndDay_type, char > EndDay_traits;

        const EndDay_optional&
        EndDay () const;

        EndDay_optional&
        EndDay ();

        void
        EndDay (const EndDay_type& x);

        void
        EndDay (const EndDay_optional& x);

        // EndMonth
        //
        typedef ::xml_schema::int_ EndMonth_type;
        typedef ::xsd::cxx::tree::optional< EndMonth_type > EndMonth_optional;
        typedef ::xsd::cxx::tree::traits< EndMonth_type, char > EndMonth_traits;

        const EndMonth_optional&
        EndMonth () const;

        EndMonth_optional&
        EndMonth ();

        void
        EndMonth (const EndMonth_type& x);

        void
        EndMonth (const EndMonth_optional& x);

        // Constructors.
        //
        SimResultsView ();

        SimResultsView (const RefId_type&);

        SimResultsView (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SimResultsView (const SimResultsView& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual SimResultsView*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimResultsView&
        operator= (const SimResultsView& x);

        virtual 
        ~SimResultsView ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        VariablesInView_optional VariablesInView_;
        ViewType_optional ViewType_;
        ChartOrTableType_optional ChartOrTableType_;
        TimeStep_String_optional TimeStep_String_;
        Font_optional Font_;
        FontSize_optional FontSize_;
        X_AxisMeasure_optional X_AxisMeasure_;
        X_AxisUnits_optional X_AxisUnits_;
        Y_AxisMeasure_optional Y_AxisMeasure_;
        Y_AxisUnits_optional Y_AxisUnits_;
        Y2_AxisMeasure_optional Y2_AxisMeasure_;
        Y2_AxisUnits_optional Y2_AxisUnits_;
        StartDate_optional StartDate_;
        EndDate_optional EndDate_;
        LegendInclDesignAlt_optional LegendInclDesignAlt_;
        LegendInclConfig_optional LegendInclConfig_;
        LegendInclRun_optional LegendInclRun_;
        LegendInclArea_optional LegendInclArea_;
        ChartTitle_optional ChartTitle_;
        LeftAxisLabel_optional LeftAxisLabel_;
        RightAxisLabel_optional RightAxisLabel_;
        BottomAxisLabel_optional BottomAxisLabel_;
        Labels_optional Labels_;
        LegendAppearence_optional LegendAppearence_;
        ShowLegend_optional ShowLegend_;
        LegendDockStyle_optional LegendDockStyle_;
        LockAspectRatio_optional LockAspectRatio_;
        TableTextStyle_optional TableTextStyle_;
        DecimalPlaces_optional DecimalPlaces_;
        LeftAxisTitle_optional LeftAxisTitle_;
        RightAxisTitle_optional RightAxisTitle_;
        BottomAxisTitle_optional BottomAxisTitle_;
        StartHour_optional StartHour_;
        StartDay_optional StartDay_;
        StartMonth_optional StartMonth_;
        EndHour_optional EndHour_;
        EndDay_optional EndDay_;
        EndMonth_optional EndMonth_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_RESULTS_VIEW_HXX
