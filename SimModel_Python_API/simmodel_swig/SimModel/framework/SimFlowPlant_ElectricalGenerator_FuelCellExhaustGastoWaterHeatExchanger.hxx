// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_FUEL_CELL_EXHAUST_GAS_TO_WATER_HEAT_EXCHANGER_HXX
#define SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_FUEL_CELL_EXHAUST_GAS_TO_WATER_HEAT_EXCHANGER_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_electricalgenerator.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger: public ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator
      {
        public:
        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_HeatRecovWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterInletNodeName_type > SimFlowPlant_HeatRecovWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterInletNodeName_type, char > SimFlowPlant_HeatRecovWaterInletNodeName_traits;

        const SimFlowPlant_HeatRecovWaterInletNodeName_optional&
        SimFlowPlant_HeatRecovWaterInletNodeName () const;

        SimFlowPlant_HeatRecovWaterInletNodeName_optional&
        SimFlowPlant_HeatRecovWaterInletNodeName ();

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (const SimFlowPlant_HeatRecovWaterInletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (const SimFlowPlant_HeatRecovWaterInletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterInletNodeName_type > p);

        // SimFlowPlant_HeatRecovWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterOutletNodeName_type > SimFlowPlant_HeatRecovWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterOutletNodeName_type, char > SimFlowPlant_HeatRecovWaterOutletNodeName_traits;

        const SimFlowPlant_HeatRecovWaterOutletNodeName_optional&
        SimFlowPlant_HeatRecovWaterOutletNodeName () const;

        SimFlowPlant_HeatRecovWaterOutletNodeName_optional&
        SimFlowPlant_HeatRecovWaterOutletNodeName ();

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (const SimFlowPlant_HeatRecovWaterOutletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (const SimFlowPlant_HeatRecovWaterOutletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterOutletNodeName_type > p);

        // SimFlowPlant_HeatRecovWaterMaxFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_HeatRecovWaterMaxFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterMaxFlowRate_type > SimFlowPlant_HeatRecovWaterMaxFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterMaxFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_HeatRecovWaterMaxFlowRate_traits;

        const SimFlowPlant_HeatRecovWaterMaxFlowRate_optional&
        SimFlowPlant_HeatRecovWaterMaxFlowRate () const;

        SimFlowPlant_HeatRecovWaterMaxFlowRate_optional&
        SimFlowPlant_HeatRecovWaterMaxFlowRate ();

        void
        SimFlowPlant_HeatRecovWaterMaxFlowRate (const SimFlowPlant_HeatRecovWaterMaxFlowRate_type& x);

        void
        SimFlowPlant_HeatRecovWaterMaxFlowRate (const SimFlowPlant_HeatRecovWaterMaxFlowRate_optional& x);

        // SimFlowPlant_ExhOutletAirNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_ExhOutletAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ExhOutletAirNodeName_type > SimFlowPlant_ExhOutletAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ExhOutletAirNodeName_type, char > SimFlowPlant_ExhOutletAirNodeName_traits;

        const SimFlowPlant_ExhOutletAirNodeName_optional&
        SimFlowPlant_ExhOutletAirNodeName () const;

        SimFlowPlant_ExhOutletAirNodeName_optional&
        SimFlowPlant_ExhOutletAirNodeName ();

        void
        SimFlowPlant_ExhOutletAirNodeName (const SimFlowPlant_ExhOutletAirNodeName_type& x);

        void
        SimFlowPlant_ExhOutletAirNodeName (const SimFlowPlant_ExhOutletAirNodeName_optional& x);

        void
        SimFlowPlant_ExhOutletAirNodeName (::std::auto_ptr< SimFlowPlant_ExhOutletAirNodeName_type > p);

        // SimFlowPlant_HeatExchngCalcMeth
        //
        typedef ::xml_schema::string SimFlowPlant_HeatExchngCalcMeth_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatExchngCalcMeth_type > SimFlowPlant_HeatExchngCalcMeth_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatExchngCalcMeth_type, char > SimFlowPlant_HeatExchngCalcMeth_traits;

        const SimFlowPlant_HeatExchngCalcMeth_optional&
        SimFlowPlant_HeatExchngCalcMeth () const;

        SimFlowPlant_HeatExchngCalcMeth_optional&
        SimFlowPlant_HeatExchngCalcMeth ();

        void
        SimFlowPlant_HeatExchngCalcMeth (const SimFlowPlant_HeatExchngCalcMeth_type& x);

        void
        SimFlowPlant_HeatExchngCalcMeth (const SimFlowPlant_HeatExchngCalcMeth_optional& x);

        void
        SimFlowPlant_HeatExchngCalcMeth (::std::auto_ptr< SimFlowPlant_HeatExchngCalcMeth_type > p);

        // SimFlowPlant_Meth1HeatExchngEffect
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth1HeatExchngEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth1HeatExchngEffect_type > SimFlowPlant_Meth1HeatExchngEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth1HeatExchngEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth1HeatExchngEffect_traits;

        const SimFlowPlant_Meth1HeatExchngEffect_optional&
        SimFlowPlant_Meth1HeatExchngEffect () const;

        SimFlowPlant_Meth1HeatExchngEffect_optional&
        SimFlowPlant_Meth1HeatExchngEffect ();

        void
        SimFlowPlant_Meth1HeatExchngEffect (const SimFlowPlant_Meth1HeatExchngEffect_type& x);

        void
        SimFlowPlant_Meth1HeatExchngEffect (const SimFlowPlant_Meth1HeatExchngEffect_optional& x);

        // SimFlowPlant_Method2Paramhxs0
        //
        typedef ::xml_schema::double_ SimFlowPlant_Method2Paramhxs0_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Method2Paramhxs0_type > SimFlowPlant_Method2Paramhxs0_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Method2Paramhxs0_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Method2Paramhxs0_traits;

        const SimFlowPlant_Method2Paramhxs0_optional&
        SimFlowPlant_Method2Paramhxs0 () const;

        SimFlowPlant_Method2Paramhxs0_optional&
        SimFlowPlant_Method2Paramhxs0 ();

        void
        SimFlowPlant_Method2Paramhxs0 (const SimFlowPlant_Method2Paramhxs0_type& x);

        void
        SimFlowPlant_Method2Paramhxs0 (const SimFlowPlant_Method2Paramhxs0_optional& x);

        // SimFlowPlant_Method2Paramhxs1
        //
        typedef ::xml_schema::double_ SimFlowPlant_Method2Paramhxs1_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Method2Paramhxs1_type > SimFlowPlant_Method2Paramhxs1_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Method2Paramhxs1_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Method2Paramhxs1_traits;

        const SimFlowPlant_Method2Paramhxs1_optional&
        SimFlowPlant_Method2Paramhxs1 () const;

        SimFlowPlant_Method2Paramhxs1_optional&
        SimFlowPlant_Method2Paramhxs1 ();

        void
        SimFlowPlant_Method2Paramhxs1 (const SimFlowPlant_Method2Paramhxs1_type& x);

        void
        SimFlowPlant_Method2Paramhxs1 (const SimFlowPlant_Method2Paramhxs1_optional& x);

        // SimFlowPlant_Method2Paramhxs2
        //
        typedef ::xml_schema::double_ SimFlowPlant_Method2Paramhxs2_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Method2Paramhxs2_type > SimFlowPlant_Method2Paramhxs2_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Method2Paramhxs2_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Method2Paramhxs2_traits;

        const SimFlowPlant_Method2Paramhxs2_optional&
        SimFlowPlant_Method2Paramhxs2 () const;

        SimFlowPlant_Method2Paramhxs2_optional&
        SimFlowPlant_Method2Paramhxs2 ();

        void
        SimFlowPlant_Method2Paramhxs2 (const SimFlowPlant_Method2Paramhxs2_type& x);

        void
        SimFlowPlant_Method2Paramhxs2 (const SimFlowPlant_Method2Paramhxs2_optional& x);

        // SimFlowPlant_Method2Paramhxs3
        //
        typedef ::xml_schema::double_ SimFlowPlant_Method2Paramhxs3_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Method2Paramhxs3_type > SimFlowPlant_Method2Paramhxs3_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Method2Paramhxs3_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Method2Paramhxs3_traits;

        const SimFlowPlant_Method2Paramhxs3_optional&
        SimFlowPlant_Method2Paramhxs3 () const;

        SimFlowPlant_Method2Paramhxs3_optional&
        SimFlowPlant_Method2Paramhxs3 ();

        void
        SimFlowPlant_Method2Paramhxs3 (const SimFlowPlant_Method2Paramhxs3_type& x);

        void
        SimFlowPlant_Method2Paramhxs3 (const SimFlowPlant_Method2Paramhxs3_optional& x);

        // SimFlowPlant_Method2Paramhxs4
        //
        typedef ::xml_schema::double_ SimFlowPlant_Method2Paramhxs4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Method2Paramhxs4_type > SimFlowPlant_Method2Paramhxs4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Method2Paramhxs4_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Method2Paramhxs4_traits;

        const SimFlowPlant_Method2Paramhxs4_optional&
        SimFlowPlant_Method2Paramhxs4 () const;

        SimFlowPlant_Method2Paramhxs4_optional&
        SimFlowPlant_Method2Paramhxs4 ();

        void
        SimFlowPlant_Method2Paramhxs4 (const SimFlowPlant_Method2Paramhxs4_type& x);

        void
        SimFlowPlant_Method2Paramhxs4 (const SimFlowPlant_Method2Paramhxs4_optional& x);

        // SimFlowPlant_Meth3H0GasCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3H0GasCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3H0GasCoef_type > SimFlowPlant_Meth3H0GasCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3H0GasCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3H0GasCoef_traits;

        const SimFlowPlant_Meth3H0GasCoef_optional&
        SimFlowPlant_Meth3H0GasCoef () const;

        SimFlowPlant_Meth3H0GasCoef_optional&
        SimFlowPlant_Meth3H0GasCoef ();

        void
        SimFlowPlant_Meth3H0GasCoef (const SimFlowPlant_Meth3H0GasCoef_type& x);

        void
        SimFlowPlant_Meth3H0GasCoef (const SimFlowPlant_Meth3H0GasCoef_optional& x);

        // SimFlowPlant_Meth3NdotGasRefCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3NdotGasRefCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3NdotGasRefCoef_type > SimFlowPlant_Meth3NdotGasRefCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3NdotGasRefCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3NdotGasRefCoef_traits;

        const SimFlowPlant_Meth3NdotGasRefCoef_optional&
        SimFlowPlant_Meth3NdotGasRefCoef () const;

        SimFlowPlant_Meth3NdotGasRefCoef_optional&
        SimFlowPlant_Meth3NdotGasRefCoef ();

        void
        SimFlowPlant_Meth3NdotGasRefCoef (const SimFlowPlant_Meth3NdotGasRefCoef_type& x);

        void
        SimFlowPlant_Meth3NdotGasRefCoef (const SimFlowPlant_Meth3NdotGasRefCoef_optional& x);

        // SimFlowPlant_Meth3NCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3NCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3NCoef_type > SimFlowPlant_Meth3NCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3NCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3NCoef_traits;

        const SimFlowPlant_Meth3NCoef_optional&
        SimFlowPlant_Meth3NCoef () const;

        SimFlowPlant_Meth3NCoef_optional&
        SimFlowPlant_Meth3NCoef ();

        void
        SimFlowPlant_Meth3NCoef (const SimFlowPlant_Meth3NCoef_type& x);

        void
        SimFlowPlant_Meth3NCoef (const SimFlowPlant_Meth3NCoef_optional& x);

        // SimFlowPlant_Meth3GasArea
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3GasArea_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3GasArea_type > SimFlowPlant_Meth3GasArea_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3GasArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3GasArea_traits;

        const SimFlowPlant_Meth3GasArea_optional&
        SimFlowPlant_Meth3GasArea () const;

        SimFlowPlant_Meth3GasArea_optional&
        SimFlowPlant_Meth3GasArea ();

        void
        SimFlowPlant_Meth3GasArea (const SimFlowPlant_Meth3GasArea_type& x);

        void
        SimFlowPlant_Meth3GasArea (const SimFlowPlant_Meth3GasArea_optional& x);

        // SimFlowPlant_Meth3H0WaterCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3H0WaterCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3H0WaterCoef_type > SimFlowPlant_Meth3H0WaterCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3H0WaterCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3H0WaterCoef_traits;

        const SimFlowPlant_Meth3H0WaterCoef_optional&
        SimFlowPlant_Meth3H0WaterCoef () const;

        SimFlowPlant_Meth3H0WaterCoef_optional&
        SimFlowPlant_Meth3H0WaterCoef ();

        void
        SimFlowPlant_Meth3H0WaterCoef (const SimFlowPlant_Meth3H0WaterCoef_type& x);

        void
        SimFlowPlant_Meth3H0WaterCoef (const SimFlowPlant_Meth3H0WaterCoef_optional& x);

        // SimFlowPlant_Meth3NDotWaterRefCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3NDotWaterRefCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3NDotWaterRefCoef_type > SimFlowPlant_Meth3NDotWaterRefCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3NDotWaterRefCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3NDotWaterRefCoef_traits;

        const SimFlowPlant_Meth3NDotWaterRefCoef_optional&
        SimFlowPlant_Meth3NDotWaterRefCoef () const;

        SimFlowPlant_Meth3NDotWaterRefCoef_optional&
        SimFlowPlant_Meth3NDotWaterRefCoef ();

        void
        SimFlowPlant_Meth3NDotWaterRefCoef (const SimFlowPlant_Meth3NDotWaterRefCoef_type& x);

        void
        SimFlowPlant_Meth3NDotWaterRefCoef (const SimFlowPlant_Meth3NDotWaterRefCoef_optional& x);

        // SimFlowPlant_Meth3MCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3MCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3MCoef_type > SimFlowPlant_Meth3MCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3MCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3MCoef_traits;

        const SimFlowPlant_Meth3MCoef_optional&
        SimFlowPlant_Meth3MCoef () const;

        SimFlowPlant_Meth3MCoef_optional&
        SimFlowPlant_Meth3MCoef ();

        void
        SimFlowPlant_Meth3MCoef (const SimFlowPlant_Meth3MCoef_type& x);

        void
        SimFlowPlant_Meth3MCoef (const SimFlowPlant_Meth3MCoef_optional& x);

        // SimFlowPlant_Method3WaterArea
        //
        typedef ::xml_schema::double_ SimFlowPlant_Method3WaterArea_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Method3WaterArea_type > SimFlowPlant_Method3WaterArea_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Method3WaterArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Method3WaterArea_traits;

        const SimFlowPlant_Method3WaterArea_optional&
        SimFlowPlant_Method3WaterArea () const;

        SimFlowPlant_Method3WaterArea_optional&
        SimFlowPlant_Method3WaterArea ();

        void
        SimFlowPlant_Method3WaterArea (const SimFlowPlant_Method3WaterArea_type& x);

        void
        SimFlowPlant_Method3WaterArea (const SimFlowPlant_Method3WaterArea_optional& x);

        // SimFlowPlant_Meth3FAdjFactor
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth3FAdjFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth3FAdjFactor_type > SimFlowPlant_Meth3FAdjFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth3FAdjFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth3FAdjFactor_traits;

        const SimFlowPlant_Meth3FAdjFactor_optional&
        SimFlowPlant_Meth3FAdjFactor () const;

        SimFlowPlant_Meth3FAdjFactor_optional&
        SimFlowPlant_Meth3FAdjFactor ();

        void
        SimFlowPlant_Meth3FAdjFactor (const SimFlowPlant_Meth3FAdjFactor_type& x);

        void
        SimFlowPlant_Meth3FAdjFactor (const SimFlowPlant_Meth3FAdjFactor_optional& x);

        // SimFlowPlant_Meth4Hxl1Coef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth4Hxl1Coef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth4Hxl1Coef_type > SimFlowPlant_Meth4Hxl1Coef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth4Hxl1Coef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth4Hxl1Coef_traits;

        const SimFlowPlant_Meth4Hxl1Coef_optional&
        SimFlowPlant_Meth4Hxl1Coef () const;

        SimFlowPlant_Meth4Hxl1Coef_optional&
        SimFlowPlant_Meth4Hxl1Coef ();

        void
        SimFlowPlant_Meth4Hxl1Coef (const SimFlowPlant_Meth4Hxl1Coef_type& x);

        void
        SimFlowPlant_Meth4Hxl1Coef (const SimFlowPlant_Meth4Hxl1Coef_optional& x);

        // SimFlowPlant_Meth4Hxl2Coef
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth4Hxl2Coef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth4Hxl2Coef_type > SimFlowPlant_Meth4Hxl2Coef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth4Hxl2Coef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth4Hxl2Coef_traits;

        const SimFlowPlant_Meth4Hxl2Coef_optional&
        SimFlowPlant_Meth4Hxl2Coef () const;

        SimFlowPlant_Meth4Hxl2Coef_optional&
        SimFlowPlant_Meth4Hxl2Coef ();

        void
        SimFlowPlant_Meth4Hxl2Coef (const SimFlowPlant_Meth4Hxl2Coef_type& x);

        void
        SimFlowPlant_Meth4Hxl2Coef (const SimFlowPlant_Meth4Hxl2Coef_optional& x);

        // SimFlowPlant_Meth4CondensationThresh
        //
        typedef ::xml_schema::double_ SimFlowPlant_Meth4CondensationThresh_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Meth4CondensationThresh_type > SimFlowPlant_Meth4CondensationThresh_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Meth4CondensationThresh_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_Meth4CondensationThresh_traits;

        const SimFlowPlant_Meth4CondensationThresh_optional&
        SimFlowPlant_Meth4CondensationThresh () const;

        SimFlowPlant_Meth4CondensationThresh_optional&
        SimFlowPlant_Meth4CondensationThresh ();

        void
        SimFlowPlant_Meth4CondensationThresh (const SimFlowPlant_Meth4CondensationThresh_type& x);

        void
        SimFlowPlant_Meth4CondensationThresh (const SimFlowPlant_Meth4CondensationThresh_optional& x);

        // Constructors.
        //
        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger ();

        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger (const RefId_type&);

        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger (const ::xercesc::DOMElement& e,
                                                                                 ::xml_schema::flags f = 0,
                                                                                 ::xml_schema::container* c = 0);

        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger (const SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger& x,
                                                                                 ::xml_schema::flags f = 0,
                                                                                 ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger&
        operator= (const SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger& x);

        virtual 
        ~SimFlowPlant_ElectricalGenerator_FuelCellExhaustGasToWaterHeatExchanger ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_HeatRecovWaterInletNodeName_optional SimFlowPlant_HeatRecovWaterInletNodeName_;
        SimFlowPlant_HeatRecovWaterOutletNodeName_optional SimFlowPlant_HeatRecovWaterOutletNodeName_;
        SimFlowPlant_HeatRecovWaterMaxFlowRate_optional SimFlowPlant_HeatRecovWaterMaxFlowRate_;
        SimFlowPlant_ExhOutletAirNodeName_optional SimFlowPlant_ExhOutletAirNodeName_;
        SimFlowPlant_HeatExchngCalcMeth_optional SimFlowPlant_HeatExchngCalcMeth_;
        SimFlowPlant_Meth1HeatExchngEffect_optional SimFlowPlant_Meth1HeatExchngEffect_;
        SimFlowPlant_Method2Paramhxs0_optional SimFlowPlant_Method2Paramhxs0_;
        SimFlowPlant_Method2Paramhxs1_optional SimFlowPlant_Method2Paramhxs1_;
        SimFlowPlant_Method2Paramhxs2_optional SimFlowPlant_Method2Paramhxs2_;
        SimFlowPlant_Method2Paramhxs3_optional SimFlowPlant_Method2Paramhxs3_;
        SimFlowPlant_Method2Paramhxs4_optional SimFlowPlant_Method2Paramhxs4_;
        SimFlowPlant_Meth3H0GasCoef_optional SimFlowPlant_Meth3H0GasCoef_;
        SimFlowPlant_Meth3NdotGasRefCoef_optional SimFlowPlant_Meth3NdotGasRefCoef_;
        SimFlowPlant_Meth3NCoef_optional SimFlowPlant_Meth3NCoef_;
        SimFlowPlant_Meth3GasArea_optional SimFlowPlant_Meth3GasArea_;
        SimFlowPlant_Meth3H0WaterCoef_optional SimFlowPlant_Meth3H0WaterCoef_;
        SimFlowPlant_Meth3NDotWaterRefCoef_optional SimFlowPlant_Meth3NDotWaterRefCoef_;
        SimFlowPlant_Meth3MCoef_optional SimFlowPlant_Meth3MCoef_;
        SimFlowPlant_Method3WaterArea_optional SimFlowPlant_Method3WaterArea_;
        SimFlowPlant_Meth3FAdjFactor_optional SimFlowPlant_Meth3FAdjFactor_;
        SimFlowPlant_Meth4Hxl1Coef_optional SimFlowPlant_Meth4Hxl1Coef_;
        SimFlowPlant_Meth4Hxl2Coef_optional SimFlowPlant_Meth4Hxl2Coef_;
        SimFlowPlant_Meth4CondensationThresh_optional SimFlowPlant_Meth4CondensationThresh_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_FUEL_CELL_EXHAUST_GAS_TO_WATER_HEAT_EXCHANGER_HXX
