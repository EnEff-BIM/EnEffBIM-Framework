// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_PLANT_COMPONENT_HXX
#define SIM_FLOW_PLANT_PLANT_COMPONENT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_PlantComponent;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_PlantConn_1_4_InletNodeName;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_PlantConn_1_4_OutletNodeName;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_PlantConn_1_4_LoadingMode;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_PlantComponent: public ::schema::simxml::MepModel::SimFlowPlant
      {
        public:
        // Representation
        //
        typedef ::xml_schema::idref Representation_type;
        typedef ::xsd::cxx::tree::optional< Representation_type > Representation_optional;
        typedef ::xsd::cxx::tree::traits< Representation_type, char > Representation_traits;

        const Representation_optional&
        Representation () const;

        Representation_optional&
        Representation ();

        void
        Representation (const Representation_type& x);

        void
        Representation (const Representation_optional& x);

        void
        Representation (::std::auto_ptr< Representation_type > p);

        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_MainMdlProgCallingMngrName
        //
        typedef ::xml_schema::idref SimFlowPlant_MainMdlProgCallingMngrName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MainMdlProgCallingMngrName_type > SimFlowPlant_MainMdlProgCallingMngrName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MainMdlProgCallingMngrName_type, char > SimFlowPlant_MainMdlProgCallingMngrName_traits;

        const SimFlowPlant_MainMdlProgCallingMngrName_optional&
        SimFlowPlant_MainMdlProgCallingMngrName () const;

        SimFlowPlant_MainMdlProgCallingMngrName_optional&
        SimFlowPlant_MainMdlProgCallingMngrName ();

        void
        SimFlowPlant_MainMdlProgCallingMngrName (const SimFlowPlant_MainMdlProgCallingMngrName_type& x);

        void
        SimFlowPlant_MainMdlProgCallingMngrName (const SimFlowPlant_MainMdlProgCallingMngrName_optional& x);

        void
        SimFlowPlant_MainMdlProgCallingMngrName (::std::auto_ptr< SimFlowPlant_MainMdlProgCallingMngrName_type > p);

        // SimFlowPlant_NumberOfPlantLoopConns
        //
        typedef ::xml_schema::int_ SimFlowPlant_NumberOfPlantLoopConns_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NumberOfPlantLoopConns_type > SimFlowPlant_NumberOfPlantLoopConns_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NumberOfPlantLoopConns_type, char > SimFlowPlant_NumberOfPlantLoopConns_traits;

        const SimFlowPlant_NumberOfPlantLoopConns_optional&
        SimFlowPlant_NumberOfPlantLoopConns () const;

        SimFlowPlant_NumberOfPlantLoopConns_optional&
        SimFlowPlant_NumberOfPlantLoopConns ();

        void
        SimFlowPlant_NumberOfPlantLoopConns (const SimFlowPlant_NumberOfPlantLoopConns_type& x);

        void
        SimFlowPlant_NumberOfPlantLoopConns (const SimFlowPlant_NumberOfPlantLoopConns_optional& x);

        // SimFlowPlant_PlantConn_1_4_InletNodeName
        //
        typedef ::schema::simxml::MepModel::SimFlowPlant_PlantConn_1_4_InletNodeName SimFlowPlant_PlantConn_1_4_InletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PlantConn_1_4_InletNodeName_type > SimFlowPlant_PlantConn_1_4_InletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PlantConn_1_4_InletNodeName_type, char > SimFlowPlant_PlantConn_1_4_InletNodeName_traits;

        const SimFlowPlant_PlantConn_1_4_InletNodeName_optional&
        SimFlowPlant_PlantConn_1_4_InletNodeName () const;

        SimFlowPlant_PlantConn_1_4_InletNodeName_optional&
        SimFlowPlant_PlantConn_1_4_InletNodeName ();

        void
        SimFlowPlant_PlantConn_1_4_InletNodeName (const SimFlowPlant_PlantConn_1_4_InletNodeName_type& x);

        void
        SimFlowPlant_PlantConn_1_4_InletNodeName (const SimFlowPlant_PlantConn_1_4_InletNodeName_optional& x);

        void
        SimFlowPlant_PlantConn_1_4_InletNodeName (::std::auto_ptr< SimFlowPlant_PlantConn_1_4_InletNodeName_type > p);

        // SimFlowPlant_PlantConn_1_4_OutletNodeName
        //
        typedef ::schema::simxml::MepModel::SimFlowPlant_PlantConn_1_4_OutletNodeName SimFlowPlant_PlantConn_1_4_OutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PlantConn_1_4_OutletNodeName_type > SimFlowPlant_PlantConn_1_4_OutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PlantConn_1_4_OutletNodeName_type, char > SimFlowPlant_PlantConn_1_4_OutletNodeName_traits;

        const SimFlowPlant_PlantConn_1_4_OutletNodeName_optional&
        SimFlowPlant_PlantConn_1_4_OutletNodeName () const;

        SimFlowPlant_PlantConn_1_4_OutletNodeName_optional&
        SimFlowPlant_PlantConn_1_4_OutletNodeName ();

        void
        SimFlowPlant_PlantConn_1_4_OutletNodeName (const SimFlowPlant_PlantConn_1_4_OutletNodeName_type& x);

        void
        SimFlowPlant_PlantConn_1_4_OutletNodeName (const SimFlowPlant_PlantConn_1_4_OutletNodeName_optional& x);

        void
        SimFlowPlant_PlantConn_1_4_OutletNodeName (::std::auto_ptr< SimFlowPlant_PlantConn_1_4_OutletNodeName_type > p);

        // SimFlowPlant_PlantConn_1_4_LoadingMode
        //
        typedef ::schema::simxml::MepModel::SimFlowPlant_PlantConn_1_4_LoadingMode SimFlowPlant_PlantConn_1_4_LoadingMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PlantConn_1_4_LoadingMode_type > SimFlowPlant_PlantConn_1_4_LoadingMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PlantConn_1_4_LoadingMode_type, char > SimFlowPlant_PlantConn_1_4_LoadingMode_traits;

        const SimFlowPlant_PlantConn_1_4_LoadingMode_optional&
        SimFlowPlant_PlantConn_1_4_LoadingMode () const;

        SimFlowPlant_PlantConn_1_4_LoadingMode_optional&
        SimFlowPlant_PlantConn_1_4_LoadingMode ();

        void
        SimFlowPlant_PlantConn_1_4_LoadingMode (const SimFlowPlant_PlantConn_1_4_LoadingMode_type& x);

        void
        SimFlowPlant_PlantConn_1_4_LoadingMode (const SimFlowPlant_PlantConn_1_4_LoadingMode_optional& x);

        void
        SimFlowPlant_PlantConn_1_4_LoadingMode (::std::auto_ptr< SimFlowPlant_PlantConn_1_4_LoadingMode_type > p);

        // SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode
        //
        typedef ::schema::simxml::MepModel::SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_type > SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_type, char > SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_traits;

        const SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_optional&
        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode () const;

        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_optional&
        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode ();

        void
        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode (const SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_type& x);

        void
        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode (const SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_optional& x);

        void
        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode (::std::auto_ptr< SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_type > p);

        // SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName
        //
        typedef ::xml_schema::idrefs SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_type > SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_type, char > SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_traits;

        const SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_optional&
        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName () const;

        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_optional&
        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName ();

        void
        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName (const SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_type& x);

        void
        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName (const SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_optional& x);

        void
        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName (::std::auto_ptr< SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_type > p);

        // SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName
        //
        typedef ::xml_schema::idrefs SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_type > SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_type, char > SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_traits;

        const SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_optional&
        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName () const;

        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_optional&
        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName ();

        void
        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName (const SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_type& x);

        void
        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName (const SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_optional& x);

        void
        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName (::std::auto_ptr< SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_type > p);

        // SimFlowPlant_AirConnInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_AirConnInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirConnInletNodeName_type > SimFlowPlant_AirConnInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirConnInletNodeName_type, char > SimFlowPlant_AirConnInletNodeName_traits;

        const SimFlowPlant_AirConnInletNodeName_optional&
        SimFlowPlant_AirConnInletNodeName () const;

        SimFlowPlant_AirConnInletNodeName_optional&
        SimFlowPlant_AirConnInletNodeName ();

        void
        SimFlowPlant_AirConnInletNodeName (const SimFlowPlant_AirConnInletNodeName_type& x);

        void
        SimFlowPlant_AirConnInletNodeName (const SimFlowPlant_AirConnInletNodeName_optional& x);

        void
        SimFlowPlant_AirConnInletNodeName (::std::auto_ptr< SimFlowPlant_AirConnInletNodeName_type > p);

        // SimFlowPlant_AirConnOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_AirConnOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirConnOutletNodeName_type > SimFlowPlant_AirConnOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirConnOutletNodeName_type, char > SimFlowPlant_AirConnOutletNodeName_traits;

        const SimFlowPlant_AirConnOutletNodeName_optional&
        SimFlowPlant_AirConnOutletNodeName () const;

        SimFlowPlant_AirConnOutletNodeName_optional&
        SimFlowPlant_AirConnOutletNodeName ();

        void
        SimFlowPlant_AirConnOutletNodeName (const SimFlowPlant_AirConnOutletNodeName_type& x);

        void
        SimFlowPlant_AirConnOutletNodeName (const SimFlowPlant_AirConnOutletNodeName_optional& x);

        void
        SimFlowPlant_AirConnOutletNodeName (::std::auto_ptr< SimFlowPlant_AirConnOutletNodeName_type > p);

        // SimFlowPlant_SupplyInletWaterStorageTankName
        //
        typedef ::xml_schema::idref SimFlowPlant_SupplyInletWaterStorageTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SupplyInletWaterStorageTankName_type > SimFlowPlant_SupplyInletWaterStorageTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SupplyInletWaterStorageTankName_type, char > SimFlowPlant_SupplyInletWaterStorageTankName_traits;

        const SimFlowPlant_SupplyInletWaterStorageTankName_optional&
        SimFlowPlant_SupplyInletWaterStorageTankName () const;

        SimFlowPlant_SupplyInletWaterStorageTankName_optional&
        SimFlowPlant_SupplyInletWaterStorageTankName ();

        void
        SimFlowPlant_SupplyInletWaterStorageTankName (const SimFlowPlant_SupplyInletWaterStorageTankName_type& x);

        void
        SimFlowPlant_SupplyInletWaterStorageTankName (const SimFlowPlant_SupplyInletWaterStorageTankName_optional& x);

        void
        SimFlowPlant_SupplyInletWaterStorageTankName (::std::auto_ptr< SimFlowPlant_SupplyInletWaterStorageTankName_type > p);

        // SimFlowPlant_CollectionOutletWaterStorageTankName
        //
        typedef ::xml_schema::idref SimFlowPlant_CollectionOutletWaterStorageTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CollectionOutletWaterStorageTankName_type > SimFlowPlant_CollectionOutletWaterStorageTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CollectionOutletWaterStorageTankName_type, char > SimFlowPlant_CollectionOutletWaterStorageTankName_traits;

        const SimFlowPlant_CollectionOutletWaterStorageTankName_optional&
        SimFlowPlant_CollectionOutletWaterStorageTankName () const;

        SimFlowPlant_CollectionOutletWaterStorageTankName_optional&
        SimFlowPlant_CollectionOutletWaterStorageTankName ();

        void
        SimFlowPlant_CollectionOutletWaterStorageTankName (const SimFlowPlant_CollectionOutletWaterStorageTankName_type& x);

        void
        SimFlowPlant_CollectionOutletWaterStorageTankName (const SimFlowPlant_CollectionOutletWaterStorageTankName_optional& x);

        void
        SimFlowPlant_CollectionOutletWaterStorageTankName (::std::auto_ptr< SimFlowPlant_CollectionOutletWaterStorageTankName_type > p);

        // SimFlowPlant_AmbientZoneName
        //
        typedef ::xml_schema::idref SimFlowPlant_AmbientZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AmbientZoneName_type > SimFlowPlant_AmbientZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AmbientZoneName_type, char > SimFlowPlant_AmbientZoneName_traits;

        const SimFlowPlant_AmbientZoneName_optional&
        SimFlowPlant_AmbientZoneName () const;

        SimFlowPlant_AmbientZoneName_optional&
        SimFlowPlant_AmbientZoneName ();

        void
        SimFlowPlant_AmbientZoneName (const SimFlowPlant_AmbientZoneName_type& x);

        void
        SimFlowPlant_AmbientZoneName (const SimFlowPlant_AmbientZoneName_optional& x);

        void
        SimFlowPlant_AmbientZoneName (::std::auto_ptr< SimFlowPlant_AmbientZoneName_type > p);

        // Constructors.
        //
        SimFlowPlant_PlantComponent ();

        SimFlowPlant_PlantComponent (const RefId_type&);

        SimFlowPlant_PlantComponent (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        SimFlowPlant_PlantComponent (const SimFlowPlant_PlantComponent& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        virtual SimFlowPlant_PlantComponent*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_PlantComponent&
        operator= (const SimFlowPlant_PlantComponent& x);

        virtual 
        ~SimFlowPlant_PlantComponent ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        Representation_optional Representation_;
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_MainMdlProgCallingMngrName_optional SimFlowPlant_MainMdlProgCallingMngrName_;
        SimFlowPlant_NumberOfPlantLoopConns_optional SimFlowPlant_NumberOfPlantLoopConns_;
        SimFlowPlant_PlantConn_1_4_InletNodeName_optional SimFlowPlant_PlantConn_1_4_InletNodeName_;
        SimFlowPlant_PlantConn_1_4_OutletNodeName_optional SimFlowPlant_PlantConn_1_4_OutletNodeName_;
        SimFlowPlant_PlantConn_1_4_LoadingMode_optional SimFlowPlant_PlantConn_1_4_LoadingMode_;
        SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_optional SimFlowPlant_PlantConn_1_4_LoopFlowRequestMode_;
        SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_optional SimFlowPlant_PlantConn_1_4_InitializationProgCallingMngrName_;
        SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_optional SimFlowPlant_PlantConn_1_4_SimulationProgCallingMngrName_;
        SimFlowPlant_AirConnInletNodeName_optional SimFlowPlant_AirConnInletNodeName_;
        SimFlowPlant_AirConnOutletNodeName_optional SimFlowPlant_AirConnOutletNodeName_;
        SimFlowPlant_SupplyInletWaterStorageTankName_optional SimFlowPlant_SupplyInletWaterStorageTankName_;
        SimFlowPlant_CollectionOutletWaterStorageTankName_optional SimFlowPlant_CollectionOutletWaterStorageTankName_;
        SimFlowPlant_AmbientZoneName_optional SimFlowPlant_AmbientZoneName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_PLANT_COMPONENT_HXX
