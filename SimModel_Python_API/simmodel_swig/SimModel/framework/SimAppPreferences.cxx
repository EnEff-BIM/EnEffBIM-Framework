// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimAppPreferences.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimAppPreferences
      // 

      const SimAppPreferences::CurrentUserInterfaceUnits_optional& SimAppPreferences::
      CurrentUserInterfaceUnits () const
      {
        return this->CurrentUserInterfaceUnits_;
      }

      SimAppPreferences::CurrentUserInterfaceUnits_optional& SimAppPreferences::
      CurrentUserInterfaceUnits ()
      {
        return this->CurrentUserInterfaceUnits_;
      }

      void SimAppPreferences::
      CurrentUserInterfaceUnits (const CurrentUserInterfaceUnits_type& x)
      {
        this->CurrentUserInterfaceUnits_.set (x);
      }

      void SimAppPreferences::
      CurrentUserInterfaceUnits (const CurrentUserInterfaceUnits_optional& x)
      {
        this->CurrentUserInterfaceUnits_ = x;
      }

      void SimAppPreferences::
      CurrentUserInterfaceUnits (::std::auto_ptr< CurrentUserInterfaceUnits_type > x)
      {
        this->CurrentUserInterfaceUnits_.set (x);
      }

      const SimAppPreferences::AutoSave_optional& SimAppPreferences::
      AutoSave () const
      {
        return this->AutoSave_;
      }

      SimAppPreferences::AutoSave_optional& SimAppPreferences::
      AutoSave ()
      {
        return this->AutoSave_;
      }

      void SimAppPreferences::
      AutoSave (const AutoSave_type& x)
      {
        this->AutoSave_.set (x);
      }

      void SimAppPreferences::
      AutoSave (const AutoSave_optional& x)
      {
        this->AutoSave_ = x;
      }

      const SimAppPreferences::AutoSaveInterval_optional& SimAppPreferences::
      AutoSaveInterval () const
      {
        return this->AutoSaveInterval_;
      }

      SimAppPreferences::AutoSaveInterval_optional& SimAppPreferences::
      AutoSaveInterval ()
      {
        return this->AutoSaveInterval_;
      }

      void SimAppPreferences::
      AutoSaveInterval (const AutoSaveInterval_type& x)
      {
        this->AutoSaveInterval_.set (x);
      }

      void SimAppPreferences::
      AutoSaveInterval (const AutoSaveInterval_optional& x)
      {
        this->AutoSaveInterval_ = x;
      }

      const SimAppPreferences::MaxAutoSaveFiles_optional& SimAppPreferences::
      MaxAutoSaveFiles () const
      {
        return this->MaxAutoSaveFiles_;
      }

      SimAppPreferences::MaxAutoSaveFiles_optional& SimAppPreferences::
      MaxAutoSaveFiles ()
      {
        return this->MaxAutoSaveFiles_;
      }

      void SimAppPreferences::
      MaxAutoSaveFiles (const MaxAutoSaveFiles_type& x)
      {
        this->MaxAutoSaveFiles_.set (x);
      }

      void SimAppPreferences::
      MaxAutoSaveFiles (const MaxAutoSaveFiles_optional& x)
      {
        this->MaxAutoSaveFiles_ = x;
      }

      const SimAppPreferences::MonthlyChargeIsDecimal_optional& SimAppPreferences::
      MonthlyChargeIsDecimal () const
      {
        return this->MonthlyChargeIsDecimal_;
      }

      SimAppPreferences::MonthlyChargeIsDecimal_optional& SimAppPreferences::
      MonthlyChargeIsDecimal ()
      {
        return this->MonthlyChargeIsDecimal_;
      }

      void SimAppPreferences::
      MonthlyChargeIsDecimal (const MonthlyChargeIsDecimal_type& x)
      {
        this->MonthlyChargeIsDecimal_.set (x);
      }

      void SimAppPreferences::
      MonthlyChargeIsDecimal (const MonthlyChargeIsDecimal_optional& x)
      {
        this->MonthlyChargeIsDecimal_ = x;
      }

      const SimAppPreferences::MinMonthlyChargeIsDecimal_optional& SimAppPreferences::
      MinMonthlyChargeIsDecimal () const
      {
        return this->MinMonthlyChargeIsDecimal_;
      }

      SimAppPreferences::MinMonthlyChargeIsDecimal_optional& SimAppPreferences::
      MinMonthlyChargeIsDecimal ()
      {
        return this->MinMonthlyChargeIsDecimal_;
      }

      void SimAppPreferences::
      MinMonthlyChargeIsDecimal (const MinMonthlyChargeIsDecimal_type& x)
      {
        this->MinMonthlyChargeIsDecimal_.set (x);
      }

      void SimAppPreferences::
      MinMonthlyChargeIsDecimal (const MinMonthlyChargeIsDecimal_optional& x)
      {
        this->MinMonthlyChargeIsDecimal_ = x;
      }

      const SimAppPreferences::EPlusInstalVersion_optional& SimAppPreferences::
      EPlusInstalVersion () const
      {
        return this->EPlusInstalVersion_;
      }

      SimAppPreferences::EPlusInstalVersion_optional& SimAppPreferences::
      EPlusInstalVersion ()
      {
        return this->EPlusInstalVersion_;
      }

      void SimAppPreferences::
      EPlusInstalVersion (const EPlusInstalVersion_type& x)
      {
        this->EPlusInstalVersion_.set (x);
      }

      void SimAppPreferences::
      EPlusInstalVersion (const EPlusInstalVersion_optional& x)
      {
        this->EPlusInstalVersion_ = x;
      }

      void SimAppPreferences::
      EPlusInstalVersion (::std::auto_ptr< EPlusInstalVersion_type > x)
      {
        this->EPlusInstalVersion_.set (x);
      }

      const SimAppPreferences::EPlusInstalPath_optional& SimAppPreferences::
      EPlusInstalPath () const
      {
        return this->EPlusInstalPath_;
      }

      SimAppPreferences::EPlusInstalPath_optional& SimAppPreferences::
      EPlusInstalPath ()
      {
        return this->EPlusInstalPath_;
      }

      void SimAppPreferences::
      EPlusInstalPath (const EPlusInstalPath_type& x)
      {
        this->EPlusInstalPath_.set (x);
      }

      void SimAppPreferences::
      EPlusInstalPath (const EPlusInstalPath_optional& x)
      {
        this->EPlusInstalPath_ = x;
      }

      void SimAppPreferences::
      EPlusInstalPath (::std::auto_ptr< EPlusInstalPath_type > x)
      {
        this->EPlusInstalPath_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimAppPreferences
      //

      SimAppPreferences::
      SimAppPreferences ()
      : ::schema::simxml::SimModelCore::SimAppDefault (),
        CurrentUserInterfaceUnits_ (this),
        AutoSave_ (this),
        AutoSaveInterval_ (this),
        MaxAutoSaveFiles_ (this),
        MonthlyChargeIsDecimal_ (this),
        MinMonthlyChargeIsDecimal_ (this),
        EPlusInstalVersion_ (this),
        EPlusInstalPath_ (this)
      {
      }

      SimAppPreferences::
      SimAppPreferences (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimAppDefault (RefId),
        CurrentUserInterfaceUnits_ (this),
        AutoSave_ (this),
        AutoSaveInterval_ (this),
        MaxAutoSaveFiles_ (this),
        MonthlyChargeIsDecimal_ (this),
        MinMonthlyChargeIsDecimal_ (this),
        EPlusInstalVersion_ (this),
        EPlusInstalPath_ (this)
      {
      }

      SimAppPreferences::
      SimAppPreferences (const SimAppPreferences& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimAppDefault (x, f, c),
        CurrentUserInterfaceUnits_ (x.CurrentUserInterfaceUnits_, f, this),
        AutoSave_ (x.AutoSave_, f, this),
        AutoSaveInterval_ (x.AutoSaveInterval_, f, this),
        MaxAutoSaveFiles_ (x.MaxAutoSaveFiles_, f, this),
        MonthlyChargeIsDecimal_ (x.MonthlyChargeIsDecimal_, f, this),
        MinMonthlyChargeIsDecimal_ (x.MinMonthlyChargeIsDecimal_, f, this),
        EPlusInstalVersion_ (x.EPlusInstalVersion_, f, this),
        EPlusInstalPath_ (x.EPlusInstalPath_, f, this)
      {
      }

      SimAppPreferences::
      SimAppPreferences (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimAppDefault (e, f | ::xml_schema::flags::base, c),
        CurrentUserInterfaceUnits_ (this),
        AutoSave_ (this),
        AutoSaveInterval_ (this),
        MaxAutoSaveFiles_ (this),
        MonthlyChargeIsDecimal_ (this),
        MinMonthlyChargeIsDecimal_ (this),
        EPlusInstalVersion_ (this),
        EPlusInstalPath_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimAppPreferences::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimAppDefault::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CurrentUserInterfaceUnits
          //
          if (n.name () == "CurrentUserInterfaceUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< CurrentUserInterfaceUnits_type > r (
              CurrentUserInterfaceUnits_traits::create (i, f, this));

            if (!this->CurrentUserInterfaceUnits_)
            {
              this->CurrentUserInterfaceUnits_.set (r);
              continue;
            }
          }

          // AutoSave
          //
          if (n.name () == "AutoSave" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->AutoSave_)
            {
              this->AutoSave_.set (AutoSave_traits::create (i, f, this));
              continue;
            }
          }

          // AutoSaveInterval
          //
          if (n.name () == "AutoSaveInterval" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->AutoSaveInterval_)
            {
              this->AutoSaveInterval_.set (AutoSaveInterval_traits::create (i, f, this));
              continue;
            }
          }

          // MaxAutoSaveFiles
          //
          if (n.name () == "MaxAutoSaveFiles" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->MaxAutoSaveFiles_)
            {
              this->MaxAutoSaveFiles_.set (MaxAutoSaveFiles_traits::create (i, f, this));
              continue;
            }
          }

          // MonthlyChargeIsDecimal
          //
          if (n.name () == "MonthlyChargeIsDecimal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->MonthlyChargeIsDecimal_)
            {
              this->MonthlyChargeIsDecimal_.set (MonthlyChargeIsDecimal_traits::create (i, f, this));
              continue;
            }
          }

          // MinMonthlyChargeIsDecimal
          //
          if (n.name () == "MinMonthlyChargeIsDecimal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->MinMonthlyChargeIsDecimal_)
            {
              this->MinMonthlyChargeIsDecimal_.set (MinMonthlyChargeIsDecimal_traits::create (i, f, this));
              continue;
            }
          }

          // EPlusInstalVersion
          //
          if (n.name () == "EPlusInstalVersion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< EPlusInstalVersion_type > r (
              EPlusInstalVersion_traits::create (i, f, this));

            if (!this->EPlusInstalVersion_)
            {
              this->EPlusInstalVersion_.set (r);
              continue;
            }
          }

          // EPlusInstalPath
          //
          if (n.name () == "EPlusInstalPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< EPlusInstalPath_type > r (
              EPlusInstalPath_traits::create (i, f, this));

            if (!this->EPlusInstalPath_)
            {
              this->EPlusInstalPath_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimAppPreferences* SimAppPreferences::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimAppPreferences (*this, f, c);
      }

      SimAppPreferences& SimAppPreferences::
      operator= (const SimAppPreferences& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimAppDefault& > (*this) = x;
          this->CurrentUserInterfaceUnits_ = x.CurrentUserInterfaceUnits_;
          this->AutoSave_ = x.AutoSave_;
          this->AutoSaveInterval_ = x.AutoSaveInterval_;
          this->MaxAutoSaveFiles_ = x.MaxAutoSaveFiles_;
          this->MonthlyChargeIsDecimal_ = x.MonthlyChargeIsDecimal_;
          this->MinMonthlyChargeIsDecimal_ = x.MinMonthlyChargeIsDecimal_;
          this->EPlusInstalVersion_ = x.EPlusInstalVersion_;
          this->EPlusInstalPath_ = x.EPlusInstalPath_;
        }

        return *this;
      }

      SimAppPreferences::
      ~SimAppPreferences ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

