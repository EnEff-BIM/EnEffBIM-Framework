// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindow_Window_ExteriorDetailed.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWindow_Window_ExteriorDetailed
      // 

      const SimWindow_Window_ExteriorDetailed::SimWindow_Name_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_Name () const
      {
        return this->SimWindow_Name_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_Name_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_Name ()
      {
        return this->SimWindow_Name_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_Name (const SimWindow_Name_type& x)
      {
        this->SimWindow_Name_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_Name (const SimWindow_Name_optional& x)
      {
        this->SimWindow_Name_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_Name (::std::auto_ptr< SimWindow_Name_type > x)
      {
        this->SimWindow_Name_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_SurfType_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_SurfType () const
      {
        return this->SimWindow_SurfType_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_SurfType_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_SurfType ()
      {
        return this->SimWindow_SurfType_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_SurfType (const SimWindow_SurfType_type& x)
      {
        this->SimWindow_SurfType_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_SurfType (const SimWindow_SurfType_optional& x)
      {
        this->SimWindow_SurfType_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_SurfType (::std::auto_ptr< SimWindow_SurfType_type > x)
      {
        this->SimWindow_SurfType_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_ConstructionName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_ConstructionName () const
      {
        return this->SimWindow_ConstructionName_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_ConstructionName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_ConstructionName ()
      {
        return this->SimWindow_ConstructionName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_type& x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_optional& x)
      {
        this->SimWindow_ConstructionName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ConstructionName (::std::auto_ptr< SimWindow_ConstructionName_type > x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_BldgSurfName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_BldgSurfName () const
      {
        return this->SimWindow_BldgSurfName_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_BldgSurfName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_BldgSurfName ()
      {
        return this->SimWindow_BldgSurfName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_type& x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_optional& x)
      {
        this->SimWindow_BldgSurfName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_BldgSurfName (::std::auto_ptr< SimWindow_BldgSurfName_type > x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_OutsdBndCondObject_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_OutsdBndCondObject () const
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_OutsdBndCondObject_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_OutsdBndCondObject ()
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_type& x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_optional& x)
      {
        this->SimWindow_OutsdBndCondObject_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (::std::auto_ptr< SimWindow_OutsdBndCondObject_type > x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_ViewFactToGnd_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_ViewFactToGnd () const
      {
        return this->SimWindow_ViewFactToGnd_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_ViewFactToGnd_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_ViewFactToGnd ()
      {
        return this->SimWindow_ViewFactToGnd_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_type& x)
      {
        this->SimWindow_ViewFactToGnd_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_optional& x)
      {
        this->SimWindow_ViewFactToGnd_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_ShadingContName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_ShadingContName () const
      {
        return this->SimWindow_ShadingContName_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_ShadingContName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_ShadingContName ()
      {
        return this->SimWindow_ShadingContName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ShadingContName (const SimWindow_ShadingContName_type& x)
      {
        this->SimWindow_ShadingContName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ShadingContName (const SimWindow_ShadingContName_optional& x)
      {
        this->SimWindow_ShadingContName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_ShadingContName (::std::auto_ptr< SimWindow_ShadingContName_type > x)
      {
        this->SimWindow_ShadingContName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_FrmAndDivName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_FrmAndDivName () const
      {
        return this->SimWindow_FrmAndDivName_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_FrmAndDivName_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_FrmAndDivName ()
      {
        return this->SimWindow_FrmAndDivName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_type& x)
      {
        this->SimWindow_FrmAndDivName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_optional& x)
      {
        this->SimWindow_FrmAndDivName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_FrmAndDivName (::std::auto_ptr< SimWindow_FrmAndDivName_type > x)
      {
        this->SimWindow_FrmAndDivName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_Mult_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_Mult () const
      {
        return this->SimWindow_Mult_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_Mult_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_Mult ()
      {
        return this->SimWindow_Mult_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_Mult (const SimWindow_Mult_type& x)
      {
        this->SimWindow_Mult_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_Mult (const SimWindow_Mult_optional& x)
      {
        this->SimWindow_Mult_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_NumbVerts_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_NumbVerts () const
      {
        return this->SimWindow_NumbVerts_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_NumbVerts_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_NumbVerts ()
      {
        return this->SimWindow_NumbVerts_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_NumbVerts (const SimWindow_NumbVerts_type& x)
      {
        this->SimWindow_NumbVerts_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_NumbVerts (const SimWindow_NumbVerts_optional& x)
      {
        this->SimWindow_NumbVerts_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_VertexXCoord_1_4_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 () const
      {
        return this->SimWindow_VertexXCoord_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_VertexXCoord_1_4_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 ()
      {
        return this->SimWindow_VertexXCoord_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_type& x)
      {
        this->SimWindow_VertexXCoord_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_optional& x)
      {
        this->SimWindow_VertexXCoord_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > x)
      {
        this->SimWindow_VertexXCoord_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_VertexYCoord_1_4_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 () const
      {
        return this->SimWindow_VertexYCoord_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_VertexYCoord_1_4_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 ()
      {
        return this->SimWindow_VertexYCoord_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_type& x)
      {
        this->SimWindow_VertexYCoord_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_optional& x)
      {
        this->SimWindow_VertexYCoord_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > x)
      {
        this->SimWindow_VertexYCoord_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::SimWindow_VertexZCoord_1_4_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 () const
      {
        return this->SimWindow_VertexZCoord_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::SimWindow_VertexZCoord_1_4_optional& SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 ()
      {
        return this->SimWindow_VertexZCoord_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_type& x)
      {
        this->SimWindow_VertexZCoord_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_optional& x)
      {
        this->SimWindow_VertexZCoord_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > x)
      {
        this->SimWindow_VertexZCoord_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
      }

      SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name (const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name (const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
      }

      SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
      }

      SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
      }

      SimWindow_Window_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_Name_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_Name () const
      {
        return this->WindowProp_AirflowControl_Name_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_Name_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_Name ()
      {
        return this->WindowProp_AirflowControl_Name_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_Name (const WindowProp_AirflowControl_Name_type& x)
      {
        this->WindowProp_AirflowControl_Name_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_Name (const WindowProp_AirflowControl_Name_optional& x)
      {
        this->WindowProp_AirflowControl_Name_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_Name (::std::auto_ptr< WindowProp_AirflowControl_Name_type > x)
      {
        this->WindowProp_AirflowControl_Name_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowSrc_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc () const
      {
        return this->WindowProp_AirflowControl_AirflowSrc_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowSrc_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc ()
      {
        return this->WindowProp_AirflowControl_AirflowSrc_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc (const WindowProp_AirflowControl_AirflowSrc_type& x)
      {
        this->WindowProp_AirflowControl_AirflowSrc_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc (const WindowProp_AirflowControl_AirflowSrc_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowSrc_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc (::std::auto_ptr< WindowProp_AirflowControl_AirflowSrc_type > x)
      {
        this->WindowProp_AirflowControl_AirflowSrc_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowDestination_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination () const
      {
        return this->WindowProp_AirflowControl_AirflowDestination_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowDestination_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination ()
      {
        return this->WindowProp_AirflowControl_AirflowDestination_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination (const WindowProp_AirflowControl_AirflowDestination_type& x)
      {
        this->WindowProp_AirflowControl_AirflowDestination_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination (const WindowProp_AirflowControl_AirflowDestination_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowDestination_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination (::std::auto_ptr< WindowProp_AirflowControl_AirflowDestination_type > x)
      {
        this->WindowProp_AirflowControl_AirflowDestination_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_MaxFlowRate_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate () const
      {
        return this->WindowProp_AirflowControl_MaxFlowRate_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_MaxFlowRate_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate ()
      {
        return this->WindowProp_AirflowControl_MaxFlowRate_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate (const WindowProp_AirflowControl_MaxFlowRate_type& x)
      {
        this->WindowProp_AirflowControl_MaxFlowRate_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate (const WindowProp_AirflowControl_MaxFlowRate_optional& x)
      {
        this->WindowProp_AirflowControl_MaxFlowRate_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowControlType_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType () const
      {
        return this->WindowProp_AirflowControl_AirflowControlType_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowControlType_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType ()
      {
        return this->WindowProp_AirflowControl_AirflowControlType_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType (const WindowProp_AirflowControl_AirflowControlType_type& x)
      {
        this->WindowProp_AirflowControl_AirflowControlType_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType (const WindowProp_AirflowControl_AirflowControlType_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowControlType_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType (::std::auto_ptr< WindowProp_AirflowControl_AirflowControlType_type > x)
      {
        this->WindowProp_AirflowControl_AirflowControlType_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowIsScheduled_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled () const
      {
        return this->WindowProp_AirflowControl_AirflowIsScheduled_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowIsScheduled_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled ()
      {
        return this->WindowProp_AirflowControl_AirflowIsScheduled_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled (const WindowProp_AirflowControl_AirflowIsScheduled_type& x)
      {
        this->WindowProp_AirflowControl_AirflowIsScheduled_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled (const WindowProp_AirflowControl_AirflowIsScheduled_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowIsScheduled_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled (::std::auto_ptr< WindowProp_AirflowControl_AirflowIsScheduled_type > x)
      {
        this->WindowProp_AirflowControl_AirflowIsScheduled_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName () const
      {
        return this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName ()
      {
        return this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName (const WindowProp_AirflowControl_AirflowMultiplierScheduleName_type& x)
      {
        this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName (const WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName (::std::auto_ptr< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type > x)
      {
        this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_WindName_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_WindName () const
      {
        return this->WindowProp_StormWindow_WindName_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_WindName_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_WindName ()
      {
        return this->WindowProp_StormWindow_WindName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_WindName (const WindowProp_StormWindow_WindName_type& x)
      {
        this->WindowProp_StormWindow_WindName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_WindName (const WindowProp_StormWindow_WindName_optional& x)
      {
        this->WindowProp_StormWindow_WindName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_WindName (::std::auto_ptr< WindowProp_StormWindow_WindName_type > x)
      {
        this->WindowProp_StormWindow_WindName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_StormGlassLayerName_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName () const
      {
        return this->WindowProp_StormWindow_StormGlassLayerName_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_StormGlassLayerName_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName ()
      {
        return this->WindowProp_StormWindow_StormGlassLayerName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName (const WindowProp_StormWindow_StormGlassLayerName_type& x)
      {
        this->WindowProp_StormWindow_StormGlassLayerName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName (const WindowProp_StormWindow_StormGlassLayerName_optional& x)
      {
        this->WindowProp_StormWindow_StormGlassLayerName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName (::std::auto_ptr< WindowProp_StormWindow_StormGlassLayerName_type > x)
      {
        this->WindowProp_StormWindow_StormGlassLayerName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass () const
      {
        return this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass ()
      {
        return this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass (const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_type& x)
      {
        this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass (const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& x)
      {
        this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn () const
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn ()
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_type& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn () const
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn ()
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_type& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff () const
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff ()
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_type& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff () const
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
      }

      SimWindow_Window_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff ()
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_type& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_Name_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_Name () const
      {
        return this->Daylight_DELight_CmplxFenestr_Name_;
      }

      SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_Name_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_Name ()
      {
        return this->Daylight_DELight_CmplxFenestr_Name_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_Name (const Daylight_DELight_CmplxFenestr_Name_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_Name_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_Name (const Daylight_DELight_CmplxFenestr_Name_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_Name_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_Name (::std::auto_ptr< Daylight_DELight_CmplxFenestr_Name_type > x)
      {
        this->Daylight_DELight_CmplxFenestr_Name_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType () const
      {
        return this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
      }

      SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType ()
      {
        return this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType (const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType (const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType (::std::auto_ptr< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type > x)
      {
        this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_BldgSurfName_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_BldgSurfName () const
      {
        return this->Daylight_DELight_CmplxFenestr_BldgSurfName_;
      }

      SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_BldgSurfName_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_BldgSurfName ()
      {
        return this->Daylight_DELight_CmplxFenestr_BldgSurfName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_BldgSurfName (const Daylight_DELight_CmplxFenestr_BldgSurfName_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_BldgSurfName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_BldgSurfName (const Daylight_DELight_CmplxFenestr_BldgSurfName_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_BldgSurfName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_BldgSurfName (::std::auto_ptr< Daylight_DELight_CmplxFenestr_BldgSurfName_type > x)
      {
        this->Daylight_DELight_CmplxFenestr_BldgSurfName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_WindName_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_WindName () const
      {
        return this->Daylight_DELight_CmplxFenestr_WindName_;
      }

      SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_WindName_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_WindName ()
      {
        return this->Daylight_DELight_CmplxFenestr_WindName_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_WindName (const Daylight_DELight_CmplxFenestr_WindName_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_WindName_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_WindName (const Daylight_DELight_CmplxFenestr_WindName_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_WindName_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_WindName (::std::auto_ptr< Daylight_DELight_CmplxFenestr_WindName_type > x)
      {
        this->Daylight_DELight_CmplxFenestr_WindName_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation () const
      {
        return this->Daylight_DELight_CmplxFenestr_FenestrationRotation_;
      }

      SimWindow_Window_ExteriorDetailed::Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation ()
      {
        return this->Daylight_DELight_CmplxFenestr_FenestrationRotation_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation (const Daylight_DELight_CmplxFenestr_FenestrationRotation_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_FenestrationRotation_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation (const Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_FenestrationRotation_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_Name_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_Name () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_Name_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_Name_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_Name ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_Name_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_Name (const Airflow_MZone_Comp_DetldOpng_Name_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_Name_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_Name (const Airflow_MZone_Comp_DetldOpng_Name_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_Name_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_Name (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_Name_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_Name_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_Name_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_Name () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_Name_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_Name_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_Name ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_Name_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_Name (const Airflow_MZone_Comp_SmplOpng_Name_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_Name_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_Name (const Airflow_MZone_Comp_SmplOpng_Name_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_Name_ = x;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_Name (::std::auto_ptr< Airflow_MZone_Comp_SmplOpng_Name_type > x)
      {
        this->Airflow_MZone_Comp_SmplOpng_Name_.set (x);
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x;
      }

      const SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      SimWindow_Window_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (x);
      }

      void SimWindow_Window_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWindow_Window_ExteriorDetailed
      //

      SimWindow_Window_ExteriorDetailed::
      SimWindow_Window_ExteriorDetailed ()
      : ::schema::simxml::BuildingModel::SimWindow_Window (),
        SimWindow_Name_ (this),
        SimWindow_SurfType_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (this),
        WindowProp_AirflowControl_Name_ (this),
        WindowProp_AirflowControl_AirflowSrc_ (this),
        WindowProp_AirflowControl_AirflowDestination_ (this),
        WindowProp_AirflowControl_MaxFlowRate_ (this),
        WindowProp_AirflowControl_AirflowControlType_ (this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (this),
        WindowProp_StormWindow_WindName_ (this),
        WindowProp_StormWindow_StormGlassLayerName_ (this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (this),
        Daylight_DELight_CmplxFenestr_Name_ (this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (this),
        Daylight_DELight_CmplxFenestr_BldgSurfName_ (this),
        Daylight_DELight_CmplxFenestr_WindName_ (this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (this),
        Airflow_MZone_Comp_DetldOpng_Name_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_Name_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
      }

      SimWindow_Window_ExteriorDetailed::
      SimWindow_Window_ExteriorDetailed (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimWindow_Window (RefId),
        SimWindow_Name_ (this),
        SimWindow_SurfType_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (this),
        WindowProp_AirflowControl_Name_ (this),
        WindowProp_AirflowControl_AirflowSrc_ (this),
        WindowProp_AirflowControl_AirflowDestination_ (this),
        WindowProp_AirflowControl_MaxFlowRate_ (this),
        WindowProp_AirflowControl_AirflowControlType_ (this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (this),
        WindowProp_StormWindow_WindName_ (this),
        WindowProp_StormWindow_StormGlassLayerName_ (this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (this),
        Daylight_DELight_CmplxFenestr_Name_ (this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (this),
        Daylight_DELight_CmplxFenestr_BldgSurfName_ (this),
        Daylight_DELight_CmplxFenestr_WindName_ (this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (this),
        Airflow_MZone_Comp_DetldOpng_Name_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_Name_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
      }

      SimWindow_Window_ExteriorDetailed::
      SimWindow_Window_ExteriorDetailed (const SimWindow_Window_ExteriorDetailed& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWindow_Window (x, f, c),
        SimWindow_Name_ (x.SimWindow_Name_, f, this),
        SimWindow_SurfType_ (x.SimWindow_SurfType_, f, this),
        SimWindow_ConstructionName_ (x.SimWindow_ConstructionName_, f, this),
        SimWindow_BldgSurfName_ (x.SimWindow_BldgSurfName_, f, this),
        SimWindow_OutsdBndCondObject_ (x.SimWindow_OutsdBndCondObject_, f, this),
        SimWindow_ViewFactToGnd_ (x.SimWindow_ViewFactToGnd_, f, this),
        SimWindow_ShadingContName_ (x.SimWindow_ShadingContName_, f, this),
        SimWindow_FrmAndDivName_ (x.SimWindow_FrmAndDivName_, f, this),
        SimWindow_Mult_ (x.SimWindow_Mult_, f, this),
        SimWindow_NumbVerts_ (x.SimWindow_NumbVerts_, f, this),
        SimWindow_VertexXCoord_1_4_ (x.SimWindow_VertexXCoord_1_4_, f, this),
        SimWindow_VertexYCoord_1_4_ (x.SimWindow_VertexYCoord_1_4_, f, this),
        SimWindow_VertexZCoord_1_4_ (x.SimWindow_VertexZCoord_1_4_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_Name_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_, f, this),
        WindowProp_AirflowControl_Name_ (x.WindowProp_AirflowControl_Name_, f, this),
        WindowProp_AirflowControl_AirflowSrc_ (x.WindowProp_AirflowControl_AirflowSrc_, f, this),
        WindowProp_AirflowControl_AirflowDestination_ (x.WindowProp_AirflowControl_AirflowDestination_, f, this),
        WindowProp_AirflowControl_MaxFlowRate_ (x.WindowProp_AirflowControl_MaxFlowRate_, f, this),
        WindowProp_AirflowControl_AirflowControlType_ (x.WindowProp_AirflowControl_AirflowControlType_, f, this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (x.WindowProp_AirflowControl_AirflowIsScheduled_, f, this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (x.WindowProp_AirflowControl_AirflowMultiplierScheduleName_, f, this),
        WindowProp_StormWindow_WindName_ (x.WindowProp_StormWindow_WindName_, f, this),
        WindowProp_StormWindow_StormGlassLayerName_ (x.WindowProp_StormWindow_StormGlassLayerName_, f, this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (x.WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_, f, this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (x.WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_, f, this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_, f, this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (x.WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_, f, this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_, f, this),
        Daylight_DELight_CmplxFenestr_Name_ (x.Daylight_DELight_CmplxFenestr_Name_, f, this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (x.Daylight_DELight_CmplxFenestr_ComplexFenestrationType_, f, this),
        Daylight_DELight_CmplxFenestr_BldgSurfName_ (x.Daylight_DELight_CmplxFenestr_BldgSurfName_, f, this),
        Daylight_DELight_CmplxFenestr_WindName_ (x.Daylight_DELight_CmplxFenestr_WindName_, f, this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (x.Daylight_DELight_CmplxFenestr_FenestrationRotation_, f, this),
        Airflow_MZone_Comp_DetldOpng_Name_ (x.Airflow_MZone_Comp_DetldOpng_Name_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_, f, this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_, f, this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_, f, this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_SmplOpng_Name_ (x.Airflow_MZone_Comp_SmplOpng_Name_, f, this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_, f, this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_, f, this)
      {
      }

      SimWindow_Window_ExteriorDetailed::
      SimWindow_Window_ExteriorDetailed (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWindow_Window (e, f | ::xml_schema::flags::base, c),
        SimWindow_Name_ (this),
        SimWindow_SurfType_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (this),
        WindowProp_AirflowControl_Name_ (this),
        WindowProp_AirflowControl_AirflowSrc_ (this),
        WindowProp_AirflowControl_AirflowDestination_ (this),
        WindowProp_AirflowControl_MaxFlowRate_ (this),
        WindowProp_AirflowControl_AirflowControlType_ (this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (this),
        WindowProp_StormWindow_WindName_ (this),
        WindowProp_StormWindow_StormGlassLayerName_ (this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (this),
        Daylight_DELight_CmplxFenestr_Name_ (this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (this),
        Daylight_DELight_CmplxFenestr_BldgSurfName_ (this),
        Daylight_DELight_CmplxFenestr_WindName_ (this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (this),
        Airflow_MZone_Comp_DetldOpng_Name_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_Name_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindow_Window_ExteriorDetailed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimWindow_Window::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimWindow_Name
          //
          if (n.name () == "SimWindow_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_Name_type > r (
              SimWindow_Name_traits::create (i, f, this));

            if (!this->SimWindow_Name_)
            {
              this->SimWindow_Name_.set (r);
              continue;
            }
          }

          // SimWindow_SurfType
          //
          if (n.name () == "SimWindow_SurfType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_SurfType_type > r (
              SimWindow_SurfType_traits::create (i, f, this));

            if (!this->SimWindow_SurfType_)
            {
              this->SimWindow_SurfType_.set (r);
              continue;
            }
          }

          // SimWindow_ConstructionName
          //
          if (n.name () == "SimWindow_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ConstructionName_type > r (
              SimWindow_ConstructionName_traits::create (i, f, this));

            if (!this->SimWindow_ConstructionName_)
            {
              this->SimWindow_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWindow_BldgSurfName
          //
          if (n.name () == "SimWindow_BldgSurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_BldgSurfName_type > r (
              SimWindow_BldgSurfName_traits::create (i, f, this));

            if (!this->SimWindow_BldgSurfName_)
            {
              this->SimWindow_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimWindow_OutsdBndCondObject
          //
          if (n.name () == "SimWindow_OutsdBndCondObject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_OutsdBndCondObject_type > r (
              SimWindow_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWindow_OutsdBndCondObject_)
            {
              this->SimWindow_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWindow_ViewFactToGnd
          //
          if (n.name () == "SimWindow_ViewFactToGnd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWindow_ViewFactToGnd_)
            {
              this->SimWindow_ViewFactToGnd_.set (SimWindow_ViewFactToGnd_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_ShadingContName
          //
          if (n.name () == "SimWindow_ShadingContName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ShadingContName_type > r (
              SimWindow_ShadingContName_traits::create (i, f, this));

            if (!this->SimWindow_ShadingContName_)
            {
              this->SimWindow_ShadingContName_.set (r);
              continue;
            }
          }

          // SimWindow_FrmAndDivName
          //
          if (n.name () == "SimWindow_FrmAndDivName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_FrmAndDivName_type > r (
              SimWindow_FrmAndDivName_traits::create (i, f, this));

            if (!this->SimWindow_FrmAndDivName_)
            {
              this->SimWindow_FrmAndDivName_.set (r);
              continue;
            }
          }

          // SimWindow_Mult
          //
          if (n.name () == "SimWindow_Mult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWindow_Mult_)
            {
              this->SimWindow_Mult_.set (SimWindow_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_NumbVerts
          //
          if (n.name () == "SimWindow_NumbVerts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWindow_NumbVerts_)
            {
              this->SimWindow_NumbVerts_.set (SimWindow_NumbVerts_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_VertexXCoord_1_4
          //
          if (n.name () == "SimWindow_VertexXCoord_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > r (
              SimWindow_VertexXCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexXCoord_1_4_)
            {
              this->SimWindow_VertexXCoord_1_4_.set (r);
              continue;
            }
          }

          // SimWindow_VertexYCoord_1_4
          //
          if (n.name () == "SimWindow_VertexYCoord_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > r (
              SimWindow_VertexYCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexYCoord_1_4_)
            {
              this->SimWindow_VertexYCoord_1_4_.set (r);
              continue;
            }
          }

          // SimWindow_VertexZCoord_1_4
          //
          if (n.name () == "SimWindow_VertexZCoord_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > r (
              SimWindow_VertexZCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexZCoord_1_4_)
            {
              this->SimWindow_VertexZCoord_1_4_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_Name
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_Name_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_Name
          //
          if (n.name () == "WindowProp_AirflowControl_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_Name_type > r (
              WindowProp_AirflowControl_Name_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_Name_)
            {
              this->WindowProp_AirflowControl_Name_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowSrc
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowSrc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowSrc_type > r (
              WindowProp_AirflowControl_AirflowSrc_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowSrc_)
            {
              this->WindowProp_AirflowControl_AirflowSrc_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowDestination
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowDestination" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowDestination_type > r (
              WindowProp_AirflowControl_AirflowDestination_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowDestination_)
            {
              this->WindowProp_AirflowControl_AirflowDestination_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_MaxFlowRate
          //
          if (n.name () == "WindowProp_AirflowControl_MaxFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WindowProp_AirflowControl_MaxFlowRate_)
            {
              this->WindowProp_AirflowControl_MaxFlowRate_.set (WindowProp_AirflowControl_MaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowControlType
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowControlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowControlType_type > r (
              WindowProp_AirflowControl_AirflowControlType_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowControlType_)
            {
              this->WindowProp_AirflowControl_AirflowControlType_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowIsScheduled
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowIsScheduled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowIsScheduled_type > r (
              WindowProp_AirflowControl_AirflowIsScheduled_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowIsScheduled_)
            {
              this->WindowProp_AirflowControl_AirflowIsScheduled_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowMultiplierScheduleName
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowMultiplierScheduleName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type > r (
              WindowProp_AirflowControl_AirflowMultiplierScheduleName_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_)
            {
              this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_.set (r);
              continue;
            }
          }

          // WindowProp_StormWindow_WindName
          //
          if (n.name () == "WindowProp_StormWindow_WindName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_StormWindow_WindName_type > r (
              WindowProp_StormWindow_WindName_traits::create (i, f, this));

            if (!this->WindowProp_StormWindow_WindName_)
            {
              this->WindowProp_StormWindow_WindName_.set (r);
              continue;
            }
          }

          // WindowProp_StormWindow_StormGlassLayerName
          //
          if (n.name () == "WindowProp_StormWindow_StormGlassLayerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_StormWindow_StormGlassLayerName_type > r (
              WindowProp_StormWindow_StormGlassLayerName_traits::create (i, f, this));

            if (!this->WindowProp_StormWindow_StormGlassLayerName_)
            {
              this->WindowProp_StormWindow_StormGlassLayerName_.set (r);
              continue;
            }
          }

          // WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass
          //
          if (n.name () == "WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_)
            {
              this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_.set (WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_MonththatStormGlassLayerisPutOn
          //
          if (n.name () == "WindowProp_StormWindow_MonththatStormGlassLayerisPutOn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_)
            {
              this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_.set (WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn
          //
          if (n.name () == "WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_)
            {
              this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_.set (WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff
          //
          if (n.name () == "WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_)
            {
              this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_.set (WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff
          //
          if (n.name () == "WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_)
            {
              this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_.set (WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_traits::create (i, f, this));
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_Name
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Daylight_DELight_CmplxFenestr_Name_type > r (
              Daylight_DELight_CmplxFenestr_Name_traits::create (i, f, this));

            if (!this->Daylight_DELight_CmplxFenestr_Name_)
            {
              this->Daylight_DELight_CmplxFenestr_Name_.set (r);
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_ComplexFenestrationType
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_ComplexFenestrationType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type > r (
              Daylight_DELight_CmplxFenestr_ComplexFenestrationType_traits::create (i, f, this));

            if (!this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_)
            {
              this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_.set (r);
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_BldgSurfName
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_BldgSurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Daylight_DELight_CmplxFenestr_BldgSurfName_type > r (
              Daylight_DELight_CmplxFenestr_BldgSurfName_traits::create (i, f, this));

            if (!this->Daylight_DELight_CmplxFenestr_BldgSurfName_)
            {
              this->Daylight_DELight_CmplxFenestr_BldgSurfName_.set (r);
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_WindName
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_WindName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Daylight_DELight_CmplxFenestr_WindName_type > r (
              Daylight_DELight_CmplxFenestr_WindName_traits::create (i, f, this));

            if (!this->Daylight_DELight_CmplxFenestr_WindName_)
            {
              this->Daylight_DELight_CmplxFenestr_WindName_.set (r);
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_FenestrationRotation
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_FenestrationRotation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Daylight_DELight_CmplxFenestr_FenestrationRotation_)
            {
              this->Daylight_DELight_CmplxFenestr_FenestrationRotation_.set (Daylight_DELight_CmplxFenestr_FenestrationRotation_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_Name
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_Name_type > r (
              Airflow_MZone_Comp_DetldOpng_Name_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_Name_)
            {
              this->Airflow_MZone_Comp_DetldOpng_Name_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > r (
              Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_)
            {
              this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_)
            {
              this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_)
            {
              this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_Name
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_SmplOpng_Name_type > r (
              Airflow_MZone_Comp_SmplOpng_Name_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_SmplOpng_Name_)
            {
              this->Airflow_MZone_Comp_SmplOpng_Name_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_)
            {
              this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_DischargeCoef
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_DischargeCoef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_)
            {
              this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimWindow_Window_ExteriorDetailed* SimWindow_Window_ExteriorDetailed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindow_Window_ExteriorDetailed (*this, f, c);
      }

      SimWindow_Window_ExteriorDetailed& SimWindow_Window_ExteriorDetailed::
      operator= (const SimWindow_Window_ExteriorDetailed& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimWindow_Window& > (*this) = x;
          this->SimWindow_Name_ = x.SimWindow_Name_;
          this->SimWindow_SurfType_ = x.SimWindow_SurfType_;
          this->SimWindow_ConstructionName_ = x.SimWindow_ConstructionName_;
          this->SimWindow_BldgSurfName_ = x.SimWindow_BldgSurfName_;
          this->SimWindow_OutsdBndCondObject_ = x.SimWindow_OutsdBndCondObject_;
          this->SimWindow_ViewFactToGnd_ = x.SimWindow_ViewFactToGnd_;
          this->SimWindow_ShadingContName_ = x.SimWindow_ShadingContName_;
          this->SimWindow_FrmAndDivName_ = x.SimWindow_FrmAndDivName_;
          this->SimWindow_Mult_ = x.SimWindow_Mult_;
          this->SimWindow_NumbVerts_ = x.SimWindow_NumbVerts_;
          this->SimWindow_VertexXCoord_1_4_ = x.SimWindow_VertexXCoord_1_4_;
          this->SimWindow_VertexYCoord_1_4_ = x.SimWindow_VertexYCoord_1_4_;
          this->SimWindow_VertexZCoord_1_4_ = x.SimWindow_VertexZCoord_1_4_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
          this->WindowProp_AirflowControl_Name_ = x.WindowProp_AirflowControl_Name_;
          this->WindowProp_AirflowControl_AirflowSrc_ = x.WindowProp_AirflowControl_AirflowSrc_;
          this->WindowProp_AirflowControl_AirflowDestination_ = x.WindowProp_AirflowControl_AirflowDestination_;
          this->WindowProp_AirflowControl_MaxFlowRate_ = x.WindowProp_AirflowControl_MaxFlowRate_;
          this->WindowProp_AirflowControl_AirflowControlType_ = x.WindowProp_AirflowControl_AirflowControlType_;
          this->WindowProp_AirflowControl_AirflowIsScheduled_ = x.WindowProp_AirflowControl_AirflowIsScheduled_;
          this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_ = x.WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
          this->WindowProp_StormWindow_WindName_ = x.WindowProp_StormWindow_WindName_;
          this->WindowProp_StormWindow_StormGlassLayerName_ = x.WindowProp_StormWindow_StormGlassLayerName_;
          this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ = x.WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
          this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ = x.WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
          this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ = x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
          this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ = x.WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
          this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ = x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
          this->Daylight_DELight_CmplxFenestr_Name_ = x.Daylight_DELight_CmplxFenestr_Name_;
          this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ = x.Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
          this->Daylight_DELight_CmplxFenestr_BldgSurfName_ = x.Daylight_DELight_CmplxFenestr_BldgSurfName_;
          this->Daylight_DELight_CmplxFenestr_WindName_ = x.Daylight_DELight_CmplxFenestr_WindName_;
          this->Daylight_DELight_CmplxFenestr_FenestrationRotation_ = x.Daylight_DELight_CmplxFenestr_FenestrationRotation_;
          this->Airflow_MZone_Comp_DetldOpng_Name_ = x.Airflow_MZone_Comp_DetldOpng_Name_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
          this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
          this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
          this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_SmplOpng_Name_ = x.Airflow_MZone_Comp_SmplOpng_Name_;
          this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
          this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
        }

        return *this;
      }

      SimWindow_Window_ExteriorDetailed::
      ~SimWindow_Window_ExteriorDetailed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

