// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple
      // 

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_Name () const
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_Name ()
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x)
      {
        this->SimFlowEnergyTrans_Name_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignWaterFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignWaterFlowRate () const
      {
        return this->SimFlowEnergyTrans_DesignWaterFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignWaterFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignWaterFlowRate ()
      {
        return this->SimFlowEnergyTrans_DesignWaterFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignWaterFlowRate (const SimFlowEnergyTrans_DesignWaterFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_DesignWaterFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignWaterFlowRate (const SimFlowEnergyTrans_DesignWaterFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_DesignWaterFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_DesignAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignAirFlowRate (const SimFlowEnergyTrans_DesignAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignAirFlowRate (const SimFlowEnergyTrans_DesignAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_DesignAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignInletWaterTemp_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletWaterTemp () const
      {
        return this->SimFlowEnergyTrans_DesignInletWaterTemp_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignInletWaterTemp_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletWaterTemp ()
      {
        return this->SimFlowEnergyTrans_DesignInletWaterTemp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletWaterTemp (const SimFlowEnergyTrans_DesignInletWaterTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignInletWaterTemp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletWaterTemp (const SimFlowEnergyTrans_DesignInletWaterTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignInletWaterTemp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignInletAirTemp_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirTemp () const
      {
        return this->SimFlowEnergyTrans_DesignInletAirTemp_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignInletAirTemp_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirTemp ()
      {
        return this->SimFlowEnergyTrans_DesignInletAirTemp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirTemp (const SimFlowEnergyTrans_DesignInletAirTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignInletAirTemp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirTemp (const SimFlowEnergyTrans_DesignInletAirTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignInletAirTemp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignOutletAirTemp_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirTemp () const
      {
        return this->SimFlowEnergyTrans_DesignOutletAirTemp_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignOutletAirTemp_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirTemp ()
      {
        return this->SimFlowEnergyTrans_DesignOutletAirTemp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirTemp (const SimFlowEnergyTrans_DesignOutletAirTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignOutletAirTemp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirTemp (const SimFlowEnergyTrans_DesignOutletAirTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignOutletAirTemp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignInletAirHumidRatio_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirHumidRatio () const
      {
        return this->SimFlowEnergyTrans_DesignInletAirHumidRatio_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignInletAirHumidRatio_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirHumidRatio ()
      {
        return this->SimFlowEnergyTrans_DesignInletAirHumidRatio_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirHumidRatio (const SimFlowEnergyTrans_DesignInletAirHumidRatio_type& x)
      {
        this->SimFlowEnergyTrans_DesignInletAirHumidRatio_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignInletAirHumidRatio (const SimFlowEnergyTrans_DesignInletAirHumidRatio_optional& x)
      {
        this->SimFlowEnergyTrans_DesignInletAirHumidRatio_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignOutletAirHumidRatio_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirHumidRatio () const
      {
        return this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_DesignOutletAirHumidRatio_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirHumidRatio ()
      {
        return this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirHumidRatio (const SimFlowEnergyTrans_DesignOutletAirHumidRatio_type& x)
      {
        this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_DesignOutletAirHumidRatio (const SimFlowEnergyTrans_DesignOutletAirHumidRatio_optional& x)
      {
        this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_WaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_TypeAnalysis_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_TypeAnalysis () const
      {
        return this->SimFlowEnergyTrans_TypeAnalysis_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_TypeAnalysis_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_TypeAnalysis ()
      {
        return this->SimFlowEnergyTrans_TypeAnalysis_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_TypeAnalysis (const SimFlowEnergyTrans_TypeAnalysis_type& x)
      {
        this->SimFlowEnergyTrans_TypeAnalysis_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_TypeAnalysis (const SimFlowEnergyTrans_TypeAnalysis_optional& x)
      {
        this->SimFlowEnergyTrans_TypeAnalysis_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_TypeAnalysis (::std::auto_ptr< SimFlowEnergyTrans_TypeAnalysis_type > x)
      {
        this->SimFlowEnergyTrans_TypeAnalysis_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_HeatExchngConfiguration_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_HeatExchngConfiguration () const
      {
        return this->SimFlowEnergyTrans_HeatExchngConfiguration_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_HeatExchngConfiguration_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_HeatExchngConfiguration ()
      {
        return this->SimFlowEnergyTrans_HeatExchngConfiguration_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_HeatExchngConfiguration (const SimFlowEnergyTrans_HeatExchngConfiguration_type& x)
      {
        this->SimFlowEnergyTrans_HeatExchngConfiguration_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_HeatExchngConfiguration (const SimFlowEnergyTrans_HeatExchngConfiguration_optional& x)
      {
        this->SimFlowEnergyTrans_HeatExchngConfiguration_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_HeatExchngConfiguration (::std::auto_ptr< SimFlowEnergyTrans_HeatExchngConfiguration_type > x)
      {
        this->SimFlowEnergyTrans_HeatExchngConfiguration_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName () const
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName ()
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_Name_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Name () const
      {
        return this->Controller_WaterCoil_Name_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_Name_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Name ()
      {
        return this->Controller_WaterCoil_Name_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Name (const Controller_WaterCoil_Name_type& x)
      {
        this->Controller_WaterCoil_Name_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Name (const Controller_WaterCoil_Name_optional& x)
      {
        this->Controller_WaterCoil_Name_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Name (::std::auto_ptr< Controller_WaterCoil_Name_type > x)
      {
        this->Controller_WaterCoil_Name_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_CntlVar_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntlVar () const
      {
        return this->Controller_WaterCoil_CntlVar_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_CntlVar_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntlVar ()
      {
        return this->Controller_WaterCoil_CntlVar_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntlVar (const Controller_WaterCoil_CntlVar_type& x)
      {
        this->Controller_WaterCoil_CntlVar_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntlVar (const Controller_WaterCoil_CntlVar_optional& x)
      {
        this->Controller_WaterCoil_CntlVar_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntlVar (::std::auto_ptr< Controller_WaterCoil_CntlVar_type > x)
      {
        this->Controller_WaterCoil_CntlVar_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_Action_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Action () const
      {
        return this->Controller_WaterCoil_Action_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_Action_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Action ()
      {
        return this->Controller_WaterCoil_Action_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Action (const Controller_WaterCoil_Action_type& x)
      {
        this->Controller_WaterCoil_Action_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Action (const Controller_WaterCoil_Action_optional& x)
      {
        this->Controller_WaterCoil_Action_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_Action (::std::auto_ptr< Controller_WaterCoil_Action_type > x)
      {
        this->Controller_WaterCoil_Action_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_ActuatorVariable_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorVariable () const
      {
        return this->Controller_WaterCoil_ActuatorVariable_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_ActuatorVariable_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorVariable ()
      {
        return this->Controller_WaterCoil_ActuatorVariable_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorVariable (const Controller_WaterCoil_ActuatorVariable_type& x)
      {
        this->Controller_WaterCoil_ActuatorVariable_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorVariable (const Controller_WaterCoil_ActuatorVariable_optional& x)
      {
        this->Controller_WaterCoil_ActuatorVariable_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorVariable (::std::auto_ptr< Controller_WaterCoil_ActuatorVariable_type > x)
      {
        this->Controller_WaterCoil_ActuatorVariable_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_SensorNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_SensorNodeName () const
      {
        return this->Controller_WaterCoil_SensorNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_SensorNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_SensorNodeName ()
      {
        return this->Controller_WaterCoil_SensorNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_SensorNodeName (const Controller_WaterCoil_SensorNodeName_type& x)
      {
        this->Controller_WaterCoil_SensorNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_SensorNodeName (const Controller_WaterCoil_SensorNodeName_optional& x)
      {
        this->Controller_WaterCoil_SensorNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_SensorNodeName (::std::auto_ptr< Controller_WaterCoil_SensorNodeName_type > x)
      {
        this->Controller_WaterCoil_SensorNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_ActuatorNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorNodeName () const
      {
        return this->Controller_WaterCoil_ActuatorNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_ActuatorNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorNodeName ()
      {
        return this->Controller_WaterCoil_ActuatorNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorNodeName (const Controller_WaterCoil_ActuatorNodeName_type& x)
      {
        this->Controller_WaterCoil_ActuatorNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorNodeName (const Controller_WaterCoil_ActuatorNodeName_optional& x)
      {
        this->Controller_WaterCoil_ActuatorNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_ActuatorNodeName (::std::auto_ptr< Controller_WaterCoil_ActuatorNodeName_type > x)
      {
        this->Controller_WaterCoil_ActuatorNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_CntrlrConvergenceTolerance_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntrlrConvergenceTolerance () const
      {
        return this->Controller_WaterCoil_CntrlrConvergenceTolerance_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_CntrlrConvergenceTolerance_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntrlrConvergenceTolerance ()
      {
        return this->Controller_WaterCoil_CntrlrConvergenceTolerance_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntrlrConvergenceTolerance (const Controller_WaterCoil_CntrlrConvergenceTolerance_type& x)
      {
        this->Controller_WaterCoil_CntrlrConvergenceTolerance_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_CntrlrConvergenceTolerance (const Controller_WaterCoil_CntrlrConvergenceTolerance_optional& x)
      {
        this->Controller_WaterCoil_CntrlrConvergenceTolerance_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_MaxActuatedFlow_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MaxActuatedFlow () const
      {
        return this->Controller_WaterCoil_MaxActuatedFlow_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_MaxActuatedFlow_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MaxActuatedFlow ()
      {
        return this->Controller_WaterCoil_MaxActuatedFlow_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MaxActuatedFlow (const Controller_WaterCoil_MaxActuatedFlow_type& x)
      {
        this->Controller_WaterCoil_MaxActuatedFlow_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MaxActuatedFlow (const Controller_WaterCoil_MaxActuatedFlow_optional& x)
      {
        this->Controller_WaterCoil_MaxActuatedFlow_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_MinActuatedFlow_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MinActuatedFlow () const
      {
        return this->Controller_WaterCoil_MinActuatedFlow_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::Controller_WaterCoil_MinActuatedFlow_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MinActuatedFlow ()
      {
        return this->Controller_WaterCoil_MinActuatedFlow_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MinActuatedFlow (const Controller_WaterCoil_MinActuatedFlow_type& x)
      {
        this->Controller_WaterCoil_MinActuatedFlow_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      Controller_WaterCoil_MinActuatedFlow (const Controller_WaterCoil_MinActuatedFlow_optional& x)
      {
        this->Controller_WaterCoil_MinActuatedFlow_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::T24FuelSrc_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      T24FuelSrc () const
      {
        return this->T24FuelSrc_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::T24FuelSrc_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      T24FuelSrc ()
      {
        return this->T24FuelSrc_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      T24FuelSrc (const T24FuelSrc_type& x)
      {
        this->T24FuelSrc_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      T24FuelSrc (const T24FuelSrc_optional& x)
      {
        this->T24FuelSrc_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      T24FuelSrc (::std::auto_ptr< T24FuelSrc_type > x)
      {
        this->T24FuelSrc_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple
      //

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (this),
        SimFlowEnergyTrans_DesignAirFlowRate_ (this),
        SimFlowEnergyTrans_DesignInletWaterTemp_ (this),
        SimFlowEnergyTrans_DesignInletAirTemp_ (this),
        SimFlowEnergyTrans_DesignOutletAirTemp_ (this),
        SimFlowEnergyTrans_DesignInletAirHumidRatio_ (this),
        SimFlowEnergyTrans_DesignOutletAirHumidRatio_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_TypeAnalysis_ (this),
        SimFlowEnergyTrans_HeatExchngConfiguration_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        Controller_WaterCoil_Name_ (this),
        Controller_WaterCoil_CntlVar_ (this),
        Controller_WaterCoil_Action_ (this),
        Controller_WaterCoil_ActuatorVariable_ (this),
        Controller_WaterCoil_SensorNodeName_ (this),
        Controller_WaterCoil_ActuatorNodeName_ (this),
        Controller_WaterCoil_CntrlrConvergenceTolerance_ (this),
        Controller_WaterCoil_MaxActuatedFlow_ (this),
        Controller_WaterCoil_MinActuatedFlow_ (this),
        T24FuelSrc_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (RefId),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (this),
        SimFlowEnergyTrans_DesignAirFlowRate_ (this),
        SimFlowEnergyTrans_DesignInletWaterTemp_ (this),
        SimFlowEnergyTrans_DesignInletAirTemp_ (this),
        SimFlowEnergyTrans_DesignOutletAirTemp_ (this),
        SimFlowEnergyTrans_DesignInletAirHumidRatio_ (this),
        SimFlowEnergyTrans_DesignOutletAirHumidRatio_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_TypeAnalysis_ (this),
        SimFlowEnergyTrans_HeatExchngConfiguration_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        Controller_WaterCoil_Name_ (this),
        Controller_WaterCoil_CntlVar_ (this),
        Controller_WaterCoil_Action_ (this),
        Controller_WaterCoil_ActuatorVariable_ (this),
        Controller_WaterCoil_SensorNodeName_ (this),
        Controller_WaterCoil_ActuatorNodeName_ (this),
        Controller_WaterCoil_CntrlrConvergenceTolerance_ (this),
        Controller_WaterCoil_MaxActuatedFlow_ (this),
        Controller_WaterCoil_MinActuatedFlow_ (this),
        T24FuelSrc_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple& x,
                                                                        ::xml_schema::flags f,
                                                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (x, f, c),
        SimFlowEnergyTrans_Name_ (x.SimFlowEnergyTrans_Name_, f, this),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (x.SimFlowEnergyTrans_DesignWaterFlowRate_, f, this),
        SimFlowEnergyTrans_DesignAirFlowRate_ (x.SimFlowEnergyTrans_DesignAirFlowRate_, f, this),
        SimFlowEnergyTrans_DesignInletWaterTemp_ (x.SimFlowEnergyTrans_DesignInletWaterTemp_, f, this),
        SimFlowEnergyTrans_DesignInletAirTemp_ (x.SimFlowEnergyTrans_DesignInletAirTemp_, f, this),
        SimFlowEnergyTrans_DesignOutletAirTemp_ (x.SimFlowEnergyTrans_DesignOutletAirTemp_, f, this),
        SimFlowEnergyTrans_DesignInletAirHumidRatio_ (x.SimFlowEnergyTrans_DesignInletAirHumidRatio_, f, this),
        SimFlowEnergyTrans_DesignOutletAirHumidRatio_ (x.SimFlowEnergyTrans_DesignOutletAirHumidRatio_, f, this),
        SimFlowEnergyTrans_WaterInletNodeName_ (x.SimFlowEnergyTrans_WaterInletNodeName_, f, this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (x.SimFlowEnergyTrans_WaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_TypeAnalysis_ (x.SimFlowEnergyTrans_TypeAnalysis_, f, this),
        SimFlowEnergyTrans_HeatExchngConfiguration_ (x.SimFlowEnergyTrans_HeatExchngConfiguration_, f, this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_, f, this),
        Controller_WaterCoil_Name_ (x.Controller_WaterCoil_Name_, f, this),
        Controller_WaterCoil_CntlVar_ (x.Controller_WaterCoil_CntlVar_, f, this),
        Controller_WaterCoil_Action_ (x.Controller_WaterCoil_Action_, f, this),
        Controller_WaterCoil_ActuatorVariable_ (x.Controller_WaterCoil_ActuatorVariable_, f, this),
        Controller_WaterCoil_SensorNodeName_ (x.Controller_WaterCoil_SensorNodeName_, f, this),
        Controller_WaterCoil_ActuatorNodeName_ (x.Controller_WaterCoil_ActuatorNodeName_, f, this),
        Controller_WaterCoil_CntrlrConvergenceTolerance_ (x.Controller_WaterCoil_CntrlrConvergenceTolerance_, f, this),
        Controller_WaterCoil_MaxActuatedFlow_ (x.Controller_WaterCoil_MaxActuatedFlow_, f, this),
        Controller_WaterCoil_MinActuatedFlow_ (x.Controller_WaterCoil_MinActuatedFlow_, f, this),
        T24FuelSrc_ (x.T24FuelSrc_, f, this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple (const ::xercesc::DOMElement& e,
                                                                        ::xml_schema::flags f,
                                                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (this),
        SimFlowEnergyTrans_DesignAirFlowRate_ (this),
        SimFlowEnergyTrans_DesignInletWaterTemp_ (this),
        SimFlowEnergyTrans_DesignInletAirTemp_ (this),
        SimFlowEnergyTrans_DesignOutletAirTemp_ (this),
        SimFlowEnergyTrans_DesignInletAirHumidRatio_ (this),
        SimFlowEnergyTrans_DesignOutletAirHumidRatio_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_TypeAnalysis_ (this),
        SimFlowEnergyTrans_HeatExchngConfiguration_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        Controller_WaterCoil_Name_ (this),
        Controller_WaterCoil_CntlVar_ (this),
        Controller_WaterCoil_Action_ (this),
        Controller_WaterCoil_ActuatorVariable_ (this),
        Controller_WaterCoil_SensorNodeName_ (this),
        Controller_WaterCoil_ActuatorNodeName_ (this),
        Controller_WaterCoil_CntrlrConvergenceTolerance_ (this),
        Controller_WaterCoil_MaxActuatedFlow_ (this),
        Controller_WaterCoil_MinActuatedFlow_ (this),
        T24FuelSrc_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_Name
          //
          if (n.name () == "SimFlowEnergyTrans_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Name_type > r (
              SimFlowEnergyTrans_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Name_)
            {
              this->SimFlowEnergyTrans_Name_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignWaterFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_DesignWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignWaterFlowRate_)
            {
              this->SimFlowEnergyTrans_DesignWaterFlowRate_.set (SimFlowEnergyTrans_DesignWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_DesignAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignAirFlowRate_)
            {
              this->SimFlowEnergyTrans_DesignAirFlowRate_.set (SimFlowEnergyTrans_DesignAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignInletWaterTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignInletWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignInletWaterTemp_)
            {
              this->SimFlowEnergyTrans_DesignInletWaterTemp_.set (SimFlowEnergyTrans_DesignInletWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignInletAirTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignInletAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignInletAirTemp_)
            {
              this->SimFlowEnergyTrans_DesignInletAirTemp_.set (SimFlowEnergyTrans_DesignInletAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignOutletAirTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignOutletAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignOutletAirTemp_)
            {
              this->SimFlowEnergyTrans_DesignOutletAirTemp_.set (SimFlowEnergyTrans_DesignOutletAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignInletAirHumidRatio
          //
          if (n.name () == "SimFlowEnergyTrans_DesignInletAirHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignInletAirHumidRatio_)
            {
              this->SimFlowEnergyTrans_DesignInletAirHumidRatio_.set (SimFlowEnergyTrans_DesignInletAirHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignOutletAirHumidRatio
          //
          if (n.name () == "SimFlowEnergyTrans_DesignOutletAirHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_)
            {
              this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_.set (SimFlowEnergyTrans_DesignOutletAirHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > r (
              SimFlowEnergyTrans_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > r (
              SimFlowEnergyTrans_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TypeAnalysis
          //
          if (n.name () == "SimFlowEnergyTrans_TypeAnalysis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TypeAnalysis_type > r (
              SimFlowEnergyTrans_TypeAnalysis_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TypeAnalysis_)
            {
              this->SimFlowEnergyTrans_TypeAnalysis_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatExchngConfiguration
          //
          if (n.name () == "SimFlowEnergyTrans_HeatExchngConfiguration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatExchngConfiguration_type > r (
              SimFlowEnergyTrans_HeatExchngConfiguration_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatExchngConfiguration_)
            {
              this->SimFlowEnergyTrans_HeatExchngConfiguration_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondsCollectionWaterStorageTankName
          //
          if (n.name () == "SimFlowEnergyTrans_CondsCollectionWaterStorageTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > r (
              SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_)
            {
              this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_Name
          //
          if (n.name () == "Controller_WaterCoil_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Controller_WaterCoil_Name_type > r (
              Controller_WaterCoil_Name_traits::create (i, f, this));

            if (!this->Controller_WaterCoil_Name_)
            {
              this->Controller_WaterCoil_Name_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_CntlVar
          //
          if (n.name () == "Controller_WaterCoil_CntlVar" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Controller_WaterCoil_CntlVar_type > r (
              Controller_WaterCoil_CntlVar_traits::create (i, f, this));

            if (!this->Controller_WaterCoil_CntlVar_)
            {
              this->Controller_WaterCoil_CntlVar_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_Action
          //
          if (n.name () == "Controller_WaterCoil_Action" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Controller_WaterCoil_Action_type > r (
              Controller_WaterCoil_Action_traits::create (i, f, this));

            if (!this->Controller_WaterCoil_Action_)
            {
              this->Controller_WaterCoil_Action_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_ActuatorVariable
          //
          if (n.name () == "Controller_WaterCoil_ActuatorVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Controller_WaterCoil_ActuatorVariable_type > r (
              Controller_WaterCoil_ActuatorVariable_traits::create (i, f, this));

            if (!this->Controller_WaterCoil_ActuatorVariable_)
            {
              this->Controller_WaterCoil_ActuatorVariable_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_SensorNodeName
          //
          if (n.name () == "Controller_WaterCoil_SensorNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Controller_WaterCoil_SensorNodeName_type > r (
              Controller_WaterCoil_SensorNodeName_traits::create (i, f, this));

            if (!this->Controller_WaterCoil_SensorNodeName_)
            {
              this->Controller_WaterCoil_SensorNodeName_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_ActuatorNodeName
          //
          if (n.name () == "Controller_WaterCoil_ActuatorNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Controller_WaterCoil_ActuatorNodeName_type > r (
              Controller_WaterCoil_ActuatorNodeName_traits::create (i, f, this));

            if (!this->Controller_WaterCoil_ActuatorNodeName_)
            {
              this->Controller_WaterCoil_ActuatorNodeName_.set (r);
              continue;
            }
          }

          // Controller_WaterCoil_CntrlrConvergenceTolerance
          //
          if (n.name () == "Controller_WaterCoil_CntrlrConvergenceTolerance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Controller_WaterCoil_CntrlrConvergenceTolerance_)
            {
              this->Controller_WaterCoil_CntrlrConvergenceTolerance_.set (Controller_WaterCoil_CntrlrConvergenceTolerance_traits::create (i, f, this));
              continue;
            }
          }

          // Controller_WaterCoil_MaxActuatedFlow
          //
          if (n.name () == "Controller_WaterCoil_MaxActuatedFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Controller_WaterCoil_MaxActuatedFlow_)
            {
              this->Controller_WaterCoil_MaxActuatedFlow_.set (Controller_WaterCoil_MaxActuatedFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Controller_WaterCoil_MinActuatedFlow
          //
          if (n.name () == "Controller_WaterCoil_MinActuatedFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Controller_WaterCoil_MinActuatedFlow_)
            {
              this->Controller_WaterCoil_MinActuatedFlow_.set (Controller_WaterCoil_MinActuatedFlow_traits::create (i, f, this));
              continue;
            }
          }

          // T24FuelSrc
          //
          if (n.name () == "T24FuelSrc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24FuelSrc_type > r (
              T24FuelSrc_traits::create (i, f, this));

            if (!this->T24FuelSrc_)
            {
              this->T24FuelSrc_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple* SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple (*this, f, c);
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      operator= (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater& > (*this) = x;
          this->SimFlowEnergyTrans_Name_ = x.SimFlowEnergyTrans_Name_;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_DesignWaterFlowRate_ = x.SimFlowEnergyTrans_DesignWaterFlowRate_;
          this->SimFlowEnergyTrans_DesignAirFlowRate_ = x.SimFlowEnergyTrans_DesignAirFlowRate_;
          this->SimFlowEnergyTrans_DesignInletWaterTemp_ = x.SimFlowEnergyTrans_DesignInletWaterTemp_;
          this->SimFlowEnergyTrans_DesignInletAirTemp_ = x.SimFlowEnergyTrans_DesignInletAirTemp_;
          this->SimFlowEnergyTrans_DesignOutletAirTemp_ = x.SimFlowEnergyTrans_DesignOutletAirTemp_;
          this->SimFlowEnergyTrans_DesignInletAirHumidRatio_ = x.SimFlowEnergyTrans_DesignInletAirHumidRatio_;
          this->SimFlowEnergyTrans_DesignOutletAirHumidRatio_ = x.SimFlowEnergyTrans_DesignOutletAirHumidRatio_;
          this->SimFlowEnergyTrans_WaterInletNodeName_ = x.SimFlowEnergyTrans_WaterInletNodeName_;
          this->SimFlowEnergyTrans_WaterOutletNodeName_ = x.SimFlowEnergyTrans_WaterOutletNodeName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_TypeAnalysis_ = x.SimFlowEnergyTrans_TypeAnalysis_;
          this->SimFlowEnergyTrans_HeatExchngConfiguration_ = x.SimFlowEnergyTrans_HeatExchngConfiguration_;
          this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
          this->Controller_WaterCoil_Name_ = x.Controller_WaterCoil_Name_;
          this->Controller_WaterCoil_CntlVar_ = x.Controller_WaterCoil_CntlVar_;
          this->Controller_WaterCoil_Action_ = x.Controller_WaterCoil_Action_;
          this->Controller_WaterCoil_ActuatorVariable_ = x.Controller_WaterCoil_ActuatorVariable_;
          this->Controller_WaterCoil_SensorNodeName_ = x.Controller_WaterCoil_SensorNodeName_;
          this->Controller_WaterCoil_ActuatorNodeName_ = x.Controller_WaterCoil_ActuatorNodeName_;
          this->Controller_WaterCoil_CntrlrConvergenceTolerance_ = x.Controller_WaterCoil_CntrlrConvergenceTolerance_;
          this->Controller_WaterCoil_MaxActuatedFlow_ = x.Controller_WaterCoil_MaxActuatedFlow_;
          this->Controller_WaterCoil_MinActuatedFlow_ = x.Controller_WaterCoil_MinActuatedFlow_;
          this->T24FuelSrc_ = x.T24FuelSrc_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple::
      ~SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

