// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_PHOTOVOLTAIC_HXX
#define SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_PHOTOVOLTAIC_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_Photovoltaic;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_electricalgenerator.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_Photovoltaic: public ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator
      {
        public:
        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_SurfName
        //
        typedef ::xml_schema::idref SimFlowPlant_SurfName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SurfName_type > SimFlowPlant_SurfName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SurfName_type, char > SimFlowPlant_SurfName_traits;

        const SimFlowPlant_SurfName_optional&
        SimFlowPlant_SurfName () const;

        SimFlowPlant_SurfName_optional&
        SimFlowPlant_SurfName ();

        void
        SimFlowPlant_SurfName (const SimFlowPlant_SurfName_type& x);

        void
        SimFlowPlant_SurfName (const SimFlowPlant_SurfName_optional& x);

        void
        SimFlowPlant_SurfName (::std::auto_ptr< SimFlowPlant_SurfName_type > p);

        // SimFlowPlant_PhotovoltaicPerfObjType
        //
        typedef ::xml_schema::string SimFlowPlant_PhotovoltaicPerfObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PhotovoltaicPerfObjType_type > SimFlowPlant_PhotovoltaicPerfObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PhotovoltaicPerfObjType_type, char > SimFlowPlant_PhotovoltaicPerfObjType_traits;

        const SimFlowPlant_PhotovoltaicPerfObjType_optional&
        SimFlowPlant_PhotovoltaicPerfObjType () const;

        SimFlowPlant_PhotovoltaicPerfObjType_optional&
        SimFlowPlant_PhotovoltaicPerfObjType ();

        void
        SimFlowPlant_PhotovoltaicPerfObjType (const SimFlowPlant_PhotovoltaicPerfObjType_type& x);

        void
        SimFlowPlant_PhotovoltaicPerfObjType (const SimFlowPlant_PhotovoltaicPerfObjType_optional& x);

        void
        SimFlowPlant_PhotovoltaicPerfObjType (::std::auto_ptr< SimFlowPlant_PhotovoltaicPerfObjType_type > p);

        // SimFlowPlant_ModulePerfName
        //
        typedef ::xml_schema::idref SimFlowPlant_ModulePerfName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ModulePerfName_type > SimFlowPlant_ModulePerfName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ModulePerfName_type, char > SimFlowPlant_ModulePerfName_traits;

        const SimFlowPlant_ModulePerfName_optional&
        SimFlowPlant_ModulePerfName () const;

        SimFlowPlant_ModulePerfName_optional&
        SimFlowPlant_ModulePerfName ();

        void
        SimFlowPlant_ModulePerfName (const SimFlowPlant_ModulePerfName_type& x);

        void
        SimFlowPlant_ModulePerfName (const SimFlowPlant_ModulePerfName_optional& x);

        void
        SimFlowPlant_ModulePerfName (::std::auto_ptr< SimFlowPlant_ModulePerfName_type > p);

        // SimFlowPlant_HeatTranstegrationMode
        //
        typedef ::xml_schema::string SimFlowPlant_HeatTranstegrationMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatTranstegrationMode_type > SimFlowPlant_HeatTranstegrationMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatTranstegrationMode_type, char > SimFlowPlant_HeatTranstegrationMode_traits;

        const SimFlowPlant_HeatTranstegrationMode_optional&
        SimFlowPlant_HeatTranstegrationMode () const;

        SimFlowPlant_HeatTranstegrationMode_optional&
        SimFlowPlant_HeatTranstegrationMode ();

        void
        SimFlowPlant_HeatTranstegrationMode (const SimFlowPlant_HeatTranstegrationMode_type& x);

        void
        SimFlowPlant_HeatTranstegrationMode (const SimFlowPlant_HeatTranstegrationMode_optional& x);

        void
        SimFlowPlant_HeatTranstegrationMode (::std::auto_ptr< SimFlowPlant_HeatTranstegrationMode_type > p);

        // SimFlowPlant_NumberofSeriesStringsinParallel
        //
        typedef ::xml_schema::double_ SimFlowPlant_NumberofSeriesStringsinParallel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NumberofSeriesStringsinParallel_type > SimFlowPlant_NumberofSeriesStringsinParallel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NumberofSeriesStringsinParallel_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NumberofSeriesStringsinParallel_traits;

        const SimFlowPlant_NumberofSeriesStringsinParallel_optional&
        SimFlowPlant_NumberofSeriesStringsinParallel () const;

        SimFlowPlant_NumberofSeriesStringsinParallel_optional&
        SimFlowPlant_NumberofSeriesStringsinParallel ();

        void
        SimFlowPlant_NumberofSeriesStringsinParallel (const SimFlowPlant_NumberofSeriesStringsinParallel_type& x);

        void
        SimFlowPlant_NumberofSeriesStringsinParallel (const SimFlowPlant_NumberofSeriesStringsinParallel_optional& x);

        // SimFlowPlant_NumModulesSeries
        //
        typedef ::xml_schema::double_ SimFlowPlant_NumModulesSeries_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NumModulesSeries_type > SimFlowPlant_NumModulesSeries_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NumModulesSeries_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NumModulesSeries_traits;

        const SimFlowPlant_NumModulesSeries_optional&
        SimFlowPlant_NumModulesSeries () const;

        SimFlowPlant_NumModulesSeries_optional&
        SimFlowPlant_NumModulesSeries ();

        void
        SimFlowPlant_NumModulesSeries (const SimFlowPlant_NumModulesSeries_type& x);

        void
        SimFlowPlant_NumModulesSeries (const SimFlowPlant_NumModulesSeries_optional& x);

        // PhotovoltaicPerformance_Simple_Name
        //
        typedef ::xml_schema::string PhotovoltaicPerformance_Simple_Name_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicPerformance_Simple_Name_type > PhotovoltaicPerformance_Simple_Name_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicPerformance_Simple_Name_type, char > PhotovoltaicPerformance_Simple_Name_traits;

        const PhotovoltaicPerformance_Simple_Name_optional&
        PhotovoltaicPerformance_Simple_Name () const;

        PhotovoltaicPerformance_Simple_Name_optional&
        PhotovoltaicPerformance_Simple_Name ();

        void
        PhotovoltaicPerformance_Simple_Name (const PhotovoltaicPerformance_Simple_Name_type& x);

        void
        PhotovoltaicPerformance_Simple_Name (const PhotovoltaicPerformance_Simple_Name_optional& x);

        void
        PhotovoltaicPerformance_Simple_Name (::std::auto_ptr< PhotovoltaicPerformance_Simple_Name_type > p);

        // PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells
        //
        typedef ::xml_schema::double_ PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_type > PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_type, char, ::xsd::cxx::tree::schema_type::double_ > PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_traits;

        const PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_optional&
        PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells () const;

        PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_optional&
        PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells ();

        void
        PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells (const PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_type& x);

        void
        PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells (const PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_optional& x);

        // PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode
        //
        typedef ::xml_schema::string PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_type > PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_type, char > PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_traits;

        const PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_optional&
        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode () const;

        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_optional&
        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode ();

        void
        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode (const PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_type& x);

        void
        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode (const PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_optional& x);

        void
        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode (::std::auto_ptr< PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_type > p);

        // PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed
        //
        typedef ::xml_schema::double_ PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_type > PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_type, char, ::xsd::cxx::tree::schema_type::double_ > PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_traits;

        const PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_optional&
        PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed () const;

        PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_optional&
        PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed ();

        void
        PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed (const PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_type& x);

        void
        PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed (const PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_optional& x);

        // PhotovoltaicPerformance_Simple_EfficiencyScheduleName
        //
        typedef ::xml_schema::idref PhotovoltaicPerformance_Simple_EfficiencyScheduleName_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicPerformance_Simple_EfficiencyScheduleName_type > PhotovoltaicPerformance_Simple_EfficiencyScheduleName_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicPerformance_Simple_EfficiencyScheduleName_type, char > PhotovoltaicPerformance_Simple_EfficiencyScheduleName_traits;

        const PhotovoltaicPerformance_Simple_EfficiencyScheduleName_optional&
        PhotovoltaicPerformance_Simple_EfficiencyScheduleName () const;

        PhotovoltaicPerformance_Simple_EfficiencyScheduleName_optional&
        PhotovoltaicPerformance_Simple_EfficiencyScheduleName ();

        void
        PhotovoltaicPerformance_Simple_EfficiencyScheduleName (const PhotovoltaicPerformance_Simple_EfficiencyScheduleName_type& x);

        void
        PhotovoltaicPerformance_Simple_EfficiencyScheduleName (const PhotovoltaicPerformance_Simple_EfficiencyScheduleName_optional& x);

        void
        PhotovoltaicPerformance_Simple_EfficiencyScheduleName (::std::auto_ptr< PhotovoltaicPerformance_Simple_EfficiencyScheduleName_type > p);

        // PVPerf_EquivOne_Diode_Name
        //
        typedef ::xml_schema::string PVPerf_EquivOne_Diode_Name_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_Name_type > PVPerf_EquivOne_Diode_Name_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_Name_type, char > PVPerf_EquivOne_Diode_Name_traits;

        const PVPerf_EquivOne_Diode_Name_optional&
        PVPerf_EquivOne_Diode_Name () const;

        PVPerf_EquivOne_Diode_Name_optional&
        PVPerf_EquivOne_Diode_Name ();

        void
        PVPerf_EquivOne_Diode_Name (const PVPerf_EquivOne_Diode_Name_type& x);

        void
        PVPerf_EquivOne_Diode_Name (const PVPerf_EquivOne_Diode_Name_optional& x);

        void
        PVPerf_EquivOne_Diode_Name (::std::auto_ptr< PVPerf_EquivOne_Diode_Name_type > p);

        // PVPerf_EquivOne_Diode_CellType
        //
        typedef ::xml_schema::string PVPerf_EquivOne_Diode_CellType_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_CellType_type > PVPerf_EquivOne_Diode_CellType_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_CellType_type, char > PVPerf_EquivOne_Diode_CellType_traits;

        const PVPerf_EquivOne_Diode_CellType_optional&
        PVPerf_EquivOne_Diode_CellType () const;

        PVPerf_EquivOne_Diode_CellType_optional&
        PVPerf_EquivOne_Diode_CellType ();

        void
        PVPerf_EquivOne_Diode_CellType (const PVPerf_EquivOne_Diode_CellType_type& x);

        void
        PVPerf_EquivOne_Diode_CellType (const PVPerf_EquivOne_Diode_CellType_optional& x);

        void
        PVPerf_EquivOne_Diode_CellType (::std::auto_ptr< PVPerf_EquivOne_Diode_CellType_type > p);

        // PVPerf_EquivOne_Diode_NumCellsSeries
        //
        typedef ::xml_schema::int_ PVPerf_EquivOne_Diode_NumCellsSeries_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_NumCellsSeries_type > PVPerf_EquivOne_Diode_NumCellsSeries_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_NumCellsSeries_type, char > PVPerf_EquivOne_Diode_NumCellsSeries_traits;

        const PVPerf_EquivOne_Diode_NumCellsSeries_optional&
        PVPerf_EquivOne_Diode_NumCellsSeries () const;

        PVPerf_EquivOne_Diode_NumCellsSeries_optional&
        PVPerf_EquivOne_Diode_NumCellsSeries ();

        void
        PVPerf_EquivOne_Diode_NumCellsSeries (const PVPerf_EquivOne_Diode_NumCellsSeries_type& x);

        void
        PVPerf_EquivOne_Diode_NumCellsSeries (const PVPerf_EquivOne_Diode_NumCellsSeries_optional& x);

        // PVPerf_EquivOne_Diode_ActiveArea
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_ActiveArea_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_ActiveArea_type > PVPerf_EquivOne_Diode_ActiveArea_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_ActiveArea_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_ActiveArea_traits;

        const PVPerf_EquivOne_Diode_ActiveArea_optional&
        PVPerf_EquivOne_Diode_ActiveArea () const;

        PVPerf_EquivOne_Diode_ActiveArea_optional&
        PVPerf_EquivOne_Diode_ActiveArea ();

        void
        PVPerf_EquivOne_Diode_ActiveArea (const PVPerf_EquivOne_Diode_ActiveArea_type& x);

        void
        PVPerf_EquivOne_Diode_ActiveArea (const PVPerf_EquivOne_Diode_ActiveArea_optional& x);

        // PVPerf_EquivOne_Diode_TransAbsorptanceProduct
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_TransAbsorptanceProduct_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_TransAbsorptanceProduct_type > PVPerf_EquivOne_Diode_TransAbsorptanceProduct_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_TransAbsorptanceProduct_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_TransAbsorptanceProduct_traits;

        const PVPerf_EquivOne_Diode_TransAbsorptanceProduct_optional&
        PVPerf_EquivOne_Diode_TransAbsorptanceProduct () const;

        PVPerf_EquivOne_Diode_TransAbsorptanceProduct_optional&
        PVPerf_EquivOne_Diode_TransAbsorptanceProduct ();

        void
        PVPerf_EquivOne_Diode_TransAbsorptanceProduct (const PVPerf_EquivOne_Diode_TransAbsorptanceProduct_type& x);

        void
        PVPerf_EquivOne_Diode_TransAbsorptanceProduct (const PVPerf_EquivOne_Diode_TransAbsorptanceProduct_optional& x);

        // PVPerf_EquivOne_Diode_SemiconductorBandgap
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_SemiconductorBandgap_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_SemiconductorBandgap_type > PVPerf_EquivOne_Diode_SemiconductorBandgap_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_SemiconductorBandgap_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_SemiconductorBandgap_traits;

        const PVPerf_EquivOne_Diode_SemiconductorBandgap_optional&
        PVPerf_EquivOne_Diode_SemiconductorBandgap () const;

        PVPerf_EquivOne_Diode_SemiconductorBandgap_optional&
        PVPerf_EquivOne_Diode_SemiconductorBandgap ();

        void
        PVPerf_EquivOne_Diode_SemiconductorBandgap (const PVPerf_EquivOne_Diode_SemiconductorBandgap_type& x);

        void
        PVPerf_EquivOne_Diode_SemiconductorBandgap (const PVPerf_EquivOne_Diode_SemiconductorBandgap_optional& x);

        // PVPerf_EquivOne_Diode_ShuntResist
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_ShuntResist_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_ShuntResist_type > PVPerf_EquivOne_Diode_ShuntResist_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_ShuntResist_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_ShuntResist_traits;

        const PVPerf_EquivOne_Diode_ShuntResist_optional&
        PVPerf_EquivOne_Diode_ShuntResist () const;

        PVPerf_EquivOne_Diode_ShuntResist_optional&
        PVPerf_EquivOne_Diode_ShuntResist ();

        void
        PVPerf_EquivOne_Diode_ShuntResist (const PVPerf_EquivOne_Diode_ShuntResist_type& x);

        void
        PVPerf_EquivOne_Diode_ShuntResist (const PVPerf_EquivOne_Diode_ShuntResist_optional& x);

        // PVPerf_EquivOne_Diode_ShortCircuitCurrent
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_ShortCircuitCurrent_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_ShortCircuitCurrent_type > PVPerf_EquivOne_Diode_ShortCircuitCurrent_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_ShortCircuitCurrent_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_ShortCircuitCurrent_traits;

        const PVPerf_EquivOne_Diode_ShortCircuitCurrent_optional&
        PVPerf_EquivOne_Diode_ShortCircuitCurrent () const;

        PVPerf_EquivOne_Diode_ShortCircuitCurrent_optional&
        PVPerf_EquivOne_Diode_ShortCircuitCurrent ();

        void
        PVPerf_EquivOne_Diode_ShortCircuitCurrent (const PVPerf_EquivOne_Diode_ShortCircuitCurrent_type& x);

        void
        PVPerf_EquivOne_Diode_ShortCircuitCurrent (const PVPerf_EquivOne_Diode_ShortCircuitCurrent_optional& x);

        // PVPerf_EquivOne_Diode_OpenCircuitVolt
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_OpenCircuitVolt_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_OpenCircuitVolt_type > PVPerf_EquivOne_Diode_OpenCircuitVolt_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_OpenCircuitVolt_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_OpenCircuitVolt_traits;

        const PVPerf_EquivOne_Diode_OpenCircuitVolt_optional&
        PVPerf_EquivOne_Diode_OpenCircuitVolt () const;

        PVPerf_EquivOne_Diode_OpenCircuitVolt_optional&
        PVPerf_EquivOne_Diode_OpenCircuitVolt ();

        void
        PVPerf_EquivOne_Diode_OpenCircuitVolt (const PVPerf_EquivOne_Diode_OpenCircuitVolt_type& x);

        void
        PVPerf_EquivOne_Diode_OpenCircuitVolt (const PVPerf_EquivOne_Diode_OpenCircuitVolt_optional& x);

        // PVPerf_EquivOne_Diode_RefTemp
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_RefTemp_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_RefTemp_type > PVPerf_EquivOne_Diode_RefTemp_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_RefTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_RefTemp_traits;

        const PVPerf_EquivOne_Diode_RefTemp_optional&
        PVPerf_EquivOne_Diode_RefTemp () const;

        PVPerf_EquivOne_Diode_RefTemp_optional&
        PVPerf_EquivOne_Diode_RefTemp ();

        void
        PVPerf_EquivOne_Diode_RefTemp (const PVPerf_EquivOne_Diode_RefTemp_type& x);

        void
        PVPerf_EquivOne_Diode_RefTemp (const PVPerf_EquivOne_Diode_RefTemp_optional& x);

        // PVPerf_EquivOne_Diode_RefInsol
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_RefInsol_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_RefInsol_type > PVPerf_EquivOne_Diode_RefInsol_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_RefInsol_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_RefInsol_traits;

        const PVPerf_EquivOne_Diode_RefInsol_optional&
        PVPerf_EquivOne_Diode_RefInsol () const;

        PVPerf_EquivOne_Diode_RefInsol_optional&
        PVPerf_EquivOne_Diode_RefInsol ();

        void
        PVPerf_EquivOne_Diode_RefInsol (const PVPerf_EquivOne_Diode_RefInsol_type& x);

        void
        PVPerf_EquivOne_Diode_RefInsol (const PVPerf_EquivOne_Diode_RefInsol_optional& x);

        // PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_type > PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_traits;

        const PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_optional&
        PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr () const;

        PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_optional&
        PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr ();

        void
        PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr (const PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_type& x);

        void
        PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr (const PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_optional& x);

        // PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_type > PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_traits;

        const PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_optional&
        PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr () const;

        PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_optional&
        PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr ();

        void
        PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr (const PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_type& x);

        void
        PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr (const PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_optional& x);

        // PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_type > PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_traits;

        const PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_optional&
        PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent () const;

        PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_optional&
        PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent ();

        void
        PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent (const PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_type& x);

        void
        PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent (const PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_optional& x);

        // PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_type > PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_traits;

        const PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_optional&
        PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt () const;

        PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_optional&
        PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt ();

        void
        PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt (const PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_type& x);

        void
        PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt (const PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_optional& x);

        // PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_type > PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_traits;

        const PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_optional&
        PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp () const;

        PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_optional&
        PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp ();

        void
        PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp (const PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_type& x);

        void
        PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp (const PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_optional& x);

        // PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_type > PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_traits;

        const PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_optional&
        PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp () const;

        PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_optional&
        PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp ();

        void
        PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp (const PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_type& x);

        void
        PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp (const PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_optional& x);

        // PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_type > PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_traits;

        const PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_optional&
        PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol () const;

        PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_optional&
        PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol ();

        void
        PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol (const PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_type& x);

        void
        PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol (const PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_optional& x);

        // PVPerf_EquivOne_Diode_ModuleHeatLossCoef
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_ModuleHeatLossCoef_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_ModuleHeatLossCoef_type > PVPerf_EquivOne_Diode_ModuleHeatLossCoef_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_ModuleHeatLossCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_ModuleHeatLossCoef_traits;

        const PVPerf_EquivOne_Diode_ModuleHeatLossCoef_optional&
        PVPerf_EquivOne_Diode_ModuleHeatLossCoef () const;

        PVPerf_EquivOne_Diode_ModuleHeatLossCoef_optional&
        PVPerf_EquivOne_Diode_ModuleHeatLossCoef ();

        void
        PVPerf_EquivOne_Diode_ModuleHeatLossCoef (const PVPerf_EquivOne_Diode_ModuleHeatLossCoef_type& x);

        void
        PVPerf_EquivOne_Diode_ModuleHeatLossCoef (const PVPerf_EquivOne_Diode_ModuleHeatLossCoef_optional& x);

        // PVPerf_EquivOne_Diode_TotalHeatCap
        //
        typedef ::xml_schema::double_ PVPerf_EquivOne_Diode_TotalHeatCap_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_EquivOne_Diode_TotalHeatCap_type > PVPerf_EquivOne_Diode_TotalHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_EquivOne_Diode_TotalHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_EquivOne_Diode_TotalHeatCap_traits;

        const PVPerf_EquivOne_Diode_TotalHeatCap_optional&
        PVPerf_EquivOne_Diode_TotalHeatCap () const;

        PVPerf_EquivOne_Diode_TotalHeatCap_optional&
        PVPerf_EquivOne_Diode_TotalHeatCap ();

        void
        PVPerf_EquivOne_Diode_TotalHeatCap (const PVPerf_EquivOne_Diode_TotalHeatCap_type& x);

        void
        PVPerf_EquivOne_Diode_TotalHeatCap (const PVPerf_EquivOne_Diode_TotalHeatCap_optional& x);

        // PVPerf_Sandia_Name
        //
        typedef ::xml_schema::string PVPerf_Sandia_Name_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_Name_type > PVPerf_Sandia_Name_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_Name_type, char > PVPerf_Sandia_Name_traits;

        const PVPerf_Sandia_Name_optional&
        PVPerf_Sandia_Name () const;

        PVPerf_Sandia_Name_optional&
        PVPerf_Sandia_Name ();

        void
        PVPerf_Sandia_Name (const PVPerf_Sandia_Name_type& x);

        void
        PVPerf_Sandia_Name (const PVPerf_Sandia_Name_optional& x);

        void
        PVPerf_Sandia_Name (::std::auto_ptr< PVPerf_Sandia_Name_type > p);

        // PVPerf_Sandia_ActiveArea
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_ActiveArea_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_ActiveArea_type > PVPerf_Sandia_ActiveArea_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_ActiveArea_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_ActiveArea_traits;

        const PVPerf_Sandia_ActiveArea_optional&
        PVPerf_Sandia_ActiveArea () const;

        PVPerf_Sandia_ActiveArea_optional&
        PVPerf_Sandia_ActiveArea ();

        void
        PVPerf_Sandia_ActiveArea (const PVPerf_Sandia_ActiveArea_type& x);

        void
        PVPerf_Sandia_ActiveArea (const PVPerf_Sandia_ActiveArea_optional& x);

        // PVPerf_Sandia_NumCellsSeries
        //
        typedef ::xml_schema::int_ PVPerf_Sandia_NumCellsSeries_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_NumCellsSeries_type > PVPerf_Sandia_NumCellsSeries_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_NumCellsSeries_type, char > PVPerf_Sandia_NumCellsSeries_traits;

        const PVPerf_Sandia_NumCellsSeries_optional&
        PVPerf_Sandia_NumCellsSeries () const;

        PVPerf_Sandia_NumCellsSeries_optional&
        PVPerf_Sandia_NumCellsSeries ();

        void
        PVPerf_Sandia_NumCellsSeries (const PVPerf_Sandia_NumCellsSeries_type& x);

        void
        PVPerf_Sandia_NumCellsSeries (const PVPerf_Sandia_NumCellsSeries_optional& x);

        // PVPerf_Sandia_NumCellsParallel
        //
        typedef ::xml_schema::int_ PVPerf_Sandia_NumCellsParallel_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_NumCellsParallel_type > PVPerf_Sandia_NumCellsParallel_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_NumCellsParallel_type, char > PVPerf_Sandia_NumCellsParallel_traits;

        const PVPerf_Sandia_NumCellsParallel_optional&
        PVPerf_Sandia_NumCellsParallel () const;

        PVPerf_Sandia_NumCellsParallel_optional&
        PVPerf_Sandia_NumCellsParallel ();

        void
        PVPerf_Sandia_NumCellsParallel (const PVPerf_Sandia_NumCellsParallel_type& x);

        void
        PVPerf_Sandia_NumCellsParallel (const PVPerf_Sandia_NumCellsParallel_optional& x);

        // PVPerf_Sandia_ShortCircuitCurrent
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_ShortCircuitCurrent_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_ShortCircuitCurrent_type > PVPerf_Sandia_ShortCircuitCurrent_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_ShortCircuitCurrent_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_ShortCircuitCurrent_traits;

        const PVPerf_Sandia_ShortCircuitCurrent_optional&
        PVPerf_Sandia_ShortCircuitCurrent () const;

        PVPerf_Sandia_ShortCircuitCurrent_optional&
        PVPerf_Sandia_ShortCircuitCurrent ();

        void
        PVPerf_Sandia_ShortCircuitCurrent (const PVPerf_Sandia_ShortCircuitCurrent_type& x);

        void
        PVPerf_Sandia_ShortCircuitCurrent (const PVPerf_Sandia_ShortCircuitCurrent_optional& x);

        // PVPerf_Sandia_OpenCircuitVolt
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_OpenCircuitVolt_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_OpenCircuitVolt_type > PVPerf_Sandia_OpenCircuitVolt_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_OpenCircuitVolt_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_OpenCircuitVolt_traits;

        const PVPerf_Sandia_OpenCircuitVolt_optional&
        PVPerf_Sandia_OpenCircuitVolt () const;

        PVPerf_Sandia_OpenCircuitVolt_optional&
        PVPerf_Sandia_OpenCircuitVolt ();

        void
        PVPerf_Sandia_OpenCircuitVolt (const PVPerf_Sandia_OpenCircuitVolt_type& x);

        void
        PVPerf_Sandia_OpenCircuitVolt (const PVPerf_Sandia_OpenCircuitVolt_optional& x);

        // PVPerf_Sandia_CurrentAtMaxPwrPoint
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_CurrentAtMaxPwrPoint_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_CurrentAtMaxPwrPoint_type > PVPerf_Sandia_CurrentAtMaxPwrPoint_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_CurrentAtMaxPwrPoint_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_CurrentAtMaxPwrPoint_traits;

        const PVPerf_Sandia_CurrentAtMaxPwrPoint_optional&
        PVPerf_Sandia_CurrentAtMaxPwrPoint () const;

        PVPerf_Sandia_CurrentAtMaxPwrPoint_optional&
        PVPerf_Sandia_CurrentAtMaxPwrPoint ();

        void
        PVPerf_Sandia_CurrentAtMaxPwrPoint (const PVPerf_Sandia_CurrentAtMaxPwrPoint_type& x);

        void
        PVPerf_Sandia_CurrentAtMaxPwrPoint (const PVPerf_Sandia_CurrentAtMaxPwrPoint_optional& x);

        // PVPerf_Sandia_VoltAtMaxPwrPoint
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_VoltAtMaxPwrPoint_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_VoltAtMaxPwrPoint_type > PVPerf_Sandia_VoltAtMaxPwrPoint_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_VoltAtMaxPwrPoint_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_VoltAtMaxPwrPoint_traits;

        const PVPerf_Sandia_VoltAtMaxPwrPoint_optional&
        PVPerf_Sandia_VoltAtMaxPwrPoint () const;

        PVPerf_Sandia_VoltAtMaxPwrPoint_optional&
        PVPerf_Sandia_VoltAtMaxPwrPoint ();

        void
        PVPerf_Sandia_VoltAtMaxPwrPoint (const PVPerf_Sandia_VoltAtMaxPwrPoint_type& x);

        void
        PVPerf_Sandia_VoltAtMaxPwrPoint (const PVPerf_Sandia_VoltAtMaxPwrPoint_optional& x);

        // PVPerf_Sandia_SandiaDbParamAc
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamAc_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamAc_type > PVPerf_Sandia_SandiaDbParamAc_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamAc_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamAc_traits;

        const PVPerf_Sandia_SandiaDbParamAc_optional&
        PVPerf_Sandia_SandiaDbParamAc () const;

        PVPerf_Sandia_SandiaDbParamAc_optional&
        PVPerf_Sandia_SandiaDbParamAc ();

        void
        PVPerf_Sandia_SandiaDbParamAc (const PVPerf_Sandia_SandiaDbParamAc_type& x);

        void
        PVPerf_Sandia_SandiaDbParamAc (const PVPerf_Sandia_SandiaDbParamAc_optional& x);

        // PVPerf_Sandia_SandiaDbParamAImp
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamAImp_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamAImp_type > PVPerf_Sandia_SandiaDbParamAImp_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamAImp_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamAImp_traits;

        const PVPerf_Sandia_SandiaDbParamAImp_optional&
        PVPerf_Sandia_SandiaDbParamAImp () const;

        PVPerf_Sandia_SandiaDbParamAImp_optional&
        PVPerf_Sandia_SandiaDbParamAImp ();

        void
        PVPerf_Sandia_SandiaDbParamAImp (const PVPerf_Sandia_SandiaDbParamAImp_type& x);

        void
        PVPerf_Sandia_SandiaDbParamAImp (const PVPerf_Sandia_SandiaDbParamAImp_optional& x);

        // PVPerf_Sandia_SandiaDBParamc0
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc0_type > PVPerf_Sandia_SandiaDBParamc0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc0_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc0_traits;

        const PVPerf_Sandia_SandiaDBParamc0_optional&
        PVPerf_Sandia_SandiaDBParamc0 () const;

        PVPerf_Sandia_SandiaDBParamc0_optional&
        PVPerf_Sandia_SandiaDBParamc0 ();

        void
        PVPerf_Sandia_SandiaDBParamc0 (const PVPerf_Sandia_SandiaDBParamc0_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc0 (const PVPerf_Sandia_SandiaDBParamc0_optional& x);

        // PVPerf_Sandia_SandiaDBParamc1
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc1_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc1_type > PVPerf_Sandia_SandiaDBParamc1_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc1_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc1_traits;

        const PVPerf_Sandia_SandiaDBParamc1_optional&
        PVPerf_Sandia_SandiaDBParamc1 () const;

        PVPerf_Sandia_SandiaDBParamc1_optional&
        PVPerf_Sandia_SandiaDBParamc1 ();

        void
        PVPerf_Sandia_SandiaDBParamc1 (const PVPerf_Sandia_SandiaDBParamc1_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc1 (const PVPerf_Sandia_SandiaDBParamc1_optional& x);

        // PVPerf_Sandia_SandiaDbParamBVoc0
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamBVoc0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamBVoc0_type > PVPerf_Sandia_SandiaDbParamBVoc0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamBVoc0_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamBVoc0_traits;

        const PVPerf_Sandia_SandiaDbParamBVoc0_optional&
        PVPerf_Sandia_SandiaDbParamBVoc0 () const;

        PVPerf_Sandia_SandiaDbParamBVoc0_optional&
        PVPerf_Sandia_SandiaDbParamBVoc0 ();

        void
        PVPerf_Sandia_SandiaDbParamBVoc0 (const PVPerf_Sandia_SandiaDbParamBVoc0_type& x);

        void
        PVPerf_Sandia_SandiaDbParamBVoc0 (const PVPerf_Sandia_SandiaDbParamBVoc0_optional& x);

        // PVPerf_Sandia_SandiaDbParamMBVoc
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamMBVoc_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamMBVoc_type > PVPerf_Sandia_SandiaDbParamMBVoc_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamMBVoc_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamMBVoc_traits;

        const PVPerf_Sandia_SandiaDbParamMBVoc_optional&
        PVPerf_Sandia_SandiaDbParamMBVoc () const;

        PVPerf_Sandia_SandiaDbParamMBVoc_optional&
        PVPerf_Sandia_SandiaDbParamMBVoc ();

        void
        PVPerf_Sandia_SandiaDbParamMBVoc (const PVPerf_Sandia_SandiaDbParamMBVoc_type& x);

        void
        PVPerf_Sandia_SandiaDbParamMBVoc (const PVPerf_Sandia_SandiaDbParamMBVoc_optional& x);

        // PVPerf_Sandia_SandiaDbParamBVmp0
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamBVmp0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamBVmp0_type > PVPerf_Sandia_SandiaDbParamBVmp0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamBVmp0_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamBVmp0_traits;

        const PVPerf_Sandia_SandiaDbParamBVmp0_optional&
        PVPerf_Sandia_SandiaDbParamBVmp0 () const;

        PVPerf_Sandia_SandiaDbParamBVmp0_optional&
        PVPerf_Sandia_SandiaDbParamBVmp0 ();

        void
        PVPerf_Sandia_SandiaDbParamBVmp0 (const PVPerf_Sandia_SandiaDbParamBVmp0_type& x);

        void
        PVPerf_Sandia_SandiaDbParamBVmp0 (const PVPerf_Sandia_SandiaDbParamBVmp0_optional& x);

        // PVPerf_Sandia_SandiaDbParamMBVmp
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamMBVmp_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamMBVmp_type > PVPerf_Sandia_SandiaDbParamMBVmp_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamMBVmp_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamMBVmp_traits;

        const PVPerf_Sandia_SandiaDbParamMBVmp_optional&
        PVPerf_Sandia_SandiaDbParamMBVmp () const;

        PVPerf_Sandia_SandiaDbParamMBVmp_optional&
        PVPerf_Sandia_SandiaDbParamMBVmp ();

        void
        PVPerf_Sandia_SandiaDbParamMBVmp (const PVPerf_Sandia_SandiaDbParamMBVmp_type& x);

        void
        PVPerf_Sandia_SandiaDbParamMBVmp (const PVPerf_Sandia_SandiaDbParamMBVmp_optional& x);

        // PVPerf_Sandia_DiodeFactor
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_DiodeFactor_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_DiodeFactor_type > PVPerf_Sandia_DiodeFactor_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_DiodeFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_DiodeFactor_traits;

        const PVPerf_Sandia_DiodeFactor_optional&
        PVPerf_Sandia_DiodeFactor () const;

        PVPerf_Sandia_DiodeFactor_optional&
        PVPerf_Sandia_DiodeFactor ();

        void
        PVPerf_Sandia_DiodeFactor (const PVPerf_Sandia_DiodeFactor_type& x);

        void
        PVPerf_Sandia_DiodeFactor (const PVPerf_Sandia_DiodeFactor_optional& x);

        // PVPerf_Sandia_SandiaDBParamc2
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc2_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc2_type > PVPerf_Sandia_SandiaDBParamc2_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc2_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc2_traits;

        const PVPerf_Sandia_SandiaDBParamc2_optional&
        PVPerf_Sandia_SandiaDBParamc2 () const;

        PVPerf_Sandia_SandiaDBParamc2_optional&
        PVPerf_Sandia_SandiaDBParamc2 ();

        void
        PVPerf_Sandia_SandiaDBParamc2 (const PVPerf_Sandia_SandiaDBParamc2_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc2 (const PVPerf_Sandia_SandiaDBParamc2_optional& x);

        // PVPerf_Sandia_SandiaDBParamc3
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc3_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc3_type > PVPerf_Sandia_SandiaDBParamc3_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc3_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc3_traits;

        const PVPerf_Sandia_SandiaDBParamc3_optional&
        PVPerf_Sandia_SandiaDBParamc3 () const;

        PVPerf_Sandia_SandiaDBParamc3_optional&
        PVPerf_Sandia_SandiaDBParamc3 ();

        void
        PVPerf_Sandia_SandiaDBParamc3 (const PVPerf_Sandia_SandiaDBParamc3_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc3 (const PVPerf_Sandia_SandiaDBParamc3_optional& x);

        // PVPerf_Sandia_SandiaDbParama_0_0
        //
        typedef ::schema::simxml::SimModelCore::doubleList PVPerf_Sandia_SandiaDbParama_0_0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParama_0_0_type > PVPerf_Sandia_SandiaDbParama_0_0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParama_0_0_type, char > PVPerf_Sandia_SandiaDbParama_0_0_traits;

        const PVPerf_Sandia_SandiaDbParama_0_0_optional&
        PVPerf_Sandia_SandiaDbParama_0_0 () const;

        PVPerf_Sandia_SandiaDbParama_0_0_optional&
        PVPerf_Sandia_SandiaDbParama_0_0 ();

        void
        PVPerf_Sandia_SandiaDbParama_0_0 (const PVPerf_Sandia_SandiaDbParama_0_0_type& x);

        void
        PVPerf_Sandia_SandiaDbParama_0_0 (const PVPerf_Sandia_SandiaDbParama_0_0_optional& x);

        void
        PVPerf_Sandia_SandiaDbParama_0_0 (::std::auto_ptr< PVPerf_Sandia_SandiaDbParama_0_0_type > p);

        // PVPerf_Sandia_SandiaDbParama_1_1
        //
        typedef ::schema::simxml::SimModelCore::doubleList PVPerf_Sandia_SandiaDbParama_1_1_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParama_1_1_type > PVPerf_Sandia_SandiaDbParama_1_1_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParama_1_1_type, char > PVPerf_Sandia_SandiaDbParama_1_1_traits;

        const PVPerf_Sandia_SandiaDbParama_1_1_optional&
        PVPerf_Sandia_SandiaDbParama_1_1 () const;

        PVPerf_Sandia_SandiaDbParama_1_1_optional&
        PVPerf_Sandia_SandiaDbParama_1_1 ();

        void
        PVPerf_Sandia_SandiaDbParama_1_1 (const PVPerf_Sandia_SandiaDbParama_1_1_type& x);

        void
        PVPerf_Sandia_SandiaDbParama_1_1 (const PVPerf_Sandia_SandiaDbParama_1_1_optional& x);

        void
        PVPerf_Sandia_SandiaDbParama_1_1 (::std::auto_ptr< PVPerf_Sandia_SandiaDbParama_1_1_type > p);

        // PVPerf_Sandia_SandiaDBParama2
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParama2_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParama2_type > PVPerf_Sandia_SandiaDBParama2_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParama2_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParama2_traits;

        const PVPerf_Sandia_SandiaDBParama2_optional&
        PVPerf_Sandia_SandiaDBParama2 () const;

        PVPerf_Sandia_SandiaDBParama2_optional&
        PVPerf_Sandia_SandiaDBParama2 ();

        void
        PVPerf_Sandia_SandiaDBParama2 (const PVPerf_Sandia_SandiaDBParama2_type& x);

        void
        PVPerf_Sandia_SandiaDBParama2 (const PVPerf_Sandia_SandiaDBParama2_optional& x);

        // PVPerf_Sandia_SandiaDBParama3
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParama3_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParama3_type > PVPerf_Sandia_SandiaDBParama3_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParama3_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParama3_traits;

        const PVPerf_Sandia_SandiaDBParama3_optional&
        PVPerf_Sandia_SandiaDBParama3 () const;

        PVPerf_Sandia_SandiaDBParama3_optional&
        PVPerf_Sandia_SandiaDBParama3 ();

        void
        PVPerf_Sandia_SandiaDBParama3 (const PVPerf_Sandia_SandiaDBParama3_type& x);

        void
        PVPerf_Sandia_SandiaDBParama3 (const PVPerf_Sandia_SandiaDBParama3_optional& x);

        // PVPerf_Sandia_SandiaDBParama4
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParama4_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParama4_type > PVPerf_Sandia_SandiaDBParama4_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParama4_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParama4_traits;

        const PVPerf_Sandia_SandiaDBParama4_optional&
        PVPerf_Sandia_SandiaDBParama4 () const;

        PVPerf_Sandia_SandiaDBParama4_optional&
        PVPerf_Sandia_SandiaDBParama4 ();

        void
        PVPerf_Sandia_SandiaDBParama4 (const PVPerf_Sandia_SandiaDBParama4_type& x);

        void
        PVPerf_Sandia_SandiaDBParama4 (const PVPerf_Sandia_SandiaDBParama4_optional& x);

        // PVPerf_Sandia_SandiaDbParamb_0_0
        //
        typedef ::schema::simxml::SimModelCore::doubleList PVPerf_Sandia_SandiaDbParamb_0_0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamb_0_0_type > PVPerf_Sandia_SandiaDbParamb_0_0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamb_0_0_type, char > PVPerf_Sandia_SandiaDbParamb_0_0_traits;

        const PVPerf_Sandia_SandiaDbParamb_0_0_optional&
        PVPerf_Sandia_SandiaDbParamb_0_0 () const;

        PVPerf_Sandia_SandiaDbParamb_0_0_optional&
        PVPerf_Sandia_SandiaDbParamb_0_0 ();

        void
        PVPerf_Sandia_SandiaDbParamb_0_0 (const PVPerf_Sandia_SandiaDbParamb_0_0_type& x);

        void
        PVPerf_Sandia_SandiaDbParamb_0_0 (const PVPerf_Sandia_SandiaDbParamb_0_0_optional& x);

        void
        PVPerf_Sandia_SandiaDbParamb_0_0 (::std::auto_ptr< PVPerf_Sandia_SandiaDbParamb_0_0_type > p);

        // PVPerf_Sandia_SandiaDbParamb_1_1
        //
        typedef ::schema::simxml::SimModelCore::doubleList PVPerf_Sandia_SandiaDbParamb_1_1_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamb_1_1_type > PVPerf_Sandia_SandiaDbParamb_1_1_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamb_1_1_type, char > PVPerf_Sandia_SandiaDbParamb_1_1_traits;

        const PVPerf_Sandia_SandiaDbParamb_1_1_optional&
        PVPerf_Sandia_SandiaDbParamb_1_1 () const;

        PVPerf_Sandia_SandiaDbParamb_1_1_optional&
        PVPerf_Sandia_SandiaDbParamb_1_1 ();

        void
        PVPerf_Sandia_SandiaDbParamb_1_1 (const PVPerf_Sandia_SandiaDbParamb_1_1_type& x);

        void
        PVPerf_Sandia_SandiaDbParamb_1_1 (const PVPerf_Sandia_SandiaDbParamb_1_1_optional& x);

        void
        PVPerf_Sandia_SandiaDbParamb_1_1 (::std::auto_ptr< PVPerf_Sandia_SandiaDbParamb_1_1_type > p);

        // PVPerf_Sandia_SandiaDBParamb2
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamb2_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamb2_type > PVPerf_Sandia_SandiaDBParamb2_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamb2_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamb2_traits;

        const PVPerf_Sandia_SandiaDBParamb2_optional&
        PVPerf_Sandia_SandiaDBParamb2 () const;

        PVPerf_Sandia_SandiaDBParamb2_optional&
        PVPerf_Sandia_SandiaDBParamb2 ();

        void
        PVPerf_Sandia_SandiaDBParamb2 (const PVPerf_Sandia_SandiaDBParamb2_type& x);

        void
        PVPerf_Sandia_SandiaDBParamb2 (const PVPerf_Sandia_SandiaDBParamb2_optional& x);

        // PVPerf_Sandia_SandiaDBParamb3
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamb3_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamb3_type > PVPerf_Sandia_SandiaDBParamb3_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamb3_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamb3_traits;

        const PVPerf_Sandia_SandiaDBParamb3_optional&
        PVPerf_Sandia_SandiaDBParamb3 () const;

        PVPerf_Sandia_SandiaDBParamb3_optional&
        PVPerf_Sandia_SandiaDBParamb3 ();

        void
        PVPerf_Sandia_SandiaDBParamb3 (const PVPerf_Sandia_SandiaDBParamb3_type& x);

        void
        PVPerf_Sandia_SandiaDBParamb3 (const PVPerf_Sandia_SandiaDBParamb3_optional& x);

        // PVPerf_Sandia_SandiaDBParamb4
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamb4_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamb4_type > PVPerf_Sandia_SandiaDBParamb4_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamb4_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamb4_traits;

        const PVPerf_Sandia_SandiaDBParamb4_optional&
        PVPerf_Sandia_SandiaDBParamb4 () const;

        PVPerf_Sandia_SandiaDBParamb4_optional&
        PVPerf_Sandia_SandiaDBParamb4 ();

        void
        PVPerf_Sandia_SandiaDBParamb4 (const PVPerf_Sandia_SandiaDBParamb4_type& x);

        void
        PVPerf_Sandia_SandiaDBParamb4 (const PVPerf_Sandia_SandiaDBParamb4_optional& x);

        // PVPerf_Sandia_SandiaDBParamb5
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamb5_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamb5_type > PVPerf_Sandia_SandiaDBParamb5_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamb5_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamb5_traits;

        const PVPerf_Sandia_SandiaDBParamb5_optional&
        PVPerf_Sandia_SandiaDBParamb5 () const;

        PVPerf_Sandia_SandiaDBParamb5_optional&
        PVPerf_Sandia_SandiaDBParamb5 ();

        void
        PVPerf_Sandia_SandiaDBParamb5 (const PVPerf_Sandia_SandiaDBParamb5_type& x);

        void
        PVPerf_Sandia_SandiaDBParamb5 (const PVPerf_Sandia_SandiaDBParamb5_optional& x);

        // PVPerf_Sandia_SandiaDbParamDeltaTc
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamDeltaTc_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamDeltaTc_type > PVPerf_Sandia_SandiaDbParamDeltaTc_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamDeltaTc_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamDeltaTc_traits;

        const PVPerf_Sandia_SandiaDbParamDeltaTc_optional&
        PVPerf_Sandia_SandiaDbParamDeltaTc () const;

        PVPerf_Sandia_SandiaDbParamDeltaTc_optional&
        PVPerf_Sandia_SandiaDbParamDeltaTc ();

        void
        PVPerf_Sandia_SandiaDbParamDeltaTc (const PVPerf_Sandia_SandiaDbParamDeltaTc_type& x);

        void
        PVPerf_Sandia_SandiaDbParamDeltaTc (const PVPerf_Sandia_SandiaDbParamDeltaTc_optional& x);

        // PVPerf_Sandia_SandiaDbParamFd
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamFd_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamFd_type > PVPerf_Sandia_SandiaDbParamFd_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamFd_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamFd_traits;

        const PVPerf_Sandia_SandiaDbParamFd_optional&
        PVPerf_Sandia_SandiaDbParamFd () const;

        PVPerf_Sandia_SandiaDbParamFd_optional&
        PVPerf_Sandia_SandiaDbParamFd ();

        void
        PVPerf_Sandia_SandiaDbParamFd (const PVPerf_Sandia_SandiaDbParamFd_type& x);

        void
        PVPerf_Sandia_SandiaDbParamFd (const PVPerf_Sandia_SandiaDbParamFd_optional& x);

        // PVPerf_Sandia_SandiaDbParamA
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamA_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamA_type > PVPerf_Sandia_SandiaDbParamA_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamA_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamA_traits;

        const PVPerf_Sandia_SandiaDbParamA_optional&
        PVPerf_Sandia_SandiaDbParamA () const;

        PVPerf_Sandia_SandiaDbParamA_optional&
        PVPerf_Sandia_SandiaDbParamA ();

        void
        PVPerf_Sandia_SandiaDbParamA (const PVPerf_Sandia_SandiaDbParamA_type& x);

        void
        PVPerf_Sandia_SandiaDbParamA (const PVPerf_Sandia_SandiaDbParamA_optional& x);

        // PVPerf_Sandia_SandiaDbParamB
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamB_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamB_type > PVPerf_Sandia_SandiaDbParamB_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamB_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamB_traits;

        const PVPerf_Sandia_SandiaDbParamB_optional&
        PVPerf_Sandia_SandiaDbParamB () const;

        PVPerf_Sandia_SandiaDbParamB_optional&
        PVPerf_Sandia_SandiaDbParamB ();

        void
        PVPerf_Sandia_SandiaDbParamB (const PVPerf_Sandia_SandiaDbParamB_type& x);

        void
        PVPerf_Sandia_SandiaDbParamB (const PVPerf_Sandia_SandiaDbParamB_optional& x);

        // PVPerf_Sandia_SandiaDBParamc4
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc4_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc4_type > PVPerf_Sandia_SandiaDBParamc4_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc4_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc4_traits;

        const PVPerf_Sandia_SandiaDBParamc4_optional&
        PVPerf_Sandia_SandiaDBParamc4 () const;

        PVPerf_Sandia_SandiaDBParamc4_optional&
        PVPerf_Sandia_SandiaDBParamc4 ();

        void
        PVPerf_Sandia_SandiaDBParamc4 (const PVPerf_Sandia_SandiaDBParamc4_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc4 (const PVPerf_Sandia_SandiaDBParamc4_optional& x);

        // PVPerf_Sandia_SandiaDBParamc5
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc5_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc5_type > PVPerf_Sandia_SandiaDBParamc5_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc5_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc5_traits;

        const PVPerf_Sandia_SandiaDBParamc5_optional&
        PVPerf_Sandia_SandiaDBParamc5 () const;

        PVPerf_Sandia_SandiaDBParamc5_optional&
        PVPerf_Sandia_SandiaDBParamc5 ();

        void
        PVPerf_Sandia_SandiaDBParamc5 (const PVPerf_Sandia_SandiaDBParamc5_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc5 (const PVPerf_Sandia_SandiaDBParamc5_optional& x);

        // PVPerf_Sandia_SandiaDbParamIx0
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamIx0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamIx0_type > PVPerf_Sandia_SandiaDbParamIx0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamIx0_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamIx0_traits;

        const PVPerf_Sandia_SandiaDbParamIx0_optional&
        PVPerf_Sandia_SandiaDbParamIx0 () const;

        PVPerf_Sandia_SandiaDbParamIx0_optional&
        PVPerf_Sandia_SandiaDbParamIx0 ();

        void
        PVPerf_Sandia_SandiaDbParamIx0 (const PVPerf_Sandia_SandiaDbParamIx0_type& x);

        void
        PVPerf_Sandia_SandiaDbParamIx0 (const PVPerf_Sandia_SandiaDbParamIx0_optional& x);

        // PVPerf_Sandia_SandiaDbParamIxx0
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDbParamIxx0_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDbParamIxx0_type > PVPerf_Sandia_SandiaDbParamIxx0_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDbParamIxx0_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDbParamIxx0_traits;

        const PVPerf_Sandia_SandiaDbParamIxx0_optional&
        PVPerf_Sandia_SandiaDbParamIxx0 () const;

        PVPerf_Sandia_SandiaDbParamIxx0_optional&
        PVPerf_Sandia_SandiaDbParamIxx0 ();

        void
        PVPerf_Sandia_SandiaDbParamIxx0 (const PVPerf_Sandia_SandiaDbParamIxx0_type& x);

        void
        PVPerf_Sandia_SandiaDbParamIxx0 (const PVPerf_Sandia_SandiaDbParamIxx0_optional& x);

        // PVPerf_Sandia_SandiaDBParamc6
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc6_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc6_type > PVPerf_Sandia_SandiaDBParamc6_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc6_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc6_traits;

        const PVPerf_Sandia_SandiaDBParamc6_optional&
        PVPerf_Sandia_SandiaDBParamc6 () const;

        PVPerf_Sandia_SandiaDBParamc6_optional&
        PVPerf_Sandia_SandiaDBParamc6 ();

        void
        PVPerf_Sandia_SandiaDBParamc6 (const PVPerf_Sandia_SandiaDBParamc6_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc6 (const PVPerf_Sandia_SandiaDBParamc6_optional& x);

        // PVPerf_Sandia_SandiaDBParamc7
        //
        typedef ::xml_schema::double_ PVPerf_Sandia_SandiaDBParamc7_type;
        typedef ::xsd::cxx::tree::optional< PVPerf_Sandia_SandiaDBParamc7_type > PVPerf_Sandia_SandiaDBParamc7_optional;
        typedef ::xsd::cxx::tree::traits< PVPerf_Sandia_SandiaDBParamc7_type, char, ::xsd::cxx::tree::schema_type::double_ > PVPerf_Sandia_SandiaDBParamc7_traits;

        const PVPerf_Sandia_SandiaDBParamc7_optional&
        PVPerf_Sandia_SandiaDBParamc7 () const;

        PVPerf_Sandia_SandiaDBParamc7_optional&
        PVPerf_Sandia_SandiaDBParamc7 ();

        void
        PVPerf_Sandia_SandiaDBParamc7 (const PVPerf_Sandia_SandiaDBParamc7_type& x);

        void
        PVPerf_Sandia_SandiaDBParamc7 (const PVPerf_Sandia_SandiaDBParamc7_optional& x);

        // Constructors.
        //
        SimFlowPlant_ElectricalGenerator_Photovoltaic ();

        SimFlowPlant_ElectricalGenerator_Photovoltaic (const RefId_type&);

        SimFlowPlant_ElectricalGenerator_Photovoltaic (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

        SimFlowPlant_ElectricalGenerator_Photovoltaic (const SimFlowPlant_ElectricalGenerator_Photovoltaic& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ElectricalGenerator_Photovoltaic*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ElectricalGenerator_Photovoltaic&
        operator= (const SimFlowPlant_ElectricalGenerator_Photovoltaic& x);

        virtual 
        ~SimFlowPlant_ElectricalGenerator_Photovoltaic ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_SurfName_optional SimFlowPlant_SurfName_;
        SimFlowPlant_PhotovoltaicPerfObjType_optional SimFlowPlant_PhotovoltaicPerfObjType_;
        SimFlowPlant_ModulePerfName_optional SimFlowPlant_ModulePerfName_;
        SimFlowPlant_HeatTranstegrationMode_optional SimFlowPlant_HeatTranstegrationMode_;
        SimFlowPlant_NumberofSeriesStringsinParallel_optional SimFlowPlant_NumberofSeriesStringsinParallel_;
        SimFlowPlant_NumModulesSeries_optional SimFlowPlant_NumModulesSeries_;
        PhotovoltaicPerformance_Simple_Name_optional PhotovoltaicPerformance_Simple_Name_;
        PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_optional PhotovoltaicPerformance_Simple_FractionOfSurfAreawithActiveSolarCells_;
        PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_optional PhotovoltaicPerformance_Simple_ConversionEfficiencyInputMode_;
        PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_optional PhotovoltaicPerformance_Simple_ValueforCellEfficiencyifFixed_;
        PhotovoltaicPerformance_Simple_EfficiencyScheduleName_optional PhotovoltaicPerformance_Simple_EfficiencyScheduleName_;
        PVPerf_EquivOne_Diode_Name_optional PVPerf_EquivOne_Diode_Name_;
        PVPerf_EquivOne_Diode_CellType_optional PVPerf_EquivOne_Diode_CellType_;
        PVPerf_EquivOne_Diode_NumCellsSeries_optional PVPerf_EquivOne_Diode_NumCellsSeries_;
        PVPerf_EquivOne_Diode_ActiveArea_optional PVPerf_EquivOne_Diode_ActiveArea_;
        PVPerf_EquivOne_Diode_TransAbsorptanceProduct_optional PVPerf_EquivOne_Diode_TransAbsorptanceProduct_;
        PVPerf_EquivOne_Diode_SemiconductorBandgap_optional PVPerf_EquivOne_Diode_SemiconductorBandgap_;
        PVPerf_EquivOne_Diode_ShuntResist_optional PVPerf_EquivOne_Diode_ShuntResist_;
        PVPerf_EquivOne_Diode_ShortCircuitCurrent_optional PVPerf_EquivOne_Diode_ShortCircuitCurrent_;
        PVPerf_EquivOne_Diode_OpenCircuitVolt_optional PVPerf_EquivOne_Diode_OpenCircuitVolt_;
        PVPerf_EquivOne_Diode_RefTemp_optional PVPerf_EquivOne_Diode_RefTemp_;
        PVPerf_EquivOne_Diode_RefInsol_optional PVPerf_EquivOne_Diode_RefInsol_;
        PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_optional PVPerf_EquivOne_Diode_ModuleCurrentAtMaxPwr_;
        PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_optional PVPerf_EquivOne_Diode_ModuleVoltAtMaxPwr_;
        PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_optional PVPerf_EquivOne_Diode_TempCoefShortCircuitCurrent_;
        PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_optional PVPerf_EquivOne_Diode_TempCoefOpenCircuitVolt_;
        PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_optional PVPerf_EquivOne_Diode_NomOperatCellTempTestAmbTemp_;
        PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_optional PVPerf_EquivOne_Diode_NomOperatCellTempTestCellTemp_;
        PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_optional PVPerf_EquivOne_Diode_NomOperatCellTempTestInsol_;
        PVPerf_EquivOne_Diode_ModuleHeatLossCoef_optional PVPerf_EquivOne_Diode_ModuleHeatLossCoef_;
        PVPerf_EquivOne_Diode_TotalHeatCap_optional PVPerf_EquivOne_Diode_TotalHeatCap_;
        PVPerf_Sandia_Name_optional PVPerf_Sandia_Name_;
        PVPerf_Sandia_ActiveArea_optional PVPerf_Sandia_ActiveArea_;
        PVPerf_Sandia_NumCellsSeries_optional PVPerf_Sandia_NumCellsSeries_;
        PVPerf_Sandia_NumCellsParallel_optional PVPerf_Sandia_NumCellsParallel_;
        PVPerf_Sandia_ShortCircuitCurrent_optional PVPerf_Sandia_ShortCircuitCurrent_;
        PVPerf_Sandia_OpenCircuitVolt_optional PVPerf_Sandia_OpenCircuitVolt_;
        PVPerf_Sandia_CurrentAtMaxPwrPoint_optional PVPerf_Sandia_CurrentAtMaxPwrPoint_;
        PVPerf_Sandia_VoltAtMaxPwrPoint_optional PVPerf_Sandia_VoltAtMaxPwrPoint_;
        PVPerf_Sandia_SandiaDbParamAc_optional PVPerf_Sandia_SandiaDbParamAc_;
        PVPerf_Sandia_SandiaDbParamAImp_optional PVPerf_Sandia_SandiaDbParamAImp_;
        PVPerf_Sandia_SandiaDBParamc0_optional PVPerf_Sandia_SandiaDBParamc0_;
        PVPerf_Sandia_SandiaDBParamc1_optional PVPerf_Sandia_SandiaDBParamc1_;
        PVPerf_Sandia_SandiaDbParamBVoc0_optional PVPerf_Sandia_SandiaDbParamBVoc0_;
        PVPerf_Sandia_SandiaDbParamMBVoc_optional PVPerf_Sandia_SandiaDbParamMBVoc_;
        PVPerf_Sandia_SandiaDbParamBVmp0_optional PVPerf_Sandia_SandiaDbParamBVmp0_;
        PVPerf_Sandia_SandiaDbParamMBVmp_optional PVPerf_Sandia_SandiaDbParamMBVmp_;
        PVPerf_Sandia_DiodeFactor_optional PVPerf_Sandia_DiodeFactor_;
        PVPerf_Sandia_SandiaDBParamc2_optional PVPerf_Sandia_SandiaDBParamc2_;
        PVPerf_Sandia_SandiaDBParamc3_optional PVPerf_Sandia_SandiaDBParamc3_;
        PVPerf_Sandia_SandiaDbParama_0_0_optional PVPerf_Sandia_SandiaDbParama_0_0_;
        PVPerf_Sandia_SandiaDbParama_1_1_optional PVPerf_Sandia_SandiaDbParama_1_1_;
        PVPerf_Sandia_SandiaDBParama2_optional PVPerf_Sandia_SandiaDBParama2_;
        PVPerf_Sandia_SandiaDBParama3_optional PVPerf_Sandia_SandiaDBParama3_;
        PVPerf_Sandia_SandiaDBParama4_optional PVPerf_Sandia_SandiaDBParama4_;
        PVPerf_Sandia_SandiaDbParamb_0_0_optional PVPerf_Sandia_SandiaDbParamb_0_0_;
        PVPerf_Sandia_SandiaDbParamb_1_1_optional PVPerf_Sandia_SandiaDbParamb_1_1_;
        PVPerf_Sandia_SandiaDBParamb2_optional PVPerf_Sandia_SandiaDBParamb2_;
        PVPerf_Sandia_SandiaDBParamb3_optional PVPerf_Sandia_SandiaDBParamb3_;
        PVPerf_Sandia_SandiaDBParamb4_optional PVPerf_Sandia_SandiaDBParamb4_;
        PVPerf_Sandia_SandiaDBParamb5_optional PVPerf_Sandia_SandiaDBParamb5_;
        PVPerf_Sandia_SandiaDbParamDeltaTc_optional PVPerf_Sandia_SandiaDbParamDeltaTc_;
        PVPerf_Sandia_SandiaDbParamFd_optional PVPerf_Sandia_SandiaDbParamFd_;
        PVPerf_Sandia_SandiaDbParamA_optional PVPerf_Sandia_SandiaDbParamA_;
        PVPerf_Sandia_SandiaDbParamB_optional PVPerf_Sandia_SandiaDbParamB_;
        PVPerf_Sandia_SandiaDBParamc4_optional PVPerf_Sandia_SandiaDBParamc4_;
        PVPerf_Sandia_SandiaDBParamc5_optional PVPerf_Sandia_SandiaDBParamc5_;
        PVPerf_Sandia_SandiaDbParamIx0_optional PVPerf_Sandia_SandiaDbParamIx0_;
        PVPerf_Sandia_SandiaDbParamIxx0_optional PVPerf_Sandia_SandiaDbParamIxx0_;
        PVPerf_Sandia_SandiaDBParamc6_optional PVPerf_Sandia_SandiaDBParamc6_;
        PVPerf_Sandia_SandiaDBParamc7_optional PVPerf_Sandia_SandiaDBParamc7_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_PHOTOVOLTAIC_HXX
