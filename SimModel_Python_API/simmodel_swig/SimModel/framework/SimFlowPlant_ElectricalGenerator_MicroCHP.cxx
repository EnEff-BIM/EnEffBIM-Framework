// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ElectricalGenerator_MicroCHP.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_MicroCHP
      // 

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_Name_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_AirInNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirInNodeName () const
      {
        return this->SimFlowPlant_AirInNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_AirInNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirInNodeName ()
      {
        return this->SimFlowPlant_AirInNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_type& x)
      {
        this->SimFlowPlant_AirInNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_optional& x)
      {
        this->SimFlowPlant_AirInNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirInNodeName (::std::auto_ptr< SimFlowPlant_AirInNodeName_type > x)
      {
        this->SimFlowPlant_AirInNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_AirOutNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirOutNodeName () const
      {
        return this->SimFlowPlant_AirOutNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_AirOutNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirOutNodeName ()
      {
        return this->SimFlowPlant_AirOutNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_type& x)
      {
        this->SimFlowPlant_AirOutNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_optional& x)
      {
        this->SimFlowPlant_AirOutNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AirOutNodeName (::std::auto_ptr< SimFlowPlant_AirOutNodeName_type > x)
      {
        this->SimFlowPlant_AirOutNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_AvailSchedName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AvailSchedName () const
      {
        return this->SimFlowPlant_AvailSchedName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_AvailSchedName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AvailSchedName ()
      {
        return this->SimFlowPlant_AvailSchedName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_type& x)
      {
        this->SimFlowPlant_AvailSchedName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_optional& x)
      {
        this->SimFlowPlant_AvailSchedName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_AvailSchedName (::std::auto_ptr< SimFlowPlant_AvailSchedName_type > x)
      {
        this->SimFlowPlant_AvailSchedName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_PerfParamsName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_PerfParamsName () const
      {
        return this->SimFlowPlant_PerfParamsName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_PerfParamsName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_PerfParamsName ()
      {
        return this->SimFlowPlant_PerfParamsName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_PerfParamsName (const SimFlowPlant_PerfParamsName_type& x)
      {
        this->SimFlowPlant_PerfParamsName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_PerfParamsName (const SimFlowPlant_PerfParamsName_optional& x)
      {
        this->SimFlowPlant_PerfParamsName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_PerfParamsName (::std::auto_ptr< SimFlowPlant_PerfParamsName_type > x)
      {
        this->SimFlowPlant_PerfParamsName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_ZoneName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ZoneName () const
      {
        return this->SimFlowPlant_ZoneName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_ZoneName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ZoneName ()
      {
        return this->SimFlowPlant_ZoneName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ZoneName (const SimFlowPlant_ZoneName_type& x)
      {
        this->SimFlowPlant_ZoneName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ZoneName (const SimFlowPlant_ZoneName_optional& x)
      {
        this->SimFlowPlant_ZoneName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ZoneName (::std::auto_ptr< SimFlowPlant_ZoneName_type > x)
      {
        this->SimFlowPlant_ZoneName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_CoolingWaterInletNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterInletNodeName () const
      {
        return this->SimFlowPlant_CoolingWaterInletNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_CoolingWaterInletNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterInletNodeName ()
      {
        return this->SimFlowPlant_CoolingWaterInletNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterInletNodeName (const SimFlowPlant_CoolingWaterInletNodeName_type& x)
      {
        this->SimFlowPlant_CoolingWaterInletNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterInletNodeName (const SimFlowPlant_CoolingWaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_CoolingWaterInletNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterInletNodeName (::std::auto_ptr< SimFlowPlant_CoolingWaterInletNodeName_type > x)
      {
        this->SimFlowPlant_CoolingWaterInletNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_CoolingWaterOutletNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterOutletNodeName () const
      {
        return this->SimFlowPlant_CoolingWaterOutletNodeName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_CoolingWaterOutletNodeName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterOutletNodeName ()
      {
        return this->SimFlowPlant_CoolingWaterOutletNodeName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterOutletNodeName (const SimFlowPlant_CoolingWaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_CoolingWaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterOutletNodeName (const SimFlowPlant_CoolingWaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_CoolingWaterOutletNodeName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_CoolingWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_CoolingWaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_CoolingWaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_GenFuelSupplyName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_GenFuelSupplyName () const
      {
        return this->SimFlowPlant_GenFuelSupplyName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::SimFlowPlant_GenFuelSupplyName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_GenFuelSupplyName ()
      {
        return this->SimFlowPlant_GenFuelSupplyName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_GenFuelSupplyName (const SimFlowPlant_GenFuelSupplyName_type& x)
      {
        this->SimFlowPlant_GenFuelSupplyName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_GenFuelSupplyName (const SimFlowPlant_GenFuelSupplyName_optional& x)
      {
        this->SimFlowPlant_GenFuelSupplyName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_GenFuelSupplyName (::std::auto_ptr< SimFlowPlant_GenFuelSupplyName_type > x)
      {
        this->SimFlowPlant_GenFuelSupplyName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_Name_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_Name () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_Name_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_Name_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_Name ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_Name_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_Name (const Generator_MicroCHP_NonNormalizedParams_Name_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_Name_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_Name (const Generator_MicroCHP_NonNormalizedParams_Name_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_Name_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_Name (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_Name_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_Name_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxElectricPower () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxElectricPower ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxElectricPower (const Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxElectricPower (const Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinElectricPower () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinElectricPower ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinElectricPower (const Generator_MicroCHP_NonNormalizedParams_MinElectricPower_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinElectricPower (const Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate (const Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate (const Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp (const Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp (const Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal (const Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal (const Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue (const Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue (const Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract (const Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract (const Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_StandbyPwr () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_StandbyPwr ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_StandbyPwr (const Generator_MicroCHP_NonNormalizedParams_StandbyPwr_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_StandbyPwr (const Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpMode () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpMode ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpMode (const Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpMode (const Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpMode (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp (const Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp (const Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime (const Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime (const Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownPower () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownPower ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownPower (const Generator_MicroCHP_NonNormalizedParams_CoolDownPower_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownPower (const Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime (const Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime (const Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_RestartMode_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_RestartMode () const
      {
        return this->Generator_MicroCHP_NonNormalizedParams_RestartMode_;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::Generator_MicroCHP_NonNormalizedParams_RestartMode_optional& SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_RestartMode ()
      {
        return this->Generator_MicroCHP_NonNormalizedParams_RestartMode_;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_RestartMode (const Generator_MicroCHP_NonNormalizedParams_RestartMode_type& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_RestartMode_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_RestartMode (const Generator_MicroCHP_NonNormalizedParams_RestartMode_optional& x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_RestartMode_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      Generator_MicroCHP_NonNormalizedParams_RestartMode (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_RestartMode_type > x)
      {
        this->Generator_MicroCHP_NonNormalizedParams_RestartMode_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_MicroCHP
      //

      SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ElectricalGenerator_MicroCHP ()
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_AirOutNodeName_ (this),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_PerfParamsName_ (this),
        SimFlowPlant_ZoneName_ (this),
        SimFlowPlant_CoolingWaterInletNodeName_ (this),
        SimFlowPlant_CoolingWaterOutletNodeName_ (this),
        SimFlowPlant_GenFuelSupplyName_ (this),
        Generator_MicroCHP_NonNormalizedParams_Name_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_ (this),
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_ (this),
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_ (this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_ (this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_ (this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_ (this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_ (this),
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_ (this),
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_ (this),
        Generator_MicroCHP_NonNormalizedParams_RestartMode_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ElectricalGenerator_MicroCHP (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_AirOutNodeName_ (this),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_PerfParamsName_ (this),
        SimFlowPlant_ZoneName_ (this),
        SimFlowPlant_CoolingWaterInletNodeName_ (this),
        SimFlowPlant_CoolingWaterOutletNodeName_ (this),
        SimFlowPlant_GenFuelSupplyName_ (this),
        Generator_MicroCHP_NonNormalizedParams_Name_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_ (this),
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_ (this),
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_ (this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_ (this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_ (this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_ (this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_ (this),
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_ (this),
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_ (this),
        Generator_MicroCHP_NonNormalizedParams_RestartMode_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ElectricalGenerator_MicroCHP (const SimFlowPlant_ElectricalGenerator_MicroCHP& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_AirInNodeName_ (x.SimFlowPlant_AirInNodeName_, f, this),
        SimFlowPlant_AirOutNodeName_ (x.SimFlowPlant_AirOutNodeName_, f, this),
        SimFlowPlant_AvailSchedName_ (x.SimFlowPlant_AvailSchedName_, f, this),
        SimFlowPlant_PerfParamsName_ (x.SimFlowPlant_PerfParamsName_, f, this),
        SimFlowPlant_ZoneName_ (x.SimFlowPlant_ZoneName_, f, this),
        SimFlowPlant_CoolingWaterInletNodeName_ (x.SimFlowPlant_CoolingWaterInletNodeName_, f, this),
        SimFlowPlant_CoolingWaterOutletNodeName_ (x.SimFlowPlant_CoolingWaterOutletNodeName_, f, this),
        SimFlowPlant_GenFuelSupplyName_ (x.SimFlowPlant_GenFuelSupplyName_, f, this),
        Generator_MicroCHP_NonNormalizedParams_Name_ (x.Generator_MicroCHP_NonNormalizedParams_Name_, f, this),
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_ (x.Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_, f, this),
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower_ (x.Generator_MicroCHP_NonNormalizedParams_MinElectricPower_, f, this),
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_ (x.Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_, f, this),
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_ (x.Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_, f, this),
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_ (x.Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_, f, this),
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_ (x.Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_, f, this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_ (x.Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_, f, this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_ (x.Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_, f, this),
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_ (x.Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_, f, this),
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_ (x.Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_, f, this),
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_ (x.Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_, f, this),
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_ (x.Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_, f, this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_ (x.Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_, f, this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_ (x.Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_, f, this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_ (x.Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_, f, this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_ (x.Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_, f, this),
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr_ (x.Generator_MicroCHP_NonNormalizedParams_StandbyPwr_, f, this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode_ (x.Generator_MicroCHP_NonNormalizedParams_WarmUpMode_, f, this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_ (x.Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_, f, this),
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_ (x.Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_, f, this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_ (x.Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_, f, this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_ (x.Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_, f, this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_ (x.Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_, f, this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower_ (x.Generator_MicroCHP_NonNormalizedParams_CoolDownPower_, f, this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_ (x.Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_, f, this),
        Generator_MicroCHP_NonNormalizedParams_RestartMode_ (x.Generator_MicroCHP_NonNormalizedParams_RestartMode_, f, this)
      {
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::
      SimFlowPlant_ElectricalGenerator_MicroCHP (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_AirOutNodeName_ (this),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_PerfParamsName_ (this),
        SimFlowPlant_ZoneName_ (this),
        SimFlowPlant_CoolingWaterInletNodeName_ (this),
        SimFlowPlant_CoolingWaterOutletNodeName_ (this),
        SimFlowPlant_GenFuelSupplyName_ (this),
        Generator_MicroCHP_NonNormalizedParams_Name_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_ (this),
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_ (this),
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_ (this),
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_ (this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_ (this),
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_ (this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_ (this),
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_ (this),
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_ (this),
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_ (this),
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower_ (this),
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_ (this),
        Generator_MicroCHP_NonNormalizedParams_RestartMode_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ElectricalGenerator_MicroCHP::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirInNodeName
          //
          if (n.name () == "SimFlowPlant_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirInNodeName_type > r (
              SimFlowPlant_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirInNodeName_)
            {
              this->SimFlowPlant_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirOutNodeName
          //
          if (n.name () == "SimFlowPlant_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirOutNodeName_type > r (
              SimFlowPlant_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirOutNodeName_)
            {
              this->SimFlowPlant_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AvailSchedName
          //
          if (n.name () == "SimFlowPlant_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AvailSchedName_type > r (
              SimFlowPlant_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AvailSchedName_)
            {
              this->SimFlowPlant_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_PerfParamsName
          //
          if (n.name () == "SimFlowPlant_PerfParamsName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_PerfParamsName_type > r (
              SimFlowPlant_PerfParamsName_traits::create (i, f, this));

            if (!this->SimFlowPlant_PerfParamsName_)
            {
              this->SimFlowPlant_PerfParamsName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ZoneName
          //
          if (n.name () == "SimFlowPlant_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ZoneName_type > r (
              SimFlowPlant_ZoneName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ZoneName_)
            {
              this->SimFlowPlant_ZoneName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CoolingWaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_CoolingWaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingWaterInletNodeName_type > r (
              SimFlowPlant_CoolingWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CoolingWaterInletNodeName_)
            {
              this->SimFlowPlant_CoolingWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CoolingWaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_CoolingWaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingWaterOutletNodeName_type > r (
              SimFlowPlant_CoolingWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CoolingWaterOutletNodeName_)
            {
              this->SimFlowPlant_CoolingWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_GenFuelSupplyName
          //
          if (n.name () == "SimFlowPlant_GenFuelSupplyName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_GenFuelSupplyName_type > r (
              SimFlowPlant_GenFuelSupplyName_traits::create (i, f, this));

            if (!this->SimFlowPlant_GenFuelSupplyName_)
            {
              this->SimFlowPlant_GenFuelSupplyName_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_Name
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_Name_type > r (
              Generator_MicroCHP_NonNormalizedParams_Name_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_Name_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_Name_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_MaxElectricPower
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_MaxElectricPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_.set (Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_MinElectricPower
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_MinElectricPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_.set (Generator_MicroCHP_NonNormalizedParams_MinElectricPower_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_.set (Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_.set (Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type > r (
              Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type > r (
              Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type > r (
              Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type > r (
              Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type > r (
              Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_.set (Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_.set (Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_.set (Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_.set (Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_.set (Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_.set (Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_.set (Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_StandbyPwr
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_StandbyPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_.set (Generator_MicroCHP_NonNormalizedParams_StandbyPwr_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_WarmUpMode
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_WarmUpMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type > r (
              Generator_MicroCHP_NonNormalizedParams_WarmUpMode_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_.set (r);
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_.set (Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_.set (Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_.set (Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_.set (Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_.set (Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_CoolDownPower
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_CoolDownPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_.set (Generator_MicroCHP_NonNormalizedParams_CoolDownPower_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_.set (Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_traits::create (i, f, this));
              continue;
            }
          }

          // Generator_MicroCHP_NonNormalizedParams_RestartMode
          //
          if (n.name () == "Generator_MicroCHP_NonNormalizedParams_RestartMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_RestartMode_type > r (
              Generator_MicroCHP_NonNormalizedParams_RestartMode_traits::create (i, f, this));

            if (!this->Generator_MicroCHP_NonNormalizedParams_RestartMode_)
            {
              this->Generator_MicroCHP_NonNormalizedParams_RestartMode_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP* SimFlowPlant_ElectricalGenerator_MicroCHP::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ElectricalGenerator_MicroCHP (*this, f, c);
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP& SimFlowPlant_ElectricalGenerator_MicroCHP::
      operator= (const SimFlowPlant_ElectricalGenerator_MicroCHP& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_AirInNodeName_ = x.SimFlowPlant_AirInNodeName_;
          this->SimFlowPlant_AirOutNodeName_ = x.SimFlowPlant_AirOutNodeName_;
          this->SimFlowPlant_AvailSchedName_ = x.SimFlowPlant_AvailSchedName_;
          this->SimFlowPlant_PerfParamsName_ = x.SimFlowPlant_PerfParamsName_;
          this->SimFlowPlant_ZoneName_ = x.SimFlowPlant_ZoneName_;
          this->SimFlowPlant_CoolingWaterInletNodeName_ = x.SimFlowPlant_CoolingWaterInletNodeName_;
          this->SimFlowPlant_CoolingWaterOutletNodeName_ = x.SimFlowPlant_CoolingWaterOutletNodeName_;
          this->SimFlowPlant_GenFuelSupplyName_ = x.SimFlowPlant_GenFuelSupplyName_;
          this->Generator_MicroCHP_NonNormalizedParams_Name_ = x.Generator_MicroCHP_NonNormalizedParams_Name_;
          this->Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_ = x.Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_;
          this->Generator_MicroCHP_NonNormalizedParams_MinElectricPower_ = x.Generator_MicroCHP_NonNormalizedParams_MinElectricPower_;
          this->Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_ = x.Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_;
          this->Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_ = x.Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_;
          this->Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_ = x.Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_;
          this->Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_ = x.Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_;
          this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_ = x.Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_;
          this->Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_ = x.Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_;
          this->Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_ = x.Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_;
          this->Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_ = x.Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_;
          this->Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_ = x.Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_;
          this->Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_ = x.Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_;
          this->Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_ = x.Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_;
          this->Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_ = x.Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_;
          this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_ = x.Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_;
          this->Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_ = x.Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_;
          this->Generator_MicroCHP_NonNormalizedParams_StandbyPwr_ = x.Generator_MicroCHP_NonNormalizedParams_StandbyPwr_;
          this->Generator_MicroCHP_NonNormalizedParams_WarmUpMode_ = x.Generator_MicroCHP_NonNormalizedParams_WarmUpMode_;
          this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_ = x.Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_;
          this->Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_ = x.Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_;
          this->Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_ = x.Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_;
          this->Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_ = x.Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_;
          this->Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_ = x.Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_;
          this->Generator_MicroCHP_NonNormalizedParams_CoolDownPower_ = x.Generator_MicroCHP_NonNormalizedParams_CoolDownPower_;
          this->Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_ = x.Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_;
          this->Generator_MicroCHP_NonNormalizedParams_RestartMode_ = x.Generator_MicroCHP_NonNormalizedParams_RestartMode_;
        }

        return *this;
      }

      SimFlowPlant_ElectricalGenerator_MicroCHP::
      ~SimFlowPlant_ElectricalGenerator_MicroCHP ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

