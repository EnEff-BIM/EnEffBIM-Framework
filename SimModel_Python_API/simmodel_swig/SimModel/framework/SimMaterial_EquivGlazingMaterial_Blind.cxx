// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_EquivGlazingMaterial_Blind.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Blind
      // 

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatWidth_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatWidth () const
      {
        return this->SimMaterial_SlatWidth_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatWidth_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatWidth ()
      {
        return this->SimMaterial_SlatWidth_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatWidth (const SimMaterial_SlatWidth_type& x)
      {
        this->SimMaterial_SlatWidth_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatWidth (const SimMaterial_SlatWidth_optional& x)
      {
        this->SimMaterial_SlatWidth_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatAngle_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngle () const
      {
        return this->SimMaterial_SlatAngle_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatAngle_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngle ()
      {
        return this->SimMaterial_SlatAngle_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngle (const SimMaterial_SlatAngle_type& x)
      {
        this->SimMaterial_SlatAngle_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngle (const SimMaterial_SlatAngle_optional& x)
      {
        this->SimMaterial_SlatAngle_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatOrientation_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatOrientation () const
      {
        return this->SimMaterial_SlatOrientation_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatOrientation_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatOrientation ()
      {
        return this->SimMaterial_SlatOrientation_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatOrientation (const SimMaterial_SlatOrientation_type& x)
      {
        this->SimMaterial_SlatOrientation_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatOrientation (const SimMaterial_SlatOrientation_optional& x)
      {
        this->SimMaterial_SlatOrientation_ = x;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatOrientation (::std::auto_ptr< SimMaterial_SlatOrientation_type > x)
      {
        this->SimMaterial_SlatOrientation_.set (x);
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatSeparation_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatSeparation () const
      {
        return this->SimMaterial_SlatSeparation_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatSeparation_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatSeparation ()
      {
        return this->SimMaterial_SlatSeparation_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatSeparation (const SimMaterial_SlatSeparation_type& x)
      {
        this->SimMaterial_SlatSeparation_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatSeparation (const SimMaterial_SlatSeparation_optional& x)
      {
        this->SimMaterial_SlatSeparation_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatCrown_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatCrown () const
      {
        return this->SimMaterial_SlatCrown_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatCrown_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatCrown ()
      {
        return this->SimMaterial_SlatCrown_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatCrown (const SimMaterial_SlatCrown_type& x)
      {
        this->SimMaterial_SlatCrown_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatCrown (const SimMaterial_SlatCrown_optional& x)
      {
        this->SimMaterial_SlatCrown_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans (const SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans (const SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarTrans (const SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarTrans (const SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect (const SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect (const SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarReflect (const SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseSolarReflect (const SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans () const
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans ()
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans (const SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_type& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans (const SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_optional& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans () const
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans ()
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans (const SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_type& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans (const SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_optional& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect () const
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect ()
      {
        return this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect (const SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect (const SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect () const
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect ()
      {
        return this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect (const SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_type& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect (const SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatDiffuse_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseSolarTrans () const
      {
        return this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatDiffuse_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseSolarTrans ()
      {
        return this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseSolarTrans (const SimMaterial_SlatDiffuse_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseSolarTrans (const SimMaterial_SlatDiffuse_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect () const
      {
        return this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect ()
      {
        return this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect (const SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect (const SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect () const
      {
        return this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect ()
      {
        return this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect (const SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect (const SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatDiffuse_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseVisibleTrans () const
      {
        return this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatDiffuse_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseVisibleTrans ()
      {
        return this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseVisibleTrans (const SimMaterial_SlatDiffuse_DiffuseVisibleTrans_type& x)
      {
        this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatDiffuse_DiffuseVisibleTrans (const SimMaterial_SlatDiffuse_DiffuseVisibleTrans_optional& x)
      {
        this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect () const
      {
        return this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect ()
      {
        return this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect (const SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect (const SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect () const
      {
        return this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect ()
      {
        return this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect (const SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_type& x)
      {
        this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect (const SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatInfraredTrans () const
      {
        return this->SimMaterial_SlatInfraredTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatInfraredTrans ()
      {
        return this->SimMaterial_SlatInfraredTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatInfraredTrans (const SimMaterial_SlatInfraredTrans_type& x)
      {
        this->SimMaterial_SlatInfraredTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatInfraredTrans (const SimMaterial_SlatInfraredTrans_optional& x)
      {
        this->SimMaterial_SlatInfraredTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredEmissivity () const
      {
        return this->SimMaterial_FrontSideSlatInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_FrontSideSlatInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredEmissivity ()
      {
        return this->SimMaterial_FrontSideSlatInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredEmissivity (const SimMaterial_FrontSideSlatInfraredEmissivity_type& x)
      {
        this->SimMaterial_FrontSideSlatInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredEmissivity (const SimMaterial_FrontSideSlatInfraredEmissivity_optional& x)
      {
        this->SimMaterial_FrontSideSlatInfraredEmissivity_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredEmissivity () const
      {
        return this->SimMaterial_BackSideSlatInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_BackSideSlatInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredEmissivity ()
      {
        return this->SimMaterial_BackSideSlatInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredEmissivity (const SimMaterial_BackSideSlatInfraredEmissivity_type& x)
      {
        this->SimMaterial_BackSideSlatInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredEmissivity (const SimMaterial_BackSideSlatInfraredEmissivity_optional& x)
      {
        this->SimMaterial_BackSideSlatInfraredEmissivity_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatAngleCntrl_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngleCntrl () const
      {
        return this->SimMaterial_SlatAngleCntrl_;
      }

      SimMaterial_EquivGlazingMaterial_Blind::SimMaterial_SlatAngleCntrl_optional& SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngleCntrl ()
      {
        return this->SimMaterial_SlatAngleCntrl_;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngleCntrl (const SimMaterial_SlatAngleCntrl_type& x)
      {
        this->SimMaterial_SlatAngleCntrl_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngleCntrl (const SimMaterial_SlatAngleCntrl_optional& x)
      {
        this->SimMaterial_SlatAngleCntrl_ = x;
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_SlatAngleCntrl (::std::auto_ptr< SimMaterial_SlatAngleCntrl_type > x)
      {
        this->SimMaterial_SlatAngleCntrl_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Blind
      //

      SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_EquivGlazingMaterial_Blind ()
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatOrientation_ (this),
        SimMaterial_SlatSeparation_ (this),
        SimMaterial_SlatCrown_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_SlatDiffuse_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_ (this),
        SimMaterial_SlatDiffuse_DiffuseVisibleTrans_ (this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_ (this),
        SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_ (this),
        SimMaterial_SlatInfraredTrans_ (this),
        SimMaterial_FrontSideSlatInfraredEmissivity_ (this),
        SimMaterial_BackSideSlatInfraredEmissivity_ (this),
        SimMaterial_SlatAngleCntrl_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_EquivGlazingMaterial_Blind (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (RefId),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatOrientation_ (this),
        SimMaterial_SlatSeparation_ (this),
        SimMaterial_SlatCrown_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_SlatDiffuse_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_ (this),
        SimMaterial_SlatDiffuse_DiffuseVisibleTrans_ (this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_ (this),
        SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_ (this),
        SimMaterial_SlatInfraredTrans_ (this),
        SimMaterial_FrontSideSlatInfraredEmissivity_ (this),
        SimMaterial_BackSideSlatInfraredEmissivity_ (this),
        SimMaterial_SlatAngleCntrl_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_EquivGlazingMaterial_Blind (const SimMaterial_EquivGlazingMaterial_Blind& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (x, f, c),
        SimMaterial_SlatWidth_ (x.SimMaterial_SlatWidth_, f, this),
        SimMaterial_SlatAngle_ (x.SimMaterial_SlatAngle_, f, this),
        SimMaterial_SlatOrientation_ (x.SimMaterial_SlatOrientation_, f, this),
        SimMaterial_SlatSeparation_ (x.SimMaterial_SlatSeparation_, f, this),
        SimMaterial_SlatCrown_ (x.SimMaterial_SlatCrown_, f, this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_ (x.SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_ (x.SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_ (x.SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_ (x.SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_ (x.SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_, f, this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_ (x.SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_, f, this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_ (x.SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_, f, this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_ (x.SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_, f, this),
        SimMaterial_SlatDiffuse_DiffuseSolarTrans_ (x.SimMaterial_SlatDiffuse_DiffuseSolarTrans_, f, this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_ (x.SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_, f, this),
        SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_ (x.SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_, f, this),
        SimMaterial_SlatDiffuse_DiffuseVisibleTrans_ (x.SimMaterial_SlatDiffuse_DiffuseVisibleTrans_, f, this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_ (x.SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_, f, this),
        SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_ (x.SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_, f, this),
        SimMaterial_SlatInfraredTrans_ (x.SimMaterial_SlatInfraredTrans_, f, this),
        SimMaterial_FrontSideSlatInfraredEmissivity_ (x.SimMaterial_FrontSideSlatInfraredEmissivity_, f, this),
        SimMaterial_BackSideSlatInfraredEmissivity_ (x.SimMaterial_BackSideSlatInfraredEmissivity_, f, this),
        SimMaterial_SlatAngleCntrl_ (x.SimMaterial_SlatAngleCntrl_, f, this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Blind::
      SimMaterial_EquivGlazingMaterial_Blind (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatOrientation_ (this),
        SimMaterial_SlatSeparation_ (this),
        SimMaterial_SlatCrown_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_SlatDiffuse_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_ (this),
        SimMaterial_SlatDiffuse_DiffuseVisibleTrans_ (this),
        SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_ (this),
        SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_ (this),
        SimMaterial_SlatInfraredTrans_ (this),
        SimMaterial_FrontSideSlatInfraredEmissivity_ (this),
        SimMaterial_BackSideSlatInfraredEmissivity_ (this),
        SimMaterial_SlatAngleCntrl_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_EquivGlazingMaterial_Blind::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_SlatWidth
          //
          if (n.name () == "SimMaterial_SlatWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatWidth_)
            {
              this->SimMaterial_SlatWidth_.set (SimMaterial_SlatWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatAngle
          //
          if (n.name () == "SimMaterial_SlatAngle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatAngle_)
            {
              this->SimMaterial_SlatAngle_.set (SimMaterial_SlatAngle_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatOrientation
          //
          if (n.name () == "SimMaterial_SlatOrientation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_SlatOrientation_type > r (
              SimMaterial_SlatOrientation_traits::create (i, f, this));

            if (!this->SimMaterial_SlatOrientation_)
            {
              this->SimMaterial_SlatOrientation_.set (r);
              continue;
            }
          }

          // SimMaterial_SlatSeparation
          //
          if (n.name () == "SimMaterial_SlatSeparation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatSeparation_)
            {
              this->SimMaterial_SlatSeparation_.set (SimMaterial_SlatSeparation_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatCrown
          //
          if (n.name () == "SimMaterial_SlatCrown" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatCrown_)
            {
              this->SimMaterial_SlatCrown_.set (SimMaterial_SlatCrown_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_.set (SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_BackSideSlatBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_.set (SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_.set (SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_.set (SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans
          //
          if (n.name () == "SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_)
            {
              this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_.set (SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans
          //
          if (n.name () == "SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_)
            {
              this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_.set (SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_)
            {
              this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_.set (SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_)
            {
              this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_.set (SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatDiffuse_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_SlatDiffuse_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_)
            {
              this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_.set (SimMaterial_SlatDiffuse_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_)
            {
              this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_.set (SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_)
            {
              this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_.set (SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatDiffuse_DiffuseVisibleTrans
          //
          if (n.name () == "SimMaterial_SlatDiffuse_DiffuseVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_)
            {
              this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_.set (SimMaterial_SlatDiffuse_DiffuseVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_)
            {
              this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_.set (SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_)
            {
              this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_.set (SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatInfraredTrans
          //
          if (n.name () == "SimMaterial_SlatInfraredTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatInfraredTrans_)
            {
              this->SimMaterial_SlatInfraredTrans_.set (SimMaterial_SlatInfraredTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatInfraredEmissivity
          //
          if (n.name () == "SimMaterial_FrontSideSlatInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatInfraredEmissivity_)
            {
              this->SimMaterial_FrontSideSlatInfraredEmissivity_.set (SimMaterial_FrontSideSlatInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatInfraredEmissivity
          //
          if (n.name () == "SimMaterial_BackSideSlatInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatInfraredEmissivity_)
            {
              this->SimMaterial_BackSideSlatInfraredEmissivity_.set (SimMaterial_BackSideSlatInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatAngleCntrl
          //
          if (n.name () == "SimMaterial_SlatAngleCntrl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_SlatAngleCntrl_type > r (
              SimMaterial_SlatAngleCntrl_traits::create (i, f, this));

            if (!this->SimMaterial_SlatAngleCntrl_)
            {
              this->SimMaterial_SlatAngleCntrl_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_EquivGlazingMaterial_Blind* SimMaterial_EquivGlazingMaterial_Blind::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_EquivGlazingMaterial_Blind (*this, f, c);
      }

      SimMaterial_EquivGlazingMaterial_Blind& SimMaterial_EquivGlazingMaterial_Blind::
      operator= (const SimMaterial_EquivGlazingMaterial_Blind& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial& > (*this) = x;
          this->SimMaterial_SlatWidth_ = x.SimMaterial_SlatWidth_;
          this->SimMaterial_SlatAngle_ = x.SimMaterial_SlatAngle_;
          this->SimMaterial_SlatOrientation_ = x.SimMaterial_SlatOrientation_;
          this->SimMaterial_SlatSeparation_ = x.SimMaterial_SlatSeparation_;
          this->SimMaterial_SlatCrown_ = x.SimMaterial_SlatCrown_;
          this->SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_ = x.SimMaterial_FrontSideSlatBeam_DiffuseSolarTrans_;
          this->SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_ = x.SimMaterial_BackSideSlatBeam_DiffuseSolarTrans_;
          this->SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_ = x.SimMaterial_FrontSideSlatBeam_DiffuseSolarReflect_;
          this->SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_ = x.SimMaterial_BackSideSlatBeam_DiffuseSolarReflect_;
          this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_ = x.SimMaterial_FrontSideSlatBeam_DiffuseVisibleTrans_;
          this->SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_ = x.SimMaterial_BackSideSlatBeam_DiffuseVisibleTrans_;
          this->SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_ = x.SimMaterial_FrontSideSlatBeam_DiffuseVisibleReflect_;
          this->SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_ = x.SimMaterial_BackSideSlatBeam_DiffuseVisibleReflect_;
          this->SimMaterial_SlatDiffuse_DiffuseSolarTrans_ = x.SimMaterial_SlatDiffuse_DiffuseSolarTrans_;
          this->SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_ = x.SimMaterial_FrontSideSlatDiffuse_DiffuseSolarReflect_;
          this->SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_ = x.SimMaterial_BackSideSlatDiffuse_DiffuseSolarReflect_;
          this->SimMaterial_SlatDiffuse_DiffuseVisibleTrans_ = x.SimMaterial_SlatDiffuse_DiffuseVisibleTrans_;
          this->SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_ = x.SimMaterial_FrontSideSlatDiffuse_DiffuseVisibleReflect_;
          this->SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_ = x.SimMaterial_BackSideSlatDiffuse_DiffuseVisibleReflect_;
          this->SimMaterial_SlatInfraredTrans_ = x.SimMaterial_SlatInfraredTrans_;
          this->SimMaterial_FrontSideSlatInfraredEmissivity_ = x.SimMaterial_FrontSideSlatInfraredEmissivity_;
          this->SimMaterial_BackSideSlatInfraredEmissivity_ = x.SimMaterial_BackSideSlatInfraredEmissivity_;
          this->SimMaterial_SlatAngleCntrl_ = x.SimMaterial_SlatAngleCntrl_;
        }

        return *this;
      }

      SimMaterial_EquivGlazingMaterial_Blind::
      ~SimMaterial_EquivGlazingMaterial_Blind ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

