// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWall_Wall_Interior.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWall_Wall_Interior
      // 

      const SimWall_Wall_Interior::ContainedBldgElementArrays_optional& SimWall_Wall_Interior::
      ContainedBldgElementArrays () const
      {
        return this->ContainedBldgElementArrays_;
      }

      SimWall_Wall_Interior::ContainedBldgElementArrays_optional& SimWall_Wall_Interior::
      ContainedBldgElementArrays ()
      {
        return this->ContainedBldgElementArrays_;
      }

      void SimWall_Wall_Interior::
      ContainedBldgElementArrays (const ContainedBldgElementArrays_type& x)
      {
        this->ContainedBldgElementArrays_.set (x);
      }

      void SimWall_Wall_Interior::
      ContainedBldgElementArrays (const ContainedBldgElementArrays_optional& x)
      {
        this->ContainedBldgElementArrays_ = x;
      }

      void SimWall_Wall_Interior::
      ContainedBldgElementArrays (::std::auto_ptr< ContainedBldgElementArrays_type > x)
      {
        this->ContainedBldgElementArrays_.set (x);
      }

      const SimWall_Wall_Interior::Name_optional& SimWall_Wall_Interior::
      Name () const
      {
        return this->Name_;
      }

      SimWall_Wall_Interior::Name_optional& SimWall_Wall_Interior::
      Name ()
      {
        return this->Name_;
      }

      void SimWall_Wall_Interior::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimWall_Wall_Interior::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimWall_Wall_Interior::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimWall_Wall_Interior::Representation_optional& SimWall_Wall_Interior::
      Representation () const
      {
        return this->Representation_;
      }

      SimWall_Wall_Interior::Representation_optional& SimWall_Wall_Interior::
      Representation ()
      {
        return this->Representation_;
      }

      void SimWall_Wall_Interior::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimWall_Wall_Interior::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimWall_Wall_Interior::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimWall_Wall_Interior::ConstructionType_optional& SimWall_Wall_Interior::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimWall_Wall_Interior::ConstructionType_optional& SimWall_Wall_Interior::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimWall_Wall_Interior::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimWall_Wall_Interior::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimWall_Wall_Interior::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimWall_Wall_Interior::WallIsExternal_optional& SimWall_Wall_Interior::
      WallIsExternal () const
      {
        return this->WallIsExternal_;
      }

      SimWall_Wall_Interior::WallIsExternal_optional& SimWall_Wall_Interior::
      WallIsExternal ()
      {
        return this->WallIsExternal_;
      }

      void SimWall_Wall_Interior::
      WallIsExternal (const WallIsExternal_type& x)
      {
        this->WallIsExternal_.set (x);
      }

      void SimWall_Wall_Interior::
      WallIsExternal (const WallIsExternal_optional& x)
      {
        this->WallIsExternal_ = x;
      }

      const SimWall_Wall_Interior::CompositeThermalTrans_optional& SimWall_Wall_Interior::
      CompositeThermalTrans () const
      {
        return this->CompositeThermalTrans_;
      }

      SimWall_Wall_Interior::CompositeThermalTrans_optional& SimWall_Wall_Interior::
      CompositeThermalTrans ()
      {
        return this->CompositeThermalTrans_;
      }

      void SimWall_Wall_Interior::
      CompositeThermalTrans (const CompositeThermalTrans_type& x)
      {
        this->CompositeThermalTrans_.set (x);
      }

      void SimWall_Wall_Interior::
      CompositeThermalTrans (const CompositeThermalTrans_optional& x)
      {
        this->CompositeThermalTrans_ = x;
      }

      const SimWall_Wall_Interior::PhotoVotaicArrayOnElement_optional& SimWall_Wall_Interior::
      PhotoVotaicArrayOnElement () const
      {
        return this->PhotoVotaicArrayOnElement_;
      }

      SimWall_Wall_Interior::PhotoVotaicArrayOnElement_optional& SimWall_Wall_Interior::
      PhotoVotaicArrayOnElement ()
      {
        return this->PhotoVotaicArrayOnElement_;
      }

      void SimWall_Wall_Interior::
      PhotoVotaicArrayOnElement (const PhotoVotaicArrayOnElement_type& x)
      {
        this->PhotoVotaicArrayOnElement_.set (x);
      }

      void SimWall_Wall_Interior::
      PhotoVotaicArrayOnElement (const PhotoVotaicArrayOnElement_optional& x)
      {
        this->PhotoVotaicArrayOnElement_ = x;
      }

      void SimWall_Wall_Interior::
      PhotoVotaicArrayOnElement (::std::auto_ptr< PhotoVotaicArrayOnElement_type > x)
      {
        this->PhotoVotaicArrayOnElement_.set (x);
      }

      const SimWall_Wall_Interior::WallHeight_optional& SimWall_Wall_Interior::
      WallHeight () const
      {
        return this->WallHeight_;
      }

      SimWall_Wall_Interior::WallHeight_optional& SimWall_Wall_Interior::
      WallHeight ()
      {
        return this->WallHeight_;
      }

      void SimWall_Wall_Interior::
      WallHeight (const WallHeight_type& x)
      {
        this->WallHeight_.set (x);
      }

      void SimWall_Wall_Interior::
      WallHeight (const WallHeight_optional& x)
      {
        this->WallHeight_ = x;
      }

      const SimWall_Wall_Interior::WallLength_optional& SimWall_Wall_Interior::
      WallLength () const
      {
        return this->WallLength_;
      }

      SimWall_Wall_Interior::WallLength_optional& SimWall_Wall_Interior::
      WallLength ()
      {
        return this->WallLength_;
      }

      void SimWall_Wall_Interior::
      WallLength (const WallLength_type& x)
      {
        this->WallLength_.set (x);
      }

      void SimWall_Wall_Interior::
      WallLength (const WallLength_optional& x)
      {
        this->WallLength_ = x;
      }

      const SimWall_Wall_Interior::WallThickness_optional& SimWall_Wall_Interior::
      WallThickness () const
      {
        return this->WallThickness_;
      }

      SimWall_Wall_Interior::WallThickness_optional& SimWall_Wall_Interior::
      WallThickness ()
      {
        return this->WallThickness_;
      }

      void SimWall_Wall_Interior::
      WallThickness (const WallThickness_type& x)
      {
        this->WallThickness_.set (x);
      }

      void SimWall_Wall_Interior::
      WallThickness (const WallThickness_optional& x)
      {
        this->WallThickness_ = x;
      }

      const SimWall_Wall_Interior::WallGrossSideArea_optional& SimWall_Wall_Interior::
      WallGrossSideArea () const
      {
        return this->WallGrossSideArea_;
      }

      SimWall_Wall_Interior::WallGrossSideArea_optional& SimWall_Wall_Interior::
      WallGrossSideArea ()
      {
        return this->WallGrossSideArea_;
      }

      void SimWall_Wall_Interior::
      WallGrossSideArea (const WallGrossSideArea_type& x)
      {
        this->WallGrossSideArea_.set (x);
      }

      void SimWall_Wall_Interior::
      WallGrossSideArea (const WallGrossSideArea_optional& x)
      {
        this->WallGrossSideArea_ = x;
      }

      const SimWall_Wall_Interior::WallNetSideArea_optional& SimWall_Wall_Interior::
      WallNetSideArea () const
      {
        return this->WallNetSideArea_;
      }

      SimWall_Wall_Interior::WallNetSideArea_optional& SimWall_Wall_Interior::
      WallNetSideArea ()
      {
        return this->WallNetSideArea_;
      }

      void SimWall_Wall_Interior::
      WallNetSideArea (const WallNetSideArea_type& x)
      {
        this->WallNetSideArea_.set (x);
      }

      void SimWall_Wall_Interior::
      WallNetSideArea (const WallNetSideArea_optional& x)
      {
        this->WallNetSideArea_ = x;
      }

      const SimWall_Wall_Interior::WallGrossVolume_optional& SimWall_Wall_Interior::
      WallGrossVolume () const
      {
        return this->WallGrossVolume_;
      }

      SimWall_Wall_Interior::WallGrossVolume_optional& SimWall_Wall_Interior::
      WallGrossVolume ()
      {
        return this->WallGrossVolume_;
      }

      void SimWall_Wall_Interior::
      WallGrossVolume (const WallGrossVolume_type& x)
      {
        this->WallGrossVolume_.set (x);
      }

      void SimWall_Wall_Interior::
      WallGrossVolume (const WallGrossVolume_optional& x)
      {
        this->WallGrossVolume_ = x;
      }

      const SimWall_Wall_Interior::WallNetVolume_optional& SimWall_Wall_Interior::
      WallNetVolume () const
      {
        return this->WallNetVolume_;
      }

      SimWall_Wall_Interior::WallNetVolume_optional& SimWall_Wall_Interior::
      WallNetVolume ()
      {
        return this->WallNetVolume_;
      }

      void SimWall_Wall_Interior::
      WallNetVolume (const WallNetVolume_type& x)
      {
        this->WallNetVolume_.set (x);
      }

      void SimWall_Wall_Interior::
      WallNetVolume (const WallNetVolume_optional& x)
      {
        this->WallNetVolume_ = x;
      }

      const SimWall_Wall_Interior::ClassRef_UniFormat_optional& SimWall_Wall_Interior::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimWall_Wall_Interior::ClassRef_UniFormat_optional& SimWall_Wall_Interior::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimWall_Wall_Interior::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimWall_Wall_Interior::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimWall_Wall_Interior::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimWall_Wall_Interior::MaterialLayerSet_optional& SimWall_Wall_Interior::
      MaterialLayerSet () const
      {
        return this->MaterialLayerSet_;
      }

      SimWall_Wall_Interior::MaterialLayerSet_optional& SimWall_Wall_Interior::
      MaterialLayerSet ()
      {
        return this->MaterialLayerSet_;
      }

      void SimWall_Wall_Interior::
      MaterialLayerSet (const MaterialLayerSet_type& x)
      {
        this->MaterialLayerSet_.set (x);
      }

      void SimWall_Wall_Interior::
      MaterialLayerSet (const MaterialLayerSet_optional& x)
      {
        this->MaterialLayerSet_ = x;
      }

      void SimWall_Wall_Interior::
      MaterialLayerSet (::std::auto_ptr< MaterialLayerSet_type > x)
      {
        this->MaterialLayerSet_.set (x);
      }

      const SimWall_Wall_Interior::ConnectedSlabs_optional& SimWall_Wall_Interior::
      ConnectedSlabs () const
      {
        return this->ConnectedSlabs_;
      }

      SimWall_Wall_Interior::ConnectedSlabs_optional& SimWall_Wall_Interior::
      ConnectedSlabs ()
      {
        return this->ConnectedSlabs_;
      }

      void SimWall_Wall_Interior::
      ConnectedSlabs (const ConnectedSlabs_type& x)
      {
        this->ConnectedSlabs_.set (x);
      }

      void SimWall_Wall_Interior::
      ConnectedSlabs (const ConnectedSlabs_optional& x)
      {
        this->ConnectedSlabs_ = x;
      }

      void SimWall_Wall_Interior::
      ConnectedSlabs (::std::auto_ptr< ConnectedSlabs_type > x)
      {
        this->ConnectedSlabs_.set (x);
      }

      const SimWall_Wall_Interior::ConnectedWalls_optional& SimWall_Wall_Interior::
      ConnectedWalls () const
      {
        return this->ConnectedWalls_;
      }

      SimWall_Wall_Interior::ConnectedWalls_optional& SimWall_Wall_Interior::
      ConnectedWalls ()
      {
        return this->ConnectedWalls_;
      }

      void SimWall_Wall_Interior::
      ConnectedWalls (const ConnectedWalls_type& x)
      {
        this->ConnectedWalls_.set (x);
      }

      void SimWall_Wall_Interior::
      ConnectedWalls (const ConnectedWalls_optional& x)
      {
        this->ConnectedWalls_ = x;
      }

      void SimWall_Wall_Interior::
      ConnectedWalls (::std::auto_ptr< ConnectedWalls_type > x)
      {
        this->ConnectedWalls_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_Name_optional& SimWall_Wall_Interior::
      SimWall_Name () const
      {
        return this->SimWall_Name_;
      }

      SimWall_Wall_Interior::SimWall_Name_optional& SimWall_Wall_Interior::
      SimWall_Name ()
      {
        return this->SimWall_Name_;
      }

      void SimWall_Wall_Interior::
      SimWall_Name (const SimWall_Name_type& x)
      {
        this->SimWall_Name_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_Name (const SimWall_Name_optional& x)
      {
        this->SimWall_Name_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_Name (::std::auto_ptr< SimWall_Name_type > x)
      {
        this->SimWall_Name_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_SurfType_optional& SimWall_Wall_Interior::
      SimWall_SurfType () const
      {
        return this->SimWall_SurfType_;
      }

      SimWall_Wall_Interior::SimWall_SurfType_optional& SimWall_Wall_Interior::
      SimWall_SurfType ()
      {
        return this->SimWall_SurfType_;
      }

      void SimWall_Wall_Interior::
      SimWall_SurfType (const SimWall_SurfType_type& x)
      {
        this->SimWall_SurfType_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_SurfType (const SimWall_SurfType_optional& x)
      {
        this->SimWall_SurfType_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_SurfType (::std::auto_ptr< SimWall_SurfType_type > x)
      {
        this->SimWall_SurfType_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_ConstructionName_optional& SimWall_Wall_Interior::
      SimWall_ConstructionName () const
      {
        return this->SimWall_ConstructionName_;
      }

      SimWall_Wall_Interior::SimWall_ConstructionName_optional& SimWall_Wall_Interior::
      SimWall_ConstructionName ()
      {
        return this->SimWall_ConstructionName_;
      }

      void SimWall_Wall_Interior::
      SimWall_ConstructionName (const SimWall_ConstructionName_type& x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_ConstructionName (const SimWall_ConstructionName_optional& x)
      {
        this->SimWall_ConstructionName_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_ConstructionName (::std::auto_ptr< SimWall_ConstructionName_type > x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_ZoneName_optional& SimWall_Wall_Interior::
      SimWall_ZoneName () const
      {
        return this->SimWall_ZoneName_;
      }

      SimWall_Wall_Interior::SimWall_ZoneName_optional& SimWall_Wall_Interior::
      SimWall_ZoneName ()
      {
        return this->SimWall_ZoneName_;
      }

      void SimWall_Wall_Interior::
      SimWall_ZoneName (const SimWall_ZoneName_type& x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_ZoneName (const SimWall_ZoneName_optional& x)
      {
        this->SimWall_ZoneName_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_ZoneName (::std::auto_ptr< SimWall_ZoneName_type > x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_OutsdBndCond_optional& SimWall_Wall_Interior::
      SimWall_OutsdBndCond () const
      {
        return this->SimWall_OutsdBndCond_;
      }

      SimWall_Wall_Interior::SimWall_OutsdBndCond_optional& SimWall_Wall_Interior::
      SimWall_OutsdBndCond ()
      {
        return this->SimWall_OutsdBndCond_;
      }

      void SimWall_Wall_Interior::
      SimWall_OutsdBndCond (const SimWall_OutsdBndCond_type& x)
      {
        this->SimWall_OutsdBndCond_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_OutsdBndCond (const SimWall_OutsdBndCond_optional& x)
      {
        this->SimWall_OutsdBndCond_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_OutsdBndCond (::std::auto_ptr< SimWall_OutsdBndCond_type > x)
      {
        this->SimWall_OutsdBndCond_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_OutsdBndCondObject_optional& SimWall_Wall_Interior::
      SimWall_OutsdBndCondObject () const
      {
        return this->SimWall_OutsdBndCondObject_;
      }

      SimWall_Wall_Interior::SimWall_OutsdBndCondObject_optional& SimWall_Wall_Interior::
      SimWall_OutsdBndCondObject ()
      {
        return this->SimWall_OutsdBndCondObject_;
      }

      void SimWall_Wall_Interior::
      SimWall_OutsdBndCondObject (const SimWall_OutsdBndCondObject_type& x)
      {
        this->SimWall_OutsdBndCondObject_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_OutsdBndCondObject (const SimWall_OutsdBndCondObject_optional& x)
      {
        this->SimWall_OutsdBndCondObject_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_OutsdBndCondObject (::std::auto_ptr< SimWall_OutsdBndCondObject_type > x)
      {
        this->SimWall_OutsdBndCondObject_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_SunExposure_optional& SimWall_Wall_Interior::
      SimWall_SunExposure () const
      {
        return this->SimWall_SunExposure_;
      }

      SimWall_Wall_Interior::SimWall_SunExposure_optional& SimWall_Wall_Interior::
      SimWall_SunExposure ()
      {
        return this->SimWall_SunExposure_;
      }

      void SimWall_Wall_Interior::
      SimWall_SunExposure (const SimWall_SunExposure_type& x)
      {
        this->SimWall_SunExposure_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_SunExposure (const SimWall_SunExposure_optional& x)
      {
        this->SimWall_SunExposure_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_SunExposure (::std::auto_ptr< SimWall_SunExposure_type > x)
      {
        this->SimWall_SunExposure_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_WindExposure_optional& SimWall_Wall_Interior::
      SimWall_WindExposure () const
      {
        return this->SimWall_WindExposure_;
      }

      SimWall_Wall_Interior::SimWall_WindExposure_optional& SimWall_Wall_Interior::
      SimWall_WindExposure ()
      {
        return this->SimWall_WindExposure_;
      }

      void SimWall_Wall_Interior::
      SimWall_WindExposure (const SimWall_WindExposure_type& x)
      {
        this->SimWall_WindExposure_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_WindExposure (const SimWall_WindExposure_optional& x)
      {
        this->SimWall_WindExposure_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_WindExposure (::std::auto_ptr< SimWall_WindExposure_type > x)
      {
        this->SimWall_WindExposure_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_ViewFactToGnd_optional& SimWall_Wall_Interior::
      SimWall_ViewFactToGnd () const
      {
        return this->SimWall_ViewFactToGnd_;
      }

      SimWall_Wall_Interior::SimWall_ViewFactToGnd_optional& SimWall_Wall_Interior::
      SimWall_ViewFactToGnd ()
      {
        return this->SimWall_ViewFactToGnd_;
      }

      void SimWall_Wall_Interior::
      SimWall_ViewFactToGnd (const SimWall_ViewFactToGnd_type& x)
      {
        this->SimWall_ViewFactToGnd_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_ViewFactToGnd (const SimWall_ViewFactToGnd_optional& x)
      {
        this->SimWall_ViewFactToGnd_ = x;
      }

      const SimWall_Wall_Interior::SimWall_NumbVerts_optional& SimWall_Wall_Interior::
      SimWall_NumbVerts () const
      {
        return this->SimWall_NumbVerts_;
      }

      SimWall_Wall_Interior::SimWall_NumbVerts_optional& SimWall_Wall_Interior::
      SimWall_NumbVerts ()
      {
        return this->SimWall_NumbVerts_;
      }

      void SimWall_Wall_Interior::
      SimWall_NumbVerts (const SimWall_NumbVerts_type& x)
      {
        this->SimWall_NumbVerts_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_NumbVerts (const SimWall_NumbVerts_optional& x)
      {
        this->SimWall_NumbVerts_ = x;
      }

      const SimWall_Wall_Interior::SimWall_Vertex_1_120_X_Coord_optional& SimWall_Wall_Interior::
      SimWall_Vertex_1_120_X_Coord () const
      {
        return this->SimWall_Vertex_1_120_X_Coord_;
      }

      SimWall_Wall_Interior::SimWall_Vertex_1_120_X_Coord_optional& SimWall_Wall_Interior::
      SimWall_Vertex_1_120_X_Coord ()
      {
        return this->SimWall_Vertex_1_120_X_Coord_;
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_X_Coord (const SimWall_Vertex_1_120_X_Coord_type& x)
      {
        this->SimWall_Vertex_1_120_X_Coord_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_X_Coord (const SimWall_Vertex_1_120_X_Coord_optional& x)
      {
        this->SimWall_Vertex_1_120_X_Coord_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_X_Coord (::std::auto_ptr< SimWall_Vertex_1_120_X_Coord_type > x)
      {
        this->SimWall_Vertex_1_120_X_Coord_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_Vertex_1_120_Y_Coord_optional& SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Y_Coord () const
      {
        return this->SimWall_Vertex_1_120_Y_Coord_;
      }

      SimWall_Wall_Interior::SimWall_Vertex_1_120_Y_Coord_optional& SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Y_Coord ()
      {
        return this->SimWall_Vertex_1_120_Y_Coord_;
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Y_Coord (const SimWall_Vertex_1_120_Y_Coord_type& x)
      {
        this->SimWall_Vertex_1_120_Y_Coord_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Y_Coord (const SimWall_Vertex_1_120_Y_Coord_optional& x)
      {
        this->SimWall_Vertex_1_120_Y_Coord_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Y_Coord (::std::auto_ptr< SimWall_Vertex_1_120_Y_Coord_type > x)
      {
        this->SimWall_Vertex_1_120_Y_Coord_.set (x);
      }

      const SimWall_Wall_Interior::SimWall_Vertex_1_120_Z_Coord_optional& SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Z_Coord () const
      {
        return this->SimWall_Vertex_1_120_Z_Coord_;
      }

      SimWall_Wall_Interior::SimWall_Vertex_1_120_Z_Coord_optional& SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Z_Coord ()
      {
        return this->SimWall_Vertex_1_120_Z_Coord_;
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Z_Coord (const SimWall_Vertex_1_120_Z_Coord_type& x)
      {
        this->SimWall_Vertex_1_120_Z_Coord_.set (x);
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Z_Coord (const SimWall_Vertex_1_120_Z_Coord_optional& x)
      {
        this->SimWall_Vertex_1_120_Z_Coord_ = x;
      }

      void SimWall_Wall_Interior::
      SimWall_Vertex_1_120_Z_Coord (::std::auto_ptr< SimWall_Vertex_1_120_Z_Coord_type > x)
      {
        this->SimWall_Vertex_1_120_Z_Coord_.set (x);
      }

      const SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_Name_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_Name () const
      {
        return this->SurfaceProperty_SolarIncidentInside_Name_;
      }

      SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_Name_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_Name ()
      {
        return this->SurfaceProperty_SolarIncidentInside_Name_;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_Name (const SurfaceProperty_SolarIncidentInside_Name_type& x)
      {
        this->SurfaceProperty_SolarIncidentInside_Name_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_Name (const SurfaceProperty_SolarIncidentInside_Name_optional& x)
      {
        this->SurfaceProperty_SolarIncidentInside_Name_ = x;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_Name (::std::auto_ptr< SurfaceProperty_SolarIncidentInside_Name_type > x)
      {
        this->SurfaceProperty_SolarIncidentInside_Name_.set (x);
      }

      const SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_SurfName_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_SurfName () const
      {
        return this->SurfaceProperty_SolarIncidentInside_SurfName_;
      }

      SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_SurfName_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_SurfName ()
      {
        return this->SurfaceProperty_SolarIncidentInside_SurfName_;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_SurfName (const SurfaceProperty_SolarIncidentInside_SurfName_type& x)
      {
        this->SurfaceProperty_SolarIncidentInside_SurfName_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_SurfName (const SurfaceProperty_SolarIncidentInside_SurfName_optional& x)
      {
        this->SurfaceProperty_SolarIncidentInside_SurfName_ = x;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_SurfName (::std::auto_ptr< SurfaceProperty_SolarIncidentInside_SurfName_type > x)
      {
        this->SurfaceProperty_SolarIncidentInside_SurfName_.set (x);
      }

      const SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_ConstructionName_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_ConstructionName () const
      {
        return this->SurfaceProperty_SolarIncidentInside_ConstructionName_;
      }

      SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_ConstructionName_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_ConstructionName ()
      {
        return this->SurfaceProperty_SolarIncidentInside_ConstructionName_;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_ConstructionName (const SurfaceProperty_SolarIncidentInside_ConstructionName_type& x)
      {
        this->SurfaceProperty_SolarIncidentInside_ConstructionName_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_ConstructionName (const SurfaceProperty_SolarIncidentInside_ConstructionName_optional& x)
      {
        this->SurfaceProperty_SolarIncidentInside_ConstructionName_ = x;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_ConstructionName (::std::auto_ptr< SurfaceProperty_SolarIncidentInside_ConstructionName_type > x)
      {
        this->SurfaceProperty_SolarIncidentInside_ConstructionName_.set (x);
      }

      const SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName () const
      {
        return this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_;
      }

      SimWall_Wall_Interior::SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_optional& SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName ()
      {
        return this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName (const SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_type& x)
      {
        this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName (const SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_optional& x)
      {
        this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_ = x;
      }

      void SimWall_Wall_Interior::
      SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName (::std::auto_ptr< SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_type > x)
      {
        this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_.set (x);
      }

      const SimWall_Wall_Interior::SurfProp_HeatTransAlg_MultSurf_Name_optional& SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Name () const
      {
        return this->SurfProp_HeatTransAlg_MultSurf_Name_;
      }

      SimWall_Wall_Interior::SurfProp_HeatTransAlg_MultSurf_Name_optional& SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Name ()
      {
        return this->SurfProp_HeatTransAlg_MultSurf_Name_;
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Name (const SurfProp_HeatTransAlg_MultSurf_Name_type& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_Name_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Name (const SurfProp_HeatTransAlg_MultSurf_Name_optional& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_Name_ = x;
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Name (::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_Name_type > x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_Name_.set (x);
      }

      const SimWall_Wall_Interior::SurfProp_HeatTransAlg_MultSurf_SurfType_optional& SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_SurfType () const
      {
        return this->SurfProp_HeatTransAlg_MultSurf_SurfType_;
      }

      SimWall_Wall_Interior::SurfProp_HeatTransAlg_MultSurf_SurfType_optional& SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_SurfType ()
      {
        return this->SurfProp_HeatTransAlg_MultSurf_SurfType_;
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_SurfType (const SurfProp_HeatTransAlg_MultSurf_SurfType_type& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_SurfType (const SurfProp_HeatTransAlg_MultSurf_SurfType_optional& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_ = x;
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_SurfType (::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_SurfType_type > x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (x);
      }

      const SimWall_Wall_Interior::SurfProp_HeatTransAlg_MultSurf_Algorithm_optional& SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Algorithm () const
      {
        return this->SurfProp_HeatTransAlg_MultSurf_Algorithm_;
      }

      SimWall_Wall_Interior::SurfProp_HeatTransAlg_MultSurf_Algorithm_optional& SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Algorithm ()
      {
        return this->SurfProp_HeatTransAlg_MultSurf_Algorithm_;
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Algorithm (const SurfProp_HeatTransAlg_MultSurf_Algorithm_type& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_Algorithm_.set (x);
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Algorithm (const SurfProp_HeatTransAlg_MultSurf_Algorithm_optional& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_Algorithm_ = x;
      }

      void SimWall_Wall_Interior::
      SurfProp_HeatTransAlg_MultSurf_Algorithm (::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_Algorithm_type > x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_Algorithm_.set (x);
      }

      const SimWall_Wall_Interior::T24ConstructStatus3_optional& SimWall_Wall_Interior::
      T24ConstructStatus3 () const
      {
        return this->T24ConstructStatus3_;
      }

      SimWall_Wall_Interior::T24ConstructStatus3_optional& SimWall_Wall_Interior::
      T24ConstructStatus3 ()
      {
        return this->T24ConstructStatus3_;
      }

      void SimWall_Wall_Interior::
      T24ConstructStatus3 (const T24ConstructStatus3_type& x)
      {
        this->T24ConstructStatus3_.set (x);
      }

      void SimWall_Wall_Interior::
      T24ConstructStatus3 (const T24ConstructStatus3_optional& x)
      {
        this->T24ConstructStatus3_ = x;
      }

      void SimWall_Wall_Interior::
      T24ConstructStatus3 (::std::auto_ptr< T24ConstructStatus3_type > x)
      {
        this->T24ConstructStatus3_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWall_Wall_Interior
      //

      SimWall_Wall_Interior::
      SimWall_Wall_Interior ()
      : ::schema::simxml::BuildingModel::SimWall_Wall (),
        ContainedBldgElementArrays_ (this),
        Name_ (this),
        Representation_ (this),
        ConstructionType_ (this),
        WallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        WallHeight_ (this),
        WallLength_ (this),
        WallThickness_ (this),
        WallGrossSideArea_ (this),
        WallNetSideArea_ (this),
        WallGrossVolume_ (this),
        WallNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        SimWall_Name_ (this),
        SimWall_SurfType_ (this),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCond_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_SunExposure_ (this),
        SimWall_WindExposure_ (this),
        SimWall_ViewFactToGnd_ (this),
        SimWall_NumbVerts_ (this),
        SimWall_Vertex_1_120_X_Coord_ (this),
        SimWall_Vertex_1_120_Y_Coord_ (this),
        SimWall_Vertex_1_120_Z_Coord_ (this),
        SurfaceProperty_SolarIncidentInside_Name_ (this),
        SurfaceProperty_SolarIncidentInside_SurfName_ (this),
        SurfaceProperty_SolarIncidentInside_ConstructionName_ (this),
        SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_ (this),
        SurfProp_HeatTransAlg_MultSurf_Name_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this),
        SurfProp_HeatTransAlg_MultSurf_Algorithm_ (this),
        T24ConstructStatus3_ (this)
      {
      }

      SimWall_Wall_Interior::
      SimWall_Wall_Interior (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimWall_Wall (RefId),
        ContainedBldgElementArrays_ (this),
        Name_ (this),
        Representation_ (this),
        ConstructionType_ (this),
        WallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        WallHeight_ (this),
        WallLength_ (this),
        WallThickness_ (this),
        WallGrossSideArea_ (this),
        WallNetSideArea_ (this),
        WallGrossVolume_ (this),
        WallNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        SimWall_Name_ (this),
        SimWall_SurfType_ (this),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCond_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_SunExposure_ (this),
        SimWall_WindExposure_ (this),
        SimWall_ViewFactToGnd_ (this),
        SimWall_NumbVerts_ (this),
        SimWall_Vertex_1_120_X_Coord_ (this),
        SimWall_Vertex_1_120_Y_Coord_ (this),
        SimWall_Vertex_1_120_Z_Coord_ (this),
        SurfaceProperty_SolarIncidentInside_Name_ (this),
        SurfaceProperty_SolarIncidentInside_SurfName_ (this),
        SurfaceProperty_SolarIncidentInside_ConstructionName_ (this),
        SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_ (this),
        SurfProp_HeatTransAlg_MultSurf_Name_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this),
        SurfProp_HeatTransAlg_MultSurf_Algorithm_ (this),
        T24ConstructStatus3_ (this)
      {
      }

      SimWall_Wall_Interior::
      SimWall_Wall_Interior (const SimWall_Wall_Interior& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWall_Wall (x, f, c),
        ContainedBldgElementArrays_ (x.ContainedBldgElementArrays_, f, this),
        Name_ (x.Name_, f, this),
        Representation_ (x.Representation_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        WallIsExternal_ (x.WallIsExternal_, f, this),
        CompositeThermalTrans_ (x.CompositeThermalTrans_, f, this),
        PhotoVotaicArrayOnElement_ (x.PhotoVotaicArrayOnElement_, f, this),
        WallHeight_ (x.WallHeight_, f, this),
        WallLength_ (x.WallLength_, f, this),
        WallThickness_ (x.WallThickness_, f, this),
        WallGrossSideArea_ (x.WallGrossSideArea_, f, this),
        WallNetSideArea_ (x.WallNetSideArea_, f, this),
        WallGrossVolume_ (x.WallGrossVolume_, f, this),
        WallNetVolume_ (x.WallNetVolume_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialLayerSet_ (x.MaterialLayerSet_, f, this),
        ConnectedSlabs_ (x.ConnectedSlabs_, f, this),
        ConnectedWalls_ (x.ConnectedWalls_, f, this),
        SimWall_Name_ (x.SimWall_Name_, f, this),
        SimWall_SurfType_ (x.SimWall_SurfType_, f, this),
        SimWall_ConstructionName_ (x.SimWall_ConstructionName_, f, this),
        SimWall_ZoneName_ (x.SimWall_ZoneName_, f, this),
        SimWall_OutsdBndCond_ (x.SimWall_OutsdBndCond_, f, this),
        SimWall_OutsdBndCondObject_ (x.SimWall_OutsdBndCondObject_, f, this),
        SimWall_SunExposure_ (x.SimWall_SunExposure_, f, this),
        SimWall_WindExposure_ (x.SimWall_WindExposure_, f, this),
        SimWall_ViewFactToGnd_ (x.SimWall_ViewFactToGnd_, f, this),
        SimWall_NumbVerts_ (x.SimWall_NumbVerts_, f, this),
        SimWall_Vertex_1_120_X_Coord_ (x.SimWall_Vertex_1_120_X_Coord_, f, this),
        SimWall_Vertex_1_120_Y_Coord_ (x.SimWall_Vertex_1_120_Y_Coord_, f, this),
        SimWall_Vertex_1_120_Z_Coord_ (x.SimWall_Vertex_1_120_Z_Coord_, f, this),
        SurfaceProperty_SolarIncidentInside_Name_ (x.SurfaceProperty_SolarIncidentInside_Name_, f, this),
        SurfaceProperty_SolarIncidentInside_SurfName_ (x.SurfaceProperty_SolarIncidentInside_SurfName_, f, this),
        SurfaceProperty_SolarIncidentInside_ConstructionName_ (x.SurfaceProperty_SolarIncidentInside_ConstructionName_, f, this),
        SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_ (x.SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_, f, this),
        SurfProp_HeatTransAlg_MultSurf_Name_ (x.SurfProp_HeatTransAlg_MultSurf_Name_, f, this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (x.SurfProp_HeatTransAlg_MultSurf_SurfType_, f, this),
        SurfProp_HeatTransAlg_MultSurf_Algorithm_ (x.SurfProp_HeatTransAlg_MultSurf_Algorithm_, f, this),
        T24ConstructStatus3_ (x.T24ConstructStatus3_, f, this)
      {
      }

      SimWall_Wall_Interior::
      SimWall_Wall_Interior (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWall_Wall (e, f | ::xml_schema::flags::base, c),
        ContainedBldgElementArrays_ (this),
        Name_ (this),
        Representation_ (this),
        ConstructionType_ (this),
        WallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        WallHeight_ (this),
        WallLength_ (this),
        WallThickness_ (this),
        WallGrossSideArea_ (this),
        WallNetSideArea_ (this),
        WallGrossVolume_ (this),
        WallNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        SimWall_Name_ (this),
        SimWall_SurfType_ (this),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCond_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_SunExposure_ (this),
        SimWall_WindExposure_ (this),
        SimWall_ViewFactToGnd_ (this),
        SimWall_NumbVerts_ (this),
        SimWall_Vertex_1_120_X_Coord_ (this),
        SimWall_Vertex_1_120_Y_Coord_ (this),
        SimWall_Vertex_1_120_Z_Coord_ (this),
        SurfaceProperty_SolarIncidentInside_Name_ (this),
        SurfaceProperty_SolarIncidentInside_SurfName_ (this),
        SurfaceProperty_SolarIncidentInside_ConstructionName_ (this),
        SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_ (this),
        SurfProp_HeatTransAlg_MultSurf_Name_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this),
        SurfProp_HeatTransAlg_MultSurf_Algorithm_ (this),
        T24ConstructStatus3_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWall_Wall_Interior::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimWall_Wall::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ContainedBldgElementArrays
          //
          if (n.name () == "ContainedBldgElementArrays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ContainedBldgElementArrays_type > r (
              ContainedBldgElementArrays_traits::create (i, f, this));

            if (!this->ContainedBldgElementArrays_)
            {
              this->ContainedBldgElementArrays_.set (r);
              continue;
            }
          }

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // WallIsExternal
          //
          if (n.name () == "WallIsExternal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallIsExternal_)
            {
              this->WallIsExternal_.set (WallIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTrans
          //
          if (n.name () == "CompositeThermalTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CompositeThermalTrans_)
            {
              this->CompositeThermalTrans_.set (CompositeThermalTrans_traits::create (i, f, this));
              continue;
            }
          }

          // PhotoVotaicArrayOnElement
          //
          if (n.name () == "PhotoVotaicArrayOnElement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< PhotoVotaicArrayOnElement_type > r (
              PhotoVotaicArrayOnElement_traits::create (i, f, this));

            if (!this->PhotoVotaicArrayOnElement_)
            {
              this->PhotoVotaicArrayOnElement_.set (r);
              continue;
            }
          }

          // WallHeight
          //
          if (n.name () == "WallHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallHeight_)
            {
              this->WallHeight_.set (WallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // WallLength
          //
          if (n.name () == "WallLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallLength_)
            {
              this->WallLength_.set (WallLength_traits::create (i, f, this));
              continue;
            }
          }

          // WallThickness
          //
          if (n.name () == "WallThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallThickness_)
            {
              this->WallThickness_.set (WallThickness_traits::create (i, f, this));
              continue;
            }
          }

          // WallGrossSideArea
          //
          if (n.name () == "WallGrossSideArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallGrossSideArea_)
            {
              this->WallGrossSideArea_.set (WallGrossSideArea_traits::create (i, f, this));
              continue;
            }
          }

          // WallNetSideArea
          //
          if (n.name () == "WallNetSideArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallNetSideArea_)
            {
              this->WallNetSideArea_.set (WallNetSideArea_traits::create (i, f, this));
              continue;
            }
          }

          // WallGrossVolume
          //
          if (n.name () == "WallGrossVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallGrossVolume_)
            {
              this->WallGrossVolume_.set (WallGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // WallNetVolume
          //
          if (n.name () == "WallNetVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WallNetVolume_)
            {
              this->WallNetVolume_.set (WallNetVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialLayerSet
          //
          if (n.name () == "MaterialLayerSet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< MaterialLayerSet_type > r (
              MaterialLayerSet_traits::create (i, f, this));

            if (!this->MaterialLayerSet_)
            {
              this->MaterialLayerSet_.set (r);
              continue;
            }
          }

          // ConnectedSlabs
          //
          if (n.name () == "ConnectedSlabs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedSlabs_type > r (
              ConnectedSlabs_traits::create (i, f, this));

            if (!this->ConnectedSlabs_)
            {
              this->ConnectedSlabs_.set (r);
              continue;
            }
          }

          // ConnectedWalls
          //
          if (n.name () == "ConnectedWalls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedWalls_type > r (
              ConnectedWalls_traits::create (i, f, this));

            if (!this->ConnectedWalls_)
            {
              this->ConnectedWalls_.set (r);
              continue;
            }
          }

          // SimWall_Name
          //
          if (n.name () == "SimWall_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_Name_type > r (
              SimWall_Name_traits::create (i, f, this));

            if (!this->SimWall_Name_)
            {
              this->SimWall_Name_.set (r);
              continue;
            }
          }

          // SimWall_SurfType
          //
          if (n.name () == "SimWall_SurfType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_SurfType_type > r (
              SimWall_SurfType_traits::create (i, f, this));

            if (!this->SimWall_SurfType_)
            {
              this->SimWall_SurfType_.set (r);
              continue;
            }
          }

          // SimWall_ConstructionName
          //
          if (n.name () == "SimWall_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ConstructionName_type > r (
              SimWall_ConstructionName_traits::create (i, f, this));

            if (!this->SimWall_ConstructionName_)
            {
              this->SimWall_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWall_ZoneName
          //
          if (n.name () == "SimWall_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ZoneName_type > r (
              SimWall_ZoneName_traits::create (i, f, this));

            if (!this->SimWall_ZoneName_)
            {
              this->SimWall_ZoneName_.set (r);
              continue;
            }
          }

          // SimWall_OutsdBndCond
          //
          if (n.name () == "SimWall_OutsdBndCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_OutsdBndCond_type > r (
              SimWall_OutsdBndCond_traits::create (i, f, this));

            if (!this->SimWall_OutsdBndCond_)
            {
              this->SimWall_OutsdBndCond_.set (r);
              continue;
            }
          }

          // SimWall_OutsdBndCondObject
          //
          if (n.name () == "SimWall_OutsdBndCondObject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_OutsdBndCondObject_type > r (
              SimWall_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWall_OutsdBndCondObject_)
            {
              this->SimWall_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWall_SunExposure
          //
          if (n.name () == "SimWall_SunExposure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_SunExposure_type > r (
              SimWall_SunExposure_traits::create (i, f, this));

            if (!this->SimWall_SunExposure_)
            {
              this->SimWall_SunExposure_.set (r);
              continue;
            }
          }

          // SimWall_WindExposure
          //
          if (n.name () == "SimWall_WindExposure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_WindExposure_type > r (
              SimWall_WindExposure_traits::create (i, f, this));

            if (!this->SimWall_WindExposure_)
            {
              this->SimWall_WindExposure_.set (r);
              continue;
            }
          }

          // SimWall_ViewFactToGnd
          //
          if (n.name () == "SimWall_ViewFactToGnd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_ViewFactToGnd_)
            {
              this->SimWall_ViewFactToGnd_.set (SimWall_ViewFactToGnd_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_NumbVerts
          //
          if (n.name () == "SimWall_NumbVerts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWall_NumbVerts_)
            {
              this->SimWall_NumbVerts_.set (SimWall_NumbVerts_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_Vertex_1_120_X_Coord
          //
          if (n.name () == "SimWall_Vertex_1_120_X_Coord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_Vertex_1_120_X_Coord_type > r (
              SimWall_Vertex_1_120_X_Coord_traits::create (i, f, this));

            if (!this->SimWall_Vertex_1_120_X_Coord_)
            {
              this->SimWall_Vertex_1_120_X_Coord_.set (r);
              continue;
            }
          }

          // SimWall_Vertex_1_120_Y_Coord
          //
          if (n.name () == "SimWall_Vertex_1_120_Y_Coord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_Vertex_1_120_Y_Coord_type > r (
              SimWall_Vertex_1_120_Y_Coord_traits::create (i, f, this));

            if (!this->SimWall_Vertex_1_120_Y_Coord_)
            {
              this->SimWall_Vertex_1_120_Y_Coord_.set (r);
              continue;
            }
          }

          // SimWall_Vertex_1_120_Z_Coord
          //
          if (n.name () == "SimWall_Vertex_1_120_Z_Coord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWall_Vertex_1_120_Z_Coord_type > r (
              SimWall_Vertex_1_120_Z_Coord_traits::create (i, f, this));

            if (!this->SimWall_Vertex_1_120_Z_Coord_)
            {
              this->SimWall_Vertex_1_120_Z_Coord_.set (r);
              continue;
            }
          }

          // SurfaceProperty_SolarIncidentInside_Name
          //
          if (n.name () == "SurfaceProperty_SolarIncidentInside_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfaceProperty_SolarIncidentInside_Name_type > r (
              SurfaceProperty_SolarIncidentInside_Name_traits::create (i, f, this));

            if (!this->SurfaceProperty_SolarIncidentInside_Name_)
            {
              this->SurfaceProperty_SolarIncidentInside_Name_.set (r);
              continue;
            }
          }

          // SurfaceProperty_SolarIncidentInside_SurfName
          //
          if (n.name () == "SurfaceProperty_SolarIncidentInside_SurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfaceProperty_SolarIncidentInside_SurfName_type > r (
              SurfaceProperty_SolarIncidentInside_SurfName_traits::create (i, f, this));

            if (!this->SurfaceProperty_SolarIncidentInside_SurfName_)
            {
              this->SurfaceProperty_SolarIncidentInside_SurfName_.set (r);
              continue;
            }
          }

          // SurfaceProperty_SolarIncidentInside_ConstructionName
          //
          if (n.name () == "SurfaceProperty_SolarIncidentInside_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfaceProperty_SolarIncidentInside_ConstructionName_type > r (
              SurfaceProperty_SolarIncidentInside_ConstructionName_traits::create (i, f, this));

            if (!this->SurfaceProperty_SolarIncidentInside_ConstructionName_)
            {
              this->SurfaceProperty_SolarIncidentInside_ConstructionName_.set (r);
              continue;
            }
          }

          // SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName
          //
          if (n.name () == "SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_type > r (
              SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_traits::create (i, f, this));

            if (!this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_)
            {
              this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_.set (r);
              continue;
            }
          }

          // SurfProp_HeatTransAlg_MultSurf_Name
          //
          if (n.name () == "SurfProp_HeatTransAlg_MultSurf_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_Name_type > r (
              SurfProp_HeatTransAlg_MultSurf_Name_traits::create (i, f, this));

            if (!this->SurfProp_HeatTransAlg_MultSurf_Name_)
            {
              this->SurfProp_HeatTransAlg_MultSurf_Name_.set (r);
              continue;
            }
          }

          // SurfProp_HeatTransAlg_MultSurf_SurfType
          //
          if (n.name () == "SurfProp_HeatTransAlg_MultSurf_SurfType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_SurfType_type > r (
              SurfProp_HeatTransAlg_MultSurf_SurfType_traits::create (i, f, this));

            if (!this->SurfProp_HeatTransAlg_MultSurf_SurfType_)
            {
              this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (r);
              continue;
            }
          }

          // SurfProp_HeatTransAlg_MultSurf_Algorithm
          //
          if (n.name () == "SurfProp_HeatTransAlg_MultSurf_Algorithm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_Algorithm_type > r (
              SurfProp_HeatTransAlg_MultSurf_Algorithm_traits::create (i, f, this));

            if (!this->SurfProp_HeatTransAlg_MultSurf_Algorithm_)
            {
              this->SurfProp_HeatTransAlg_MultSurf_Algorithm_.set (r);
              continue;
            }
          }

          // T24ConstructStatus3
          //
          if (n.name () == "T24ConstructStatus3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ConstructStatus3_type > r (
              T24ConstructStatus3_traits::create (i, f, this));

            if (!this->T24ConstructStatus3_)
            {
              this->T24ConstructStatus3_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimWall_Wall_Interior* SimWall_Wall_Interior::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWall_Wall_Interior (*this, f, c);
      }

      SimWall_Wall_Interior& SimWall_Wall_Interior::
      operator= (const SimWall_Wall_Interior& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimWall_Wall& > (*this) = x;
          this->ContainedBldgElementArrays_ = x.ContainedBldgElementArrays_;
          this->Name_ = x.Name_;
          this->Representation_ = x.Representation_;
          this->ConstructionType_ = x.ConstructionType_;
          this->WallIsExternal_ = x.WallIsExternal_;
          this->CompositeThermalTrans_ = x.CompositeThermalTrans_;
          this->PhotoVotaicArrayOnElement_ = x.PhotoVotaicArrayOnElement_;
          this->WallHeight_ = x.WallHeight_;
          this->WallLength_ = x.WallLength_;
          this->WallThickness_ = x.WallThickness_;
          this->WallGrossSideArea_ = x.WallGrossSideArea_;
          this->WallNetSideArea_ = x.WallNetSideArea_;
          this->WallGrossVolume_ = x.WallGrossVolume_;
          this->WallNetVolume_ = x.WallNetVolume_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialLayerSet_ = x.MaterialLayerSet_;
          this->ConnectedSlabs_ = x.ConnectedSlabs_;
          this->ConnectedWalls_ = x.ConnectedWalls_;
          this->SimWall_Name_ = x.SimWall_Name_;
          this->SimWall_SurfType_ = x.SimWall_SurfType_;
          this->SimWall_ConstructionName_ = x.SimWall_ConstructionName_;
          this->SimWall_ZoneName_ = x.SimWall_ZoneName_;
          this->SimWall_OutsdBndCond_ = x.SimWall_OutsdBndCond_;
          this->SimWall_OutsdBndCondObject_ = x.SimWall_OutsdBndCondObject_;
          this->SimWall_SunExposure_ = x.SimWall_SunExposure_;
          this->SimWall_WindExposure_ = x.SimWall_WindExposure_;
          this->SimWall_ViewFactToGnd_ = x.SimWall_ViewFactToGnd_;
          this->SimWall_NumbVerts_ = x.SimWall_NumbVerts_;
          this->SimWall_Vertex_1_120_X_Coord_ = x.SimWall_Vertex_1_120_X_Coord_;
          this->SimWall_Vertex_1_120_Y_Coord_ = x.SimWall_Vertex_1_120_Y_Coord_;
          this->SimWall_Vertex_1_120_Z_Coord_ = x.SimWall_Vertex_1_120_Z_Coord_;
          this->SurfaceProperty_SolarIncidentInside_Name_ = x.SurfaceProperty_SolarIncidentInside_Name_;
          this->SurfaceProperty_SolarIncidentInside_SurfName_ = x.SurfaceProperty_SolarIncidentInside_SurfName_;
          this->SurfaceProperty_SolarIncidentInside_ConstructionName_ = x.SurfaceProperty_SolarIncidentInside_ConstructionName_;
          this->SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_ = x.SurfaceProperty_SolarIncidentInside_InsideSurfaceIncidentSunSolarRadSchedName_;
          this->SurfProp_HeatTransAlg_MultSurf_Name_ = x.SurfProp_HeatTransAlg_MultSurf_Name_;
          this->SurfProp_HeatTransAlg_MultSurf_SurfType_ = x.SurfProp_HeatTransAlg_MultSurf_SurfType_;
          this->SurfProp_HeatTransAlg_MultSurf_Algorithm_ = x.SurfProp_HeatTransAlg_MultSurf_Algorithm_;
          this->T24ConstructStatus3_ = x.T24ConstructStatus3_;
        }

        return *this;
      }

      SimWall_Wall_Interior::
      ~SimWall_Wall_Interior ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

