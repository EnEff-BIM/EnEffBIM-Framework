// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSlab_Floor.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSlab_Floor
      // 

      const SimSlab_Floor::Name_optional& SimSlab_Floor::
      Name () const
      {
        return this->Name_;
      }

      SimSlab_Floor::Name_optional& SimSlab_Floor::
      Name ()
      {
        return this->Name_;
      }

      void SimSlab_Floor::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimSlab_Floor::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimSlab_Floor::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimSlab_Floor::Representation_optional& SimSlab_Floor::
      Representation () const
      {
        return this->Representation_;
      }

      SimSlab_Floor::Representation_optional& SimSlab_Floor::
      Representation ()
      {
        return this->Representation_;
      }

      void SimSlab_Floor::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimSlab_Floor::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimSlab_Floor::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimSlab_Floor::PredefinedSlabType_optional& SimSlab_Floor::
      PredefinedSlabType () const
      {
        return this->PredefinedSlabType_;
      }

      SimSlab_Floor::PredefinedSlabType_optional& SimSlab_Floor::
      PredefinedSlabType ()
      {
        return this->PredefinedSlabType_;
      }

      void SimSlab_Floor::
      PredefinedSlabType (const PredefinedSlabType_type& x)
      {
        this->PredefinedSlabType_.set (x);
      }

      void SimSlab_Floor::
      PredefinedSlabType (const PredefinedSlabType_optional& x)
      {
        this->PredefinedSlabType_ = x;
      }

      void SimSlab_Floor::
      PredefinedSlabType (::std::auto_ptr< PredefinedSlabType_type > x)
      {
        this->PredefinedSlabType_.set (x);
      }

      const SimSlab_Floor::ConstructionType_optional& SimSlab_Floor::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimSlab_Floor::ConstructionType_optional& SimSlab_Floor::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimSlab_Floor::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimSlab_Floor::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimSlab_Floor::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimSlab_Floor::SlabIsExternal_optional& SimSlab_Floor::
      SlabIsExternal () const
      {
        return this->SlabIsExternal_;
      }

      SimSlab_Floor::SlabIsExternal_optional& SimSlab_Floor::
      SlabIsExternal ()
      {
        return this->SlabIsExternal_;
      }

      void SimSlab_Floor::
      SlabIsExternal (const SlabIsExternal_type& x)
      {
        this->SlabIsExternal_.set (x);
      }

      void SimSlab_Floor::
      SlabIsExternal (const SlabIsExternal_optional& x)
      {
        this->SlabIsExternal_ = x;
      }

      const SimSlab_Floor::CompositeThermalTrans_optional& SimSlab_Floor::
      CompositeThermalTrans () const
      {
        return this->CompositeThermalTrans_;
      }

      SimSlab_Floor::CompositeThermalTrans_optional& SimSlab_Floor::
      CompositeThermalTrans ()
      {
        return this->CompositeThermalTrans_;
      }

      void SimSlab_Floor::
      CompositeThermalTrans (const CompositeThermalTrans_type& x)
      {
        this->CompositeThermalTrans_.set (x);
      }

      void SimSlab_Floor::
      CompositeThermalTrans (const CompositeThermalTrans_optional& x)
      {
        this->CompositeThermalTrans_ = x;
      }

      const SimSlab_Floor::PhotoVotaicArrayOnElement_optional& SimSlab_Floor::
      PhotoVotaicArrayOnElement () const
      {
        return this->PhotoVotaicArrayOnElement_;
      }

      SimSlab_Floor::PhotoVotaicArrayOnElement_optional& SimSlab_Floor::
      PhotoVotaicArrayOnElement ()
      {
        return this->PhotoVotaicArrayOnElement_;
      }

      void SimSlab_Floor::
      PhotoVotaicArrayOnElement (const PhotoVotaicArrayOnElement_type& x)
      {
        this->PhotoVotaicArrayOnElement_.set (x);
      }

      void SimSlab_Floor::
      PhotoVotaicArrayOnElement (const PhotoVotaicArrayOnElement_optional& x)
      {
        this->PhotoVotaicArrayOnElement_ = x;
      }

      void SimSlab_Floor::
      PhotoVotaicArrayOnElement (::std::auto_ptr< PhotoVotaicArrayOnElement_type > x)
      {
        this->PhotoVotaicArrayOnElement_.set (x);
      }

      const SimSlab_Floor::SlabThickness_optional& SimSlab_Floor::
      SlabThickness () const
      {
        return this->SlabThickness_;
      }

      SimSlab_Floor::SlabThickness_optional& SimSlab_Floor::
      SlabThickness ()
      {
        return this->SlabThickness_;
      }

      void SimSlab_Floor::
      SlabThickness (const SlabThickness_type& x)
      {
        this->SlabThickness_.set (x);
      }

      void SimSlab_Floor::
      SlabThickness (const SlabThickness_optional& x)
      {
        this->SlabThickness_ = x;
      }

      const SimSlab_Floor::SlabPerimeter_optional& SimSlab_Floor::
      SlabPerimeter () const
      {
        return this->SlabPerimeter_;
      }

      SimSlab_Floor::SlabPerimeter_optional& SimSlab_Floor::
      SlabPerimeter ()
      {
        return this->SlabPerimeter_;
      }

      void SimSlab_Floor::
      SlabPerimeter (const SlabPerimeter_type& x)
      {
        this->SlabPerimeter_.set (x);
      }

      void SimSlab_Floor::
      SlabPerimeter (const SlabPerimeter_optional& x)
      {
        this->SlabPerimeter_ = x;
      }

      const SimSlab_Floor::SlabGrossArea_optional& SimSlab_Floor::
      SlabGrossArea () const
      {
        return this->SlabGrossArea_;
      }

      SimSlab_Floor::SlabGrossArea_optional& SimSlab_Floor::
      SlabGrossArea ()
      {
        return this->SlabGrossArea_;
      }

      void SimSlab_Floor::
      SlabGrossArea (const SlabGrossArea_type& x)
      {
        this->SlabGrossArea_.set (x);
      }

      void SimSlab_Floor::
      SlabGrossArea (const SlabGrossArea_optional& x)
      {
        this->SlabGrossArea_ = x;
      }

      const SimSlab_Floor::SlabNetArea_optional& SimSlab_Floor::
      SlabNetArea () const
      {
        return this->SlabNetArea_;
      }

      SimSlab_Floor::SlabNetArea_optional& SimSlab_Floor::
      SlabNetArea ()
      {
        return this->SlabNetArea_;
      }

      void SimSlab_Floor::
      SlabNetArea (const SlabNetArea_type& x)
      {
        this->SlabNetArea_.set (x);
      }

      void SimSlab_Floor::
      SlabNetArea (const SlabNetArea_optional& x)
      {
        this->SlabNetArea_ = x;
      }

      const SimSlab_Floor::SlabGrossVolume_optional& SimSlab_Floor::
      SlabGrossVolume () const
      {
        return this->SlabGrossVolume_;
      }

      SimSlab_Floor::SlabGrossVolume_optional& SimSlab_Floor::
      SlabGrossVolume ()
      {
        return this->SlabGrossVolume_;
      }

      void SimSlab_Floor::
      SlabGrossVolume (const SlabGrossVolume_type& x)
      {
        this->SlabGrossVolume_.set (x);
      }

      void SimSlab_Floor::
      SlabGrossVolume (const SlabGrossVolume_optional& x)
      {
        this->SlabGrossVolume_ = x;
      }

      const SimSlab_Floor::SlabNetVolume_optional& SimSlab_Floor::
      SlabNetVolume () const
      {
        return this->SlabNetVolume_;
      }

      SimSlab_Floor::SlabNetVolume_optional& SimSlab_Floor::
      SlabNetVolume ()
      {
        return this->SlabNetVolume_;
      }

      void SimSlab_Floor::
      SlabNetVolume (const SlabNetVolume_type& x)
      {
        this->SlabNetVolume_.set (x);
      }

      void SimSlab_Floor::
      SlabNetVolume (const SlabNetVolume_optional& x)
      {
        this->SlabNetVolume_ = x;
      }

      const SimSlab_Floor::ClassRef_UniFormat_optional& SimSlab_Floor::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimSlab_Floor::ClassRef_UniFormat_optional& SimSlab_Floor::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimSlab_Floor::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimSlab_Floor::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimSlab_Floor::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimSlab_Floor::MaterialLayerSet_optional& SimSlab_Floor::
      MaterialLayerSet () const
      {
        return this->MaterialLayerSet_;
      }

      SimSlab_Floor::MaterialLayerSet_optional& SimSlab_Floor::
      MaterialLayerSet ()
      {
        return this->MaterialLayerSet_;
      }

      void SimSlab_Floor::
      MaterialLayerSet (const MaterialLayerSet_type& x)
      {
        this->MaterialLayerSet_.set (x);
      }

      void SimSlab_Floor::
      MaterialLayerSet (const MaterialLayerSet_optional& x)
      {
        this->MaterialLayerSet_ = x;
      }

      void SimSlab_Floor::
      MaterialLayerSet (::std::auto_ptr< MaterialLayerSet_type > x)
      {
        this->MaterialLayerSet_.set (x);
      }

      const SimSlab_Floor::ConnectedSlabs_optional& SimSlab_Floor::
      ConnectedSlabs () const
      {
        return this->ConnectedSlabs_;
      }

      SimSlab_Floor::ConnectedSlabs_optional& SimSlab_Floor::
      ConnectedSlabs ()
      {
        return this->ConnectedSlabs_;
      }

      void SimSlab_Floor::
      ConnectedSlabs (const ConnectedSlabs_type& x)
      {
        this->ConnectedSlabs_.set (x);
      }

      void SimSlab_Floor::
      ConnectedSlabs (const ConnectedSlabs_optional& x)
      {
        this->ConnectedSlabs_ = x;
      }

      void SimSlab_Floor::
      ConnectedSlabs (::std::auto_ptr< ConnectedSlabs_type > x)
      {
        this->ConnectedSlabs_.set (x);
      }

      const SimSlab_Floor::ConnectedWalls_optional& SimSlab_Floor::
      ConnectedWalls () const
      {
        return this->ConnectedWalls_;
      }

      SimSlab_Floor::ConnectedWalls_optional& SimSlab_Floor::
      ConnectedWalls ()
      {
        return this->ConnectedWalls_;
      }

      void SimSlab_Floor::
      ConnectedWalls (const ConnectedWalls_type& x)
      {
        this->ConnectedWalls_.set (x);
      }

      void SimSlab_Floor::
      ConnectedWalls (const ConnectedWalls_optional& x)
      {
        this->ConnectedWalls_ = x;
      }

      void SimSlab_Floor::
      ConnectedWalls (::std::auto_ptr< ConnectedWalls_type > x)
      {
        this->ConnectedWalls_.set (x);
      }

      const SimSlab_Floor::ConnectedBeams_optional& SimSlab_Floor::
      ConnectedBeams () const
      {
        return this->ConnectedBeams_;
      }

      SimSlab_Floor::ConnectedBeams_optional& SimSlab_Floor::
      ConnectedBeams ()
      {
        return this->ConnectedBeams_;
      }

      void SimSlab_Floor::
      ConnectedBeams (const ConnectedBeams_type& x)
      {
        this->ConnectedBeams_.set (x);
      }

      void SimSlab_Floor::
      ConnectedBeams (const ConnectedBeams_optional& x)
      {
        this->ConnectedBeams_ = x;
      }

      void SimSlab_Floor::
      ConnectedBeams (::std::auto_ptr< ConnectedBeams_type > x)
      {
        this->ConnectedBeams_.set (x);
      }

      const SimSlab_Floor::ConnectedColumns_optional& SimSlab_Floor::
      ConnectedColumns () const
      {
        return this->ConnectedColumns_;
      }

      SimSlab_Floor::ConnectedColumns_optional& SimSlab_Floor::
      ConnectedColumns ()
      {
        return this->ConnectedColumns_;
      }

      void SimSlab_Floor::
      ConnectedColumns (const ConnectedColumns_type& x)
      {
        this->ConnectedColumns_.set (x);
      }

      void SimSlab_Floor::
      ConnectedColumns (const ConnectedColumns_optional& x)
      {
        this->ConnectedColumns_ = x;
      }

      void SimSlab_Floor::
      ConnectedColumns (::std::auto_ptr< ConnectedColumns_type > x)
      {
        this->ConnectedColumns_.set (x);
      }

      const SimSlab_Floor::ContainingRamp_optional& SimSlab_Floor::
      ContainingRamp () const
      {
        return this->ContainingRamp_;
      }

      SimSlab_Floor::ContainingRamp_optional& SimSlab_Floor::
      ContainingRamp ()
      {
        return this->ContainingRamp_;
      }

      void SimSlab_Floor::
      ContainingRamp (const ContainingRamp_type& x)
      {
        this->ContainingRamp_.set (x);
      }

      void SimSlab_Floor::
      ContainingRamp (const ContainingRamp_optional& x)
      {
        this->ContainingRamp_ = x;
      }

      void SimSlab_Floor::
      ContainingRamp (::std::auto_ptr< ContainingRamp_type > x)
      {
        this->ContainingRamp_.set (x);
      }

      const SimSlab_Floor::ContainingStair_optional& SimSlab_Floor::
      ContainingStair () const
      {
        return this->ContainingStair_;
      }

      SimSlab_Floor::ContainingStair_optional& SimSlab_Floor::
      ContainingStair ()
      {
        return this->ContainingStair_;
      }

      void SimSlab_Floor::
      ContainingStair (const ContainingStair_type& x)
      {
        this->ContainingStair_.set (x);
      }

      void SimSlab_Floor::
      ContainingStair (const ContainingStair_optional& x)
      {
        this->ContainingStair_ = x;
      }

      void SimSlab_Floor::
      ContainingStair (::std::auto_ptr< ContainingStair_type > x)
      {
        this->ContainingStair_.set (x);
      }

      const SimSlab_Floor::SimSlab_Name_optional& SimSlab_Floor::
      SimSlab_Name () const
      {
        return this->SimSlab_Name_;
      }

      SimSlab_Floor::SimSlab_Name_optional& SimSlab_Floor::
      SimSlab_Name ()
      {
        return this->SimSlab_Name_;
      }

      void SimSlab_Floor::
      SimSlab_Name (const SimSlab_Name_type& x)
      {
        this->SimSlab_Name_.set (x);
      }

      void SimSlab_Floor::
      SimSlab_Name (const SimSlab_Name_optional& x)
      {
        this->SimSlab_Name_ = x;
      }

      void SimSlab_Floor::
      SimSlab_Name (::std::auto_ptr< SimSlab_Name_type > x)
      {
        this->SimSlab_Name_.set (x);
      }

      const SimSlab_Floor::SimSlab_ConstructionName_optional& SimSlab_Floor::
      SimSlab_ConstructionName () const
      {
        return this->SimSlab_ConstructionName_;
      }

      SimSlab_Floor::SimSlab_ConstructionName_optional& SimSlab_Floor::
      SimSlab_ConstructionName ()
      {
        return this->SimSlab_ConstructionName_;
      }

      void SimSlab_Floor::
      SimSlab_ConstructionName (const SimSlab_ConstructionName_type& x)
      {
        this->SimSlab_ConstructionName_.set (x);
      }

      void SimSlab_Floor::
      SimSlab_ConstructionName (const SimSlab_ConstructionName_optional& x)
      {
        this->SimSlab_ConstructionName_ = x;
      }

      void SimSlab_Floor::
      SimSlab_ConstructionName (::std::auto_ptr< SimSlab_ConstructionName_type > x)
      {
        this->SimSlab_ConstructionName_.set (x);
      }

      const SimSlab_Floor::SimSlab_ZoneName_optional& SimSlab_Floor::
      SimSlab_ZoneName () const
      {
        return this->SimSlab_ZoneName_;
      }

      SimSlab_Floor::SimSlab_ZoneName_optional& SimSlab_Floor::
      SimSlab_ZoneName ()
      {
        return this->SimSlab_ZoneName_;
      }

      void SimSlab_Floor::
      SimSlab_ZoneName (const SimSlab_ZoneName_type& x)
      {
        this->SimSlab_ZoneName_.set (x);
      }

      void SimSlab_Floor::
      SimSlab_ZoneName (const SimSlab_ZoneName_optional& x)
      {
        this->SimSlab_ZoneName_ = x;
      }

      void SimSlab_Floor::
      SimSlab_ZoneName (::std::auto_ptr< SimSlab_ZoneName_type > x)
      {
        this->SimSlab_ZoneName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSlab_Floor
      //

      SimSlab_Floor::
      SimSlab_Floor ()
      : ::schema::simxml::BuildingModel::SimSlab (),
        Name_ (this),
        Representation_ (this),
        PredefinedSlabType_ (this),
        ConstructionType_ (this),
        SlabIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        SlabThickness_ (this),
        SlabPerimeter_ (this),
        SlabGrossArea_ (this),
        SlabNetArea_ (this),
        SlabGrossVolume_ (this),
        SlabNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        ContainingRamp_ (this),
        ContainingStair_ (this),
        SimSlab_Name_ (this),
        SimSlab_ConstructionName_ (this),
        SimSlab_ZoneName_ (this)
      {
      }

      SimSlab_Floor::
      SimSlab_Floor (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSlab (RefId),
        Name_ (this),
        Representation_ (this),
        PredefinedSlabType_ (this),
        ConstructionType_ (this),
        SlabIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        SlabThickness_ (this),
        SlabPerimeter_ (this),
        SlabGrossArea_ (this),
        SlabNetArea_ (this),
        SlabGrossVolume_ (this),
        SlabNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        ContainingRamp_ (this),
        ContainingStair_ (this),
        SimSlab_Name_ (this),
        SimSlab_ConstructionName_ (this),
        SimSlab_ZoneName_ (this)
      {
      }

      SimSlab_Floor::
      SimSlab_Floor (const SimSlab_Floor& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSlab (x, f, c),
        Name_ (x.Name_, f, this),
        Representation_ (x.Representation_, f, this),
        PredefinedSlabType_ (x.PredefinedSlabType_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        SlabIsExternal_ (x.SlabIsExternal_, f, this),
        CompositeThermalTrans_ (x.CompositeThermalTrans_, f, this),
        PhotoVotaicArrayOnElement_ (x.PhotoVotaicArrayOnElement_, f, this),
        SlabThickness_ (x.SlabThickness_, f, this),
        SlabPerimeter_ (x.SlabPerimeter_, f, this),
        SlabGrossArea_ (x.SlabGrossArea_, f, this),
        SlabNetArea_ (x.SlabNetArea_, f, this),
        SlabGrossVolume_ (x.SlabGrossVolume_, f, this),
        SlabNetVolume_ (x.SlabNetVolume_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialLayerSet_ (x.MaterialLayerSet_, f, this),
        ConnectedSlabs_ (x.ConnectedSlabs_, f, this),
        ConnectedWalls_ (x.ConnectedWalls_, f, this),
        ConnectedBeams_ (x.ConnectedBeams_, f, this),
        ConnectedColumns_ (x.ConnectedColumns_, f, this),
        ContainingRamp_ (x.ContainingRamp_, f, this),
        ContainingStair_ (x.ContainingStair_, f, this),
        SimSlab_Name_ (x.SimSlab_Name_, f, this),
        SimSlab_ConstructionName_ (x.SimSlab_ConstructionName_, f, this),
        SimSlab_ZoneName_ (x.SimSlab_ZoneName_, f, this)
      {
      }

      SimSlab_Floor::
      SimSlab_Floor (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSlab (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        Representation_ (this),
        PredefinedSlabType_ (this),
        ConstructionType_ (this),
        SlabIsExternal_ (this),
        CompositeThermalTrans_ (this),
        PhotoVotaicArrayOnElement_ (this),
        SlabThickness_ (this),
        SlabPerimeter_ (this),
        SlabGrossArea_ (this),
        SlabNetArea_ (this),
        SlabGrossVolume_ (this),
        SlabNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialLayerSet_ (this),
        ConnectedSlabs_ (this),
        ConnectedWalls_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        ContainingRamp_ (this),
        ContainingStair_ (this),
        SimSlab_Name_ (this),
        SimSlab_ConstructionName_ (this),
        SimSlab_ZoneName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSlab_Floor::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSlab::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // PredefinedSlabType
          //
          if (n.name () == "PredefinedSlabType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< PredefinedSlabType_type > r (
              PredefinedSlabType_traits::create (i, f, this));

            if (!this->PredefinedSlabType_)
            {
              this->PredefinedSlabType_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // SlabIsExternal
          //
          if (n.name () == "SlabIsExternal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabIsExternal_)
            {
              this->SlabIsExternal_.set (SlabIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTrans
          //
          if (n.name () == "CompositeThermalTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CompositeThermalTrans_)
            {
              this->CompositeThermalTrans_.set (CompositeThermalTrans_traits::create (i, f, this));
              continue;
            }
          }

          // PhotoVotaicArrayOnElement
          //
          if (n.name () == "PhotoVotaicArrayOnElement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< PhotoVotaicArrayOnElement_type > r (
              PhotoVotaicArrayOnElement_traits::create (i, f, this));

            if (!this->PhotoVotaicArrayOnElement_)
            {
              this->PhotoVotaicArrayOnElement_.set (r);
              continue;
            }
          }

          // SlabThickness
          //
          if (n.name () == "SlabThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabThickness_)
            {
              this->SlabThickness_.set (SlabThickness_traits::create (i, f, this));
              continue;
            }
          }

          // SlabPerimeter
          //
          if (n.name () == "SlabPerimeter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabPerimeter_)
            {
              this->SlabPerimeter_.set (SlabPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // SlabGrossArea
          //
          if (n.name () == "SlabGrossArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabGrossArea_)
            {
              this->SlabGrossArea_.set (SlabGrossArea_traits::create (i, f, this));
              continue;
            }
          }

          // SlabNetArea
          //
          if (n.name () == "SlabNetArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabNetArea_)
            {
              this->SlabNetArea_.set (SlabNetArea_traits::create (i, f, this));
              continue;
            }
          }

          // SlabGrossVolume
          //
          if (n.name () == "SlabGrossVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabGrossVolume_)
            {
              this->SlabGrossVolume_.set (SlabGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SlabNetVolume
          //
          if (n.name () == "SlabNetVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SlabNetVolume_)
            {
              this->SlabNetVolume_.set (SlabNetVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialLayerSet
          //
          if (n.name () == "MaterialLayerSet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< MaterialLayerSet_type > r (
              MaterialLayerSet_traits::create (i, f, this));

            if (!this->MaterialLayerSet_)
            {
              this->MaterialLayerSet_.set (r);
              continue;
            }
          }

          // ConnectedSlabs
          //
          if (n.name () == "ConnectedSlabs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedSlabs_type > r (
              ConnectedSlabs_traits::create (i, f, this));

            if (!this->ConnectedSlabs_)
            {
              this->ConnectedSlabs_.set (r);
              continue;
            }
          }

          // ConnectedWalls
          //
          if (n.name () == "ConnectedWalls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedWalls_type > r (
              ConnectedWalls_traits::create (i, f, this));

            if (!this->ConnectedWalls_)
            {
              this->ConnectedWalls_.set (r);
              continue;
            }
          }

          // ConnectedBeams
          //
          if (n.name () == "ConnectedBeams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedBeams_type > r (
              ConnectedBeams_traits::create (i, f, this));

            if (!this->ConnectedBeams_)
            {
              this->ConnectedBeams_.set (r);
              continue;
            }
          }

          // ConnectedColumns
          //
          if (n.name () == "ConnectedColumns" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedColumns_type > r (
              ConnectedColumns_traits::create (i, f, this));

            if (!this->ConnectedColumns_)
            {
              this->ConnectedColumns_.set (r);
              continue;
            }
          }

          // ContainingRamp
          //
          if (n.name () == "ContainingRamp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ContainingRamp_type > r (
              ContainingRamp_traits::create (i, f, this));

            if (!this->ContainingRamp_)
            {
              this->ContainingRamp_.set (r);
              continue;
            }
          }

          // ContainingStair
          //
          if (n.name () == "ContainingStair" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ContainingStair_type > r (
              ContainingStair_traits::create (i, f, this));

            if (!this->ContainingStair_)
            {
              this->ContainingStair_.set (r);
              continue;
            }
          }

          // SimSlab_Name
          //
          if (n.name () == "SimSlab_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_Name_type > r (
              SimSlab_Name_traits::create (i, f, this));

            if (!this->SimSlab_Name_)
            {
              this->SimSlab_Name_.set (r);
              continue;
            }
          }

          // SimSlab_ConstructionName
          //
          if (n.name () == "SimSlab_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_ConstructionName_type > r (
              SimSlab_ConstructionName_traits::create (i, f, this));

            if (!this->SimSlab_ConstructionName_)
            {
              this->SimSlab_ConstructionName_.set (r);
              continue;
            }
          }

          // SimSlab_ZoneName
          //
          if (n.name () == "SimSlab_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSlab_ZoneName_type > r (
              SimSlab_ZoneName_traits::create (i, f, this));

            if (!this->SimSlab_ZoneName_)
            {
              this->SimSlab_ZoneName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSlab_Floor* SimSlab_Floor::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSlab_Floor (*this, f, c);
      }

      SimSlab_Floor& SimSlab_Floor::
      operator= (const SimSlab_Floor& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSlab& > (*this) = x;
          this->Name_ = x.Name_;
          this->Representation_ = x.Representation_;
          this->PredefinedSlabType_ = x.PredefinedSlabType_;
          this->ConstructionType_ = x.ConstructionType_;
          this->SlabIsExternal_ = x.SlabIsExternal_;
          this->CompositeThermalTrans_ = x.CompositeThermalTrans_;
          this->PhotoVotaicArrayOnElement_ = x.PhotoVotaicArrayOnElement_;
          this->SlabThickness_ = x.SlabThickness_;
          this->SlabPerimeter_ = x.SlabPerimeter_;
          this->SlabGrossArea_ = x.SlabGrossArea_;
          this->SlabNetArea_ = x.SlabNetArea_;
          this->SlabGrossVolume_ = x.SlabGrossVolume_;
          this->SlabNetVolume_ = x.SlabNetVolume_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialLayerSet_ = x.MaterialLayerSet_;
          this->ConnectedSlabs_ = x.ConnectedSlabs_;
          this->ConnectedWalls_ = x.ConnectedWalls_;
          this->ConnectedBeams_ = x.ConnectedBeams_;
          this->ConnectedColumns_ = x.ConnectedColumns_;
          this->ContainingRamp_ = x.ContainingRamp_;
          this->ContainingStair_ = x.ContainingStair_;
          this->SimSlab_Name_ = x.SimSlab_Name_;
          this->SimSlab_ConstructionName_ = x.SimSlab_ConstructionName_;
          this->SimSlab_ZoneName_ = x.SimSlab_ZoneName_;
        }

        return *this;
      }

      SimSlab_Floor::
      ~SimSlab_Floor ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

