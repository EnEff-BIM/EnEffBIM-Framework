// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimGroup.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      // SimGroup
      // 

      const SimGroup::ParentGroups_optional& SimGroup::
      ParentGroups () const
      {
        return this->ParentGroups_;
      }

      SimGroup::ParentGroups_optional& SimGroup::
      ParentGroups ()
      {
        return this->ParentGroups_;
      }

      void SimGroup::
      ParentGroups (const ParentGroups_type& x)
      {
        this->ParentGroups_.set (x);
      }

      void SimGroup::
      ParentGroups (const ParentGroups_optional& x)
      {
        this->ParentGroups_ = x;
      }

      void SimGroup::
      ParentGroups (::std::auto_ptr< ParentGroups_type > x)
      {
        this->ParentGroups_.set (x);
      }

      const SimGroup::ContainingBuildings_optional& SimGroup::
      ContainingBuildings () const
      {
        return this->ContainingBuildings_;
      }

      SimGroup::ContainingBuildings_optional& SimGroup::
      ContainingBuildings ()
      {
        return this->ContainingBuildings_;
      }

      void SimGroup::
      ContainingBuildings (const ContainingBuildings_type& x)
      {
        this->ContainingBuildings_.set (x);
      }

      void SimGroup::
      ContainingBuildings (const ContainingBuildings_optional& x)
      {
        this->ContainingBuildings_ = x;
      }

      void SimGroup::
      ContainingBuildings (::std::auto_ptr< ContainingBuildings_type > x)
      {
        this->ContainingBuildings_.set (x);
      }

      const SimGroup::NevronSchematicLayout_optional& SimGroup::
      NevronSchematicLayout () const
      {
        return this->NevronSchematicLayout_;
      }

      SimGroup::NevronSchematicLayout_optional& SimGroup::
      NevronSchematicLayout ()
      {
        return this->NevronSchematicLayout_;
      }

      void SimGroup::
      NevronSchematicLayout (const NevronSchematicLayout_type& x)
      {
        this->NevronSchematicLayout_.set (x);
      }

      void SimGroup::
      NevronSchematicLayout (const NevronSchematicLayout_optional& x)
      {
        this->NevronSchematicLayout_ = x;
      }

      void SimGroup::
      NevronSchematicLayout (::std::auto_ptr< NevronSchematicLayout_type > x)
      {
        this->NevronSchematicLayout_.set (x);
      }

      const SimGroup::TemplatesForMembers_optional& SimGroup::
      TemplatesForMembers () const
      {
        return this->TemplatesForMembers_;
      }

      SimGroup::TemplatesForMembers_optional& SimGroup::
      TemplatesForMembers ()
      {
        return this->TemplatesForMembers_;
      }

      void SimGroup::
      TemplatesForMembers (const TemplatesForMembers_type& x)
      {
        this->TemplatesForMembers_.set (x);
      }

      void SimGroup::
      TemplatesForMembers (const TemplatesForMembers_optional& x)
      {
        this->TemplatesForMembers_ = x;
      }

      void SimGroup::
      TemplatesForMembers (::std::auto_ptr< TemplatesForMembers_type > x)
      {
        this->TemplatesForMembers_.set (x);
      }

      const SimGroup::HasTemplateChanged_optional& SimGroup::
      HasTemplateChanged () const
      {
        return this->HasTemplateChanged_;
      }

      SimGroup::HasTemplateChanged_optional& SimGroup::
      HasTemplateChanged ()
      {
        return this->HasTemplateChanged_;
      }

      void SimGroup::
      HasTemplateChanged (const HasTemplateChanged_type& x)
      {
        this->HasTemplateChanged_.set (x);
      }

      void SimGroup::
      HasTemplateChanged (const HasTemplateChanged_optional& x)
      {
        this->HasTemplateChanged_ = x;
      }

      const SimGroup::ChangeFromTemplate_optional& SimGroup::
      ChangeFromTemplate () const
      {
        return this->ChangeFromTemplate_;
      }

      SimGroup::ChangeFromTemplate_optional& SimGroup::
      ChangeFromTemplate ()
      {
        return this->ChangeFromTemplate_;
      }

      void SimGroup::
      ChangeFromTemplate (const ChangeFromTemplate_type& x)
      {
        this->ChangeFromTemplate_.set (x);
      }

      void SimGroup::
      ChangeFromTemplate (const ChangeFromTemplate_optional& x)
      {
        this->ChangeFromTemplate_ = x;
      }

      void SimGroup::
      ChangeFromTemplate (::std::auto_ptr< ChangeFromTemplate_type > x)
      {
        this->ChangeFromTemplate_.set (x);
      }

      const SimGroup::MemberUsedForDiagrams_optional& SimGroup::
      MemberUsedForDiagrams () const
      {
        return this->MemberUsedForDiagrams_;
      }

      SimGroup::MemberUsedForDiagrams_optional& SimGroup::
      MemberUsedForDiagrams ()
      {
        return this->MemberUsedForDiagrams_;
      }

      void SimGroup::
      MemberUsedForDiagrams (const MemberUsedForDiagrams_type& x)
      {
        this->MemberUsedForDiagrams_.set (x);
      }

      void SimGroup::
      MemberUsedForDiagrams (const MemberUsedForDiagrams_optional& x)
      {
        this->MemberUsedForDiagrams_ = x;
      }

      void SimGroup::
      MemberUsedForDiagrams (::std::auto_ptr< MemberUsedForDiagrams_type > x)
      {
        this->MemberUsedForDiagrams_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      // SimGroup
      //

      SimGroup::
      SimGroup ()
      : ::schema::simxml::SimModelCore::SimObject (),
        ParentGroups_ (this),
        ContainingBuildings_ (this),
        NevronSchematicLayout_ (this),
        TemplatesForMembers_ (this),
        HasTemplateChanged_ (this),
        ChangeFromTemplate_ (this),
        MemberUsedForDiagrams_ (this)
      {
      }

      SimGroup::
      SimGroup (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimObject (RefId),
        ParentGroups_ (this),
        ContainingBuildings_ (this),
        NevronSchematicLayout_ (this),
        TemplatesForMembers_ (this),
        HasTemplateChanged_ (this),
        ChangeFromTemplate_ (this),
        MemberUsedForDiagrams_ (this)
      {
      }

      SimGroup::
      SimGroup (const SimGroup& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObject (x, f, c),
        ParentGroups_ (x.ParentGroups_, f, this),
        ContainingBuildings_ (x.ContainingBuildings_, f, this),
        NevronSchematicLayout_ (x.NevronSchematicLayout_, f, this),
        TemplatesForMembers_ (x.TemplatesForMembers_, f, this),
        HasTemplateChanged_ (x.HasTemplateChanged_, f, this),
        ChangeFromTemplate_ (x.ChangeFromTemplate_, f, this),
        MemberUsedForDiagrams_ (x.MemberUsedForDiagrams_, f, this)
      {
      }

      SimGroup::
      SimGroup (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObject (e, f | ::xml_schema::flags::base, c),
        ParentGroups_ (this),
        ContainingBuildings_ (this),
        NevronSchematicLayout_ (this),
        TemplatesForMembers_ (this),
        HasTemplateChanged_ (this),
        ChangeFromTemplate_ (this),
        MemberUsedForDiagrams_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimGroup::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimObject::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ParentGroups
          //
          if (n.name () == "ParentGroups" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< ParentGroups_type > r (
              ParentGroups_traits::create (i, f, this));

            if (!this->ParentGroups_)
            {
              this->ParentGroups_.set (r);
              continue;
            }
          }

          // ContainingBuildings
          //
          if (n.name () == "ContainingBuildings" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< ContainingBuildings_type > r (
              ContainingBuildings_traits::create (i, f, this));

            if (!this->ContainingBuildings_)
            {
              this->ContainingBuildings_.set (r);
              continue;
            }
          }

          // NevronSchematicLayout
          //
          if (n.name () == "NevronSchematicLayout" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< NevronSchematicLayout_type > r (
              NevronSchematicLayout_traits::create (i, f, this));

            if (!this->NevronSchematicLayout_)
            {
              this->NevronSchematicLayout_.set (r);
              continue;
            }
          }

          // TemplatesForMembers
          //
          if (n.name () == "TemplatesForMembers" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< TemplatesForMembers_type > r (
              TemplatesForMembers_traits::create (i, f, this));

            if (!this->TemplatesForMembers_)
            {
              this->TemplatesForMembers_.set (r);
              continue;
            }
          }

          // HasTemplateChanged
          //
          if (n.name () == "HasTemplateChanged" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            if (!this->HasTemplateChanged_)
            {
              this->HasTemplateChanged_.set (HasTemplateChanged_traits::create (i, f, this));
              continue;
            }
          }

          // ChangeFromTemplate
          //
          if (n.name () == "ChangeFromTemplate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< ChangeFromTemplate_type > r (
              ChangeFromTemplate_traits::create (i, f, this));

            if (!this->ChangeFromTemplate_)
            {
              this->ChangeFromTemplate_.set (r);
              continue;
            }
          }

          // MemberUsedForDiagrams
          //
          if (n.name () == "MemberUsedForDiagrams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< MemberUsedForDiagrams_type > r (
              MemberUsedForDiagrams_traits::create (i, f, this));

            if (!this->MemberUsedForDiagrams_)
            {
              this->MemberUsedForDiagrams_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimGroup* SimGroup::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimGroup (*this, f, c);
      }

      SimGroup& SimGroup::
      operator= (const SimGroup& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimObject& > (*this) = x;
          this->ParentGroups_ = x.ParentGroups_;
          this->ContainingBuildings_ = x.ContainingBuildings_;
          this->NevronSchematicLayout_ = x.NevronSchematicLayout_;
          this->TemplatesForMembers_ = x.TemplatesForMembers_;
          this->HasTemplateChanged_ = x.HasTemplateChanged_;
          this->ChangeFromTemplate_ = x.ChangeFromTemplate_;
          this->MemberUsedForDiagrams_ = x.MemberUsedForDiagrams_;
        }

        return *this;
      }

      SimGroup::
      ~SimGroup ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

