// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimLocationAndWeather_DesignDay.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimLocationAndWeather_DesignDay
      // 

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_Name_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Name () const
      {
        return this->SimLocationAndWeather_Name_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_Name_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Name ()
      {
        return this->SimLocationAndWeather_Name_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Name (const SimLocationAndWeather_Name_type& x)
      {
        this->SimLocationAndWeather_Name_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Name (const SimLocationAndWeather_Name_optional& x)
      {
        this->SimLocationAndWeather_Name_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Name (::std::auto_ptr< SimLocationAndWeather_Name_type > x)
      {
        this->SimLocationAndWeather_Name_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_Month_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Month () const
      {
        return this->SimLocationAndWeather_Month_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_Month_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Month ()
      {
        return this->SimLocationAndWeather_Month_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Month (const SimLocationAndWeather_Month_type& x)
      {
        this->SimLocationAndWeather_Month_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_Month (const SimLocationAndWeather_Month_optional& x)
      {
        this->SimLocationAndWeather_Month_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DayOfMonth_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayOfMonth () const
      {
        return this->SimLocationAndWeather_DayOfMonth_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DayOfMonth_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayOfMonth ()
      {
        return this->SimLocationAndWeather_DayOfMonth_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayOfMonth (const SimLocationAndWeather_DayOfMonth_type& x)
      {
        this->SimLocationAndWeather_DayOfMonth_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayOfMonth (const SimLocationAndWeather_DayOfMonth_optional& x)
      {
        this->SimLocationAndWeather_DayOfMonth_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DayType_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayType () const
      {
        return this->SimLocationAndWeather_DayType_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DayType_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayType ()
      {
        return this->SimLocationAndWeather_DayType_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayType (const SimLocationAndWeather_DayType_type& x)
      {
        this->SimLocationAndWeather_DayType_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayType (const SimLocationAndWeather_DayType_optional& x)
      {
        this->SimLocationAndWeather_DayType_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DayType (::std::auto_ptr< SimLocationAndWeather_DayType_type > x)
      {
        this->SimLocationAndWeather_DayType_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_MaxDryBulbTemp_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_MaxDryBulbTemp () const
      {
        return this->SimLocationAndWeather_MaxDryBulbTemp_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_MaxDryBulbTemp_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_MaxDryBulbTemp ()
      {
        return this->SimLocationAndWeather_MaxDryBulbTemp_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_MaxDryBulbTemp (const SimLocationAndWeather_MaxDryBulbTemp_type& x)
      {
        this->SimLocationAndWeather_MaxDryBulbTemp_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_MaxDryBulbTemp (const SimLocationAndWeather_MaxDryBulbTemp_optional& x)
      {
        this->SimLocationAndWeather_MaxDryBulbTemp_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DailyDry_BulbTempRange_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyDry_BulbTempRange () const
      {
        return this->SimLocationAndWeather_DailyDry_BulbTempRange_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DailyDry_BulbTempRange_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyDry_BulbTempRange ()
      {
        return this->SimLocationAndWeather_DailyDry_BulbTempRange_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyDry_BulbTempRange (const SimLocationAndWeather_DailyDry_BulbTempRange_type& x)
      {
        this->SimLocationAndWeather_DailyDry_BulbTempRange_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyDry_BulbTempRange (const SimLocationAndWeather_DailyDry_BulbTempRange_optional& x)
      {
        this->SimLocationAndWeather_DailyDry_BulbTempRange_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DryBulbTempRangeModType_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModType () const
      {
        return this->SimLocationAndWeather_DryBulbTempRangeModType_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DryBulbTempRangeModType_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModType ()
      {
        return this->SimLocationAndWeather_DryBulbTempRangeModType_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModType (const SimLocationAndWeather_DryBulbTempRangeModType_type& x)
      {
        this->SimLocationAndWeather_DryBulbTempRangeModType_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModType (const SimLocationAndWeather_DryBulbTempRangeModType_optional& x)
      {
        this->SimLocationAndWeather_DryBulbTempRangeModType_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModType (::std::auto_ptr< SimLocationAndWeather_DryBulbTempRangeModType_type > x)
      {
        this->SimLocationAndWeather_DryBulbTempRangeModType_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModDaySchedName () const
      {
        return this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModDaySchedName ()
      {
        return this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModDaySchedName (const SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type& x)
      {
        this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModDaySchedName (const SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional& x)
      {
        this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DryBulbTempRangeModDaySchedName (::std::auto_ptr< SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type > x)
      {
        this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_HumidityCondType_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondType () const
      {
        return this->SimLocationAndWeather_HumidityCondType_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_HumidityCondType_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondType ()
      {
        return this->SimLocationAndWeather_HumidityCondType_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondType (const SimLocationAndWeather_HumidityCondType_type& x)
      {
        this->SimLocationAndWeather_HumidityCondType_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondType (const SimLocationAndWeather_HumidityCondType_optional& x)
      {
        this->SimLocationAndWeather_HumidityCondType_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondType (::std::auto_ptr< SimLocationAndWeather_HumidityCondType_type > x)
      {
        this->SimLocationAndWeather_HumidityCondType_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb () const
      {
        return this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb ()
      {
        return this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb (const SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_type& x)
      {
        this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb (const SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional& x)
      {
        this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_HumidityCondDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondDaySchedName () const
      {
        return this->SimLocationAndWeather_HumidityCondDaySchedName_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_HumidityCondDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondDaySchedName ()
      {
        return this->SimLocationAndWeather_HumidityCondDaySchedName_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondDaySchedName (const SimLocationAndWeather_HumidityCondDaySchedName_type& x)
      {
        this->SimLocationAndWeather_HumidityCondDaySchedName_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondDaySchedName (const SimLocationAndWeather_HumidityCondDaySchedName_optional& x)
      {
        this->SimLocationAndWeather_HumidityCondDaySchedName_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityCondDaySchedName (::std::auto_ptr< SimLocationAndWeather_HumidityCondDaySchedName_type > x)
      {
        this->SimLocationAndWeather_HumidityCondDaySchedName_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityRatioatMaxDry_Bulb () const
      {
        return this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityRatioatMaxDry_Bulb ()
      {
        return this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityRatioatMaxDry_Bulb (const SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_type& x)
      {
        this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_HumidityRatioatMaxDry_Bulb (const SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional& x)
      {
        this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_EnthalpyatMaxDry_Bulb () const
      {
        return this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_EnthalpyatMaxDry_Bulb ()
      {
        return this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_EnthalpyatMaxDry_Bulb (const SimLocationAndWeather_EnthalpyatMaxDry_Bulb_type& x)
      {
        this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_EnthalpyatMaxDry_Bulb (const SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional& x)
      {
        this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DailyWet_BulbTempRange_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyWet_BulbTempRange () const
      {
        return this->SimLocationAndWeather_DailyWet_BulbTempRange_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DailyWet_BulbTempRange_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyWet_BulbTempRange ()
      {
        return this->SimLocationAndWeather_DailyWet_BulbTempRange_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyWet_BulbTempRange (const SimLocationAndWeather_DailyWet_BulbTempRange_type& x)
      {
        this->SimLocationAndWeather_DailyWet_BulbTempRange_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DailyWet_BulbTempRange (const SimLocationAndWeather_DailyWet_BulbTempRange_optional& x)
      {
        this->SimLocationAndWeather_DailyWet_BulbTempRange_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_BaromPres_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BaromPres () const
      {
        return this->SimLocationAndWeather_BaromPres_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_BaromPres_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BaromPres ()
      {
        return this->SimLocationAndWeather_BaromPres_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BaromPres (const SimLocationAndWeather_BaromPres_type& x)
      {
        this->SimLocationAndWeather_BaromPres_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BaromPres (const SimLocationAndWeather_BaromPres_optional& x)
      {
        this->SimLocationAndWeather_BaromPres_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_WindSpd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindSpd () const
      {
        return this->SimLocationAndWeather_WindSpd_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_WindSpd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindSpd ()
      {
        return this->SimLocationAndWeather_WindSpd_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindSpd (const SimLocationAndWeather_WindSpd_type& x)
      {
        this->SimLocationAndWeather_WindSpd_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindSpd (const SimLocationAndWeather_WindSpd_optional& x)
      {
        this->SimLocationAndWeather_WindSpd_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_WindDir_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindDir () const
      {
        return this->SimLocationAndWeather_WindDir_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_WindDir_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindDir ()
      {
        return this->SimLocationAndWeather_WindDir_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindDir (const SimLocationAndWeather_WindDir_type& x)
      {
        this->SimLocationAndWeather_WindDir_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_WindDir (const SimLocationAndWeather_WindDir_optional& x)
      {
        this->SimLocationAndWeather_WindDir_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_RainInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_RainInd () const
      {
        return this->SimLocationAndWeather_RainInd_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_RainInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_RainInd ()
      {
        return this->SimLocationAndWeather_RainInd_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_RainInd (const SimLocationAndWeather_RainInd_type& x)
      {
        this->SimLocationAndWeather_RainInd_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_RainInd (const SimLocationAndWeather_RainInd_optional& x)
      {
        this->SimLocationAndWeather_RainInd_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_RainInd (::std::auto_ptr< SimLocationAndWeather_RainInd_type > x)
      {
        this->SimLocationAndWeather_RainInd_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_SnowInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SnowInd () const
      {
        return this->SimLocationAndWeather_SnowInd_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_SnowInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SnowInd ()
      {
        return this->SimLocationAndWeather_SnowInd_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SnowInd (const SimLocationAndWeather_SnowInd_type& x)
      {
        this->SimLocationAndWeather_SnowInd_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SnowInd (const SimLocationAndWeather_SnowInd_optional& x)
      {
        this->SimLocationAndWeather_SnowInd_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SnowInd (::std::auto_ptr< SimLocationAndWeather_SnowInd_type > x)
      {
        this->SimLocationAndWeather_SnowInd_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DylghtSavingTimeInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DylghtSavingTimeInd () const
      {
        return this->SimLocationAndWeather_DylghtSavingTimeInd_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DylghtSavingTimeInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DylghtSavingTimeInd ()
      {
        return this->SimLocationAndWeather_DylghtSavingTimeInd_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DylghtSavingTimeInd (const SimLocationAndWeather_DylghtSavingTimeInd_type& x)
      {
        this->SimLocationAndWeather_DylghtSavingTimeInd_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DylghtSavingTimeInd (const SimLocationAndWeather_DylghtSavingTimeInd_optional& x)
      {
        this->SimLocationAndWeather_DylghtSavingTimeInd_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DylghtSavingTimeInd (::std::auto_ptr< SimLocationAndWeather_DylghtSavingTimeInd_type > x)
      {
        this->SimLocationAndWeather_DylghtSavingTimeInd_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_SolaThermdelInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SolaThermdelInd () const
      {
        return this->SimLocationAndWeather_SolaThermdelInd_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_SolaThermdelInd_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SolaThermdelInd ()
      {
        return this->SimLocationAndWeather_SolaThermdelInd_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SolaThermdelInd (const SimLocationAndWeather_SolaThermdelInd_type& x)
      {
        this->SimLocationAndWeather_SolaThermdelInd_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SolaThermdelInd (const SimLocationAndWeather_SolaThermdelInd_optional& x)
      {
        this->SimLocationAndWeather_SolaThermdelInd_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SolaThermdelInd (::std::auto_ptr< SimLocationAndWeather_SolaThermdelInd_type > x)
      {
        this->SimLocationAndWeather_SolaThermdelInd_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_BeamSolarDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BeamSolarDaySchedName () const
      {
        return this->SimLocationAndWeather_BeamSolarDaySchedName_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_BeamSolarDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BeamSolarDaySchedName ()
      {
        return this->SimLocationAndWeather_BeamSolarDaySchedName_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BeamSolarDaySchedName (const SimLocationAndWeather_BeamSolarDaySchedName_type& x)
      {
        this->SimLocationAndWeather_BeamSolarDaySchedName_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BeamSolarDaySchedName (const SimLocationAndWeather_BeamSolarDaySchedName_optional& x)
      {
        this->SimLocationAndWeather_BeamSolarDaySchedName_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_BeamSolarDaySchedName (::std::auto_ptr< SimLocationAndWeather_BeamSolarDaySchedName_type > x)
      {
        this->SimLocationAndWeather_BeamSolarDaySchedName_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_DiffuseSolarDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DiffuseSolarDaySchedName () const
      {
        return this->SimLocationAndWeather_DiffuseSolarDaySchedName_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_DiffuseSolarDaySchedName_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DiffuseSolarDaySchedName ()
      {
        return this->SimLocationAndWeather_DiffuseSolarDaySchedName_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DiffuseSolarDaySchedName (const SimLocationAndWeather_DiffuseSolarDaySchedName_type& x)
      {
        this->SimLocationAndWeather_DiffuseSolarDaySchedName_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DiffuseSolarDaySchedName (const SimLocationAndWeather_DiffuseSolarDaySchedName_optional& x)
      {
        this->SimLocationAndWeather_DiffuseSolarDaySchedName_ = x;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DiffuseSolarDaySchedName (::std::auto_ptr< SimLocationAndWeather_DiffuseSolarDaySchedName_type > x)
      {
        this->SimLocationAndWeather_DiffuseSolarDaySchedName_.set (x);
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub () const
      {
        return this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub ()
      {
        return this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_type& x)
      {
        this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional& x)
      {
        this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud () const
      {
        return this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud ()
      {
        return this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_type& x)
      {
        this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional& x)
      {
        this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_ = x;
      }

      const SimLocationAndWeather_DesignDay::SimLocationAndWeather_SkyClearness_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SkyClearness () const
      {
        return this->SimLocationAndWeather_SkyClearness_;
      }

      SimLocationAndWeather_DesignDay::SimLocationAndWeather_SkyClearness_optional& SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SkyClearness ()
      {
        return this->SimLocationAndWeather_SkyClearness_;
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SkyClearness (const SimLocationAndWeather_SkyClearness_type& x)
      {
        this->SimLocationAndWeather_SkyClearness_.set (x);
      }

      void SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_SkyClearness (const SimLocationAndWeather_SkyClearness_optional& x)
      {
        this->SimLocationAndWeather_SkyClearness_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimLocationAndWeather_DesignDay
      //

      SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DesignDay ()
      : ::schema::simxml::ResourcesGeneral::SimLocationAndWeather (),
        SimLocationAndWeather_Name_ (this),
        SimLocationAndWeather_Month_ (this),
        SimLocationAndWeather_DayOfMonth_ (this),
        SimLocationAndWeather_DayType_ (this),
        SimLocationAndWeather_MaxDryBulbTemp_ (this),
        SimLocationAndWeather_DailyDry_BulbTempRange_ (this),
        SimLocationAndWeather_DryBulbTempRangeModType_ (this),
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName_ (this),
        SimLocationAndWeather_HumidityCondType_ (this),
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_ (this),
        SimLocationAndWeather_HumidityCondDaySchedName_ (this),
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_ (this),
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb_ (this),
        SimLocationAndWeather_DailyWet_BulbTempRange_ (this),
        SimLocationAndWeather_BaromPres_ (this),
        SimLocationAndWeather_WindSpd_ (this),
        SimLocationAndWeather_WindDir_ (this),
        SimLocationAndWeather_RainInd_ (this),
        SimLocationAndWeather_SnowInd_ (this),
        SimLocationAndWeather_DylghtSavingTimeInd_ (this),
        SimLocationAndWeather_SolaThermdelInd_ (this),
        SimLocationAndWeather_BeamSolarDaySchedName_ (this),
        SimLocationAndWeather_DiffuseSolarDaySchedName_ (this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_ (this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_ (this),
        SimLocationAndWeather_SkyClearness_ (this)
      {
      }

      SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DesignDay (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimLocationAndWeather (RefId),
        SimLocationAndWeather_Name_ (this),
        SimLocationAndWeather_Month_ (this),
        SimLocationAndWeather_DayOfMonth_ (this),
        SimLocationAndWeather_DayType_ (this),
        SimLocationAndWeather_MaxDryBulbTemp_ (this),
        SimLocationAndWeather_DailyDry_BulbTempRange_ (this),
        SimLocationAndWeather_DryBulbTempRangeModType_ (this),
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName_ (this),
        SimLocationAndWeather_HumidityCondType_ (this),
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_ (this),
        SimLocationAndWeather_HumidityCondDaySchedName_ (this),
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_ (this),
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb_ (this),
        SimLocationAndWeather_DailyWet_BulbTempRange_ (this),
        SimLocationAndWeather_BaromPres_ (this),
        SimLocationAndWeather_WindSpd_ (this),
        SimLocationAndWeather_WindDir_ (this),
        SimLocationAndWeather_RainInd_ (this),
        SimLocationAndWeather_SnowInd_ (this),
        SimLocationAndWeather_DylghtSavingTimeInd_ (this),
        SimLocationAndWeather_SolaThermdelInd_ (this),
        SimLocationAndWeather_BeamSolarDaySchedName_ (this),
        SimLocationAndWeather_DiffuseSolarDaySchedName_ (this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_ (this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_ (this),
        SimLocationAndWeather_SkyClearness_ (this)
      {
      }

      SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DesignDay (const SimLocationAndWeather_DesignDay& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimLocationAndWeather (x, f, c),
        SimLocationAndWeather_Name_ (x.SimLocationAndWeather_Name_, f, this),
        SimLocationAndWeather_Month_ (x.SimLocationAndWeather_Month_, f, this),
        SimLocationAndWeather_DayOfMonth_ (x.SimLocationAndWeather_DayOfMonth_, f, this),
        SimLocationAndWeather_DayType_ (x.SimLocationAndWeather_DayType_, f, this),
        SimLocationAndWeather_MaxDryBulbTemp_ (x.SimLocationAndWeather_MaxDryBulbTemp_, f, this),
        SimLocationAndWeather_DailyDry_BulbTempRange_ (x.SimLocationAndWeather_DailyDry_BulbTempRange_, f, this),
        SimLocationAndWeather_DryBulbTempRangeModType_ (x.SimLocationAndWeather_DryBulbTempRangeModType_, f, this),
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName_ (x.SimLocationAndWeather_DryBulbTempRangeModDaySchedName_, f, this),
        SimLocationAndWeather_HumidityCondType_ (x.SimLocationAndWeather_HumidityCondType_, f, this),
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_ (x.SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_, f, this),
        SimLocationAndWeather_HumidityCondDaySchedName_ (x.SimLocationAndWeather_HumidityCondDaySchedName_, f, this),
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_ (x.SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_, f, this),
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb_ (x.SimLocationAndWeather_EnthalpyatMaxDry_Bulb_, f, this),
        SimLocationAndWeather_DailyWet_BulbTempRange_ (x.SimLocationAndWeather_DailyWet_BulbTempRange_, f, this),
        SimLocationAndWeather_BaromPres_ (x.SimLocationAndWeather_BaromPres_, f, this),
        SimLocationAndWeather_WindSpd_ (x.SimLocationAndWeather_WindSpd_, f, this),
        SimLocationAndWeather_WindDir_ (x.SimLocationAndWeather_WindDir_, f, this),
        SimLocationAndWeather_RainInd_ (x.SimLocationAndWeather_RainInd_, f, this),
        SimLocationAndWeather_SnowInd_ (x.SimLocationAndWeather_SnowInd_, f, this),
        SimLocationAndWeather_DylghtSavingTimeInd_ (x.SimLocationAndWeather_DylghtSavingTimeInd_, f, this),
        SimLocationAndWeather_SolaThermdelInd_ (x.SimLocationAndWeather_SolaThermdelInd_, f, this),
        SimLocationAndWeather_BeamSolarDaySchedName_ (x.SimLocationAndWeather_BeamSolarDaySchedName_, f, this),
        SimLocationAndWeather_DiffuseSolarDaySchedName_ (x.SimLocationAndWeather_DiffuseSolarDaySchedName_, f, this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_ (x.SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_, f, this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_ (x.SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_, f, this),
        SimLocationAndWeather_SkyClearness_ (x.SimLocationAndWeather_SkyClearness_, f, this)
      {
      }

      SimLocationAndWeather_DesignDay::
      SimLocationAndWeather_DesignDay (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimLocationAndWeather (e, f | ::xml_schema::flags::base, c),
        SimLocationAndWeather_Name_ (this),
        SimLocationAndWeather_Month_ (this),
        SimLocationAndWeather_DayOfMonth_ (this),
        SimLocationAndWeather_DayType_ (this),
        SimLocationAndWeather_MaxDryBulbTemp_ (this),
        SimLocationAndWeather_DailyDry_BulbTempRange_ (this),
        SimLocationAndWeather_DryBulbTempRangeModType_ (this),
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName_ (this),
        SimLocationAndWeather_HumidityCondType_ (this),
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_ (this),
        SimLocationAndWeather_HumidityCondDaySchedName_ (this),
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_ (this),
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb_ (this),
        SimLocationAndWeather_DailyWet_BulbTempRange_ (this),
        SimLocationAndWeather_BaromPres_ (this),
        SimLocationAndWeather_WindSpd_ (this),
        SimLocationAndWeather_WindDir_ (this),
        SimLocationAndWeather_RainInd_ (this),
        SimLocationAndWeather_SnowInd_ (this),
        SimLocationAndWeather_DylghtSavingTimeInd_ (this),
        SimLocationAndWeather_SolaThermdelInd_ (this),
        SimLocationAndWeather_BeamSolarDaySchedName_ (this),
        SimLocationAndWeather_DiffuseSolarDaySchedName_ (this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_ (this),
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_ (this),
        SimLocationAndWeather_SkyClearness_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimLocationAndWeather_DesignDay::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimLocationAndWeather::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimLocationAndWeather_Name
          //
          if (n.name () == "SimLocationAndWeather_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_Name_type > r (
              SimLocationAndWeather_Name_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_Name_)
            {
              this->SimLocationAndWeather_Name_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_Month
          //
          if (n.name () == "SimLocationAndWeather_Month" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_Month_)
            {
              this->SimLocationAndWeather_Month_.set (SimLocationAndWeather_Month_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_DayOfMonth
          //
          if (n.name () == "SimLocationAndWeather_DayOfMonth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_DayOfMonth_)
            {
              this->SimLocationAndWeather_DayOfMonth_.set (SimLocationAndWeather_DayOfMonth_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_DayType
          //
          if (n.name () == "SimLocationAndWeather_DayType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_DayType_type > r (
              SimLocationAndWeather_DayType_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_DayType_)
            {
              this->SimLocationAndWeather_DayType_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_MaxDryBulbTemp
          //
          if (n.name () == "SimLocationAndWeather_MaxDryBulbTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_MaxDryBulbTemp_)
            {
              this->SimLocationAndWeather_MaxDryBulbTemp_.set (SimLocationAndWeather_MaxDryBulbTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_DailyDry_BulbTempRange
          //
          if (n.name () == "SimLocationAndWeather_DailyDry_BulbTempRange" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_DailyDry_BulbTempRange_)
            {
              this->SimLocationAndWeather_DailyDry_BulbTempRange_.set (SimLocationAndWeather_DailyDry_BulbTempRange_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_DryBulbTempRangeModType
          //
          if (n.name () == "SimLocationAndWeather_DryBulbTempRangeModType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_DryBulbTempRangeModType_type > r (
              SimLocationAndWeather_DryBulbTempRangeModType_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_DryBulbTempRangeModType_)
            {
              this->SimLocationAndWeather_DryBulbTempRangeModType_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_DryBulbTempRangeModDaySchedName
          //
          if (n.name () == "SimLocationAndWeather_DryBulbTempRangeModDaySchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type > r (
              SimLocationAndWeather_DryBulbTempRangeModDaySchedName_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_)
            {
              this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_HumidityCondType
          //
          if (n.name () == "SimLocationAndWeather_HumidityCondType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_HumidityCondType_type > r (
              SimLocationAndWeather_HumidityCondType_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_HumidityCondType_)
            {
              this->SimLocationAndWeather_HumidityCondType_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb
          //
          if (n.name () == "SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_)
            {
              this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_.set (SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_HumidityCondDaySchedName
          //
          if (n.name () == "SimLocationAndWeather_HumidityCondDaySchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_HumidityCondDaySchedName_type > r (
              SimLocationAndWeather_HumidityCondDaySchedName_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_HumidityCondDaySchedName_)
            {
              this->SimLocationAndWeather_HumidityCondDaySchedName_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_HumidityRatioatMaxDry_Bulb
          //
          if (n.name () == "SimLocationAndWeather_HumidityRatioatMaxDry_Bulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_)
            {
              this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_.set (SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_EnthalpyatMaxDry_Bulb
          //
          if (n.name () == "SimLocationAndWeather_EnthalpyatMaxDry_Bulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_)
            {
              this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_.set (SimLocationAndWeather_EnthalpyatMaxDry_Bulb_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_DailyWet_BulbTempRange
          //
          if (n.name () == "SimLocationAndWeather_DailyWet_BulbTempRange" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_DailyWet_BulbTempRange_)
            {
              this->SimLocationAndWeather_DailyWet_BulbTempRange_.set (SimLocationAndWeather_DailyWet_BulbTempRange_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_BaromPres
          //
          if (n.name () == "SimLocationAndWeather_BaromPres" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_BaromPres_)
            {
              this->SimLocationAndWeather_BaromPres_.set (SimLocationAndWeather_BaromPres_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_WindSpd
          //
          if (n.name () == "SimLocationAndWeather_WindSpd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_WindSpd_)
            {
              this->SimLocationAndWeather_WindSpd_.set (SimLocationAndWeather_WindSpd_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_WindDir
          //
          if (n.name () == "SimLocationAndWeather_WindDir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_WindDir_)
            {
              this->SimLocationAndWeather_WindDir_.set (SimLocationAndWeather_WindDir_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_RainInd
          //
          if (n.name () == "SimLocationAndWeather_RainInd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_RainInd_type > r (
              SimLocationAndWeather_RainInd_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_RainInd_)
            {
              this->SimLocationAndWeather_RainInd_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_SnowInd
          //
          if (n.name () == "SimLocationAndWeather_SnowInd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_SnowInd_type > r (
              SimLocationAndWeather_SnowInd_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_SnowInd_)
            {
              this->SimLocationAndWeather_SnowInd_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_DylghtSavingTimeInd
          //
          if (n.name () == "SimLocationAndWeather_DylghtSavingTimeInd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_DylghtSavingTimeInd_type > r (
              SimLocationAndWeather_DylghtSavingTimeInd_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_DylghtSavingTimeInd_)
            {
              this->SimLocationAndWeather_DylghtSavingTimeInd_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_SolaThermdelInd
          //
          if (n.name () == "SimLocationAndWeather_SolaThermdelInd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_SolaThermdelInd_type > r (
              SimLocationAndWeather_SolaThermdelInd_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_SolaThermdelInd_)
            {
              this->SimLocationAndWeather_SolaThermdelInd_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_BeamSolarDaySchedName
          //
          if (n.name () == "SimLocationAndWeather_BeamSolarDaySchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_BeamSolarDaySchedName_type > r (
              SimLocationAndWeather_BeamSolarDaySchedName_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_BeamSolarDaySchedName_)
            {
              this->SimLocationAndWeather_BeamSolarDaySchedName_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_DiffuseSolarDaySchedName
          //
          if (n.name () == "SimLocationAndWeather_DiffuseSolarDaySchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimLocationAndWeather_DiffuseSolarDaySchedName_type > r (
              SimLocationAndWeather_DiffuseSolarDaySchedName_traits::create (i, f, this));

            if (!this->SimLocationAndWeather_DiffuseSolarDaySchedName_)
            {
              this->SimLocationAndWeather_DiffuseSolarDaySchedName_.set (r);
              continue;
            }
          }

          // SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub
          //
          if (n.name () == "SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_)
            {
              this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_.set (SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud
          //
          if (n.name () == "SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_)
            {
              this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_.set (SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_traits::create (i, f, this));
              continue;
            }
          }

          // SimLocationAndWeather_SkyClearness
          //
          if (n.name () == "SimLocationAndWeather_SkyClearness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimLocationAndWeather_SkyClearness_)
            {
              this->SimLocationAndWeather_SkyClearness_.set (SimLocationAndWeather_SkyClearness_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimLocationAndWeather_DesignDay* SimLocationAndWeather_DesignDay::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimLocationAndWeather_DesignDay (*this, f, c);
      }

      SimLocationAndWeather_DesignDay& SimLocationAndWeather_DesignDay::
      operator= (const SimLocationAndWeather_DesignDay& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimLocationAndWeather& > (*this) = x;
          this->SimLocationAndWeather_Name_ = x.SimLocationAndWeather_Name_;
          this->SimLocationAndWeather_Month_ = x.SimLocationAndWeather_Month_;
          this->SimLocationAndWeather_DayOfMonth_ = x.SimLocationAndWeather_DayOfMonth_;
          this->SimLocationAndWeather_DayType_ = x.SimLocationAndWeather_DayType_;
          this->SimLocationAndWeather_MaxDryBulbTemp_ = x.SimLocationAndWeather_MaxDryBulbTemp_;
          this->SimLocationAndWeather_DailyDry_BulbTempRange_ = x.SimLocationAndWeather_DailyDry_BulbTempRange_;
          this->SimLocationAndWeather_DryBulbTempRangeModType_ = x.SimLocationAndWeather_DryBulbTempRangeModType_;
          this->SimLocationAndWeather_DryBulbTempRangeModDaySchedName_ = x.SimLocationAndWeather_DryBulbTempRangeModDaySchedName_;
          this->SimLocationAndWeather_HumidityCondType_ = x.SimLocationAndWeather_HumidityCondType_;
          this->SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_ = x.SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_;
          this->SimLocationAndWeather_HumidityCondDaySchedName_ = x.SimLocationAndWeather_HumidityCondDaySchedName_;
          this->SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_ = x.SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_;
          this->SimLocationAndWeather_EnthalpyatMaxDry_Bulb_ = x.SimLocationAndWeather_EnthalpyatMaxDry_Bulb_;
          this->SimLocationAndWeather_DailyWet_BulbTempRange_ = x.SimLocationAndWeather_DailyWet_BulbTempRange_;
          this->SimLocationAndWeather_BaromPres_ = x.SimLocationAndWeather_BaromPres_;
          this->SimLocationAndWeather_WindSpd_ = x.SimLocationAndWeather_WindSpd_;
          this->SimLocationAndWeather_WindDir_ = x.SimLocationAndWeather_WindDir_;
          this->SimLocationAndWeather_RainInd_ = x.SimLocationAndWeather_RainInd_;
          this->SimLocationAndWeather_SnowInd_ = x.SimLocationAndWeather_SnowInd_;
          this->SimLocationAndWeather_DylghtSavingTimeInd_ = x.SimLocationAndWeather_DylghtSavingTimeInd_;
          this->SimLocationAndWeather_SolaThermdelInd_ = x.SimLocationAndWeather_SolaThermdelInd_;
          this->SimLocationAndWeather_BeamSolarDaySchedName_ = x.SimLocationAndWeather_BeamSolarDaySchedName_;
          this->SimLocationAndWeather_DiffuseSolarDaySchedName_ = x.SimLocationAndWeather_DiffuseSolarDaySchedName_;
          this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_ = x.SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_;
          this->SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_ = x.SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_;
          this->SimLocationAndWeather_SkyClearness_ = x.SimLocationAndWeather_SkyClearness_;
        }

        return *this;
      }

      SimLocationAndWeather_DesignDay::
      ~SimLocationAndWeather_DesignDay ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

