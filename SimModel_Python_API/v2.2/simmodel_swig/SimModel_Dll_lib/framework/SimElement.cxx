// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimElement.hxx"

#include "selectedpropertygroups.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      // SimElement
      // 

      const SimElement::GeometricRepresentations_optional& SimElement::
      GeometricRepresentations () const
      {
        return this->GeometricRepresentations_;
      }

      SimElement::GeometricRepresentations_optional& SimElement::
      GeometricRepresentations ()
      {
        return this->GeometricRepresentations_;
      }

      void SimElement::
      GeometricRepresentations (const GeometricRepresentations_type& x)
      {
        this->GeometricRepresentations_.set (x);
      }

      void SimElement::
      GeometricRepresentations (const GeometricRepresentations_optional& x)
      {
        this->GeometricRepresentations_ = x;
      }

      void SimElement::
      GeometricRepresentations (::std::auto_ptr< GeometricRepresentations_type > x)
      {
        this->GeometricRepresentations_.set (x);
      }

      const SimElement::ContainingSpatialStructure_optional& SimElement::
      ContainingSpatialStructure () const
      {
        return this->ContainingSpatialStructure_;
      }

      SimElement::ContainingSpatialStructure_optional& SimElement::
      ContainingSpatialStructure ()
      {
        return this->ContainingSpatialStructure_;
      }

      void SimElement::
      ContainingSpatialStructure (const ContainingSpatialStructure_type& x)
      {
        this->ContainingSpatialStructure_.set (x);
      }

      void SimElement::
      ContainingSpatialStructure (const ContainingSpatialStructure_optional& x)
      {
        this->ContainingSpatialStructure_ = x;
      }

      void SimElement::
      ContainingSpatialStructure (::std::auto_ptr< ContainingSpatialStructure_type > x)
      {
        this->ContainingSpatialStructure_.set (x);
      }

      const SimElement::AssignedToGroups_optional& SimElement::
      AssignedToGroups () const
      {
        return this->AssignedToGroups_;
      }

      SimElement::AssignedToGroups_optional& SimElement::
      AssignedToGroups ()
      {
        return this->AssignedToGroups_;
      }

      void SimElement::
      AssignedToGroups (const AssignedToGroups_type& x)
      {
        this->AssignedToGroups_.set (x);
      }

      void SimElement::
      AssignedToGroups (const AssignedToGroups_optional& x)
      {
        this->AssignedToGroups_ = x;
      }

      void SimElement::
      AssignedToGroups (::std::auto_ptr< AssignedToGroups_type > x)
      {
        this->AssignedToGroups_.set (x);
      }

      const SimElement::Placement_optional& SimElement::
      Placement () const
      {
        return this->Placement_;
      }

      SimElement::Placement_optional& SimElement::
      Placement ()
      {
        return this->Placement_;
      }

      void SimElement::
      Placement (const Placement_type& x)
      {
        this->Placement_.set (x);
      }

      void SimElement::
      Placement (const Placement_optional& x)
      {
        this->Placement_ = x;
      }

      void SimElement::
      Placement (::std::auto_ptr< Placement_type > x)
      {
        this->Placement_.set (x);
      }

      const SimElement::Tag_optional& SimElement::
      Tag () const
      {
        return this->Tag_;
      }

      SimElement::Tag_optional& SimElement::
      Tag ()
      {
        return this->Tag_;
      }

      void SimElement::
      Tag (const Tag_type& x)
      {
        this->Tag_.set (x);
      }

      void SimElement::
      Tag (const Tag_optional& x)
      {
        this->Tag_ = x;
      }

      void SimElement::
      Tag (::std::auto_ptr< Tag_type > x)
      {
        this->Tag_.set (x);
      }

      const SimElement::SelectedPropertyGroups_optional& SimElement::
      SelectedPropertyGroups () const
      {
        return this->SelectedPropertyGroups_;
      }

      SimElement::SelectedPropertyGroups_optional& SimElement::
      SelectedPropertyGroups ()
      {
        return this->SelectedPropertyGroups_;
      }

      void SimElement::
      SelectedPropertyGroups (const SelectedPropertyGroups_type& x)
      {
        this->SelectedPropertyGroups_.set (x);
      }

      void SimElement::
      SelectedPropertyGroups (const SelectedPropertyGroups_optional& x)
      {
        this->SelectedPropertyGroups_ = x;
      }

      void SimElement::
      SelectedPropertyGroups (::std::auto_ptr< SelectedPropertyGroups_type > x)
      {
        this->SelectedPropertyGroups_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      // SimElement
      //

      SimElement::
      SimElement ()
      : ::schema::simxml::SimModelCore::SimObject (),
        GeometricRepresentations_ (this),
        ContainingSpatialStructure_ (this),
        AssignedToGroups_ (this),
        Placement_ (this),
        Tag_ (this),
        SelectedPropertyGroups_ (this)
      {
      }

      SimElement::
      SimElement (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimObject (RefId),
        GeometricRepresentations_ (this),
        ContainingSpatialStructure_ (this),
        AssignedToGroups_ (this),
        Placement_ (this),
        Tag_ (this),
        SelectedPropertyGroups_ (this)
      {
      }

      SimElement::
      SimElement (const SimElement& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObject (x, f, c),
        GeometricRepresentations_ (x.GeometricRepresentations_, f, this),
        ContainingSpatialStructure_ (x.ContainingSpatialStructure_, f, this),
        AssignedToGroups_ (x.AssignedToGroups_, f, this),
        Placement_ (x.Placement_, f, this),
        Tag_ (x.Tag_, f, this),
        SelectedPropertyGroups_ (x.SelectedPropertyGroups_, f, this)
      {
      }

      SimElement::
      SimElement (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObject (e, f | ::xml_schema::flags::base, c),
        GeometricRepresentations_ (this),
        ContainingSpatialStructure_ (this),
        AssignedToGroups_ (this),
        Placement_ (this),
        Tag_ (this),
        SelectedPropertyGroups_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimElement::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimObject::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // GeometricRepresentations
          //
          if (n.name () == "GeometricRepresentations" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< GeometricRepresentations_type > r (
              GeometricRepresentations_traits::create (i, f, this));

            if (!this->GeometricRepresentations_)
            {
              this->GeometricRepresentations_.set (r);
              continue;
            }
          }

          // ContainingSpatialStructure
          //
          if (n.name () == "ContainingSpatialStructure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< ContainingSpatialStructure_type > r (
              ContainingSpatialStructure_traits::create (i, f, this));

            if (!this->ContainingSpatialStructure_)
            {
              this->ContainingSpatialStructure_.set (r);
              continue;
            }
          }

          // AssignedToGroups
          //
          if (n.name () == "AssignedToGroups" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< AssignedToGroups_type > r (
              AssignedToGroups_traits::create (i, f, this));

            if (!this->AssignedToGroups_)
            {
              this->AssignedToGroups_.set (r);
              continue;
            }
          }

          // Placement
          //
          if (n.name () == "Placement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< Placement_type > r (
              Placement_traits::create (i, f, this));

            if (!this->Placement_)
            {
              this->Placement_.set (r);
              continue;
            }
          }

          // Tag
          //
          if (n.name () == "Tag" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< Tag_type > r (
              Tag_traits::create (i, f, this));

            if (!this->Tag_)
            {
              this->Tag_.set (r);
              continue;
            }
          }

          // SelectedPropertyGroups
          //
          if (n.name () == "SelectedPropertyGroups" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
          {
            ::std::auto_ptr< SelectedPropertyGroups_type > r (
              SelectedPropertyGroups_traits::create (i, f, this));

            if (!this->SelectedPropertyGroups_)
            {
              this->SelectedPropertyGroups_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimElement* SimElement::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimElement (*this, f, c);
      }

      SimElement& SimElement::
      operator= (const SimElement& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimObject& > (*this) = x;
          this->GeometricRepresentations_ = x.GeometricRepresentations_;
          this->ContainingSpatialStructure_ = x.ContainingSpatialStructure_;
          this->AssignedToGroups_ = x.AssignedToGroups_;
          this->Placement_ = x.Placement_;
          this->Tag_ = x.Tag_;
          this->SelectedPropertyGroups_ = x.SelectedPropertyGroups_;
        }

        return *this;
      }

      SimElement::
      ~SimElement ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

