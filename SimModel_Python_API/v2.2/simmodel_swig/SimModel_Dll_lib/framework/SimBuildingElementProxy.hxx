// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_BUILDING_ELEMENT_PROXY_HXX
#define SIM_BUILDING_ELEMENT_PROXY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimBuildingElementProxy;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simbuildingelement.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimBuildingElementProxy: public ::schema::simxml::SimModelCore::SimBuildingElement
      {
        public:
        // Name
        //
        typedef ::xml_schema::string Name_type;
        typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
        typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

        const Name_optional&
        Name () const;

        Name_optional&
        Name ();

        void
        Name (const Name_type& x);

        void
        Name (const Name_optional& x);

        void
        Name (::std::auto_ptr< Name_type > p);

        // Representation
        //
        typedef ::xml_schema::idref Representation_type;
        typedef ::xsd::cxx::tree::optional< Representation_type > Representation_optional;
        typedef ::xsd::cxx::tree::traits< Representation_type, char > Representation_traits;

        const Representation_optional&
        Representation () const;

        Representation_optional&
        Representation ();

        void
        Representation (const Representation_type& x);

        void
        Representation (const Representation_optional& x);

        void
        Representation (::std::auto_ptr< Representation_type > p);

        // CompositionType
        //
        typedef ::xml_schema::string CompositionType_type;
        typedef ::xsd::cxx::tree::optional< CompositionType_type > CompositionType_optional;
        typedef ::xsd::cxx::tree::traits< CompositionType_type, char > CompositionType_traits;

        const CompositionType_optional&
        CompositionType () const;

        CompositionType_optional&
        CompositionType ();

        void
        CompositionType (const CompositionType_type& x);

        void
        CompositionType (const CompositionType_optional& x);

        void
        CompositionType (::std::auto_ptr< CompositionType_type > p);

        // AHUHeight
        //
        typedef ::xml_schema::double_ AHUHeight_type;
        typedef ::xsd::cxx::tree::optional< AHUHeight_type > AHUHeight_optional;
        typedef ::xsd::cxx::tree::traits< AHUHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > AHUHeight_traits;

        const AHUHeight_optional&
        AHUHeight () const;

        AHUHeight_optional&
        AHUHeight ();

        void
        AHUHeight (const AHUHeight_type& x);

        void
        AHUHeight (const AHUHeight_optional& x);

        // AHUWidth
        //
        typedef ::xml_schema::double_ AHUWidth_type;
        typedef ::xsd::cxx::tree::optional< AHUWidth_type > AHUWidth_optional;
        typedef ::xsd::cxx::tree::traits< AHUWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > AHUWidth_traits;

        const AHUWidth_optional&
        AHUWidth () const;

        AHUWidth_optional&
        AHUWidth ();

        void
        AHUWidth (const AHUWidth_type& x);

        void
        AHUWidth (const AHUWidth_optional& x);

        // AirFlow
        //
        typedef ::xml_schema::double_ AirFlow_type;
        typedef ::xsd::cxx::tree::optional< AirFlow_type > AirFlow_optional;
        typedef ::xsd::cxx::tree::traits< AirFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > AirFlow_traits;

        const AirFlow_optional&
        AirFlow () const;

        AirFlow_optional&
        AirFlow ();

        void
        AirFlow (const AirFlow_type& x);

        void
        AirFlow (const AirFlow_optional& x);

        // AirflowReturn
        //
        typedef ::xml_schema::double_ AirflowReturn_type;
        typedef ::xsd::cxx::tree::optional< AirflowReturn_type > AirflowReturn_optional;
        typedef ::xsd::cxx::tree::traits< AirflowReturn_type, char, ::xsd::cxx::tree::schema_type::double_ > AirflowReturn_traits;

        const AirflowReturn_optional&
        AirflowReturn () const;

        AirflowReturn_optional&
        AirflowReturn ();

        void
        AirflowReturn (const AirflowReturn_type& x);

        void
        AirflowReturn (const AirflowReturn_optional& x);

        // AirflowSupply
        //
        typedef ::xml_schema::double_ AirflowSupply_type;
        typedef ::xsd::cxx::tree::optional< AirflowSupply_type > AirflowSupply_optional;
        typedef ::xsd::cxx::tree::traits< AirflowSupply_type, char, ::xsd::cxx::tree::schema_type::double_ > AirflowSupply_traits;

        const AirflowSupply_optional&
        AirflowSupply () const;

        AirflowSupply_optional&
        AirflowSupply ();

        void
        AirflowSupply (const AirflowSupply_type& x);

        void
        AirflowSupply (const AirflowSupply_optional& x);

        // AirPressure
        //
        typedef ::xml_schema::double_ AirPressure_type;
        typedef ::xsd::cxx::tree::optional< AirPressure_type > AirPressure_optional;
        typedef ::xsd::cxx::tree::traits< AirPressure_type, char, ::xsd::cxx::tree::schema_type::double_ > AirPressure_traits;

        const AirPressure_optional&
        AirPressure () const;

        AirPressure_optional&
        AirPressure ();

        void
        AirPressure (const AirPressure_type& x);

        void
        AirPressure (const AirPressure_optional& x);

        // AirwayLength
        //
        typedef ::xml_schema::double_ AirwayLength_type;
        typedef ::xsd::cxx::tree::optional< AirwayLength_type > AirwayLength_optional;
        typedef ::xsd::cxx::tree::traits< AirwayLength_type, char, ::xsd::cxx::tree::schema_type::double_ > AirwayLength_traits;

        const AirwayLength_optional&
        AirwayLength () const;

        AirwayLength_optional&
        AirwayLength ();

        void
        AirwayLength (const AirwayLength_type& x);

        void
        AirwayLength (const AirwayLength_optional& x);

        // AlternatorVoltage
        //
        typedef ::xml_schema::double_ AlternatorVoltage_type;
        typedef ::xsd::cxx::tree::optional< AlternatorVoltage_type > AlternatorVoltage_optional;
        typedef ::xsd::cxx::tree::traits< AlternatorVoltage_type, char, ::xsd::cxx::tree::schema_type::double_ > AlternatorVoltage_traits;

        const AlternatorVoltage_optional&
        AlternatorVoltage () const;

        AlternatorVoltage_optional&
        AlternatorVoltage ();

        void
        AlternatorVoltage (const AlternatorVoltage_type& x);

        void
        AlternatorVoltage (const AlternatorVoltage_optional& x);

        // Ang
        //
        typedef ::xml_schema::double_ Ang_type;
        typedef ::xsd::cxx::tree::optional< Ang_type > Ang_optional;
        typedef ::xsd::cxx::tree::traits< Ang_type, char, ::xsd::cxx::tree::schema_type::double_ > Ang_traits;

        const Ang_optional&
        Ang () const;

        Ang_optional&
        Ang ();

        void
        Ang (const Ang_type& x);

        void
        Ang (const Ang_optional& x);

        // ApparentLoad
        //
        typedef ::xml_schema::double_ ApparentLoad_type;
        typedef ::xsd::cxx::tree::optional< ApparentLoad_type > ApparentLoad_optional;
        typedef ::xsd::cxx::tree::traits< ApparentLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > ApparentLoad_traits;

        const ApparentLoad_optional&
        ApparentLoad () const;

        ApparentLoad_optional&
        ApparentLoad ();

        void
        ApparentLoad (const ApparentLoad_type& x);

        void
        ApparentLoad (const ApparentLoad_optional& x);

        // ApparentLoadPhaseA
        //
        typedef ::xml_schema::double_ ApparentLoadPhaseA_type;
        typedef ::xsd::cxx::tree::optional< ApparentLoadPhaseA_type > ApparentLoadPhaseA_optional;
        typedef ::xsd::cxx::tree::traits< ApparentLoadPhaseA_type, char, ::xsd::cxx::tree::schema_type::double_ > ApparentLoadPhaseA_traits;

        const ApparentLoadPhaseA_optional&
        ApparentLoadPhaseA () const;

        ApparentLoadPhaseA_optional&
        ApparentLoadPhaseA ();

        void
        ApparentLoadPhaseA (const ApparentLoadPhaseA_type& x);

        void
        ApparentLoadPhaseA (const ApparentLoadPhaseA_optional& x);

        // ApparentLoadPhaseB
        //
        typedef ::xml_schema::double_ ApparentLoadPhaseB_type;
        typedef ::xsd::cxx::tree::optional< ApparentLoadPhaseB_type > ApparentLoadPhaseB_optional;
        typedef ::xsd::cxx::tree::traits< ApparentLoadPhaseB_type, char, ::xsd::cxx::tree::schema_type::double_ > ApparentLoadPhaseB_traits;

        const ApparentLoadPhaseB_optional&
        ApparentLoadPhaseB () const;

        ApparentLoadPhaseB_optional&
        ApparentLoadPhaseB ();

        void
        ApparentLoadPhaseB (const ApparentLoadPhaseB_type& x);

        void
        ApparentLoadPhaseB (const ApparentLoadPhaseB_optional& x);

        // ApparentLoadPhaseC
        //
        typedef ::xml_schema::double_ ApparentLoadPhaseC_type;
        typedef ::xsd::cxx::tree::optional< ApparentLoadPhaseC_type > ApparentLoadPhaseC_optional;
        typedef ::xsd::cxx::tree::traits< ApparentLoadPhaseC_type, char, ::xsd::cxx::tree::schema_type::double_ > ApparentLoadPhaseC_traits;

        const ApparentLoadPhaseC_optional&
        ApparentLoadPhaseC () const;

        ApparentLoadPhaseC_optional&
        ApparentLoadPhaseC ();

        void
        ApparentLoadPhaseC (const ApparentLoadPhaseC_type& x);

        void
        ApparentLoadPhaseC (const ApparentLoadPhaseC_optional& x);

        // AverageSolarTransmittance
        //
        typedef ::xml_schema::double_ AverageSolarTransmittance_type;
        typedef ::xsd::cxx::tree::optional< AverageSolarTransmittance_type > AverageSolarTransmittance_optional;
        typedef ::xsd::cxx::tree::traits< AverageSolarTransmittance_type, char, ::xsd::cxx::tree::schema_type::double_ > AverageSolarTransmittance_traits;

        const AverageSolarTransmittance_optional&
        AverageSolarTransmittance () const;

        AverageSolarTransmittance_optional&
        AverageSolarTransmittance ();

        void
        AverageSolarTransmittance (const AverageSolarTransmittance_type& x);

        void
        AverageSolarTransmittance (const AverageSolarTransmittance_optional& x);

        // AverageVisibleTransmittance
        //
        typedef ::xml_schema::double_ AverageVisibleTransmittance_type;
        typedef ::xsd::cxx::tree::optional< AverageVisibleTransmittance_type > AverageVisibleTransmittance_optional;
        typedef ::xsd::cxx::tree::traits< AverageVisibleTransmittance_type, char, ::xsd::cxx::tree::schema_type::double_ > AverageVisibleTransmittance_traits;

        const AverageVisibleTransmittance_optional&
        AverageVisibleTransmittance () const;

        AverageVisibleTransmittance_optional&
        AverageVisibleTransmittance ();

        void
        AverageVisibleTransmittance (const AverageVisibleTransmittance_type& x);

        void
        AverageVisibleTransmittance (const AverageVisibleTransmittance_optional& x);

        // Azimuth
        //
        typedef ::xml_schema::double_ Azimuth_type;
        typedef ::xsd::cxx::tree::optional< Azimuth_type > Azimuth_optional;
        typedef ::xsd::cxx::tree::traits< Azimuth_type, char, ::xsd::cxx::tree::schema_type::double_ > Azimuth_traits;

        const Azimuth_optional&
        Azimuth () const;

        Azimuth_optional&
        Azimuth ();

        void
        Azimuth (const Azimuth_type& x);

        void
        Azimuth (const Azimuth_optional& x);

        // BaseHeight
        //
        typedef ::xml_schema::double_ BaseHeight_type;
        typedef ::xsd::cxx::tree::optional< BaseHeight_type > BaseHeight_optional;
        typedef ::xsd::cxx::tree::traits< BaseHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > BaseHeight_traits;

        const BaseHeight_optional&
        BaseHeight () const;

        BaseHeight_optional&
        BaseHeight ();

        void
        BaseHeight (const BaseHeight_type& x);

        void
        BaseHeight (const BaseHeight_optional& x);

        // BaseLength
        //
        typedef ::xml_schema::double_ BaseLength_type;
        typedef ::xsd::cxx::tree::optional< BaseLength_type > BaseLength_optional;
        typedef ::xsd::cxx::tree::traits< BaseLength_type, char, ::xsd::cxx::tree::schema_type::double_ > BaseLength_traits;

        const BaseLength_optional&
        BaseLength () const;

        BaseLength_optional&
        BaseLength ();

        void
        BaseLength (const BaseLength_type& x);

        void
        BaseLength (const BaseLength_optional& x);

        // Buildingstoreyname
        //
        typedef ::xml_schema::string Buildingstoreyname_type;
        typedef ::xsd::cxx::tree::optional< Buildingstoreyname_type > Buildingstoreyname_optional;
        typedef ::xsd::cxx::tree::traits< Buildingstoreyname_type, char > Buildingstoreyname_traits;

        const Buildingstoreyname_optional&
        Buildingstoreyname () const;

        Buildingstoreyname_optional&
        Buildingstoreyname ();

        void
        Buildingstoreyname (const Buildingstoreyname_type& x);

        void
        Buildingstoreyname (const Buildingstoreyname_optional& x);

        void
        Buildingstoreyname (::std::auto_ptr< Buildingstoreyname_type > p);

        // C1Offset1
        //
        typedef ::xml_schema::double_ C1Offset1_type;
        typedef ::xsd::cxx::tree::optional< C1Offset1_type > C1Offset1_optional;
        typedef ::xsd::cxx::tree::traits< C1Offset1_type, char, ::xsd::cxx::tree::schema_type::double_ > C1Offset1_traits;

        const C1Offset1_optional&
        C1Offset1 () const;

        C1Offset1_optional&
        C1Offset1 ();

        void
        C1Offset1 (const C1Offset1_type& x);

        void
        C1Offset1 (const C1Offset1_optional& x);

        // C1Offset2
        //
        typedef ::xml_schema::double_ C1Offset2_type;
        typedef ::xsd::cxx::tree::optional< C1Offset2_type > C1Offset2_optional;
        typedef ::xsd::cxx::tree::traits< C1Offset2_type, char, ::xsd::cxx::tree::schema_type::double_ > C1Offset2_traits;

        const C1Offset2_optional&
        C1Offset2 () const;

        C1Offset2_optional&
        C1Offset2 ();

        void
        C1Offset2 (const C1Offset2_type& x);

        void
        C1Offset2 (const C1Offset2_optional& x);

        // C2Offset1
        //
        typedef ::xml_schema::double_ C2Offset1_type;
        typedef ::xsd::cxx::tree::optional< C2Offset1_type > C2Offset1_optional;
        typedef ::xsd::cxx::tree::traits< C2Offset1_type, char, ::xsd::cxx::tree::schema_type::double_ > C2Offset1_traits;

        const C2Offset1_optional&
        C2Offset1 () const;

        C2Offset1_optional&
        C2Offset1 ();

        void
        C2Offset1 (const C2Offset1_type& x);

        void
        C2Offset1 (const C2Offset1_optional& x);

        // C2Offset2
        //
        typedef ::xml_schema::double_ C2Offset2_type;
        typedef ::xsd::cxx::tree::optional< C2Offset2_type > C2Offset2_optional;
        typedef ::xsd::cxx::tree::traits< C2Offset2_type, char, ::xsd::cxx::tree::schema_type::double_ > C2Offset2_traits;

        const C2Offset2_optional&
        C2Offset2 () const;

        C2Offset2_optional&
        C2Offset2 ();

        void
        C2Offset2 (const C2Offset2_type& x);

        void
        C2Offset2 (const C2Offset2_optional& x);

        // C3Offset1
        //
        typedef ::xml_schema::double_ C3Offset1_type;
        typedef ::xsd::cxx::tree::optional< C3Offset1_type > C3Offset1_optional;
        typedef ::xsd::cxx::tree::traits< C3Offset1_type, char, ::xsd::cxx::tree::schema_type::double_ > C3Offset1_traits;

        const C3Offset1_optional&
        C3Offset1 () const;

        C3Offset1_optional&
        C3Offset1 ();

        void
        C3Offset1 (const C3Offset1_type& x);

        void
        C3Offset1 (const C3Offset1_optional& x);

        // C4Offset2
        //
        typedef ::xml_schema::double_ C4Offset2_type;
        typedef ::xsd::cxx::tree::optional< C4Offset2_type > C4Offset2_optional;
        typedef ::xsd::cxx::tree::traits< C4Offset2_type, char, ::xsd::cxx::tree::schema_type::double_ > C4Offset2_traits;

        const C4Offset2_optional&
        C4Offset2 () const;

        C4Offset2_optional&
        C4Offset2 ();

        void
        C4Offset2 (const C4Offset2_type& x);

        void
        C4Offset2 (const C4Offset2_optional& x);

        // C5Offset1
        //
        typedef ::xml_schema::double_ C5Offset1_type;
        typedef ::xsd::cxx::tree::optional< C5Offset1_type > C5Offset1_optional;
        typedef ::xsd::cxx::tree::traits< C5Offset1_type, char, ::xsd::cxx::tree::schema_type::double_ > C5Offset1_traits;

        const C5Offset1_optional&
        C5Offset1 () const;

        C5Offset1_optional&
        C5Offset1 ();

        void
        C5Offset1 (const C5Offset1_type& x);

        void
        C5Offset1 (const C5Offset1_optional& x);

        // C5Offset2
        //
        typedef ::xml_schema::double_ C5Offset2_type;
        typedef ::xsd::cxx::tree::optional< C5Offset2_type > C5Offset2_optional;
        typedef ::xsd::cxx::tree::traits< C5Offset2_type, char, ::xsd::cxx::tree::schema_type::double_ > C5Offset2_traits;

        const C5Offset2_optional&
        C5Offset2 () const;

        C5Offset2_optional&
        C5Offset2 ();

        void
        C5Offset2 (const C5Offset2_type& x);

        void
        C5Offset2 (const C5Offset2_optional& x);

        // C6Offset1
        //
        typedef ::xml_schema::double_ C6Offset1_type;
        typedef ::xsd::cxx::tree::optional< C6Offset1_type > C6Offset1_optional;
        typedef ::xsd::cxx::tree::traits< C6Offset1_type, char, ::xsd::cxx::tree::schema_type::double_ > C6Offset1_traits;

        const C6Offset1_optional&
        C6Offset1 () const;

        C6Offset1_optional&
        C6Offset1 ();

        void
        C6Offset1 (const C6Offset1_type& x);

        void
        C6Offset1 (const C6Offset1_optional& x);

        // C6Offset2
        //
        typedef ::xml_schema::double_ C6Offset2_type;
        typedef ::xsd::cxx::tree::optional< C6Offset2_type > C6Offset2_optional;
        typedef ::xsd::cxx::tree::traits< C6Offset2_type, char, ::xsd::cxx::tree::schema_type::double_ > C6Offset2_traits;

        const C6Offset2_optional&
        C6Offset2 () const;

        C6Offset2_optional&
        C6Offset2 ();

        void
        C6Offset2 (const C6Offset2_type& x);

        void
        C6Offset2 (const C6Offset2_optional& x);

        // ChilledWaterFlow
        //
        typedef ::xml_schema::double_ ChilledWaterFlow_type;
        typedef ::xsd::cxx::tree::optional< ChilledWaterFlow_type > ChilledWaterFlow_optional;
        typedef ::xsd::cxx::tree::traits< ChilledWaterFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > ChilledWaterFlow_traits;

        const ChilledWaterFlow_optional&
        ChilledWaterFlow () const;

        ChilledWaterFlow_optional&
        ChilledWaterFlow ();

        void
        ChilledWaterFlow (const ChilledWaterFlow_type& x);

        void
        ChilledWaterFlow (const ChilledWaterFlow_optional& x);

        // ChilledWaterPressureDrop
        //
        typedef ::xml_schema::double_ ChilledWaterPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< ChilledWaterPressureDrop_type > ChilledWaterPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< ChilledWaterPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > ChilledWaterPressureDrop_traits;

        const ChilledWaterPressureDrop_optional&
        ChilledWaterPressureDrop () const;

        ChilledWaterPressureDrop_optional&
        ChilledWaterPressureDrop ();

        void
        ChilledWaterPressureDrop (const ChilledWaterPressureDrop_type& x);

        void
        ChilledWaterPressureDrop (const ChilledWaterPressureDrop_optional& x);

        // CircuitNaming
        //
        typedef ::xml_schema::string CircuitNaming_type;
        typedef ::xsd::cxx::tree::optional< CircuitNaming_type > CircuitNaming_optional;
        typedef ::xsd::cxx::tree::traits< CircuitNaming_type, char > CircuitNaming_traits;

        const CircuitNaming_optional&
        CircuitNaming () const;

        CircuitNaming_optional&
        CircuitNaming ();

        void
        CircuitNaming (const CircuitNaming_type& x);

        void
        CircuitNaming (const CircuitNaming_optional& x);

        void
        CircuitNaming (::std::auto_ptr< CircuitNaming_type > p);

        // Color
        //
        typedef ::xml_schema::string Color_type;
        typedef ::xsd::cxx::tree::optional< Color_type > Color_optional;
        typedef ::xsd::cxx::tree::traits< Color_type, char > Color_traits;

        const Color_optional&
        Color () const;

        Color_optional&
        Color ();

        void
        Color (const Color_type& x);

        void
        Color (const Color_optional& x);

        void
        Color (::std::auto_ptr< Color_type > p);

        // Connectionoffset
        //
        typedef ::xml_schema::double_ Connectionoffset_type;
        typedef ::xsd::cxx::tree::optional< Connectionoffset_type > Connectionoffset_optional;
        typedef ::xsd::cxx::tree::traits< Connectionoffset_type, char, ::xsd::cxx::tree::schema_type::double_ > Connectionoffset_traits;

        const Connectionoffset_optional&
        Connectionoffset () const;

        Connectionoffset_optional&
        Connectionoffset ();

        void
        Connectionoffset (const Connectionoffset_type& x);

        void
        Connectionoffset (const Connectionoffset_optional& x);

        // ContainerName
        //
        typedef ::xml_schema::string ContainerName_type;
        typedef ::xsd::cxx::tree::optional< ContainerName_type > ContainerName_optional;
        typedef ::xsd::cxx::tree::traits< ContainerName_type, char > ContainerName_traits;

        const ContainerName_optional&
        ContainerName () const;

        ContainerName_optional&
        ContainerName ();

        void
        ContainerName (const ContainerName_type& x);

        void
        ContainerName (const ContainerName_optional& x);

        void
        ContainerName (::std::auto_ptr< ContainerName_type > p);

        // ContainerType
        //
        typedef ::xml_schema::string ContainerType_type;
        typedef ::xsd::cxx::tree::optional< ContainerType_type > ContainerType_optional;
        typedef ::xsd::cxx::tree::traits< ContainerType_type, char > ContainerType_traits;

        const ContainerType_optional&
        ContainerType () const;

        ContainerType_optional&
        ContainerType ();

        void
        ContainerType (const ContainerType_type& x);

        void
        ContainerType (const ContainerType_optional& x);

        void
        ContainerType (::std::auto_ptr< ContainerType_type > p);

        // CoolAirFlow
        //
        typedef ::xml_schema::double_ CoolAirFlow_type;
        typedef ::xsd::cxx::tree::optional< CoolAirFlow_type > CoolAirFlow_optional;
        typedef ::xsd::cxx::tree::traits< CoolAirFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolAirFlow_traits;

        const CoolAirFlow_optional&
        CoolAirFlow () const;

        CoolAirFlow_optional&
        CoolAirFlow ();

        void
        CoolAirFlow (const CoolAirFlow_type& x);

        void
        CoolAirFlow (const CoolAirFlow_optional& x);

        // CoolAirInletDiameter
        //
        typedef ::xml_schema::double_ CoolAirInletDiameter_type;
        typedef ::xsd::cxx::tree::optional< CoolAirInletDiameter_type > CoolAirInletDiameter_optional;
        typedef ::xsd::cxx::tree::traits< CoolAirInletDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolAirInletDiameter_traits;

        const CoolAirInletDiameter_optional&
        CoolAirInletDiameter () const;

        CoolAirInletDiameter_optional&
        CoolAirInletDiameter ();

        void
        CoolAirInletDiameter (const CoolAirInletDiameter_type& x);

        void
        CoolAirInletDiameter (const CoolAirInletDiameter_optional& x);

        // CoolAirInletRadius
        //
        typedef ::xml_schema::double_ CoolAirInletRadius_type;
        typedef ::xsd::cxx::tree::optional< CoolAirInletRadius_type > CoolAirInletRadius_optional;
        typedef ::xsd::cxx::tree::traits< CoolAirInletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolAirInletRadius_traits;

        const CoolAirInletRadius_optional&
        CoolAirInletRadius () const;

        CoolAirInletRadius_optional&
        CoolAirInletRadius ();

        void
        CoolAirInletRadius (const CoolAirInletRadius_type& x);

        void
        CoolAirInletRadius (const CoolAirInletRadius_optional& x);

        // CoolAirPressureDrop
        //
        typedef ::xml_schema::double_ CoolAirPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< CoolAirPressureDrop_type > CoolAirPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< CoolAirPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolAirPressureDrop_traits;

        const CoolAirPressureDrop_optional&
        CoolAirPressureDrop () const;

        CoolAirPressureDrop_optional&
        CoolAirPressureDrop ();

        void
        CoolAirPressureDrop (const CoolAirPressureDrop_type& x);

        void
        CoolAirPressureDrop (const CoolAirPressureDrop_optional& x);

        // CoolingCoilInletRadius
        //
        typedef ::xml_schema::double_ CoolingCoilInletRadius_type;
        typedef ::xsd::cxx::tree::optional< CoolingCoilInletRadius_type > CoolingCoilInletRadius_optional;
        typedef ::xsd::cxx::tree::traits< CoolingCoilInletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolingCoilInletRadius_traits;

        const CoolingCoilInletRadius_optional&
        CoolingCoilInletRadius () const;

        CoolingCoilInletRadius_optional&
        CoolingCoilInletRadius ();

        void
        CoolingCoilInletRadius (const CoolingCoilInletRadius_type& x);

        void
        CoolingCoilInletRadius (const CoolingCoilInletRadius_optional& x);

        // CoolingCoilOutletRadius
        //
        typedef ::xml_schema::double_ CoolingCoilOutletRadius_type;
        typedef ::xsd::cxx::tree::optional< CoolingCoilOutletRadius_type > CoolingCoilOutletRadius_optional;
        typedef ::xsd::cxx::tree::traits< CoolingCoilOutletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolingCoilOutletRadius_traits;

        const CoolingCoilOutletRadius_optional&
        CoolingCoilOutletRadius () const;

        CoolingCoilOutletRadius_optional&
        CoolingCoilOutletRadius ();

        void
        CoolingCoilOutletRadius (const CoolingCoilOutletRadius_type& x);

        void
        CoolingCoilOutletRadius (const CoolingCoilOutletRadius_optional& x);

        // CoolingWaterDiameter
        //
        typedef ::xml_schema::double_ CoolingWaterDiameter_type;
        typedef ::xsd::cxx::tree::optional< CoolingWaterDiameter_type > CoolingWaterDiameter_optional;
        typedef ::xsd::cxx::tree::traits< CoolingWaterDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolingWaterDiameter_traits;

        const CoolingWaterDiameter_optional&
        CoolingWaterDiameter () const;

        CoolingWaterDiameter_optional&
        CoolingWaterDiameter ();

        void
        CoolingWaterDiameter (const CoolingWaterDiameter_type& x);

        void
        CoolingWaterDiameter (const CoolingWaterDiameter_optional& x);

        // CoolingWaterFlow
        //
        typedef ::xml_schema::double_ CoolingWaterFlow_type;
        typedef ::xsd::cxx::tree::optional< CoolingWaterFlow_type > CoolingWaterFlow_optional;
        typedef ::xsd::cxx::tree::traits< CoolingWaterFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolingWaterFlow_traits;

        const CoolingWaterFlow_optional&
        CoolingWaterFlow () const;

        CoolingWaterFlow_optional&
        CoolingWaterFlow ();

        void
        CoolingWaterFlow (const CoolingWaterFlow_type& x);

        void
        CoolingWaterFlow (const CoolingWaterFlow_optional& x);

        // CoolingWaterPressureDrop
        //
        typedef ::xml_schema::double_ CoolingWaterPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< CoolingWaterPressureDrop_type > CoolingWaterPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< CoolingWaterPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolingWaterPressureDrop_traits;

        const CoolingWaterPressureDrop_optional&
        CoolingWaterPressureDrop () const;

        CoolingWaterPressureDrop_optional&
        CoolingWaterPressureDrop ();

        void
        CoolingWaterPressureDrop (const CoolingWaterPressureDrop_type& x);

        void
        CoolingWaterPressureDrop (const CoolingWaterPressureDrop_optional& x);

        // CoolingWaterRadius
        //
        typedef ::xml_schema::double_ CoolingWaterRadius_type;
        typedef ::xsd::cxx::tree::optional< CoolingWaterRadius_type > CoolingWaterRadius_optional;
        typedef ::xsd::cxx::tree::traits< CoolingWaterRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > CoolingWaterRadius_traits;

        const CoolingWaterRadius_optional&
        CoolingWaterRadius () const;

        CoolingWaterRadius_optional&
        CoolingWaterRadius ();

        void
        CoolingWaterRadius (const CoolingWaterRadius_type& x);

        void
        CoolingWaterRadius (const CoolingWaterRadius_optional& x);

        // Diameter1
        //
        typedef ::xml_schema::double_ Diameter1_type;
        typedef ::xsd::cxx::tree::optional< Diameter1_type > Diameter1_optional;
        typedef ::xsd::cxx::tree::traits< Diameter1_type, char, ::xsd::cxx::tree::schema_type::double_ > Diameter1_traits;

        const Diameter1_optional&
        Diameter1 () const;

        Diameter1_optional&
        Diameter1 ();

        void
        Diameter1 (const Diameter1_type& x);

        void
        Diameter1 (const Diameter1_optional& x);

        // Distance
        //
        typedef ::xml_schema::double_ Distance_type;
        typedef ::xsd::cxx::tree::optional< Distance_type > Distance_optional;
        typedef ::xsd::cxx::tree::traits< Distance_type, char, ::xsd::cxx::tree::schema_type::double_ > Distance_traits;

        const Distance_optional&
        Distance () const;

        Distance_optional&
        Distance ();

        void
        Distance (const Distance_type& x);

        void
        Distance (const Distance_optional& x);

        // Distance1
        //
        typedef ::xml_schema::double_ Distance1_type;
        typedef ::xsd::cxx::tree::optional< Distance1_type > Distance1_optional;
        typedef ::xsd::cxx::tree::traits< Distance1_type, char, ::xsd::cxx::tree::schema_type::double_ > Distance1_traits;

        const Distance1_optional&
        Distance1 () const;

        Distance1_optional&
        Distance1 ();

        void
        Distance1 (const Distance1_type& x);

        void
        Distance1 (const Distance1_optional& x);

        // Distance2
        //
        typedef ::xml_schema::double_ Distance2_type;
        typedef ::xsd::cxx::tree::optional< Distance2_type > Distance2_optional;
        typedef ::xsd::cxx::tree::traits< Distance2_type, char, ::xsd::cxx::tree::schema_type::double_ > Distance2_traits;

        const Distance2_optional&
        Distance2 () const;

        Distance2_optional&
        Distance2 ();

        void
        Distance2 (const Distance2_type& x);

        void
        Distance2 (const Distance2_optional& x);

        // DrainFlow
        //
        typedef ::xml_schema::double_ DrainFlow_type;
        typedef ::xsd::cxx::tree::optional< DrainFlow_type > DrainFlow_optional;
        typedef ::xsd::cxx::tree::traits< DrainFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > DrainFlow_traits;

        const DrainFlow_optional&
        DrainFlow () const;

        DrainFlow_optional&
        DrainFlow ();

        void
        DrainFlow (const DrainFlow_type& x);

        void
        DrainFlow (const DrainFlow_optional& x);

        // DrainOffset1
        //
        typedef ::xml_schema::double_ DrainOffset1_type;
        typedef ::xsd::cxx::tree::optional< DrainOffset1_type > DrainOffset1_optional;
        typedef ::xsd::cxx::tree::traits< DrainOffset1_type, char, ::xsd::cxx::tree::schema_type::double_ > DrainOffset1_traits;

        const DrainOffset1_optional&
        DrainOffset1 () const;

        DrainOffset1_optional&
        DrainOffset1 ();

        void
        DrainOffset1 (const DrainOffset1_type& x);

        void
        DrainOffset1 (const DrainOffset1_optional& x);

        // DrainRadius
        //
        typedef ::xml_schema::double_ DrainRadius_type;
        typedef ::xsd::cxx::tree::optional< DrainRadius_type > DrainRadius_optional;
        typedef ::xsd::cxx::tree::traits< DrainRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > DrainRadius_traits;

        const DrainRadius_optional&
        DrainRadius () const;

        DrainRadius_optional&
        DrainRadius ();

        void
        DrainRadius (const DrainRadius_type& x);

        void
        DrainRadius (const DrainRadius_optional& x);

        // DuctHeight
        //
        typedef ::xml_schema::double_ DuctHeight_type;
        typedef ::xsd::cxx::tree::optional< DuctHeight_type > DuctHeight_optional;
        typedef ::xsd::cxx::tree::traits< DuctHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > DuctHeight_traits;

        const DuctHeight_optional&
        DuctHeight () const;

        DuctHeight_optional&
        DuctHeight ();

        void
        DuctHeight (const DuctHeight_type& x);

        void
        DuctHeight (const DuctHeight_optional& x);

        // DuctWidth
        //
        typedef ::xml_schema::double_ DuctWidth_type;
        typedef ::xsd::cxx::tree::optional< DuctWidth_type > DuctWidth_optional;
        typedef ::xsd::cxx::tree::traits< DuctWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > DuctWidth_traits;

        const DuctWidth_optional&
        DuctWidth () const;

        DuctWidth_optional&
        DuctWidth ();

        void
        DuctWidth (const DuctWidth_type& x);

        void
        DuctWidth (const DuctWidth_optional& x);

        // ElectricalCircuitName
        //
        typedef ::xml_schema::string ElectricalCircuitName_type;
        typedef ::xsd::cxx::tree::optional< ElectricalCircuitName_type > ElectricalCircuitName_optional;
        typedef ::xsd::cxx::tree::traits< ElectricalCircuitName_type, char > ElectricalCircuitName_traits;

        const ElectricalCircuitName_optional&
        ElectricalCircuitName () const;

        ElectricalCircuitName_optional&
        ElectricalCircuitName ();

        void
        ElectricalCircuitName (const ElectricalCircuitName_type& x);

        void
        ElectricalCircuitName (const ElectricalCircuitName_optional& x);

        void
        ElectricalCircuitName (::std::auto_ptr< ElectricalCircuitName_type > p);

        // ElectricalData
        //
        typedef ::xml_schema::string ElectricalData_type;
        typedef ::xsd::cxx::tree::optional< ElectricalData_type > ElectricalData_optional;
        typedef ::xsd::cxx::tree::traits< ElectricalData_type, char > ElectricalData_traits;

        const ElectricalData_optional&
        ElectricalData () const;

        ElectricalData_optional&
        ElectricalData ();

        void
        ElectricalData (const ElectricalData_type& x);

        void
        ElectricalData (const ElectricalData_optional& x);

        void
        ElectricalData (::std::auto_ptr< ElectricalData_type > p);

        // Enclosure
        //
        typedef ::xml_schema::string Enclosure_type;
        typedef ::xsd::cxx::tree::optional< Enclosure_type > Enclosure_optional;
        typedef ::xsd::cxx::tree::traits< Enclosure_type, char > Enclosure_traits;

        const Enclosure_optional&
        Enclosure () const;

        Enclosure_optional&
        Enclosure ();

        void
        Enclosure (const Enclosure_type& x);

        void
        Enclosure (const Enclosure_optional& x);

        void
        Enclosure (::std::auto_ptr< Enclosure_type > p);

        // ExternalStaticPressure
        //
        typedef ::xml_schema::double_ ExternalStaticPressure_type;
        typedef ::xsd::cxx::tree::optional< ExternalStaticPressure_type > ExternalStaticPressure_optional;
        typedef ::xsd::cxx::tree::traits< ExternalStaticPressure_type, char, ::xsd::cxx::tree::schema_type::double_ > ExternalStaticPressure_traits;

        const ExternalStaticPressure_optional&
        ExternalStaticPressure () const;

        ExternalStaticPressure_optional&
        ExternalStaticPressure ();

        void
        ExternalStaticPressure (const ExternalStaticPressure_type& x);

        void
        ExternalStaticPressure (const ExternalStaticPressure_optional& x);

        // ExternalTotalPressure
        //
        typedef ::xml_schema::double_ ExternalTotalPressure_type;
        typedef ::xsd::cxx::tree::optional< ExternalTotalPressure_type > ExternalTotalPressure_optional;
        typedef ::xsd::cxx::tree::traits< ExternalTotalPressure_type, char, ::xsd::cxx::tree::schema_type::double_ > ExternalTotalPressure_traits;

        const ExternalTotalPressure_optional&
        ExternalTotalPressure () const;

        ExternalTotalPressure_optional&
        ExternalTotalPressure ();

        void
        ExternalTotalPressure (const ExternalTotalPressure_type& x);

        void
        ExternalTotalPressure (const ExternalTotalPressure_optional& x);

        // FanAirFlow
        //
        typedef ::xml_schema::double_ FanAirFlow_type;
        typedef ::xsd::cxx::tree::optional< FanAirFlow_type > FanAirFlow_optional;
        typedef ::xsd::cxx::tree::traits< FanAirFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > FanAirFlow_traits;

        const FanAirFlow_optional&
        FanAirFlow () const;

        FanAirFlow_optional&
        FanAirFlow ();

        void
        FanAirFlow (const FanAirFlow_type& x);

        void
        FanAirFlow (const FanAirFlow_optional& x);

        // FanDiameter
        //
        typedef ::xml_schema::double_ FanDiameter_type;
        typedef ::xsd::cxx::tree::optional< FanDiameter_type > FanDiameter_optional;
        typedef ::xsd::cxx::tree::traits< FanDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > FanDiameter_traits;

        const FanDiameter_optional&
        FanDiameter () const;

        FanDiameter_optional&
        FanDiameter ();

        void
        FanDiameter (const FanDiameter_type& x);

        void
        FanDiameter (const FanDiameter_optional& x);

        // FanRadius
        //
        typedef ::xml_schema::double_ FanRadius_type;
        typedef ::xsd::cxx::tree::optional< FanRadius_type > FanRadius_optional;
        typedef ::xsd::cxx::tree::traits< FanRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > FanRadius_traits;

        const FanRadius_optional&
        FanRadius () const;

        FanRadius_optional&
        FanRadius ();

        void
        FanRadius (const FanRadius_type& x);

        void
        FanRadius (const FanRadius_optional& x);

        // GeneratorHeight
        //
        typedef ::xml_schema::double_ GeneratorHeight_type;
        typedef ::xsd::cxx::tree::optional< GeneratorHeight_type > GeneratorHeight_optional;
        typedef ::xsd::cxx::tree::traits< GeneratorHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > GeneratorHeight_traits;

        const GeneratorHeight_optional&
        GeneratorHeight () const;

        GeneratorHeight_optional&
        GeneratorHeight ();

        void
        GeneratorHeight (const GeneratorHeight_type& x);

        void
        GeneratorHeight (const GeneratorHeight_optional& x);

        // GeneratorLength
        //
        typedef ::xml_schema::double_ GeneratorLength_type;
        typedef ::xsd::cxx::tree::optional< GeneratorLength_type > GeneratorLength_optional;
        typedef ::xsd::cxx::tree::traits< GeneratorLength_type, char, ::xsd::cxx::tree::schema_type::double_ > GeneratorLength_traits;

        const GeneratorLength_optional&
        GeneratorLength () const;

        GeneratorLength_optional&
        GeneratorLength ();

        void
        GeneratorLength (const GeneratorLength_type& x);

        void
        GeneratorLength (const GeneratorLength_optional& x);

        // GeneratorWidth
        //
        typedef ::xml_schema::double_ GeneratorWidth_type;
        typedef ::xsd::cxx::tree::optional< GeneratorWidth_type > GeneratorWidth_optional;
        typedef ::xsd::cxx::tree::traits< GeneratorWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > GeneratorWidth_traits;

        const GeneratorWidth_optional&
        GeneratorWidth () const;

        GeneratorWidth_optional&
        GeneratorWidth ();

        void
        GeneratorWidth (const GeneratorWidth_type& x);

        void
        GeneratorWidth (const GeneratorWidth_optional& x);

        // GroupName
        //
        typedef ::xml_schema::string GroupName_type;
        typedef ::xsd::cxx::tree::optional< GroupName_type > GroupName_optional;
        typedef ::xsd::cxx::tree::traits< GroupName_type, char > GroupName_traits;

        const GroupName_optional&
        GroupName () const;

        GroupName_optional&
        GroupName ();

        void
        GroupName (const GroupName_type& x);

        void
        GroupName (const GroupName_optional& x);

        void
        GroupName (::std::auto_ptr< GroupName_type > p);

        // HalfAirOutletHeight
        //
        typedef ::xml_schema::double_ HalfAirOutletHeight_type;
        typedef ::xsd::cxx::tree::optional< HalfAirOutletHeight_type > HalfAirOutletHeight_optional;
        typedef ::xsd::cxx::tree::traits< HalfAirOutletHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > HalfAirOutletHeight_traits;

        const HalfAirOutletHeight_optional&
        HalfAirOutletHeight () const;

        HalfAirOutletHeight_optional&
        HalfAirOutletHeight ();

        void
        HalfAirOutletHeight (const HalfAirOutletHeight_type& x);

        void
        HalfAirOutletHeight (const HalfAirOutletHeight_optional& x);

        // HalfAirOutletWidth
        //
        typedef ::xml_schema::double_ HalfAirOutletWidth_type;
        typedef ::xsd::cxx::tree::optional< HalfAirOutletWidth_type > HalfAirOutletWidth_optional;
        typedef ::xsd::cxx::tree::traits< HalfAirOutletWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > HalfAirOutletWidth_traits;

        const HalfAirOutletWidth_optional&
        HalfAirOutletWidth () const;

        HalfAirOutletWidth_optional&
        HalfAirOutletWidth ();

        void
        HalfAirOutletWidth (const HalfAirOutletWidth_type& x);

        void
        HalfAirOutletWidth (const HalfAirOutletWidth_optional& x);

        // HalfOverallHeight
        //
        typedef ::xml_schema::double_ HalfOverallHeight_type;
        typedef ::xsd::cxx::tree::optional< HalfOverallHeight_type > HalfOverallHeight_optional;
        typedef ::xsd::cxx::tree::traits< HalfOverallHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > HalfOverallHeight_traits;

        const HalfOverallHeight_optional&
        HalfOverallHeight () const;

        HalfOverallHeight_optional&
        HalfOverallHeight ();

        void
        HalfOverallHeight (const HalfOverallHeight_type& x);

        void
        HalfOverallHeight (const HalfOverallHeight_optional& x);

        // HalfOverallWidth
        //
        typedef ::xml_schema::double_ HalfOverallWidth_type;
        typedef ::xsd::cxx::tree::optional< HalfOverallWidth_type > HalfOverallWidth_optional;
        typedef ::xsd::cxx::tree::traits< HalfOverallWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > HalfOverallWidth_traits;

        const HalfOverallWidth_optional&
        HalfOverallWidth () const;

        HalfOverallWidth_optional&
        HalfOverallWidth ();

        void
        HalfOverallWidth (const HalfOverallWidth_type& x);

        void
        HalfOverallWidth (const HalfOverallWidth_optional& x);

        // HalfWidth4
        //
        typedef ::xml_schema::double_ HalfWidth4_type;
        typedef ::xsd::cxx::tree::optional< HalfWidth4_type > HalfWidth4_optional;
        typedef ::xsd::cxx::tree::traits< HalfWidth4_type, char, ::xsd::cxx::tree::schema_type::double_ > HalfWidth4_traits;

        const HalfWidth4_optional&
        HalfWidth4 () const;

        HalfWidth4_optional&
        HalfWidth4 ();

        void
        HalfWidth4 (const HalfWidth4_type& x);

        void
        HalfWidth4 (const HalfWidth4_optional& x);

        // HeatAirFlow
        //
        typedef ::xml_schema::double_ HeatAirFlow_type;
        typedef ::xsd::cxx::tree::optional< HeatAirFlow_type > HeatAirFlow_optional;
        typedef ::xsd::cxx::tree::traits< HeatAirFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatAirFlow_traits;

        const HeatAirFlow_optional&
        HeatAirFlow () const;

        HeatAirFlow_optional&
        HeatAirFlow ();

        void
        HeatAirFlow (const HeatAirFlow_type& x);

        void
        HeatAirFlow (const HeatAirFlow_optional& x);

        // HeatAirInletDiameter
        //
        typedef ::xml_schema::double_ HeatAirInletDiameter_type;
        typedef ::xsd::cxx::tree::optional< HeatAirInletDiameter_type > HeatAirInletDiameter_optional;
        typedef ::xsd::cxx::tree::traits< HeatAirInletDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatAirInletDiameter_traits;

        const HeatAirInletDiameter_optional&
        HeatAirInletDiameter () const;

        HeatAirInletDiameter_optional&
        HeatAirInletDiameter ();

        void
        HeatAirInletDiameter (const HeatAirInletDiameter_type& x);

        void
        HeatAirInletDiameter (const HeatAirInletDiameter_optional& x);

        // HeatAirInletRadius
        //
        typedef ::xml_schema::double_ HeatAirInletRadius_type;
        typedef ::xsd::cxx::tree::optional< HeatAirInletRadius_type > HeatAirInletRadius_optional;
        typedef ::xsd::cxx::tree::traits< HeatAirInletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatAirInletRadius_traits;

        const HeatAirInletRadius_optional&
        HeatAirInletRadius () const;

        HeatAirInletRadius_optional&
        HeatAirInletRadius ();

        void
        HeatAirInletRadius (const HeatAirInletRadius_type& x);

        void
        HeatAirInletRadius (const HeatAirInletRadius_optional& x);

        // HeatAirPressureDrop
        //
        typedef ::xml_schema::double_ HeatAirPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< HeatAirPressureDrop_type > HeatAirPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< HeatAirPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatAirPressureDrop_traits;

        const HeatAirPressureDrop_optional&
        HeatAirPressureDrop () const;

        HeatAirPressureDrop_optional&
        HeatAirPressureDrop ();

        void
        HeatAirPressureDrop (const HeatAirPressureDrop_type& x);

        void
        HeatAirPressureDrop (const HeatAirPressureDrop_optional& x);

        // HeatLoss
        //
        typedef ::xml_schema::double_ HeatLoss_type;
        typedef ::xsd::cxx::tree::optional< HeatLoss_type > HeatLoss_optional;
        typedef ::xsd::cxx::tree::traits< HeatLoss_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatLoss_traits;

        const HeatLoss_optional&
        HeatLoss () const;

        HeatLoss_optional&
        HeatLoss ();

        void
        HeatLoss (const HeatLoss_type& x);

        void
        HeatLoss (const HeatLoss_optional& x);

        // HeatingCoilInletRadius
        //
        typedef ::xml_schema::double_ HeatingCoilInletRadius_type;
        typedef ::xsd::cxx::tree::optional< HeatingCoilInletRadius_type > HeatingCoilInletRadius_optional;
        typedef ::xsd::cxx::tree::traits< HeatingCoilInletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatingCoilInletRadius_traits;

        const HeatingCoilInletRadius_optional&
        HeatingCoilInletRadius () const;

        HeatingCoilInletRadius_optional&
        HeatingCoilInletRadius ();

        void
        HeatingCoilInletRadius (const HeatingCoilInletRadius_type& x);

        void
        HeatingCoilInletRadius (const HeatingCoilInletRadius_optional& x);

        // HeatingCoilOutletRadius
        //
        typedef ::xml_schema::double_ HeatingCoilOutletRadius_type;
        typedef ::xsd::cxx::tree::optional< HeatingCoilOutletRadius_type > HeatingCoilOutletRadius_optional;
        typedef ::xsd::cxx::tree::traits< HeatingCoilOutletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > HeatingCoilOutletRadius_traits;

        const HeatingCoilOutletRadius_optional&
        HeatingCoilOutletRadius () const;

        HeatingCoilOutletRadius_optional&
        HeatingCoilOutletRadius ();

        void
        HeatingCoilOutletRadius (const HeatingCoilOutletRadius_type& x);

        void
        HeatingCoilOutletRadius (const HeatingCoilOutletRadius_optional& x);

        // Height1
        //
        typedef ::xml_schema::double_ Height1_type;
        typedef ::xsd::cxx::tree::optional< Height1_type > Height1_optional;
        typedef ::xsd::cxx::tree::traits< Height1_type, char, ::xsd::cxx::tree::schema_type::double_ > Height1_traits;

        const Height1_optional&
        Height1 () const;

        Height1_optional&
        Height1 ();

        void
        Height1 (const Height1_type& x);

        void
        Height1 (const Height1_optional& x);

        // Height2
        //
        typedef ::xml_schema::double_ Height2_type;
        typedef ::xsd::cxx::tree::optional< Height2_type > Height2_optional;
        typedef ::xsd::cxx::tree::traits< Height2_type, char, ::xsd::cxx::tree::schema_type::double_ > Height2_traits;

        const Height2_optional&
        Height2 () const;

        Height2_optional&
        Height2 ();

        void
        Height2 (const Height2_type& x);

        void
        Height2 (const Height2_optional& x);

        // Height3
        //
        typedef ::xml_schema::double_ Height3_type;
        typedef ::xsd::cxx::tree::optional< Height3_type > Height3_optional;
        typedef ::xsd::cxx::tree::traits< Height3_type, char, ::xsd::cxx::tree::schema_type::double_ > Height3_traits;

        const Height3_optional&
        Height3 () const;

        Height3_optional&
        Height3 ();

        void
        Height3 (const Height3_type& x);

        void
        Height3 (const Height3_optional& x);

        // Height4
        //
        typedef ::xml_schema::double_ Height4_type;
        typedef ::xsd::cxx::tree::optional< Height4_type > Height4_optional;
        typedef ::xsd::cxx::tree::traits< Height4_type, char, ::xsd::cxx::tree::schema_type::double_ > Height4_traits;

        const Height4_optional&
        Height4 () const;

        Height4_optional&
        Height4 ();

        void
        Height4 (const Height4_type& x);

        void
        Height4 (const Height4_optional& x);

        // Height5
        //
        typedef ::xml_schema::double_ Height5_type;
        typedef ::xsd::cxx::tree::optional< Height5_type > Height5_optional;
        typedef ::xsd::cxx::tree::traits< Height5_type, char, ::xsd::cxx::tree::schema_type::double_ > Height5_traits;

        const Height5_optional&
        Height5 () const;

        Height5_optional&
        Height5 ();

        void
        Height5 (const Height5_type& x);

        void
        Height5 (const Height5_optional& x);

        // Height6
        //
        typedef ::xml_schema::double_ Height6_type;
        typedef ::xsd::cxx::tree::optional< Height6_type > Height6_optional;
        typedef ::xsd::cxx::tree::traits< Height6_type, char, ::xsd::cxx::tree::schema_type::double_ > Height6_traits;

        const Height6_optional&
        Height6 () const;

        Height6_optional&
        Height6 ();

        void
        Height6 (const Height6_type& x);

        void
        Height6 (const Height6_optional& x);

        // Height7
        //
        typedef ::xml_schema::double_ Height7_type;
        typedef ::xsd::cxx::tree::optional< Height7_type > Height7_optional;
        typedef ::xsd::cxx::tree::traits< Height7_type, char, ::xsd::cxx::tree::schema_type::double_ > Height7_traits;

        const Height7_optional&
        Height7 () const;

        Height7_optional&
        Height7 ();

        void
        Height7 (const Height7_type& x);

        void
        Height7 (const Height7_optional& x);

        // Height8
        //
        typedef ::xml_schema::double_ Height8_type;
        typedef ::xsd::cxx::tree::optional< Height8_type > Height8_optional;
        typedef ::xsd::cxx::tree::traits< Height8_type, char, ::xsd::cxx::tree::schema_type::double_ > Height8_traits;

        const Height8_optional&
        Height8 () const;

        Height8_optional&
        Height8 ();

        void
        Height8 (const Height8_type& x);

        void
        Height8 (const Height8_optional& x);

        // Height9
        //
        typedef ::xml_schema::double_ Height9_type;
        typedef ::xsd::cxx::tree::optional< Height9_type > Height9_optional;
        typedef ::xsd::cxx::tree::traits< Height9_type, char, ::xsd::cxx::tree::schema_type::double_ > Height9_traits;

        const Height9_optional&
        Height9 () const;

        Height9_optional&
        Height9 ();

        void
        Height9 (const Height9_type& x);

        void
        Height9 (const Height9_optional& x);

        // Host
        //
        typedef ::xml_schema::string Host_type;
        typedef ::xsd::cxx::tree::optional< Host_type > Host_optional;
        typedef ::xsd::cxx::tree::traits< Host_type, char > Host_traits;

        const Host_optional&
        Host () const;

        Host_optional&
        Host ();

        void
        Host (const Host_type& x);

        void
        Host (const Host_optional& x);

        void
        Host (::std::auto_ptr< Host_type > p);

        // HotWaterFlow
        //
        typedef ::xml_schema::double_ HotWaterFlow_type;
        typedef ::xsd::cxx::tree::optional< HotWaterFlow_type > HotWaterFlow_optional;
        typedef ::xsd::cxx::tree::traits< HotWaterFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > HotWaterFlow_traits;

        const HotWaterFlow_optional&
        HotWaterFlow () const;

        HotWaterFlow_optional&
        HotWaterFlow ();

        void
        HotWaterFlow (const HotWaterFlow_type& x);

        void
        HotWaterFlow (const HotWaterFlow_optional& x);

        // HotWaterPressureDrop
        //
        typedef ::xml_schema::double_ HotWaterPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< HotWaterPressureDrop_type > HotWaterPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< HotWaterPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > HotWaterPressureDrop_traits;

        const HotWaterPressureDrop_optional&
        HotWaterPressureDrop () const;

        HotWaterPressureDrop_optional&
        HotWaterPressureDrop ();

        void
        HotWaterPressureDrop (const HotWaterPressureDrop_type& x);

        void
        HotWaterPressureDrop (const HotWaterPressureDrop_optional& x);

        // Inclination
        //
        typedef ::xml_schema::double_ Inclination_type;
        typedef ::xsd::cxx::tree::optional< Inclination_type > Inclination_optional;
        typedef ::xsd::cxx::tree::traits< Inclination_type, char, ::xsd::cxx::tree::schema_type::double_ > Inclination_traits;

        const Inclination_optional&
        Inclination () const;

        Inclination_optional&
        Inclination ();

        void
        Inclination (const Inclination_type& x);

        void
        Inclination (const Inclination_optional& x);

        // InletDiameter
        //
        typedef ::xml_schema::double_ InletDiameter_type;
        typedef ::xsd::cxx::tree::optional< InletDiameter_type > InletDiameter_optional;
        typedef ::xsd::cxx::tree::traits< InletDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > InletDiameter_traits;

        const InletDiameter_optional&
        InletDiameter () const;

        InletDiameter_optional&
        InletDiameter ();

        void
        InletDiameter (const InletDiameter_type& x);

        void
        InletDiameter (const InletDiameter_optional& x);

        // InletRadius
        //
        typedef ::xml_schema::double_ InletRadius_type;
        typedef ::xsd::cxx::tree::optional< InletRadius_type > InletRadius_optional;
        typedef ::xsd::cxx::tree::traits< InletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > InletRadius_traits;

        const InletRadius_optional&
        InletRadius () const;

        InletRadius_optional&
        InletRadius ();

        void
        InletRadius (const InletRadius_type& x);

        void
        InletRadius (const InletRadius_optional& x);

        // Length1
        //
        typedef ::xml_schema::double_ Length1_type;
        typedef ::xsd::cxx::tree::optional< Length1_type > Length1_optional;
        typedef ::xsd::cxx::tree::traits< Length1_type, char, ::xsd::cxx::tree::schema_type::double_ > Length1_traits;

        const Length1_optional&
        Length1 () const;

        Length1_optional&
        Length1 ();

        void
        Length1 (const Length1_type& x);

        void
        Length1 (const Length1_optional& x);

        // Length2
        //
        typedef ::xml_schema::double_ Length2_type;
        typedef ::xsd::cxx::tree::optional< Length2_type > Length2_optional;
        typedef ::xsd::cxx::tree::traits< Length2_type, char, ::xsd::cxx::tree::schema_type::double_ > Length2_traits;

        const Length2_optional&
        Length2 () const;

        Length2_optional&
        Length2 ();

        void
        Length2 (const Length2_type& x);

        void
        Length2 (const Length2_optional& x);

        // Length3
        //
        typedef ::xml_schema::double_ Length3_type;
        typedef ::xsd::cxx::tree::optional< Length3_type > Length3_optional;
        typedef ::xsd::cxx::tree::traits< Length3_type, char, ::xsd::cxx::tree::schema_type::double_ > Length3_traits;

        const Length3_optional&
        Length3 () const;

        Length3_optional&
        Length3 ();

        void
        Length3 (const Length3_type& x);

        void
        Length3 (const Length3_optional& x);

        // Length4
        //
        typedef ::xml_schema::double_ Length4_type;
        typedef ::xsd::cxx::tree::optional< Length4_type > Length4_optional;
        typedef ::xsd::cxx::tree::traits< Length4_type, char, ::xsd::cxx::tree::schema_type::double_ > Length4_traits;

        const Length4_optional&
        Length4 () const;

        Length4_optional&
        Length4 ();

        void
        Length4 (const Length4_type& x);

        void
        Length4 (const Length4_optional& x);

        // Length5
        //
        typedef ::xml_schema::double_ Length5_type;
        typedef ::xsd::cxx::tree::optional< Length5_type > Length5_optional;
        typedef ::xsd::cxx::tree::traits< Length5_type, char, ::xsd::cxx::tree::schema_type::double_ > Length5_traits;

        const Length5_optional&
        Length5 () const;

        Length5_optional&
        Length5 ();

        void
        Length5 (const Length5_type& x);

        void
        Length5 (const Length5_optional& x);

        // Length6
        //
        typedef ::xml_schema::double_ Length6_type;
        typedef ::xsd::cxx::tree::optional< Length6_type > Length6_optional;
        typedef ::xsd::cxx::tree::traits< Length6_type, char, ::xsd::cxx::tree::schema_type::double_ > Length6_traits;

        const Length6_optional&
        Length6 () const;

        Length6_optional&
        Length6 ();

        void
        Length6 (const Length6_type& x);

        void
        Length6 (const Length6_optional& x);

        // Length7
        //
        typedef ::xml_schema::double_ Length7_type;
        typedef ::xsd::cxx::tree::optional< Length7_type > Length7_optional;
        typedef ::xsd::cxx::tree::traits< Length7_type, char, ::xsd::cxx::tree::schema_type::double_ > Length7_traits;

        const Length7_optional&
        Length7 () const;

        Length7_optional&
        Length7 ();

        void
        Length7 (const Length7_type& x);

        void
        Length7 (const Length7_optional& x);

        // Length8
        //
        typedef ::xml_schema::double_ Length8_type;
        typedef ::xsd::cxx::tree::optional< Length8_type > Length8_optional;
        typedef ::xsd::cxx::tree::traits< Length8_type, char, ::xsd::cxx::tree::schema_type::double_ > Length8_traits;

        const Length8_optional&
        Length8 () const;

        Length8_optional&
        Length8 ();

        void
        Length8 (const Length8_type& x);

        void
        Length8 (const Length8_optional& x);

        // Length9
        //
        typedef ::xml_schema::double_ Length9_type;
        typedef ::xsd::cxx::tree::optional< Length9_type > Length9_optional;
        typedef ::xsd::cxx::tree::traits< Length9_type, char, ::xsd::cxx::tree::schema_type::double_ > Length9_traits;

        const Length9_optional&
        Length9 () const;

        Length9_optional&
        Length9 ();

        void
        Length9 (const Length9_type& x);

        void
        Length9 (const Length9_optional& x);

        // Length10
        //
        typedef ::xml_schema::double_ Length10_type;
        typedef ::xsd::cxx::tree::optional< Length10_type > Length10_optional;
        typedef ::xsd::cxx::tree::traits< Length10_type, char, ::xsd::cxx::tree::schema_type::double_ > Length10_traits;

        const Length10_optional&
        Length10 () const;

        Length10_optional&
        Length10 ();

        void
        Length10 (const Length10_type& x);

        void
        Length10 (const Length10_optional& x);

        // Length11
        //
        typedef ::xml_schema::double_ Length11_type;
        typedef ::xsd::cxx::tree::optional< Length11_type > Length11_optional;
        typedef ::xsd::cxx::tree::traits< Length11_type, char, ::xsd::cxx::tree::schema_type::double_ > Length11_traits;

        const Length11_optional&
        Length11 () const;

        Length11_optional&
        Length11 ();

        void
        Length11 (const Length11_type& x);

        void
        Length11 (const Length11_optional& x);

        // Length12
        //
        typedef ::xml_schema::double_ Length12_type;
        typedef ::xsd::cxx::tree::optional< Length12_type > Length12_optional;
        typedef ::xsd::cxx::tree::traits< Length12_type, char, ::xsd::cxx::tree::schema_type::double_ > Length12_traits;

        const Length12_optional&
        Length12 () const;

        Length12_optional&
        Length12 ();

        void
        Length12 (const Length12_type& x);

        void
        Length12 (const Length12_optional& x);

        // Length13
        //
        typedef ::xml_schema::double_ Length13_type;
        typedef ::xsd::cxx::tree::optional< Length13_type > Length13_optional;
        typedef ::xsd::cxx::tree::traits< Length13_type, char, ::xsd::cxx::tree::schema_type::double_ > Length13_traits;

        const Length13_optional&
        Length13 () const;

        Length13_optional&
        Length13 ();

        void
        Length13 (const Length13_type& x);

        void
        Length13 (const Length13_optional& x);

        // Level
        //
        typedef ::xml_schema::string Level_type;
        typedef ::xsd::cxx::tree::optional< Level_type > Level_optional;
        typedef ::xsd::cxx::tree::traits< Level_type, char > Level_traits;

        const Level_optional&
        Level () const;

        Level_optional&
        Level ();

        void
        Level (const Level_type& x);

        void
        Level (const Level_optional& x);

        void
        Level (::std::auto_ptr< Level_type > p);

        // LoadClassification
        //
        typedef ::xml_schema::string LoadClassification_type;
        typedef ::xsd::cxx::tree::optional< LoadClassification_type > LoadClassification_optional;
        typedef ::xsd::cxx::tree::traits< LoadClassification_type, char > LoadClassification_traits;

        const LoadClassification_optional&
        LoadClassification () const;

        LoadClassification_optional&
        LoadClassification ();

        void
        LoadClassification (const LoadClassification_type& x);

        void
        LoadClassification (const LoadClassification_optional& x);

        void
        LoadClassification (::std::auto_ptr< LoadClassification_type > p);

        // MakeUpWaterFlow
        //
        typedef ::xml_schema::double_ MakeUpWaterFlow_type;
        typedef ::xsd::cxx::tree::optional< MakeUpWaterFlow_type > MakeUpWaterFlow_optional;
        typedef ::xsd::cxx::tree::traits< MakeUpWaterFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > MakeUpWaterFlow_traits;

        const MakeUpWaterFlow_optional&
        MakeUpWaterFlow () const;

        MakeUpWaterFlow_optional&
        MakeUpWaterFlow ();

        void
        MakeUpWaterFlow (const MakeUpWaterFlow_type& x);

        void
        MakeUpWaterFlow (const MakeUpWaterFlow_optional& x);

        // MakeUpWaterPressureDrop
        //
        typedef ::xml_schema::double_ MakeUpWaterPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< MakeUpWaterPressureDrop_type > MakeUpWaterPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< MakeUpWaterPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > MakeUpWaterPressureDrop_traits;

        const MakeUpWaterPressureDrop_optional&
        MakeUpWaterPressureDrop () const;

        MakeUpWaterPressureDrop_optional&
        MakeUpWaterPressureDrop ();

        void
        MakeUpWaterPressureDrop (const MakeUpWaterPressureDrop_type& x);

        void
        MakeUpWaterPressureDrop (const MakeUpWaterPressureDrop_optional& x);

        // MakeUpWaterRadius
        //
        typedef ::xml_schema::double_ MakeUpWaterRadius_type;
        typedef ::xsd::cxx::tree::optional< MakeUpWaterRadius_type > MakeUpWaterRadius_optional;
        typedef ::xsd::cxx::tree::traits< MakeUpWaterRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > MakeUpWaterRadius_traits;

        const MakeUpWaterRadius_optional&
        MakeUpWaterRadius () const;

        MakeUpWaterRadius_optional&
        MakeUpWaterRadius ();

        void
        MakeUpWaterRadius (const MakeUpWaterRadius_type& x);

        void
        MakeUpWaterRadius (const MakeUpWaterRadius_optional& x);

        // ManufacturerArticleNumber
        //
        typedef ::xml_schema::string ManufacturerArticleNumber_type;
        typedef ::xsd::cxx::tree::optional< ManufacturerArticleNumber_type > ManufacturerArticleNumber_optional;
        typedef ::xsd::cxx::tree::traits< ManufacturerArticleNumber_type, char > ManufacturerArticleNumber_traits;

        const ManufacturerArticleNumber_optional&
        ManufacturerArticleNumber () const;

        ManufacturerArticleNumber_optional&
        ManufacturerArticleNumber ();

        void
        ManufacturerArticleNumber (const ManufacturerArticleNumber_type& x);

        void
        ManufacturerArticleNumber (const ManufacturerArticleNumber_optional& x);

        void
        ManufacturerArticleNumber (::std::auto_ptr< ManufacturerArticleNumber_type > p);

        // ManufacturerModelName
        //
        typedef ::xml_schema::string ManufacturerModelName_type;
        typedef ::xsd::cxx::tree::optional< ManufacturerModelName_type > ManufacturerModelName_optional;
        typedef ::xsd::cxx::tree::traits< ManufacturerModelName_type, char > ManufacturerModelName_traits;

        const ManufacturerModelName_optional&
        ManufacturerModelName () const;

        ManufacturerModelName_optional&
        ManufacturerModelName ();

        void
        ManufacturerModelName (const ManufacturerModelName_type& x);

        void
        ManufacturerModelName (const ManufacturerModelName_optional& x);

        void
        ManufacturerModelName (::std::auto_ptr< ManufacturerModelName_type > p);

        // ManufacturerModelNumber
        //
        typedef ::xml_schema::string ManufacturerModelNumber_type;
        typedef ::xsd::cxx::tree::optional< ManufacturerModelNumber_type > ManufacturerModelNumber_optional;
        typedef ::xsd::cxx::tree::traits< ManufacturerModelNumber_type, char > ManufacturerModelNumber_traits;

        const ManufacturerModelNumber_optional&
        ManufacturerModelNumber () const;

        ManufacturerModelNumber_optional&
        ManufacturerModelNumber ();

        void
        ManufacturerModelNumber (const ManufacturerModelNumber_type& x);

        void
        ManufacturerModelNumber (const ManufacturerModelNumber_optional& x);

        void
        ManufacturerModelNumber (::std::auto_ptr< ManufacturerModelNumber_type > p);

        // ManufacturerName
        //
        typedef ::xml_schema::string ManufacturerName_type;
        typedef ::xsd::cxx::tree::optional< ManufacturerName_type > ManufacturerName_optional;
        typedef ::xsd::cxx::tree::traits< ManufacturerName_type, char > ManufacturerName_traits;

        const ManufacturerName_optional&
        ManufacturerName () const;

        ManufacturerName_optional&
        ManufacturerName ();

        void
        ManufacturerName (const ManufacturerName_type& x);

        void
        ManufacturerName (const ManufacturerName_optional& x);

        void
        ManufacturerName (::std::auto_ptr< ManufacturerName_type > p);

        // ManufacturerYearofProduction
        //
        typedef ::xml_schema::string ManufacturerYearofProduction_type;
        typedef ::xsd::cxx::tree::optional< ManufacturerYearofProduction_type > ManufacturerYearofProduction_optional;
        typedef ::xsd::cxx::tree::traits< ManufacturerYearofProduction_type, char > ManufacturerYearofProduction_traits;

        const ManufacturerYearofProduction_optional&
        ManufacturerYearofProduction () const;

        ManufacturerYearofProduction_optional&
        ManufacturerYearofProduction ();

        void
        ManufacturerYearofProduction (const ManufacturerYearofProduction_type& x);

        void
        ManufacturerYearofProduction (const ManufacturerYearofProduction_optional& x);

        void
        ManufacturerYearofProduction (::std::auto_ptr< ManufacturerYearofProduction_type > p);

        // Mark
        //
        typedef ::xml_schema::string Mark_type;
        typedef ::xsd::cxx::tree::optional< Mark_type > Mark_optional;
        typedef ::xsd::cxx::tree::traits< Mark_type, char > Mark_traits;

        const Mark_optional&
        Mark () const;

        Mark_optional&
        Mark ();

        void
        Mark (const Mark_type& x);

        void
        Mark (const Mark_optional& x);

        void
        Mark (::std::auto_ptr< Mark_type > p);

        // Material
        //
        typedef ::xml_schema::string Material_type;
        typedef ::xsd::cxx::tree::optional< Material_type > Material_optional;
        typedef ::xsd::cxx::tree::traits< Material_type, char > Material_traits;

        const Material_optional&
        Material () const;

        Material_optional&
        Material ();

        void
        Material (const Material_type& x);

        void
        Material (const Material_optional& x);

        void
        Material (::std::auto_ptr< Material_type > p);

        // Max1PoleBreakers
        //
        typedef ::xml_schema::int_ Max1PoleBreakers_type;
        typedef ::xsd::cxx::tree::optional< Max1PoleBreakers_type > Max1PoleBreakers_optional;
        typedef ::xsd::cxx::tree::traits< Max1PoleBreakers_type, char > Max1PoleBreakers_traits;

        const Max1PoleBreakers_optional&
        Max1PoleBreakers () const;

        Max1PoleBreakers_optional&
        Max1PoleBreakers ();

        void
        Max1PoleBreakers (const Max1PoleBreakers_type& x);

        void
        Max1PoleBreakers (const Max1PoleBreakers_optional& x);

        // MaxFlow
        //
        typedef ::xml_schema::double_ MaxFlow_type;
        typedef ::xsd::cxx::tree::optional< MaxFlow_type > MaxFlow_optional;
        typedef ::xsd::cxx::tree::traits< MaxFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > MaxFlow_traits;

        const MaxFlow_optional&
        MaxFlow () const;

        MaxFlow_optional&
        MaxFlow ();

        void
        MaxFlow (const MaxFlow_type& x);

        void
        MaxFlow (const MaxFlow_optional& x);

        // MinFlow
        //
        typedef ::xml_schema::double_ MinFlow_type;
        typedef ::xsd::cxx::tree::optional< MinFlow_type > MinFlow_optional;
        typedef ::xsd::cxx::tree::traits< MinFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > MinFlow_traits;

        const MinFlow_optional&
        MinFlow () const;

        MinFlow_optional&
        MinFlow ();

        void
        MinFlow (const MinFlow_type& x);

        void
        MinFlow (const MinFlow_optional& x);

        // Model
        //
        typedef ::xml_schema::string Model_type;
        typedef ::xsd::cxx::tree::optional< Model_type > Model_optional;
        typedef ::xsd::cxx::tree::traits< Model_type, char > Model_traits;

        const Model_optional&
        Model () const;

        Model_optional&
        Model ();

        void
        Model (const Model_type& x);

        void
        Model (const Model_optional& x);

        void
        Model (::std::auto_ptr< Model_type > p);

        // MotorHP
        //
        typedef ::xml_schema::double_ MotorHP_type;
        typedef ::xsd::cxx::tree::optional< MotorHP_type > MotorHP_optional;
        typedef ::xsd::cxx::tree::traits< MotorHP_type, char, ::xsd::cxx::tree::schema_type::double_ > MotorHP_traits;

        const MotorHP_optional&
        MotorHP () const;

        MotorHP_optional&
        MotorHP ();

        void
        MotorHP (const MotorHP_type& x);

        void
        MotorHP (const MotorHP_optional& x);

        // NumberOfFans
        //
        typedef ::xml_schema::double_ NumberOfFans_type;
        typedef ::xsd::cxx::tree::optional< NumberOfFans_type > NumberOfFans_optional;
        typedef ::xsd::cxx::tree::traits< NumberOfFans_type, char, ::xsd::cxx::tree::schema_type::double_ > NumberOfFans_traits;

        const NumberOfFans_optional&
        NumberOfFans () const;

        NumberOfFans_optional&
        NumberOfFans ();

        void
        NumberOfFans (const NumberOfFans_type& x);

        void
        NumberOfFans (const NumberOfFans_optional& x);

        // NumberOfPoles
        //
        typedef ::xml_schema::int_ NumberOfPoles_type;
        typedef ::xsd::cxx::tree::optional< NumberOfPoles_type > NumberOfPoles_optional;
        typedef ::xsd::cxx::tree::traits< NumberOfPoles_type, char > NumberOfPoles_traits;

        const NumberOfPoles_optional&
        NumberOfPoles () const;

        NumberOfPoles_optional&
        NumberOfPoles ();

        void
        NumberOfPoles (const NumberOfPoles_type& x);

        void
        NumberOfPoles (const NumberOfPoles_optional& x);

        // ObjectClassName
        //
        typedef ::xml_schema::string ObjectClassName_type;
        typedef ::xsd::cxx::tree::optional< ObjectClassName_type > ObjectClassName_optional;
        typedef ::xsd::cxx::tree::traits< ObjectClassName_type, char > ObjectClassName_traits;

        const ObjectClassName_optional&
        ObjectClassName () const;

        ObjectClassName_optional&
        ObjectClassName ();

        void
        ObjectClassName (const ObjectClassName_type& x);

        void
        ObjectClassName (const ObjectClassName_optional& x);

        void
        ObjectClassName (::std::auto_ptr< ObjectClassName_type > p);

        // Offset
        //
        typedef ::xml_schema::double_ Offset_type;
        typedef ::xsd::cxx::tree::optional< Offset_type > Offset_optional;
        typedef ::xsd::cxx::tree::traits< Offset_type, char, ::xsd::cxx::tree::schema_type::double_ > Offset_traits;

        const Offset_optional&
        Offset () const;

        Offset_optional&
        Offset ();

        void
        Offset (const Offset_type& x);

        void
        Offset (const Offset_optional& x);

        // OmniclassNumber
        //
        typedef ::xml_schema::string OmniclassNumber_type;
        typedef ::xsd::cxx::tree::optional< OmniclassNumber_type > OmniclassNumber_optional;
        typedef ::xsd::cxx::tree::traits< OmniclassNumber_type, char > OmniclassNumber_traits;

        const OmniclassNumber_optional&
        OmniclassNumber () const;

        OmniclassNumber_optional&
        OmniclassNumber ();

        void
        OmniclassNumber (const OmniclassNumber_type& x);

        void
        OmniclassNumber (const OmniclassNumber_optional& x);

        void
        OmniclassNumber (::std::auto_ptr< OmniclassNumber_type > p);

        // OmniclassTitle
        //
        typedef ::xml_schema::string OmniclassTitle_type;
        typedef ::xsd::cxx::tree::optional< OmniclassTitle_type > OmniclassTitle_optional;
        typedef ::xsd::cxx::tree::traits< OmniclassTitle_type, char > OmniclassTitle_traits;

        const OmniclassTitle_optional&
        OmniclassTitle () const;

        OmniclassTitle_optional&
        OmniclassTitle ();

        void
        OmniclassTitle (const OmniclassTitle_type& x);

        void
        OmniclassTitle (const OmniclassTitle_optional& x);

        void
        OmniclassTitle (::std::auto_ptr< OmniclassTitle_type > p);

        // OutletDiameter
        //
        typedef ::xml_schema::double_ OutletDiameter_type;
        typedef ::xsd::cxx::tree::optional< OutletDiameter_type > OutletDiameter_optional;
        typedef ::xsd::cxx::tree::traits< OutletDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > OutletDiameter_traits;

        const OutletDiameter_optional&
        OutletDiameter () const;

        OutletDiameter_optional&
        OutletDiameter ();

        void
        OutletDiameter (const OutletDiameter_type& x);

        void
        OutletDiameter (const OutletDiameter_optional& x);

        // OutletRadius
        //
        typedef ::xml_schema::double_ OutletRadius_type;
        typedef ::xsd::cxx::tree::optional< OutletRadius_type > OutletRadius_optional;
        typedef ::xsd::cxx::tree::traits< OutletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > OutletRadius_traits;

        const OutletRadius_optional&
        OutletRadius () const;

        OutletRadius_optional&
        OutletRadius ();

        void
        OutletRadius (const OutletRadius_type& x);

        void
        OutletRadius (const OutletRadius_optional& x);

        // OverallHeight
        //
        typedef ::xml_schema::double_ OverallHeight_type;
        typedef ::xsd::cxx::tree::optional< OverallHeight_type > OverallHeight_optional;
        typedef ::xsd::cxx::tree::traits< OverallHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > OverallHeight_traits;

        const OverallHeight_optional&
        OverallHeight () const;

        OverallHeight_optional&
        OverallHeight ();

        void
        OverallHeight (const OverallHeight_type& x);

        void
        OverallHeight (const OverallHeight_optional& x);

        // OverallLength
        //
        typedef ::xml_schema::double_ OverallLength_type;
        typedef ::xsd::cxx::tree::optional< OverallLength_type > OverallLength_optional;
        typedef ::xsd::cxx::tree::traits< OverallLength_type, char, ::xsd::cxx::tree::schema_type::double_ > OverallLength_traits;

        const OverallLength_optional&
        OverallLength () const;

        OverallLength_optional&
        OverallLength ();

        void
        OverallLength (const OverallLength_type& x);

        void
        OverallLength (const OverallLength_optional& x);

        // OverallWidth
        //
        typedef ::xml_schema::double_ OverallWidth_type;
        typedef ::xsd::cxx::tree::optional< OverallWidth_type > OverallWidth_optional;
        typedef ::xsd::cxx::tree::traits< OverallWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > OverallWidth_traits;

        const OverallWidth_optional&
        OverallWidth () const;

        OverallWidth_optional&
        OverallWidth ();

        void
        OverallWidth (const OverallWidth_type& x);

        void
        OverallWidth (const OverallWidth_optional& x);

        // PanelHeight
        //
        typedef ::xml_schema::double_ PanelHeight_type;
        typedef ::xsd::cxx::tree::optional< PanelHeight_type > PanelHeight_optional;
        typedef ::xsd::cxx::tree::traits< PanelHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > PanelHeight_traits;

        const PanelHeight_optional&
        PanelHeight () const;

        PanelHeight_optional&
        PanelHeight ();

        void
        PanelHeight (const PanelHeight_type& x);

        void
        PanelHeight (const PanelHeight_optional& x);

        // Partshape
        //
        typedef ::xml_schema::string Partshape_type;
        typedef ::xsd::cxx::tree::optional< Partshape_type > Partshape_optional;
        typedef ::xsd::cxx::tree::traits< Partshape_type, char > Partshape_traits;

        const Partshape_optional&
        Partshape () const;

        Partshape_optional&
        Partshape ();

        void
        Partshape (const Partshape_type& x);

        void
        Partshape (const Partshape_optional& x);

        void
        Partshape (::std::auto_ptr< Partshape_type > p);

        // PhaseCreated
        //
        typedef ::xml_schema::string PhaseCreated_type;
        typedef ::xsd::cxx::tree::optional< PhaseCreated_type > PhaseCreated_optional;
        typedef ::xsd::cxx::tree::traits< PhaseCreated_type, char > PhaseCreated_traits;

        const PhaseCreated_optional&
        PhaseCreated () const;

        PhaseCreated_optional&
        PhaseCreated ();

        void
        PhaseCreated (const PhaseCreated_type& x);

        void
        PhaseCreated (const PhaseCreated_optional& x);

        void
        PhaseCreated (::std::auto_ptr< PhaseCreated_type > p);

        // PipeRadius
        //
        typedef ::xml_schema::double_ PipeRadius_type;
        typedef ::xsd::cxx::tree::optional< PipeRadius_type > PipeRadius_optional;
        typedef ::xsd::cxx::tree::traits< PipeRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > PipeRadius_traits;

        const PipeRadius_optional&
        PipeRadius () const;

        PipeRadius_optional&
        PipeRadius ();

        void
        PipeRadius (const PipeRadius_type& x);

        void
        PipeRadius (const PipeRadius_optional& x);

        // PrimaryNumberofPoles
        //
        typedef ::xml_schema::int_ PrimaryNumberofPoles_type;
        typedef ::xsd::cxx::tree::optional< PrimaryNumberofPoles_type > PrimaryNumberofPoles_optional;
        typedef ::xsd::cxx::tree::traits< PrimaryNumberofPoles_type, char > PrimaryNumberofPoles_traits;

        const PrimaryNumberofPoles_optional&
        PrimaryNumberofPoles () const;

        PrimaryNumberofPoles_optional&
        PrimaryNumberofPoles ();

        void
        PrimaryNumberofPoles (const PrimaryNumberofPoles_type& x);

        void
        PrimaryNumberofPoles (const PrimaryNumberofPoles_optional& x);

        // PrimaryVoltage
        //
        typedef ::xml_schema::double_ PrimaryVoltage_type;
        typedef ::xsd::cxx::tree::optional< PrimaryVoltage_type > PrimaryVoltage_optional;
        typedef ::xsd::cxx::tree::traits< PrimaryVoltage_type, char, ::xsd::cxx::tree::schema_type::double_ > PrimaryVoltage_traits;

        const PrimaryVoltage_optional&
        PrimaryVoltage () const;

        PrimaryVoltage_optional&
        PrimaryVoltage ();

        void
        PrimaryVoltage (const PrimaryVoltage_type& x);

        void
        PrimaryVoltage (const PrimaryVoltage_optional& x);

        // PumpHeight
        //
        typedef ::xml_schema::double_ PumpHeight_type;
        typedef ::xsd::cxx::tree::optional< PumpHeight_type > PumpHeight_optional;
        typedef ::xsd::cxx::tree::traits< PumpHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > PumpHeight_traits;

        const PumpHeight_optional&
        PumpHeight () const;

        PumpHeight_optional&
        PumpHeight ();

        void
        PumpHeight (const PumpHeight_type& x);

        void
        PumpHeight (const PumpHeight_optional& x);

        // PumpLength
        //
        typedef ::xml_schema::double_ PumpLength_type;
        typedef ::xsd::cxx::tree::optional< PumpLength_type > PumpLength_optional;
        typedef ::xsd::cxx::tree::traits< PumpLength_type, char, ::xsd::cxx::tree::schema_type::double_ > PumpLength_traits;

        const PumpLength_optional&
        PumpLength () const;

        PumpLength_optional&
        PumpLength ();

        void
        PumpLength (const PumpLength_type& x);

        void
        PumpLength (const PumpLength_optional& x);

        // PumpWidth
        //
        typedef ::xml_schema::double_ PumpWidth_type;
        typedef ::xsd::cxx::tree::optional< PumpWidth_type > PumpWidth_optional;
        typedef ::xsd::cxx::tree::traits< PumpWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > PumpWidth_traits;

        const PumpWidth_optional&
        PumpWidth () const;

        PumpWidth_optional&
        PumpWidth ();

        void
        PumpWidth (const PumpWidth_type& x);

        void
        PumpWidth (const PumpWidth_optional& x);

        // Radius1
        //
        typedef ::xml_schema::double_ Radius1_type;
        typedef ::xsd::cxx::tree::optional< Radius1_type > Radius1_optional;
        typedef ::xsd::cxx::tree::traits< Radius1_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius1_traits;

        const Radius1_optional&
        Radius1 () const;

        Radius1_optional&
        Radius1 ();

        void
        Radius1 (const Radius1_type& x);

        void
        Radius1 (const Radius1_optional& x);

        // Radius2
        //
        typedef ::xml_schema::double_ Radius2_type;
        typedef ::xsd::cxx::tree::optional< Radius2_type > Radius2_optional;
        typedef ::xsd::cxx::tree::traits< Radius2_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius2_traits;

        const Radius2_optional&
        Radius2 () const;

        Radius2_optional&
        Radius2 ();

        void
        Radius2 (const Radius2_type& x);

        void
        Radius2 (const Radius2_optional& x);

        // Radius3
        //
        typedef ::xml_schema::double_ Radius3_type;
        typedef ::xsd::cxx::tree::optional< Radius3_type > Radius3_optional;
        typedef ::xsd::cxx::tree::traits< Radius3_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius3_traits;

        const Radius3_optional&
        Radius3 () const;

        Radius3_optional&
        Radius3 ();

        void
        Radius3 (const Radius3_type& x);

        void
        Radius3 (const Radius3_optional& x);

        // Radius4
        //
        typedef ::xml_schema::double_ Radius4_type;
        typedef ::xsd::cxx::tree::optional< Radius4_type > Radius4_optional;
        typedef ::xsd::cxx::tree::traits< Radius4_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius4_traits;

        const Radius4_optional&
        Radius4 () const;

        Radius4_optional&
        Radius4 ();

        void
        Radius4 (const Radius4_type& x);

        void
        Radius4 (const Radius4_optional& x);

        // Radius5
        //
        typedef ::xml_schema::double_ Radius5_type;
        typedef ::xsd::cxx::tree::optional< Radius5_type > Radius5_optional;
        typedef ::xsd::cxx::tree::traits< Radius5_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius5_traits;

        const Radius5_optional&
        Radius5 () const;

        Radius5_optional&
        Radius5 ();

        void
        Radius5 (const Radius5_type& x);

        void
        Radius5 (const Radius5_optional& x);

        // Radius6
        //
        typedef ::xml_schema::double_ Radius6_type;
        typedef ::xsd::cxx::tree::optional< Radius6_type > Radius6_optional;
        typedef ::xsd::cxx::tree::traits< Radius6_type, char, ::xsd::cxx::tree::schema_type::double_ > Radius6_traits;

        const Radius6_optional&
        Radius6 () const;

        Radius6_optional&
        Radius6 ();

        void
        Radius6 (const Radius6_type& x);

        void
        Radius6 (const Radius6_optional& x);

        // Reference
        //
        typedef ::xml_schema::string Reference_type;
        typedef ::xsd::cxx::tree::optional< Reference_type > Reference_optional;
        typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

        const Reference_optional&
        Reference () const;

        Reference_optional&
        Reference ();

        void
        Reference (const Reference_type& x);

        void
        Reference (const Reference_optional& x);

        void
        Reference (::std::auto_ptr< Reference_type > p);

        // Reflectance
        //
        typedef ::xml_schema::double_ Reflectance_type;
        typedef ::xsd::cxx::tree::optional< Reflectance_type > Reflectance_optional;
        typedef ::xsd::cxx::tree::traits< Reflectance_type, char, ::xsd::cxx::tree::schema_type::double_ > Reflectance_traits;

        const Reflectance_optional&
        Reflectance () const;

        Reflectance_optional&
        Reflectance ();

        void
        Reflectance (const Reflectance_type& x);

        void
        Reflectance (const Reflectance_optional& x);

        // ReturnAirInletFlow
        //
        typedef ::xml_schema::double_ ReturnAirInletFlow_type;
        typedef ::xsd::cxx::tree::optional< ReturnAirInletFlow_type > ReturnAirInletFlow_optional;
        typedef ::xsd::cxx::tree::traits< ReturnAirInletFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnAirInletFlow_traits;

        const ReturnAirInletFlow_optional&
        ReturnAirInletFlow () const;

        ReturnAirInletFlow_optional&
        ReturnAirInletFlow ();

        void
        ReturnAirInletFlow (const ReturnAirInletFlow_type& x);

        void
        ReturnAirInletFlow (const ReturnAirInletFlow_optional& x);

        // ReturnAirInletHeight
        //
        typedef ::xml_schema::double_ ReturnAirInletHeight_type;
        typedef ::xsd::cxx::tree::optional< ReturnAirInletHeight_type > ReturnAirInletHeight_optional;
        typedef ::xsd::cxx::tree::traits< ReturnAirInletHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnAirInletHeight_traits;

        const ReturnAirInletHeight_optional&
        ReturnAirInletHeight () const;

        ReturnAirInletHeight_optional&
        ReturnAirInletHeight ();

        void
        ReturnAirInletHeight (const ReturnAirInletHeight_type& x);

        void
        ReturnAirInletHeight (const ReturnAirInletHeight_optional& x);

        // ReturnAirInletWidth
        //
        typedef ::xml_schema::double_ ReturnAirInletWidth_type;
        typedef ::xsd::cxx::tree::optional< ReturnAirInletWidth_type > ReturnAirInletWidth_optional;
        typedef ::xsd::cxx::tree::traits< ReturnAirInletWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnAirInletWidth_traits;

        const ReturnAirInletWidth_optional&
        ReturnAirInletWidth () const;

        ReturnAirInletWidth_optional&
        ReturnAirInletWidth ();

        void
        ReturnAirInletWidth (const ReturnAirInletWidth_type& x);

        void
        ReturnAirInletWidth (const ReturnAirInletWidth_optional& x);

        // ReturnDuctHeight
        //
        typedef ::xml_schema::double_ ReturnDuctHeight_type;
        typedef ::xsd::cxx::tree::optional< ReturnDuctHeight_type > ReturnDuctHeight_optional;
        typedef ::xsd::cxx::tree::traits< ReturnDuctHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnDuctHeight_traits;

        const ReturnDuctHeight_optional&
        ReturnDuctHeight () const;

        ReturnDuctHeight_optional&
        ReturnDuctHeight ();

        void
        ReturnDuctHeight (const ReturnDuctHeight_type& x);

        void
        ReturnDuctHeight (const ReturnDuctHeight_optional& x);

        // ReturnDuctWidth
        //
        typedef ::xml_schema::double_ ReturnDuctWidth_type;
        typedef ::xsd::cxx::tree::optional< ReturnDuctWidth_type > ReturnDuctWidth_optional;
        typedef ::xsd::cxx::tree::traits< ReturnDuctWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnDuctWidth_traits;

        const ReturnDuctWidth_optional&
        ReturnDuctWidth () const;

        ReturnDuctWidth_optional&
        ReturnDuctWidth ();

        void
        ReturnDuctWidth (const ReturnDuctWidth_type& x);

        void
        ReturnDuctWidth (const ReturnDuctWidth_optional& x);

        // Returnheight
        //
        typedef ::xml_schema::double_ Returnheight_type;
        typedef ::xsd::cxx::tree::optional< Returnheight_type > Returnheight_optional;
        typedef ::xsd::cxx::tree::traits< Returnheight_type, char, ::xsd::cxx::tree::schema_type::double_ > Returnheight_traits;

        const Returnheight_optional&
        Returnheight () const;

        Returnheight_optional&
        Returnheight ();

        void
        Returnheight (const Returnheight_type& x);

        void
        Returnheight (const Returnheight_optional& x);

        // Returnwidth
        //
        typedef ::xml_schema::double_ Returnwidth_type;
        typedef ::xsd::cxx::tree::optional< Returnwidth_type > Returnwidth_optional;
        typedef ::xsd::cxx::tree::traits< Returnwidth_type, char, ::xsd::cxx::tree::schema_type::double_ > Returnwidth_traits;

        const Returnwidth_optional&
        Returnwidth () const;

        Returnwidth_optional&
        Returnwidth ();

        void
        Returnwidth (const Returnwidth_type& x);

        void
        Returnwidth (const Returnwidth_optional& x);

        // ReturnY_Offset
        //
        typedef ::xml_schema::double_ ReturnY_Offset_type;
        typedef ::xsd::cxx::tree::optional< ReturnY_Offset_type > ReturnY_Offset_optional;
        typedef ::xsd::cxx::tree::traits< ReturnY_Offset_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnY_Offset_traits;

        const ReturnY_Offset_optional&
        ReturnY_Offset () const;

        ReturnY_Offset_optional&
        ReturnY_Offset ();

        void
        ReturnY_Offset (const ReturnY_Offset_type& x);

        void
        ReturnY_Offset (const ReturnY_Offset_optional& x);

        // ReturnZ_Offset
        //
        typedef ::xml_schema::double_ ReturnZ_Offset_type;
        typedef ::xsd::cxx::tree::optional< ReturnZ_Offset_type > ReturnZ_Offset_optional;
        typedef ::xsd::cxx::tree::traits< ReturnZ_Offset_type, char, ::xsd::cxx::tree::schema_type::double_ > ReturnZ_Offset_traits;

        const ReturnZ_Offset_optional&
        ReturnZ_Offset () const;

        ReturnZ_Offset_optional&
        ReturnZ_Offset ();

        void
        ReturnZ_Offset (const ReturnZ_Offset_type& x);

        void
        ReturnZ_Offset (const ReturnZ_Offset_optional& x);

        // Roughness
        //
        typedef ::xml_schema::double_ Roughness_type;
        typedef ::xsd::cxx::tree::optional< Roughness_type > Roughness_optional;
        typedef ::xsd::cxx::tree::traits< Roughness_type, char, ::xsd::cxx::tree::schema_type::double_ > Roughness_traits;

        const Roughness_optional&
        Roughness () const;

        Roughness_optional&
        Roughness ();

        void
        Roughness (const Roughness_type& x);

        void
        Roughness (const Roughness_optional& x);

        // ShadingDeviceType
        //
        typedef ::xml_schema::string ShadingDeviceType_type;
        typedef ::xsd::cxx::tree::optional< ShadingDeviceType_type > ShadingDeviceType_optional;
        typedef ::xsd::cxx::tree::traits< ShadingDeviceType_type, char > ShadingDeviceType_traits;

        const ShadingDeviceType_optional&
        ShadingDeviceType () const;

        ShadingDeviceType_optional&
        ShadingDeviceType ();

        void
        ShadingDeviceType (const ShadingDeviceType_type& x);

        void
        ShadingDeviceType (const ShadingDeviceType_optional& x);

        void
        ShadingDeviceType (::std::auto_ptr< ShadingDeviceType_type > p);

        // SupplyAirInletDiameter
        //
        typedef ::xml_schema::double_ SupplyAirInletDiameter_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirInletDiameter_type > SupplyAirInletDiameter_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirInletDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirInletDiameter_traits;

        const SupplyAirInletDiameter_optional&
        SupplyAirInletDiameter () const;

        SupplyAirInletDiameter_optional&
        SupplyAirInletDiameter ();

        void
        SupplyAirInletDiameter (const SupplyAirInletDiameter_type& x);

        void
        SupplyAirInletDiameter (const SupplyAirInletDiameter_optional& x);

        // SupplyAirInletFlow
        //
        typedef ::xml_schema::double_ SupplyAirInletFlow_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirInletFlow_type > SupplyAirInletFlow_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirInletFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirInletFlow_traits;

        const SupplyAirInletFlow_optional&
        SupplyAirInletFlow () const;

        SupplyAirInletFlow_optional&
        SupplyAirInletFlow ();

        void
        SupplyAirInletFlow (const SupplyAirInletFlow_type& x);

        void
        SupplyAirInletFlow (const SupplyAirInletFlow_optional& x);

        // SupplyAirInletHeight
        //
        typedef ::xml_schema::double_ SupplyAirInletHeight_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirInletHeight_type > SupplyAirInletHeight_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirInletHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirInletHeight_traits;

        const SupplyAirInletHeight_optional&
        SupplyAirInletHeight () const;

        SupplyAirInletHeight_optional&
        SupplyAirInletHeight ();

        void
        SupplyAirInletHeight (const SupplyAirInletHeight_type& x);

        void
        SupplyAirInletHeight (const SupplyAirInletHeight_optional& x);

        // SupplyAirInletRadius
        //
        typedef ::xml_schema::double_ SupplyAirInletRadius_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirInletRadius_type > SupplyAirInletRadius_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirInletRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirInletRadius_traits;

        const SupplyAirInletRadius_optional&
        SupplyAirInletRadius () const;

        SupplyAirInletRadius_optional&
        SupplyAirInletRadius ();

        void
        SupplyAirInletRadius (const SupplyAirInletRadius_type& x);

        void
        SupplyAirInletRadius (const SupplyAirInletRadius_optional& x);

        // SupplyAirInletWidth
        //
        typedef ::xml_schema::double_ SupplyAirInletWidth_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirInletWidth_type > SupplyAirInletWidth_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirInletWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirInletWidth_traits;

        const SupplyAirInletWidth_optional&
        SupplyAirInletWidth () const;

        SupplyAirInletWidth_optional&
        SupplyAirInletWidth ();

        void
        SupplyAirInletWidth (const SupplyAirInletWidth_type& x);

        void
        SupplyAirInletWidth (const SupplyAirInletWidth_optional& x);

        // SupplyAirOutletFlow
        //
        typedef ::xml_schema::double_ SupplyAirOutletFlow_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirOutletFlow_type > SupplyAirOutletFlow_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirOutletFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirOutletFlow_traits;

        const SupplyAirOutletFlow_optional&
        SupplyAirOutletFlow () const;

        SupplyAirOutletFlow_optional&
        SupplyAirOutletFlow ();

        void
        SupplyAirOutletFlow (const SupplyAirOutletFlow_type& x);

        void
        SupplyAirOutletFlow (const SupplyAirOutletFlow_optional& x);

        // SupplyAirOutletHeight
        //
        typedef ::xml_schema::double_ SupplyAirOutletHeight_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirOutletHeight_type > SupplyAirOutletHeight_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirOutletHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirOutletHeight_traits;

        const SupplyAirOutletHeight_optional&
        SupplyAirOutletHeight () const;

        SupplyAirOutletHeight_optional&
        SupplyAirOutletHeight ();

        void
        SupplyAirOutletHeight (const SupplyAirOutletHeight_type& x);

        void
        SupplyAirOutletHeight (const SupplyAirOutletHeight_optional& x);

        // SupplyAirOutletWidth
        //
        typedef ::xml_schema::double_ SupplyAirOutletWidth_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirOutletWidth_type > SupplyAirOutletWidth_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirOutletWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirOutletWidth_traits;

        const SupplyAirOutletWidth_optional&
        SupplyAirOutletWidth () const;

        SupplyAirOutletWidth_optional&
        SupplyAirOutletWidth ();

        void
        SupplyAirOutletWidth (const SupplyAirOutletWidth_type& x);

        void
        SupplyAirOutletWidth (const SupplyAirOutletWidth_optional& x);

        // SupplyAirPressureDrop
        //
        typedef ::xml_schema::double_ SupplyAirPressureDrop_type;
        typedef ::xsd::cxx::tree::optional< SupplyAirPressureDrop_type > SupplyAirPressureDrop_optional;
        typedef ::xsd::cxx::tree::traits< SupplyAirPressureDrop_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyAirPressureDrop_traits;

        const SupplyAirPressureDrop_optional&
        SupplyAirPressureDrop () const;

        SupplyAirPressureDrop_optional&
        SupplyAirPressureDrop ();

        void
        SupplyAirPressureDrop (const SupplyAirPressureDrop_type& x);

        void
        SupplyAirPressureDrop (const SupplyAirPressureDrop_optional& x);

        // SupplyDuctHeight
        //
        typedef ::xml_schema::double_ SupplyDuctHeight_type;
        typedef ::xsd::cxx::tree::optional< SupplyDuctHeight_type > SupplyDuctHeight_optional;
        typedef ::xsd::cxx::tree::traits< SupplyDuctHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyDuctHeight_traits;

        const SupplyDuctHeight_optional&
        SupplyDuctHeight () const;

        SupplyDuctHeight_optional&
        SupplyDuctHeight ();

        void
        SupplyDuctHeight (const SupplyDuctHeight_type& x);

        void
        SupplyDuctHeight (const SupplyDuctHeight_optional& x);

        // SupplyDuctWidth
        //
        typedef ::xml_schema::double_ SupplyDuctWidth_type;
        typedef ::xsd::cxx::tree::optional< SupplyDuctWidth_type > SupplyDuctWidth_optional;
        typedef ::xsd::cxx::tree::traits< SupplyDuctWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyDuctWidth_traits;

        const SupplyDuctWidth_optional&
        SupplyDuctWidth () const;

        SupplyDuctWidth_optional&
        SupplyDuctWidth ();

        void
        SupplyDuctWidth (const SupplyDuctWidth_type& x);

        void
        SupplyDuctWidth (const SupplyDuctWidth_optional& x);

        // Supplyheight
        //
        typedef ::xml_schema::double_ Supplyheight_type;
        typedef ::xsd::cxx::tree::optional< Supplyheight_type > Supplyheight_optional;
        typedef ::xsd::cxx::tree::traits< Supplyheight_type, char, ::xsd::cxx::tree::schema_type::double_ > Supplyheight_traits;

        const Supplyheight_optional&
        Supplyheight () const;

        Supplyheight_optional&
        Supplyheight ();

        void
        Supplyheight (const Supplyheight_type& x);

        void
        Supplyheight (const Supplyheight_optional& x);

        // Supplywidth
        //
        typedef ::xml_schema::double_ Supplywidth_type;
        typedef ::xsd::cxx::tree::optional< Supplywidth_type > Supplywidth_optional;
        typedef ::xsd::cxx::tree::traits< Supplywidth_type, char, ::xsd::cxx::tree::schema_type::double_ > Supplywidth_traits;

        const Supplywidth_optional&
        Supplywidth () const;

        Supplywidth_optional&
        Supplywidth ();

        void
        Supplywidth (const Supplywidth_type& x);

        void
        Supplywidth (const Supplywidth_optional& x);

        // Supply_ReturnSymbols
        //
        typedef ::xml_schema::boolean Supply_ReturnSymbols_type;
        typedef ::xsd::cxx::tree::optional< Supply_ReturnSymbols_type > Supply_ReturnSymbols_optional;
        typedef ::xsd::cxx::tree::traits< Supply_ReturnSymbols_type, char > Supply_ReturnSymbols_traits;

        const Supply_ReturnSymbols_optional&
        Supply_ReturnSymbols () const;

        Supply_ReturnSymbols_optional&
        Supply_ReturnSymbols ();

        void
        Supply_ReturnSymbols (const Supply_ReturnSymbols_type& x);

        void
        Supply_ReturnSymbols (const Supply_ReturnSymbols_optional& x);

        // SupplyY_Offset
        //
        typedef ::xml_schema::double_ SupplyY_Offset_type;
        typedef ::xsd::cxx::tree::optional< SupplyY_Offset_type > SupplyY_Offset_optional;
        typedef ::xsd::cxx::tree::traits< SupplyY_Offset_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyY_Offset_traits;

        const SupplyY_Offset_optional&
        SupplyY_Offset () const;

        SupplyY_Offset_optional&
        SupplyY_Offset ();

        void
        SupplyY_Offset (const SupplyY_Offset_type& x);

        void
        SupplyY_Offset (const SupplyY_Offset_optional& x);

        // SupplyZ_Offset
        //
        typedef ::xml_schema::double_ SupplyZ_Offset_type;
        typedef ::xsd::cxx::tree::optional< SupplyZ_Offset_type > SupplyZ_Offset_optional;
        typedef ::xsd::cxx::tree::traits< SupplyZ_Offset_type, char, ::xsd::cxx::tree::schema_type::double_ > SupplyZ_Offset_traits;

        const SupplyZ_Offset_optional&
        SupplyZ_Offset () const;

        SupplyZ_Offset_optional&
        SupplyZ_Offset ();

        void
        SupplyZ_Offset (const SupplyZ_Offset_type& x);

        void
        SupplyZ_Offset (const SupplyZ_Offset_optional& x);

        // SystemClassification
        //
        typedef ::xml_schema::string SystemClassification_type;
        typedef ::xsd::cxx::tree::optional< SystemClassification_type > SystemClassification_optional;
        typedef ::xsd::cxx::tree::traits< SystemClassification_type, char > SystemClassification_traits;

        const SystemClassification_optional&
        SystemClassification () const;

        SystemClassification_optional&
        SystemClassification ();

        void
        SystemClassification (const SystemClassification_type& x);

        void
        SystemClassification (const SystemClassification_optional& x);

        void
        SystemClassification (::std::auto_ptr< SystemClassification_type > p);

        // SystemName
        //
        typedef ::xml_schema::string SystemName_type;
        typedef ::xsd::cxx::tree::optional< SystemName_type > SystemName_optional;
        typedef ::xsd::cxx::tree::traits< SystemName_type, char > SystemName_traits;

        const SystemName_optional&
        SystemName () const;

        SystemName_optional&
        SystemName ();

        void
        SystemName (const SystemName_type& x);

        void
        SystemName (const SystemName_optional& x);

        void
        SystemName (::std::auto_ptr< SystemName_type > p);

        // TiltRange
        //
        typedef ::xml_schema::double_ TiltRange_type;
        typedef ::xsd::cxx::tree::optional< TiltRange_type > TiltRange_optional;
        typedef ::xsd::cxx::tree::traits< TiltRange_type, char, ::xsd::cxx::tree::schema_type::double_ > TiltRange_traits;

        const TiltRange_optional&
        TiltRange () const;

        TiltRange_optional&
        TiltRange ();

        void
        TiltRange (const TiltRange_type& x);

        void
        TiltRange (const TiltRange_optional& x);

        // TotalConnected
        //
        typedef ::xml_schema::double_ TotalConnected_type;
        typedef ::xsd::cxx::tree::optional< TotalConnected_type > TotalConnected_optional;
        typedef ::xsd::cxx::tree::traits< TotalConnected_type, char, ::xsd::cxx::tree::schema_type::double_ > TotalConnected_traits;

        const TotalConnected_optional&
        TotalConnected () const;

        TotalConnected_optional&
        TotalConnected ();

        void
        TotalConnected (const TotalConnected_type& x);

        void
        TotalConnected (const TotalConnected_optional& x);

        // TotalDemandFactor
        //
        typedef ::xml_schema::double_ TotalDemandFactor_type;
        typedef ::xsd::cxx::tree::optional< TotalDemandFactor_type > TotalDemandFactor_optional;
        typedef ::xsd::cxx::tree::traits< TotalDemandFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > TotalDemandFactor_traits;

        const TotalDemandFactor_optional&
        TotalDemandFactor () const;

        TotalDemandFactor_optional&
        TotalDemandFactor ();

        void
        TotalDemandFactor (const TotalDemandFactor_type& x);

        void
        TotalDemandFactor (const TotalDemandFactor_optional& x);

        // TotalEstimatedDemand
        //
        typedef ::xml_schema::double_ TotalEstimatedDemand_type;
        typedef ::xsd::cxx::tree::optional< TotalEstimatedDemand_type > TotalEstimatedDemand_optional;
        typedef ::xsd::cxx::tree::traits< TotalEstimatedDemand_type, char, ::xsd::cxx::tree::schema_type::double_ > TotalEstimatedDemand_traits;

        const TotalEstimatedDemand_optional&
        TotalEstimatedDemand () const;

        TotalEstimatedDemand_optional&
        TotalEstimatedDemand ();

        void
        TotalEstimatedDemand (const TotalEstimatedDemand_type& x);

        void
        TotalEstimatedDemand (const TotalEstimatedDemand_optional& x);

        // TowerHeight
        //
        typedef ::xml_schema::double_ TowerHeight_type;
        typedef ::xsd::cxx::tree::optional< TowerHeight_type > TowerHeight_optional;
        typedef ::xsd::cxx::tree::traits< TowerHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > TowerHeight_traits;

        const TowerHeight_optional&
        TowerHeight () const;

        TowerHeight_optional&
        TowerHeight ();

        void
        TowerHeight (const TowerHeight_type& x);

        void
        TowerHeight (const TowerHeight_optional& x);

        // TowerLength
        //
        typedef ::xml_schema::double_ TowerLength_type;
        typedef ::xsd::cxx::tree::optional< TowerLength_type > TowerLength_optional;
        typedef ::xsd::cxx::tree::traits< TowerLength_type, char, ::xsd::cxx::tree::schema_type::double_ > TowerLength_traits;

        const TowerLength_optional&
        TowerLength () const;

        TowerLength_optional&
        TowerLength ();

        void
        TowerLength (const TowerLength_type& x);

        void
        TowerLength (const TowerLength_optional& x);

        // TowerWidth
        //
        typedef ::xml_schema::double_ TowerWidth_type;
        typedef ::xsd::cxx::tree::optional< TowerWidth_type > TowerWidth_optional;
        typedef ::xsd::cxx::tree::traits< TowerWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > TowerWidth_traits;

        const TowerWidth_optional&
        TowerWidth () const;

        TowerWidth_optional&
        TowerWidth ();

        void
        TowerWidth (const TowerWidth_type& x);

        void
        TowerWidth (const TowerWidth_optional& x);

        // TransformerHeight
        //
        typedef ::xml_schema::double_ TransformerHeight_type;
        typedef ::xsd::cxx::tree::optional< TransformerHeight_type > TransformerHeight_optional;
        typedef ::xsd::cxx::tree::traits< TransformerHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > TransformerHeight_traits;

        const TransformerHeight_optional&
        TransformerHeight () const;

        TransformerHeight_optional&
        TransformerHeight ();

        void
        TransformerHeight (const TransformerHeight_type& x);

        void
        TransformerHeight (const TransformerHeight_optional& x);

        // TransformerLength
        //
        typedef ::xml_schema::double_ TransformerLength_type;
        typedef ::xsd::cxx::tree::optional< TransformerLength_type > TransformerLength_optional;
        typedef ::xsd::cxx::tree::traits< TransformerLength_type, char, ::xsd::cxx::tree::schema_type::double_ > TransformerLength_traits;

        const TransformerLength_optional&
        TransformerLength () const;

        TransformerLength_optional&
        TransformerLength ();

        void
        TransformerLength (const TransformerLength_type& x);

        void
        TransformerLength (const TransformerLength_optional& x);

        // TransformerWidth
        //
        typedef ::xml_schema::double_ TransformerWidth_type;
        typedef ::xsd::cxx::tree::optional< TransformerWidth_type > TransformerWidth_optional;
        typedef ::xsd::cxx::tree::traits< TransformerWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > TransformerWidth_traits;

        const TransformerWidth_optional&
        TransformerWidth () const;

        TransformerWidth_optional&
        TransformerWidth ();

        void
        TransformerWidth (const TransformerWidth_type& x);

        void
        TransformerWidth (const TransformerWidth_optional& x);

        // UniformatClassification
        //
        typedef ::xml_schema::string UniformatClassification_type;
        typedef ::xsd::cxx::tree::optional< UniformatClassification_type > UniformatClassification_optional;
        typedef ::xsd::cxx::tree::traits< UniformatClassification_type, char > UniformatClassification_traits;

        const UniformatClassification_optional&
        UniformatClassification () const;

        UniformatClassification_optional&
        UniformatClassification ();

        void
        UniformatClassification (const UniformatClassification_type& x);

        void
        UniformatClassification (const UniformatClassification_optional& x);

        void
        UniformatClassification (::std::auto_ptr< UniformatClassification_type > p);

        // Unitdepth
        //
        typedef ::xml_schema::double_ Unitdepth_type;
        typedef ::xsd::cxx::tree::optional< Unitdepth_type > Unitdepth_optional;
        typedef ::xsd::cxx::tree::traits< Unitdepth_type, char, ::xsd::cxx::tree::schema_type::double_ > Unitdepth_traits;

        const Unitdepth_optional&
        Unitdepth () const;

        Unitdepth_optional&
        Unitdepth ();

        void
        Unitdepth (const Unitdepth_type& x);

        void
        Unitdepth (const Unitdepth_optional& x);

        // UnitHeight
        //
        typedef ::xml_schema::double_ UnitHeight_type;
        typedef ::xsd::cxx::tree::optional< UnitHeight_type > UnitHeight_optional;
        typedef ::xsd::cxx::tree::traits< UnitHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > UnitHeight_traits;

        const UnitHeight_optional&
        UnitHeight () const;

        UnitHeight_optional&
        UnitHeight ();

        void
        UnitHeight (const UnitHeight_type& x);

        void
        UnitHeight (const UnitHeight_optional& x);

        // UnitLength
        //
        typedef ::xml_schema::double_ UnitLength_type;
        typedef ::xsd::cxx::tree::optional< UnitLength_type > UnitLength_optional;
        typedef ::xsd::cxx::tree::traits< UnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > UnitLength_traits;

        const UnitLength_optional&
        UnitLength () const;

        UnitLength_optional&
        UnitLength ();

        void
        UnitLength (const UnitLength_type& x);

        void
        UnitLength (const UnitLength_optional& x);

        // UnitWidth
        //
        typedef ::xml_schema::double_ UnitWidth_type;
        typedef ::xsd::cxx::tree::optional< UnitWidth_type > UnitWidth_optional;
        typedef ::xsd::cxx::tree::traits< UnitWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > UnitWidth_traits;

        const UnitWidth_optional&
        UnitWidth () const;

        UnitWidth_optional&
        UnitWidth ();

        void
        UnitWidth (const UnitWidth_type& x);

        void
        UnitWidth (const UnitWidth_optional& x);

        // Visible1
        //
        typedef ::xml_schema::boolean Visible1_type;
        typedef ::xsd::cxx::tree::optional< Visible1_type > Visible1_optional;
        typedef ::xsd::cxx::tree::traits< Visible1_type, char > Visible1_traits;

        const Visible1_optional&
        Visible1 () const;

        Visible1_optional&
        Visible1 ();

        void
        Visible1 (const Visible1_type& x);

        void
        Visible1 (const Visible1_optional& x);

        // Visible2
        //
        typedef ::xml_schema::boolean Visible2_type;
        typedef ::xsd::cxx::tree::optional< Visible2_type > Visible2_optional;
        typedef ::xsd::cxx::tree::traits< Visible2_type, char > Visible2_traits;

        const Visible2_optional&
        Visible2 () const;

        Visible2_optional&
        Visible2 ();

        void
        Visible2 (const Visible2_type& x);

        void
        Visible2 (const Visible2_optional& x);

        // Voltage
        //
        typedef ::xml_schema::double_ Voltage_type;
        typedef ::xsd::cxx::tree::optional< Voltage_type > Voltage_optional;
        typedef ::xsd::cxx::tree::traits< Voltage_type, char, ::xsd::cxx::tree::schema_type::double_ > Voltage_traits;

        const Voltage_optional&
        Voltage () const;

        Voltage_optional&
        Voltage ();

        void
        Voltage (const Voltage_type& x);

        void
        Voltage (const Voltage_optional& x);

        // WaterFlow
        //
        typedef ::xml_schema::double_ WaterFlow_type;
        typedef ::xsd::cxx::tree::optional< WaterFlow_type > WaterFlow_optional;
        typedef ::xsd::cxx::tree::traits< WaterFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterFlow_traits;

        const WaterFlow_optional&
        WaterFlow () const;

        WaterFlow_optional&
        WaterFlow ();

        void
        WaterFlow (const WaterFlow_type& x);

        void
        WaterFlow (const WaterFlow_optional& x);

        // WaterPressure
        //
        typedef ::xml_schema::double_ WaterPressure_type;
        typedef ::xsd::cxx::tree::optional< WaterPressure_type > WaterPressure_optional;
        typedef ::xsd::cxx::tree::traits< WaterPressure_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterPressure_traits;

        const WaterPressure_optional&
        WaterPressure () const;

        WaterPressure_optional&
        WaterPressure ();

        void
        WaterPressure (const WaterPressure_type& x);

        void
        WaterPressure (const WaterPressure_optional& x);

        // Width1
        //
        typedef ::xml_schema::double_ Width1_type;
        typedef ::xsd::cxx::tree::optional< Width1_type > Width1_optional;
        typedef ::xsd::cxx::tree::traits< Width1_type, char, ::xsd::cxx::tree::schema_type::double_ > Width1_traits;

        const Width1_optional&
        Width1 () const;

        Width1_optional&
        Width1 ();

        void
        Width1 (const Width1_type& x);

        void
        Width1 (const Width1_optional& x);

        // Width2
        //
        typedef ::xml_schema::double_ Width2_type;
        typedef ::xsd::cxx::tree::optional< Width2_type > Width2_optional;
        typedef ::xsd::cxx::tree::traits< Width2_type, char, ::xsd::cxx::tree::schema_type::double_ > Width2_traits;

        const Width2_optional&
        Width2 () const;

        Width2_optional&
        Width2 ();

        void
        Width2 (const Width2_type& x);

        void
        Width2 (const Width2_optional& x);

        // Width3
        //
        typedef ::xml_schema::double_ Width3_type;
        typedef ::xsd::cxx::tree::optional< Width3_type > Width3_optional;
        typedef ::xsd::cxx::tree::traits< Width3_type, char, ::xsd::cxx::tree::schema_type::double_ > Width3_traits;

        const Width3_optional&
        Width3 () const;

        Width3_optional&
        Width3 ();

        void
        Width3 (const Width3_type& x);

        void
        Width3 (const Width3_optional& x);

        // Width4
        //
        typedef ::xml_schema::double_ Width4_type;
        typedef ::xsd::cxx::tree::optional< Width4_type > Width4_optional;
        typedef ::xsd::cxx::tree::traits< Width4_type, char, ::xsd::cxx::tree::schema_type::double_ > Width4_traits;

        const Width4_optional&
        Width4 () const;

        Width4_optional&
        Width4 ();

        void
        Width4 (const Width4_type& x);

        void
        Width4 (const Width4_optional& x);

        // Width5
        //
        typedef ::xml_schema::double_ Width5_type;
        typedef ::xsd::cxx::tree::optional< Width5_type > Width5_optional;
        typedef ::xsd::cxx::tree::traits< Width5_type, char, ::xsd::cxx::tree::schema_type::double_ > Width5_traits;

        const Width5_optional&
        Width5 () const;

        Width5_optional&
        Width5 ();

        void
        Width5 (const Width5_type& x);

        void
        Width5 (const Width5_optional& x);

        // Width6
        //
        typedef ::xml_schema::double_ Width6_type;
        typedef ::xsd::cxx::tree::optional< Width6_type > Width6_optional;
        typedef ::xsd::cxx::tree::traits< Width6_type, char, ::xsd::cxx::tree::schema_type::double_ > Width6_traits;

        const Width6_optional&
        Width6 () const;

        Width6_optional&
        Width6 ();

        void
        Width6 (const Width6_type& x);

        void
        Width6 (const Width6_optional& x);

        // Width7
        //
        typedef ::xml_schema::double_ Width7_type;
        typedef ::xsd::cxx::tree::optional< Width7_type > Width7_optional;
        typedef ::xsd::cxx::tree::traits< Width7_type, char, ::xsd::cxx::tree::schema_type::double_ > Width7_traits;

        const Width7_optional&
        Width7 () const;

        Width7_optional&
        Width7 ();

        void
        Width7 (const Width7_type& x);

        void
        Width7 (const Width7_optional& x);

        // Constructors.
        //
        SimBuildingElementProxy ();

        SimBuildingElementProxy (const RefId_type&);

        SimBuildingElementProxy (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        SimBuildingElementProxy (const SimBuildingElementProxy& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        virtual SimBuildingElementProxy*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimBuildingElementProxy&
        operator= (const SimBuildingElementProxy& x);

        virtual 
        ~SimBuildingElementProxy ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        Name_optional Name_;
        Representation_optional Representation_;
        CompositionType_optional CompositionType_;
        AHUHeight_optional AHUHeight_;
        AHUWidth_optional AHUWidth_;
        AirFlow_optional AirFlow_;
        AirflowReturn_optional AirflowReturn_;
        AirflowSupply_optional AirflowSupply_;
        AirPressure_optional AirPressure_;
        AirwayLength_optional AirwayLength_;
        AlternatorVoltage_optional AlternatorVoltage_;
        Ang_optional Ang_;
        ApparentLoad_optional ApparentLoad_;
        ApparentLoadPhaseA_optional ApparentLoadPhaseA_;
        ApparentLoadPhaseB_optional ApparentLoadPhaseB_;
        ApparentLoadPhaseC_optional ApparentLoadPhaseC_;
        AverageSolarTransmittance_optional AverageSolarTransmittance_;
        AverageVisibleTransmittance_optional AverageVisibleTransmittance_;
        Azimuth_optional Azimuth_;
        BaseHeight_optional BaseHeight_;
        BaseLength_optional BaseLength_;
        Buildingstoreyname_optional Buildingstoreyname_;
        C1Offset1_optional C1Offset1_;
        C1Offset2_optional C1Offset2_;
        C2Offset1_optional C2Offset1_;
        C2Offset2_optional C2Offset2_;
        C3Offset1_optional C3Offset1_;
        C4Offset2_optional C4Offset2_;
        C5Offset1_optional C5Offset1_;
        C5Offset2_optional C5Offset2_;
        C6Offset1_optional C6Offset1_;
        C6Offset2_optional C6Offset2_;
        ChilledWaterFlow_optional ChilledWaterFlow_;
        ChilledWaterPressureDrop_optional ChilledWaterPressureDrop_;
        CircuitNaming_optional CircuitNaming_;
        Color_optional Color_;
        Connectionoffset_optional Connectionoffset_;
        ContainerName_optional ContainerName_;
        ContainerType_optional ContainerType_;
        CoolAirFlow_optional CoolAirFlow_;
        CoolAirInletDiameter_optional CoolAirInletDiameter_;
        CoolAirInletRadius_optional CoolAirInletRadius_;
        CoolAirPressureDrop_optional CoolAirPressureDrop_;
        CoolingCoilInletRadius_optional CoolingCoilInletRadius_;
        CoolingCoilOutletRadius_optional CoolingCoilOutletRadius_;
        CoolingWaterDiameter_optional CoolingWaterDiameter_;
        CoolingWaterFlow_optional CoolingWaterFlow_;
        CoolingWaterPressureDrop_optional CoolingWaterPressureDrop_;
        CoolingWaterRadius_optional CoolingWaterRadius_;
        Diameter1_optional Diameter1_;
        Distance_optional Distance_;
        Distance1_optional Distance1_;
        Distance2_optional Distance2_;
        DrainFlow_optional DrainFlow_;
        DrainOffset1_optional DrainOffset1_;
        DrainRadius_optional DrainRadius_;
        DuctHeight_optional DuctHeight_;
        DuctWidth_optional DuctWidth_;
        ElectricalCircuitName_optional ElectricalCircuitName_;
        ElectricalData_optional ElectricalData_;
        Enclosure_optional Enclosure_;
        ExternalStaticPressure_optional ExternalStaticPressure_;
        ExternalTotalPressure_optional ExternalTotalPressure_;
        FanAirFlow_optional FanAirFlow_;
        FanDiameter_optional FanDiameter_;
        FanRadius_optional FanRadius_;
        GeneratorHeight_optional GeneratorHeight_;
        GeneratorLength_optional GeneratorLength_;
        GeneratorWidth_optional GeneratorWidth_;
        GroupName_optional GroupName_;
        HalfAirOutletHeight_optional HalfAirOutletHeight_;
        HalfAirOutletWidth_optional HalfAirOutletWidth_;
        HalfOverallHeight_optional HalfOverallHeight_;
        HalfOverallWidth_optional HalfOverallWidth_;
        HalfWidth4_optional HalfWidth4_;
        HeatAirFlow_optional HeatAirFlow_;
        HeatAirInletDiameter_optional HeatAirInletDiameter_;
        HeatAirInletRadius_optional HeatAirInletRadius_;
        HeatAirPressureDrop_optional HeatAirPressureDrop_;
        HeatLoss_optional HeatLoss_;
        HeatingCoilInletRadius_optional HeatingCoilInletRadius_;
        HeatingCoilOutletRadius_optional HeatingCoilOutletRadius_;
        Height1_optional Height1_;
        Height2_optional Height2_;
        Height3_optional Height3_;
        Height4_optional Height4_;
        Height5_optional Height5_;
        Height6_optional Height6_;
        Height7_optional Height7_;
        Height8_optional Height8_;
        Height9_optional Height9_;
        Host_optional Host_;
        HotWaterFlow_optional HotWaterFlow_;
        HotWaterPressureDrop_optional HotWaterPressureDrop_;
        Inclination_optional Inclination_;
        InletDiameter_optional InletDiameter_;
        InletRadius_optional InletRadius_;
        Length1_optional Length1_;
        Length2_optional Length2_;
        Length3_optional Length3_;
        Length4_optional Length4_;
        Length5_optional Length5_;
        Length6_optional Length6_;
        Length7_optional Length7_;
        Length8_optional Length8_;
        Length9_optional Length9_;
        Length10_optional Length10_;
        Length11_optional Length11_;
        Length12_optional Length12_;
        Length13_optional Length13_;
        Level_optional Level_;
        LoadClassification_optional LoadClassification_;
        MakeUpWaterFlow_optional MakeUpWaterFlow_;
        MakeUpWaterPressureDrop_optional MakeUpWaterPressureDrop_;
        MakeUpWaterRadius_optional MakeUpWaterRadius_;
        ManufacturerArticleNumber_optional ManufacturerArticleNumber_;
        ManufacturerModelName_optional ManufacturerModelName_;
        ManufacturerModelNumber_optional ManufacturerModelNumber_;
        ManufacturerName_optional ManufacturerName_;
        ManufacturerYearofProduction_optional ManufacturerYearofProduction_;
        Mark_optional Mark_;
        Material_optional Material_;
        Max1PoleBreakers_optional Max1PoleBreakers_;
        MaxFlow_optional MaxFlow_;
        MinFlow_optional MinFlow_;
        Model_optional Model_;
        MotorHP_optional MotorHP_;
        NumberOfFans_optional NumberOfFans_;
        NumberOfPoles_optional NumberOfPoles_;
        ObjectClassName_optional ObjectClassName_;
        Offset_optional Offset_;
        OmniclassNumber_optional OmniclassNumber_;
        OmniclassTitle_optional OmniclassTitle_;
        OutletDiameter_optional OutletDiameter_;
        OutletRadius_optional OutletRadius_;
        OverallHeight_optional OverallHeight_;
        OverallLength_optional OverallLength_;
        OverallWidth_optional OverallWidth_;
        PanelHeight_optional PanelHeight_;
        Partshape_optional Partshape_;
        PhaseCreated_optional PhaseCreated_;
        PipeRadius_optional PipeRadius_;
        PrimaryNumberofPoles_optional PrimaryNumberofPoles_;
        PrimaryVoltage_optional PrimaryVoltage_;
        PumpHeight_optional PumpHeight_;
        PumpLength_optional PumpLength_;
        PumpWidth_optional PumpWidth_;
        Radius1_optional Radius1_;
        Radius2_optional Radius2_;
        Radius3_optional Radius3_;
        Radius4_optional Radius4_;
        Radius5_optional Radius5_;
        Radius6_optional Radius6_;
        Reference_optional Reference_;
        Reflectance_optional Reflectance_;
        ReturnAirInletFlow_optional ReturnAirInletFlow_;
        ReturnAirInletHeight_optional ReturnAirInletHeight_;
        ReturnAirInletWidth_optional ReturnAirInletWidth_;
        ReturnDuctHeight_optional ReturnDuctHeight_;
        ReturnDuctWidth_optional ReturnDuctWidth_;
        Returnheight_optional Returnheight_;
        Returnwidth_optional Returnwidth_;
        ReturnY_Offset_optional ReturnY_Offset_;
        ReturnZ_Offset_optional ReturnZ_Offset_;
        Roughness_optional Roughness_;
        ShadingDeviceType_optional ShadingDeviceType_;
        SupplyAirInletDiameter_optional SupplyAirInletDiameter_;
        SupplyAirInletFlow_optional SupplyAirInletFlow_;
        SupplyAirInletHeight_optional SupplyAirInletHeight_;
        SupplyAirInletRadius_optional SupplyAirInletRadius_;
        SupplyAirInletWidth_optional SupplyAirInletWidth_;
        SupplyAirOutletFlow_optional SupplyAirOutletFlow_;
        SupplyAirOutletHeight_optional SupplyAirOutletHeight_;
        SupplyAirOutletWidth_optional SupplyAirOutletWidth_;
        SupplyAirPressureDrop_optional SupplyAirPressureDrop_;
        SupplyDuctHeight_optional SupplyDuctHeight_;
        SupplyDuctWidth_optional SupplyDuctWidth_;
        Supplyheight_optional Supplyheight_;
        Supplywidth_optional Supplywidth_;
        Supply_ReturnSymbols_optional Supply_ReturnSymbols_;
        SupplyY_Offset_optional SupplyY_Offset_;
        SupplyZ_Offset_optional SupplyZ_Offset_;
        SystemClassification_optional SystemClassification_;
        SystemName_optional SystemName_;
        TiltRange_optional TiltRange_;
        TotalConnected_optional TotalConnected_;
        TotalDemandFactor_optional TotalDemandFactor_;
        TotalEstimatedDemand_optional TotalEstimatedDemand_;
        TowerHeight_optional TowerHeight_;
        TowerLength_optional TowerLength_;
        TowerWidth_optional TowerWidth_;
        TransformerHeight_optional TransformerHeight_;
        TransformerLength_optional TransformerLength_;
        TransformerWidth_optional TransformerWidth_;
        UniformatClassification_optional UniformatClassification_;
        Unitdepth_optional Unitdepth_;
        UnitHeight_optional UnitHeight_;
        UnitLength_optional UnitLength_;
        UnitWidth_optional UnitWidth_;
        Visible1_optional Visible1_;
        Visible2_optional Visible2_;
        Voltage_optional Voltage_;
        WaterFlow_optional WaterFlow_;
        WaterPressure_optional WaterPressure_;
        Width1_optional Width1_;
        Width2_optional Width2_;
        Width3_optional Width3_;
        Width4_optional Width4_;
        Width5_optional Width5_;
        Width6_optional Width6_;
        Width7_optional Width7_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_BUILDING_ELEMENT_PROXY_HXX
