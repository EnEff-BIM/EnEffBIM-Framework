// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled
      // 

      const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_ZoneName_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_ZoneName () const
      {
        return this->SimInternalLoad_ZoneName_;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_ZoneName_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_ZoneName ()
      {
        return this->SimInternalLoad_ZoneName_;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_ZoneName (const SimInternalLoad_ZoneName_type& x)
      {
        this->SimInternalLoad_ZoneName_.set (x);
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_ZoneName (const SimInternalLoad_ZoneName_optional& x)
      {
        this->SimInternalLoad_ZoneName_ = x;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_ZoneName (::std::auto_ptr< SimInternalLoad_ZoneName_type > x)
      {
        this->SimInternalLoad_ZoneName_.set (x);
      }

      const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_EndUseSubCat_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_EndUseSubCat () const
      {
        return this->SimInternalLoad_EndUseSubCat_;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_EndUseSubCat_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_EndUseSubCat ()
      {
        return this->SimInternalLoad_EndUseSubCat_;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_EndUseSubCat (const SimInternalLoad_EndUseSubCat_type& x)
      {
        this->SimInternalLoad_EndUseSubCat_.set (x);
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_EndUseSubCat (const SimInternalLoad_EndUseSubCat_optional& x)
      {
        this->SimInternalLoad_EndUseSubCat_ = x;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_EndUseSubCat (::std::auto_ptr< SimInternalLoad_EndUseSubCat_type > x)
      {
        this->SimInternalLoad_EndUseSubCat_.set (x);
      }

      const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_CapacityAtLowTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtLowTemp () const
      {
        return this->SimInternalLoad_CapacityAtLowTemp_;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_CapacityAtLowTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtLowTemp ()
      {
        return this->SimInternalLoad_CapacityAtLowTemp_;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtLowTemp (const SimInternalLoad_CapacityAtLowTemp_type& x)
      {
        this->SimInternalLoad_CapacityAtLowTemp_.set (x);
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtLowTemp (const SimInternalLoad_CapacityAtLowTemp_optional& x)
      {
        this->SimInternalLoad_CapacityAtLowTemp_ = x;
      }

      const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_LowTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_LowTemp () const
      {
        return this->SimInternalLoad_LowTemp_;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_LowTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_LowTemp ()
      {
        return this->SimInternalLoad_LowTemp_;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_LowTemp (const SimInternalLoad_LowTemp_type& x)
      {
        this->SimInternalLoad_LowTemp_.set (x);
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_LowTemp (const SimInternalLoad_LowTemp_optional& x)
      {
        this->SimInternalLoad_LowTemp_ = x;
      }

      const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_CapacityAtHighTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtHighTemp () const
      {
        return this->SimInternalLoad_CapacityAtHighTemp_;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_CapacityAtHighTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtHighTemp ()
      {
        return this->SimInternalLoad_CapacityAtHighTemp_;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtHighTemp (const SimInternalLoad_CapacityAtHighTemp_type& x)
      {
        this->SimInternalLoad_CapacityAtHighTemp_.set (x);
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_CapacityAtHighTemp (const SimInternalLoad_CapacityAtHighTemp_optional& x)
      {
        this->SimInternalLoad_CapacityAtHighTemp_ = x;
      }

      const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_HighTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_HighTemp () const
      {
        return this->SimInternalLoad_HighTemp_;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::SimInternalLoad_HighTemp_optional& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_HighTemp ()
      {
        return this->SimInternalLoad_HighTemp_;
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_HighTemp (const SimInternalLoad_HighTemp_type& x)
      {
        this->SimInternalLoad_HighTemp_.set (x);
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_HighTemp (const SimInternalLoad_HighTemp_optional& x)
      {
        this->SimInternalLoad_HighTemp_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled
      //

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled ()
      : ::schema::simxml::ResourcesGeneral::SimInternalLoad_Equipment (),
        SimInternalLoad_ZoneName_ (this),
        SimInternalLoad_EndUseSubCat_ (this),
        SimInternalLoad_CapacityAtLowTemp_ (this),
        SimInternalLoad_LowTemp_ (this),
        SimInternalLoad_CapacityAtHighTemp_ (this),
        SimInternalLoad_HighTemp_ (this)
      {
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimInternalLoad_Equipment (RefId),
        SimInternalLoad_ZoneName_ (this),
        SimInternalLoad_EndUseSubCat_ (this),
        SimInternalLoad_CapacityAtLowTemp_ (this),
        SimInternalLoad_LowTemp_ (this),
        SimInternalLoad_CapacityAtHighTemp_ (this),
        SimInternalLoad_HighTemp_ (this)
      {
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled (const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled& x,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimInternalLoad_Equipment (x, f, c),
        SimInternalLoad_ZoneName_ (x.SimInternalLoad_ZoneName_, f, this),
        SimInternalLoad_EndUseSubCat_ (x.SimInternalLoad_EndUseSubCat_, f, this),
        SimInternalLoad_CapacityAtLowTemp_ (x.SimInternalLoad_CapacityAtLowTemp_, f, this),
        SimInternalLoad_LowTemp_ (x.SimInternalLoad_LowTemp_, f, this),
        SimInternalLoad_CapacityAtHighTemp_ (x.SimInternalLoad_CapacityAtHighTemp_, f, this),
        SimInternalLoad_HighTemp_ (x.SimInternalLoad_HighTemp_, f, this)
      {
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled (const ::xercesc::DOMElement& e,
                                                                  ::xml_schema::flags f,
                                                                  ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimInternalLoad_Equipment (e, f | ::xml_schema::flags::base, c),
        SimInternalLoad_ZoneName_ (this),
        SimInternalLoad_EndUseSubCat_ (this),
        SimInternalLoad_CapacityAtLowTemp_ (this),
        SimInternalLoad_LowTemp_ (this),
        SimInternalLoad_CapacityAtHighTemp_ (this),
        SimInternalLoad_HighTemp_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimInternalLoad_Equipment::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimInternalLoad_ZoneName
          //
          if (n.name () == "SimInternalLoad_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneName_type > r (
              SimInternalLoad_ZoneName_traits::create (i, f, this));

            if (!this->SimInternalLoad_ZoneName_)
            {
              this->SimInternalLoad_ZoneName_.set (r);
              continue;
            }
          }

          // SimInternalLoad_EndUseSubCat
          //
          if (n.name () == "SimInternalLoad_EndUseSubCat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimInternalLoad_EndUseSubCat_type > r (
              SimInternalLoad_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimInternalLoad_EndUseSubCat_)
            {
              this->SimInternalLoad_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimInternalLoad_CapacityAtLowTemp
          //
          if (n.name () == "SimInternalLoad_CapacityAtLowTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_CapacityAtLowTemp_)
            {
              this->SimInternalLoad_CapacityAtLowTemp_.set (SimInternalLoad_CapacityAtLowTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_LowTemp
          //
          if (n.name () == "SimInternalLoad_LowTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_LowTemp_)
            {
              this->SimInternalLoad_LowTemp_.set (SimInternalLoad_LowTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_CapacityAtHighTemp
          //
          if (n.name () == "SimInternalLoad_CapacityAtHighTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_CapacityAtHighTemp_)
            {
              this->SimInternalLoad_CapacityAtHighTemp_.set (SimInternalLoad_CapacityAtHighTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_HighTemp
          //
          if (n.name () == "SimInternalLoad_HighTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_HighTemp_)
            {
              this->SimInternalLoad_HighTemp_.set (SimInternalLoad_HighTemp_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled* SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled (*this, f, c);
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled& SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      operator= (const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimInternalLoad_Equipment& > (*this) = x;
          this->SimInternalLoad_ZoneName_ = x.SimInternalLoad_ZoneName_;
          this->SimInternalLoad_EndUseSubCat_ = x.SimInternalLoad_EndUseSubCat_;
          this->SimInternalLoad_CapacityAtLowTemp_ = x.SimInternalLoad_CapacityAtLowTemp_;
          this->SimInternalLoad_LowTemp_ = x.SimInternalLoad_LowTemp_;
          this->SimInternalLoad_CapacityAtHighTemp_ = x.SimInternalLoad_CapacityAtHighTemp_;
          this->SimInternalLoad_HighTemp_ = x.SimInternalLoad_HighTemp_;
        }

        return *this;
      }

      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled::
      ~SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

