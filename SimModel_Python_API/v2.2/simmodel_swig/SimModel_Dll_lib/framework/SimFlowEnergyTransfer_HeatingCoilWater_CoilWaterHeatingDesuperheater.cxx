// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater
      // 

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_Name () const
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_Name ()
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x)
      {
        this->SimFlowEnergyTrans_Name_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_RatedInletWaterTemp_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedInletWaterTemp () const
      {
        return this->SimFlowEnergyTrans_RatedInletWaterTemp_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_RatedInletWaterTemp_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedInletWaterTemp ()
      {
        return this->SimFlowEnergyTrans_RatedInletWaterTemp_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedInletWaterTemp (const SimFlowEnergyTrans_RatedInletWaterTemp_type& x)
      {
        this->SimFlowEnergyTrans_RatedInletWaterTemp_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedInletWaterTemp (const SimFlowEnergyTrans_RatedInletWaterTemp_optional& x)
      {
        this->SimFlowEnergyTrans_RatedInletWaterTemp_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_HeatingSrcObjType_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcObjType () const
      {
        return this->SimFlowEnergyTrans_HeatingSrcObjType_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_HeatingSrcObjType_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcObjType ()
      {
        return this->SimFlowEnergyTrans_HeatingSrcObjType_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcObjType (const SimFlowEnergyTrans_HeatingSrcObjType_type& x)
      {
        this->SimFlowEnergyTrans_HeatingSrcObjType_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcObjType (const SimFlowEnergyTrans_HeatingSrcObjType_optional& x)
      {
        this->SimFlowEnergyTrans_HeatingSrcObjType_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcObjType (::std::auto_ptr< SimFlowEnergyTrans_HeatingSrcObjType_type > x)
      {
        this->SimFlowEnergyTrans_HeatingSrcObjType_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_HeatingSrcName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcName () const
      {
        return this->SimFlowEnergyTrans_HeatingSrcName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_HeatingSrcName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcName ()
      {
        return this->SimFlowEnergyTrans_HeatingSrcName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcName (const SimFlowEnergyTrans_HeatingSrcName_type& x)
      {
        this->SimFlowEnergyTrans_HeatingSrcName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcName (const SimFlowEnergyTrans_HeatingSrcName_optional& x)
      {
        this->SimFlowEnergyTrans_HeatingSrcName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatingSrcName (::std::auto_ptr< SimFlowEnergyTrans_HeatingSrcName_type > x)
      {
        this->SimFlowEnergyTrans_HeatingSrcName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_SetpointTempSchedName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_SetpointTempSchedName () const
      {
        return this->SimFlowEnergyTrans_SetpointTempSchedName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_SetpointTempSchedName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_SetpointTempSchedName ()
      {
        return this->SimFlowEnergyTrans_SetpointTempSchedName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_SetpointTempSchedName (const SimFlowEnergyTrans_SetpointTempSchedName_type& x)
      {
        this->SimFlowEnergyTrans_SetpointTempSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_SetpointTempSchedName (const SimFlowEnergyTrans_SetpointTempSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_SetpointTempSchedName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_SetpointTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_SetpointTempSchedName_type > x)
      {
        this->SimFlowEnergyTrans_SetpointTempSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_DeadBandTempDiff_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_DeadBandTempDiff () const
      {
        return this->SimFlowEnergyTrans_DeadBandTempDiff_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_DeadBandTempDiff_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_DeadBandTempDiff ()
      {
        return this->SimFlowEnergyTrans_DeadBandTempDiff_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_DeadBandTempDiff (const SimFlowEnergyTrans_DeadBandTempDiff_type& x)
      {
        this->SimFlowEnergyTrans_DeadBandTempDiff_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_DeadBandTempDiff (const SimFlowEnergyTrans_DeadBandTempDiff_optional& x)
      {
        this->SimFlowEnergyTrans_DeadBandTempDiff_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_RatedHeatReclaimRecovEff_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedHeatReclaimRecovEff () const
      {
        return this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_RatedHeatReclaimRecovEff_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedHeatReclaimRecovEff ()
      {
        return this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedHeatReclaimRecovEff (const SimFlowEnergyTrans_RatedHeatReclaimRecovEff_type& x)
      {
        this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedHeatReclaimRecovEff (const SimFlowEnergyTrans_RatedHeatReclaimRecovEff_optional& x)
      {
        this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_RatedOutdrAirTemp_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedOutdrAirTemp () const
      {
        return this->SimFlowEnergyTrans_RatedOutdrAirTemp_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_RatedOutdrAirTemp_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedOutdrAirTemp ()
      {
        return this->SimFlowEnergyTrans_RatedOutdrAirTemp_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedOutdrAirTemp (const SimFlowEnergyTrans_RatedOutdrAirTemp_type& x)
      {
        this->SimFlowEnergyTrans_RatedOutdrAirTemp_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_RatedOutdrAirTemp (const SimFlowEnergyTrans_RatedOutdrAirTemp_optional& x)
      {
        this->SimFlowEnergyTrans_RatedOutdrAirTemp_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim () const
      {
        return this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim ()
      {
        return this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim (const SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_type& x)
      {
        this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim (const SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_optional& x)
      {
        this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName (const SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName (const SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_TankObjType_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankObjType () const
      {
        return this->SimFlowEnergyTrans_TankObjType_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_TankObjType_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankObjType ()
      {
        return this->SimFlowEnergyTrans_TankObjType_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankObjType (const SimFlowEnergyTrans_TankObjType_type& x)
      {
        this->SimFlowEnergyTrans_TankObjType_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankObjType (const SimFlowEnergyTrans_TankObjType_optional& x)
      {
        this->SimFlowEnergyTrans_TankObjType_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankObjType (::std::auto_ptr< SimFlowEnergyTrans_TankObjType_type > x)
      {
        this->SimFlowEnergyTrans_TankObjType_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_TankName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankName () const
      {
        return this->SimFlowEnergyTrans_TankName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_TankName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankName ()
      {
        return this->SimFlowEnergyTrans_TankName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankName (const SimFlowEnergyTrans_TankName_type& x)
      {
        this->SimFlowEnergyTrans_TankName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankName (const SimFlowEnergyTrans_TankName_optional& x)
      {
        this->SimFlowEnergyTrans_TankName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_TankName (::std::auto_ptr< SimFlowEnergyTrans_TankName_type > x)
      {
        this->SimFlowEnergyTrans_TankName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterFlowRate () const
      {
        return this->SimFlowEnergyTrans_WaterFlowRate_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterFlowRate ()
      {
        return this->SimFlowEnergyTrans_WaterFlowRate_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterFlowRate (const SimFlowEnergyTrans_WaterFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_WaterFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterFlowRate (const SimFlowEnergyTrans_WaterFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_WaterFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterPumpPwr_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterPumpPwr () const
      {
        return this->SimFlowEnergyTrans_WaterPumpPwr_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_WaterPumpPwr_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterPumpPwr ()
      {
        return this->SimFlowEnergyTrans_WaterPumpPwr_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterPumpPwr (const SimFlowEnergyTrans_WaterPumpPwr_type& x)
      {
        this->SimFlowEnergyTrans_WaterPumpPwr_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_WaterPumpPwr (const SimFlowEnergyTrans_WaterPumpPwr_optional& x)
      {
        this->SimFlowEnergyTrans_WaterPumpPwr_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_FractPumpHeatToWater_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_FractPumpHeatToWater () const
      {
        return this->SimFlowEnergyTrans_FractPumpHeatToWater_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_FractPumpHeatToWater_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_FractPumpHeatToWater ()
      {
        return this->SimFlowEnergyTrans_FractPumpHeatToWater_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_FractPumpHeatToWater (const SimFlowEnergyTrans_FractPumpHeatToWater_type& x)
      {
        this->SimFlowEnergyTrans_FractPumpHeatToWater_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_FractPumpHeatToWater (const SimFlowEnergyTrans_FractPumpHeatToWater_optional& x)
      {
        this->SimFlowEnergyTrans_FractPumpHeatToWater_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_OnCycleParasiticElecLoad_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_OnCycleParasiticElecLoad () const
      {
        return this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_OnCycleParasiticElecLoad_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_OnCycleParasiticElecLoad ()
      {
        return this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_OnCycleParasiticElecLoad (const SimFlowEnergyTrans_OnCycleParasiticElecLoad_type& x)
      {
        this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_OnCycleParasiticElecLoad (const SimFlowEnergyTrans_OnCycleParasiticElecLoad_optional& x)
      {
        this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_fCycleParasiticElecLoad_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_fCycleParasiticElecLoad () const
      {
        return this->SimFlowEnergyTrans_fCycleParasiticElecLoad_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::SimFlowEnergyTrans_fCycleParasiticElecLoad_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_fCycleParasiticElecLoad ()
      {
        return this->SimFlowEnergyTrans_fCycleParasiticElecLoad_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_fCycleParasiticElecLoad (const SimFlowEnergyTrans_fCycleParasiticElecLoad_type& x)
      {
        this->SimFlowEnergyTrans_fCycleParasiticElecLoad_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTrans_fCycleParasiticElecLoad (const SimFlowEnergyTrans_fCycleParasiticElecLoad_optional& x)
      {
        this->SimFlowEnergyTrans_fCycleParasiticElecLoad_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater
      //

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_RatedInletWaterTemp_ (this),
        SimFlowEnergyTrans_HeatingSrcObjType_ (this),
        SimFlowEnergyTrans_HeatingSrcName_ (this),
        SimFlowEnergyTrans_SetpointTempSchedName_ (this),
        SimFlowEnergyTrans_DeadBandTempDiff_ (this),
        SimFlowEnergyTrans_RatedHeatReclaimRecovEff_ (this),
        SimFlowEnergyTrans_RatedOutdrAirTemp_ (this),
        SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_ (this),
        SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TankObjType_ (this),
        SimFlowEnergyTrans_TankName_ (this),
        SimFlowEnergyTrans_WaterFlowRate_ (this),
        SimFlowEnergyTrans_WaterPumpPwr_ (this),
        SimFlowEnergyTrans_FractPumpHeatToWater_ (this),
        SimFlowEnergyTrans_OnCycleParasiticElecLoad_ (this),
        SimFlowEnergyTrans_fCycleParasiticElecLoad_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (RefId),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_RatedInletWaterTemp_ (this),
        SimFlowEnergyTrans_HeatingSrcObjType_ (this),
        SimFlowEnergyTrans_HeatingSrcName_ (this),
        SimFlowEnergyTrans_SetpointTempSchedName_ (this),
        SimFlowEnergyTrans_DeadBandTempDiff_ (this),
        SimFlowEnergyTrans_RatedHeatReclaimRecovEff_ (this),
        SimFlowEnergyTrans_RatedOutdrAirTemp_ (this),
        SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_ (this),
        SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TankObjType_ (this),
        SimFlowEnergyTrans_TankName_ (this),
        SimFlowEnergyTrans_WaterFlowRate_ (this),
        SimFlowEnergyTrans_WaterPumpPwr_ (this),
        SimFlowEnergyTrans_FractPumpHeatToWater_ (this),
        SimFlowEnergyTrans_OnCycleParasiticElecLoad_ (this),
        SimFlowEnergyTrans_fCycleParasiticElecLoad_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater (const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater& x,
                                                                            ::xml_schema::flags f,
                                                                            ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (x, f, c),
        SimFlowEnergyTrans_Name_ (x.SimFlowEnergyTrans_Name_, f, this),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_WaterInletNodeName_ (x.SimFlowEnergyTrans_WaterInletNodeName_, f, this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (x.SimFlowEnergyTrans_WaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_RatedInletWaterTemp_ (x.SimFlowEnergyTrans_RatedInletWaterTemp_, f, this),
        SimFlowEnergyTrans_HeatingSrcObjType_ (x.SimFlowEnergyTrans_HeatingSrcObjType_, f, this),
        SimFlowEnergyTrans_HeatingSrcName_ (x.SimFlowEnergyTrans_HeatingSrcName_, f, this),
        SimFlowEnergyTrans_SetpointTempSchedName_ (x.SimFlowEnergyTrans_SetpointTempSchedName_, f, this),
        SimFlowEnergyTrans_DeadBandTempDiff_ (x.SimFlowEnergyTrans_DeadBandTempDiff_, f, this),
        SimFlowEnergyTrans_RatedHeatReclaimRecovEff_ (x.SimFlowEnergyTrans_RatedHeatReclaimRecovEff_, f, this),
        SimFlowEnergyTrans_RatedOutdrAirTemp_ (x.SimFlowEnergyTrans_RatedOutdrAirTemp_, f, this),
        SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_ (x.SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_, f, this),
        SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_ (x.SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_TankObjType_ (x.SimFlowEnergyTrans_TankObjType_, f, this),
        SimFlowEnergyTrans_TankName_ (x.SimFlowEnergyTrans_TankName_, f, this),
        SimFlowEnergyTrans_WaterFlowRate_ (x.SimFlowEnergyTrans_WaterFlowRate_, f, this),
        SimFlowEnergyTrans_WaterPumpPwr_ (x.SimFlowEnergyTrans_WaterPumpPwr_, f, this),
        SimFlowEnergyTrans_FractPumpHeatToWater_ (x.SimFlowEnergyTrans_FractPumpHeatToWater_, f, this),
        SimFlowEnergyTrans_OnCycleParasiticElecLoad_ (x.SimFlowEnergyTrans_OnCycleParasiticElecLoad_, f, this),
        SimFlowEnergyTrans_fCycleParasiticElecLoad_ (x.SimFlowEnergyTrans_fCycleParasiticElecLoad_, f, this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater (const ::xercesc::DOMElement& e,
                                                                            ::xml_schema::flags f,
                                                                            ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_RatedInletWaterTemp_ (this),
        SimFlowEnergyTrans_HeatingSrcObjType_ (this),
        SimFlowEnergyTrans_HeatingSrcName_ (this),
        SimFlowEnergyTrans_SetpointTempSchedName_ (this),
        SimFlowEnergyTrans_DeadBandTempDiff_ (this),
        SimFlowEnergyTrans_RatedHeatReclaimRecovEff_ (this),
        SimFlowEnergyTrans_RatedOutdrAirTemp_ (this),
        SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_ (this),
        SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TankObjType_ (this),
        SimFlowEnergyTrans_TankName_ (this),
        SimFlowEnergyTrans_WaterFlowRate_ (this),
        SimFlowEnergyTrans_WaterPumpPwr_ (this),
        SimFlowEnergyTrans_FractPumpHeatToWater_ (this),
        SimFlowEnergyTrans_OnCycleParasiticElecLoad_ (this),
        SimFlowEnergyTrans_fCycleParasiticElecLoad_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_Name
          //
          if (n.name () == "SimFlowEnergyTrans_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Name_type > r (
              SimFlowEnergyTrans_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Name_)
            {
              this->SimFlowEnergyTrans_Name_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > r (
              SimFlowEnergyTrans_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > r (
              SimFlowEnergyTrans_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedInletWaterTemp
          //
          if (n.name () == "SimFlowEnergyTrans_RatedInletWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedInletWaterTemp_)
            {
              this->SimFlowEnergyTrans_RatedInletWaterTemp_.set (SimFlowEnergyTrans_RatedInletWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatingSrcObjType
          //
          if (n.name () == "SimFlowEnergyTrans_HeatingSrcObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatingSrcObjType_type > r (
              SimFlowEnergyTrans_HeatingSrcObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatingSrcObjType_)
            {
              this->SimFlowEnergyTrans_HeatingSrcObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatingSrcName
          //
          if (n.name () == "SimFlowEnergyTrans_HeatingSrcName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatingSrcName_type > r (
              SimFlowEnergyTrans_HeatingSrcName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatingSrcName_)
            {
              this->SimFlowEnergyTrans_HeatingSrcName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SetpointTempSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_SetpointTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SetpointTempSchedName_type > r (
              SimFlowEnergyTrans_SetpointTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SetpointTempSchedName_)
            {
              this->SimFlowEnergyTrans_SetpointTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DeadBandTempDiff
          //
          if (n.name () == "SimFlowEnergyTrans_DeadBandTempDiff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DeadBandTempDiff_)
            {
              this->SimFlowEnergyTrans_DeadBandTempDiff_.set (SimFlowEnergyTrans_DeadBandTempDiff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedHeatReclaimRecovEff
          //
          if (n.name () == "SimFlowEnergyTrans_RatedHeatReclaimRecovEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_)
            {
              this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_.set (SimFlowEnergyTrans_RatedHeatReclaimRecovEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedOutdrAirTemp
          //
          if (n.name () == "SimFlowEnergyTrans_RatedOutdrAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedOutdrAirTemp_)
            {
              this->SimFlowEnergyTrans_RatedOutdrAirTemp_.set (SimFlowEnergyTrans_RatedOutdrAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim
          //
          if (n.name () == "SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_)
            {
              this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_.set (SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_type > r (
              SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TankObjType
          //
          if (n.name () == "SimFlowEnergyTrans_TankObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TankObjType_type > r (
              SimFlowEnergyTrans_TankObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TankObjType_)
            {
              this->SimFlowEnergyTrans_TankObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TankName
          //
          if (n.name () == "SimFlowEnergyTrans_TankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TankName_type > r (
              SimFlowEnergyTrans_TankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TankName_)
            {
              this->SimFlowEnergyTrans_TankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_WaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_WaterFlowRate_)
            {
              this->SimFlowEnergyTrans_WaterFlowRate_.set (SimFlowEnergyTrans_WaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterPumpPwr
          //
          if (n.name () == "SimFlowEnergyTrans_WaterPumpPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_WaterPumpPwr_)
            {
              this->SimFlowEnergyTrans_WaterPumpPwr_.set (SimFlowEnergyTrans_WaterPumpPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_FractPumpHeatToWater
          //
          if (n.name () == "SimFlowEnergyTrans_FractPumpHeatToWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_FractPumpHeatToWater_)
            {
              this->SimFlowEnergyTrans_FractPumpHeatToWater_.set (SimFlowEnergyTrans_FractPumpHeatToWater_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_OnCycleParasiticElecLoad
          //
          if (n.name () == "SimFlowEnergyTrans_OnCycleParasiticElecLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_)
            {
              this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_.set (SimFlowEnergyTrans_OnCycleParasiticElecLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_fCycleParasiticElecLoad
          //
          if (n.name () == "SimFlowEnergyTrans_fCycleParasiticElecLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_fCycleParasiticElecLoad_)
            {
              this->SimFlowEnergyTrans_fCycleParasiticElecLoad_.set (SimFlowEnergyTrans_fCycleParasiticElecLoad_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater* SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater (*this, f, c);
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater& SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      operator= (const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilWater& > (*this) = x;
          this->SimFlowEnergyTrans_Name_ = x.SimFlowEnergyTrans_Name_;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_WaterInletNodeName_ = x.SimFlowEnergyTrans_WaterInletNodeName_;
          this->SimFlowEnergyTrans_WaterOutletNodeName_ = x.SimFlowEnergyTrans_WaterOutletNodeName_;
          this->SimFlowEnergyTrans_RatedInletWaterTemp_ = x.SimFlowEnergyTrans_RatedInletWaterTemp_;
          this->SimFlowEnergyTrans_HeatingSrcObjType_ = x.SimFlowEnergyTrans_HeatingSrcObjType_;
          this->SimFlowEnergyTrans_HeatingSrcName_ = x.SimFlowEnergyTrans_HeatingSrcName_;
          this->SimFlowEnergyTrans_SetpointTempSchedName_ = x.SimFlowEnergyTrans_SetpointTempSchedName_;
          this->SimFlowEnergyTrans_DeadBandTempDiff_ = x.SimFlowEnergyTrans_DeadBandTempDiff_;
          this->SimFlowEnergyTrans_RatedHeatReclaimRecovEff_ = x.SimFlowEnergyTrans_RatedHeatReclaimRecovEff_;
          this->SimFlowEnergyTrans_RatedOutdrAirTemp_ = x.SimFlowEnergyTrans_RatedOutdrAirTemp_;
          this->SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_ = x.SimFlowEnergyTrans_MaxInletWaterTempForHeatReclaim_;
          this->SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_ = x.SimFlowEnergyTrans_HeatReclaimEffFuncTempCurveName_;
          this->SimFlowEnergyTrans_TankObjType_ = x.SimFlowEnergyTrans_TankObjType_;
          this->SimFlowEnergyTrans_TankName_ = x.SimFlowEnergyTrans_TankName_;
          this->SimFlowEnergyTrans_WaterFlowRate_ = x.SimFlowEnergyTrans_WaterFlowRate_;
          this->SimFlowEnergyTrans_WaterPumpPwr_ = x.SimFlowEnergyTrans_WaterPumpPwr_;
          this->SimFlowEnergyTrans_FractPumpHeatToWater_ = x.SimFlowEnergyTrans_FractPumpHeatToWater_;
          this->SimFlowEnergyTrans_OnCycleParasiticElecLoad_ = x.SimFlowEnergyTrans_OnCycleParasiticElecLoad_;
          this->SimFlowEnergyTrans_fCycleParasiticElecLoad_ = x.SimFlowEnergyTrans_fCycleParasiticElecLoad_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater::
      ~SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

