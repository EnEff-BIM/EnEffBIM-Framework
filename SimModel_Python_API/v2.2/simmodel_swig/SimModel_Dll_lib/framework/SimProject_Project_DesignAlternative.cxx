// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimProject_Project_DesignAlternative.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimProject_Project_DesignAlternative
      // 

      const SimProject_Project_DesignAlternative::ProjectPhase_optional& SimProject_Project_DesignAlternative::
      ProjectPhase () const
      {
        return this->ProjectPhase_;
      }

      SimProject_Project_DesignAlternative::ProjectPhase_optional& SimProject_Project_DesignAlternative::
      ProjectPhase ()
      {
        return this->ProjectPhase_;
      }

      void SimProject_Project_DesignAlternative::
      ProjectPhase (const ProjectPhase_type& x)
      {
        this->ProjectPhase_.set (x);
      }

      void SimProject_Project_DesignAlternative::
      ProjectPhase (const ProjectPhase_optional& x)
      {
        this->ProjectPhase_ = x;
      }

      void SimProject_Project_DesignAlternative::
      ProjectPhase (::std::auto_ptr< ProjectPhase_type > x)
      {
        this->ProjectPhase_.set (x);
      }

      const SimProject_Project_DesignAlternative::ProjectClientOwner_optional& SimProject_Project_DesignAlternative::
      ProjectClientOwner () const
      {
        return this->ProjectClientOwner_;
      }

      SimProject_Project_DesignAlternative::ProjectClientOwner_optional& SimProject_Project_DesignAlternative::
      ProjectClientOwner ()
      {
        return this->ProjectClientOwner_;
      }

      void SimProject_Project_DesignAlternative::
      ProjectClientOwner (const ProjectClientOwner_type& x)
      {
        this->ProjectClientOwner_.set (x);
      }

      void SimProject_Project_DesignAlternative::
      ProjectClientOwner (const ProjectClientOwner_optional& x)
      {
        this->ProjectClientOwner_ = x;
      }

      void SimProject_Project_DesignAlternative::
      ProjectClientOwner (::std::auto_ptr< ProjectClientOwner_type > x)
      {
        this->ProjectClientOwner_.set (x);
      }

      const SimProject_Project_DesignAlternative::ProjectArchitect_optional& SimProject_Project_DesignAlternative::
      ProjectArchitect () const
      {
        return this->ProjectArchitect_;
      }

      SimProject_Project_DesignAlternative::ProjectArchitect_optional& SimProject_Project_DesignAlternative::
      ProjectArchitect ()
      {
        return this->ProjectArchitect_;
      }

      void SimProject_Project_DesignAlternative::
      ProjectArchitect (const ProjectArchitect_type& x)
      {
        this->ProjectArchitect_.set (x);
      }

      void SimProject_Project_DesignAlternative::
      ProjectArchitect (const ProjectArchitect_optional& x)
      {
        this->ProjectArchitect_ = x;
      }

      void SimProject_Project_DesignAlternative::
      ProjectArchitect (::std::auto_ptr< ProjectArchitect_type > x)
      {
        this->ProjectArchitect_.set (x);
      }

      const SimProject_Project_DesignAlternative::ProjectUnits_optional& SimProject_Project_DesignAlternative::
      ProjectUnits () const
      {
        return this->ProjectUnits_;
      }

      SimProject_Project_DesignAlternative::ProjectUnits_optional& SimProject_Project_DesignAlternative::
      ProjectUnits ()
      {
        return this->ProjectUnits_;
      }

      void SimProject_Project_DesignAlternative::
      ProjectUnits (const ProjectUnits_type& x)
      {
        this->ProjectUnits_.set (x);
      }

      void SimProject_Project_DesignAlternative::
      ProjectUnits (const ProjectUnits_optional& x)
      {
        this->ProjectUnits_ = x;
      }

      void SimProject_Project_DesignAlternative::
      ProjectUnits (::std::auto_ptr< ProjectUnits_type > x)
      {
        this->ProjectUnits_.set (x);
      }

      const SimProject_Project_DesignAlternative::_3DModelRepresentationContexts_optional& SimProject_Project_DesignAlternative::
      _3DModelRepresentationContexts () const
      {
        return this->_3DModelRepresentationContexts_;
      }

      SimProject_Project_DesignAlternative::_3DModelRepresentationContexts_optional& SimProject_Project_DesignAlternative::
      _3DModelRepresentationContexts ()
      {
        return this->_3DModelRepresentationContexts_;
      }

      void SimProject_Project_DesignAlternative::
      _3DModelRepresentationContexts (const _3DModelRepresentationContexts_type& x)
      {
        this->_3DModelRepresentationContexts_.set (x);
      }

      void SimProject_Project_DesignAlternative::
      _3DModelRepresentationContexts (const _3DModelRepresentationContexts_optional& x)
      {
        this->_3DModelRepresentationContexts_ = x;
      }

      void SimProject_Project_DesignAlternative::
      _3DModelRepresentationContexts (::std::auto_ptr< _3DModelRepresentationContexts_type > x)
      {
        this->_3DModelRepresentationContexts_.set (x);
      }

      const SimProject_Project_DesignAlternative::_2DModelRepresentationContexts_optional& SimProject_Project_DesignAlternative::
      _2DModelRepresentationContexts () const
      {
        return this->_2DModelRepresentationContexts_;
      }

      SimProject_Project_DesignAlternative::_2DModelRepresentationContexts_optional& SimProject_Project_DesignAlternative::
      _2DModelRepresentationContexts ()
      {
        return this->_2DModelRepresentationContexts_;
      }

      void SimProject_Project_DesignAlternative::
      _2DModelRepresentationContexts (const _2DModelRepresentationContexts_type& x)
      {
        this->_2DModelRepresentationContexts_.set (x);
      }

      void SimProject_Project_DesignAlternative::
      _2DModelRepresentationContexts (const _2DModelRepresentationContexts_optional& x)
      {
        this->_2DModelRepresentationContexts_ = x;
      }

      void SimProject_Project_DesignAlternative::
      _2DModelRepresentationContexts (::std::auto_ptr< _2DModelRepresentationContexts_type > x)
      {
        this->_2DModelRepresentationContexts_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimProject_Project_DesignAlternative
      //

      SimProject_Project_DesignAlternative::
      SimProject_Project_DesignAlternative ()
      : ::schema::simxml::BuildingModel::SimProject_Project (),
        ProjectPhase_ (this),
        ProjectClientOwner_ (this),
        ProjectArchitect_ (this),
        ProjectUnits_ (this),
        _3DModelRepresentationContexts_ (this),
        _2DModelRepresentationContexts_ (this)
      {
      }

      SimProject_Project_DesignAlternative::
      SimProject_Project_DesignAlternative (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimProject_Project (RefId),
        ProjectPhase_ (this),
        ProjectClientOwner_ (this),
        ProjectArchitect_ (this),
        ProjectUnits_ (this),
        _3DModelRepresentationContexts_ (this),
        _2DModelRepresentationContexts_ (this)
      {
      }

      SimProject_Project_DesignAlternative::
      SimProject_Project_DesignAlternative (const SimProject_Project_DesignAlternative& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimProject_Project (x, f, c),
        ProjectPhase_ (x.ProjectPhase_, f, this),
        ProjectClientOwner_ (x.ProjectClientOwner_, f, this),
        ProjectArchitect_ (x.ProjectArchitect_, f, this),
        ProjectUnits_ (x.ProjectUnits_, f, this),
        _3DModelRepresentationContexts_ (x._3DModelRepresentationContexts_, f, this),
        _2DModelRepresentationContexts_ (x._2DModelRepresentationContexts_, f, this)
      {
      }

      SimProject_Project_DesignAlternative::
      SimProject_Project_DesignAlternative (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimProject_Project (e, f | ::xml_schema::flags::base, c),
        ProjectPhase_ (this),
        ProjectClientOwner_ (this),
        ProjectArchitect_ (this),
        ProjectUnits_ (this),
        _3DModelRepresentationContexts_ (this),
        _2DModelRepresentationContexts_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimProject_Project_DesignAlternative::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimProject_Project::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ProjectPhase
          //
          if (n.name () == "ProjectPhase" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectPhase_type > r (
              ProjectPhase_traits::create (i, f, this));

            if (!this->ProjectPhase_)
            {
              this->ProjectPhase_.set (r);
              continue;
            }
          }

          // ProjectClientOwner
          //
          if (n.name () == "ProjectClientOwner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectClientOwner_type > r (
              ProjectClientOwner_traits::create (i, f, this));

            if (!this->ProjectClientOwner_)
            {
              this->ProjectClientOwner_.set (r);
              continue;
            }
          }

          // ProjectArchitect
          //
          if (n.name () == "ProjectArchitect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectArchitect_type > r (
              ProjectArchitect_traits::create (i, f, this));

            if (!this->ProjectArchitect_)
            {
              this->ProjectArchitect_.set (r);
              continue;
            }
          }

          // ProjectUnits
          //
          if (n.name () == "ProjectUnits" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectUnits_type > r (
              ProjectUnits_traits::create (i, f, this));

            if (!this->ProjectUnits_)
            {
              this->ProjectUnits_.set (r);
              continue;
            }
          }

          // _3DModelRepresentationContexts
          //
          if (n.name () == "_3DModelRepresentationContexts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< _3DModelRepresentationContexts_type > r (
              _3DModelRepresentationContexts_traits::create (i, f, this));

            if (!this->_3DModelRepresentationContexts_)
            {
              this->_3DModelRepresentationContexts_.set (r);
              continue;
            }
          }

          // _2DModelRepresentationContexts
          //
          if (n.name () == "_2DModelRepresentationContexts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< _2DModelRepresentationContexts_type > r (
              _2DModelRepresentationContexts_traits::create (i, f, this));

            if (!this->_2DModelRepresentationContexts_)
            {
              this->_2DModelRepresentationContexts_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimProject_Project_DesignAlternative* SimProject_Project_DesignAlternative::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimProject_Project_DesignAlternative (*this, f, c);
      }

      SimProject_Project_DesignAlternative& SimProject_Project_DesignAlternative::
      operator= (const SimProject_Project_DesignAlternative& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimProject_Project& > (*this) = x;
          this->ProjectPhase_ = x.ProjectPhase_;
          this->ProjectClientOwner_ = x.ProjectClientOwner_;
          this->ProjectArchitect_ = x.ProjectArchitect_;
          this->ProjectUnits_ = x.ProjectUnits_;
          this->_3DModelRepresentationContexts_ = x._3DModelRepresentationContexts_;
          this->_2DModelRepresentationContexts_ = x._2DModelRepresentationContexts_;
        }

        return *this;
      }

      SimProject_Project_DesignAlternative::
      ~SimProject_Project_DesignAlternative ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

