// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit
      // 

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_Name_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_Name () const
      {
        return this->SimFlowCompEqmt_Name_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_Name_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_Name ()
      {
        return this->SimFlowCompEqmt_Name_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_type& x)
      {
        this->SimFlowCompEqmt_Name_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_optional& x)
      {
        this->SimFlowCompEqmt_Name_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_Name (::std::auto_ptr< SimFlowCompEqmt_Name_type > x)
      {
        this->SimFlowCompEqmt_Name_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_OutdrAirInletNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_OutdrAirInletNodeName () const
      {
        return this->SimFlowCompEqmt_OutdrAirInletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_OutdrAirInletNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_OutdrAirInletNodeName ()
      {
        return this->SimFlowCompEqmt_OutdrAirInletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_OutdrAirInletNodeName (const SimFlowCompEqmt_OutdrAirInletNodeName_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirInletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_OutdrAirInletNodeName (const SimFlowCompEqmt_OutdrAirInletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirInletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_OutdrAirInletNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirInletNodeName_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirInletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanObjType () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanObjType ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanObjType (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SupplyAirFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailMngrListName () const
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailMngrListName ()
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_type& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_optional& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_AvailMngrListName (::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FanPlacement () const
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FanPlacement ()
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_type& x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_optional& x)
      {
        this->SimFlowCompEqmt_FanPlacement_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FanPlacement (::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_CoolerOutletNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerOutletNodeName () const
      {
        return this->SimFlowCompEqmt_CoolerOutletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_CoolerOutletNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerOutletNodeName ()
      {
        return this->SimFlowCompEqmt_CoolerOutletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerOutletNodeName (const SimFlowCompEqmt_CoolerOutletNodeName_type& x)
      {
        this->SimFlowCompEqmt_CoolerOutletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerOutletNodeName (const SimFlowCompEqmt_CoolerOutletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_CoolerOutletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_CoolerOutletNodeName_type > x)
      {
        this->SimFlowCompEqmt_CoolerOutletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_ZoneReliefAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ZoneReliefAirNodeName () const
      {
        return this->SimFlowCompEqmt_ZoneReliefAirNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_ZoneReliefAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ZoneReliefAirNodeName ()
      {
        return this->SimFlowCompEqmt_ZoneReliefAirNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ZoneReliefAirNodeName (const SimFlowCompEqmt_ZoneReliefAirNodeName_type& x)
      {
        this->SimFlowCompEqmt_ZoneReliefAirNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ZoneReliefAirNodeName (const SimFlowCompEqmt_ZoneReliefAirNodeName_optional& x)
      {
        this->SimFlowCompEqmt_ZoneReliefAirNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ZoneReliefAirNodeName (::std::auto_ptr< SimFlowCompEqmt_ZoneReliefAirNodeName_type > x)
      {
        this->SimFlowCompEqmt_ZoneReliefAirNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_DesignSupAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_DesignSupAirFlowRate () const
      {
        return this->SimFlowCompEqmt_DesignSupAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_DesignSupAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_DesignSupAirFlowRate ()
      {
        return this->SimFlowCompEqmt_DesignSupAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_DesignSupAirFlowRate (const SimFlowCompEqmt_DesignSupAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_DesignSupAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_DesignSupAirFlowRate (const SimFlowCompEqmt_DesignSupAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_DesignSupAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_CoolerUnitCntrlMethod_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerUnitCntrlMethod () const
      {
        return this->SimFlowCompEqmt_CoolerUnitCntrlMethod_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_CoolerUnitCntrlMethod_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerUnitCntrlMethod ()
      {
        return this->SimFlowCompEqmt_CoolerUnitCntrlMethod_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerUnitCntrlMethod (const SimFlowCompEqmt_CoolerUnitCntrlMethod_type& x)
      {
        this->SimFlowCompEqmt_CoolerUnitCntrlMethod_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerUnitCntrlMethod (const SimFlowCompEqmt_CoolerUnitCntrlMethod_optional& x)
      {
        this->SimFlowCompEqmt_CoolerUnitCntrlMethod_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolerUnitCntrlMethod (::std::auto_ptr< SimFlowCompEqmt_CoolerUnitCntrlMethod_type > x)
      {
        this->SimFlowCompEqmt_CoolerUnitCntrlMethod_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_ThrotRangeTempDifference_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ThrotRangeTempDifference () const
      {
        return this->SimFlowCompEqmt_ThrotRangeTempDifference_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_ThrotRangeTempDifference_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ThrotRangeTempDifference ()
      {
        return this->SimFlowCompEqmt_ThrotRangeTempDifference_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ThrotRangeTempDifference (const SimFlowCompEqmt_ThrotRangeTempDifference_type& x)
      {
        this->SimFlowCompEqmt_ThrotRangeTempDifference_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_ThrotRangeTempDifference (const SimFlowCompEqmt_ThrotRangeTempDifference_optional& x)
      {
        this->SimFlowCompEqmt_ThrotRangeTempDifference_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate () const
      {
        return this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate ()
      {
        return this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate (const SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_type& x)
      {
        this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate (const SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_optional& x)
      {
        this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_FirstEvapCoolerObjectType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectType () const
      {
        return this->SimFlowCompEqmt_FirstEvapCoolerObjectType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_FirstEvapCoolerObjectType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectType ()
      {
        return this->SimFlowCompEqmt_FirstEvapCoolerObjectType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectType (const SimFlowCompEqmt_FirstEvapCoolerObjectType_type& x)
      {
        this->SimFlowCompEqmt_FirstEvapCoolerObjectType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectType (const SimFlowCompEqmt_FirstEvapCoolerObjectType_optional& x)
      {
        this->SimFlowCompEqmt_FirstEvapCoolerObjectType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectType (::std::auto_ptr< SimFlowCompEqmt_FirstEvapCoolerObjectType_type > x)
      {
        this->SimFlowCompEqmt_FirstEvapCoolerObjectType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_FirstEvapCoolerObjectName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectName () const
      {
        return this->SimFlowCompEqmt_FirstEvapCoolerObjectName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_FirstEvapCoolerObjectName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectName ()
      {
        return this->SimFlowCompEqmt_FirstEvapCoolerObjectName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectName (const SimFlowCompEqmt_FirstEvapCoolerObjectName_type& x)
      {
        this->SimFlowCompEqmt_FirstEvapCoolerObjectName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectName (const SimFlowCompEqmt_FirstEvapCoolerObjectName_optional& x)
      {
        this->SimFlowCompEqmt_FirstEvapCoolerObjectName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_FirstEvapCoolerObjectName (::std::auto_ptr< SimFlowCompEqmt_FirstEvapCoolerObjectName_type > x)
      {
        this->SimFlowCompEqmt_FirstEvapCoolerObjectName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SecondEvapCoolerObjectType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerObjectType () const
      {
        return this->SimFlowCompEqmt_SecondEvapCoolerObjectType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SecondEvapCoolerObjectType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerObjectType ()
      {
        return this->SimFlowCompEqmt_SecondEvapCoolerObjectType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerObjectType (const SimFlowCompEqmt_SecondEvapCoolerObjectType_type& x)
      {
        this->SimFlowCompEqmt_SecondEvapCoolerObjectType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerObjectType (const SimFlowCompEqmt_SecondEvapCoolerObjectType_optional& x)
      {
        this->SimFlowCompEqmt_SecondEvapCoolerObjectType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerObjectType (::std::auto_ptr< SimFlowCompEqmt_SecondEvapCoolerObjectType_type > x)
      {
        this->SimFlowCompEqmt_SecondEvapCoolerObjectType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SecondEvapCoolerName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerName () const
      {
        return this->SimFlowCompEqmt_SecondEvapCoolerName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::SimFlowCompEqmt_SecondEvapCoolerName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerName ()
      {
        return this->SimFlowCompEqmt_SecondEvapCoolerName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerName (const SimFlowCompEqmt_SecondEvapCoolerName_type& x)
      {
        this->SimFlowCompEqmt_SecondEvapCoolerName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerName (const SimFlowCompEqmt_SecondEvapCoolerName_optional& x)
      {
        this->SimFlowCompEqmt_SecondEvapCoolerName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompEqmt_SecondEvapCoolerName (::std::auto_ptr< SimFlowCompEqmt_SecondEvapCoolerName_type > x)
      {
        this->SimFlowCompEqmt_SecondEvapCoolerName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit
      //

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit ()
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_CoolerOutletNodeName_ (this),
        SimFlowCompEqmt_ZoneReliefAirNodeName_ (this),
        SimFlowCompEqmt_DesignSupAirFlowRate_ (this),
        SimFlowCompEqmt_CoolerUnitCntrlMethod_ (this),
        SimFlowCompEqmt_ThrotRangeTempDifference_ (this),
        SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_ (this),
        SimFlowCompEqmt_FirstEvapCoolerObjectType_ (this),
        SimFlowCompEqmt_FirstEvapCoolerObjectName_ (this),
        SimFlowCompEqmt_SecondEvapCoolerObjectType_ (this),
        SimFlowCompEqmt_SecondEvapCoolerName_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (RefId),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_CoolerOutletNodeName_ (this),
        SimFlowCompEqmt_ZoneReliefAirNodeName_ (this),
        SimFlowCompEqmt_DesignSupAirFlowRate_ (this),
        SimFlowCompEqmt_CoolerUnitCntrlMethod_ (this),
        SimFlowCompEqmt_ThrotRangeTempDifference_ (this),
        SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_ (this),
        SimFlowCompEqmt_FirstEvapCoolerObjectType_ (this),
        SimFlowCompEqmt_FirstEvapCoolerObjectName_ (this),
        SimFlowCompEqmt_SecondEvapCoolerObjectType_ (this),
        SimFlowCompEqmt_SecondEvapCoolerName_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit (const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (x, f, c),
        SimFlowCompEqmt_Name_ (x.SimFlowCompEqmt_Name_, f, this),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (x.SimFlowCompEqmt_OutdrAirInletNodeName_, f, this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (x.SimFlowCompEqmt_SupplyAirFanObjType_, f, this),
        SimFlowCompEqmt_SupplyAirFanName_ (x.SimFlowCompEqmt_SupplyAirFanName_, f, this),
        SimFlowCompEqmt_AvailMngrListName_ (x.SimFlowCompEqmt_AvailMngrListName_, f, this),
        SimFlowCompEqmt_FanPlacement_ (x.SimFlowCompEqmt_FanPlacement_, f, this),
        SimFlowCompEqmt_CoolerOutletNodeName_ (x.SimFlowCompEqmt_CoolerOutletNodeName_, f, this),
        SimFlowCompEqmt_ZoneReliefAirNodeName_ (x.SimFlowCompEqmt_ZoneReliefAirNodeName_, f, this),
        SimFlowCompEqmt_DesignSupAirFlowRate_ (x.SimFlowCompEqmt_DesignSupAirFlowRate_, f, this),
        SimFlowCompEqmt_CoolerUnitCntrlMethod_ (x.SimFlowCompEqmt_CoolerUnitCntrlMethod_, f, this),
        SimFlowCompEqmt_ThrotRangeTempDifference_ (x.SimFlowCompEqmt_ThrotRangeTempDifference_, f, this),
        SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_ (x.SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_, f, this),
        SimFlowCompEqmt_FirstEvapCoolerObjectType_ (x.SimFlowCompEqmt_FirstEvapCoolerObjectType_, f, this),
        SimFlowCompEqmt_FirstEvapCoolerObjectName_ (x.SimFlowCompEqmt_FirstEvapCoolerObjectName_, f, this),
        SimFlowCompEqmt_SecondEvapCoolerObjectType_ (x.SimFlowCompEqmt_SecondEvapCoolerObjectType_, f, this),
        SimFlowCompEqmt_SecondEvapCoolerName_ (x.SimFlowCompEqmt_SecondEvapCoolerName_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_CoolerOutletNodeName_ (this),
        SimFlowCompEqmt_ZoneReliefAirNodeName_ (this),
        SimFlowCompEqmt_DesignSupAirFlowRate_ (this),
        SimFlowCompEqmt_CoolerUnitCntrlMethod_ (this),
        SimFlowCompEqmt_ThrotRangeTempDifference_ (this),
        SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_ (this),
        SimFlowCompEqmt_FirstEvapCoolerObjectType_ (this),
        SimFlowCompEqmt_FirstEvapCoolerObjectName_ (this),
        SimFlowCompEqmt_SecondEvapCoolerObjectType_ (this),
        SimFlowCompEqmt_SecondEvapCoolerName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_Name
          //
          if (n.name () == "SimFlowCompEqmt_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_Name_type > r (
              SimFlowCompEqmt_Name_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_Name_)
            {
              this->SimFlowCompEqmt_Name_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirInletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirInletNodeName_type > r (
              SimFlowCompEqmt_OutdrAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirInletNodeName_)
            {
              this->SimFlowCompEqmt_OutdrAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanObjType
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > r (
              SimFlowCompEqmt_SupplyAirFanObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanObjType_)
            {
              this->SimFlowCompEqmt_SupplyAirFanObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > r (
              SimFlowCompEqmt_SupplyAirFanName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AvailMngrListName
          //
          if (n.name () == "SimFlowCompEqmt_AvailMngrListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > r (
              SimFlowCompEqmt_AvailMngrListName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailMngrListName_)
            {
              this->SimFlowCompEqmt_AvailMngrListName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FanPlacement
          //
          if (n.name () == "SimFlowCompEqmt_FanPlacement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > r (
              SimFlowCompEqmt_FanPlacement_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FanPlacement_)
            {
              this->SimFlowCompEqmt_FanPlacement_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolerOutletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_CoolerOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolerOutletNodeName_type > r (
              SimFlowCompEqmt_CoolerOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolerOutletNodeName_)
            {
              this->SimFlowCompEqmt_CoolerOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_ZoneReliefAirNodeName
          //
          if (n.name () == "SimFlowCompEqmt_ZoneReliefAirNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_ZoneReliefAirNodeName_type > r (
              SimFlowCompEqmt_ZoneReliefAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_ZoneReliefAirNodeName_)
            {
              this->SimFlowCompEqmt_ZoneReliefAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DesignSupAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_DesignSupAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_DesignSupAirFlowRate_)
            {
              this->SimFlowCompEqmt_DesignSupAirFlowRate_.set (SimFlowCompEqmt_DesignSupAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CoolerUnitCntrlMethod
          //
          if (n.name () == "SimFlowCompEqmt_CoolerUnitCntrlMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolerUnitCntrlMethod_type > r (
              SimFlowCompEqmt_CoolerUnitCntrlMethod_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolerUnitCntrlMethod_)
            {
              this->SimFlowCompEqmt_CoolerUnitCntrlMethod_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_ThrotRangeTempDifference
          //
          if (n.name () == "SimFlowCompEqmt_ThrotRangeTempDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_ThrotRangeTempDifference_)
            {
              this->SimFlowCompEqmt_ThrotRangeTempDifference_.set (SimFlowCompEqmt_ThrotRangeTempDifference_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate
          //
          if (n.name () == "SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_)
            {
              this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_.set (SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_FirstEvapCoolerObjectType
          //
          if (n.name () == "SimFlowCompEqmt_FirstEvapCoolerObjectType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FirstEvapCoolerObjectType_type > r (
              SimFlowCompEqmt_FirstEvapCoolerObjectType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FirstEvapCoolerObjectType_)
            {
              this->SimFlowCompEqmt_FirstEvapCoolerObjectType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FirstEvapCoolerObjectName
          //
          if (n.name () == "SimFlowCompEqmt_FirstEvapCoolerObjectName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FirstEvapCoolerObjectName_type > r (
              SimFlowCompEqmt_FirstEvapCoolerObjectName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FirstEvapCoolerObjectName_)
            {
              this->SimFlowCompEqmt_FirstEvapCoolerObjectName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SecondEvapCoolerObjectType
          //
          if (n.name () == "SimFlowCompEqmt_SecondEvapCoolerObjectType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SecondEvapCoolerObjectType_type > r (
              SimFlowCompEqmt_SecondEvapCoolerObjectType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SecondEvapCoolerObjectType_)
            {
              this->SimFlowCompEqmt_SecondEvapCoolerObjectType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SecondEvapCoolerName
          //
          if (n.name () == "SimFlowCompEqmt_SecondEvapCoolerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SecondEvapCoolerName_type > r (
              SimFlowCompEqmt_SecondEvapCoolerName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SecondEvapCoolerName_)
            {
              this->SimFlowCompEqmt_SecondEvapCoolerName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit* SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit& SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt& > (*this) = x;
          this->SimFlowCompEqmt_Name_ = x.SimFlowCompEqmt_Name_;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_OutdrAirInletNodeName_ = x.SimFlowCompEqmt_OutdrAirInletNodeName_;
          this->SimFlowCompEqmt_SupplyAirFanObjType_ = x.SimFlowCompEqmt_SupplyAirFanObjType_;
          this->SimFlowCompEqmt_SupplyAirFanName_ = x.SimFlowCompEqmt_SupplyAirFanName_;
          this->SimFlowCompEqmt_AvailMngrListName_ = x.SimFlowCompEqmt_AvailMngrListName_;
          this->SimFlowCompEqmt_FanPlacement_ = x.SimFlowCompEqmt_FanPlacement_;
          this->SimFlowCompEqmt_CoolerOutletNodeName_ = x.SimFlowCompEqmt_CoolerOutletNodeName_;
          this->SimFlowCompEqmt_ZoneReliefAirNodeName_ = x.SimFlowCompEqmt_ZoneReliefAirNodeName_;
          this->SimFlowCompEqmt_DesignSupAirFlowRate_ = x.SimFlowCompEqmt_DesignSupAirFlowRate_;
          this->SimFlowCompEqmt_CoolerUnitCntrlMethod_ = x.SimFlowCompEqmt_CoolerUnitCntrlMethod_;
          this->SimFlowCompEqmt_ThrotRangeTempDifference_ = x.SimFlowCompEqmt_ThrotRangeTempDifference_;
          this->SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_ = x.SimFlowCompEqmt_CoolLoadCntrlThresholdHeatTransRate_;
          this->SimFlowCompEqmt_FirstEvapCoolerObjectType_ = x.SimFlowCompEqmt_FirstEvapCoolerObjectType_;
          this->SimFlowCompEqmt_FirstEvapCoolerObjectName_ = x.SimFlowCompEqmt_FirstEvapCoolerObjectName_;
          this->SimFlowCompEqmt_SecondEvapCoolerObjectType_ = x.SimFlowCompEqmt_SecondEvapCoolerObjectType_;
          this->SimFlowCompEqmt_SecondEvapCoolerName_ = x.SimFlowCompEqmt_SecondEvapCoolerName_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit::
      ~SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

