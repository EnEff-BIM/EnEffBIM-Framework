// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimControlScheme_AvailabilityManagerScheme_OptimumStart.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_AvailabilityManagerScheme_OptimumStart
      // 

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_Name_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_Name () const
      {
        return this->SimCntrlSchm_Name_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_Name_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_Name ()
      {
        return this->SimCntrlSchm_Name_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_Name (const SimCntrlSchm_Name_type& x)
      {
        this->SimCntrlSchm_Name_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_Name (const SimCntrlSchm_Name_optional& x)
      {
        this->SimCntrlSchm_Name_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_Name (::std::auto_ptr< SimCntrlSchm_Name_type > x)
      {
        this->SimCntrlSchm_Name_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ApplicSchedName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ApplicSchedName () const
      {
        return this->SimCntrlSchm_ApplicSchedName_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ApplicSchedName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ApplicSchedName ()
      {
        return this->SimCntrlSchm_ApplicSchedName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ApplicSchedName (const SimCntrlSchm_ApplicSchedName_type& x)
      {
        this->SimCntrlSchm_ApplicSchedName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ApplicSchedName (const SimCntrlSchm_ApplicSchedName_optional& x)
      {
        this->SimCntrlSchm_ApplicSchedName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ApplicSchedName (::std::auto_ptr< SimCntrlSchm_ApplicSchedName_type > x)
      {
        this->SimCntrlSchm_ApplicSchedName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_FanSchedName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_FanSchedName () const
      {
        return this->SimCntrlSchm_FanSchedName_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_FanSchedName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_FanSchedName ()
      {
        return this->SimCntrlSchm_FanSchedName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_FanSchedName (const SimCntrlSchm_FanSchedName_type& x)
      {
        this->SimCntrlSchm_FanSchedName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_FanSchedName (const SimCntrlSchm_FanSchedName_optional& x)
      {
        this->SimCntrlSchm_FanSchedName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_FanSchedName (::std::auto_ptr< SimCntrlSchm_FanSchedName_type > x)
      {
        this->SimCntrlSchm_FanSchedName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_CntlType_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlType () const
      {
        return this->SimCntrlSchm_CntlType_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_CntlType_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlType ()
      {
        return this->SimCntrlSchm_CntlType_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlType (const SimCntrlSchm_CntlType_type& x)
      {
        this->SimCntrlSchm_CntlType_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlType (const SimCntrlSchm_CntlType_optional& x)
      {
        this->SimCntrlSchm_CntlType_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlType (::std::auto_ptr< SimCntrlSchm_CntlType_type > x)
      {
        this->SimCntrlSchm_CntlType_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_CntlZoneName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlZoneName () const
      {
        return this->SimCntrlSchm_CntlZoneName_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_CntlZoneName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlZoneName ()
      {
        return this->SimCntrlSchm_CntlZoneName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlZoneName (const SimCntrlSchm_CntlZoneName_type& x)
      {
        this->SimCntrlSchm_CntlZoneName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlZoneName (const SimCntrlSchm_CntlZoneName_optional& x)
      {
        this->SimCntrlSchm_CntlZoneName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntlZoneName (::std::auto_ptr< SimCntrlSchm_CntlZoneName_type > x)
      {
        this->SimCntrlSchm_CntlZoneName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ZoneListName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ZoneListName () const
      {
        return this->SimCntrlSchm_ZoneListName_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ZoneListName_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ZoneListName ()
      {
        return this->SimCntrlSchm_ZoneListName_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ZoneListName (const SimCntrlSchm_ZoneListName_type& x)
      {
        this->SimCntrlSchm_ZoneListName_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ZoneListName (const SimCntrlSchm_ZoneListName_optional& x)
      {
        this->SimCntrlSchm_ZoneListName_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ZoneListName (::std::auto_ptr< SimCntrlSchm_ZoneListName_type > x)
      {
        this->SimCntrlSchm_ZoneListName_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_MaxValueforOptStartTime_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_MaxValueforOptStartTime () const
      {
        return this->SimCntrlSchm_MaxValueforOptStartTime_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_MaxValueforOptStartTime_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_MaxValueforOptStartTime ()
      {
        return this->SimCntrlSchm_MaxValueforOptStartTime_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_MaxValueforOptStartTime (const SimCntrlSchm_MaxValueforOptStartTime_type& x)
      {
        this->SimCntrlSchm_MaxValueforOptStartTime_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_MaxValueforOptStartTime (const SimCntrlSchm_MaxValueforOptStartTime_optional& x)
      {
        this->SimCntrlSchm_MaxValueforOptStartTime_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_CntrlAlgorithm_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntrlAlgorithm () const
      {
        return this->SimCntrlSchm_CntrlAlgorithm_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_CntrlAlgorithm_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntrlAlgorithm ()
      {
        return this->SimCntrlSchm_CntrlAlgorithm_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntrlAlgorithm (const SimCntrlSchm_CntrlAlgorithm_type& x)
      {
        this->SimCntrlSchm_CntrlAlgorithm_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntrlAlgorithm (const SimCntrlSchm_CntrlAlgorithm_optional& x)
      {
        this->SimCntrlSchm_CntrlAlgorithm_ = x;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_CntrlAlgorithm (::std::auto_ptr< SimCntrlSchm_CntrlAlgorithm_type > x)
      {
        this->SimCntrlSchm_CntrlAlgorithm_.set (x);
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ConstTempGradDuringCool_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringCool () const
      {
        return this->SimCntrlSchm_ConstTempGradDuringCool_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ConstTempGradDuringCool_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringCool ()
      {
        return this->SimCntrlSchm_ConstTempGradDuringCool_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringCool (const SimCntrlSchm_ConstTempGradDuringCool_type& x)
      {
        this->SimCntrlSchm_ConstTempGradDuringCool_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringCool (const SimCntrlSchm_ConstTempGradDuringCool_optional& x)
      {
        this->SimCntrlSchm_ConstTempGradDuringCool_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ConstTempGradDuringHeat_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringHeat () const
      {
        return this->SimCntrlSchm_ConstTempGradDuringHeat_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ConstTempGradDuringHeat_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringHeat ()
      {
        return this->SimCntrlSchm_ConstTempGradDuringHeat_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringHeat (const SimCntrlSchm_ConstTempGradDuringHeat_type& x)
      {
        this->SimCntrlSchm_ConstTempGradDuringHeat_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstTempGradDuringHeat (const SimCntrlSchm_ConstTempGradDuringHeat_optional& x)
      {
        this->SimCntrlSchm_ConstTempGradDuringHeat_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_InitTempGradDuringCool_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringCool () const
      {
        return this->SimCntrlSchm_InitTempGradDuringCool_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_InitTempGradDuringCool_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringCool ()
      {
        return this->SimCntrlSchm_InitTempGradDuringCool_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringCool (const SimCntrlSchm_InitTempGradDuringCool_type& x)
      {
        this->SimCntrlSchm_InitTempGradDuringCool_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringCool (const SimCntrlSchm_InitTempGradDuringCool_optional& x)
      {
        this->SimCntrlSchm_InitTempGradDuringCool_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_InitTempGradDuringHeat_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringHeat () const
      {
        return this->SimCntrlSchm_InitTempGradDuringHeat_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_InitTempGradDuringHeat_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringHeat ()
      {
        return this->SimCntrlSchm_InitTempGradDuringHeat_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringHeat (const SimCntrlSchm_InitTempGradDuringHeat_type& x)
      {
        this->SimCntrlSchm_InitTempGradDuringHeat_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_InitTempGradDuringHeat (const SimCntrlSchm_InitTempGradDuringHeat_optional& x)
      {
        this->SimCntrlSchm_InitTempGradDuringHeat_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ConstStartTime_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstStartTime () const
      {
        return this->SimCntrlSchm_ConstStartTime_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_ConstStartTime_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstStartTime ()
      {
        return this->SimCntrlSchm_ConstStartTime_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstStartTime (const SimCntrlSchm_ConstStartTime_type& x)
      {
        this->SimCntrlSchm_ConstStartTime_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_ConstStartTime (const SimCntrlSchm_ConstStartTime_optional& x)
      {
        this->SimCntrlSchm_ConstStartTime_ = x;
      }

      const SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_NumofPrevDays_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_NumofPrevDays () const
      {
        return this->SimCntrlSchm_NumofPrevDays_;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::SimCntrlSchm_NumofPrevDays_optional& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_NumofPrevDays ()
      {
        return this->SimCntrlSchm_NumofPrevDays_;
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_NumofPrevDays (const SimCntrlSchm_NumofPrevDays_type& x)
      {
        this->SimCntrlSchm_NumofPrevDays_.set (x);
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimCntrlSchm_NumofPrevDays (const SimCntrlSchm_NumofPrevDays_optional& x)
      {
        this->SimCntrlSchm_NumofPrevDays_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_AvailabilityManagerScheme_OptimumStart
      //

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart ()
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (),
        SimCntrlSchm_Name_ (this),
        SimCntrlSchm_ApplicSchedName_ (this),
        SimCntrlSchm_FanSchedName_ (this),
        SimCntrlSchm_CntlType_ (this),
        SimCntrlSchm_CntlZoneName_ (this),
        SimCntrlSchm_ZoneListName_ (this),
        SimCntrlSchm_MaxValueforOptStartTime_ (this),
        SimCntrlSchm_CntrlAlgorithm_ (this),
        SimCntrlSchm_ConstTempGradDuringCool_ (this),
        SimCntrlSchm_ConstTempGradDuringHeat_ (this),
        SimCntrlSchm_InitTempGradDuringCool_ (this),
        SimCntrlSchm_InitTempGradDuringHeat_ (this),
        SimCntrlSchm_ConstStartTime_ (this),
        SimCntrlSchm_NumofPrevDays_ (this)
      {
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (RefId),
        SimCntrlSchm_Name_ (this),
        SimCntrlSchm_ApplicSchedName_ (this),
        SimCntrlSchm_FanSchedName_ (this),
        SimCntrlSchm_CntlType_ (this),
        SimCntrlSchm_CntlZoneName_ (this),
        SimCntrlSchm_ZoneListName_ (this),
        SimCntrlSchm_MaxValueforOptStartTime_ (this),
        SimCntrlSchm_CntrlAlgorithm_ (this),
        SimCntrlSchm_ConstTempGradDuringCool_ (this),
        SimCntrlSchm_ConstTempGradDuringHeat_ (this),
        SimCntrlSchm_InitTempGradDuringCool_ (this),
        SimCntrlSchm_InitTempGradDuringHeat_ (this),
        SimCntrlSchm_ConstStartTime_ (this),
        SimCntrlSchm_NumofPrevDays_ (this)
      {
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart (const SimControlScheme_AvailabilityManagerScheme_OptimumStart& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (x, f, c),
        SimCntrlSchm_Name_ (x.SimCntrlSchm_Name_, f, this),
        SimCntrlSchm_ApplicSchedName_ (x.SimCntrlSchm_ApplicSchedName_, f, this),
        SimCntrlSchm_FanSchedName_ (x.SimCntrlSchm_FanSchedName_, f, this),
        SimCntrlSchm_CntlType_ (x.SimCntrlSchm_CntlType_, f, this),
        SimCntrlSchm_CntlZoneName_ (x.SimCntrlSchm_CntlZoneName_, f, this),
        SimCntrlSchm_ZoneListName_ (x.SimCntrlSchm_ZoneListName_, f, this),
        SimCntrlSchm_MaxValueforOptStartTime_ (x.SimCntrlSchm_MaxValueforOptStartTime_, f, this),
        SimCntrlSchm_CntrlAlgorithm_ (x.SimCntrlSchm_CntrlAlgorithm_, f, this),
        SimCntrlSchm_ConstTempGradDuringCool_ (x.SimCntrlSchm_ConstTempGradDuringCool_, f, this),
        SimCntrlSchm_ConstTempGradDuringHeat_ (x.SimCntrlSchm_ConstTempGradDuringHeat_, f, this),
        SimCntrlSchm_InitTempGradDuringCool_ (x.SimCntrlSchm_InitTempGradDuringCool_, f, this),
        SimCntrlSchm_InitTempGradDuringHeat_ (x.SimCntrlSchm_InitTempGradDuringHeat_, f, this),
        SimCntrlSchm_ConstStartTime_ (x.SimCntrlSchm_ConstStartTime_, f, this),
        SimCntrlSchm_NumofPrevDays_ (x.SimCntrlSchm_NumofPrevDays_, f, this)
      {
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme (e, f | ::xml_schema::flags::base, c),
        SimCntrlSchm_Name_ (this),
        SimCntrlSchm_ApplicSchedName_ (this),
        SimCntrlSchm_FanSchedName_ (this),
        SimCntrlSchm_CntlType_ (this),
        SimCntrlSchm_CntlZoneName_ (this),
        SimCntrlSchm_ZoneListName_ (this),
        SimCntrlSchm_MaxValueforOptStartTime_ (this),
        SimCntrlSchm_CntrlAlgorithm_ (this),
        SimCntrlSchm_ConstTempGradDuringCool_ (this),
        SimCntrlSchm_ConstTempGradDuringHeat_ (this),
        SimCntrlSchm_InitTempGradDuringCool_ (this),
        SimCntrlSchm_InitTempGradDuringHeat_ (this),
        SimCntrlSchm_ConstStartTime_ (this),
        SimCntrlSchm_NumofPrevDays_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrlSchm_Name
          //
          if (n.name () == "SimCntrlSchm_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_Name_type > r (
              SimCntrlSchm_Name_traits::create (i, f, this));

            if (!this->SimCntrlSchm_Name_)
            {
              this->SimCntrlSchm_Name_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_ApplicSchedName
          //
          if (n.name () == "SimCntrlSchm_ApplicSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_ApplicSchedName_type > r (
              SimCntrlSchm_ApplicSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_ApplicSchedName_)
            {
              this->SimCntrlSchm_ApplicSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_FanSchedName
          //
          if (n.name () == "SimCntrlSchm_FanSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_FanSchedName_type > r (
              SimCntrlSchm_FanSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_FanSchedName_)
            {
              this->SimCntrlSchm_FanSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_CntlType
          //
          if (n.name () == "SimCntrlSchm_CntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_CntlType_type > r (
              SimCntrlSchm_CntlType_traits::create (i, f, this));

            if (!this->SimCntrlSchm_CntlType_)
            {
              this->SimCntrlSchm_CntlType_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_CntlZoneName
          //
          if (n.name () == "SimCntrlSchm_CntlZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_CntlZoneName_type > r (
              SimCntrlSchm_CntlZoneName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_CntlZoneName_)
            {
              this->SimCntrlSchm_CntlZoneName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_ZoneListName
          //
          if (n.name () == "SimCntrlSchm_ZoneListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_ZoneListName_type > r (
              SimCntrlSchm_ZoneListName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_ZoneListName_)
            {
              this->SimCntrlSchm_ZoneListName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_MaxValueforOptStartTime
          //
          if (n.name () == "SimCntrlSchm_MaxValueforOptStartTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_MaxValueforOptStartTime_)
            {
              this->SimCntrlSchm_MaxValueforOptStartTime_.set (SimCntrlSchm_MaxValueforOptStartTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_CntrlAlgorithm
          //
          if (n.name () == "SimCntrlSchm_CntrlAlgorithm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_CntrlAlgorithm_type > r (
              SimCntrlSchm_CntrlAlgorithm_traits::create (i, f, this));

            if (!this->SimCntrlSchm_CntrlAlgorithm_)
            {
              this->SimCntrlSchm_CntrlAlgorithm_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_ConstTempGradDuringCool
          //
          if (n.name () == "SimCntrlSchm_ConstTempGradDuringCool" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_ConstTempGradDuringCool_)
            {
              this->SimCntrlSchm_ConstTempGradDuringCool_.set (SimCntrlSchm_ConstTempGradDuringCool_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_ConstTempGradDuringHeat
          //
          if (n.name () == "SimCntrlSchm_ConstTempGradDuringHeat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_ConstTempGradDuringHeat_)
            {
              this->SimCntrlSchm_ConstTempGradDuringHeat_.set (SimCntrlSchm_ConstTempGradDuringHeat_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_InitTempGradDuringCool
          //
          if (n.name () == "SimCntrlSchm_InitTempGradDuringCool" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_InitTempGradDuringCool_)
            {
              this->SimCntrlSchm_InitTempGradDuringCool_.set (SimCntrlSchm_InitTempGradDuringCool_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_InitTempGradDuringHeat
          //
          if (n.name () == "SimCntrlSchm_InitTempGradDuringHeat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_InitTempGradDuringHeat_)
            {
              this->SimCntrlSchm_InitTempGradDuringHeat_.set (SimCntrlSchm_InitTempGradDuringHeat_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_ConstStartTime
          //
          if (n.name () == "SimCntrlSchm_ConstStartTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_ConstStartTime_)
            {
              this->SimCntrlSchm_ConstStartTime_.set (SimCntrlSchm_ConstStartTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_NumofPrevDays
          //
          if (n.name () == "SimCntrlSchm_NumofPrevDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_NumofPrevDays_)
            {
              this->SimCntrlSchm_NumofPrevDays_.set (SimCntrlSchm_NumofPrevDays_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart* SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimControlScheme_AvailabilityManagerScheme_OptimumStart (*this, f, c);
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart& SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      operator= (const SimControlScheme_AvailabilityManagerScheme_OptimumStart& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimControlScheme_AvailabilityManagerScheme& > (*this) = x;
          this->SimCntrlSchm_Name_ = x.SimCntrlSchm_Name_;
          this->SimCntrlSchm_ApplicSchedName_ = x.SimCntrlSchm_ApplicSchedName_;
          this->SimCntrlSchm_FanSchedName_ = x.SimCntrlSchm_FanSchedName_;
          this->SimCntrlSchm_CntlType_ = x.SimCntrlSchm_CntlType_;
          this->SimCntrlSchm_CntlZoneName_ = x.SimCntrlSchm_CntlZoneName_;
          this->SimCntrlSchm_ZoneListName_ = x.SimCntrlSchm_ZoneListName_;
          this->SimCntrlSchm_MaxValueforOptStartTime_ = x.SimCntrlSchm_MaxValueforOptStartTime_;
          this->SimCntrlSchm_CntrlAlgorithm_ = x.SimCntrlSchm_CntrlAlgorithm_;
          this->SimCntrlSchm_ConstTempGradDuringCool_ = x.SimCntrlSchm_ConstTempGradDuringCool_;
          this->SimCntrlSchm_ConstTempGradDuringHeat_ = x.SimCntrlSchm_ConstTempGradDuringHeat_;
          this->SimCntrlSchm_InitTempGradDuringCool_ = x.SimCntrlSchm_InitTempGradDuringCool_;
          this->SimCntrlSchm_InitTempGradDuringHeat_ = x.SimCntrlSchm_InitTempGradDuringHeat_;
          this->SimCntrlSchm_ConstStartTime_ = x.SimCntrlSchm_ConstStartTime_;
          this->SimCntrlSchm_NumofPrevDays_ = x.SimCntrlSchm_NumofPrevDays_;
        }

        return *this;
      }

      SimControlScheme_AvailabilityManagerScheme_OptimumStart::
      ~SimControlScheme_AvailabilityManagerScheme_OptimumStart ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

