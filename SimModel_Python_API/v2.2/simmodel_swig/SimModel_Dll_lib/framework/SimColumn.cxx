// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimColumn.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimColumn
      // 

      const SimColumn::Name_optional& SimColumn::
      Name () const
      {
        return this->Name_;
      }

      SimColumn::Name_optional& SimColumn::
      Name ()
      {
        return this->Name_;
      }

      void SimColumn::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimColumn::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimColumn::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimColumn::ConstructionType_optional& SimColumn::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimColumn::ConstructionType_optional& SimColumn::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimColumn::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimColumn::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimColumn::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimColumn::ColumnHeight_optional& SimColumn::
      ColumnHeight () const
      {
        return this->ColumnHeight_;
      }

      SimColumn::ColumnHeight_optional& SimColumn::
      ColumnHeight ()
      {
        return this->ColumnHeight_;
      }

      void SimColumn::
      ColumnHeight (const ColumnHeight_type& x)
      {
        this->ColumnHeight_.set (x);
      }

      void SimColumn::
      ColumnHeight (const ColumnHeight_optional& x)
      {
        this->ColumnHeight_ = x;
      }

      const SimColumn::ColumWidth_optional& SimColumn::
      ColumWidth () const
      {
        return this->ColumWidth_;
      }

      SimColumn::ColumWidth_optional& SimColumn::
      ColumWidth ()
      {
        return this->ColumWidth_;
      }

      void SimColumn::
      ColumWidth (const ColumWidth_type& x)
      {
        this->ColumWidth_.set (x);
      }

      void SimColumn::
      ColumWidth (const ColumWidth_optional& x)
      {
        this->ColumWidth_ = x;
      }

      const SimColumn::ColumnDepth_optional& SimColumn::
      ColumnDepth () const
      {
        return this->ColumnDepth_;
      }

      SimColumn::ColumnDepth_optional& SimColumn::
      ColumnDepth ()
      {
        return this->ColumnDepth_;
      }

      void SimColumn::
      ColumnDepth (const ColumnDepth_type& x)
      {
        this->ColumnDepth_.set (x);
      }

      void SimColumn::
      ColumnDepth (const ColumnDepth_optional& x)
      {
        this->ColumnDepth_ = x;
      }

      const SimColumn::ColumnNetSurfaceAreaExtSides_optional& SimColumn::
      ColumnNetSurfaceAreaExtSides () const
      {
        return this->ColumnNetSurfaceAreaExtSides_;
      }

      SimColumn::ColumnNetSurfaceAreaExtSides_optional& SimColumn::
      ColumnNetSurfaceAreaExtSides ()
      {
        return this->ColumnNetSurfaceAreaExtSides_;
      }

      void SimColumn::
      ColumnNetSurfaceAreaExtSides (const ColumnNetSurfaceAreaExtSides_type& x)
      {
        this->ColumnNetSurfaceAreaExtSides_.set (x);
      }

      void SimColumn::
      ColumnNetSurfaceAreaExtSides (const ColumnNetSurfaceAreaExtSides_optional& x)
      {
        this->ColumnNetSurfaceAreaExtSides_ = x;
      }

      const SimColumn::ColumnGrossSurfaceArea_optional& SimColumn::
      ColumnGrossSurfaceArea () const
      {
        return this->ColumnGrossSurfaceArea_;
      }

      SimColumn::ColumnGrossSurfaceArea_optional& SimColumn::
      ColumnGrossSurfaceArea ()
      {
        return this->ColumnGrossSurfaceArea_;
      }

      void SimColumn::
      ColumnGrossSurfaceArea (const ColumnGrossSurfaceArea_type& x)
      {
        this->ColumnGrossSurfaceArea_.set (x);
      }

      void SimColumn::
      ColumnGrossSurfaceArea (const ColumnGrossSurfaceArea_optional& x)
      {
        this->ColumnGrossSurfaceArea_ = x;
      }

      const SimColumn::ColumnGrossCrossSectionArea_optional& SimColumn::
      ColumnGrossCrossSectionArea () const
      {
        return this->ColumnGrossCrossSectionArea_;
      }

      SimColumn::ColumnGrossCrossSectionArea_optional& SimColumn::
      ColumnGrossCrossSectionArea ()
      {
        return this->ColumnGrossCrossSectionArea_;
      }

      void SimColumn::
      ColumnGrossCrossSectionArea (const ColumnGrossCrossSectionArea_type& x)
      {
        this->ColumnGrossCrossSectionArea_.set (x);
      }

      void SimColumn::
      ColumnGrossCrossSectionArea (const ColumnGrossCrossSectionArea_optional& x)
      {
        this->ColumnGrossCrossSectionArea_ = x;
      }

      const SimColumn::ColumnGrossVolume_optional& SimColumn::
      ColumnGrossVolume () const
      {
        return this->ColumnGrossVolume_;
      }

      SimColumn::ColumnGrossVolume_optional& SimColumn::
      ColumnGrossVolume ()
      {
        return this->ColumnGrossVolume_;
      }

      void SimColumn::
      ColumnGrossVolume (const ColumnGrossVolume_type& x)
      {
        this->ColumnGrossVolume_.set (x);
      }

      void SimColumn::
      ColumnGrossVolume (const ColumnGrossVolume_optional& x)
      {
        this->ColumnGrossVolume_ = x;
      }

      const SimColumn::ColumNetVolume_optional& SimColumn::
      ColumNetVolume () const
      {
        return this->ColumNetVolume_;
      }

      SimColumn::ColumNetVolume_optional& SimColumn::
      ColumNetVolume ()
      {
        return this->ColumNetVolume_;
      }

      void SimColumn::
      ColumNetVolume (const ColumNetVolume_type& x)
      {
        this->ColumNetVolume_.set (x);
      }

      void SimColumn::
      ColumNetVolume (const ColumNetVolume_optional& x)
      {
        this->ColumNetVolume_ = x;
      }

      const SimColumn::ClassRef_UniFormat_optional& SimColumn::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimColumn::ClassRef_UniFormat_optional& SimColumn::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimColumn::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimColumn::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimColumn::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimColumn::MaterialList_optional& SimColumn::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimColumn::MaterialList_optional& SimColumn::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimColumn::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimColumn::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimColumn::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimColumn::ProfileAssociation_optional& SimColumn::
      ProfileAssociation () const
      {
        return this->ProfileAssociation_;
      }

      SimColumn::ProfileAssociation_optional& SimColumn::
      ProfileAssociation ()
      {
        return this->ProfileAssociation_;
      }

      void SimColumn::
      ProfileAssociation (const ProfileAssociation_type& x)
      {
        this->ProfileAssociation_.set (x);
      }

      void SimColumn::
      ProfileAssociation (const ProfileAssociation_optional& x)
      {
        this->ProfileAssociation_ = x;
      }

      void SimColumn::
      ProfileAssociation (::std::auto_ptr< ProfileAssociation_type > x)
      {
        this->ProfileAssociation_.set (x);
      }

      const SimColumn::VoidsInColumn_optional& SimColumn::
      VoidsInColumn () const
      {
        return this->VoidsInColumn_;
      }

      SimColumn::VoidsInColumn_optional& SimColumn::
      VoidsInColumn ()
      {
        return this->VoidsInColumn_;
      }

      void SimColumn::
      VoidsInColumn (const VoidsInColumn_type& x)
      {
        this->VoidsInColumn_.set (x);
      }

      void SimColumn::
      VoidsInColumn (const VoidsInColumn_optional& x)
      {
        this->VoidsInColumn_ = x;
      }

      void SimColumn::
      VoidsInColumn (::std::auto_ptr< VoidsInColumn_type > x)
      {
        this->VoidsInColumn_.set (x);
      }

      const SimColumn::ConnectedBeams_optional& SimColumn::
      ConnectedBeams () const
      {
        return this->ConnectedBeams_;
      }

      SimColumn::ConnectedBeams_optional& SimColumn::
      ConnectedBeams ()
      {
        return this->ConnectedBeams_;
      }

      void SimColumn::
      ConnectedBeams (const ConnectedBeams_type& x)
      {
        this->ConnectedBeams_.set (x);
      }

      void SimColumn::
      ConnectedBeams (const ConnectedBeams_optional& x)
      {
        this->ConnectedBeams_ = x;
      }

      void SimColumn::
      ConnectedBeams (::std::auto_ptr< ConnectedBeams_type > x)
      {
        this->ConnectedBeams_.set (x);
      }

      const SimColumn::ConnectedColumns_optional& SimColumn::
      ConnectedColumns () const
      {
        return this->ConnectedColumns_;
      }

      SimColumn::ConnectedColumns_optional& SimColumn::
      ConnectedColumns ()
      {
        return this->ConnectedColumns_;
      }

      void SimColumn::
      ConnectedColumns (const ConnectedColumns_type& x)
      {
        this->ConnectedColumns_.set (x);
      }

      void SimColumn::
      ConnectedColumns (const ConnectedColumns_optional& x)
      {
        this->ConnectedColumns_ = x;
      }

      void SimColumn::
      ConnectedColumns (::std::auto_ptr< ConnectedColumns_type > x)
      {
        this->ConnectedColumns_.set (x);
      }

      const SimColumn::Representation_optional& SimColumn::
      Representation () const
      {
        return this->Representation_;
      }

      SimColumn::Representation_optional& SimColumn::
      Representation ()
      {
        return this->Representation_;
      }

      void SimColumn::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimColumn::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimColumn::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimColumn
      //

      SimColumn::
      SimColumn ()
      : ::schema::simxml::SimModelCore::SimBuildingElement (),
        Name_ (this),
        ConstructionType_ (this),
        ColumnHeight_ (this),
        ColumWidth_ (this),
        ColumnDepth_ (this),
        ColumnNetSurfaceAreaExtSides_ (this),
        ColumnGrossSurfaceArea_ (this),
        ColumnGrossCrossSectionArea_ (this),
        ColumnGrossVolume_ (this),
        ColumNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        ProfileAssociation_ (this),
        VoidsInColumn_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        Representation_ (this)
      {
      }

      SimColumn::
      SimColumn (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBuildingElement (RefId),
        Name_ (this),
        ConstructionType_ (this),
        ColumnHeight_ (this),
        ColumWidth_ (this),
        ColumnDepth_ (this),
        ColumnNetSurfaceAreaExtSides_ (this),
        ColumnGrossSurfaceArea_ (this),
        ColumnGrossCrossSectionArea_ (this),
        ColumnGrossVolume_ (this),
        ColumNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        ProfileAssociation_ (this),
        VoidsInColumn_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        Representation_ (this)
      {
      }

      SimColumn::
      SimColumn (const SimColumn& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBuildingElement (x, f, c),
        Name_ (x.Name_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        ColumnHeight_ (x.ColumnHeight_, f, this),
        ColumWidth_ (x.ColumWidth_, f, this),
        ColumnDepth_ (x.ColumnDepth_, f, this),
        ColumnNetSurfaceAreaExtSides_ (x.ColumnNetSurfaceAreaExtSides_, f, this),
        ColumnGrossSurfaceArea_ (x.ColumnGrossSurfaceArea_, f, this),
        ColumnGrossCrossSectionArea_ (x.ColumnGrossCrossSectionArea_, f, this),
        ColumnGrossVolume_ (x.ColumnGrossVolume_, f, this),
        ColumNetVolume_ (x.ColumNetVolume_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        ProfileAssociation_ (x.ProfileAssociation_, f, this),
        VoidsInColumn_ (x.VoidsInColumn_, f, this),
        ConnectedBeams_ (x.ConnectedBeams_, f, this),
        ConnectedColumns_ (x.ConnectedColumns_, f, this),
        Representation_ (x.Representation_, f, this)
      {
      }

      SimColumn::
      SimColumn (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBuildingElement (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        ConstructionType_ (this),
        ColumnHeight_ (this),
        ColumWidth_ (this),
        ColumnDepth_ (this),
        ColumnNetSurfaceAreaExtSides_ (this),
        ColumnGrossSurfaceArea_ (this),
        ColumnGrossCrossSectionArea_ (this),
        ColumnGrossVolume_ (this),
        ColumNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        ProfileAssociation_ (this),
        VoidsInColumn_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        Representation_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimColumn::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBuildingElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // ColumnHeight
          //
          if (n.name () == "ColumnHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumnHeight_)
            {
              this->ColumnHeight_.set (ColumnHeight_traits::create (i, f, this));
              continue;
            }
          }

          // ColumWidth
          //
          if (n.name () == "ColumWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumWidth_)
            {
              this->ColumWidth_.set (ColumWidth_traits::create (i, f, this));
              continue;
            }
          }

          // ColumnDepth
          //
          if (n.name () == "ColumnDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumnDepth_)
            {
              this->ColumnDepth_.set (ColumnDepth_traits::create (i, f, this));
              continue;
            }
          }

          // ColumnNetSurfaceAreaExtSides
          //
          if (n.name () == "ColumnNetSurfaceAreaExtSides" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumnNetSurfaceAreaExtSides_)
            {
              this->ColumnNetSurfaceAreaExtSides_.set (ColumnNetSurfaceAreaExtSides_traits::create (i, f, this));
              continue;
            }
          }

          // ColumnGrossSurfaceArea
          //
          if (n.name () == "ColumnGrossSurfaceArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumnGrossSurfaceArea_)
            {
              this->ColumnGrossSurfaceArea_.set (ColumnGrossSurfaceArea_traits::create (i, f, this));
              continue;
            }
          }

          // ColumnGrossCrossSectionArea
          //
          if (n.name () == "ColumnGrossCrossSectionArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumnGrossCrossSectionArea_)
            {
              this->ColumnGrossCrossSectionArea_.set (ColumnGrossCrossSectionArea_traits::create (i, f, this));
              continue;
            }
          }

          // ColumnGrossVolume
          //
          if (n.name () == "ColumnGrossVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumnGrossVolume_)
            {
              this->ColumnGrossVolume_.set (ColumnGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ColumNetVolume
          //
          if (n.name () == "ColumNetVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ColumNetVolume_)
            {
              this->ColumNetVolume_.set (ColumNetVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // ProfileAssociation
          //
          if (n.name () == "ProfileAssociation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProfileAssociation_type > r (
              ProfileAssociation_traits::create (i, f, this));

            if (!this->ProfileAssociation_)
            {
              this->ProfileAssociation_.set (r);
              continue;
            }
          }

          // VoidsInColumn
          //
          if (n.name () == "VoidsInColumn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< VoidsInColumn_type > r (
              VoidsInColumn_traits::create (i, f, this));

            if (!this->VoidsInColumn_)
            {
              this->VoidsInColumn_.set (r);
              continue;
            }
          }

          // ConnectedBeams
          //
          if (n.name () == "ConnectedBeams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedBeams_type > r (
              ConnectedBeams_traits::create (i, f, this));

            if (!this->ConnectedBeams_)
            {
              this->ConnectedBeams_.set (r);
              continue;
            }
          }

          // ConnectedColumns
          //
          if (n.name () == "ConnectedColumns" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedColumns_type > r (
              ConnectedColumns_traits::create (i, f, this));

            if (!this->ConnectedColumns_)
            {
              this->ConnectedColumns_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimColumn* SimColumn::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimColumn (*this, f, c);
      }

      SimColumn& SimColumn::
      operator= (const SimColumn& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBuildingElement& > (*this) = x;
          this->Name_ = x.Name_;
          this->ConstructionType_ = x.ConstructionType_;
          this->ColumnHeight_ = x.ColumnHeight_;
          this->ColumWidth_ = x.ColumWidth_;
          this->ColumnDepth_ = x.ColumnDepth_;
          this->ColumnNetSurfaceAreaExtSides_ = x.ColumnNetSurfaceAreaExtSides_;
          this->ColumnGrossSurfaceArea_ = x.ColumnGrossSurfaceArea_;
          this->ColumnGrossCrossSectionArea_ = x.ColumnGrossCrossSectionArea_;
          this->ColumnGrossVolume_ = x.ColumnGrossVolume_;
          this->ColumNetVolume_ = x.ColumNetVolume_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->ProfileAssociation_ = x.ProfileAssociation_;
          this->VoidsInColumn_ = x.VoidsInColumn_;
          this->ConnectedBeams_ = x.ConnectedBeams_;
          this->ConnectedColumns_ = x.ConnectedColumns_;
          this->Representation_ = x.Representation_;
        }

        return *this;
      }

      SimColumn::
      ~SimColumn ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

