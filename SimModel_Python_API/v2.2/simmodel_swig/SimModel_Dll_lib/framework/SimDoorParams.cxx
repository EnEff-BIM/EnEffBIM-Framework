// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimDoorParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimDoorParams
      // 

      const SimDoorParams::DoorType_optional& SimDoorParams::
      DoorType () const
      {
        return this->DoorType_;
      }

      SimDoorParams::DoorType_optional& SimDoorParams::
      DoorType ()
      {
        return this->DoorType_;
      }

      void SimDoorParams::
      DoorType (const DoorType_type& x)
      {
        this->DoorType_.set (x);
      }

      void SimDoorParams::
      DoorType (const DoorType_optional& x)
      {
        this->DoorType_ = x;
      }

      void SimDoorParams::
      DoorType (::std::auto_ptr< DoorType_type > x)
      {
        this->DoorType_.set (x);
      }

      const SimDoorParams::DoorHeight_optional& SimDoorParams::
      DoorHeight () const
      {
        return this->DoorHeight_;
      }

      SimDoorParams::DoorHeight_optional& SimDoorParams::
      DoorHeight ()
      {
        return this->DoorHeight_;
      }

      void SimDoorParams::
      DoorHeight (const DoorHeight_type& x)
      {
        this->DoorHeight_.set (x);
      }

      void SimDoorParams::
      DoorHeight (const DoorHeight_optional& x)
      {
        this->DoorHeight_ = x;
      }

      const SimDoorParams::DoorWidth_optional& SimDoorParams::
      DoorWidth () const
      {
        return this->DoorWidth_;
      }

      SimDoorParams::DoorWidth_optional& SimDoorParams::
      DoorWidth ()
      {
        return this->DoorWidth_;
      }

      void SimDoorParams::
      DoorWidth (const DoorWidth_type& x)
      {
        this->DoorWidth_.set (x);
      }

      void SimDoorParams::
      DoorWidth (const DoorWidth_optional& x)
      {
        this->DoorWidth_ = x;
      }

      const SimDoorParams::DoorPanelThickness_optional& SimDoorParams::
      DoorPanelThickness () const
      {
        return this->DoorPanelThickness_;
      }

      SimDoorParams::DoorPanelThickness_optional& SimDoorParams::
      DoorPanelThickness ()
      {
        return this->DoorPanelThickness_;
      }

      void SimDoorParams::
      DoorPanelThickness (const DoorPanelThickness_type& x)
      {
        this->DoorPanelThickness_.set (x);
      }

      void SimDoorParams::
      DoorPanelThickness (const DoorPanelThickness_optional& x)
      {
        this->DoorPanelThickness_ = x;
      }

      const SimDoorParams::FrameThickness_optional& SimDoorParams::
      FrameThickness () const
      {
        return this->FrameThickness_;
      }

      SimDoorParams::FrameThickness_optional& SimDoorParams::
      FrameThickness ()
      {
        return this->FrameThickness_;
      }

      void SimDoorParams::
      FrameThickness (const FrameThickness_type& x)
      {
        this->FrameThickness_.set (x);
      }

      void SimDoorParams::
      FrameThickness (const FrameThickness_optional& x)
      {
        this->FrameThickness_ = x;
      }

      const SimDoorParams::FrameDepth_optional& SimDoorParams::
      FrameDepth () const
      {
        return this->FrameDepth_;
      }

      SimDoorParams::FrameDepth_optional& SimDoorParams::
      FrameDepth ()
      {
        return this->FrameDepth_;
      }

      void SimDoorParams::
      FrameDepth (const FrameDepth_type& x)
      {
        this->FrameDepth_.set (x);
      }

      void SimDoorParams::
      FrameDepth (const FrameDepth_optional& x)
      {
        this->FrameDepth_ = x;
      }

      const SimDoorParams::YDirectionX_optional& SimDoorParams::
      YDirectionX () const
      {
        return this->YDirectionX_;
      }

      SimDoorParams::YDirectionX_optional& SimDoorParams::
      YDirectionX ()
      {
        return this->YDirectionX_;
      }

      void SimDoorParams::
      YDirectionX (const YDirectionX_type& x)
      {
        this->YDirectionX_.set (x);
      }

      void SimDoorParams::
      YDirectionX (const YDirectionX_optional& x)
      {
        this->YDirectionX_ = x;
      }

      const SimDoorParams::YDirectionY_optional& SimDoorParams::
      YDirectionY () const
      {
        return this->YDirectionY_;
      }

      SimDoorParams::YDirectionY_optional& SimDoorParams::
      YDirectionY ()
      {
        return this->YDirectionY_;
      }

      void SimDoorParams::
      YDirectionY (const YDirectionY_type& x)
      {
        this->YDirectionY_.set (x);
      }

      void SimDoorParams::
      YDirectionY (const YDirectionY_optional& x)
      {
        this->YDirectionY_ = x;
      }

      const SimDoorParams::YDirectionZ_optional& SimDoorParams::
      YDirectionZ () const
      {
        return this->YDirectionZ_;
      }

      SimDoorParams::YDirectionZ_optional& SimDoorParams::
      YDirectionZ ()
      {
        return this->YDirectionZ_;
      }

      void SimDoorParams::
      YDirectionZ (const YDirectionZ_type& x)
      {
        this->YDirectionZ_.set (x);
      }

      void SimDoorParams::
      YDirectionZ (const YDirectionZ_optional& x)
      {
        this->YDirectionZ_ = x;
      }

      const SimDoorParams::DoorPanelProfiles_optional& SimDoorParams::
      DoorPanelProfiles () const
      {
        return this->DoorPanelProfiles_;
      }

      SimDoorParams::DoorPanelProfiles_optional& SimDoorParams::
      DoorPanelProfiles ()
      {
        return this->DoorPanelProfiles_;
      }

      void SimDoorParams::
      DoorPanelProfiles (const DoorPanelProfiles_type& x)
      {
        this->DoorPanelProfiles_.set (x);
      }

      void SimDoorParams::
      DoorPanelProfiles (const DoorPanelProfiles_optional& x)
      {
        this->DoorPanelProfiles_ = x;
      }

      void SimDoorParams::
      DoorPanelProfiles (::std::auto_ptr< DoorPanelProfiles_type > x)
      {
        this->DoorPanelProfiles_.set (x);
      }

      const SimDoorParams::DoorFrameProfiles_optional& SimDoorParams::
      DoorFrameProfiles () const
      {
        return this->DoorFrameProfiles_;
      }

      SimDoorParams::DoorFrameProfiles_optional& SimDoorParams::
      DoorFrameProfiles ()
      {
        return this->DoorFrameProfiles_;
      }

      void SimDoorParams::
      DoorFrameProfiles (const DoorFrameProfiles_type& x)
      {
        this->DoorFrameProfiles_.set (x);
      }

      void SimDoorParams::
      DoorFrameProfiles (const DoorFrameProfiles_optional& x)
      {
        this->DoorFrameProfiles_ = x;
      }

      void SimDoorParams::
      DoorFrameProfiles (::std::auto_ptr< DoorFrameProfiles_type > x)
      {
        this->DoorFrameProfiles_.set (x);
      }

      const SimDoorParams::OpeningProfilePath_optional& SimDoorParams::
      OpeningProfilePath () const
      {
        return this->OpeningProfilePath_;
      }

      SimDoorParams::OpeningProfilePath_optional& SimDoorParams::
      OpeningProfilePath ()
      {
        return this->OpeningProfilePath_;
      }

      void SimDoorParams::
      OpeningProfilePath (const OpeningProfilePath_type& x)
      {
        this->OpeningProfilePath_.set (x);
      }

      void SimDoorParams::
      OpeningProfilePath (const OpeningProfilePath_optional& x)
      {
        this->OpeningProfilePath_ = x;
      }

      void SimDoorParams::
      OpeningProfilePath (::std::auto_ptr< OpeningProfilePath_type > x)
      {
        this->OpeningProfilePath_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimDoorParams
      //

      SimDoorParams::
      SimDoorParams ()
      : ::schema::simxml::SimModelCore::SimBldgModelParams (),
        DoorType_ (this),
        DoorHeight_ (this),
        DoorWidth_ (this),
        DoorPanelThickness_ (this),
        FrameThickness_ (this),
        FrameDepth_ (this),
        YDirectionX_ (this),
        YDirectionY_ (this),
        YDirectionZ_ (this),
        DoorPanelProfiles_ (this),
        DoorFrameProfiles_ (this),
        OpeningProfilePath_ (this)
      {
      }

      SimDoorParams::
      SimDoorParams (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (RefId),
        DoorType_ (this),
        DoorHeight_ (this),
        DoorWidth_ (this),
        DoorPanelThickness_ (this),
        FrameThickness_ (this),
        FrameDepth_ (this),
        YDirectionX_ (this),
        YDirectionY_ (this),
        YDirectionZ_ (this),
        DoorPanelProfiles_ (this),
        DoorFrameProfiles_ (this),
        OpeningProfilePath_ (this)
      {
      }

      SimDoorParams::
      SimDoorParams (const SimDoorParams& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (x, f, c),
        DoorType_ (x.DoorType_, f, this),
        DoorHeight_ (x.DoorHeight_, f, this),
        DoorWidth_ (x.DoorWidth_, f, this),
        DoorPanelThickness_ (x.DoorPanelThickness_, f, this),
        FrameThickness_ (x.FrameThickness_, f, this),
        FrameDepth_ (x.FrameDepth_, f, this),
        YDirectionX_ (x.YDirectionX_, f, this),
        YDirectionY_ (x.YDirectionY_, f, this),
        YDirectionZ_ (x.YDirectionZ_, f, this),
        DoorPanelProfiles_ (x.DoorPanelProfiles_, f, this),
        DoorFrameProfiles_ (x.DoorFrameProfiles_, f, this),
        OpeningProfilePath_ (x.OpeningProfilePath_, f, this)
      {
      }

      SimDoorParams::
      SimDoorParams (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        DoorType_ (this),
        DoorHeight_ (this),
        DoorWidth_ (this),
        DoorPanelThickness_ (this),
        FrameThickness_ (this),
        FrameDepth_ (this),
        YDirectionX_ (this),
        YDirectionY_ (this),
        YDirectionZ_ (this),
        DoorPanelProfiles_ (this),
        DoorFrameProfiles_ (this),
        OpeningProfilePath_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimDoorParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DoorType
          //
          if (n.name () == "DoorType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DoorType_type > r (
              DoorType_traits::create (i, f, this));

            if (!this->DoorType_)
            {
              this->DoorType_.set (r);
              continue;
            }
          }

          // DoorHeight
          //
          if (n.name () == "DoorHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DoorHeight_)
            {
              this->DoorHeight_.set (DoorHeight_traits::create (i, f, this));
              continue;
            }
          }

          // DoorWidth
          //
          if (n.name () == "DoorWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DoorWidth_)
            {
              this->DoorWidth_.set (DoorWidth_traits::create (i, f, this));
              continue;
            }
          }

          // DoorPanelThickness
          //
          if (n.name () == "DoorPanelThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DoorPanelThickness_)
            {
              this->DoorPanelThickness_.set (DoorPanelThickness_traits::create (i, f, this));
              continue;
            }
          }

          // FrameThickness
          //
          if (n.name () == "FrameThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FrameThickness_)
            {
              this->FrameThickness_.set (FrameThickness_traits::create (i, f, this));
              continue;
            }
          }

          // FrameDepth
          //
          if (n.name () == "FrameDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FrameDepth_)
            {
              this->FrameDepth_.set (FrameDepth_traits::create (i, f, this));
              continue;
            }
          }

          // YDirectionX
          //
          if (n.name () == "YDirectionX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->YDirectionX_)
            {
              this->YDirectionX_.set (YDirectionX_traits::create (i, f, this));
              continue;
            }
          }

          // YDirectionY
          //
          if (n.name () == "YDirectionY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->YDirectionY_)
            {
              this->YDirectionY_.set (YDirectionY_traits::create (i, f, this));
              continue;
            }
          }

          // YDirectionZ
          //
          if (n.name () == "YDirectionZ" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->YDirectionZ_)
            {
              this->YDirectionZ_.set (YDirectionZ_traits::create (i, f, this));
              continue;
            }
          }

          // DoorPanelProfiles
          //
          if (n.name () == "DoorPanelProfiles" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DoorPanelProfiles_type > r (
              DoorPanelProfiles_traits::create (i, f, this));

            if (!this->DoorPanelProfiles_)
            {
              this->DoorPanelProfiles_.set (r);
              continue;
            }
          }

          // DoorFrameProfiles
          //
          if (n.name () == "DoorFrameProfiles" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DoorFrameProfiles_type > r (
              DoorFrameProfiles_traits::create (i, f, this));

            if (!this->DoorFrameProfiles_)
            {
              this->DoorFrameProfiles_.set (r);
              continue;
            }
          }

          // OpeningProfilePath
          //
          if (n.name () == "OpeningProfilePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< OpeningProfilePath_type > r (
              OpeningProfilePath_traits::create (i, f, this));

            if (!this->OpeningProfilePath_)
            {
              this->OpeningProfilePath_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimDoorParams* SimDoorParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimDoorParams (*this, f, c);
      }

      SimDoorParams& SimDoorParams::
      operator= (const SimDoorParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBldgModelParams& > (*this) = x;
          this->DoorType_ = x.DoorType_;
          this->DoorHeight_ = x.DoorHeight_;
          this->DoorWidth_ = x.DoorWidth_;
          this->DoorPanelThickness_ = x.DoorPanelThickness_;
          this->FrameThickness_ = x.FrameThickness_;
          this->FrameDepth_ = x.FrameDepth_;
          this->YDirectionX_ = x.YDirectionX_;
          this->YDirectionY_ = x.YDirectionY_;
          this->YDirectionZ_ = x.YDirectionZ_;
          this->DoorPanelProfiles_ = x.DoorPanelProfiles_;
          this->DoorFrameProfiles_ = x.DoorFrameProfiles_;
          this->OpeningProfilePath_ = x.OpeningProfilePath_;
        }

        return *this;
      }

      SimDoorParams::
      ~SimDoorParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

