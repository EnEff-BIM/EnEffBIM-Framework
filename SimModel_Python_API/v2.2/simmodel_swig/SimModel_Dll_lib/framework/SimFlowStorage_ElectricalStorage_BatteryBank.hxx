// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_STORAGE_ELECTRICAL_STORAGE_BATTERY_BANK_HXX
#define SIM_FLOW_STORAGE_ELECTRICAL_STORAGE_BATTERY_BANK_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowStorage_ElectricalStorage_BatteryBank;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowstorage_electricalstorage.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowStorage_ElectricalStorage_BatteryBank: public ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage
      {
        public:
        // SimFlowSto_RadiativeFract
        //
        typedef ::xml_schema::double_ SimFlowSto_RadiativeFract_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_RadiativeFract_type > SimFlowSto_RadiativeFract_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_RadiativeFract_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_RadiativeFract_traits;

        const SimFlowSto_RadiativeFract_optional&
        SimFlowSto_RadiativeFract () const;

        SimFlowSto_RadiativeFract_optional&
        SimFlowSto_RadiativeFract ();

        void
        SimFlowSto_RadiativeFract (const SimFlowSto_RadiativeFract_type& x);

        void
        SimFlowSto_RadiativeFract (const SimFlowSto_RadiativeFract_optional& x);

        // SimFlowSto_NumberBatteryModsinParallel
        //
        typedef ::xml_schema::int_ SimFlowSto_NumberBatteryModsinParallel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_NumberBatteryModsinParallel_type > SimFlowSto_NumberBatteryModsinParallel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_NumberBatteryModsinParallel_type, char > SimFlowSto_NumberBatteryModsinParallel_traits;

        const SimFlowSto_NumberBatteryModsinParallel_optional&
        SimFlowSto_NumberBatteryModsinParallel () const;

        SimFlowSto_NumberBatteryModsinParallel_optional&
        SimFlowSto_NumberBatteryModsinParallel ();

        void
        SimFlowSto_NumberBatteryModsinParallel (const SimFlowSto_NumberBatteryModsinParallel_type& x);

        void
        SimFlowSto_NumberBatteryModsinParallel (const SimFlowSto_NumberBatteryModsinParallel_optional& x);

        // SimFlowSto_NumberBatteryModsinSeries
        //
        typedef ::xml_schema::int_ SimFlowSto_NumberBatteryModsinSeries_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_NumberBatteryModsinSeries_type > SimFlowSto_NumberBatteryModsinSeries_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_NumberBatteryModsinSeries_type, char > SimFlowSto_NumberBatteryModsinSeries_traits;

        const SimFlowSto_NumberBatteryModsinSeries_optional&
        SimFlowSto_NumberBatteryModsinSeries () const;

        SimFlowSto_NumberBatteryModsinSeries_optional&
        SimFlowSto_NumberBatteryModsinSeries ();

        void
        SimFlowSto_NumberBatteryModsinSeries (const SimFlowSto_NumberBatteryModsinSeries_type& x);

        void
        SimFlowSto_NumberBatteryModsinSeries (const SimFlowSto_NumberBatteryModsinSeries_optional& x);

        // SimFlowSto_MaxModCap
        //
        typedef ::xml_schema::double_ SimFlowSto_MaxModCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_MaxModCap_type > SimFlowSto_MaxModCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_MaxModCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_MaxModCap_traits;

        const SimFlowSto_MaxModCap_optional&
        SimFlowSto_MaxModCap () const;

        SimFlowSto_MaxModCap_optional&
        SimFlowSto_MaxModCap ();

        void
        SimFlowSto_MaxModCap (const SimFlowSto_MaxModCap_type& x);

        void
        SimFlowSto_MaxModCap (const SimFlowSto_MaxModCap_optional& x);

        // SimFlowSto_InitialFractionalStateChrg
        //
        typedef ::xml_schema::double_ SimFlowSto_InitialFractionalStateChrg_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_InitialFractionalStateChrg_type > SimFlowSto_InitialFractionalStateChrg_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_InitialFractionalStateChrg_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_InitialFractionalStateChrg_traits;

        const SimFlowSto_InitialFractionalStateChrg_optional&
        SimFlowSto_InitialFractionalStateChrg () const;

        SimFlowSto_InitialFractionalStateChrg_optional&
        SimFlowSto_InitialFractionalStateChrg ();

        void
        SimFlowSto_InitialFractionalStateChrg (const SimFlowSto_InitialFractionalStateChrg_type& x);

        void
        SimFlowSto_InitialFractionalStateChrg (const SimFlowSto_InitialFractionalStateChrg_optional& x);

        // SimFlowSto_FractionAvailChrgCap
        //
        typedef ::xml_schema::double_ SimFlowSto_FractionAvailChrgCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_FractionAvailChrgCap_type > SimFlowSto_FractionAvailChrgCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_FractionAvailChrgCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_FractionAvailChrgCap_traits;

        const SimFlowSto_FractionAvailChrgCap_optional&
        SimFlowSto_FractionAvailChrgCap () const;

        SimFlowSto_FractionAvailChrgCap_optional&
        SimFlowSto_FractionAvailChrgCap ();

        void
        SimFlowSto_FractionAvailChrgCap (const SimFlowSto_FractionAvailChrgCap_type& x);

        void
        SimFlowSto_FractionAvailChrgCap (const SimFlowSto_FractionAvailChrgCap_optional& x);

        // SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg
        //
        typedef ::xml_schema::double_ SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_type > SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_traits;

        const SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional&
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg () const;

        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional&
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg ();

        void
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg (const SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_type& x);

        void
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg (const SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional& x);

        // SimFlowSto_FullyChrgdModOpenCircVoltage
        //
        typedef ::xml_schema::double_ SimFlowSto_FullyChrgdModOpenCircVoltage_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_FullyChrgdModOpenCircVoltage_type > SimFlowSto_FullyChrgdModOpenCircVoltage_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_FullyChrgdModOpenCircVoltage_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_FullyChrgdModOpenCircVoltage_traits;

        const SimFlowSto_FullyChrgdModOpenCircVoltage_optional&
        SimFlowSto_FullyChrgdModOpenCircVoltage () const;

        SimFlowSto_FullyChrgdModOpenCircVoltage_optional&
        SimFlowSto_FullyChrgdModOpenCircVoltage ();

        void
        SimFlowSto_FullyChrgdModOpenCircVoltage (const SimFlowSto_FullyChrgdModOpenCircVoltage_type& x);

        void
        SimFlowSto_FullyChrgdModOpenCircVoltage (const SimFlowSto_FullyChrgdModOpenCircVoltage_optional& x);

        // SimFlowSto_FullyDischargedModOpenCircVoltage
        //
        typedef ::xml_schema::double_ SimFlowSto_FullyDischargedModOpenCircVoltage_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_FullyDischargedModOpenCircVoltage_type > SimFlowSto_FullyDischargedModOpenCircVoltage_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_FullyDischargedModOpenCircVoltage_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_FullyDischargedModOpenCircVoltage_traits;

        const SimFlowSto_FullyDischargedModOpenCircVoltage_optional&
        SimFlowSto_FullyDischargedModOpenCircVoltage () const;

        SimFlowSto_FullyDischargedModOpenCircVoltage_optional&
        SimFlowSto_FullyDischargedModOpenCircVoltage ();

        void
        SimFlowSto_FullyDischargedModOpenCircVoltage (const SimFlowSto_FullyDischargedModOpenCircVoltage_type& x);

        void
        SimFlowSto_FullyDischargedModOpenCircVoltage (const SimFlowSto_FullyDischargedModOpenCircVoltage_optional& x);

        // SimFlowSto_VoltChangeCurveNameCharging
        //
        typedef ::xml_schema::idref SimFlowSto_VoltChangeCurveNameCharging_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_VoltChangeCurveNameCharging_type > SimFlowSto_VoltChangeCurveNameCharging_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_VoltChangeCurveNameCharging_type, char > SimFlowSto_VoltChangeCurveNameCharging_traits;

        const SimFlowSto_VoltChangeCurveNameCharging_optional&
        SimFlowSto_VoltChangeCurveNameCharging () const;

        SimFlowSto_VoltChangeCurveNameCharging_optional&
        SimFlowSto_VoltChangeCurveNameCharging ();

        void
        SimFlowSto_VoltChangeCurveNameCharging (const SimFlowSto_VoltChangeCurveNameCharging_type& x);

        void
        SimFlowSto_VoltChangeCurveNameCharging (const SimFlowSto_VoltChangeCurveNameCharging_optional& x);

        void
        SimFlowSto_VoltChangeCurveNameCharging (::std::auto_ptr< SimFlowSto_VoltChangeCurveNameCharging_type > p);

        // SimFlowSto_VoltChangeCurveNameDischarging
        //
        typedef ::xml_schema::idref SimFlowSto_VoltChangeCurveNameDischarging_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_VoltChangeCurveNameDischarging_type > SimFlowSto_VoltChangeCurveNameDischarging_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_VoltChangeCurveNameDischarging_type, char > SimFlowSto_VoltChangeCurveNameDischarging_traits;

        const SimFlowSto_VoltChangeCurveNameDischarging_optional&
        SimFlowSto_VoltChangeCurveNameDischarging () const;

        SimFlowSto_VoltChangeCurveNameDischarging_optional&
        SimFlowSto_VoltChangeCurveNameDischarging ();

        void
        SimFlowSto_VoltChangeCurveNameDischarging (const SimFlowSto_VoltChangeCurveNameDischarging_type& x);

        void
        SimFlowSto_VoltChangeCurveNameDischarging (const SimFlowSto_VoltChangeCurveNameDischarging_optional& x);

        void
        SimFlowSto_VoltChangeCurveNameDischarging (::std::auto_ptr< SimFlowSto_VoltChangeCurveNameDischarging_type > p);

        // SimFlowSto_ModInternalElec
        //
        typedef ::xml_schema::double_ SimFlowSto_ModInternalElec_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_ModInternalElec_type > SimFlowSto_ModInternalElec_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_ModInternalElec_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_ModInternalElec_traits;

        const SimFlowSto_ModInternalElec_optional&
        SimFlowSto_ModInternalElec () const;

        SimFlowSto_ModInternalElec_optional&
        SimFlowSto_ModInternalElec ();

        void
        SimFlowSto_ModInternalElec (const SimFlowSto_ModInternalElec_type& x);

        void
        SimFlowSto_ModInternalElec (const SimFlowSto_ModInternalElec_optional& x);

        // SimFlowSto_MaxModDischargingCurrent
        //
        typedef ::xml_schema::double_ SimFlowSto_MaxModDischargingCurrent_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_MaxModDischargingCurrent_type > SimFlowSto_MaxModDischargingCurrent_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_MaxModDischargingCurrent_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_MaxModDischargingCurrent_traits;

        const SimFlowSto_MaxModDischargingCurrent_optional&
        SimFlowSto_MaxModDischargingCurrent () const;

        SimFlowSto_MaxModDischargingCurrent_optional&
        SimFlowSto_MaxModDischargingCurrent ();

        void
        SimFlowSto_MaxModDischargingCurrent (const SimFlowSto_MaxModDischargingCurrent_type& x);

        void
        SimFlowSto_MaxModDischargingCurrent (const SimFlowSto_MaxModDischargingCurrent_optional& x);

        // SimFlowSto_ModCut_offVoltage
        //
        typedef ::xml_schema::double_ SimFlowSto_ModCut_offVoltage_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_ModCut_offVoltage_type > SimFlowSto_ModCut_offVoltage_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_ModCut_offVoltage_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_ModCut_offVoltage_traits;

        const SimFlowSto_ModCut_offVoltage_optional&
        SimFlowSto_ModCut_offVoltage () const;

        SimFlowSto_ModCut_offVoltage_optional&
        SimFlowSto_ModCut_offVoltage ();

        void
        SimFlowSto_ModCut_offVoltage (const SimFlowSto_ModCut_offVoltage_type& x);

        void
        SimFlowSto_ModCut_offVoltage (const SimFlowSto_ModCut_offVoltage_optional& x);

        // SimFlowSto_ModChrgRateLimit
        //
        typedef ::xml_schema::double_ SimFlowSto_ModChrgRateLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_ModChrgRateLimit_type > SimFlowSto_ModChrgRateLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_ModChrgRateLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_ModChrgRateLimit_traits;

        const SimFlowSto_ModChrgRateLimit_optional&
        SimFlowSto_ModChrgRateLimit () const;

        SimFlowSto_ModChrgRateLimit_optional&
        SimFlowSto_ModChrgRateLimit ();

        void
        SimFlowSto_ModChrgRateLimit (const SimFlowSto_ModChrgRateLimit_type& x);

        void
        SimFlowSto_ModChrgRateLimit (const SimFlowSto_ModChrgRateLimit_optional& x);

        // SimFlowSto_BatteryLifeCalculation
        //
        typedef ::xml_schema::string SimFlowSto_BatteryLifeCalculation_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_BatteryLifeCalculation_type > SimFlowSto_BatteryLifeCalculation_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_BatteryLifeCalculation_type, char > SimFlowSto_BatteryLifeCalculation_traits;

        const SimFlowSto_BatteryLifeCalculation_optional&
        SimFlowSto_BatteryLifeCalculation () const;

        SimFlowSto_BatteryLifeCalculation_optional&
        SimFlowSto_BatteryLifeCalculation ();

        void
        SimFlowSto_BatteryLifeCalculation (const SimFlowSto_BatteryLifeCalculation_type& x);

        void
        SimFlowSto_BatteryLifeCalculation (const SimFlowSto_BatteryLifeCalculation_optional& x);

        void
        SimFlowSto_BatteryLifeCalculation (::std::auto_ptr< SimFlowSto_BatteryLifeCalculation_type > p);

        // SimFlowSto_NumberCycleBins
        //
        typedef ::xml_schema::int_ SimFlowSto_NumberCycleBins_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_NumberCycleBins_type > SimFlowSto_NumberCycleBins_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_NumberCycleBins_type, char > SimFlowSto_NumberCycleBins_traits;

        const SimFlowSto_NumberCycleBins_optional&
        SimFlowSto_NumberCycleBins () const;

        SimFlowSto_NumberCycleBins_optional&
        SimFlowSto_NumberCycleBins ();

        void
        SimFlowSto_NumberCycleBins (const SimFlowSto_NumberCycleBins_type& x);

        void
        SimFlowSto_NumberCycleBins (const SimFlowSto_NumberCycleBins_optional& x);

        // SimFlowSto_BatteryLifeCurveName
        //
        typedef ::xml_schema::idref SimFlowSto_BatteryLifeCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_BatteryLifeCurveName_type > SimFlowSto_BatteryLifeCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_BatteryLifeCurveName_type, char > SimFlowSto_BatteryLifeCurveName_traits;

        const SimFlowSto_BatteryLifeCurveName_optional&
        SimFlowSto_BatteryLifeCurveName () const;

        SimFlowSto_BatteryLifeCurveName_optional&
        SimFlowSto_BatteryLifeCurveName ();

        void
        SimFlowSto_BatteryLifeCurveName (const SimFlowSto_BatteryLifeCurveName_type& x);

        void
        SimFlowSto_BatteryLifeCurveName (const SimFlowSto_BatteryLifeCurveName_optional& x);

        void
        SimFlowSto_BatteryLifeCurveName (::std::auto_ptr< SimFlowSto_BatteryLifeCurveName_type > p);

        // Constructors.
        //
        SimFlowStorage_ElectricalStorage_BatteryBank ();

        SimFlowStorage_ElectricalStorage_BatteryBank (const RefId_type&);

        SimFlowStorage_ElectricalStorage_BatteryBank (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        SimFlowStorage_ElectricalStorage_BatteryBank (const SimFlowStorage_ElectricalStorage_BatteryBank& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        virtual SimFlowStorage_ElectricalStorage_BatteryBank*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowStorage_ElectricalStorage_BatteryBank&
        operator= (const SimFlowStorage_ElectricalStorage_BatteryBank& x);

        virtual 
        ~SimFlowStorage_ElectricalStorage_BatteryBank ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowSto_RadiativeFract_optional SimFlowSto_RadiativeFract_;
        SimFlowSto_NumberBatteryModsinParallel_optional SimFlowSto_NumberBatteryModsinParallel_;
        SimFlowSto_NumberBatteryModsinSeries_optional SimFlowSto_NumberBatteryModsinSeries_;
        SimFlowSto_MaxModCap_optional SimFlowSto_MaxModCap_;
        SimFlowSto_InitialFractionalStateChrg_optional SimFlowSto_InitialFractionalStateChrg_;
        SimFlowSto_FractionAvailChrgCap_optional SimFlowSto_FractionAvailChrgCap_;
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_;
        SimFlowSto_FullyChrgdModOpenCircVoltage_optional SimFlowSto_FullyChrgdModOpenCircVoltage_;
        SimFlowSto_FullyDischargedModOpenCircVoltage_optional SimFlowSto_FullyDischargedModOpenCircVoltage_;
        SimFlowSto_VoltChangeCurveNameCharging_optional SimFlowSto_VoltChangeCurveNameCharging_;
        SimFlowSto_VoltChangeCurveNameDischarging_optional SimFlowSto_VoltChangeCurveNameDischarging_;
        SimFlowSto_ModInternalElec_optional SimFlowSto_ModInternalElec_;
        SimFlowSto_MaxModDischargingCurrent_optional SimFlowSto_MaxModDischargingCurrent_;
        SimFlowSto_ModCut_offVoltage_optional SimFlowSto_ModCut_offVoltage_;
        SimFlowSto_ModChrgRateLimit_optional SimFlowSto_ModChrgRateLimit_;
        SimFlowSto_BatteryLifeCalculation_optional SimFlowSto_BatteryLifeCalculation_;
        SimFlowSto_NumberCycleBins_optional SimFlowSto_NumberCycleBins_;
        SimFlowSto_BatteryLifeCurveName_optional SimFlowSto_BatteryLifeCurveName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_STORAGE_ELECTRICAL_STORAGE_BATTERY_BANK_HXX
