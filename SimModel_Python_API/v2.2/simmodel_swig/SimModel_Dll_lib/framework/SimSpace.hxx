// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SPACE_HXX
#define SIM_SPACE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimSpace;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simspatialstructureelement.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class __declspec(dllexport) SimSpace: public ::schema::simxml::SimModelCore::SimSpatialStructureElement
      {
        public:
        // SpaceZoneAssignments
        //
        typedef ::xml_schema::idrefs SpaceZoneAssignments_type;
        typedef ::xsd::cxx::tree::optional< SpaceZoneAssignments_type > SpaceZoneAssignments_optional;
        typedef ::xsd::cxx::tree::traits< SpaceZoneAssignments_type, char > SpaceZoneAssignments_traits;

        const SpaceZoneAssignments_optional&
        SpaceZoneAssignments () const;

        SpaceZoneAssignments_optional&
        SpaceZoneAssignments ();

        void
        SpaceZoneAssignments (const SpaceZoneAssignments_type& x);

        void
        SpaceZoneAssignments (const SpaceZoneAssignments_optional& x);

        void
        SpaceZoneAssignments (::std::auto_ptr< SpaceZoneAssignments_type > p);

        // SpaceNumber
        //
        typedef ::xml_schema::string SpaceNumber_type;
        typedef ::xsd::cxx::tree::optional< SpaceNumber_type, false > SpaceNumber_optional;
        typedef ::xsd::cxx::tree::traits< SpaceNumber_type, char > SpaceNumber_traits;

        const SpaceNumber_optional&
        SpaceNumber () const;

        SpaceNumber_optional&
        SpaceNumber ();

        void
        SpaceNumber (const SpaceNumber_type& x);

        void
        SpaceNumber (const SpaceNumber_optional& x);

        void
        SpaceNumber (::std::auto_ptr< SpaceNumber_type > p);

        // SpaceName
        //
        typedef ::xml_schema::string SpaceName_type;
        typedef ::xsd::cxx::tree::optional< SpaceName_type, false > SpaceName_optional;
        typedef ::xsd::cxx::tree::traits< SpaceName_type, char > SpaceName_traits;

        const SpaceName_optional&
        SpaceName () const;

        SpaceName_optional&
        SpaceName ();

        void
        SpaceName (const SpaceName_type& x);

        void
        SpaceName (const SpaceName_optional& x);

        void
        SpaceName (::std::auto_ptr< SpaceName_type > p);

        // SpaceInteriorOrExterior
        //
        typedef ::xml_schema::string SpaceInteriorOrExterior_type;
        typedef ::xsd::cxx::tree::optional< SpaceInteriorOrExterior_type, false > SpaceInteriorOrExterior_optional;
        typedef ::xsd::cxx::tree::traits< SpaceInteriorOrExterior_type, char > SpaceInteriorOrExterior_traits;

        const SpaceInteriorOrExterior_optional&
        SpaceInteriorOrExterior () const;

        SpaceInteriorOrExterior_optional&
        SpaceInteriorOrExterior ();

        void
        SpaceInteriorOrExterior (const SpaceInteriorOrExterior_type& x);

        void
        SpaceInteriorOrExterior (const SpaceInteriorOrExterior_optional& x);

        void
        SpaceInteriorOrExterior (::std::auto_ptr< SpaceInteriorOrExterior_type > p);

        // SpaceDatumElevation
        //
        typedef ::xml_schema::double_ SpaceDatumElevation_type;
        typedef ::xsd::cxx::tree::optional< SpaceDatumElevation_type, true > SpaceDatumElevation_optional;
        typedef ::xsd::cxx::tree::traits< SpaceDatumElevation_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceDatumElevation_traits;

        const SpaceDatumElevation_optional&
        SpaceDatumElevation () const;

        SpaceDatumElevation_optional&
        SpaceDatumElevation ();

        void
        SpaceDatumElevation (const SpaceDatumElevation_type& x);

        void
        SpaceDatumElevation (const SpaceDatumElevation_optional& x);

        // SpaceThermalSimulationType
        //
        typedef ::xml_schema::string SpaceThermalSimulationType_type;
        typedef ::xsd::cxx::tree::optional< SpaceThermalSimulationType_type, false > SpaceThermalSimulationType_optional;
        typedef ::xsd::cxx::tree::traits< SpaceThermalSimulationType_type, char > SpaceThermalSimulationType_traits;

        const SpaceThermalSimulationType_optional&
        SpaceThermalSimulationType () const;

        SpaceThermalSimulationType_optional&
        SpaceThermalSimulationType ();

        void
        SpaceThermalSimulationType (const SpaceThermalSimulationType_type& x);

        void
        SpaceThermalSimulationType (const SpaceThermalSimulationType_optional& x);

        void
        SpaceThermalSimulationType (::std::auto_ptr< SpaceThermalSimulationType_type > p);

        // SpaceConditioningRequirement
        //
        typedef ::xml_schema::string SpaceConditioningRequirement_type;
        typedef ::xsd::cxx::tree::optional< SpaceConditioningRequirement_type, false > SpaceConditioningRequirement_optional;
        typedef ::xsd::cxx::tree::traits< SpaceConditioningRequirement_type, char > SpaceConditioningRequirement_traits;

        const SpaceConditioningRequirement_optional&
        SpaceConditioningRequirement () const;

        SpaceConditioningRequirement_optional&
        SpaceConditioningRequirement ();

        void
        SpaceConditioningRequirement (const SpaceConditioningRequirement_type& x);

        void
        SpaceConditioningRequirement (const SpaceConditioningRequirement_optional& x);

        void
        SpaceConditioningRequirement (::std::auto_ptr< SpaceConditioningRequirement_type > p);

        // SpaceOccupantDensity
        //
        typedef ::xml_schema::double_ SpaceOccupantDensity_type;
        typedef ::xsd::cxx::tree::optional< SpaceOccupantDensity_type, true > SpaceOccupantDensity_optional;
        typedef ::xsd::cxx::tree::traits< SpaceOccupantDensity_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceOccupantDensity_traits;

        const SpaceOccupantDensity_optional&
        SpaceOccupantDensity () const;

        SpaceOccupantDensity_optional&
        SpaceOccupantDensity ();

        void
        SpaceOccupantDensity (const SpaceOccupantDensity_type& x);

        void
        SpaceOccupantDensity (const SpaceOccupantDensity_optional& x);

        // SpaceOccupantHeatRateLatent
        //
        typedef ::xml_schema::double_ SpaceOccupantHeatRateLatent_type;
        typedef ::xsd::cxx::tree::optional< SpaceOccupantHeatRateLatent_type, true > SpaceOccupantHeatRateLatent_optional;
        typedef ::xsd::cxx::tree::traits< SpaceOccupantHeatRateLatent_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceOccupantHeatRateLatent_traits;

        const SpaceOccupantHeatRateLatent_optional&
        SpaceOccupantHeatRateLatent () const;

        SpaceOccupantHeatRateLatent_optional&
        SpaceOccupantHeatRateLatent ();

        void
        SpaceOccupantHeatRateLatent (const SpaceOccupantHeatRateLatent_type& x);

        void
        SpaceOccupantHeatRateLatent (const SpaceOccupantHeatRateLatent_optional& x);

        // SpaceOccupantHeatRateSensible
        //
        typedef ::xml_schema::double_ SpaceOccupantHeatRateSensible_type;
        typedef ::xsd::cxx::tree::optional< SpaceOccupantHeatRateSensible_type, true > SpaceOccupantHeatRateSensible_optional;
        typedef ::xsd::cxx::tree::traits< SpaceOccupantHeatRateSensible_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceOccupantHeatRateSensible_traits;

        const SpaceOccupantHeatRateSensible_optional&
        SpaceOccupantHeatRateSensible () const;

        SpaceOccupantHeatRateSensible_optional&
        SpaceOccupantHeatRateSensible ();

        void
        SpaceOccupantHeatRateSensible (const SpaceOccupantHeatRateSensible_type& x);

        void
        SpaceOccupantHeatRateSensible (const SpaceOccupantHeatRateSensible_optional& x);

        // SpaceOccupantLoad
        //
        typedef ::xml_schema::double_ SpaceOccupantLoad_type;
        typedef ::xsd::cxx::tree::optional< SpaceOccupantLoad_type, true > SpaceOccupantLoad_optional;
        typedef ::xsd::cxx::tree::traits< SpaceOccupantLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceOccupantLoad_traits;

        const SpaceOccupantLoad_optional&
        SpaceOccupantLoad () const;

        SpaceOccupantLoad_optional&
        SpaceOccupantLoad ();

        void
        SpaceOccupantLoad (const SpaceOccupantLoad_type& x);

        void
        SpaceOccupantLoad (const SpaceOccupantLoad_optional& x);

        // SpaceEquipmentLoad
        //
        typedef ::xml_schema::double_ SpaceEquipmentLoad_type;
        typedef ::xsd::cxx::tree::optional< SpaceEquipmentLoad_type, true > SpaceEquipmentLoad_optional;
        typedef ::xsd::cxx::tree::traits< SpaceEquipmentLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceEquipmentLoad_traits;

        const SpaceEquipmentLoad_optional&
        SpaceEquipmentLoad () const;

        SpaceEquipmentLoad_optional&
        SpaceEquipmentLoad ();

        void
        SpaceEquipmentLoad (const SpaceEquipmentLoad_type& x);

        void
        SpaceEquipmentLoad (const SpaceEquipmentLoad_optional& x);

        // SpaceLightingLoad
        //
        typedef ::xml_schema::double_ SpaceLightingLoad_type;
        typedef ::xsd::cxx::tree::optional< SpaceLightingLoad_type, true > SpaceLightingLoad_optional;
        typedef ::xsd::cxx::tree::traits< SpaceLightingLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceLightingLoad_traits;

        const SpaceLightingLoad_optional&
        SpaceLightingLoad () const;

        SpaceLightingLoad_optional&
        SpaceLightingLoad ();

        void
        SpaceLightingLoad (const SpaceLightingLoad_type& x);

        void
        SpaceLightingLoad (const SpaceLightingLoad_optional& x);

        // InsideDryBulbTempHeating
        //
        typedef ::xml_schema::double_ InsideDryBulbTempHeating_type;
        typedef ::xsd::cxx::tree::optional< InsideDryBulbTempHeating_type, true > InsideDryBulbTempHeating_optional;
        typedef ::xsd::cxx::tree::traits< InsideDryBulbTempHeating_type, char, ::xsd::cxx::tree::schema_type::double_ > InsideDryBulbTempHeating_traits;

        const InsideDryBulbTempHeating_optional&
        InsideDryBulbTempHeating () const;

        InsideDryBulbTempHeating_optional&
        InsideDryBulbTempHeating ();

        void
        InsideDryBulbTempHeating (const InsideDryBulbTempHeating_type& x);

        void
        InsideDryBulbTempHeating (const InsideDryBulbTempHeating_optional& x);

        // InsideRelHumidityHeating
        //
        typedef ::xml_schema::double_ InsideRelHumidityHeating_type;
        typedef ::xsd::cxx::tree::optional< InsideRelHumidityHeating_type, true > InsideRelHumidityHeating_optional;
        typedef ::xsd::cxx::tree::traits< InsideRelHumidityHeating_type, char, ::xsd::cxx::tree::schema_type::double_ > InsideRelHumidityHeating_traits;

        const InsideRelHumidityHeating_optional&
        InsideRelHumidityHeating () const;

        InsideRelHumidityHeating_optional&
        InsideRelHumidityHeating ();

        void
        InsideRelHumidityHeating (const InsideRelHumidityHeating_type& x);

        void
        InsideRelHumidityHeating (const InsideRelHumidityHeating_optional& x);

        // InsideDryBulbTempCooling
        //
        typedef ::xml_schema::double_ InsideDryBulbTempCooling_type;
        typedef ::xsd::cxx::tree::optional< InsideDryBulbTempCooling_type, true > InsideDryBulbTempCooling_optional;
        typedef ::xsd::cxx::tree::traits< InsideDryBulbTempCooling_type, char, ::xsd::cxx::tree::schema_type::double_ > InsideDryBulbTempCooling_traits;

        const InsideDryBulbTempCooling_optional&
        InsideDryBulbTempCooling () const;

        InsideDryBulbTempCooling_optional&
        InsideDryBulbTempCooling ();

        void
        InsideDryBulbTempCooling (const InsideDryBulbTempCooling_type& x);

        void
        InsideDryBulbTempCooling (const InsideDryBulbTempCooling_optional& x);

        // InsideRelHumidityCooling
        //
        typedef ::xml_schema::double_ InsideRelHumidityCooling_type;
        typedef ::xsd::cxx::tree::optional< InsideRelHumidityCooling_type, true > InsideRelHumidityCooling_optional;
        typedef ::xsd::cxx::tree::traits< InsideRelHumidityCooling_type, char, ::xsd::cxx::tree::schema_type::double_ > InsideRelHumidityCooling_traits;

        const InsideRelHumidityCooling_optional&
        InsideRelHumidityCooling () const;

        InsideRelHumidityCooling_optional&
        InsideRelHumidityCooling ();

        void
        InsideRelHumidityCooling (const InsideRelHumidityCooling_type& x);

        void
        InsideRelHumidityCooling (const InsideRelHumidityCooling_optional& x);

        // IncludesReturnAirPlenum
        //
        typedef ::xml_schema::boolean IncludesReturnAirPlenum_type;
        typedef ::xsd::cxx::tree::optional< IncludesReturnAirPlenum_type > IncludesReturnAirPlenum_optional;
        typedef ::xsd::cxx::tree::traits< IncludesReturnAirPlenum_type, char > IncludesReturnAirPlenum_traits;

        const IncludesReturnAirPlenum_optional&
        IncludesReturnAirPlenum () const;

        IncludesReturnAirPlenum_optional&
        IncludesReturnAirPlenum ();

        void
        IncludesReturnAirPlenum (const IncludesReturnAirPlenum_type& x);

        void
        IncludesReturnAirPlenum (const IncludesReturnAirPlenum_optional& x);

        // PeakAirFlowCooling
        //
        typedef ::xml_schema::double_ PeakAirFlowCooling_type;
        typedef ::xsd::cxx::tree::optional< PeakAirFlowCooling_type, true > PeakAirFlowCooling_optional;
        typedef ::xsd::cxx::tree::traits< PeakAirFlowCooling_type, char, ::xsd::cxx::tree::schema_type::double_ > PeakAirFlowCooling_traits;

        const PeakAirFlowCooling_optional&
        PeakAirFlowCooling () const;

        PeakAirFlowCooling_optional&
        PeakAirFlowCooling ();

        void
        PeakAirFlowCooling (const PeakAirFlowCooling_type& x);

        void
        PeakAirFlowCooling (const PeakAirFlowCooling_optional& x);

        // PeakAirFlowHeating
        //
        typedef ::xml_schema::double_ PeakAirFlowHeating_type;
        typedef ::xsd::cxx::tree::optional< PeakAirFlowHeating_type, true > PeakAirFlowHeating_optional;
        typedef ::xsd::cxx::tree::traits< PeakAirFlowHeating_type, char, ::xsd::cxx::tree::schema_type::double_ > PeakAirFlowHeating_traits;

        const PeakAirFlowHeating_optional&
        PeakAirFlowHeating () const;

        PeakAirFlowHeating_optional&
        PeakAirFlowHeating ();

        void
        PeakAirFlowHeating (const PeakAirFlowHeating_type& x);

        void
        PeakAirFlowHeating (const PeakAirFlowHeating_optional& x);

        // ExhaustAirFlowRate
        //
        typedef ::xml_schema::double_ ExhaustAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< ExhaustAirFlowRate_type, true > ExhaustAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< ExhaustAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > ExhaustAirFlowRate_traits;

        const ExhaustAirFlowRate_optional&
        ExhaustAirFlowRate () const;

        ExhaustAirFlowRate_optional&
        ExhaustAirFlowRate ();

        void
        ExhaustAirFlowRate (const ExhaustAirFlowRate_type& x);

        void
        ExhaustAirFlowRate (const ExhaustAirFlowRate_optional& x);

        // NaturalAirChangeRate
        //
        typedef ::xml_schema::double_ NaturalAirChangeRate_type;
        typedef ::xsd::cxx::tree::optional< NaturalAirChangeRate_type, true > NaturalAirChangeRate_optional;
        typedef ::xsd::cxx::tree::traits< NaturalAirChangeRate_type, char, ::xsd::cxx::tree::schema_type::double_ > NaturalAirChangeRate_traits;

        const NaturalAirChangeRate_optional&
        NaturalAirChangeRate () const;

        NaturalAirChangeRate_optional&
        NaturalAirChangeRate ();

        void
        NaturalAirChangeRate (const NaturalAirChangeRate_type& x);

        void
        NaturalAirChangeRate (const NaturalAirChangeRate_optional& x);

        // MechanicalAirChangeRate
        //
        typedef ::xml_schema::double_ MechanicalAirChangeRate_type;
        typedef ::xsd::cxx::tree::optional< MechanicalAirChangeRate_type, true > MechanicalAirChangeRate_optional;
        typedef ::xsd::cxx::tree::traits< MechanicalAirChangeRate_type, char, ::xsd::cxx::tree::schema_type::double_ > MechanicalAirChangeRate_traits;

        const MechanicalAirChangeRate_optional&
        MechanicalAirChangeRate () const;

        MechanicalAirChangeRate_optional&
        MechanicalAirChangeRate ();

        void
        MechanicalAirChangeRate (const MechanicalAirChangeRate_type& x);

        void
        MechanicalAirChangeRate (const MechanicalAirChangeRate_optional& x);

        // VentilationType
        //
        typedef ::xml_schema::string VentilationType_type;
        typedef ::xsd::cxx::tree::optional< VentilationType_type, false > VentilationType_optional;
        typedef ::xsd::cxx::tree::traits< VentilationType_type, char > VentilationType_traits;

        const VentilationType_optional&
        VentilationType () const;

        VentilationType_optional&
        VentilationType ();

        void
        VentilationType (const VentilationType_type& x);

        void
        VentilationType (const VentilationType_optional& x);

        void
        VentilationType (::std::auto_ptr< VentilationType_type > p);

        // OutsideAirPerPerson
        //
        typedef ::xml_schema::double_ OutsideAirPerPerson_type;
        typedef ::xsd::cxx::tree::optional< OutsideAirPerPerson_type, true > OutsideAirPerPerson_optional;
        typedef ::xsd::cxx::tree::traits< OutsideAirPerPerson_type, char, ::xsd::cxx::tree::schema_type::double_ > OutsideAirPerPerson_traits;

        const OutsideAirPerPerson_optional&
        OutsideAirPerPerson () const;

        OutsideAirPerPerson_optional&
        OutsideAirPerPerson ();

        void
        OutsideAirPerPerson (const OutsideAirPerPerson_type& x);

        void
        OutsideAirPerPerson (const OutsideAirPerPerson_optional& x);

        // SpaceHeight
        //
        typedef ::xml_schema::double_ SpaceHeight_type;
        typedef ::xsd::cxx::tree::optional< SpaceHeight_type, true > SpaceHeight_optional;
        typedef ::xsd::cxx::tree::traits< SpaceHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceHeight_traits;

        const SpaceHeight_optional&
        SpaceHeight () const;

        SpaceHeight_optional&
        SpaceHeight ();

        void
        SpaceHeight (const SpaceHeight_type& x);

        void
        SpaceHeight (const SpaceHeight_optional& x);

        // SpaceGrossPerimeter
        //
        typedef ::xml_schema::double_ SpaceGrossPerimeter_type;
        typedef ::xsd::cxx::tree::optional< SpaceGrossPerimeter_type, true > SpaceGrossPerimeter_optional;
        typedef ::xsd::cxx::tree::traits< SpaceGrossPerimeter_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceGrossPerimeter_traits;

        const SpaceGrossPerimeter_optional&
        SpaceGrossPerimeter () const;

        SpaceGrossPerimeter_optional&
        SpaceGrossPerimeter ();

        void
        SpaceGrossPerimeter (const SpaceGrossPerimeter_type& x);

        void
        SpaceGrossPerimeter (const SpaceGrossPerimeter_optional& x);

        // SpaceGrossFloorArea
        //
        typedef ::xml_schema::double_ SpaceGrossFloorArea_type;
        typedef ::xsd::cxx::tree::optional< SpaceGrossFloorArea_type, true > SpaceGrossFloorArea_optional;
        typedef ::xsd::cxx::tree::traits< SpaceGrossFloorArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceGrossFloorArea_traits;

        const SpaceGrossFloorArea_optional&
        SpaceGrossFloorArea () const;

        SpaceGrossFloorArea_optional&
        SpaceGrossFloorArea ();

        void
        SpaceGrossFloorArea (const SpaceGrossFloorArea_type& x);

        void
        SpaceGrossFloorArea (const SpaceGrossFloorArea_optional& x);

        // SpaceNetFloorArea
        //
        typedef ::xml_schema::double_ SpaceNetFloorArea_type;
        typedef ::xsd::cxx::tree::optional< SpaceNetFloorArea_type, true > SpaceNetFloorArea_optional;
        typedef ::xsd::cxx::tree::traits< SpaceNetFloorArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceNetFloorArea_traits;

        const SpaceNetFloorArea_optional&
        SpaceNetFloorArea () const;

        SpaceNetFloorArea_optional&
        SpaceNetFloorArea ();

        void
        SpaceNetFloorArea (const SpaceNetFloorArea_type& x);

        void
        SpaceNetFloorArea (const SpaceNetFloorArea_optional& x);

        // SpaceGrossVolume
        //
        typedef ::xml_schema::double_ SpaceGrossVolume_type;
        typedef ::xsd::cxx::tree::optional< SpaceGrossVolume_type, true > SpaceGrossVolume_optional;
        typedef ::xsd::cxx::tree::traits< SpaceGrossVolume_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceGrossVolume_traits;

        const SpaceGrossVolume_optional&
        SpaceGrossVolume () const;

        SpaceGrossVolume_optional&
        SpaceGrossVolume ();

        void
        SpaceGrossVolume (const SpaceGrossVolume_type& x);

        void
        SpaceGrossVolume (const SpaceGrossVolume_optional& x);

        // SpaceNetVolume
        //
        typedef ::xml_schema::double_ SpaceNetVolume_type;
        typedef ::xsd::cxx::tree::optional< SpaceNetVolume_type, true > SpaceNetVolume_optional;
        typedef ::xsd::cxx::tree::traits< SpaceNetVolume_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceNetVolume_traits;

        const SpaceNetVolume_optional&
        SpaceNetVolume () const;

        SpaceNetVolume_optional&
        SpaceNetVolume ();

        void
        SpaceNetVolume (const SpaceNetVolume_type& x);

        void
        SpaceNetVolume (const SpaceNetVolume_optional& x);

        // SpaceNetFloorAreaBOMA
        //
        typedef ::xml_schema::double_ SpaceNetFloorAreaBOMA_type;
        typedef ::xsd::cxx::tree::optional< SpaceNetFloorAreaBOMA_type, true > SpaceNetFloorAreaBOMA_optional;
        typedef ::xsd::cxx::tree::traits< SpaceNetFloorAreaBOMA_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceNetFloorAreaBOMA_traits;

        const SpaceNetFloorAreaBOMA_optional&
        SpaceNetFloorAreaBOMA () const;

        SpaceNetFloorAreaBOMA_optional&
        SpaceNetFloorAreaBOMA ();

        void
        SpaceNetFloorAreaBOMA (const SpaceNetFloorAreaBOMA_type& x);

        void
        SpaceNetFloorAreaBOMA (const SpaceNetFloorAreaBOMA_optional& x);

        // SpaceUsableFloorAreaBOMA
        //
        typedef ::xml_schema::double_ SpaceUsableFloorAreaBOMA_type;
        typedef ::xsd::cxx::tree::optional< SpaceUsableFloorAreaBOMA_type, true > SpaceUsableFloorAreaBOMA_optional;
        typedef ::xsd::cxx::tree::traits< SpaceUsableFloorAreaBOMA_type, char, ::xsd::cxx::tree::schema_type::double_ > SpaceUsableFloorAreaBOMA_traits;

        const SpaceUsableFloorAreaBOMA_optional&
        SpaceUsableFloorAreaBOMA () const;

        SpaceUsableFloorAreaBOMA_optional&
        SpaceUsableFloorAreaBOMA ();

        void
        SpaceUsableFloorAreaBOMA (const SpaceUsableFloorAreaBOMA_type& x);

        void
        SpaceUsableFloorAreaBOMA (const SpaceUsableFloorAreaBOMA_optional& x);

        // ClassRef_SpaceByFunction
        //
        typedef ::xml_schema::idref ClassRef_SpaceByFunction_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_SpaceByFunction_type, false > ClassRef_SpaceByFunction_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_SpaceByFunction_type, char > ClassRef_SpaceByFunction_traits;

        const ClassRef_SpaceByFunction_optional&
        ClassRef_SpaceByFunction () const;

        ClassRef_SpaceByFunction_optional&
        ClassRef_SpaceByFunction ();

        void
        ClassRef_SpaceByFunction (const ClassRef_SpaceByFunction_type& x);

        void
        ClassRef_SpaceByFunction (const ClassRef_SpaceByFunction_optional& x);

        void
        ClassRef_SpaceByFunction (::std::auto_ptr< ClassRef_SpaceByFunction_type > p);

        // ClassRef_SpaceTypeOwner
        //
        typedef ::xml_schema::idref ClassRef_SpaceTypeOwner_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_SpaceTypeOwner_type, false > ClassRef_SpaceTypeOwner_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_SpaceTypeOwner_type, char > ClassRef_SpaceTypeOwner_traits;

        const ClassRef_SpaceTypeOwner_optional&
        ClassRef_SpaceTypeOwner () const;

        ClassRef_SpaceTypeOwner_optional&
        ClassRef_SpaceTypeOwner ();

        void
        ClassRef_SpaceTypeOwner (const ClassRef_SpaceTypeOwner_type& x);

        void
        ClassRef_SpaceTypeOwner (const ClassRef_SpaceTypeOwner_optional& x);

        void
        ClassRef_SpaceTypeOwner (::std::auto_ptr< ClassRef_SpaceTypeOwner_type > p);

        // ClassRef_SpaceCategoryOwner
        //
        typedef ::xml_schema::idref ClassRef_SpaceCategoryOwner_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_SpaceCategoryOwner_type, false > ClassRef_SpaceCategoryOwner_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_SpaceCategoryOwner_type, char > ClassRef_SpaceCategoryOwner_traits;

        const ClassRef_SpaceCategoryOwner_optional&
        ClassRef_SpaceCategoryOwner () const;

        ClassRef_SpaceCategoryOwner_optional&
        ClassRef_SpaceCategoryOwner ();

        void
        ClassRef_SpaceCategoryOwner (const ClassRef_SpaceCategoryOwner_type& x);

        void
        ClassRef_SpaceCategoryOwner (const ClassRef_SpaceCategoryOwner_optional& x);

        void
        ClassRef_SpaceCategoryOwner (::std::auto_ptr< ClassRef_SpaceCategoryOwner_type > p);

        // ClassRef_SpaceCategoryBOMA
        //
        typedef ::xml_schema::idref ClassRef_SpaceCategoryBOMA_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_SpaceCategoryBOMA_type, false > ClassRef_SpaceCategoryBOMA_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_SpaceCategoryBOMA_type, char > ClassRef_SpaceCategoryBOMA_traits;

        const ClassRef_SpaceCategoryBOMA_optional&
        ClassRef_SpaceCategoryBOMA () const;

        ClassRef_SpaceCategoryBOMA_optional&
        ClassRef_SpaceCategoryBOMA ();

        void
        ClassRef_SpaceCategoryBOMA (const ClassRef_SpaceCategoryBOMA_type& x);

        void
        ClassRef_SpaceCategoryBOMA (const ClassRef_SpaceCategoryBOMA_optional& x);

        void
        ClassRef_SpaceCategoryBOMA (::std::auto_ptr< ClassRef_SpaceCategoryBOMA_type > p);

        // SpaceOccupants
        //
        typedef ::xml_schema::idrefs SpaceOccupants_type;
        typedef ::xsd::cxx::tree::optional< SpaceOccupants_type > SpaceOccupants_optional;
        typedef ::xsd::cxx::tree::traits< SpaceOccupants_type, char > SpaceOccupants_traits;

        const SpaceOccupants_optional&
        SpaceOccupants () const;

        SpaceOccupants_optional&
        SpaceOccupants ();

        void
        SpaceOccupants (const SpaceOccupants_type& x);

        void
        SpaceOccupants (const SpaceOccupants_optional& x);

        void
        SpaceOccupants (::std::auto_ptr< SpaceOccupants_type > p);

        // OccupancyScheduleAssignment
        //
        typedef ::xml_schema::idref OccupancyScheduleAssignment_type;
        typedef ::xsd::cxx::tree::optional< OccupancyScheduleAssignment_type, false > OccupancyScheduleAssignment_optional;
        typedef ::xsd::cxx::tree::traits< OccupancyScheduleAssignment_type, char > OccupancyScheduleAssignment_traits;

        const OccupancyScheduleAssignment_optional&
        OccupancyScheduleAssignment () const;

        OccupancyScheduleAssignment_optional&
        OccupancyScheduleAssignment ();

        void
        OccupancyScheduleAssignment (const OccupancyScheduleAssignment_type& x);

        void
        OccupancyScheduleAssignment (const OccupancyScheduleAssignment_optional& x);

        void
        OccupancyScheduleAssignment (::std::auto_ptr< OccupancyScheduleAssignment_type > p);

        // LightingScheduleAssignment
        //
        typedef ::xml_schema::idref LightingScheduleAssignment_type;
        typedef ::xsd::cxx::tree::optional< LightingScheduleAssignment_type, false > LightingScheduleAssignment_optional;
        typedef ::xsd::cxx::tree::traits< LightingScheduleAssignment_type, char > LightingScheduleAssignment_traits;

        const LightingScheduleAssignment_optional&
        LightingScheduleAssignment () const;

        LightingScheduleAssignment_optional&
        LightingScheduleAssignment ();

        void
        LightingScheduleAssignment (const LightingScheduleAssignment_type& x);

        void
        LightingScheduleAssignment (const LightingScheduleAssignment_optional& x);

        void
        LightingScheduleAssignment (::std::auto_ptr< LightingScheduleAssignment_type > p);

        // EquipmentScheduleAssignment
        //
        typedef ::xml_schema::idref EquipmentScheduleAssignment_type;
        typedef ::xsd::cxx::tree::optional< EquipmentScheduleAssignment_type, false > EquipmentScheduleAssignment_optional;
        typedef ::xsd::cxx::tree::traits< EquipmentScheduleAssignment_type, char > EquipmentScheduleAssignment_traits;

        const EquipmentScheduleAssignment_optional&
        EquipmentScheduleAssignment () const;

        EquipmentScheduleAssignment_optional&
        EquipmentScheduleAssignment ();

        void
        EquipmentScheduleAssignment (const EquipmentScheduleAssignment_type& x);

        void
        EquipmentScheduleAssignment (const EquipmentScheduleAssignment_optional& x);

        void
        EquipmentScheduleAssignment (::std::auto_ptr< EquipmentScheduleAssignment_type > p);

        // GeometricRepresentations
        //
        typedef ::xml_schema::idrefs GeometricRepresentations_type;
        typedef ::xsd::cxx::tree::optional< GeometricRepresentations_type > GeometricRepresentations_optional;
        typedef ::xsd::cxx::tree::traits< GeometricRepresentations_type, char > GeometricRepresentations_traits;

        const GeometricRepresentations_optional&
        GeometricRepresentations () const;

        GeometricRepresentations_optional&
        GeometricRepresentations ();

        void
        GeometricRepresentations (const GeometricRepresentations_type& x);

        void
        GeometricRepresentations (const GeometricRepresentations_optional& x);

        void
        GeometricRepresentations (::std::auto_ptr< GeometricRepresentations_type > p);

        // SpaceInSpatialContainer
        //
        typedef ::xml_schema::idref SpaceInSpatialContainer_type;
        typedef ::xsd::cxx::tree::optional< SpaceInSpatialContainer_type, false > SpaceInSpatialContainer_optional;
        typedef ::xsd::cxx::tree::traits< SpaceInSpatialContainer_type, char > SpaceInSpatialContainer_traits;

        const SpaceInSpatialContainer_optional&
        SpaceInSpatialContainer () const;

        SpaceInSpatialContainer_optional&
        SpaceInSpatialContainer ();

        void
        SpaceInSpatialContainer (const SpaceInSpatialContainer_type& x);

        void
        SpaceInSpatialContainer (const SpaceInSpatialContainer_optional& x);

        void
        SpaceInSpatialContainer (::std::auto_ptr< SpaceInSpatialContainer_type > p);

        // AssociatedPlena
        //
        typedef ::xml_schema::idrefs AssociatedPlena_type;
        typedef ::xsd::cxx::tree::optional< AssociatedPlena_type > AssociatedPlena_optional;
        typedef ::xsd::cxx::tree::traits< AssociatedPlena_type, char > AssociatedPlena_traits;

        const AssociatedPlena_optional&
        AssociatedPlena () const;

        AssociatedPlena_optional&
        AssociatedPlena ();

        void
        AssociatedPlena (const AssociatedPlena_type& x);

        void
        AssociatedPlena (const AssociatedPlena_optional& x);

        void
        AssociatedPlena (::std::auto_ptr< AssociatedPlena_type > p);

        // AssociatedElements
        //
        typedef ::xml_schema::idrefs AssociatedElements_type;
        typedef ::xsd::cxx::tree::optional< AssociatedElements_type > AssociatedElements_optional;
        typedef ::xsd::cxx::tree::traits< AssociatedElements_type, char > AssociatedElements_traits;

        const AssociatedElements_optional&
        AssociatedElements () const;

        AssociatedElements_optional&
        AssociatedElements ();

        void
        AssociatedElements (const AssociatedElements_type& x);

        void
        AssociatedElements (const AssociatedElements_optional& x);

        void
        AssociatedElements (::std::auto_ptr< AssociatedElements_type > p);

        // Constructors.
        //
        SimSpace ();

        SimSpace (const RefId_type&);

        SimSpace (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        SimSpace (const SimSpace& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        virtual SimSpace*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSpace&
        operator= (const SimSpace& x);

        virtual 
        ~SimSpace ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SpaceZoneAssignments_optional SpaceZoneAssignments_;
        SpaceNumber_optional SpaceNumber_;
        SpaceName_optional SpaceName_;
        SpaceInteriorOrExterior_optional SpaceInteriorOrExterior_;
        SpaceDatumElevation_optional SpaceDatumElevation_;
        SpaceThermalSimulationType_optional SpaceThermalSimulationType_;
        SpaceConditioningRequirement_optional SpaceConditioningRequirement_;
        SpaceOccupantDensity_optional SpaceOccupantDensity_;
        SpaceOccupantHeatRateLatent_optional SpaceOccupantHeatRateLatent_;
        SpaceOccupantHeatRateSensible_optional SpaceOccupantHeatRateSensible_;
        SpaceOccupantLoad_optional SpaceOccupantLoad_;
        SpaceEquipmentLoad_optional SpaceEquipmentLoad_;
        SpaceLightingLoad_optional SpaceLightingLoad_;
        InsideDryBulbTempHeating_optional InsideDryBulbTempHeating_;
        InsideRelHumidityHeating_optional InsideRelHumidityHeating_;
        InsideDryBulbTempCooling_optional InsideDryBulbTempCooling_;
        InsideRelHumidityCooling_optional InsideRelHumidityCooling_;
        IncludesReturnAirPlenum_optional IncludesReturnAirPlenum_;
        PeakAirFlowCooling_optional PeakAirFlowCooling_;
        PeakAirFlowHeating_optional PeakAirFlowHeating_;
        ExhaustAirFlowRate_optional ExhaustAirFlowRate_;
        NaturalAirChangeRate_optional NaturalAirChangeRate_;
        MechanicalAirChangeRate_optional MechanicalAirChangeRate_;
        VentilationType_optional VentilationType_;
        OutsideAirPerPerson_optional OutsideAirPerPerson_;
        SpaceHeight_optional SpaceHeight_;
        SpaceGrossPerimeter_optional SpaceGrossPerimeter_;
        SpaceGrossFloorArea_optional SpaceGrossFloorArea_;
        SpaceNetFloorArea_optional SpaceNetFloorArea_;
        SpaceGrossVolume_optional SpaceGrossVolume_;
        SpaceNetVolume_optional SpaceNetVolume_;
        SpaceNetFloorAreaBOMA_optional SpaceNetFloorAreaBOMA_;
        SpaceUsableFloorAreaBOMA_optional SpaceUsableFloorAreaBOMA_;
        ClassRef_SpaceByFunction_optional ClassRef_SpaceByFunction_;
        ClassRef_SpaceTypeOwner_optional ClassRef_SpaceTypeOwner_;
        ClassRef_SpaceCategoryOwner_optional ClassRef_SpaceCategoryOwner_;
        ClassRef_SpaceCategoryBOMA_optional ClassRef_SpaceCategoryBOMA_;
        SpaceOccupants_optional SpaceOccupants_;
        OccupancyScheduleAssignment_optional OccupancyScheduleAssignment_;
        LightingScheduleAssignment_optional LightingScheduleAssignment_;
        EquipmentScheduleAssignment_optional EquipmentScheduleAssignment_;
        GeometricRepresentations_optional GeometricRepresentations_;
        SpaceInSpatialContainer_optional SpaceInSpatialContainer_;
        AssociatedPlena_optional AssociatedPlena_;
        AssociatedElements_optional AssociatedElements_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SPACE_HXX
