// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSimulationParameters_Algorithm_HeatBalanceAlgorithm.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSimulationParameters_Algorithm_HeatBalanceAlgorithm
      // 

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::SimSimParams_SurfTempUpLimit_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_SurfTempUpLimit () const
      {
        return this->SimSimParams_SurfTempUpLimit_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::SimSimParams_SurfTempUpLimit_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_SurfTempUpLimit ()
      {
        return this->SimSimParams_SurfTempUpLimit_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_SurfTempUpLimit (const SimSimParams_SurfTempUpLimit_type& x)
      {
        this->SimSimParams_SurfTempUpLimit_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_SurfTempUpLimit (const SimSimParams_SurfTempUpLimit_optional& x)
      {
        this->SimSimParams_SurfTempUpLimit_ = x;
      }

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue () const
      {
        return this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue ()
      {
        return this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue (const SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_type& x)
      {
        this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue (const SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_optional& x)
      {
        this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_ = x;
      }

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue () const
      {
        return this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue ()
      {
        return this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue (const SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_type& x)
      {
        this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue (const SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_optional& x)
      {
        this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_ = x;
      }

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_DiffScheme_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_DiffScheme () const
      {
        return this->HeatBalSet_CondFiniteDiff_DiffScheme_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_DiffScheme_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_DiffScheme ()
      {
        return this->HeatBalSet_CondFiniteDiff_DiffScheme_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_DiffScheme (const HeatBalSet_CondFiniteDiff_DiffScheme_type& x)
      {
        this->HeatBalSet_CondFiniteDiff_DiffScheme_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_DiffScheme (const HeatBalSet_CondFiniteDiff_DiffScheme_optional& x)
      {
        this->HeatBalSet_CondFiniteDiff_DiffScheme_ = x;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_DiffScheme (::std::auto_ptr< HeatBalSet_CondFiniteDiff_DiffScheme_type > x)
      {
        this->HeatBalSet_CondFiniteDiff_DiffScheme_.set (x);
      }

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant () const
      {
        return this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant ()
      {
        return this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant (const HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_type& x)
      {
        this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant (const HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_optional& x)
      {
        this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_ = x;
      }

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_RelaxationFactor_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_RelaxationFactor () const
      {
        return this->HeatBalSet_CondFiniteDiff_RelaxationFactor_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_RelaxationFactor_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_RelaxationFactor ()
      {
        return this->HeatBalSet_CondFiniteDiff_RelaxationFactor_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_RelaxationFactor (const HeatBalSet_CondFiniteDiff_RelaxationFactor_type& x)
      {
        this->HeatBalSet_CondFiniteDiff_RelaxationFactor_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_RelaxationFactor (const HeatBalSet_CondFiniteDiff_RelaxationFactor_optional& x)
      {
        this->HeatBalSet_CondFiniteDiff_RelaxationFactor_ = x;
      }

      const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria () const
      {
        return this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_optional& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria ()
      {
        return this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_;
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria (const HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_type& x)
      {
        this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_.set (x);
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria (const HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_optional& x)
      {
        this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSimulationParameters_Algorithm_HeatBalanceAlgorithm
      //

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm ()
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_Algorithm (),
        SimSimParams_SurfTempUpLimit_ (this),
        SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_ (this),
        SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_ (this),
        HeatBalSet_CondFiniteDiff_DiffScheme_ (this),
        HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_ (this),
        HeatBalSet_CondFiniteDiff_RelaxationFactor_ (this),
        HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_ (this)
      {
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_Algorithm (RefId),
        SimSimParams_SurfTempUpLimit_ (this),
        SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_ (this),
        SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_ (this),
        HeatBalSet_CondFiniteDiff_DiffScheme_ (this),
        HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_ (this),
        HeatBalSet_CondFiniteDiff_RelaxationFactor_ (this),
        HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_ (this)
      {
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm (const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm& x,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_Algorithm (x, f, c),
        SimSimParams_SurfTempUpLimit_ (x.SimSimParams_SurfTempUpLimit_, f, this),
        SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_ (x.SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_, f, this),
        SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_ (x.SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_, f, this),
        HeatBalSet_CondFiniteDiff_DiffScheme_ (x.HeatBalSet_CondFiniteDiff_DiffScheme_, f, this),
        HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_ (x.HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_, f, this),
        HeatBalSet_CondFiniteDiff_RelaxationFactor_ (x.HeatBalSet_CondFiniteDiff_RelaxationFactor_, f, this),
        HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_ (x.HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_, f, this)
      {
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_Algorithm (e, f | ::xml_schema::flags::base, c),
        SimSimParams_SurfTempUpLimit_ (this),
        SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_ (this),
        SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_ (this),
        HeatBalSet_CondFiniteDiff_DiffScheme_ (this),
        HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_ (this),
        HeatBalSet_CondFiniteDiff_RelaxationFactor_ (this),
        HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimSimulationParameters_Algorithm::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSimParams_SurfTempUpLimit
          //
          if (n.name () == "SimSimParams_SurfTempUpLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_SurfTempUpLimit_)
            {
              this->SimSimParams_SurfTempUpLimit_.set (SimSimParams_SurfTempUpLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue
          //
          if (n.name () == "SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_)
            {
              this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_.set (SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue
          //
          if (n.name () == "SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_)
            {
              this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_.set (SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_traits::create (i, f, this));
              continue;
            }
          }

          // HeatBalSet_CondFiniteDiff_DiffScheme
          //
          if (n.name () == "HeatBalSet_CondFiniteDiff_DiffScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< HeatBalSet_CondFiniteDiff_DiffScheme_type > r (
              HeatBalSet_CondFiniteDiff_DiffScheme_traits::create (i, f, this));

            if (!this->HeatBalSet_CondFiniteDiff_DiffScheme_)
            {
              this->HeatBalSet_CondFiniteDiff_DiffScheme_.set (r);
              continue;
            }
          }

          // HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant
          //
          if (n.name () == "HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_)
            {
              this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_.set (HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_traits::create (i, f, this));
              continue;
            }
          }

          // HeatBalSet_CondFiniteDiff_RelaxationFactor
          //
          if (n.name () == "HeatBalSet_CondFiniteDiff_RelaxationFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->HeatBalSet_CondFiniteDiff_RelaxationFactor_)
            {
              this->HeatBalSet_CondFiniteDiff_RelaxationFactor_.set (HeatBalSet_CondFiniteDiff_RelaxationFactor_traits::create (i, f, this));
              continue;
            }
          }

          // HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria
          //
          if (n.name () == "HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_)
            {
              this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_.set (HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm* SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSimulationParameters_Algorithm_HeatBalanceAlgorithm (*this, f, c);
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm& SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      operator= (const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimSimulationParameters_Algorithm& > (*this) = x;
          this->SimSimParams_SurfTempUpLimit_ = x.SimSimParams_SurfTempUpLimit_;
          this->SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_ = x.SimSimParams_MinSurfaceConvectionHeatTransferCoeffValue_;
          this->SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_ = x.SimSimParams_MaxSurfaceConvectionHeatTransferCoeffValue_;
          this->HeatBalSet_CondFiniteDiff_DiffScheme_ = x.HeatBalSet_CondFiniteDiff_DiffScheme_;
          this->HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_ = x.HeatBalSet_CondFiniteDiff_SpaceDiscretizationConstant_;
          this->HeatBalSet_CondFiniteDiff_RelaxationFactor_ = x.HeatBalSet_CondFiniteDiff_RelaxationFactor_;
          this->HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_ = x.HeatBalSet_CondFiniteDiff_InsideFaceSurfaceTempConvergCriteria_;
        }

        return *this;
      }

      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm::
      ~SimSimulationParameters_Algorithm_HeatBalanceAlgorithm ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

