// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowSegment_Duct_AirFlowNetworkDistribution.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowSegment_Duct_AirFlowNetworkDistribution
      // 

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_DuctLength_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_DuctLength () const
      {
        return this->SimFlowSeg_DuctLength_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_DuctLength_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_DuctLength ()
      {
        return this->SimFlowSeg_DuctLength_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_DuctLength (const SimFlowSeg_DuctLength_type& x)
      {
        this->SimFlowSeg_DuctLength_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_DuctLength (const SimFlowSeg_DuctLength_optional& x)
      {
        this->SimFlowSeg_DuctLength_ = x;
      }

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_HydrDiam_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_HydrDiam () const
      {
        return this->SimFlowSeg_HydrDiam_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_HydrDiam_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_HydrDiam ()
      {
        return this->SimFlowSeg_HydrDiam_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_HydrDiam (const SimFlowSeg_HydrDiam_type& x)
      {
        this->SimFlowSeg_HydrDiam_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_HydrDiam (const SimFlowSeg_HydrDiam_optional& x)
      {
        this->SimFlowSeg_HydrDiam_ = x;
      }

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_CrossSectionArea_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CrossSectionArea () const
      {
        return this->SimFlowSeg_CrossSectionArea_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_CrossSectionArea_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CrossSectionArea ()
      {
        return this->SimFlowSeg_CrossSectionArea_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CrossSectionArea (const SimFlowSeg_CrossSectionArea_type& x)
      {
        this->SimFlowSeg_CrossSectionArea_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CrossSectionArea (const SimFlowSeg_CrossSectionArea_optional& x)
      {
        this->SimFlowSeg_CrossSectionArea_ = x;
      }

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_SurfRough_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_SurfRough () const
      {
        return this->SimFlowSeg_SurfRough_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_SurfRough_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_SurfRough ()
      {
        return this->SimFlowSeg_SurfRough_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_SurfRough (const SimFlowSeg_SurfRough_type& x)
      {
        this->SimFlowSeg_SurfRough_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_SurfRough (const SimFlowSeg_SurfRough_optional& x)
      {
        this->SimFlowSeg_SurfRough_ = x;
      }

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CoeffLocalDynamicLossDuetoFitting () const
      {
        return this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CoeffLocalDynamicLossDuetoFitting ()
      {
        return this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CoeffLocalDynamicLossDuetoFitting (const SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_type& x)
      {
        this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_CoeffLocalDynamicLossDuetoFitting (const SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_optional& x)
      {
        this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_ = x;
      }

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir () const
      {
        return this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir ()
      {
        return this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir (const SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_type& x)
      {
        this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir (const SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_optional& x)
      {
        this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_ = x;
      }

      const SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_OverallMoistTransCoefFromAirToAir_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallMoistTransCoefFromAirToAir () const
      {
        return this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::SimFlowSeg_OverallMoistTransCoefFromAirToAir_optional& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallMoistTransCoefFromAirToAir ()
      {
        return this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_;
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallMoistTransCoefFromAirToAir (const SimFlowSeg_OverallMoistTransCoefFromAirToAir_type& x)
      {
        this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_.set (x);
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSeg_OverallMoistTransCoefFromAirToAir (const SimFlowSeg_OverallMoistTransCoefFromAirToAir_optional& x)
      {
        this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowSegment_Duct_AirFlowNetworkDistribution
      //

      SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSegment_Duct_AirFlowNetworkDistribution ()
      : ::schema::simxml::MepModel::SimFlowSegment_Duct (),
        SimFlowSeg_DuctLength_ (this),
        SimFlowSeg_HydrDiam_ (this),
        SimFlowSeg_CrossSectionArea_ (this),
        SimFlowSeg_SurfRough_ (this),
        SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_ (this),
        SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_ (this),
        SimFlowSeg_OverallMoistTransCoefFromAirToAir_ (this)
      {
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSegment_Duct_AirFlowNetworkDistribution (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowSegment_Duct (RefId),
        SimFlowSeg_DuctLength_ (this),
        SimFlowSeg_HydrDiam_ (this),
        SimFlowSeg_CrossSectionArea_ (this),
        SimFlowSeg_SurfRough_ (this),
        SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_ (this),
        SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_ (this),
        SimFlowSeg_OverallMoistTransCoefFromAirToAir_ (this)
      {
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSegment_Duct_AirFlowNetworkDistribution (const SimFlowSegment_Duct_AirFlowNetworkDistribution& x,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowSegment_Duct (x, f, c),
        SimFlowSeg_DuctLength_ (x.SimFlowSeg_DuctLength_, f, this),
        SimFlowSeg_HydrDiam_ (x.SimFlowSeg_HydrDiam_, f, this),
        SimFlowSeg_CrossSectionArea_ (x.SimFlowSeg_CrossSectionArea_, f, this),
        SimFlowSeg_SurfRough_ (x.SimFlowSeg_SurfRough_, f, this),
        SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_ (x.SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_, f, this),
        SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_ (x.SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_, f, this),
        SimFlowSeg_OverallMoistTransCoefFromAirToAir_ (x.SimFlowSeg_OverallMoistTransCoefFromAirToAir_, f, this)
      {
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::
      SimFlowSegment_Duct_AirFlowNetworkDistribution (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowSegment_Duct (e, f | ::xml_schema::flags::base, c),
        SimFlowSeg_DuctLength_ (this),
        SimFlowSeg_HydrDiam_ (this),
        SimFlowSeg_CrossSectionArea_ (this),
        SimFlowSeg_SurfRough_ (this),
        SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_ (this),
        SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_ (this),
        SimFlowSeg_OverallMoistTransCoefFromAirToAir_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowSegment_Duct_AirFlowNetworkDistribution::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowSegment_Duct::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowSeg_DuctLength
          //
          if (n.name () == "SimFlowSeg_DuctLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_DuctLength_)
            {
              this->SimFlowSeg_DuctLength_.set (SimFlowSeg_DuctLength_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_HydrDiam
          //
          if (n.name () == "SimFlowSeg_HydrDiam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_HydrDiam_)
            {
              this->SimFlowSeg_HydrDiam_.set (SimFlowSeg_HydrDiam_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_CrossSectionArea
          //
          if (n.name () == "SimFlowSeg_CrossSectionArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_CrossSectionArea_)
            {
              this->SimFlowSeg_CrossSectionArea_.set (SimFlowSeg_CrossSectionArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_SurfRough
          //
          if (n.name () == "SimFlowSeg_SurfRough" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_SurfRough_)
            {
              this->SimFlowSeg_SurfRough_.set (SimFlowSeg_SurfRough_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_CoeffLocalDynamicLossDuetoFitting
          //
          if (n.name () == "SimFlowSeg_CoeffLocalDynamicLossDuetoFitting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_)
            {
              this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_.set (SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir
          //
          if (n.name () == "SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_)
            {
              this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_.set (SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_OverallMoistTransCoefFromAirToAir
          //
          if (n.name () == "SimFlowSeg_OverallMoistTransCoefFromAirToAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_)
            {
              this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_.set (SimFlowSeg_OverallMoistTransCoefFromAirToAir_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution* SimFlowSegment_Duct_AirFlowNetworkDistribution::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowSegment_Duct_AirFlowNetworkDistribution (*this, f, c);
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution& SimFlowSegment_Duct_AirFlowNetworkDistribution::
      operator= (const SimFlowSegment_Duct_AirFlowNetworkDistribution& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowSegment_Duct& > (*this) = x;
          this->SimFlowSeg_DuctLength_ = x.SimFlowSeg_DuctLength_;
          this->SimFlowSeg_HydrDiam_ = x.SimFlowSeg_HydrDiam_;
          this->SimFlowSeg_CrossSectionArea_ = x.SimFlowSeg_CrossSectionArea_;
          this->SimFlowSeg_SurfRough_ = x.SimFlowSeg_SurfRough_;
          this->SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_ = x.SimFlowSeg_CoeffLocalDynamicLossDuetoFitting_;
          this->SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_ = x.SimFlowSeg_OverallHeatTransCoefUFactorFromAirToAir_;
          this->SimFlowSeg_OverallMoistTransCoefFromAirToAir_ = x.SimFlowSeg_OverallMoistTransCoefFromAirToAir_;
        }

        return *this;
      }

      SimFlowSegment_Duct_AirFlowNetworkDistribution::
      ~SimFlowSegment_Duct_AirFlowNetworkDistribution ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

