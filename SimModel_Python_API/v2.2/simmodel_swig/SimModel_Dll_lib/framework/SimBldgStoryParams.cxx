// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBldgStoryParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimBldgStoryParams
      // 

      const SimBldgStoryParams::BldgStoryName_optional& SimBldgStoryParams::
      BldgStoryName () const
      {
        return this->BldgStoryName_;
      }

      SimBldgStoryParams::BldgStoryName_optional& SimBldgStoryParams::
      BldgStoryName ()
      {
        return this->BldgStoryName_;
      }

      void SimBldgStoryParams::
      BldgStoryName (const BldgStoryName_type& x)
      {
        this->BldgStoryName_.set (x);
      }

      void SimBldgStoryParams::
      BldgStoryName (const BldgStoryName_optional& x)
      {
        this->BldgStoryName_ = x;
      }

      void SimBldgStoryParams::
      BldgStoryName (::std::auto_ptr< BldgStoryName_type > x)
      {
        this->BldgStoryName_.set (x);
      }

      const SimBldgStoryParams::BldgStoryShape_optional& SimBldgStoryParams::
      BldgStoryShape () const
      {
        return this->BldgStoryShape_;
      }

      SimBldgStoryParams::BldgStoryShape_optional& SimBldgStoryParams::
      BldgStoryShape ()
      {
        return this->BldgStoryShape_;
      }

      void SimBldgStoryParams::
      BldgStoryShape (const BldgStoryShape_type& x)
      {
        this->BldgStoryShape_.set (x);
      }

      void SimBldgStoryParams::
      BldgStoryShape (const BldgStoryShape_optional& x)
      {
        this->BldgStoryShape_ = x;
      }

      void SimBldgStoryParams::
      BldgStoryShape (::std::auto_ptr< BldgStoryShape_type > x)
      {
        this->BldgStoryShape_.set (x);
      }

      const SimBldgStoryParams::X1Dim_optional& SimBldgStoryParams::
      X1Dim () const
      {
        return this->X1Dim_;
      }

      SimBldgStoryParams::X1Dim_optional& SimBldgStoryParams::
      X1Dim ()
      {
        return this->X1Dim_;
      }

      void SimBldgStoryParams::
      X1Dim (const X1Dim_type& x)
      {
        this->X1Dim_.set (x);
      }

      void SimBldgStoryParams::
      X1Dim (const X1Dim_optional& x)
      {
        this->X1Dim_ = x;
      }

      const SimBldgStoryParams::X2Dim_optional& SimBldgStoryParams::
      X2Dim () const
      {
        return this->X2Dim_;
      }

      SimBldgStoryParams::X2Dim_optional& SimBldgStoryParams::
      X2Dim ()
      {
        return this->X2Dim_;
      }

      void SimBldgStoryParams::
      X2Dim (const X2Dim_type& x)
      {
        this->X2Dim_.set (x);
      }

      void SimBldgStoryParams::
      X2Dim (const X2Dim_optional& x)
      {
        this->X2Dim_ = x;
      }

      const SimBldgStoryParams::X3Dim_optional& SimBldgStoryParams::
      X3Dim () const
      {
        return this->X3Dim_;
      }

      SimBldgStoryParams::X3Dim_optional& SimBldgStoryParams::
      X3Dim ()
      {
        return this->X3Dim_;
      }

      void SimBldgStoryParams::
      X3Dim (const X3Dim_type& x)
      {
        this->X3Dim_.set (x);
      }

      void SimBldgStoryParams::
      X3Dim (const X3Dim_optional& x)
      {
        this->X3Dim_ = x;
      }

      const SimBldgStoryParams::Y1Dim_optional& SimBldgStoryParams::
      Y1Dim () const
      {
        return this->Y1Dim_;
      }

      SimBldgStoryParams::Y1Dim_optional& SimBldgStoryParams::
      Y1Dim ()
      {
        return this->Y1Dim_;
      }

      void SimBldgStoryParams::
      Y1Dim (const Y1Dim_type& x)
      {
        this->Y1Dim_.set (x);
      }

      void SimBldgStoryParams::
      Y1Dim (const Y1Dim_optional& x)
      {
        this->Y1Dim_ = x;
      }

      const SimBldgStoryParams::Y2Dim_optional& SimBldgStoryParams::
      Y2Dim () const
      {
        return this->Y2Dim_;
      }

      SimBldgStoryParams::Y2Dim_optional& SimBldgStoryParams::
      Y2Dim ()
      {
        return this->Y2Dim_;
      }

      void SimBldgStoryParams::
      Y2Dim (const Y2Dim_type& x)
      {
        this->Y2Dim_.set (x);
      }

      void SimBldgStoryParams::
      Y2Dim (const Y2Dim_optional& x)
      {
        this->Y2Dim_ = x;
      }

      const SimBldgStoryParams::Y3Dim_optional& SimBldgStoryParams::
      Y3Dim () const
      {
        return this->Y3Dim_;
      }

      SimBldgStoryParams::Y3Dim_optional& SimBldgStoryParams::
      Y3Dim ()
      {
        return this->Y3Dim_;
      }

      void SimBldgStoryParams::
      Y3Dim (const Y3Dim_type& x)
      {
        this->Y3Dim_.set (x);
      }

      void SimBldgStoryParams::
      Y3Dim (const Y3Dim_optional& x)
      {
        this->Y3Dim_ = x;
      }

      const SimBldgStoryParams::FloorToFloorHeight_optional& SimBldgStoryParams::
      FloorToFloorHeight () const
      {
        return this->FloorToFloorHeight_;
      }

      SimBldgStoryParams::FloorToFloorHeight_optional& SimBldgStoryParams::
      FloorToFloorHeight ()
      {
        return this->FloorToFloorHeight_;
      }

      void SimBldgStoryParams::
      FloorToFloorHeight (const FloorToFloorHeight_type& x)
      {
        this->FloorToFloorHeight_.set (x);
      }

      void SimBldgStoryParams::
      FloorToFloorHeight (const FloorToFloorHeight_optional& x)
      {
        this->FloorToFloorHeight_ = x;
      }

      const SimBldgStoryParams::CeilingBottomElevation_optional& SimBldgStoryParams::
      CeilingBottomElevation () const
      {
        return this->CeilingBottomElevation_;
      }

      SimBldgStoryParams::CeilingBottomElevation_optional& SimBldgStoryParams::
      CeilingBottomElevation ()
      {
        return this->CeilingBottomElevation_;
      }

      void SimBldgStoryParams::
      CeilingBottomElevation (const CeilingBottomElevation_type& x)
      {
        this->CeilingBottomElevation_.set (x);
      }

      void SimBldgStoryParams::
      CeilingBottomElevation (const CeilingBottomElevation_optional& x)
      {
        this->CeilingBottomElevation_ = x;
      }

      const SimBldgStoryParams::FinishFloorTopElevation_optional& SimBldgStoryParams::
      FinishFloorTopElevation () const
      {
        return this->FinishFloorTopElevation_;
      }

      SimBldgStoryParams::FinishFloorTopElevation_optional& SimBldgStoryParams::
      FinishFloorTopElevation ()
      {
        return this->FinishFloorTopElevation_;
      }

      void SimBldgStoryParams::
      FinishFloorTopElevation (const FinishFloorTopElevation_type& x)
      {
        this->FinishFloorTopElevation_.set (x);
      }

      void SimBldgStoryParams::
      FinishFloorTopElevation (const FinishFloorTopElevation_optional& x)
      {
        this->FinishFloorTopElevation_ = x;
      }

      const SimBldgStoryParams::SpaceConfigOccupied_optional& SimBldgStoryParams::
      SpaceConfigOccupied () const
      {
        return this->SpaceConfigOccupied_;
      }

      SimBldgStoryParams::SpaceConfigOccupied_optional& SimBldgStoryParams::
      SpaceConfigOccupied ()
      {
        return this->SpaceConfigOccupied_;
      }

      void SimBldgStoryParams::
      SpaceConfigOccupied (const SpaceConfigOccupied_type& x)
      {
        this->SpaceConfigOccupied_.set (x);
      }

      void SimBldgStoryParams::
      SpaceConfigOccupied (const SpaceConfigOccupied_optional& x)
      {
        this->SpaceConfigOccupied_ = x;
      }

      void SimBldgStoryParams::
      SpaceConfigOccupied (::std::auto_ptr< SpaceConfigOccupied_type > x)
      {
        this->SpaceConfigOccupied_.set (x);
      }

      const SimBldgStoryParams::PlenumConfiguration_optional& SimBldgStoryParams::
      PlenumConfiguration () const
      {
        return this->PlenumConfiguration_;
      }

      SimBldgStoryParams::PlenumConfiguration_optional& SimBldgStoryParams::
      PlenumConfiguration ()
      {
        return this->PlenumConfiguration_;
      }

      void SimBldgStoryParams::
      PlenumConfiguration (const PlenumConfiguration_type& x)
      {
        this->PlenumConfiguration_.set (x);
      }

      void SimBldgStoryParams::
      PlenumConfiguration (const PlenumConfiguration_optional& x)
      {
        this->PlenumConfiguration_ = x;
      }

      void SimBldgStoryParams::
      PlenumConfiguration (::std::auto_ptr< PlenumConfiguration_type > x)
      {
        this->PlenumConfiguration_.set (x);
      }

      const SimBldgStoryParams::SpaceConfigAboveCeiling_optional& SimBldgStoryParams::
      SpaceConfigAboveCeiling () const
      {
        return this->SpaceConfigAboveCeiling_;
      }

      SimBldgStoryParams::SpaceConfigAboveCeiling_optional& SimBldgStoryParams::
      SpaceConfigAboveCeiling ()
      {
        return this->SpaceConfigAboveCeiling_;
      }

      void SimBldgStoryParams::
      SpaceConfigAboveCeiling (const SpaceConfigAboveCeiling_type& x)
      {
        this->SpaceConfigAboveCeiling_.set (x);
      }

      void SimBldgStoryParams::
      SpaceConfigAboveCeiling (const SpaceConfigAboveCeiling_optional& x)
      {
        this->SpaceConfigAboveCeiling_ = x;
      }

      void SimBldgStoryParams::
      SpaceConfigAboveCeiling (::std::auto_ptr< SpaceConfigAboveCeiling_type > x)
      {
        this->SpaceConfigAboveCeiling_.set (x);
      }

      const SimBldgStoryParams::SpaceConfigBelowFloor_optional& SimBldgStoryParams::
      SpaceConfigBelowFloor () const
      {
        return this->SpaceConfigBelowFloor_;
      }

      SimBldgStoryParams::SpaceConfigBelowFloor_optional& SimBldgStoryParams::
      SpaceConfigBelowFloor ()
      {
        return this->SpaceConfigBelowFloor_;
      }

      void SimBldgStoryParams::
      SpaceConfigBelowFloor (const SpaceConfigBelowFloor_type& x)
      {
        this->SpaceConfigBelowFloor_.set (x);
      }

      void SimBldgStoryParams::
      SpaceConfigBelowFloor (const SpaceConfigBelowFloor_optional& x)
      {
        this->SpaceConfigBelowFloor_ = x;
      }

      void SimBldgStoryParams::
      SpaceConfigBelowFloor (::std::auto_ptr< SpaceConfigBelowFloor_type > x)
      {
        this->SpaceConfigBelowFloor_.set (x);
      }

      const SimBldgStoryParams::PerimeterZoneDepth_optional& SimBldgStoryParams::
      PerimeterZoneDepth () const
      {
        return this->PerimeterZoneDepth_;
      }

      SimBldgStoryParams::PerimeterZoneDepth_optional& SimBldgStoryParams::
      PerimeterZoneDepth ()
      {
        return this->PerimeterZoneDepth_;
      }

      void SimBldgStoryParams::
      PerimeterZoneDepth (const PerimeterZoneDepth_type& x)
      {
        this->PerimeterZoneDepth_.set (x);
      }

      void SimBldgStoryParams::
      PerimeterZoneDepth (const PerimeterZoneDepth_optional& x)
      {
        this->PerimeterZoneDepth_ = x;
      }

      const SimBldgStoryParams::WallProfilePathType_optional& SimBldgStoryParams::
      WallProfilePathType () const
      {
        return this->WallProfilePathType_;
      }

      SimBldgStoryParams::WallProfilePathType_optional& SimBldgStoryParams::
      WallProfilePathType ()
      {
        return this->WallProfilePathType_;
      }

      void SimBldgStoryParams::
      WallProfilePathType (const WallProfilePathType_type& x)
      {
        this->WallProfilePathType_.set (x);
      }

      void SimBldgStoryParams::
      WallProfilePathType (const WallProfilePathType_optional& x)
      {
        this->WallProfilePathType_ = x;
      }

      void SimBldgStoryParams::
      WallProfilePathType (::std::auto_ptr< WallProfilePathType_type > x)
      {
        this->WallProfilePathType_.set (x);
      }

      const SimBldgStoryParams::BldgStoryProfilePath_optional& SimBldgStoryParams::
      BldgStoryProfilePath () const
      {
        return this->BldgStoryProfilePath_;
      }

      SimBldgStoryParams::BldgStoryProfilePath_optional& SimBldgStoryParams::
      BldgStoryProfilePath ()
      {
        return this->BldgStoryProfilePath_;
      }

      void SimBldgStoryParams::
      BldgStoryProfilePath (const BldgStoryProfilePath_type& x)
      {
        this->BldgStoryProfilePath_.set (x);
      }

      void SimBldgStoryParams::
      BldgStoryProfilePath (const BldgStoryProfilePath_optional& x)
      {
        this->BldgStoryProfilePath_ = x;
      }

      void SimBldgStoryParams::
      BldgStoryProfilePath (::std::auto_ptr< BldgStoryProfilePath_type > x)
      {
        this->BldgStoryProfilePath_.set (x);
      }

      const SimBldgStoryParams::PerimeterZoneOutsidePath_optional& SimBldgStoryParams::
      PerimeterZoneOutsidePath () const
      {
        return this->PerimeterZoneOutsidePath_;
      }

      SimBldgStoryParams::PerimeterZoneOutsidePath_optional& SimBldgStoryParams::
      PerimeterZoneOutsidePath ()
      {
        return this->PerimeterZoneOutsidePath_;
      }

      void SimBldgStoryParams::
      PerimeterZoneOutsidePath (const PerimeterZoneOutsidePath_type& x)
      {
        this->PerimeterZoneOutsidePath_.set (x);
      }

      void SimBldgStoryParams::
      PerimeterZoneOutsidePath (const PerimeterZoneOutsidePath_optional& x)
      {
        this->PerimeterZoneOutsidePath_ = x;
      }

      void SimBldgStoryParams::
      PerimeterZoneOutsidePath (::std::auto_ptr< PerimeterZoneOutsidePath_type > x)
      {
        this->PerimeterZoneOutsidePath_.set (x);
      }

      const SimBldgStoryParams::CoreZoneOutsidePaths_optional& SimBldgStoryParams::
      CoreZoneOutsidePaths () const
      {
        return this->CoreZoneOutsidePaths_;
      }

      SimBldgStoryParams::CoreZoneOutsidePaths_optional& SimBldgStoryParams::
      CoreZoneOutsidePaths ()
      {
        return this->CoreZoneOutsidePaths_;
      }

      void SimBldgStoryParams::
      CoreZoneOutsidePaths (const CoreZoneOutsidePaths_type& x)
      {
        this->CoreZoneOutsidePaths_.set (x);
      }

      void SimBldgStoryParams::
      CoreZoneOutsidePaths (const CoreZoneOutsidePaths_optional& x)
      {
        this->CoreZoneOutsidePaths_ = x;
      }

      void SimBldgStoryParams::
      CoreZoneOutsidePaths (::std::auto_ptr< CoreZoneOutsidePaths_type > x)
      {
        this->CoreZoneOutsidePaths_.set (x);
      }

      const SimBldgStoryParams::CoreZoneInsidePaths_optional& SimBldgStoryParams::
      CoreZoneInsidePaths () const
      {
        return this->CoreZoneInsidePaths_;
      }

      SimBldgStoryParams::CoreZoneInsidePaths_optional& SimBldgStoryParams::
      CoreZoneInsidePaths ()
      {
        return this->CoreZoneInsidePaths_;
      }

      void SimBldgStoryParams::
      CoreZoneInsidePaths (const CoreZoneInsidePaths_type& x)
      {
        this->CoreZoneInsidePaths_.set (x);
      }

      void SimBldgStoryParams::
      CoreZoneInsidePaths (const CoreZoneInsidePaths_optional& x)
      {
        this->CoreZoneInsidePaths_ = x;
      }

      void SimBldgStoryParams::
      CoreZoneInsidePaths (::std::auto_ptr< CoreZoneInsidePaths_type > x)
      {
        this->CoreZoneInsidePaths_.set (x);
      }

      const SimBldgStoryParams::VoidProfilePaths_optional& SimBldgStoryParams::
      VoidProfilePaths () const
      {
        return this->VoidProfilePaths_;
      }

      SimBldgStoryParams::VoidProfilePaths_optional& SimBldgStoryParams::
      VoidProfilePaths ()
      {
        return this->VoidProfilePaths_;
      }

      void SimBldgStoryParams::
      VoidProfilePaths (const VoidProfilePaths_type& x)
      {
        this->VoidProfilePaths_.set (x);
      }

      void SimBldgStoryParams::
      VoidProfilePaths (const VoidProfilePaths_optional& x)
      {
        this->VoidProfilePaths_ = x;
      }

      void SimBldgStoryParams::
      VoidProfilePaths (::std::auto_ptr< VoidProfilePaths_type > x)
      {
        this->VoidProfilePaths_.set (x);
      }

      const SimBldgStoryParams::BldgConstructionsTemplate_optional& SimBldgStoryParams::
      BldgConstructionsTemplate () const
      {
        return this->BldgConstructionsTemplate_;
      }

      SimBldgStoryParams::BldgConstructionsTemplate_optional& SimBldgStoryParams::
      BldgConstructionsTemplate ()
      {
        return this->BldgConstructionsTemplate_;
      }

      void SimBldgStoryParams::
      BldgConstructionsTemplate (const BldgConstructionsTemplate_type& x)
      {
        this->BldgConstructionsTemplate_.set (x);
      }

      void SimBldgStoryParams::
      BldgConstructionsTemplate (const BldgConstructionsTemplate_optional& x)
      {
        this->BldgConstructionsTemplate_ = x;
      }

      void SimBldgStoryParams::
      BldgConstructionsTemplate (::std::auto_ptr< BldgConstructionsTemplate_type > x)
      {
        this->BldgConstructionsTemplate_.set (x);
      }

      const SimBldgStoryParams::TargetNorthWinArrayParams_optional& SimBldgStoryParams::
      TargetNorthWinArrayParams () const
      {
        return this->TargetNorthWinArrayParams_;
      }

      SimBldgStoryParams::TargetNorthWinArrayParams_optional& SimBldgStoryParams::
      TargetNorthWinArrayParams ()
      {
        return this->TargetNorthWinArrayParams_;
      }

      void SimBldgStoryParams::
      TargetNorthWinArrayParams (const TargetNorthWinArrayParams_type& x)
      {
        this->TargetNorthWinArrayParams_.set (x);
      }

      void SimBldgStoryParams::
      TargetNorthWinArrayParams (const TargetNorthWinArrayParams_optional& x)
      {
        this->TargetNorthWinArrayParams_ = x;
      }

      void SimBldgStoryParams::
      TargetNorthWinArrayParams (::std::auto_ptr< TargetNorthWinArrayParams_type > x)
      {
        this->TargetNorthWinArrayParams_.set (x);
      }

      const SimBldgStoryParams::TargetSouthWinArrayParams_optional& SimBldgStoryParams::
      TargetSouthWinArrayParams () const
      {
        return this->TargetSouthWinArrayParams_;
      }

      SimBldgStoryParams::TargetSouthWinArrayParams_optional& SimBldgStoryParams::
      TargetSouthWinArrayParams ()
      {
        return this->TargetSouthWinArrayParams_;
      }

      void SimBldgStoryParams::
      TargetSouthWinArrayParams (const TargetSouthWinArrayParams_type& x)
      {
        this->TargetSouthWinArrayParams_.set (x);
      }

      void SimBldgStoryParams::
      TargetSouthWinArrayParams (const TargetSouthWinArrayParams_optional& x)
      {
        this->TargetSouthWinArrayParams_ = x;
      }

      void SimBldgStoryParams::
      TargetSouthWinArrayParams (::std::auto_ptr< TargetSouthWinArrayParams_type > x)
      {
        this->TargetSouthWinArrayParams_.set (x);
      }

      const SimBldgStoryParams::TargetEastWinArrayParams_optional& SimBldgStoryParams::
      TargetEastWinArrayParams () const
      {
        return this->TargetEastWinArrayParams_;
      }

      SimBldgStoryParams::TargetEastWinArrayParams_optional& SimBldgStoryParams::
      TargetEastWinArrayParams ()
      {
        return this->TargetEastWinArrayParams_;
      }

      void SimBldgStoryParams::
      TargetEastWinArrayParams (const TargetEastWinArrayParams_type& x)
      {
        this->TargetEastWinArrayParams_.set (x);
      }

      void SimBldgStoryParams::
      TargetEastWinArrayParams (const TargetEastWinArrayParams_optional& x)
      {
        this->TargetEastWinArrayParams_ = x;
      }

      void SimBldgStoryParams::
      TargetEastWinArrayParams (::std::auto_ptr< TargetEastWinArrayParams_type > x)
      {
        this->TargetEastWinArrayParams_.set (x);
      }

      const SimBldgStoryParams::TargetWestWinArrayParams_optional& SimBldgStoryParams::
      TargetWestWinArrayParams () const
      {
        return this->TargetWestWinArrayParams_;
      }

      SimBldgStoryParams::TargetWestWinArrayParams_optional& SimBldgStoryParams::
      TargetWestWinArrayParams ()
      {
        return this->TargetWestWinArrayParams_;
      }

      void SimBldgStoryParams::
      TargetWestWinArrayParams (const TargetWestWinArrayParams_type& x)
      {
        this->TargetWestWinArrayParams_.set (x);
      }

      void SimBldgStoryParams::
      TargetWestWinArrayParams (const TargetWestWinArrayParams_optional& x)
      {
        this->TargetWestWinArrayParams_ = x;
      }

      void SimBldgStoryParams::
      TargetWestWinArrayParams (::std::auto_ptr< TargetWestWinArrayParams_type > x)
      {
        this->TargetWestWinArrayParams_.set (x);
      }

      const SimBldgStoryParams::DefaultLibraryType_optional& SimBldgStoryParams::
      DefaultLibraryType () const
      {
        return this->DefaultLibraryType_;
      }

      SimBldgStoryParams::DefaultLibraryType_optional& SimBldgStoryParams::
      DefaultLibraryType ()
      {
        return this->DefaultLibraryType_;
      }

      void SimBldgStoryParams::
      DefaultLibraryType (const DefaultLibraryType_type& x)
      {
        this->DefaultLibraryType_.set (x);
      }

      void SimBldgStoryParams::
      DefaultLibraryType (const DefaultLibraryType_optional& x)
      {
        this->DefaultLibraryType_ = x;
      }

      void SimBldgStoryParams::
      DefaultLibraryType (::std::auto_ptr< DefaultLibraryType_type > x)
      {
        this->DefaultLibraryType_.set (x);
      }

      const SimBldgStoryParams::DefaultLibEntryRef_optional& SimBldgStoryParams::
      DefaultLibEntryRef () const
      {
        return this->DefaultLibEntryRef_;
      }

      SimBldgStoryParams::DefaultLibEntryRef_optional& SimBldgStoryParams::
      DefaultLibEntryRef ()
      {
        return this->DefaultLibEntryRef_;
      }

      void SimBldgStoryParams::
      DefaultLibEntryRef (const DefaultLibEntryRef_type& x)
      {
        this->DefaultLibEntryRef_.set (x);
      }

      void SimBldgStoryParams::
      DefaultLibEntryRef (const DefaultLibEntryRef_optional& x)
      {
        this->DefaultLibEntryRef_ = x;
      }

      void SimBldgStoryParams::
      DefaultLibEntryRef (::std::auto_ptr< DefaultLibEntryRef_type > x)
      {
        this->DefaultLibEntryRef_.set (x);
      }

      const SimBldgStoryParams::DefaultOhangEntryRef_optional& SimBldgStoryParams::
      DefaultOhangEntryRef () const
      {
        return this->DefaultOhangEntryRef_;
      }

      SimBldgStoryParams::DefaultOhangEntryRef_optional& SimBldgStoryParams::
      DefaultOhangEntryRef ()
      {
        return this->DefaultOhangEntryRef_;
      }

      void SimBldgStoryParams::
      DefaultOhangEntryRef (const DefaultOhangEntryRef_type& x)
      {
        this->DefaultOhangEntryRef_.set (x);
      }

      void SimBldgStoryParams::
      DefaultOhangEntryRef (const DefaultOhangEntryRef_optional& x)
      {
        this->DefaultOhangEntryRef_ = x;
      }

      void SimBldgStoryParams::
      DefaultOhangEntryRef (::std::auto_ptr< DefaultOhangEntryRef_type > x)
      {
        this->DefaultOhangEntryRef_.set (x);
      }

      const SimBldgStoryParams::DefaultFinEntryRef_optional& SimBldgStoryParams::
      DefaultFinEntryRef () const
      {
        return this->DefaultFinEntryRef_;
      }

      SimBldgStoryParams::DefaultFinEntryRef_optional& SimBldgStoryParams::
      DefaultFinEntryRef ()
      {
        return this->DefaultFinEntryRef_;
      }

      void SimBldgStoryParams::
      DefaultFinEntryRef (const DefaultFinEntryRef_type& x)
      {
        this->DefaultFinEntryRef_.set (x);
      }

      void SimBldgStoryParams::
      DefaultFinEntryRef (const DefaultFinEntryRef_optional& x)
      {
        this->DefaultFinEntryRef_ = x;
      }

      void SimBldgStoryParams::
      DefaultFinEntryRef (::std::auto_ptr< DefaultFinEntryRef_type > x)
      {
        this->DefaultFinEntryRef_.set (x);
      }

      const SimBldgStoryParams::InsertedDWG_optional& SimBldgStoryParams::
      InsertedDWG () const
      {
        return this->InsertedDWG_;
      }

      SimBldgStoryParams::InsertedDWG_optional& SimBldgStoryParams::
      InsertedDWG ()
      {
        return this->InsertedDWG_;
      }

      void SimBldgStoryParams::
      InsertedDWG (const InsertedDWG_type& x)
      {
        this->InsertedDWG_.set (x);
      }

      void SimBldgStoryParams::
      InsertedDWG (const InsertedDWG_optional& x)
      {
        this->InsertedDWG_ = x;
      }

      void SimBldgStoryParams::
      InsertedDWG (::std::auto_ptr< InsertedDWG_type > x)
      {
        this->InsertedDWG_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimBldgStoryParams
      //

      SimBldgStoryParams::
      SimBldgStoryParams ()
      : ::schema::simxml::SimModelCore::SimBldgModelParams (),
        BldgStoryName_ (this),
        BldgStoryShape_ (this),
        X1Dim_ (this),
        X2Dim_ (this),
        X3Dim_ (this),
        Y1Dim_ (this),
        Y2Dim_ (this),
        Y3Dim_ (this),
        FloorToFloorHeight_ (this),
        CeilingBottomElevation_ (this),
        FinishFloorTopElevation_ (this),
        SpaceConfigOccupied_ (this),
        PlenumConfiguration_ (this),
        SpaceConfigAboveCeiling_ (this),
        SpaceConfigBelowFloor_ (this),
        PerimeterZoneDepth_ (this),
        WallProfilePathType_ (this),
        BldgStoryProfilePath_ (this),
        PerimeterZoneOutsidePath_ (this),
        CoreZoneOutsidePaths_ (this),
        CoreZoneInsidePaths_ (this),
        VoidProfilePaths_ (this),
        BldgConstructionsTemplate_ (this),
        TargetNorthWinArrayParams_ (this),
        TargetSouthWinArrayParams_ (this),
        TargetEastWinArrayParams_ (this),
        TargetWestWinArrayParams_ (this),
        DefaultLibraryType_ (this),
        DefaultLibEntryRef_ (this),
        DefaultOhangEntryRef_ (this),
        DefaultFinEntryRef_ (this),
        InsertedDWG_ (this)
      {
      }

      SimBldgStoryParams::
      SimBldgStoryParams (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (RefId),
        BldgStoryName_ (this),
        BldgStoryShape_ (this),
        X1Dim_ (this),
        X2Dim_ (this),
        X3Dim_ (this),
        Y1Dim_ (this),
        Y2Dim_ (this),
        Y3Dim_ (this),
        FloorToFloorHeight_ (this),
        CeilingBottomElevation_ (this),
        FinishFloorTopElevation_ (this),
        SpaceConfigOccupied_ (this),
        PlenumConfiguration_ (this),
        SpaceConfigAboveCeiling_ (this),
        SpaceConfigBelowFloor_ (this),
        PerimeterZoneDepth_ (this),
        WallProfilePathType_ (this),
        BldgStoryProfilePath_ (this),
        PerimeterZoneOutsidePath_ (this),
        CoreZoneOutsidePaths_ (this),
        CoreZoneInsidePaths_ (this),
        VoidProfilePaths_ (this),
        BldgConstructionsTemplate_ (this),
        TargetNorthWinArrayParams_ (this),
        TargetSouthWinArrayParams_ (this),
        TargetEastWinArrayParams_ (this),
        TargetWestWinArrayParams_ (this),
        DefaultLibraryType_ (this),
        DefaultLibEntryRef_ (this),
        DefaultOhangEntryRef_ (this),
        DefaultFinEntryRef_ (this),
        InsertedDWG_ (this)
      {
      }

      SimBldgStoryParams::
      SimBldgStoryParams (const SimBldgStoryParams& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (x, f, c),
        BldgStoryName_ (x.BldgStoryName_, f, this),
        BldgStoryShape_ (x.BldgStoryShape_, f, this),
        X1Dim_ (x.X1Dim_, f, this),
        X2Dim_ (x.X2Dim_, f, this),
        X3Dim_ (x.X3Dim_, f, this),
        Y1Dim_ (x.Y1Dim_, f, this),
        Y2Dim_ (x.Y2Dim_, f, this),
        Y3Dim_ (x.Y3Dim_, f, this),
        FloorToFloorHeight_ (x.FloorToFloorHeight_, f, this),
        CeilingBottomElevation_ (x.CeilingBottomElevation_, f, this),
        FinishFloorTopElevation_ (x.FinishFloorTopElevation_, f, this),
        SpaceConfigOccupied_ (x.SpaceConfigOccupied_, f, this),
        PlenumConfiguration_ (x.PlenumConfiguration_, f, this),
        SpaceConfigAboveCeiling_ (x.SpaceConfigAboveCeiling_, f, this),
        SpaceConfigBelowFloor_ (x.SpaceConfigBelowFloor_, f, this),
        PerimeterZoneDepth_ (x.PerimeterZoneDepth_, f, this),
        WallProfilePathType_ (x.WallProfilePathType_, f, this),
        BldgStoryProfilePath_ (x.BldgStoryProfilePath_, f, this),
        PerimeterZoneOutsidePath_ (x.PerimeterZoneOutsidePath_, f, this),
        CoreZoneOutsidePaths_ (x.CoreZoneOutsidePaths_, f, this),
        CoreZoneInsidePaths_ (x.CoreZoneInsidePaths_, f, this),
        VoidProfilePaths_ (x.VoidProfilePaths_, f, this),
        BldgConstructionsTemplate_ (x.BldgConstructionsTemplate_, f, this),
        TargetNorthWinArrayParams_ (x.TargetNorthWinArrayParams_, f, this),
        TargetSouthWinArrayParams_ (x.TargetSouthWinArrayParams_, f, this),
        TargetEastWinArrayParams_ (x.TargetEastWinArrayParams_, f, this),
        TargetWestWinArrayParams_ (x.TargetWestWinArrayParams_, f, this),
        DefaultLibraryType_ (x.DefaultLibraryType_, f, this),
        DefaultLibEntryRef_ (x.DefaultLibEntryRef_, f, this),
        DefaultOhangEntryRef_ (x.DefaultOhangEntryRef_, f, this),
        DefaultFinEntryRef_ (x.DefaultFinEntryRef_, f, this),
        InsertedDWG_ (x.InsertedDWG_, f, this)
      {
      }

      SimBldgStoryParams::
      SimBldgStoryParams (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        BldgStoryName_ (this),
        BldgStoryShape_ (this),
        X1Dim_ (this),
        X2Dim_ (this),
        X3Dim_ (this),
        Y1Dim_ (this),
        Y2Dim_ (this),
        Y3Dim_ (this),
        FloorToFloorHeight_ (this),
        CeilingBottomElevation_ (this),
        FinishFloorTopElevation_ (this),
        SpaceConfigOccupied_ (this),
        PlenumConfiguration_ (this),
        SpaceConfigAboveCeiling_ (this),
        SpaceConfigBelowFloor_ (this),
        PerimeterZoneDepth_ (this),
        WallProfilePathType_ (this),
        BldgStoryProfilePath_ (this),
        PerimeterZoneOutsidePath_ (this),
        CoreZoneOutsidePaths_ (this),
        CoreZoneInsidePaths_ (this),
        VoidProfilePaths_ (this),
        BldgConstructionsTemplate_ (this),
        TargetNorthWinArrayParams_ (this),
        TargetSouthWinArrayParams_ (this),
        TargetEastWinArrayParams_ (this),
        TargetWestWinArrayParams_ (this),
        DefaultLibraryType_ (this),
        DefaultLibEntryRef_ (this),
        DefaultOhangEntryRef_ (this),
        DefaultFinEntryRef_ (this),
        InsertedDWG_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBldgStoryParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // BldgStoryName
          //
          if (n.name () == "BldgStoryName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< BldgStoryName_type > r (
              BldgStoryName_traits::create (i, f, this));

            if (!this->BldgStoryName_)
            {
              this->BldgStoryName_.set (r);
              continue;
            }
          }

          // BldgStoryShape
          //
          if (n.name () == "BldgStoryShape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< BldgStoryShape_type > r (
              BldgStoryShape_traits::create (i, f, this));

            if (!this->BldgStoryShape_)
            {
              this->BldgStoryShape_.set (r);
              continue;
            }
          }

          // X1Dim
          //
          if (n.name () == "X1Dim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->X1Dim_)
            {
              this->X1Dim_.set (X1Dim_traits::create (i, f, this));
              continue;
            }
          }

          // X2Dim
          //
          if (n.name () == "X2Dim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->X2Dim_)
            {
              this->X2Dim_.set (X2Dim_traits::create (i, f, this));
              continue;
            }
          }

          // X3Dim
          //
          if (n.name () == "X3Dim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->X3Dim_)
            {
              this->X3Dim_.set (X3Dim_traits::create (i, f, this));
              continue;
            }
          }

          // Y1Dim
          //
          if (n.name () == "Y1Dim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Y1Dim_)
            {
              this->Y1Dim_.set (Y1Dim_traits::create (i, f, this));
              continue;
            }
          }

          // Y2Dim
          //
          if (n.name () == "Y2Dim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Y2Dim_)
            {
              this->Y2Dim_.set (Y2Dim_traits::create (i, f, this));
              continue;
            }
          }

          // Y3Dim
          //
          if (n.name () == "Y3Dim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Y3Dim_)
            {
              this->Y3Dim_.set (Y3Dim_traits::create (i, f, this));
              continue;
            }
          }

          // FloorToFloorHeight
          //
          if (n.name () == "FloorToFloorHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FloorToFloorHeight_)
            {
              this->FloorToFloorHeight_.set (FloorToFloorHeight_traits::create (i, f, this));
              continue;
            }
          }

          // CeilingBottomElevation
          //
          if (n.name () == "CeilingBottomElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->CeilingBottomElevation_)
            {
              this->CeilingBottomElevation_.set (CeilingBottomElevation_traits::create (i, f, this));
              continue;
            }
          }

          // FinishFloorTopElevation
          //
          if (n.name () == "FinishFloorTopElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FinishFloorTopElevation_)
            {
              this->FinishFloorTopElevation_.set (FinishFloorTopElevation_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceConfigOccupied
          //
          if (n.name () == "SpaceConfigOccupied" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceConfigOccupied_type > r (
              SpaceConfigOccupied_traits::create (i, f, this));

            if (!this->SpaceConfigOccupied_)
            {
              this->SpaceConfigOccupied_.set (r);
              continue;
            }
          }

          // PlenumConfiguration
          //
          if (n.name () == "PlenumConfiguration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PlenumConfiguration_type > r (
              PlenumConfiguration_traits::create (i, f, this));

            if (!this->PlenumConfiguration_)
            {
              this->PlenumConfiguration_.set (r);
              continue;
            }
          }

          // SpaceConfigAboveCeiling
          //
          if (n.name () == "SpaceConfigAboveCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceConfigAboveCeiling_type > r (
              SpaceConfigAboveCeiling_traits::create (i, f, this));

            if (!this->SpaceConfigAboveCeiling_)
            {
              this->SpaceConfigAboveCeiling_.set (r);
              continue;
            }
          }

          // SpaceConfigBelowFloor
          //
          if (n.name () == "SpaceConfigBelowFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceConfigBelowFloor_type > r (
              SpaceConfigBelowFloor_traits::create (i, f, this));

            if (!this->SpaceConfigBelowFloor_)
            {
              this->SpaceConfigBelowFloor_.set (r);
              continue;
            }
          }

          // PerimeterZoneDepth
          //
          if (n.name () == "PerimeterZoneDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->PerimeterZoneDepth_)
            {
              this->PerimeterZoneDepth_.set (PerimeterZoneDepth_traits::create (i, f, this));
              continue;
            }
          }

          // WallProfilePathType
          //
          if (n.name () == "WallProfilePathType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WallProfilePathType_type > r (
              WallProfilePathType_traits::create (i, f, this));

            if (!this->WallProfilePathType_)
            {
              this->WallProfilePathType_.set (r);
              continue;
            }
          }

          // BldgStoryProfilePath
          //
          if (n.name () == "BldgStoryProfilePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< BldgStoryProfilePath_type > r (
              BldgStoryProfilePath_traits::create (i, f, this));

            if (!this->BldgStoryProfilePath_)
            {
              this->BldgStoryProfilePath_.set (r);
              continue;
            }
          }

          // PerimeterZoneOutsidePath
          //
          if (n.name () == "PerimeterZoneOutsidePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PerimeterZoneOutsidePath_type > r (
              PerimeterZoneOutsidePath_traits::create (i, f, this));

            if (!this->PerimeterZoneOutsidePath_)
            {
              this->PerimeterZoneOutsidePath_.set (r);
              continue;
            }
          }

          // CoreZoneOutsidePaths
          //
          if (n.name () == "CoreZoneOutsidePaths" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< CoreZoneOutsidePaths_type > r (
              CoreZoneOutsidePaths_traits::create (i, f, this));

            if (!this->CoreZoneOutsidePaths_)
            {
              this->CoreZoneOutsidePaths_.set (r);
              continue;
            }
          }

          // CoreZoneInsidePaths
          //
          if (n.name () == "CoreZoneInsidePaths" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< CoreZoneInsidePaths_type > r (
              CoreZoneInsidePaths_traits::create (i, f, this));

            if (!this->CoreZoneInsidePaths_)
            {
              this->CoreZoneInsidePaths_.set (r);
              continue;
            }
          }

          // VoidProfilePaths
          //
          if (n.name () == "VoidProfilePaths" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< VoidProfilePaths_type > r (
              VoidProfilePaths_traits::create (i, f, this));

            if (!this->VoidProfilePaths_)
            {
              this->VoidProfilePaths_.set (r);
              continue;
            }
          }

          // BldgConstructionsTemplate
          //
          if (n.name () == "BldgConstructionsTemplate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< BldgConstructionsTemplate_type > r (
              BldgConstructionsTemplate_traits::create (i, f, this));

            if (!this->BldgConstructionsTemplate_)
            {
              this->BldgConstructionsTemplate_.set (r);
              continue;
            }
          }

          // TargetNorthWinArrayParams
          //
          if (n.name () == "TargetNorthWinArrayParams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TargetNorthWinArrayParams_type > r (
              TargetNorthWinArrayParams_traits::create (i, f, this));

            if (!this->TargetNorthWinArrayParams_)
            {
              this->TargetNorthWinArrayParams_.set (r);
              continue;
            }
          }

          // TargetSouthWinArrayParams
          //
          if (n.name () == "TargetSouthWinArrayParams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TargetSouthWinArrayParams_type > r (
              TargetSouthWinArrayParams_traits::create (i, f, this));

            if (!this->TargetSouthWinArrayParams_)
            {
              this->TargetSouthWinArrayParams_.set (r);
              continue;
            }
          }

          // TargetEastWinArrayParams
          //
          if (n.name () == "TargetEastWinArrayParams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TargetEastWinArrayParams_type > r (
              TargetEastWinArrayParams_traits::create (i, f, this));

            if (!this->TargetEastWinArrayParams_)
            {
              this->TargetEastWinArrayParams_.set (r);
              continue;
            }
          }

          // TargetWestWinArrayParams
          //
          if (n.name () == "TargetWestWinArrayParams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TargetWestWinArrayParams_type > r (
              TargetWestWinArrayParams_traits::create (i, f, this));

            if (!this->TargetWestWinArrayParams_)
            {
              this->TargetWestWinArrayParams_.set (r);
              continue;
            }
          }

          // DefaultLibraryType
          //
          if (n.name () == "DefaultLibraryType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DefaultLibraryType_type > r (
              DefaultLibraryType_traits::create (i, f, this));

            if (!this->DefaultLibraryType_)
            {
              this->DefaultLibraryType_.set (r);
              continue;
            }
          }

          // DefaultLibEntryRef
          //
          if (n.name () == "DefaultLibEntryRef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DefaultLibEntryRef_type > r (
              DefaultLibEntryRef_traits::create (i, f, this));

            if (!this->DefaultLibEntryRef_)
            {
              this->DefaultLibEntryRef_.set (r);
              continue;
            }
          }

          // DefaultOhangEntryRef
          //
          if (n.name () == "DefaultOhangEntryRef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DefaultOhangEntryRef_type > r (
              DefaultOhangEntryRef_traits::create (i, f, this));

            if (!this->DefaultOhangEntryRef_)
            {
              this->DefaultOhangEntryRef_.set (r);
              continue;
            }
          }

          // DefaultFinEntryRef
          //
          if (n.name () == "DefaultFinEntryRef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< DefaultFinEntryRef_type > r (
              DefaultFinEntryRef_traits::create (i, f, this));

            if (!this->DefaultFinEntryRef_)
            {
              this->DefaultFinEntryRef_.set (r);
              continue;
            }
          }

          // InsertedDWG
          //
          if (n.name () == "InsertedDWG" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< InsertedDWG_type > r (
              InsertedDWG_traits::create (i, f, this));

            if (!this->InsertedDWG_)
            {
              this->InsertedDWG_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimBldgStoryParams* SimBldgStoryParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBldgStoryParams (*this, f, c);
      }

      SimBldgStoryParams& SimBldgStoryParams::
      operator= (const SimBldgStoryParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBldgModelParams& > (*this) = x;
          this->BldgStoryName_ = x.BldgStoryName_;
          this->BldgStoryShape_ = x.BldgStoryShape_;
          this->X1Dim_ = x.X1Dim_;
          this->X2Dim_ = x.X2Dim_;
          this->X3Dim_ = x.X3Dim_;
          this->Y1Dim_ = x.Y1Dim_;
          this->Y2Dim_ = x.Y2Dim_;
          this->Y3Dim_ = x.Y3Dim_;
          this->FloorToFloorHeight_ = x.FloorToFloorHeight_;
          this->CeilingBottomElevation_ = x.CeilingBottomElevation_;
          this->FinishFloorTopElevation_ = x.FinishFloorTopElevation_;
          this->SpaceConfigOccupied_ = x.SpaceConfigOccupied_;
          this->PlenumConfiguration_ = x.PlenumConfiguration_;
          this->SpaceConfigAboveCeiling_ = x.SpaceConfigAboveCeiling_;
          this->SpaceConfigBelowFloor_ = x.SpaceConfigBelowFloor_;
          this->PerimeterZoneDepth_ = x.PerimeterZoneDepth_;
          this->WallProfilePathType_ = x.WallProfilePathType_;
          this->BldgStoryProfilePath_ = x.BldgStoryProfilePath_;
          this->PerimeterZoneOutsidePath_ = x.PerimeterZoneOutsidePath_;
          this->CoreZoneOutsidePaths_ = x.CoreZoneOutsidePaths_;
          this->CoreZoneInsidePaths_ = x.CoreZoneInsidePaths_;
          this->VoidProfilePaths_ = x.VoidProfilePaths_;
          this->BldgConstructionsTemplate_ = x.BldgConstructionsTemplate_;
          this->TargetNorthWinArrayParams_ = x.TargetNorthWinArrayParams_;
          this->TargetSouthWinArrayParams_ = x.TargetSouthWinArrayParams_;
          this->TargetEastWinArrayParams_ = x.TargetEastWinArrayParams_;
          this->TargetWestWinArrayParams_ = x.TargetWestWinArrayParams_;
          this->DefaultLibraryType_ = x.DefaultLibraryType_;
          this->DefaultLibEntryRef_ = x.DefaultLibEntryRef_;
          this->DefaultOhangEntryRef_ = x.DefaultOhangEntryRef_;
          this->DefaultFinEntryRef_ = x.DefaultFinEntryRef_;
          this->InsertedDWG_ = x.InsertedDWG_;
        }

        return *this;
      }

      SimBldgStoryParams::
      ~SimBldgStoryParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

