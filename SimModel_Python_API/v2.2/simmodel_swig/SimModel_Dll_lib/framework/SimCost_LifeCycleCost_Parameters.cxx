// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimCost_LifeCycleCost_Parameters.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCost_LifeCycleCost_Parameters
      // 

      const SimCost_LifeCycleCost_Parameters::SimCost_DiscingConvention_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_DiscingConvention () const
      {
        return this->SimCost_DiscingConvention_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_DiscingConvention_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_DiscingConvention ()
      {
        return this->SimCost_DiscingConvention_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_DiscingConvention (const SimCost_DiscingConvention_type& x)
      {
        this->SimCost_DiscingConvention_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_DiscingConvention (const SimCost_DiscingConvention_optional& x)
      {
        this->SimCost_DiscingConvention_ = x;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_DiscingConvention (::std::auto_ptr< SimCost_DiscingConvention_type > x)
      {
        this->SimCost_DiscingConvention_.set (x);
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_InflationApproach_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_InflationApproach () const
      {
        return this->SimCost_InflationApproach_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_InflationApproach_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_InflationApproach ()
      {
        return this->SimCost_InflationApproach_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_InflationApproach (const SimCost_InflationApproach_type& x)
      {
        this->SimCost_InflationApproach_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_InflationApproach (const SimCost_InflationApproach_optional& x)
      {
        this->SimCost_InflationApproach_ = x;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_InflationApproach (::std::auto_ptr< SimCost_InflationApproach_type > x)
      {
        this->SimCost_InflationApproach_.set (x);
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_RealDiscRate_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_RealDiscRate () const
      {
        return this->SimCost_RealDiscRate_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_RealDiscRate_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_RealDiscRate ()
      {
        return this->SimCost_RealDiscRate_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_RealDiscRate (const SimCost_RealDiscRate_type& x)
      {
        this->SimCost_RealDiscRate_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_RealDiscRate (const SimCost_RealDiscRate_optional& x)
      {
        this->SimCost_RealDiscRate_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_NominalDiscRate_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_NominalDiscRate () const
      {
        return this->SimCost_NominalDiscRate_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_NominalDiscRate_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_NominalDiscRate ()
      {
        return this->SimCost_NominalDiscRate_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_NominalDiscRate (const SimCost_NominalDiscRate_type& x)
      {
        this->SimCost_NominalDiscRate_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_NominalDiscRate (const SimCost_NominalDiscRate_optional& x)
      {
        this->SimCost_NominalDiscRate_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_Inflation_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_Inflation () const
      {
        return this->SimCost_Inflation_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_Inflation_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_Inflation ()
      {
        return this->SimCost_Inflation_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_Inflation (const SimCost_Inflation_type& x)
      {
        this->SimCost_Inflation_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_Inflation (const SimCost_Inflation_optional& x)
      {
        this->SimCost_Inflation_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_BaseDateMonth_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateMonth () const
      {
        return this->SimCost_BaseDateMonth_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_BaseDateMonth_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateMonth ()
      {
        return this->SimCost_BaseDateMonth_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateMonth (const SimCost_BaseDateMonth_type& x)
      {
        this->SimCost_BaseDateMonth_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateMonth (const SimCost_BaseDateMonth_optional& x)
      {
        this->SimCost_BaseDateMonth_ = x;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateMonth (::std::auto_ptr< SimCost_BaseDateMonth_type > x)
      {
        this->SimCost_BaseDateMonth_.set (x);
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_BaseDateYear_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateYear () const
      {
        return this->SimCost_BaseDateYear_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_BaseDateYear_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateYear ()
      {
        return this->SimCost_BaseDateYear_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateYear (const SimCost_BaseDateYear_type& x)
      {
        this->SimCost_BaseDateYear_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_BaseDateYear (const SimCost_BaseDateYear_optional& x)
      {
        this->SimCost_BaseDateYear_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_ServiceDateMonth_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateMonth () const
      {
        return this->SimCost_ServiceDateMonth_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_ServiceDateMonth_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateMonth ()
      {
        return this->SimCost_ServiceDateMonth_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateMonth (const SimCost_ServiceDateMonth_type& x)
      {
        this->SimCost_ServiceDateMonth_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateMonth (const SimCost_ServiceDateMonth_optional& x)
      {
        this->SimCost_ServiceDateMonth_ = x;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateMonth (::std::auto_ptr< SimCost_ServiceDateMonth_type > x)
      {
        this->SimCost_ServiceDateMonth_.set (x);
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_ServiceDateYear_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateYear () const
      {
        return this->SimCost_ServiceDateYear_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_ServiceDateYear_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateYear ()
      {
        return this->SimCost_ServiceDateYear_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateYear (const SimCost_ServiceDateYear_type& x)
      {
        this->SimCost_ServiceDateYear_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_ServiceDateYear (const SimCost_ServiceDateYear_optional& x)
      {
        this->SimCost_ServiceDateYear_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_LengthOfStudyPeriodInYrs_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_LengthOfStudyPeriodInYrs () const
      {
        return this->SimCost_LengthOfStudyPeriodInYrs_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_LengthOfStudyPeriodInYrs_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_LengthOfStudyPeriodInYrs ()
      {
        return this->SimCost_LengthOfStudyPeriodInYrs_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_LengthOfStudyPeriodInYrs (const SimCost_LengthOfStudyPeriodInYrs_type& x)
      {
        this->SimCost_LengthOfStudyPeriodInYrs_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_LengthOfStudyPeriodInYrs (const SimCost_LengthOfStudyPeriodInYrs_optional& x)
      {
        this->SimCost_LengthOfStudyPeriodInYrs_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_TaxRate_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_TaxRate () const
      {
        return this->SimCost_TaxRate_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_TaxRate_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_TaxRate ()
      {
        return this->SimCost_TaxRate_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_TaxRate (const SimCost_TaxRate_type& x)
      {
        this->SimCost_TaxRate_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_TaxRate (const SimCost_TaxRate_optional& x)
      {
        this->SimCost_TaxRate_ = x;
      }

      const SimCost_LifeCycleCost_Parameters::SimCost_DepreciationMethod_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_DepreciationMethod () const
      {
        return this->SimCost_DepreciationMethod_;
      }

      SimCost_LifeCycleCost_Parameters::SimCost_DepreciationMethod_optional& SimCost_LifeCycleCost_Parameters::
      SimCost_DepreciationMethod ()
      {
        return this->SimCost_DepreciationMethod_;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_DepreciationMethod (const SimCost_DepreciationMethod_type& x)
      {
        this->SimCost_DepreciationMethod_.set (x);
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_DepreciationMethod (const SimCost_DepreciationMethod_optional& x)
      {
        this->SimCost_DepreciationMethod_ = x;
      }

      void SimCost_LifeCycleCost_Parameters::
      SimCost_DepreciationMethod (::std::auto_ptr< SimCost_DepreciationMethod_type > x)
      {
        this->SimCost_DepreciationMethod_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCost_LifeCycleCost_Parameters
      //

      SimCost_LifeCycleCost_Parameters::
      SimCost_LifeCycleCost_Parameters ()
      : ::schema::simxml::ResourcesGeneral::SimCost_LifeCycleCost (),
        SimCost_DiscingConvention_ (this),
        SimCost_InflationApproach_ (this),
        SimCost_RealDiscRate_ (this),
        SimCost_NominalDiscRate_ (this),
        SimCost_Inflation_ (this),
        SimCost_BaseDateMonth_ (this),
        SimCost_BaseDateYear_ (this),
        SimCost_ServiceDateMonth_ (this),
        SimCost_ServiceDateYear_ (this),
        SimCost_LengthOfStudyPeriodInYrs_ (this),
        SimCost_TaxRate_ (this),
        SimCost_DepreciationMethod_ (this)
      {
      }

      SimCost_LifeCycleCost_Parameters::
      SimCost_LifeCycleCost_Parameters (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimCost_LifeCycleCost (RefId),
        SimCost_DiscingConvention_ (this),
        SimCost_InflationApproach_ (this),
        SimCost_RealDiscRate_ (this),
        SimCost_NominalDiscRate_ (this),
        SimCost_Inflation_ (this),
        SimCost_BaseDateMonth_ (this),
        SimCost_BaseDateYear_ (this),
        SimCost_ServiceDateMonth_ (this),
        SimCost_ServiceDateYear_ (this),
        SimCost_LengthOfStudyPeriodInYrs_ (this),
        SimCost_TaxRate_ (this),
        SimCost_DepreciationMethod_ (this)
      {
      }

      SimCost_LifeCycleCost_Parameters::
      SimCost_LifeCycleCost_Parameters (const SimCost_LifeCycleCost_Parameters& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimCost_LifeCycleCost (x, f, c),
        SimCost_DiscingConvention_ (x.SimCost_DiscingConvention_, f, this),
        SimCost_InflationApproach_ (x.SimCost_InflationApproach_, f, this),
        SimCost_RealDiscRate_ (x.SimCost_RealDiscRate_, f, this),
        SimCost_NominalDiscRate_ (x.SimCost_NominalDiscRate_, f, this),
        SimCost_Inflation_ (x.SimCost_Inflation_, f, this),
        SimCost_BaseDateMonth_ (x.SimCost_BaseDateMonth_, f, this),
        SimCost_BaseDateYear_ (x.SimCost_BaseDateYear_, f, this),
        SimCost_ServiceDateMonth_ (x.SimCost_ServiceDateMonth_, f, this),
        SimCost_ServiceDateYear_ (x.SimCost_ServiceDateYear_, f, this),
        SimCost_LengthOfStudyPeriodInYrs_ (x.SimCost_LengthOfStudyPeriodInYrs_, f, this),
        SimCost_TaxRate_ (x.SimCost_TaxRate_, f, this),
        SimCost_DepreciationMethod_ (x.SimCost_DepreciationMethod_, f, this)
      {
      }

      SimCost_LifeCycleCost_Parameters::
      SimCost_LifeCycleCost_Parameters (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimCost_LifeCycleCost (e, f | ::xml_schema::flags::base, c),
        SimCost_DiscingConvention_ (this),
        SimCost_InflationApproach_ (this),
        SimCost_RealDiscRate_ (this),
        SimCost_NominalDiscRate_ (this),
        SimCost_Inflation_ (this),
        SimCost_BaseDateMonth_ (this),
        SimCost_BaseDateYear_ (this),
        SimCost_ServiceDateMonth_ (this),
        SimCost_ServiceDateYear_ (this),
        SimCost_LengthOfStudyPeriodInYrs_ (this),
        SimCost_TaxRate_ (this),
        SimCost_DepreciationMethod_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimCost_LifeCycleCost_Parameters::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimCost_LifeCycleCost::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCost_DiscingConvention
          //
          if (n.name () == "SimCost_DiscingConvention" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_DiscingConvention_type > r (
              SimCost_DiscingConvention_traits::create (i, f, this));

            if (!this->SimCost_DiscingConvention_)
            {
              this->SimCost_DiscingConvention_.set (r);
              continue;
            }
          }

          // SimCost_InflationApproach
          //
          if (n.name () == "SimCost_InflationApproach" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_InflationApproach_type > r (
              SimCost_InflationApproach_traits::create (i, f, this));

            if (!this->SimCost_InflationApproach_)
            {
              this->SimCost_InflationApproach_.set (r);
              continue;
            }
          }

          // SimCost_RealDiscRate
          //
          if (n.name () == "SimCost_RealDiscRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_RealDiscRate_)
            {
              this->SimCost_RealDiscRate_.set (SimCost_RealDiscRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_NominalDiscRate
          //
          if (n.name () == "SimCost_NominalDiscRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_NominalDiscRate_)
            {
              this->SimCost_NominalDiscRate_.set (SimCost_NominalDiscRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_Inflation
          //
          if (n.name () == "SimCost_Inflation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_Inflation_)
            {
              this->SimCost_Inflation_.set (SimCost_Inflation_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_BaseDateMonth
          //
          if (n.name () == "SimCost_BaseDateMonth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_BaseDateMonth_type > r (
              SimCost_BaseDateMonth_traits::create (i, f, this));

            if (!this->SimCost_BaseDateMonth_)
            {
              this->SimCost_BaseDateMonth_.set (r);
              continue;
            }
          }

          // SimCost_BaseDateYear
          //
          if (n.name () == "SimCost_BaseDateYear" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_BaseDateYear_)
            {
              this->SimCost_BaseDateYear_.set (SimCost_BaseDateYear_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_ServiceDateMonth
          //
          if (n.name () == "SimCost_ServiceDateMonth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_ServiceDateMonth_type > r (
              SimCost_ServiceDateMonth_traits::create (i, f, this));

            if (!this->SimCost_ServiceDateMonth_)
            {
              this->SimCost_ServiceDateMonth_.set (r);
              continue;
            }
          }

          // SimCost_ServiceDateYear
          //
          if (n.name () == "SimCost_ServiceDateYear" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_ServiceDateYear_)
            {
              this->SimCost_ServiceDateYear_.set (SimCost_ServiceDateYear_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_LengthOfStudyPeriodInYrs
          //
          if (n.name () == "SimCost_LengthOfStudyPeriodInYrs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_LengthOfStudyPeriodInYrs_)
            {
              this->SimCost_LengthOfStudyPeriodInYrs_.set (SimCost_LengthOfStudyPeriodInYrs_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_TaxRate
          //
          if (n.name () == "SimCost_TaxRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_TaxRate_)
            {
              this->SimCost_TaxRate_.set (SimCost_TaxRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_DepreciationMethod
          //
          if (n.name () == "SimCost_DepreciationMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCost_DepreciationMethod_type > r (
              SimCost_DepreciationMethod_traits::create (i, f, this));

            if (!this->SimCost_DepreciationMethod_)
            {
              this->SimCost_DepreciationMethod_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimCost_LifeCycleCost_Parameters* SimCost_LifeCycleCost_Parameters::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimCost_LifeCycleCost_Parameters (*this, f, c);
      }

      SimCost_LifeCycleCost_Parameters& SimCost_LifeCycleCost_Parameters::
      operator= (const SimCost_LifeCycleCost_Parameters& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimCost_LifeCycleCost& > (*this) = x;
          this->SimCost_DiscingConvention_ = x.SimCost_DiscingConvention_;
          this->SimCost_InflationApproach_ = x.SimCost_InflationApproach_;
          this->SimCost_RealDiscRate_ = x.SimCost_RealDiscRate_;
          this->SimCost_NominalDiscRate_ = x.SimCost_NominalDiscRate_;
          this->SimCost_Inflation_ = x.SimCost_Inflation_;
          this->SimCost_BaseDateMonth_ = x.SimCost_BaseDateMonth_;
          this->SimCost_BaseDateYear_ = x.SimCost_BaseDateYear_;
          this->SimCost_ServiceDateMonth_ = x.SimCost_ServiceDateMonth_;
          this->SimCost_ServiceDateYear_ = x.SimCost_ServiceDateYear_;
          this->SimCost_LengthOfStudyPeriodInYrs_ = x.SimCost_LengthOfStudyPeriodInYrs_;
          this->SimCost_TaxRate_ = x.SimCost_TaxRate_;
          this->SimCost_DepreciationMethod_ = x.SimCost_DepreciationMethod_;
        }

        return *this;
      }

      SimCost_LifeCycleCost_Parameters::
      ~SimCost_LifeCycleCost_Parameters ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

