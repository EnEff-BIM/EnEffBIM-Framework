// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_WINDOW_WINDOW_EXTERIOR_DETAILED_HXX
#define SIM_WINDOW_WINDOW_EXTERIOR_DETAILED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
//#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimWindow_Window_ExteriorDetailed;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simwindow_window.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimWindow_Window_ExteriorDetailed: public ::schema::simxml::BuildingModel::SimWindow_Window
      {
        public:
        // SimWindow_Name
        //
        typedef ::xml_schema::string SimWindow_Name_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_Name_type > SimWindow_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_Name_type, char > SimWindow_Name_traits;

        const SimWindow_Name_optional&
        SimWindow_Name () const;

        SimWindow_Name_optional&
        SimWindow_Name ();

        void
        SimWindow_Name (const SimWindow_Name_type& x);

        void
        SimWindow_Name (const SimWindow_Name_optional& x);

        void
        SimWindow_Name (::std::auto_ptr< SimWindow_Name_type > p);

        // SimWindow_SurfType
        //
        typedef ::xml_schema::string SimWindow_SurfType_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_SurfType_type > SimWindow_SurfType_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_SurfType_type, char > SimWindow_SurfType_traits;

        const SimWindow_SurfType_optional&
        SimWindow_SurfType () const;

        SimWindow_SurfType_optional&
        SimWindow_SurfType ();

        void
        SimWindow_SurfType (const SimWindow_SurfType_type& x);

        void
        SimWindow_SurfType (const SimWindow_SurfType_optional& x);

        void
        SimWindow_SurfType (::std::auto_ptr< SimWindow_SurfType_type > p);

        // SimWindow_ConstructionName
        //
        typedef ::xml_schema::idref SimWindow_ConstructionName_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_ConstructionName_type > SimWindow_ConstructionName_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_ConstructionName_type, char > SimWindow_ConstructionName_traits;

        const SimWindow_ConstructionName_optional&
        SimWindow_ConstructionName () const;

        SimWindow_ConstructionName_optional&
        SimWindow_ConstructionName ();

        void
        SimWindow_ConstructionName (const SimWindow_ConstructionName_type& x);

        void
        SimWindow_ConstructionName (const SimWindow_ConstructionName_optional& x);

        void
        SimWindow_ConstructionName (::std::auto_ptr< SimWindow_ConstructionName_type > p);

        // SimWindow_BldgSurfName
        //
        typedef ::xml_schema::idref SimWindow_BldgSurfName_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_BldgSurfName_type > SimWindow_BldgSurfName_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_BldgSurfName_type, char > SimWindow_BldgSurfName_traits;

        const SimWindow_BldgSurfName_optional&
        SimWindow_BldgSurfName () const;

        SimWindow_BldgSurfName_optional&
        SimWindow_BldgSurfName ();

        void
        SimWindow_BldgSurfName (const SimWindow_BldgSurfName_type& x);

        void
        SimWindow_BldgSurfName (const SimWindow_BldgSurfName_optional& x);

        void
        SimWindow_BldgSurfName (::std::auto_ptr< SimWindow_BldgSurfName_type > p);

        // SimWindow_OutsdBndCondObject
        //
        typedef ::xml_schema::idref SimWindow_OutsdBndCondObject_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_OutsdBndCondObject_type > SimWindow_OutsdBndCondObject_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_OutsdBndCondObject_type, char > SimWindow_OutsdBndCondObject_traits;

        const SimWindow_OutsdBndCondObject_optional&
        SimWindow_OutsdBndCondObject () const;

        SimWindow_OutsdBndCondObject_optional&
        SimWindow_OutsdBndCondObject ();

        void
        SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_type& x);

        void
        SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_optional& x);

        void
        SimWindow_OutsdBndCondObject (::std::auto_ptr< SimWindow_OutsdBndCondObject_type > p);

        // SimWindow_ViewFactToGnd
        //
        typedef ::xml_schema::double_ SimWindow_ViewFactToGnd_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_ViewFactToGnd_type > SimWindow_ViewFactToGnd_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_ViewFactToGnd_type, char, ::xsd::cxx::tree::schema_type::double_ > SimWindow_ViewFactToGnd_traits;

        const SimWindow_ViewFactToGnd_optional&
        SimWindow_ViewFactToGnd () const;

        SimWindow_ViewFactToGnd_optional&
        SimWindow_ViewFactToGnd ();

        void
        SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_type& x);

        void
        SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_optional& x);

        // SimWindow_ShadingContName
        //
        typedef ::xml_schema::idref SimWindow_ShadingContName_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_ShadingContName_type > SimWindow_ShadingContName_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_ShadingContName_type, char > SimWindow_ShadingContName_traits;

        const SimWindow_ShadingContName_optional&
        SimWindow_ShadingContName () const;

        SimWindow_ShadingContName_optional&
        SimWindow_ShadingContName ();

        void
        SimWindow_ShadingContName (const SimWindow_ShadingContName_type& x);

        void
        SimWindow_ShadingContName (const SimWindow_ShadingContName_optional& x);

        void
        SimWindow_ShadingContName (::std::auto_ptr< SimWindow_ShadingContName_type > p);

        // SimWindow_FrmAndDivName
        //
        typedef ::xml_schema::idref SimWindow_FrmAndDivName_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_FrmAndDivName_type > SimWindow_FrmAndDivName_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_FrmAndDivName_type, char > SimWindow_FrmAndDivName_traits;

        const SimWindow_FrmAndDivName_optional&
        SimWindow_FrmAndDivName () const;

        SimWindow_FrmAndDivName_optional&
        SimWindow_FrmAndDivName ();

        void
        SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_type& x);

        void
        SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_optional& x);

        void
        SimWindow_FrmAndDivName (::std::auto_ptr< SimWindow_FrmAndDivName_type > p);

        // SimWindow_Mult
        //
        typedef ::xml_schema::double_ SimWindow_Mult_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_Mult_type > SimWindow_Mult_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_Mult_type, char, ::xsd::cxx::tree::schema_type::double_ > SimWindow_Mult_traits;

        const SimWindow_Mult_optional&
        SimWindow_Mult () const;

        SimWindow_Mult_optional&
        SimWindow_Mult ();

        void
        SimWindow_Mult (const SimWindow_Mult_type& x);

        void
        SimWindow_Mult (const SimWindow_Mult_optional& x);

        // SimWindow_NumbVerts
        //
        typedef ::xml_schema::double_ SimWindow_NumbVerts_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_NumbVerts_type > SimWindow_NumbVerts_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_NumbVerts_type, char, ::xsd::cxx::tree::schema_type::double_ > SimWindow_NumbVerts_traits;

        const SimWindow_NumbVerts_optional&
        SimWindow_NumbVerts () const;

        SimWindow_NumbVerts_optional&
        SimWindow_NumbVerts ();

        void
        SimWindow_NumbVerts (const SimWindow_NumbVerts_type& x);

        void
        SimWindow_NumbVerts (const SimWindow_NumbVerts_optional& x);

        // SimWindow_VertexXCoord_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimWindow_VertexXCoord_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_VertexXCoord_1_4_type > SimWindow_VertexXCoord_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_VertexXCoord_1_4_type, char > SimWindow_VertexXCoord_1_4_traits;

        const SimWindow_VertexXCoord_1_4_optional&
        SimWindow_VertexXCoord_1_4 () const;

        SimWindow_VertexXCoord_1_4_optional&
        SimWindow_VertexXCoord_1_4 ();

        void
        SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_type& x);

        void
        SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_optional& x);

        void
        SimWindow_VertexXCoord_1_4 (::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > p);

        // SimWindow_VertexYCoord_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimWindow_VertexYCoord_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_VertexYCoord_1_4_type > SimWindow_VertexYCoord_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_VertexYCoord_1_4_type, char > SimWindow_VertexYCoord_1_4_traits;

        const SimWindow_VertexYCoord_1_4_optional&
        SimWindow_VertexYCoord_1_4 () const;

        SimWindow_VertexYCoord_1_4_optional&
        SimWindow_VertexYCoord_1_4 ();

        void
        SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_type& x);

        void
        SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_optional& x);

        void
        SimWindow_VertexYCoord_1_4 (::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > p);

        // SimWindow_VertexZCoord_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimWindow_VertexZCoord_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimWindow_VertexZCoord_1_4_type > SimWindow_VertexZCoord_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimWindow_VertexZCoord_1_4_type, char > SimWindow_VertexZCoord_1_4_traits;

        const SimWindow_VertexZCoord_1_4_optional&
        SimWindow_VertexZCoord_1_4 () const;

        SimWindow_VertexZCoord_1_4_optional&
        SimWindow_VertexZCoord_1_4 ();

        void
        SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_type& x);

        void
        SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_optional& x);

        void
        SimWindow_VertexZCoord_1_4 (::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > p);

        // ComplexFenestrationProperty_SolarAbsorbedLayers_Name
        //
        typedef ::xml_schema::string ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type;
        typedef ::xsd::cxx::tree::optional< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type > ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional;
        typedef ::xsd::cxx::tree::traits< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type, char > ComplexFenestrationProperty_SolarAbsorbedLayers_Name_traits;

        const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name () const;

        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name ();

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name (const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name (const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type > p);

        // ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface
        //
        typedef ::xml_schema::idref ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type;
        typedef ::xsd::cxx::tree::optional< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type > ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional;
        typedef ::xsd::cxx::tree::traits< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type, char > ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_traits;

        const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface () const;

        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface ();

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type > p);

        // ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName
        //
        typedef ::xml_schema::idref ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type;
        typedef ::xsd::cxx::tree::optional< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type > ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional;
        typedef ::xsd::cxx::tree::traits< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type, char > ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_traits;

        const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName () const;

        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName ();

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type > p);

        // ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName
        //
        typedef ::xml_schema::idrefs ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type;
        typedef ::xsd::cxx::tree::optional< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type > ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional;
        typedef ::xsd::cxx::tree::traits< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type, char > ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_traits;

        const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName () const;

        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional&
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName ();

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& x);

        void
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type > p);

        // WindowProp_AirflowControl_Name
        //
        typedef ::xml_schema::idref WindowProp_AirflowControl_Name_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_Name_type > WindowProp_AirflowControl_Name_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_Name_type, char > WindowProp_AirflowControl_Name_traits;

        const WindowProp_AirflowControl_Name_optional&
        WindowProp_AirflowControl_Name () const;

        WindowProp_AirflowControl_Name_optional&
        WindowProp_AirflowControl_Name ();

        void
        WindowProp_AirflowControl_Name (const WindowProp_AirflowControl_Name_type& x);

        void
        WindowProp_AirflowControl_Name (const WindowProp_AirflowControl_Name_optional& x);

        void
        WindowProp_AirflowControl_Name (::std::auto_ptr< WindowProp_AirflowControl_Name_type > p);

        // WindowProp_AirflowControl_AirflowSrc
        //
        typedef ::xml_schema::string WindowProp_AirflowControl_AirflowSrc_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_AirflowSrc_type > WindowProp_AirflowControl_AirflowSrc_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_AirflowSrc_type, char > WindowProp_AirflowControl_AirflowSrc_traits;

        const WindowProp_AirflowControl_AirflowSrc_optional&
        WindowProp_AirflowControl_AirflowSrc () const;

        WindowProp_AirflowControl_AirflowSrc_optional&
        WindowProp_AirflowControl_AirflowSrc ();

        void
        WindowProp_AirflowControl_AirflowSrc (const WindowProp_AirflowControl_AirflowSrc_type& x);

        void
        WindowProp_AirflowControl_AirflowSrc (const WindowProp_AirflowControl_AirflowSrc_optional& x);

        void
        WindowProp_AirflowControl_AirflowSrc (::std::auto_ptr< WindowProp_AirflowControl_AirflowSrc_type > p);

        // WindowProp_AirflowControl_AirflowDestination
        //
        typedef ::xml_schema::string WindowProp_AirflowControl_AirflowDestination_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_AirflowDestination_type > WindowProp_AirflowControl_AirflowDestination_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_AirflowDestination_type, char > WindowProp_AirflowControl_AirflowDestination_traits;

        const WindowProp_AirflowControl_AirflowDestination_optional&
        WindowProp_AirflowControl_AirflowDestination () const;

        WindowProp_AirflowControl_AirflowDestination_optional&
        WindowProp_AirflowControl_AirflowDestination ();

        void
        WindowProp_AirflowControl_AirflowDestination (const WindowProp_AirflowControl_AirflowDestination_type& x);

        void
        WindowProp_AirflowControl_AirflowDestination (const WindowProp_AirflowControl_AirflowDestination_optional& x);

        void
        WindowProp_AirflowControl_AirflowDestination (::std::auto_ptr< WindowProp_AirflowControl_AirflowDestination_type > p);

        // WindowProp_AirflowControl_MaxFlowRate
        //
        typedef ::xml_schema::double_ WindowProp_AirflowControl_MaxFlowRate_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_MaxFlowRate_type > WindowProp_AirflowControl_MaxFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_MaxFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > WindowProp_AirflowControl_MaxFlowRate_traits;

        const WindowProp_AirflowControl_MaxFlowRate_optional&
        WindowProp_AirflowControl_MaxFlowRate () const;

        WindowProp_AirflowControl_MaxFlowRate_optional&
        WindowProp_AirflowControl_MaxFlowRate ();

        void
        WindowProp_AirflowControl_MaxFlowRate (const WindowProp_AirflowControl_MaxFlowRate_type& x);

        void
        WindowProp_AirflowControl_MaxFlowRate (const WindowProp_AirflowControl_MaxFlowRate_optional& x);

        // WindowProp_AirflowControl_AirflowControlType
        //
        typedef ::xml_schema::string WindowProp_AirflowControl_AirflowControlType_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_AirflowControlType_type > WindowProp_AirflowControl_AirflowControlType_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_AirflowControlType_type, char > WindowProp_AirflowControl_AirflowControlType_traits;

        const WindowProp_AirflowControl_AirflowControlType_optional&
        WindowProp_AirflowControl_AirflowControlType () const;

        WindowProp_AirflowControl_AirflowControlType_optional&
        WindowProp_AirflowControl_AirflowControlType ();

        void
        WindowProp_AirflowControl_AirflowControlType (const WindowProp_AirflowControl_AirflowControlType_type& x);

        void
        WindowProp_AirflowControl_AirflowControlType (const WindowProp_AirflowControl_AirflowControlType_optional& x);

        void
        WindowProp_AirflowControl_AirflowControlType (::std::auto_ptr< WindowProp_AirflowControl_AirflowControlType_type > p);

        // WindowProp_AirflowControl_AirflowIsScheduled
        //
        typedef ::xml_schema::string WindowProp_AirflowControl_AirflowIsScheduled_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_AirflowIsScheduled_type > WindowProp_AirflowControl_AirflowIsScheduled_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_AirflowIsScheduled_type, char > WindowProp_AirflowControl_AirflowIsScheduled_traits;

        const WindowProp_AirflowControl_AirflowIsScheduled_optional&
        WindowProp_AirflowControl_AirflowIsScheduled () const;

        WindowProp_AirflowControl_AirflowIsScheduled_optional&
        WindowProp_AirflowControl_AirflowIsScheduled ();

        void
        WindowProp_AirflowControl_AirflowIsScheduled (const WindowProp_AirflowControl_AirflowIsScheduled_type& x);

        void
        WindowProp_AirflowControl_AirflowIsScheduled (const WindowProp_AirflowControl_AirflowIsScheduled_optional& x);

        void
        WindowProp_AirflowControl_AirflowIsScheduled (::std::auto_ptr< WindowProp_AirflowControl_AirflowIsScheduled_type > p);

        // WindowProp_AirflowControl_AirflowMultiplierScheduleName
        //
        typedef ::xml_schema::idref WindowProp_AirflowControl_AirflowMultiplierScheduleName_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type > WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type, char > WindowProp_AirflowControl_AirflowMultiplierScheduleName_traits;

        const WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional&
        WindowProp_AirflowControl_AirflowMultiplierScheduleName () const;

        WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional&
        WindowProp_AirflowControl_AirflowMultiplierScheduleName ();

        void
        WindowProp_AirflowControl_AirflowMultiplierScheduleName (const WindowProp_AirflowControl_AirflowMultiplierScheduleName_type& x);

        void
        WindowProp_AirflowControl_AirflowMultiplierScheduleName (const WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& x);

        void
        WindowProp_AirflowControl_AirflowMultiplierScheduleName (::std::auto_ptr< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type > p);

        // WindowProp_StormWindow_WindName
        //
        typedef ::xml_schema::idref WindowProp_StormWindow_WindName_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_WindName_type > WindowProp_StormWindow_WindName_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_WindName_type, char > WindowProp_StormWindow_WindName_traits;

        const WindowProp_StormWindow_WindName_optional&
        WindowProp_StormWindow_WindName () const;

        WindowProp_StormWindow_WindName_optional&
        WindowProp_StormWindow_WindName ();

        void
        WindowProp_StormWindow_WindName (const WindowProp_StormWindow_WindName_type& x);

        void
        WindowProp_StormWindow_WindName (const WindowProp_StormWindow_WindName_optional& x);

        void
        WindowProp_StormWindow_WindName (::std::auto_ptr< WindowProp_StormWindow_WindName_type > p);

        // WindowProp_StormWindow_StormGlassLayerName
        //
        typedef ::xml_schema::idref WindowProp_StormWindow_StormGlassLayerName_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_StormGlassLayerName_type > WindowProp_StormWindow_StormGlassLayerName_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_StormGlassLayerName_type, char > WindowProp_StormWindow_StormGlassLayerName_traits;

        const WindowProp_StormWindow_StormGlassLayerName_optional&
        WindowProp_StormWindow_StormGlassLayerName () const;

        WindowProp_StormWindow_StormGlassLayerName_optional&
        WindowProp_StormWindow_StormGlassLayerName ();

        void
        WindowProp_StormWindow_StormGlassLayerName (const WindowProp_StormWindow_StormGlassLayerName_type& x);

        void
        WindowProp_StormWindow_StormGlassLayerName (const WindowProp_StormWindow_StormGlassLayerName_optional& x);

        void
        WindowProp_StormWindow_StormGlassLayerName (::std::auto_ptr< WindowProp_StormWindow_StormGlassLayerName_type > p);

        // WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass
        //
        typedef ::xml_schema::double_ WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_type > WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_type, char, ::xsd::cxx::tree::schema_type::double_ > WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_traits;

        const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional&
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass () const;

        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional&
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass ();

        void
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass (const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_type& x);

        void
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass (const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& x);

        // WindowProp_StormWindow_MonththatStormGlassLayerisPutOn
        //
        typedef ::xml_schema::int_ WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_type > WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_type, char > WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_traits;

        const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional&
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn () const;

        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional&
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn ();

        void
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_type& x);

        void
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& x);

        // WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn
        //
        typedef ::xml_schema::int_ WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_type > WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_type, char > WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_traits;

        const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional&
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn () const;

        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional&
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn ();

        void
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_type& x);

        void
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& x);

        // WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff
        //
        typedef ::xml_schema::int_ WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_type > WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_type, char > WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_traits;

        const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional&
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff () const;

        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional&
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff ();

        void
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_type& x);

        void
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& x);

        // WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff
        //
        typedef ::xml_schema::int_ WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_type;
        typedef ::xsd::cxx::tree::optional< WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_type > WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional;
        typedef ::xsd::cxx::tree::traits< WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_type, char > WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_traits;

        const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional&
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff () const;

        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional&
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff ();

        void
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_type& x);

        void
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& x);

        // Daylight_DELight_CmplxFenestr_Name
        //
        typedef ::xml_schema::string Daylight_DELight_CmplxFenestr_Name_type;
        typedef ::xsd::cxx::tree::optional< Daylight_DELight_CmplxFenestr_Name_type > Daylight_DELight_CmplxFenestr_Name_optional;
        typedef ::xsd::cxx::tree::traits< Daylight_DELight_CmplxFenestr_Name_type, char > Daylight_DELight_CmplxFenestr_Name_traits;

        const Daylight_DELight_CmplxFenestr_Name_optional&
        Daylight_DELight_CmplxFenestr_Name () const;

        Daylight_DELight_CmplxFenestr_Name_optional&
        Daylight_DELight_CmplxFenestr_Name ();

        void
        Daylight_DELight_CmplxFenestr_Name (const Daylight_DELight_CmplxFenestr_Name_type& x);

        void
        Daylight_DELight_CmplxFenestr_Name (const Daylight_DELight_CmplxFenestr_Name_optional& x);

        void
        Daylight_DELight_CmplxFenestr_Name (::std::auto_ptr< Daylight_DELight_CmplxFenestr_Name_type > p);

        // Daylight_DELight_CmplxFenestr_ComplexFenestrationType
        //
        typedef ::xml_schema::string Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type;
        typedef ::xsd::cxx::tree::optional< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type > Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional;
        typedef ::xsd::cxx::tree::traits< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type, char > Daylight_DELight_CmplxFenestr_ComplexFenestrationType_traits;

        const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional&
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType () const;

        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional&
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType ();

        void
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType (const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type& x);

        void
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType (const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& x);

        void
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType (::std::auto_ptr< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type > p);

        // Daylight_DELight_CmplxFenestr_BldgSurfName
        //
        typedef ::xml_schema::idref Daylight_DELight_CmplxFenestr_BldgSurfName_type;
        typedef ::xsd::cxx::tree::optional< Daylight_DELight_CmplxFenestr_BldgSurfName_type > Daylight_DELight_CmplxFenestr_BldgSurfName_optional;
        typedef ::xsd::cxx::tree::traits< Daylight_DELight_CmplxFenestr_BldgSurfName_type, char > Daylight_DELight_CmplxFenestr_BldgSurfName_traits;

        const Daylight_DELight_CmplxFenestr_BldgSurfName_optional&
        Daylight_DELight_CmplxFenestr_BldgSurfName () const;

        Daylight_DELight_CmplxFenestr_BldgSurfName_optional&
        Daylight_DELight_CmplxFenestr_BldgSurfName ();

        void
        Daylight_DELight_CmplxFenestr_BldgSurfName (const Daylight_DELight_CmplxFenestr_BldgSurfName_type& x);

        void
        Daylight_DELight_CmplxFenestr_BldgSurfName (const Daylight_DELight_CmplxFenestr_BldgSurfName_optional& x);

        void
        Daylight_DELight_CmplxFenestr_BldgSurfName (::std::auto_ptr< Daylight_DELight_CmplxFenestr_BldgSurfName_type > p);

        // Daylight_DELight_CmplxFenestr_WindName
        //
        typedef ::xml_schema::idref Daylight_DELight_CmplxFenestr_WindName_type;
        typedef ::xsd::cxx::tree::optional< Daylight_DELight_CmplxFenestr_WindName_type > Daylight_DELight_CmplxFenestr_WindName_optional;
        typedef ::xsd::cxx::tree::traits< Daylight_DELight_CmplxFenestr_WindName_type, char > Daylight_DELight_CmplxFenestr_WindName_traits;

        const Daylight_DELight_CmplxFenestr_WindName_optional&
        Daylight_DELight_CmplxFenestr_WindName () const;

        Daylight_DELight_CmplxFenestr_WindName_optional&
        Daylight_DELight_CmplxFenestr_WindName ();

        void
        Daylight_DELight_CmplxFenestr_WindName (const Daylight_DELight_CmplxFenestr_WindName_type& x);

        void
        Daylight_DELight_CmplxFenestr_WindName (const Daylight_DELight_CmplxFenestr_WindName_optional& x);

        void
        Daylight_DELight_CmplxFenestr_WindName (::std::auto_ptr< Daylight_DELight_CmplxFenestr_WindName_type > p);

        // Daylight_DELight_CmplxFenestr_FenestrationRotation
        //
        typedef ::xml_schema::double_ Daylight_DELight_CmplxFenestr_FenestrationRotation_type;
        typedef ::xsd::cxx::tree::optional< Daylight_DELight_CmplxFenestr_FenestrationRotation_type > Daylight_DELight_CmplxFenestr_FenestrationRotation_optional;
        typedef ::xsd::cxx::tree::traits< Daylight_DELight_CmplxFenestr_FenestrationRotation_type, char, ::xsd::cxx::tree::schema_type::double_ > Daylight_DELight_CmplxFenestr_FenestrationRotation_traits;

        const Daylight_DELight_CmplxFenestr_FenestrationRotation_optional&
        Daylight_DELight_CmplxFenestr_FenestrationRotation () const;

        Daylight_DELight_CmplxFenestr_FenestrationRotation_optional&
        Daylight_DELight_CmplxFenestr_FenestrationRotation ();

        void
        Daylight_DELight_CmplxFenestr_FenestrationRotation (const Daylight_DELight_CmplxFenestr_FenestrationRotation_type& x);

        void
        Daylight_DELight_CmplxFenestr_FenestrationRotation (const Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& x);

        // Airflow_MZone_Comp_DetldOpng_Name
        //
        typedef ::xml_schema::string Airflow_MZone_Comp_DetldOpng_Name_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_Name_type > Airflow_MZone_Comp_DetldOpng_Name_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_Name_type, char > Airflow_MZone_Comp_DetldOpng_Name_traits;

        const Airflow_MZone_Comp_DetldOpng_Name_optional&
        Airflow_MZone_Comp_DetldOpng_Name () const;

        Airflow_MZone_Comp_DetldOpng_Name_optional&
        Airflow_MZone_Comp_DetldOpng_Name ();

        void
        Airflow_MZone_Comp_DetldOpng_Name (const Airflow_MZone_Comp_DetldOpng_Name_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_Name (const Airflow_MZone_Comp_DetldOpng_Name_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_Name (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_Name_type > p);

        // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type > Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits;

        const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const;

        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ();

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x);

        // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type > Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits;

        const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const;

        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ();

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x);

        // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
        //
        typedef ::xml_schema::string Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type, char > Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits;

        const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional&
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const;

        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional&
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ();

        void
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > p);

        // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type > Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits;

        const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional&
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const;

        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional&
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ();

        void
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x);

        // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
        //
        typedef ::xml_schema::int_ Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type > Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type, char > Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits;

        const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional&
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const;

        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional&
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ();

        void
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x);

        // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_SmplOpng_Name
        //
        typedef ::xml_schema::string Airflow_MZone_Comp_SmplOpng_Name_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_Name_type > Airflow_MZone_Comp_SmplOpng_Name_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_Name_type, char > Airflow_MZone_Comp_SmplOpng_Name_traits;

        const Airflow_MZone_Comp_SmplOpng_Name_optional&
        Airflow_MZone_Comp_SmplOpng_Name () const;

        Airflow_MZone_Comp_SmplOpng_Name_optional&
        Airflow_MZone_Comp_SmplOpng_Name ();

        void
        Airflow_MZone_Comp_SmplOpng_Name (const Airflow_MZone_Comp_SmplOpng_Name_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_Name (const Airflow_MZone_Comp_SmplOpng_Name_optional& x);

        void
        Airflow_MZone_Comp_SmplOpng_Name (::std::auto_ptr< Airflow_MZone_Comp_SmplOpng_Name_type > p);

        // Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_type > Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_traits;

        const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional&
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed () const;

        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional&
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed ();

        void
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& x);

        // Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_type > Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_traits;

        const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional&
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed () const;

        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional&
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed ();

        void
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& x);

        // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type > Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits;

        const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional&
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const;

        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional&
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ();

        void
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x);

        // Airflow_MZone_Comp_SmplOpng_DischargeCoef
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_SmplOpng_DischargeCoef_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_DischargeCoef_type > Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_DischargeCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits;

        const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional&
        Airflow_MZone_Comp_SmplOpng_DischargeCoef () const;

        Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional&
        Airflow_MZone_Comp_SmplOpng_DischargeCoef ();

        void
        Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x);

        // Constructors.
        //
        SimWindow_Window_ExteriorDetailed ();

        SimWindow_Window_ExteriorDetailed (const RefId_type&);

        SimWindow_Window_ExteriorDetailed (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

        SimWindow_Window_ExteriorDetailed (const SimWindow_Window_ExteriorDetailed& x,
                                           ::xml_schema::flags f = 0,
                                           ::xml_schema::container* c = 0);

        virtual SimWindow_Window_ExteriorDetailed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimWindow_Window_ExteriorDetailed&
        operator= (const SimWindow_Window_ExteriorDetailed& x);

        virtual 
        ~SimWindow_Window_ExteriorDetailed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimWindow_Name_optional SimWindow_Name_;
        SimWindow_SurfType_optional SimWindow_SurfType_;
        SimWindow_ConstructionName_optional SimWindow_ConstructionName_;
        SimWindow_BldgSurfName_optional SimWindow_BldgSurfName_;
        SimWindow_OutsdBndCondObject_optional SimWindow_OutsdBndCondObject_;
        SimWindow_ViewFactToGnd_optional SimWindow_ViewFactToGnd_;
        SimWindow_ShadingContName_optional SimWindow_ShadingContName_;
        SimWindow_FrmAndDivName_optional SimWindow_FrmAndDivName_;
        SimWindow_Mult_optional SimWindow_Mult_;
        SimWindow_NumbVerts_optional SimWindow_NumbVerts_;
        SimWindow_VertexXCoord_1_4_optional SimWindow_VertexXCoord_1_4_;
        SimWindow_VertexYCoord_1_4_optional SimWindow_VertexYCoord_1_4_;
        SimWindow_VertexZCoord_1_4_optional SimWindow_VertexZCoord_1_4_;
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
        WindowProp_AirflowControl_Name_optional WindowProp_AirflowControl_Name_;
        WindowProp_AirflowControl_AirflowSrc_optional WindowProp_AirflowControl_AirflowSrc_;
        WindowProp_AirflowControl_AirflowDestination_optional WindowProp_AirflowControl_AirflowDestination_;
        WindowProp_AirflowControl_MaxFlowRate_optional WindowProp_AirflowControl_MaxFlowRate_;
        WindowProp_AirflowControl_AirflowControlType_optional WindowProp_AirflowControl_AirflowControlType_;
        WindowProp_AirflowControl_AirflowIsScheduled_optional WindowProp_AirflowControl_AirflowIsScheduled_;
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
        WindowProp_StormWindow_WindName_optional WindowProp_StormWindow_WindName_;
        WindowProp_StormWindow_StormGlassLayerName_optional WindowProp_StormWindow_StormGlassLayerName_;
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
        Daylight_DELight_CmplxFenestr_Name_optional Daylight_DELight_CmplxFenestr_Name_;
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
        Daylight_DELight_CmplxFenestr_BldgSurfName_optional Daylight_DELight_CmplxFenestr_BldgSurfName_;
        Daylight_DELight_CmplxFenestr_WindName_optional Daylight_DELight_CmplxFenestr_WindName_;
        Daylight_DELight_CmplxFenestr_FenestrationRotation_optional Daylight_DELight_CmplxFenestr_FenestrationRotation_;
        Airflow_MZone_Comp_DetldOpng_Name_optional Airflow_MZone_Comp_DetldOpng_Name_;
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
        Airflow_MZone_Comp_SmplOpng_Name_optional Airflow_MZone_Comp_SmplOpng_Name_;
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_WINDOW_WINDOW_EXTERIOR_DETAILED_HXX
