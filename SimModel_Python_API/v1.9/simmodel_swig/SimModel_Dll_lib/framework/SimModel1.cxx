// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimModel1.hxx"

#include "simactor_actor_default.hxx"

#include "simactor_actor_spaceoccupant.hxx"

#include "simactuator_damperactuator_default.hxx"

#include "simactuator_default_default.hxx"

#include "simactuator_electricalrotor_default.hxx"

#include "simactuator_valveactuator_default.hxx"

#include "simactuator_virtualactuator_emsactuator.hxx"

#include "simaddress_postal_default.hxx"

#include "simaddress_telecom_default.hxx"

#include "simadjacentsiteparams_adjacentsite_default.hxx"

#include "simanalyticalrepresentation_analyticalrepresentation_default.hxx"

#include "simapplanguagedefault_applanguagedefault_default.hxx"

#include "simapplibrarydefault_applibrarydefault_enterpriselibrary.hxx"

#include "simapplibrarydefault_applibrarydefault_globallibrary.hxx"

#include "simapplibrarydefault_applibrarydefault_userlibrary.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_building.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_buildingstory.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_customopenings.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_customspaces.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_glazing.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_othersettings.hxx"

#include "simappmdlcreatordefaults_appmdlcreatordefaults_site.hxx"

#include "simappobjnamedefault_bldgcomponentgroup_hvaccomponent.hxx"

#include "simappobjnamedefault_bldgcomponentgroup_hvaccomponentgroup.hxx"

#include "simappobjnamedefault_distributionsystem_default.hxx"

#include "simappobjnamedefault_distributionsystem_hvacairloop.hxx"

#include "simappobjnamedefault_distributionsystem_hvacchilledwaterloop.hxx"

#include "simappobjnamedefault_distributionsystem_hvaccondenserloop.hxx"

#include "simappobjnamedefault_distributionsystem_hvachotwaterloop.hxx"

#include "simappobjnamedefault_distributionsystem_hvacsteamloop.hxx"

#include "simappobjnamedefault_distributionsystem_mixedwaterloop.hxx"

#include "simappobjnamedefault_distributionsystem_refrigerationloop.hxx"

#include "simappobjnamedefault_distributionsystem_servicehotwater.hxx"

#include "simappobjnamedefault_distributionsystem_sitepowerdemand.hxx"

#include "simappobjnamedefault_distributionsystem_sitepowergeneration.hxx"

#include "simappobjnamedefault_distributionsystem_varrefrigerantflow.hxx"

#include "simappobjnamedefault_othersystem_default.hxx"

#include "simappobjnamedefault_sitecontext_adjacentsite.hxx"

#include "simappobjnamedefault_sitecontext_solarobstruction.hxx"

#include "simappobjnamedefault_space_ceilingplenum.hxx"

#include "simappobjnamedefault_space_floorplenum.hxx"

#include "simappobjnamedefault_space_space.hxx"

#include "simappobjnamedefault_spatialcontainer_building.hxx"

#include "simappobjnamedefault_spatialcontainer_buildingstory.hxx"

#include "simappobjnamedefault_spatialcontainer_project.hxx"

#include "simappobjnamedefault_spatialcontainer_site.hxx"

#include "simappobjnamedefault_spatialzone_ceilingplenumzone.hxx"

#include "simappobjnamedefault_spatialzone_floorplenumzone.hxx"

#include "simappobjnamedefault_spatialzone_plenumzone.hxx"

#include "simappobjnamedefault_spatialzone_thermalzone.hxx"

#include "simappobjnamedefault_zonegroup_ceilingplenumzonegroup.hxx"

#include "simappobjnamedefault_zonegroup_daylightingzonegroup.hxx"

#include "simappobjnamedefault_zonegroup_floorplenumzonegroup.hxx"

#include "simappobjnamedefault_zonegroup_hvacequipmentgroup.hxx"

#include "simappobjnamedefault_zonegroup_natventzonegroup.hxx"

#include "simappobjnamedefault_zonegroup_thermalzonegroup.hxx"

#include "simapppreferences_apppreferences_autosave.hxx"

#include "simapppreferences_apppreferences_autosaveinterval.hxx"

#include "simapppreferences_apppreferences_eplusinstalpath.hxx"

#include "simapppreferences_apppreferences_eplusinstalversion.hxx"

#include "simapppreferences_apppreferences_minmonthlychargetype.hxx"

#include "simapppreferences_apppreferences_monthlychargetype.hxx"

#include "simappstdsbddefaults_appstdsbddefaults_designteam.hxx"

#include "simappstdsbddefaults_appstdsbddefaults_exceptionalconditions.hxx"

#include "simappstdsbddefaults_appstdsbddefaults_noncomplyanalysis.hxx"

#include "simappstdsbddefaults_appstdsbddefaults_projectdata.hxx"

#include "simappstdt24defaults_appstdt24defaults_designteam.hxx"

#include "simappstdt24defaults_appstdt24defaults_exceptionalconditions.hxx"

#include "simappstdt24defaults_appstdt24defaults_noncomplyanalysis.hxx"

#include "simappstdt24defaults_appstdt24defaults_projectdata.hxx"

#include "simappunitdefault_appunitdefault_databasedefault.hxx"

#include "simappunitdefault_appunitdefault_userdisplaypreference.hxx"

#include "simarbitraryprofiledef_arbitraryprofile_closed.hxx"

#include "simarbitraryprofiledef_arbitraryprofile_closedwithvoids.hxx"

#include "simarbitraryprofiledef_arbitraryprofile_open.hxx"

#include "simarrayparams_arrayparams_default.hxx"

#include "simarrayparams_bldgelementarray_beam.hxx"

#include "simarrayparams_bldgelementarray_column.hxx"

#include "simarrayparams_bldgelementarray_default.hxx"

#include "simarrayparams_doorarray_default.hxx"

#include "simarrayparams_panelarrayparams_default.hxx"

#include "simarrayparams_solarshadearray_default.hxx"

#include "simarrayparams_windowarray_default.hxx"

#include "simbeam_default_default.hxx"

#include "simbeamparams_beam_default.hxx"

#include "simbeamtype_beam_default.hxx"

#include "simbldgelementarrayparams_bldgelementarray_beam.hxx"

#include "simbldgelementarrayparams_bldgelementarray_column.hxx"

#include "simbldgelementarrayparams_bldgelementarray_default.hxx"

#include "simbldgelementtype_bldgelementproxy_default.hxx"

#include "simbldgelementtype_default_default.hxx"

#include "simbldgelementtype_electricalterminal_default.hxx"

#include "simbldgelementtype_humantransport_default.hxx"

#include "simbldgelementtype_plumbingfixture_default.hxx"

#include "simbldgelementtype_railing_default.hxx"

#include "simbldgelementtype_ramp_default.hxx"

#include "simbldgelementtype_rampflight_default.hxx"

#include "simbldgelementtype_stair_default.hxx"

#include "simbldgelementtype_stairflight_default.hxx"

#include "simbldgelementtype_virtualelement_default.hxx"

#include "simbldgparams_building_default.hxx"

#include "simbldgsiteparams_buildingsite_default.hxx"

#include "simbldgstoryparams_buildingstory_default.hxx"

#include "simbldgstorytype_buildingstory_default.hxx"

#include "simbuilding_adjacentbuilding_default.hxx"

#include "simbuilding_building_default.hxx"

#include "simbuildingelementproxy_default_default.hxx"

#include "simbuildingelementproxy_sitecontextelement_buildingshading.hxx"

#include "simbuildingelementproxy_sitecontextelement_buildingshadingdetailed.hxx"

#include "simbuildingelementproxy_sitecontextelement_default.hxx"

#include "simbuildingelementproxy_sitecontextelement_groundplane.hxx"

#include "simbuildingelementproxy_sitecontextelement_siteshading.hxx"

#include "simbuildingelementproxy_sitecontextelement_siteshadingdetailed.hxx"

#include "simbuildingelementproxy_thermalmass_default.hxx"

#include "simbuildingstory_buildingstory_default.hxx"

#include "simbuildingtype_building_default.hxx"

#include "simcalendardate_default_default.hxx"

#include "simcartesiantransformoperator_2d_nonuniform.hxx"

#include "simcartesiantransformoperator_2d_uniform.hxx"

#include "simcartesiantransformoperator_3d_nonuniform.hxx"

#include "simcartesiantransformoperator_3d_uniform.hxx"

#include "simclassification_classificationreference_buildingelementclassification.hxx"

#include "simclassification_classificationreference_constructionentitybyfunction.hxx"

#include "simclassification_classificationreference_default.hxx"

#include "simclassification_classificationreference_organizationalbillingid.hxx"

#include "simclassification_classificationreference_organizationalid.hxx"

#include "simclassification_classificationreference_spacebyfunction.hxx"

#include "simclassification_classificationreference_spacecategoryboma.hxx"

#include "simclassification_classificationreference_spacecategoryowner.hxx"

#include "simclassification_classificationreference_spacetypeowner.hxx"

#include "simclassification_classificationreference_spatialzoneenergytype.hxx"

#include "simclassification_classificationreference_spatialzonesecuritylevel.hxx"

#include "simclassification_classificationreference_spatialzonetype.hxx"

#include "simclassification_classificationreference_suborganizationalid.hxx"

#include "simclassification_classificationsystem_bomaspacecategoryclassification.hxx"

#include "simclassification_classificationsystem_default.hxx"

#include "simclassification_classificationsystem_masterformat.hxx"

#include "simclassification_classificationsystem_omniclass.hxx"

#include "simclassification_classificationsystem_ownerorganizationalclassification.hxx"

#include "simclassification_classificationsystem_ownersecuritylevelclassification.hxx"

#include "simclassification_classificationsystem_ownerselectedenergyanalysisclassification.hxx"

#include "simclassification_classificationsystem_ownerspacecategoryclassification.hxx"

#include "simclassification_classificationsystem_ownerspacetypeclassification.hxx"

#include "simclassification_classificationsystem_ownerzonetypeclassification.hxx"

#include "simclassification_classificationsystem_uniformat.hxx"

#include "simcolumn_embedded_default.hxx"

#include "simcolumn_freestanding_default.hxx"

#include "simcolumnparams_column_default.hxx"

#include "simcolumntype_column_default.hxx"

#include "simcomplexproperty_complexprop_default.hxx"

#include "simcompliancerefmodel_ashrae90_1_appdx_g_default.hxx"

#include "simcompositeprofiledef_compositeprofile_default.hxx"

#include "simconnectcurvegeom_curve_default.hxx"

#include "simconnectedfaceset_connectedfaceset_closedshell.hxx"

#include "simconnectedfaceset_connectedfaceset_default.hxx"

#include "simconnectedfaceset_connectedfaceset_openshell.hxx"

#include "simconnection_airflow_crosssystem.hxx"

#include "simconnection_airflow_default.hxx"

#include "simconnection_airflow_linkage.hxx"

#include "simconnection_airflownetwork_default.hxx"

#include "simconnection_chilledwaterflow_crosssystem.hxx"

#include "simconnection_chilledwaterflow_default.hxx"

#include "simconnection_condenserflow_crosssystem.hxx"

#include "simconnection_condenserflow_default.hxx"

#include "simconnection_default_default.hxx"

#include "simconnection_digitalcontrol_default.hxx"

#include "simconnection_docking_default.hxx"

#include "simconnection_electricalpowerflow_default.hxx"

#include "simconnection_hotwaterflow_crosssystem.hxx"

#include "simconnection_hotwaterflow_default.hxx"

#include "simconnection_mixedwaterflow_crosssystem.hxx"

#include "simconnection_mixedwaterflow_default.hxx"

#include "simconnection_refrigerantflow_default.hxx"

#include "simconnection_servicehotwaterflow_crosssystem.hxx"

#include "simconnection_servicehotwaterflow_default.hxx"

#include "simconnection_steamflow_crosssystem.hxx"

#include "simconnection_steamflow_default.hxx"

#include "simconnection_varrefrigerantflow_default.hxx"

#include "simconnection_zoneairflow_default.hxx"

#include "simconnection_zoneairflow_zonecrossmixing.hxx"

#include "simconnection_zoneairflow_zonemixing.hxx"

#include "simconnectpointgeom_point_default.hxx"

#include "simconnectportgeom_port_default.hxx"

#include "simconnectsurfacegeom_surface_default.hxx"

#include "simcontroller_availabilitymanager_airloop.hxx"

#include "simcontroller_availabilitymanager_plantloop.hxx"

#include "simcontroller_daylighting_delight.hxx"

#include "simcontroller_daylighting_skylights.hxx"

#include "simcontroller_daylighting_standard.hxx"

#include "simcontroller_daylighting_windows.hxx"

#include "simcontroller_default_default.hxx"

#include "simcontroller_demandmanager_airloop.hxx"

#include "simcontroller_lightingcontrol_continuous.hxx"

#include "simcontroller_lightingcontrol_continuousoff.hxx"

#include "simcontroller_lightingcontrol_motionsensor.hxx"

#include "simcontroller_lightingcontrol_on_off.hxx"

#include "simcontroller_lightingcontrol_stepped.hxx"

#include "simcontroller_mechanicalventilation_economizerwithdemandcontrolledventilation.hxx"

#include "simcontroller_operationmanager_condenserloop.hxx"

#include "simcontroller_operationmanager_plantloop.hxx"

#include "simcontroller_outdoorair_economizercontrol.hxx"

#include "simcontroller_outdoorair_economizerwithdemandcontrolledventilation.hxx"

#include "simcontroller_outdoorair_outdoorairpreconditioningcontroller.hxx"

#include "simcontroller_programmable_default.hxx"

#include "simcontroller_shadingcontrol_heating_coolingloads.hxx"

#include "simcontroller_shadingcontrol_on_off.hxx"

#include "simcontroller_shadingcontrol_windowtemp_solar.hxx"

#include "simcontroller_supplyair_humidity.hxx"

#include "simcontroller_supplyair_temperature.hxx"

#include "simcontroller_supplywater_temperature.hxx"

#include "simcontroller_thermalstorage_thermalenergystoragetank.hxx"

#include "simcontroller_ventilation_contaminantcontrol.hxx"

#include "simcontroller_watercoil_default.hxx"

#include "simcontroller_zonecontrolhumidity_humidistat.hxx"

#include "simcontroller_zonecontrolhumidity_humidistat1zone.hxx"

#include "simcontroller_zonecontroltemperature_thermostat.hxx"

#include "simcontroller_zonecontroltemperature_thermostat1zone.hxx"

#include "simcontroller_zonecontroltemperature_thermostatstageddual.hxx"

#include "simcontroller_zonecontroltemperature_thermostatthermalcomfort.hxx"

#include "simcontroller_zonecontroltemperature_thermostatthermalcomfort1zone.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_differentialthermostat.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_hightemperatureturnoff.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_hightemperatureturnon.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_hybridventilation.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_lowtemperatureturnoff.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_lowtemperatureturnon.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_nightcycle.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_nightventilation.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_optimumstart.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_scheduled.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_scheduledoff.hxx"

#include "simcontrolscheme_availabilitymanagerscheme_scheduledon.hxx"

#include "simcontrolscheme_controlandsequencingscheme_componentsetpoint.hxx"

#include "simcontrolscheme_controlandsequencingscheme_coolingload.hxx"

#include "simcontrolscheme_controlandsequencingscheme_electricloadcenter.hxx"

#include "simcontrolscheme_controlandsequencingscheme_heatingload.hxx"

#include "simcontrolscheme_controlandsequencingscheme_ourdoorrelativehumidity.hxx"

#include "simcontrolscheme_controlandsequencingscheme_outdoordewpoint.hxx"

#include "simcontrolscheme_controlandsequencingscheme_outdoordewpointdifference.hxx"

#include "simcontrolscheme_controlandsequencingscheme_outdoordrybulb.hxx"

#include "simcontrolscheme_controlandsequencingscheme_outdoordrybulbdifference.hxx"

#include "simcontrolscheme_controlandsequencingscheme_outdoorwetbulb.hxx"

#include "simcontrolscheme_controlandsequencingscheme_outdoorwetbulbdifference.hxx"

#include "simcontrolscheme_controlandsequencingscheme_uncontrolled.hxx"

#include "simcontrolscheme_controlandsequencingscheme_userdefined.hxx"

#include "simcontrolscheme_demandmanagerscheme_electricequipment.hxx"

#include "simcontrolscheme_demandmanagerscheme_exteriorlights.hxx"

#include "simcontrolscheme_demandmanagerscheme_lights.hxx"

#include "simcontrolscheme_demandmanagerscheme_thermostats.hxx"

#include "simcontrolscheme_energymanagementscheme_energymgmtsysconstructionindexvariable.hxx"

#include "simcontrolscheme_energymanagementscheme_energymgmtsyscurveortableindexvariable.hxx"

#include "simcontrolscheme_energymanagementscheme_globalvairable.hxx"

#include "simcontrolscheme_energymanagementscheme_internalvariable.hxx"

#include "simcontrolscheme_energymanagementscheme_outputvariable.hxx"

#include "simcontrolscheme_energymanagementscheme_program.hxx"

#include "simcontrolscheme_energymanagementscheme_programcallingmanager.hxx"

#include "simcontrolscheme_energymanagementscheme_subroutine.hxx"

#include "simcontrolscheme_energymanagementscheme_trendvariable.hxx"

#include "simcontrolscheme_externalinterfaceexport_fromvariable.hxx"

#include "simcontrolscheme_externalinterfaceexport_toactuator.hxx"

#include "simcontrolscheme_externalinterfaceexport_toschedule.hxx"

#include "simcontrolscheme_externalinterfaceexport_tovariable.hxx"

#include "simcontrolscheme_externalinterfaceimport_default.hxx"

#include "simcontrolscheme_externalinterfaceimport_fromvariable.hxx"

#include "simcontrolscheme_externalinterfaceimport_toactuator.hxx"

#include "simcontrolscheme_externalinterfaceimport_toschedule.hxx"

#include "simcontrolscheme_externalinterfaceimport_tovariable.hxx"

#include "simcontrolscheme_operatingscheme_coolingloadbasedoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_heatingloadbasedoperationshceme.hxx"

#include "simcontrolscheme_operatingscheme_outdoordewpointbasedoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_outdoordewpointbulbdifferenceoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_outdoordrybulbbasedoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_outdoordrybulbdifferenceoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_outdoorrelativehumiditybasedoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_outdoorwetbulbbasedoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_outdoorwetbulbdifferenceoperationscheme.hxx"

#include "simcontrolscheme_operatingscheme_plantequipmentoperationcomponentsetpoint.hxx"

#include "simcontrolscheme_operatingscheme_uncontrolledoperationscheme.hxx"

#include "simcontrolscheme_setpointmanagerscheme_averagedmaximumzonehumidity.hxx"

#include "simcontrolscheme_setpointmanagerscheme_averagedminimumzonehumidity.hxx"

#include "simcontrolscheme_setpointmanagerscheme_coldestzonereset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_ductstaticpressure.hxx"

#include "simcontrolscheme_setpointmanagerscheme_enteringreset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_enteringresetideal.hxx"

#include "simcontrolscheme_setpointmanagerscheme_followgroundtemperature.hxx"

#include "simcontrolscheme_setpointmanagerscheme_followoutdoorairtemperature.hxx"

#include "simcontrolscheme_setpointmanagerscheme_followsystemnodetemperature.hxx"

#include "simcontrolscheme_setpointmanagerscheme_leasthumidzonereset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_mixedair.hxx"

#include "simcontrolscheme_setpointmanagerscheme_mosthumidzonereset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_outdoorairpretreat.hxx"

#include "simcontrolscheme_setpointmanagerscheme_outdoorairreset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_returnairbypassflow.hxx"

#include "simcontrolscheme_setpointmanagerscheme_scheduleddualsetpoint.hxx"

#include "simcontrolscheme_setpointmanagerscheme_scheduledsetpoint.hxx"

#include "simcontrolscheme_setpointmanagerscheme_setpointmanagerscheduled.hxx"

#include "simcontrolscheme_setpointmanagerscheme_setpointmanagerscheduleddualsetpoint.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_cooling.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_heating.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_humidity_maximum.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_humidity_minimum.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_onestagecooling.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_onestageheating.hxx"

#include "simcontrolscheme_setpointmanagerscheme_singlezone_reheat.hxx"

#include "simcontrolscheme_setpointmanagerscheme_warmesttemperatureflow.hxx"

#include "simcontrolscheme_setpointmanagerscheme_warmestzonereset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_zoneaveragecoolingloadreset.hxx"

#include "simcontrolscheme_setpointmanagerscheme_zoneaverageheatingloadreset.hxx"

#include "simcontrolscheme_setpointscheme_dualsetpoint.hxx"

#include "simcontrolscheme_setpointscheme_singlecooling.hxx"

#include "simcontrolscheme_setpointscheme_singleheating.hxx"

#include "simcontrolscheme_setpointscheme_singleheatingorcooling.hxx"

#include "simcontrolscheme_setpointscheme_thermalcomfortfangerdualsetpoint.hxx"

#include "simcontrolscheme_setpointscheme_thermalcomfortfangersinglecooling.hxx"

#include "simcontrolscheme_setpointscheme_thermalcomfortfangersingleheating.hxx"

#include "simcontrolscheme_setpointscheme_thermalcomfortfangersingleheatingorcooling.hxx"

#include "simcost_componentcost_adjustments.hxx"

#include "simcost_componentcost_lineitem.hxx"

#include "simcost_componentcost_reference.hxx"

#include "simcost_default_default.hxx"

#include "simcost_lifecyclecost_nonrecurringcost.hxx"

#include "simcost_lifecyclecost_parameters.hxx"

#include "simcost_lifecyclecost_recurringcosts.hxx"

#include "simcost_lifecyclecost_useadjustment.hxx"

#include "simcost_lifecyclecost_usepriceescalation.hxx"

#include "simcost_utilitycost_chargeblock.hxx"

#include "simcost_utilitycost_chargesimple.hxx"

#include "simcost_utilitycost_costratchet.hxx"

#include "simcost_utilitycost_costvariable.hxx"

#include "simcost_utilitycost_qualify.hxx"

#include "simcost_utilitycost_tariff.hxx"

#include "simcurtainwall_curtainwall_default.hxx"

#include "simcurtainwallparams_curtainwall_default.hxx"

#include "simcurtainwalltype_curtainwall_default.hxx"

#include "simcurvestyle_curvestyle_default.hxx"

#include "simcurvestyle_curvestyle_font.hxx"

#include "simcurvestyle_curvestyle_fontandscaling.hxx"

#include "simcurvestyle_curvestyle_fontpattern.hxx"

#include "simdaylightingassembly_daylightingassembly_lightshelf.hxx"

#include "simdaylightingassembly_daylightingassembly_lighttube.hxx"

#include "simdaylightingassembly_daylightingassembly_lighttubefensurface.hxx"

#include "simdaylightingassembly_daylightingassembly_lightwell.hxx"

#include "simdaylightingassembly_daylightingassembly_lightwellfensurface.hxx"

#include "simderivedunittype_derivedunit_default.hxx"

#include "simdistributionport_airflowport_air_in.hxx"

#include "simdistributionport_airflowport_air_inorout.hxx"

#include "simdistributionport_airflowport_air_out.hxx"

#include "simdistributionport_airflowport_default.hxx"

#include "simdistributionport_airflowport_exhaustair_out.hxx"

#include "simdistributionport_airflowport_outdoorair_in.hxx"

#include "simdistributionport_chilledwaterflowport_condensedwaterout.hxx"

#include "simdistributionport_chilledwaterflowport_default.hxx"

#include "simdistributionport_chilledwaterflowport_evaporativewaterin.hxx"

#include "simdistributionport_chilledwaterflowport_water_in.hxx"

#include "simdistributionport_chilledwaterflowport_water_inorout.hxx"

#include "simdistributionport_chilledwaterflowport_water_out.hxx"

#include "simdistributionport_condenserflowport_condenserflow_in.hxx"

#include "simdistributionport_condenserflowport_condenserflow_inorout.hxx"

#include "simdistributionport_condenserflowport_condenserflow_out.hxx"

#include "simdistributionport_condenserflowport_default.hxx"

#include "simdistributionport_digitalcontrol_airloop_default.hxx"

#include "simdistributionport_digitalcontrol_airloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_airloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_airloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_chwloop_default.hxx"

#include "simdistributionport_digitalcontrol_chwloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_chwloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_chwloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_cwloop_default.hxx"

#include "simdistributionport_digitalcontrol_cwloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_cwloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_cwloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_hwloop_default.hxx"

#include "simdistributionport_digitalcontrol_hwloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_hwloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_hwloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_mxwloop_default.hxx"

#include "simdistributionport_digitalcontrol_mxwloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_mxwloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_mxwloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_rfgloop_default.hxx"

#include "simdistributionport_digitalcontrol_rfgloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_rfgloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_rfgloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_shwloop_default.hxx"

#include "simdistributionport_digitalcontrol_shwloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_shwloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_shwloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_stmloop_default.hxx"

#include "simdistributionport_digitalcontrol_stmloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_stmloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_stmloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrol_vrfloop_default.hxx"

#include "simdistributionport_digitalcontrol_vrfloop_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrol_vrfloop_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrol_vrfloop_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrolport_default.hxx"

#include "simdistributionport_digitalcontrolport_digitalsignal_in.hxx"

#include "simdistributionport_digitalcontrolport_digitalsignal_inorout.hxx"

#include "simdistributionport_digitalcontrolport_digitalsignal_out.hxx"

#include "simdistributionport_digitalcontrolport_digitalvirtual.hxx"

#include "simdistributionport_distributionport_default.hxx"

#include "simdistributionport_electricalflowport_default.hxx"

#include "simdistributionport_electricalflowport_electrical_in.hxx"

#include "simdistributionport_electricalflowport_electrical_inorout.hxx"

#include "simdistributionport_electricalflowport_electrical_out.hxx"

#include "simdistributionport_hotwaterflowport_condensedwaterout.hxx"

#include "simdistributionport_hotwaterflowport_default.hxx"

#include "simdistributionport_hotwaterflowport_evaporativewaterin.hxx"

#include "simdistributionport_hotwaterflowport_water_in.hxx"

#include "simdistributionport_hotwaterflowport_water_inorout.hxx"

#include "simdistributionport_hotwaterflowport_water_out.hxx"

#include "simdistributionport_mixedwaterflowport_condensedwaterout.hxx"

#include "simdistributionport_mixedwaterflowport_default.hxx"

#include "simdistributionport_mixedwaterflowport_evaporativewaterin.hxx"

#include "simdistributionport_mixedwaterflowport_water_in.hxx"

#include "simdistributionport_mixedwaterflowport_water_inorout.hxx"

#include "simdistributionport_mixedwaterflowport_water_out.hxx"

#include "simdistributionport_refrigerationflowport_default.hxx"

#include "simdistributionport_refrigerationflowport_refrigeration_in.hxx"

#include "simdistributionport_refrigerationflowport_refrigeration_inorout.hxx"

#include "simdistributionport_refrigerationflowport_refrigeration_out.hxx"

#include "simdistributionport_servicehotwaterflowport_default.hxx"

#include "simdistributionport_servicehotwaterflowport_water_in.hxx"

#include "simdistributionport_servicehotwaterflowport_water_inorout.hxx"

#include "simdistributionport_servicehotwaterflowport_water_out.hxx"

#include "simdistributionport_steamflowport_default.hxx"

#include "simdistributionport_steamflowport_steam_in.hxx"

#include "simdistributionport_steamflowport_steam_inorout.hxx"

#include "simdistributionport_steamflowport_steam_out.hxx"

#include "simdistributionport_varrefrigerantflowport_default.hxx"

#include "simdistributionport_varrefrigerantflowport_vrf_in.hxx"

#include "simdistributionport_varrefrigerantflowport_vrf_inorout.hxx"

#include "simdistributionport_varrefrigerantflowport_vrf_out.hxx"

#include "simdistributionport_zoneairflowport_air_in.hxx"

#include "simdistributionport_zoneairflowport_air_out.hxx"

#include "simdoor_default_default.hxx"

#include "simdoor_glazeddoor_exterior.hxx"

#include "simdoor_glazeddoor_exteriordetailed.hxx"

#include "simdoor_glazeddoor_interior.hxx"

#include "simdoor_opaquedoor_exterior.hxx"

#include "simdoor_opaquedoor_exteriordetailed.hxx"

#include "simdoor_opaquedoor_interior.hxx"

#include "simdoorarrayparams_doorarray_default.hxx"

#include "simdoorliningprops_doorliningprops_default.hxx"

#include "simdoorpanelprops_doorpanelprops_default.hxx"

#include "simdoorparams_door_default.hxx"

#include "simdoortype_door_default.hxx"

#include "simdwgxrefparams_dwgxref_default.hxx"

#include "simedge_edge_edgecurve.hxx"

#include "simedge_edge_orientededge.hxx"

#include "simedge_edge_subedge.hxx"

#include "simelementquantity_elementquantity_default.hxx"

#include "simextendedmaterialprops_extendedmatlprops_default.hxx"

#include "simexternalreference_default_default.hxx"

#include "simexternalreference_documentreference_default.hxx"

#include "simexternalreference_externalreference_default.hxx"

#include "simexternalreference_libraryreference_default.hxx"

#include "simexternalreference_propertyreference_default.hxx"

#include "simface_face_default.hxx"

#include "simface_face_facesurface.hxx"

#include "simfacebound_facebound_default.hxx"

#include "simfacebound_facebound_faceouterbound.hxx"

#include "simfeatureairflownetwork_default_default.hxx"

#include "simfeatureairflownetwork_effectiveleakagearea_default.hxx"

#include "simfeatureairflownetwork_exhaust_zoneexhaustfan.hxx"

#include "simfeatureairflownetwork_opening_default.hxx"

#include "simfeatureairflownetwork_opening_detailed.hxx"

#include "simfeatureairflownetwork_opening_horizontal.hxx"

#include "simfeatureairflownetwork_opening_simple.hxx"

#include "simfeatureairflownetwork_surface_default.hxx"

#include "simfeatureairflownetwork_surfacecrack_default.hxx"

#include "simfeatureairflownetwork_zone_default.hxx"

#include "simfeatureelementaddition_projectionelement_default.hxx"

#include "simfeatureelementsubtraction_edgefeature_chamferededge.hxx"

#include "simfeatureelementsubtraction_edgefeature_default.hxx"

#include "simfeatureelementsubtraction_edgefeature_roundededge.hxx"

#include "simfeatureelementsubtraction_slotfeature_default.hxx"

#include "simfeatureelementsubtraction_void_opening.hxx"

#include "simflowcompoundeqmt_districtsupply_cooling.hxx"

#include "simflowcompoundeqmt_districtsupply_heating.hxx"

#include "simflowcompoundeqmt_districtsupply_temperaturesource.hxx"

#include "simflowcompoundeqmt_purchasedsupply_cooling.hxx"

#include "simflowcompoundeqmt_purchasedsupply_heating.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_ac_variablerefrigerantflow.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_coolonly.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_default.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_furnaceheatcool.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_furnaceheatonly.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_heatcool.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_heatonly.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_hp_airtoair.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_hp_airtoairmultispeed.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_hp_watertoair_cw.hxx"

#include "simflowcompoundeqmt_unitaryloopeqmt_hp_watertoair_mxw.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_airconditionerwindow.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_dehumidifierdx.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_energyrecoveryventilator.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_evapcoolerunit.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_forcedairuserdefined.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_fourpipefancoil.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_hp_wtrtoair_cw.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_hp_wtrtoair_mxw.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_idealloadsairsystem.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_outdoorairunit.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_ptac.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_pthp.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_unitheater.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_unitventialtor.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_watersystemloadprofile.hxx"

#include "simflowcompoundeqmt_unitaryzoneeqmt_zoneventilationdesignflowrate.hxx"

#include "simflowcompoundeqmt_varrefrigerantfloweqmt_airconditioner.hxx"

#include "simflowcompoundeqmt_vavsubsystems_vav_changeoverbypass.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_chilledwaterloop.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_coilsystem_cooling_dx_heatexchangerassisted.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_coilsystem_cooling_water_heatexchangerassisted.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_coilsystemcoolingdx.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_coilsystemheatingdx.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_hotwaterloop.hxx"

#include "simflowcompoundeqmt_virtualsupplysubsystems_mixedwaterloop.hxx"

#include "simflowcontroller_damper_default.hxx"

#include "simflowcontroller_damper_exhaust.hxx"

#include "simflowcontroller_damper_facebypass.hxx"

#include "simflowcontroller_damper_mixedair.hxx"

#include "simflowcontroller_damper_outsideair.hxx"

#include "simflowcontroller_damper_recirculation.hxx"

#include "simflowcontroller_damper_relief.hxx"

#include "simflowcontroller_default_default.hxx"

#include "simflowcontroller_electricalswitch_on_off.hxx"

#include "simflowcontroller_electricalswitch_variable.hxx"

#include "simflowcontroller_valve_default.hxx"

#include "simflowcontroller_valve_emsvalve.hxx"

#include "simflowcontroller_valve_nonreturnvalve.hxx"

#include "simflowcontroller_valve_temperingvalve.hxx"

#include "simflowenergytransfer_convectiveheater_electric.hxx"

#include "simflowenergytransfer_convectiveheater_radiant_electric.hxx"

#include "simflowenergytransfer_convectiveheater_radiant_steam.hxx"

#include "simflowenergytransfer_convectiveheater_radiant_water.hxx"

#include "simflowenergytransfer_convectiveheater_water.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxdefaultcoolingcoil.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxmultispeed.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxsinglespeed.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxsinglespeedthermalstorage.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxtwospeed.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxtwostagewithhumiditycontrolmode.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxvariablerefrigerantflow.hxx"

#include "simflowenergytransfer_coolingcoildx_coilaircoolingdxvariablespeed.hxx"

#include "simflowenergytransfer_coolingcoilwater_coilaircoolingwaterdetailedgeometry.hxx"

#include "simflowenergytransfer_coolingcoilwater_coilaircoolingwatersimple.hxx"

#include "simflowenergytransfer_coolingcoilwater_coilaircoolingwatertoairheatpumpequationfit.hxx"

#include "simflowenergytransfer_coolingcoilwater_coilaircoolingwatertoairheatpumpparameterestimation.hxx"

#include "simflowenergytransfer_coolingcoilwater_coilaircoolingwatertoairheatpumpvariablespeedequationfit.hxx"

#include "simflowenergytransfer_coolingcoilwater_coilaircoolingwateruserdefined.hxx"

#include "simflowenergytransfer_dehumidifier_default.hxx"

#include "simflowenergytransfer_dehumidifier_nofans.hxx"

#include "simflowenergytransfer_economizer_airtoair.hxx"

#include "simflowenergytransfer_electrical_transformer.hxx"

#include "simflowenergytransfer_electricalinverter_functionofpower.hxx"

#include "simflowenergytransfer_electricalinverter_lookuptable.hxx"

#include "simflowenergytransfer_electricalinverter_simple.hxx"

#include "simflowenergytransfer_evaporativecooler_directceldekpad.hxx"

#include "simflowenergytransfer_evaporativecooler_directresearchspecial.hxx"

#include "simflowenergytransfer_evaporativecooler_indirectceldekpad.hxx"

#include "simflowenergytransfer_evaporativecooler_indirectresearchspecial.hxx"

#include "simflowenergytransfer_evaporativecooler_indirectwetcoil.hxx"

#include "simflowenergytransfer_fluidcooler_evaporativesinglespeed_cw.hxx"

#include "simflowenergytransfer_fluidcooler_evaporativesinglespeed_mxw.hxx"

#include "simflowenergytransfer_fluidcooler_evaporativetwospeed_cw.hxx"

#include "simflowenergytransfer_fluidcooler_evaporativetwospeed_mxw.hxx"

#include "simflowenergytransfer_fluidcooler_singlespeed_cw.hxx"

#include "simflowenergytransfer_fluidcooler_singlespeed_mxw.hxx"

#include "simflowenergytransfer_fluidcooler_twospeed_cw.hxx"

#include "simflowenergytransfer_fluidcooler_twospeed_mxw.hxx"

#include "simflowenergytransfer_heatexairtoair_desiccantbalancedflow.hxx"

#include "simflowenergytransfer_heatexairtoair_flatplate.hxx"

#include "simflowenergytransfer_heatexairtoair_sensibleandlatent.hxx"

#include "simflowenergytransfer_heatexearthtowater_horizontaltrench.hxx"

#include "simflowenergytransfer_heatexearthtowater_surface.hxx"

#include "simflowenergytransfer_heatexearthtowater_vertical.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_chilledwatertochilledwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_chilledwatertocondenser.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_condensertocondenser.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_hotwatertocondenser.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_hotwatertohotwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_hotwatertomixedwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_hotwatertoservicehotwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_mixedwatertocondenser.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_mixedwatertohotwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_mixedwatertomixedwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_mixedwatertoservicehotwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_servicehotwatertohotwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_servicehotwatertomixedwater.hxx"

#include "simflowenergytransfer_heatexfluidtofluid_servicehotwatertoservicehotwater.hxx"

#include "simflowenergytransfer_heatexwatertowater_pond.hxx"

#include "simflowenergytransfer_heatingcoildx_coilairheatingdesuperheater.hxx"

#include "simflowenergytransfer_heatingcoildx_coilairheatingdxmultispeed.hxx"

#include "simflowenergytransfer_heatingcoildx_coilairheatingdxsinglespeed.hxx"

#include "simflowenergytransfer_heatingcoildx_coilairheatingdxvariablerefrigerantflow.hxx"

#include "simflowenergytransfer_heatingcoildx_coilairheatingdxvariablespeed.hxx"

#include "simflowenergytransfer_heatingcoilelec_coilairheatingelectric.hxx"

#include "simflowenergytransfer_heatingcoilelec_coilairheatingelectricmultistage.hxx"

#include "simflowenergytransfer_heatingcoilelec_coilairpreheatingelectric.hxx"

#include "simflowenergytransfer_heatingcoilgas_coilairheatinggas.hxx"

#include "simflowenergytransfer_heatingcoilgas_coilairheatinggasmultistage.hxx"

#include "simflowenergytransfer_heatingcoilgas_coilairpreheatinggas.hxx"

#include "simflowenergytransfer_heatingcoilsteam_coilairheatingsteam.hxx"

#include "simflowenergytransfer_heatingcoilsteam_coilairpreheatsteam.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilairheatingwater.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilairheatingwatertoairheatpumpequationfit.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilairheatingwatertoairheatpumpparameterestimation.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilairheatingwatertoairheatpumpvariablespeedequationfit.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilairheatingwateruserdefined.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilairpreheatwater.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilwaterheatingairtowaterheatpump.hxx"

#include "simflowenergytransfer_heatingcoilwater_coilwaterheatingdesuperheater.hxx"

#include "simflowenergytransfer_humidifier_electricsteam.hxx"

#include "simflowenergytransfer_pipingsystem_earthtowater_underground.hxx"

#include "simflowenergytransfer_radiantdevice_beam.hxx"

#include "simflowenergytransfer_radiantdevice_ceilinglowtempconstflow.hxx"

#include "simflowenergytransfer_radiantdevice_ceilinglowtempvarflow.hxx"

#include "simflowenergytransfer_radiantdevice_ceilingslab_ventilated.hxx"

#include "simflowenergytransfer_radiantdevice_floorlowtempconstflow.hxx"

#include "simflowenergytransfer_radiantdevice_floorlowtempvarflow.hxx"

#include "simflowenergytransfer_radiantdevice_floorslab_ventilated.hxx"

#include "simflowenergytransfer_radiantdevice_hightemp.hxx"

#include "simflowenergytransfer_radiantdevice_lowtemp_electric.hxx"

#include "simflowenergytransfer_radiantdevice_slab.hxx"

#include "simflowenergytransferstorage_hotwatertank_domestichotwater.hxx"

#include "simflowenergytransferstorage_hotwatertank_heatpump.hxx"

#include "simflowenergytransferstorage_hotwatertank_mixed.hxx"

#include "simflowenergytransferstorage_hotwatertank_mixedtank.hxx"

#include "simflowenergytransferstorage_hotwatertank_stratified.hxx"

#include "simflowenergytransferstorage_hotwatertank_stratifiedtank.hxx"

#include "simflowfitting_default_default.hxx"

#include "simflowfitting_difusser_default.hxx"

#include "simflowfitting_electrical_transformer.hxx"

#include "simflowfitting_flowelementproxy_default.hxx"

#include "simflowfitting_flowelementproxy_demandproxy_airloop.hxx"

#include "simflowfitting_flowelementproxy_demandproxy_waterloop.hxx"

#include "simflowfitting_flowelementproxy_supplyproxy_airloop.hxx"

#include "simflowfitting_flowelementproxy_supplyproxy_waterloop.hxx"

#include "simflowfitting_mixer_airmixer.hxx"

#include "simflowfitting_mixer_airmixeroutdoor.hxx"

#include "simflowfitting_mixer_airmixerzonereturn.hxx"

#include "simflowfitting_mixer_condensermixer.hxx"

#include "simflowfitting_mixer_demandproxymixer.hxx"

#include "simflowfitting_mixer_demandproxymixerair.hxx"

#include "simflowfitting_mixer_demandproxymixerwater.hxx"

#include "simflowfitting_mixer_steammixer.hxx"

#include "simflowfitting_mixer_watermixer.hxx"

#include "simflowfitting_splitter_airsplitter.hxx"

#include "simflowfitting_splitter_airsplitterzonesupply.hxx"

#include "simflowfitting_splitter_condensersplitter.hxx"

#include "simflowfitting_splitter_demandproxysplitter.hxx"

#include "simflowfitting_splitter_demandproxysplitterair.hxx"

#include "simflowfitting_splitter_demandproxysplitterwater.hxx"

#include "simflowfitting_splitter_steamsplitter.hxx"

#include "simflowfitting_splitter_watersplitter.hxx"

#include "simflowmover_default_default.hxx"

#include "simflowmover_fan_nightventilation.hxx"

#include "simflowmover_fan_relief.hxx"

#include "simflowmover_fan_zoneexhaust.hxx"

#include "simflowmover_pump_constantspeedreturn.hxx"

#include "simflowmover_pump_constantspeedsupply.hxx"

#include "simflowmover_pump_userdefined.hxx"

#include "simflowmover_pump_variablespeedreturn.hxx"

#include "simflowmover_pump_variablespeedsupply.hxx"

#include "simflowmover_pump_varspeedcondensatereturn.hxx"

#include "simflowmover_pump_varspeedcondensatesupply.hxx"

#include "simflowmover_pumpset_constantspeed2.hxx"

#include "simflowmover_pumpset_constantspeed3.hxx"

#include "simflowmover_pumpset_variablespeed2.hxx"

#include "simflowmover_pumpset_variablespeed3.hxx"

#include "simflowmover_returnfan_componentmodel.hxx"

#include "simflowmover_returnfan_constantvolume.hxx"

#include "simflowmover_returnfan_onoff.hxx"

#include "simflowmover_returnfan_variablevolume.hxx"

#include "simflowmover_supplyfan_componentmodel.hxx"

#include "simflowmover_supplyfan_constantvolume.hxx"

#include "simflowmover_supplyfan_onoff.hxx"

#include "simflowmover_supplyfan_variablevolume.hxx"

#include "simflowplant_boiler_boilerhotwater.hxx"

#include "simflowplant_boiler_boilersteam.hxx"

#include "simflowplant_boiler_userdefined.hxx"

#include "simflowplant_chiller_absorption.hxx"

#include "simflowplant_chiller_absorptionindirect.hxx"

#include "simflowplant_chiller_chillervaporcompressioncombustionturbine.hxx"

#include "simflowplant_chiller_chillervaporcompressionconstantcop.hxx"

#include "simflowplant_chiller_chillervaporcompressionelectric.hxx"

#include "simflowplant_chiller_chillervaporcompressionelectric_eir.hxx"

#include "simflowplant_chiller_chillervaporcompressionelectric_reformulatedeir.hxx"

#include "simflowplant_chiller_chillervaporcompressionenginedriven.hxx"

#include "simflowplant_chiller_userdefined.hxx"

#include "simflowplant_chillerheater_absorptionchillerdoubleeffect.hxx"

#include "simflowplant_chillerheater_absorptiondirectfired.hxx"

#include "simflowplant_chillerheater_performanceelectriceir.hxx"

#include "simflowplant_coolingtower_singlespeed.hxx"

#include "simflowplant_coolingtower_twospeed.hxx"

#include "simflowplant_coolingtower_userdefined.hxx"

#include "simflowplant_coolingtower_variablespeed.hxx"

#include "simflowplant_coolingtower_variablespeed_merkel.hxx"

#include "simflowplant_electricalgenerator_combustionturbine.hxx"

#include "simflowplant_electricalgenerator_defaultgenerator.hxx"

#include "simflowplant_electricalgenerator_fuelcell.hxx"

#include "simflowplant_electricalgenerator_fuelcellairsupply.hxx"

#include "simflowplant_electricalgenerator_fuelcellauxilaryheater.hxx"

#include "simflowplant_electricalgenerator_fuelcellelectricalstorage.hxx"

#include "simflowplant_electricalgenerator_fuelcellexhaustgastowaterheatexchanger.hxx"

#include "simflowplant_electricalgenerator_fuelcellinverter.hxx"

#include "simflowplant_electricalgenerator_fuelcellpowermodule.hxx"

#include "simflowplant_electricalgenerator_fuelcellstackcooler.hxx"

#include "simflowplant_electricalgenerator_fuelcellwatersupply.hxx"

#include "simflowplant_electricalgenerator_fuelequipment.hxx"

#include "simflowplant_electricalgenerator_fuelsupply.hxx"

#include "simflowplant_electricalgenerator_internalcombustionengine.hxx"

#include "simflowplant_electricalgenerator_microchp.hxx"

#include "simflowplant_electricalgenerator_microturbine.hxx"

#include "simflowplant_electricalgenerator_photovoltaic.hxx"

#include "simflowplant_electricalgenerator_windturbine.hxx"

#include "simflowplant_heatandpower_default.hxx"

#include "simflowplant_heatexwatertowater_pond.hxx"

#include "simflowplant_heatpump_airtoair.hxx"

#include "simflowplant_heatpump_airtoair_multispeed.hxx"

#include "simflowplant_heatpump_centralsystem.hxx"

#include "simflowplant_heatpump_groundsource.hxx"

#include "simflowplant_heatpump_watertoair.hxx"

#include "simflowplant_heatpump_watertowater_equationfit_cooling.hxx"

#include "simflowplant_heatpump_watertowater_equationfit_heating.hxx"

#include "simflowplant_heatpump_watertowater_parameterestimation_cooling.hxx"

#include "simflowplant_heatpump_watertowater_parameterestimation_heating.hxx"

#include "simflowplant_solardevice_solarcollectorintegralcollectorstorage.hxx"

#include "simflowplant_solardevice_solarcollectorperformanceintegralcollectorstorage.hxx"

#include "simflowplant_solardevice_solarphotovoltaic.hxx"

#include "simflowplant_solardevice_solarphotovoltaicthermal.hxx"

#include "simflowplant_solardevice_solarthermalair.hxx"

#include "simflowplant_solardevice_solarthermalairmultisystem.hxx"

#include "simflowplant_solardevice_solarthermalwater.hxx"

#include "simflowsegment_default_default.hxx"

#include "simflowsegment_duct_airflownetworkdistribution.hxx"

#include "simflowsegment_duct_default.hxx"

#include "simflowsegment_filter_bag.hxx"

#include "simflowsegment_filter_default.hxx"

#include "simflowsegment_filter_electrostatic.hxx"

#include "simflowsegment_filter_hepa.hxx"

#include "simflowsegment_filter_panel.hxx"

#include "simflowsegment_grill_return.hxx"

#include "simflowsegment_grill_supply.hxx"

#include "simflowsegment_louver_default.hxx"

#include "simflowsegment_louver_exhaust.hxx"

#include "simflowsegment_louver_intake.hxx"

#include "simflowsegment_louver_safety.hxx"

#include "simflowsegment_louver_ventilation.hxx"

#include "simflowsegment_pipe_adiabatic.hxx"

#include "simflowsegment_pipe_adiabatic_steam.hxx"

#include "simflowsegment_pipe_indoor.hxx"

#include "simflowsegment_pipe_outdoor.hxx"

#include "simflowsegment_pipe_underground.hxx"

#include "simflowsegment_pipe_undergroundpipecircuit.hxx"

#include "simflowsegment_pipe_undergroundpipesegment.hxx"

#include "simflowsegment_plenum_dedicatedreturn.hxx"

#include "simflowsegment_plenum_dedicatedsupply.hxx"

#include "simflowsegment_plenum_sharedreturn.hxx"

#include "simflowsegment_plenum_sharedsupply.hxx"

#include "simflowsegment_virtualcomponent_constantpressuredrop.hxx"

#include "simflowsegment_virtualcomponent_leak.hxx"

#include "simflowsegment_virtualcomponent_leakageratio.hxx"

#include "simflowsegment_wire_default.hxx"

#include "simflowstorage_electricalstorage_batterybank.hxx"

#include "simflowstorage_electricalstorage_defaultelectricalstorage.hxx"

#include "simflowstorage_thermalstorage_thermalstorageicedetailed.hxx"

#include "simflowstorage_thermalstorage_thermalstorageicesimple.hxx"

#include "simflowstorage_thermalstorage_thermalstoragewatermixed.hxx"

#include "simflowstorage_thermalstorage_thermalstoragewaterstratified.hxx"

#include "simflowstorage_waterstorage_cleanwater.hxx"

#include "simflowstorage_waterstorage_graywater.hxx"

#include "simflowstorage_waterstorage_rainwater.hxx"

#include "simflowterminal_airterminal_airterminal_dualduct_constantvolume.hxx"

#include "simflowterminal_airterminal_airterminal_dualduct_vav.hxx"

#include "simflowterminal_airterminal_airterminal_dualduct_vav_outdoorair.hxx"

#include "simflowterminal_airterminal_airterminal_tripleduct_constantvolume.hxx"

#include "simflowterminal_airterminal_airterminal_tripleduct_vav.hxx"

#include "simflowterminal_airterminal_cav_activecooledbeam.hxx"

#include "simflowterminal_airterminal_cav_activefourpipeinduction.hxx"

#include "simflowterminal_airterminal_cav_passivecooledbeam.hxx"

#include "simflowterminal_airterminal_cav_passivefourpipeinduction.hxx"

#include "simflowterminal_airterminal_constantvolume_reheat.hxx"

#include "simflowterminal_airterminal_inletsidemixer.hxx"

#include "simflowterminal_airterminal_parallelpiu_reheat.hxx"

#include "simflowterminal_airterminal_seriespiu_reheat.hxx"

#include "simflowterminal_airterminal_singleductuserdefined.hxx"

#include "simflowterminal_airterminal_supplysidemixer.hxx"

#include "simflowterminal_airterminal_uncontrolled.hxx"

#include "simflowterminal_airterminal_vav_heatandcool_noreheat.hxx"

#include "simflowterminal_airterminal_vav_heatandcool_reheat.hxx"

#include "simflowterminal_airterminal_vav_noreheat.hxx"

#include "simflowterminal_airterminal_vav_reheat.hxx"

#include "simflowterminal_airterminal_vav_reheat_variablespeedfan.hxx"

#include "simflowterminal_default_default.hxx"

#include "simflowterminal_electricalterminalexterior_default.hxx"

#include "simflowterminal_electricalterminalexterior_electricaloutlet.hxx"

#include "simflowterminal_electricalterminalexterior_lightingfixture.hxx"

#include "simflowterminal_electricalterminalinterior_default.hxx"

#include "simflowterminal_electricalterminalinterior_electricaloutlet.hxx"

#include "simflowterminal_electricalterminalinterior_lightingfixture.hxx"

#include "simflowterminal_plumbingterminal_dishwasher.hxx"

#include "simflowterminal_plumbingterminal_hotwaterfixtureset.hxx"

#include "simflowterminal_plumbingterminal_plumbingfixture.hxx"

#include "simflowterminal_plumbingterminal_shower.hxx"

#include "simflowterminal_plumbingterminal_sink.hxx"

#include "simflowterminal_plumbingterminal_sitewaterequipment.hxx"

#include "simflowterminal_plumbingterminal_toilet.hxx"

#include "simflowterminal_plumbingterminal_urinal.hxx"

#include "simflowterminal_terminalunit_variablerefrigerantflow.hxx"

#include "simfluid_concentration_default.hxx"

#include "simfluid_default_default.hxx"

#include "simfluid_glycolconcentration_default.hxx"

#include "simfluid_name_default.hxx"

#include "simfluid_saturated_default.hxx"

#include "simfluid_superheated_default.hxx"

#include "simfluid_temperatures_default.hxx"

#include "simframeanddividerprops_frameanddivider_default.hxx"

#include "simfurnishingelement_default_default.hxx"

#include "simfurnishingelementtype_furnishing_default.hxx"

#include "simfurnishingelementtype_furniture_default.hxx"

#include "simfurnituretype_furniture_default.hxx"

#include "simgeombooleanresult_booleanclippingresult_default.hxx"

#include "simgeombooleanresult_booleanresult_default.hxx"

#include "simgeomboundingbox_boundingbox_default.hxx"

#include "simgeomcsgprimative3d_csgprimative3d_block.hxx"

#include "simgeomcsgprimative3d_csgprimative3d_rectangularpyramid.hxx"

#include "simgeomcsgprimative3d_csgprimative3d_rightcircularcone.hxx"

#include "simgeomcsgprimative3d_csgprimative3d_rightcircularcylinder.hxx"

#include "simgeomcsgprimative3d_csgprimative3d_sphere.hxx"

#include "simgeomcurve_2dcompositecurve_default.hxx"

#include "simgeomcurve_boundedcurve_default.hxx"

#include "simgeomcurve_circle_default.hxx"

#include "simgeomcurve_compositecurve_default.hxx"

#include "simgeomcurve_compositecurvesegment_default.hxx"

#include "simgeomcurve_ellipse_default.hxx"

#include "simgeomcurve_line_default.hxx"

#include "simgeomcurve_offsetcurve2d_default.hxx"

#include "simgeomcurve_offsetcurve3d_default.hxx"

#include "simgeomcurve_polyline_default.hxx"

#include "simgeomcurve_trimmedcurve_default.hxx"

#include "simgeomhalfspacesolid_halfspacesolid_boxedhalfspace.hxx"

#include "simgeomhalfspacesolid_halfspacesolid_polygonalboundedhalfspace.hxx"

#include "simgeompoint_point_cartesianpoint.hxx"

#include "simgeompoint_point_pointoncurve.hxx"

#include "simgeompoint_point_pointonsurface.hxx"

#include "simgeomset_geometriccurveset_default.hxx"

#include "simgeomset_geometricset_default.hxx"

#include "simgeomsolidmodel_csgsolid_default.hxx"

#include "simgeomsolidmodel_facetedbrep_default.hxx"

#include "simgeomsolidmodel_facetedbrepwithvoids_default.hxx"

#include "simgeomsolidmodel_manifoldsolidbrep_default.hxx"

#include "simgeomsolidmodel_sweptareasolid_extrudedareasolid.hxx"

#include "simgeomsolidmodel_sweptareasolid_revolvedareasolid.hxx"

#include "simgeomsolidmodel_sweptdisksolid_default.hxx"

#include "simgeomsurface_boundedsurface_curveboundedplane.hxx"

#include "simgeomsurface_boundedsurface_default.hxx"

#include "simgeomsurface_boundedsurface_rectangulartrimmedsurface.hxx"

#include "simgeomsurface_default_default.hxx"

#include "simgeomsurface_elementarysurface_default.hxx"

#include "simgeomsurface_elementarysurface_plane.hxx"

#include "simgeomsurface_sweptsurface_default.hxx"

#include "simgeomsurface_sweptsurface_surfaceoflinearextrusion.hxx"

#include "simgeomsurface_sweptsurface_surfaceofrevolution.hxx"

#include "simgeomsurfacemodel_facebasedsurfacemodel_default.hxx"

#include "simgeomsurfacemodel_shellbasedsurfacemodel_default.hxx"

#include "simgeomvector_vector_default.hxx"

#include "simgeomvector_vector_direction.hxx"

#include "simglazingpanelparams_glazingpanel_glazing.hxx"

#include "simgridaxis_gridaxis_default.hxx"

#include "simgridplacement_gridplacement_default.hxx"

#include "simgroundheattransferbasement_basementtransfermodel_default.hxx"

#include "simgroundheattransferslab_slabtransfermodel_default.hxx"

#include "simgroup_bldgcompgroup_airterminal.hxx"

#include "simgroup_bldgcompgroup_coil.hxx"

#include "simgroup_bldgcompgroup_default.hxx"

#include "simgroup_bldgcompgroup_sensor.hxx"

#include "simgroup_bldgcompgroup_zonecontroller.hxx"

#include "simgroup_bldgcompgroup_zoneequipment.hxx"

#include "simgroup_bldgelementgroup_default.hxx"

#include "simgroup_buildinggroup_default.hxx"

#include "simgroup_connectorlist_airconnections.hxx"

#include "simgroup_connectorlist_chilledwaterconnections.hxx"

#include "simgroup_connectorlist_condenserconnections.hxx"

#include "simgroup_connectorlist_controllerconnections.hxx"

#include "simgroup_connectorlist_hotwaterconnections.hxx"

#include "simgroup_connectorlist_servicehotwaterconnections.hxx"

#include "simgroup_connectorlist_simconnections.hxx"

#include "simgroup_connectorlist_steamconnections.hxx"

#include "simgroup_controllerlist_default.hxx"

#include "simgroup_defaultgroup_default.hxx"

#include "simgroup_defaultlist_default.hxx"

#include "simgroup_equipmentlist_condenserequipment.hxx"

#include "simgroup_equipmentlist_electricalloadcenter.hxx"

#include "simgroup_equipmentlist_outdoorairsystem.hxx"

#include "simgroup_equipmentlist_outdoorairunit.hxx"

#include "simgroup_equipmentlist_plantequipment.hxx"

#include "simgroup_equipmentlist_refrigerationcompressor.hxx"

#include "simgroup_equipmentlist_refrigerationequipment.hxx"

#include "simgroup_equipmentlist_refrigerationloadtransfer.hxx"

#include "simgroup_equipmentlist_servicehotwater.hxx"

#include "simgroup_equipmentlist_zonehvac.hxx"

#include "simgroup_hvacdemandgroup_airsystem.hxx"

#include "simgroup_hvacdemandgroup_refrigerationsystem.hxx"

#include "simgroup_hvacdemandgroup_watersystem.hxx"

#include "simgroup_materiallist_default.hxx"

#include "simgroup_nodelist_default.hxx"

#include "simgroup_nodelist_outdoorair.hxx"

#include "simgroup_outputrequestlist_daylighting.hxx"

#include "simgroup_outputrequestlist_environmental.hxx"

#include "simgroup_outputrequestlist_fuel.hxx"

#include "simgroup_outputrequestlist_geometry.hxx"

#include "simgroup_outputrequestlist_meters.hxx"

#include "simgroup_outputrequestlist_reports.hxx"

#include "simgroup_outputrequestlist_variables.hxx"

#include "simgroup_refrigeration_chillerset.hxx"

#include "simgroup_schemelist_airloopavailabilitymgrscheme.hxx"

#include "simgroup_schemelist_airtempcontrolscheme.hxx"

#include "simgroup_schemelist_condenseroperatingscheme.hxx"

#include "simgroup_schemelist_demandmanagerscheme.hxx"

#include "simgroup_schemelist_multizonehumidityscheme.hxx"

#include "simgroup_schemelist_plantloopavailabilitymgrscheme.hxx"

#include "simgroup_schemelist_plantoperatingscheme.hxx"

#include "simgroup_schemelist_singlezonehumidityscheme.hxx"

#include "simgroup_schemelist_watertempcontrolscheme.hxx"

#include "simgroup_spatialzonegroup_daylighting.hxx"

#include "simgroup_spatialzonegroup_lighting.hxx"

#include "simgroup_spatialzonegroup_naturalventilation.hxx"

#include "simgroup_spatialzonegroup_plenumzonegroup.hxx"

#include "simgroup_spatialzonegroup_servicehotwater.hxx"

#include "simgroup_spatialzonegroup_zonegroup.hxx"

#include "simgroup_spatialzonegroup_zonehvacgroup.hxx"

#include "simgroup_surfacegroup_default.hxx"

#include "simgroup_surfacegroup_lowtempradiant.hxx"

#include "simgroup_surfacegroup_ventilatedslab.hxx"

#include "simgroup_templateoutputrequestlist_daylighting.hxx"

#include "simgroup_templateoutputrequestlist_fuelandenvironmental.hxx"

#include "simgroup_templateoutputrequestlist_geometry.hxx"

#include "simgroup_templateoutputrequestlist_meters.hxx"

#include "simgroup_templateoutputrequestlist_reports.hxx"

#include "simgroup_templateoutputrequestlist_variables.hxx"

#include "simgroup_vrflist_vrfterminals.hxx"

#include "simheattransalgprops_heattransferalgprops_default.hxx"

#include "siminfiltrationorventilation_default_default.hxx"

#include "siminfiltrationorventilation_roomairsettings_crossventilation.hxx"

#include "siminfiltrationorventilation_roomairsettings_onenodedisplacementventilation.hxx"

#include "siminfiltrationorventilation_roomairsettings_threenodedisplacementventilation.hxx"

#include "siminfiltrationorventilation_roomairsettings_underfloorairdistributionexterior.hxx"

#include "siminfiltrationorventilation_roomairsettings_underfloorairdistributioninterior.hxx"

#include "siminfiltrationorventilation_roomairsettings_userdefined.hxx"

#include "siminfiltrationorventilation_roomairtemppattern_constantgradient.hxx"

#include "siminfiltrationorventilation_roomairtemppattern_default.hxx"

#include "siminfiltrationorventilation_roomairtemppattern_nondimentionalheight.hxx"

#include "siminfiltrationorventilation_roomairtemppattern_surfacemapping.hxx"

#include "siminfiltrationorventilation_roomairtemppattern_twogradient.hxx"

#include "siminfiltrationorventilation_roomairtemppattern_userdefined.hxx"

#include "siminfiltrationorventilation_zoneinfiltration_designflowrate.hxx"

#include "siminfiltrationorventilation_zoneinfiltration_effectiveleakagearea.hxx"

#include "siminfiltrationorventilation_zoneinfiltration_flowcoefficient.hxx"

#include "siminfiltrationorventilation_zoneventilation_designflowrate.hxx"

#include "siminfiltrationorventilation_zoneventilation_windandstackopenarea.hxx"

#include "siminternalload_comfortviewfactorangles_default.hxx"

#include "siminternalload_default_default.hxx"

#include "siminternalload_equipment_electric.hxx"

#include "siminternalload_equipment_electric_elevators.hxx"

#include "siminternalload_equipment_electric_escalators.hxx"

#include "siminternalload_equipment_electric_process.hxx"

#include "siminternalload_equipment_gas.hxx"

#include "siminternalload_equipment_gas_process.hxx"

#include "siminternalload_equipment_hotwater.hxx"

#include "siminternalload_equipment_other.hxx"

#include "siminternalload_equipment_steam.hxx"

#include "siminternalload_equipment_zonebasebd_outdoortempcontrolled.hxx"

#include "siminternalload_lights_default.hxx"

#include "siminternalload_people_default.hxx"

#include "siminternalload_surfacecontaminantsourceandsink_genericcontaminantboudarylayerdiffusion.hxx"

#include "siminternalload_surfacecontaminantsourceandsink_genericcontaminantdepositionvelocitysink.hxx"

#include "siminternalload_surfacecontaminantsourceandsink_genericcontaminantpressuredriven.hxx"

#include "siminternalload_zonecontaminantsourceandsink_carbondioxide.hxx"

#include "siminternalload_zonecontaminantsourceandsink_genericcontaminantconstant.hxx"

#include "siminternalload_zonecontaminantsourceandsink_genericcontaminantcutoffmodel.hxx"

#include "siminternalload_zonecontaminantsourceandsink_genericcontaminantdecaysource.hxx"

#include "siminternalload_zonecontaminantsourceandsink_genericcontaminantdepositionratesink.hxx"

#include "simirregulartimeseries_irregular_default.hxx"

#include "simirregulartimeseriesvalue_timeseries_irregular.hxx"

#include "simlightingfixturetype_lightingfixture_default.hxx"

#include "simlist_connectorlist_airconnections.hxx"

#include "simlist_connectorlist_chilledwaterconnections.hxx"

#include "simlist_connectorlist_condenserconnections.hxx"

#include "simlist_connectorlist_controllerconnections.hxx"

#include "simlist_connectorlist_hotwaterconnections.hxx"

#include "simlist_connectorlist_servicehotwaterconnections.hxx"

#include "simlist_connectorlist_simconnections.hxx"

#include "simlist_connectorlist_steamconnections.hxx"

#include "simlist_controllerlist_default.hxx"

#include "simlist_defaultlist_default.hxx"

#include "simlist_equipmentlist_condenserequipment.hxx"

#include "simlist_equipmentlist_electricalloadcenter.hxx"

#include "simlist_equipmentlist_outdoorairsystem.hxx"

#include "simlist_equipmentlist_outdoorairunit.hxx"

#include "simlist_equipmentlist_plantequipment.hxx"

#include "simlist_equipmentlist_refrigerationcompressor.hxx"

#include "simlist_equipmentlist_refrigerationequipment.hxx"

#include "simlist_equipmentlist_refrigerationloadtransfer.hxx"

#include "simlist_equipmentlist_servicehotwater.hxx"

#include "simlist_equipmentlist_zonehvac.hxx"

#include "simlist_materiallist_default.hxx"

#include "simlist_nodelist_default.hxx"

#include "simlist_nodelist_outdoorair.hxx"

#include "simlist_outputrequestlist_daylighting.hxx"

#include "simlist_outputrequestlist_environmental.hxx"

#include "simlist_outputrequestlist_fuel.hxx"

#include "simlist_outputrequestlist_geometry.hxx"

#include "simlist_outputrequestlist_meters.hxx"

#include "simlist_outputrequestlist_reports.hxx"

#include "simlist_outputrequestlist_variables.hxx"

#include "simlist_refrigeration_chillerset.hxx"

#include "simlist_schemelist_airloopavailabilitymgrscheme.hxx"

#include "simlist_schemelist_airtempcontrolscheme.hxx"

#include "simlist_schemelist_condenseroperatingscheme.hxx"

#include "simlist_schemelist_demandmanagerscheme.hxx"

#include "simlist_schemelist_multizonehumidityscheme.hxx"

#include "simlist_schemelist_plantloopavailabilitymgrscheme.hxx"

#include "simlist_schemelist_plantoperatingscheme.hxx"

#include "simlist_schemelist_singlezonehumidityscheme.hxx"

#include "simlist_schemelist_watertempcontrolscheme.hxx"

#include "simlist_templateoutputrequestlist_daylighting.hxx"

#include "simlist_templateoutputrequestlist_fuelandenvironmental.hxx"

#include "simlist_templateoutputrequestlist_geometry.hxx"

#include "simlist_templateoutputrequestlist_meters.hxx"

#include "simlist_templateoutputrequestlist_reports.hxx"

#include "simlist_templateoutputrequestlist_variables.hxx"

#include "simlist_vrflist_vrfterminals.hxx"

#include "simlocalplacement_localplacement_absoluteplacement.hxx"

#include "simlocalplacement_localplacement_relativeplacement.hxx"

#include "simlocationandweather_designday_default.hxx"

#include "simlocationandweather_location_default.hxx"

#include "simlocationandweather_weatherfile_conditiontype.hxx"

#include "simlocationandweather_weatherfile_days.hxx"

#include "simlocationandweather_weatherfile_weatherstation.hxx"

#include "simlocationandweather_weatherproperty_skytemperature.hxx"

#include "simloop_loop_edgeloop.hxx"

#include "simloop_loop_polyloop.hxx"

#include "simloop_loop_vertexloop.hxx"

#include "simmappedrepresentationitem_default_default.hxx"

#include "simmaterial_default_default.hxx"

#include "simmaterial_equivglazingmaterial_blind.hxx"

#include "simmaterial_equivglazingmaterial_drape.hxx"

#include "simmaterial_equivglazingmaterial_gap.hxx"

#include "simmaterial_equivglazingmaterial_glazing.hxx"

#include "simmaterial_equivglazingmaterial_screen.hxx"

#include "simmaterial_equivglazingmaterial_shade.hxx"

#include "simmaterial_glazingmaterial_blind.hxx"

#include "simmaterial_glazingmaterial_complexshade.hxx"

#include "simmaterial_glazingmaterial_gap.hxx"

#include "simmaterial_glazingmaterial_gas.hxx"

#include "simmaterial_glazingmaterial_gasmixture.hxx"

#include "simmaterial_glazingmaterial_glazing.hxx"

#include "simmaterial_glazingmaterial_glazingrefractionextinctionmethod.hxx"

#include "simmaterial_glazingmaterial_screen.hxx"

#include "simmaterial_glazingmaterial_shade.hxx"

#include "simmaterial_glazingmaterial_simpleglazingsystem.hxx"

#include "simmaterial_glazingmaterial_thermochromic.hxx"

#include "simmaterial_opaquematerial_airgap.hxx"

#include "simmaterial_opaquematerial_composite.hxx"

#include "simmaterial_opaquematerial_default.hxx"

#include "simmaterial_opaquematerial_infraredtransparent.hxx"

#include "simmaterial_opaquematerial_insulation.hxx"

#include "simmaterial_opaquematerial_insulationmovable.hxx"

#include "simmaterial_opaquematerial_nomass.hxx"

#include "simmaterial_opaquematerial_vegetation.hxx"

#include "simmaterial_virtualboundary_default.hxx"

#include "simmateriallayer_equivglazinglayer_default.hxx"

#include "simmateriallayer_glazingmateriallayer_default.hxx"

#include "simmateriallayer_opaquemateriallayer_default.hxx"

#include "simmateriallayer_virtualboundarylayer_default.hxx"

#include "simmateriallayerset_default_default.hxx"

#include "simmateriallayerset_glazinglayerset_complexfenestrationstate.hxx"

#include "simmateriallayerset_glazinglayerset_curtainwall.hxx"

#include "simmateriallayerset_glazinglayerset_default.hxx"

#include "simmateriallayerset_glazinglayerset_glassdoor.hxx"

#include "simmateriallayerset_glazinglayerset_window.hxx"

#include "simmateriallayerset_glazinglayerset_windowdatafile.hxx"

#include "simmateriallayerset_glazinglayerset_windowequivalentlayer.hxx"

#include "simmateriallayerset_opaquelayerset_ceiling.hxx"

#include "simmateriallayerset_opaquelayerset_cfactorundergroundwall.hxx"

#include "simmateriallayerset_opaquelayerset_default.hxx"

#include "simmateriallayerset_opaquelayerset_door.hxx"

#include "simmateriallayerset_opaquelayerset_ffactorgroundfloor.hxx"

#include "simmateriallayerset_opaquelayerset_floor.hxx"

#include "simmateriallayerset_opaquelayerset_internalsource.hxx"

#include "simmateriallayerset_opaquelayerset_landing.hxx"

#include "simmateriallayerset_opaquelayerset_roof.hxx"

#include "simmateriallayerset_opaquelayerset_wall.hxx"

#include "simmeasuretype_areameasure_default.hxx"

#include "simmeasuretype_countmeasure_airchangesperhour.hxx"

#include "simmeasuretype_countmeasure_count.hxx"

#include "simmeasuretype_default_default.hxx"

#include "simmeasuretype_energymeasure_default.hxx"

#include "simmeasuretype_energymeasure_wattsperareameasure.hxx"

#include "simmeasuretype_energymeasure_wattsperperson.hxx"

#include "simmeasuretype_lengthmeasure_default.hxx"

#include "simmeasuretype_massmeasure_default.hxx"

#include "simmeasuretype_monetarymeasure_default.hxx"

#include "simmeasuretype_personsperareameasure_default.hxx"

#include "simmeasuretype_ratiomeasure_default.hxx"

#include "simmeasuretype_ratiomeasure_positiveratiomeasure.hxx"

#include "simmeasuretype_rotationalanglemeasure_compoundplaneanglemeasure.hxx"

#include "simmeasuretype_rotationalanglemeasure_degrees.hxx"

#include "simmeasuretype_thermodynamictemperaturemeasure_default.hxx"

#include "simmeasuretype_volumemeasure_default.hxx"

#include "simmeasuretype_volumetricflowratemeasure_m3persecond.hxx"

#include "simmeasuretype_volumetricflowratemeasure_m3persecondperperson.hxx"

#include "simmember_default_default.hxx"

#include "simmemberparams_member_default.hxx"

#include "simmemberprofileproperties_beam_default.hxx"

#include "simmemberprofileproperties_column_default.hxx"

#include "simmemberprofileproperties_default_default.hxx"

#include "simmodelrepresentationcontext_geometricrepresentationcontext_default.hxx"

#include "simmodelrepresentationcontext_geometricrepresentationsubcontext_default.hxx"

#include "simmodelrepresentationcontext_representationcontext_default.hxx"

#include "simnode_airflownetworknode_airdistributionnode.hxx"

#include "simnode_airflownetworknode_externalnode.hxx"

#include "simnode_airflownetworknode_zonenode.hxx"

#include "simnode_airflowport_air_in.hxx"

#include "simnode_airflowport_air_inorout.hxx"

#include "simnode_airflowport_air_out.hxx"

#include "simnode_airflowport_default.hxx"

#include "simnode_airflowport_exhaustair_out.hxx"

#include "simnode_airflowport_outdoorair_in.hxx"

#include "simnode_chilledwaterflowport_condensedwaterout.hxx"

#include "simnode_chilledwaterflowport_default.hxx"

#include "simnode_chilledwaterflowport_evaporativewaterin.hxx"

#include "simnode_chilledwaterflowport_water_in.hxx"

#include "simnode_chilledwaterflowport_water_inorout.hxx"

#include "simnode_chilledwaterflowport_water_out.hxx"

#include "simnode_condenserflowport_condenserflow_in.hxx"

#include "simnode_condenserflowport_condenserflow_inorout.hxx"

#include "simnode_condenserflowport_condenserflow_out.hxx"

#include "simnode_condenserflowport_default.hxx"

#include "simnode_daylightingreferencepoint_default.hxx"

#include "simnode_digitalcontrol_airloop_default.hxx"

#include "simnode_digitalcontrol_airloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_airloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_airloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_chwloop_default.hxx"

#include "simnode_digitalcontrol_chwloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_chwloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_chwloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_cwloop_default.hxx"

#include "simnode_digitalcontrol_cwloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_cwloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_cwloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_hwloop_default.hxx"

#include "simnode_digitalcontrol_hwloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_hwloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_hwloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_mxwloop_default.hxx"

#include "simnode_digitalcontrol_mxwloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_mxwloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_mxwloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_rfgloop_default.hxx"

#include "simnode_digitalcontrol_rfgloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_rfgloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_rfgloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_shwloop_default.hxx"

#include "simnode_digitalcontrol_shwloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_shwloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_shwloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_stmloop_default.hxx"

#include "simnode_digitalcontrol_stmloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_stmloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_stmloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrol_vrfloop_default.hxx"

#include "simnode_digitalcontrol_vrfloop_digitalsignal_in.hxx"

#include "simnode_digitalcontrol_vrfloop_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrol_vrfloop_digitalsignal_out.hxx"

#include "simnode_digitalcontrolport_default.hxx"

#include "simnode_digitalcontrolport_digitalsignal_in.hxx"

#include "simnode_digitalcontrolport_digitalsignal_inorout.hxx"

#include "simnode_digitalcontrolport_digitalsignal_out.hxx"

#include "simnode_digitalcontrolport_digitalvirtual.hxx"

#include "simnode_distributionport_default.hxx"

#include "simnode_docking_default.hxx"

#include "simnode_docking_thermalzone.hxx"

#include "simnode_electricalflowport_default.hxx"

#include "simnode_electricalflowport_electrical_in.hxx"

#include "simnode_electricalflowport_electrical_inorout.hxx"

#include "simnode_electricalflowport_electrical_out.hxx"

#include "simnode_hotwaterflowport_condensedwaterout.hxx"

#include "simnode_hotwaterflowport_default.hxx"

#include "simnode_hotwaterflowport_evaporativewaterin.hxx"

#include "simnode_hotwaterflowport_water_in.hxx"

#include "simnode_hotwaterflowport_water_inorout.hxx"

#include "simnode_hotwaterflowport_water_out.hxx"

#include "simnode_mixedwaterflowport_condensedwaterout.hxx"

#include "simnode_mixedwaterflowport_default.hxx"

#include "simnode_mixedwaterflowport_evaporativewaterin.hxx"

#include "simnode_mixedwaterflowport_water_in.hxx"

#include "simnode_mixedwaterflowport_water_inorout.hxx"

#include "simnode_mixedwaterflowport_water_out.hxx"

#include "simnode_node_default.hxx"

#include "simnode_node_outdoorair.hxx"

#include "simnode_port_default.hxx"

#include "simnode_refrigerationflowport_default.hxx"

#include "simnode_refrigerationflowport_refrigeration_in.hxx"

#include "simnode_refrigerationflowport_refrigeration_inorout.hxx"

#include "simnode_refrigerationflowport_refrigeration_out.hxx"

#include "simnode_servicehotwaterflowport_default.hxx"

#include "simnode_servicehotwaterflowport_water_in.hxx"

#include "simnode_servicehotwaterflowport_water_inorout.hxx"

#include "simnode_servicehotwaterflowport_water_out.hxx"

#include "simnode_setpointnode_default.hxx"

#include "simnode_steamflowport_default.hxx"

#include "simnode_steamflowport_steam_in.hxx"

#include "simnode_steamflowport_steam_inorout.hxx"

#include "simnode_steamflowport_steam_out.hxx"

#include "simnode_varrefrigerantflowport_default.hxx"

#include "simnode_varrefrigerantflowport_vrf_in.hxx"

#include "simnode_varrefrigerantflowport_vrf_inorout.hxx"

#include "simnode_varrefrigerantflowport_vrf_out.hxx"

#include "simnode_zoneairflowport_air_in.hxx"

#include "simnode_zoneairflowport_air_out.hxx"

#include "simnode_zoneairnode_default.hxx"

#include "simobjectoutputrequestset_default_default.hxx"

#include "simopeningtype_opening_default.hxx"

#include "simorganization_organization_default.hxx"

#include "simownerhistory_default_default.hxx"

#include "simpanel_default_default.hxx"

#include "simpanelarrayparams_panelarrayparams_default.hxx"

#include "simpanelarrayparams_solarshadearray_default.hxx"

#include "simpanelparams_glazingpanel_glazing.hxx"

#include "simpanelparams_panelparams_default.hxx"

#include "simpanelparams_shadepanel_solarshading.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_c_shape.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_circle.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_ellipse.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_hollowrectangle.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_i_shape.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_l_shape.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_rectangle.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_t_shape.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_u_shape.hxx"

#include "simparameterizedprofiledef_parameterizedprofile_z_shape.hxx"

#include "simperformancecurve_mathematical_bicubic.hxx"

#include "simperformancecurve_mathematical_biquadratic.hxx"

#include "simperformancecurve_mathematical_cubic.hxx"

#include "simperformancecurve_mathematical_doubleexponentialdecay.hxx"

#include "simperformancecurve_mathematical_exponent.hxx"

#include "simperformancecurve_mathematical_exponentialdecay.hxx"

#include "simperformancecurve_mathematical_exponentialskewnormal.hxx"

#include "simperformancecurve_mathematical_fanpressurerise.hxx"

#include "simperformancecurve_mathematical_linear.hxx"

#include "simperformancecurve_mathematical_quadlinear.hxx"

#include "simperformancecurve_mathematical_quadratic.hxx"

#include "simperformancecurve_mathematical_quadraticlinear.hxx"

#include "simperformancecurve_mathematical_quartic.hxx"

#include "simperformancecurve_mathematical_rectangularhyperbola1.hxx"

#include "simperformancecurve_mathematical_rectangularhyperbola2.hxx"

#include "simperformancecurve_mathematical_sigmoid.hxx"

#include "simperformancecurve_mathematical_triquadratic.hxx"

#include "simperformancecurve_relational_pressuredrop.hxx"

#include "simperformancetable_variable_multilookup.hxx"

#include "simperformancetable_variable_oneindependent.hxx"

#include "simperformancetable_variable_twoindependent.hxx"

#include "simperson_person_default.hxx"

#include "simpersonandorganization_personandorganization_architect.hxx"

#include "simpersonandorganization_personandorganization_default.hxx"

#include "simpersonandorganization_personandorganization_documentauthor.hxx"

#include "simpersonandorganization_personandorganization_energyconsultant.hxx"

#include "simpersonandorganization_personandorganization_engineer.hxx"

#include "simpersonandorganization_personandorganization_lightingdesigner.hxx"

#include "simpersonandorganization_personandorganization_owner.hxx"

#include "simplacement_axis1placement_default.hxx"

#include "simplacement_axis2placement2d_default.hxx"

#include "simplacement_axis2placement3d_default.hxx"

#include "simport_airflowport_air_in.hxx"

#include "simport_airflowport_air_inorout.hxx"

#include "simport_airflowport_air_out.hxx"

#include "simport_airflowport_default.hxx"

#include "simport_airflowport_exhaustair_out.hxx"

#include "simport_airflowport_outdoorair_in.hxx"

#include "simport_chilledwaterflowport_condensedwaterout.hxx"

#include "simport_chilledwaterflowport_default.hxx"

#include "simport_chilledwaterflowport_evaporativewaterin.hxx"

#include "simport_chilledwaterflowport_water_in.hxx"

#include "simport_chilledwaterflowport_water_inorout.hxx"

#include "simport_chilledwaterflowport_water_out.hxx"

#include "simport_condenserflowport_condenserflow_in.hxx"

#include "simport_condenserflowport_condenserflow_inorout.hxx"

#include "simport_condenserflowport_condenserflow_out.hxx"

#include "simport_condenserflowport_default.hxx"

#include "simport_digitalcontrol_airloop_default.hxx"

#include "simport_digitalcontrol_airloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_airloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_airloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_chwloop_default.hxx"

#include "simport_digitalcontrol_chwloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_chwloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_chwloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_cwloop_default.hxx"

#include "simport_digitalcontrol_cwloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_cwloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_cwloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_hwloop_default.hxx"

#include "simport_digitalcontrol_hwloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_hwloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_hwloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_mxwloop_default.hxx"

#include "simport_digitalcontrol_mxwloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_mxwloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_mxwloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_rfgloop_default.hxx"

#include "simport_digitalcontrol_rfgloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_rfgloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_rfgloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_shwloop_default.hxx"

#include "simport_digitalcontrol_shwloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_shwloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_shwloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_stmloop_default.hxx"

#include "simport_digitalcontrol_stmloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_stmloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_stmloop_digitalsignal_out.hxx"

#include "simport_digitalcontrol_vrfloop_default.hxx"

#include "simport_digitalcontrol_vrfloop_digitalsignal_in.hxx"

#include "simport_digitalcontrol_vrfloop_digitalsignal_inorout.hxx"

#include "simport_digitalcontrol_vrfloop_digitalsignal_out.hxx"

#include "simport_digitalcontrolport_default.hxx"

#include "simport_digitalcontrolport_digitalsignal_in.hxx"

#include "simport_digitalcontrolport_digitalsignal_inorout.hxx"

#include "simport_digitalcontrolport_digitalsignal_out.hxx"

#include "simport_digitalcontrolport_digitalvirtual.hxx"

#include "simport_distributionport_default.hxx"

#include "simport_docking_default.hxx"

#include "simport_docking_thermalzone.hxx"

#include "simport_electricalflowport_default.hxx"

#include "simport_electricalflowport_electrical_in.hxx"

#include "simport_electricalflowport_electrical_inorout.hxx"

#include "simport_electricalflowport_electrical_out.hxx"

#include "simport_hotwaterflowport_condensedwaterout.hxx"

#include "simport_hotwaterflowport_default.hxx"

#include "simport_hotwaterflowport_evaporativewaterin.hxx"

#include "simport_hotwaterflowport_water_in.hxx"

#include "simport_hotwaterflowport_water_inorout.hxx"

#include "simport_hotwaterflowport_water_out.hxx"

#include "simport_mixedwaterflowport_condensedwaterout.hxx"

#include "simport_mixedwaterflowport_default.hxx"

#include "simport_mixedwaterflowport_evaporativewaterin.hxx"

#include "simport_mixedwaterflowport_water_in.hxx"

#include "simport_mixedwaterflowport_water_inorout.hxx"

#include "simport_mixedwaterflowport_water_out.hxx"

#include "simport_port_default.hxx"

#include "simport_refrigerationflowport_default.hxx"

#include "simport_refrigerationflowport_refrigeration_in.hxx"

#include "simport_refrigerationflowport_refrigeration_inorout.hxx"

#include "simport_refrigerationflowport_refrigeration_out.hxx"

#include "simport_servicehotwaterflowport_default.hxx"

#include "simport_servicehotwaterflowport_water_in.hxx"

#include "simport_servicehotwaterflowport_water_inorout.hxx"

#include "simport_servicehotwaterflowport_water_out.hxx"

#include "simport_steamflowport_default.hxx"

#include "simport_steamflowport_steam_in.hxx"

#include "simport_steamflowport_steam_inorout.hxx"

#include "simport_steamflowport_steam_out.hxx"

#include "simport_varrefrigerantflowport_default.hxx"

#include "simport_varrefrigerantflowport_vrf_in.hxx"

#include "simport_varrefrigerantflowport_vrf_inorout.hxx"

#include "simport_varrefrigerantflowport_vrf_out.hxx"

#include "simport_zoneairflowport_air_in.hxx"

#include "simport_zoneairflowport_air_out.hxx"

#include "simpresentationlayerassignment_default_default.hxx"

#include "simprofileparams_member_default.hxx"

#include "simprofileparams_profileparams_default.hxx"

#include "simproject_project_backpack.hxx"

#include "simproject_project_designalternative.hxx"

#include "simproject_project_sbd_view.hxx"

#include "simproject_project_t24_view.hxx"

#include "simpropertylistvalue_simpleprop_listvalue.hxx"

#include "simpropertyset_propertyset_default.hxx"

#include "simpropertysinglevalue_simpleprop_singlevalue.hxx"

#include "simrailing_default_default.hxx"

#include "simrailing_guardrailing_default.hxx"

#include "simrailing_handrailing_default.hxx"

#include "simrailingparams_railing_default.hxx"

#include "simramp_ramp_default.hxx"

#include "simrampflight_default_default.hxx"

#include "simrampflightparams_rampflight_default.hxx"

#include "simrampparams_ramp_default.hxx"

#include "simrefrigerationsystemelement_compressor_default.hxx"

#include "simrefrigerationsystemelement_condenser_aircooled.hxx"

#include "simrefrigerationsystemelement_condenser_cascade.hxx"

#include "simrefrigerationsystemelement_condenser_evaporativecooled.hxx"

#include "simrefrigerationsystemelement_condenser_watercooled.hxx"

#include "simrefrigerationsystemelement_default_default.hxx"

#include "simrefrigerationsystemelement_gascooler_aircooled.hxx"

#include "simrefrigerationsystemelement_packagedcompressorrack_default.hxx"

#include "simrefrigerationsystemelement_refrigeratedcase_default.hxx"

#include "simrefrigerationsystemelement_refrigerationchiller_airchiller.hxx"

#include "simrefrigerationsystemelement_subcooler_default.hxx"

#include "simrefrigerationsystemelement_walkincooler_default.hxx"

#include "simregulartimeseries_regular_default.hxx"

#include "simrepresentationmap_representationmap_default.hxx"

#include "simresourceconsumption_exteriorconsumption_default.hxx"

#include "simresourceconsumption_exteriorconsumption_electricity.hxx"

#include "simresourceconsumption_exteriorconsumption_fuel.hxx"

#include "simresourceconsumption_exteriorconsumption_naturalgas.hxx"

#include "simresourceconsumption_exteriorconsumption_water.hxx"

#include "simresourceconsumption_interiorconsumption_default.hxx"

#include "simresultsguide_resultsguide_customtemplate.hxx"

#include "simresultsguide_resultsguide_default.hxx"

#include "simresultsguide_resultsguide_packagetemplate.hxx"

#include "simresultstextinfo_resultstextinfo_default.hxx"

#include "simresultsvariables_resultsvariables_default.hxx"

#include "simresultsview_resultsview_default.hxx"

#include "simresultsviewset_resultsviewset_default.hxx"

#include "simroof_roof_default.hxx"

#include "simsensor_airvelocitysensor_default.hxx"

#include "simsensor_default_default.hxx"

#include "simsensor_firesensor_default.hxx"

#include "simsensor_gassensor_co2sensor.hxx"

#include "simsensor_gassensor_smokesensor.hxx"

#include "simsensor_heatsensor_default.hxx"

#include "simsensor_luxsensor_default.hxx"

#include "simsensor_meter_airflowratemeter.hxx"

#include "simsensor_meter_fluidflowratemeter.hxx"

#include "simsensor_meter_hvaczonewaterusemeter.hxx"

#include "simsensor_movementsensor_default.hxx"

#include "simsensor_pressuresensor_default.hxx"

#include "simsensor_relativehumidity_type1.hxx"

#include "simsensor_relativehumidity_type2.hxx"

#include "simsensor_solarradiation_default.hxx"

#include "simsensor_soundsensor_default.hxx"

#include "simsensor_temperaturesensor_drybulb.hxx"

#include "simsensor_temperaturesensor_fluid.hxx"

#include "simsensor_temperaturesensor_radiant.hxx"

#include "simsensor_temperaturesensor_wetbulb.hxx"

#include "simsensor_virtualsensor_emssensor.hxx"

#include "simshaperepresentation_shaperepresentation_default.hxx"

#include "simsimpleproperty_simpleprop_default.hxx"

#include "simsimpleproperty_simpleprop_listvalue.hxx"

#include "simsimpleproperty_simpleprop_singlevalue.hxx"

#include "simsimulationconfiguration_simulationconfiguration_default.hxx"

#include "simsimulationconfiguration_standardsconfiguration_ashrae90_1.hxx"

#include "simsimulationconfiguration_standardsconfiguration_leed.hxx"

#include "simsimulationconfiguration_standardsconfiguration_sbdh.hxx"

#include "simsimulationconfiguration_standardsconfiguration_t24.hxx"

#include "simsimulationoutputformat_controlreportingtolerances_default.hxx"

#include "simsimulationoutputformat_controlsizingstyle_default.hxx"

#include "simsimulationoutputformat_controlsurfacecolorscheme_default.hxx"

#include "simsimulationoutputformat_controltablestyle_default.hxx"

#include "simsimulationoutputformat_default_default.hxx"

#include "simsimulationoutputformat_outputcontrolilluminancemapstyle_default.hxx"

#include "simsimulationoutputrequest_daylighting_daylightfactors.hxx"

#include "simsimulationoutputrequest_daylighting_reportreqilluminancemap.hxx"

#include "simsimulationoutputrequest_default_default.hxx"

#include "simsimulationoutputrequest_fuelandenvironmental_environmentalimpactfactors.hxx"

#include "simsimulationoutputrequest_fuelandenvironmental_fuelfactors.hxx"

#include "simsimulationoutputrequest_fuelandenvironmental_varreqenvironmentalimpactfactors.hxx"

#include "simsimulationoutputrequest_general_reportreqdebuggingdata.hxx"

#include "simsimulationoutputrequest_general_reportreqdiagnostics.hxx"

#include "simsimulationoutputrequest_general_reportreqenergymanagementsystem.hxx"

#include "simsimulationoutputrequest_general_reportreqpreprocessormessage.hxx"

#include "simsimulationoutputrequest_general_reportreqschedules.hxx"

#include "simsimulationoutputrequest_general_reportreqsqlite.hxx"

#include "simsimulationoutputrequest_general_reportreqvariabledictionary.hxx"

#include "simsimulationoutputrequest_geometry_reportreqconstructions.hxx"

#include "simsimulationoutputrequest_geometry_reportreqsurfacesdrawing.hxx"

#include "simsimulationoutputrequest_geometry_reportreqsurfaceslist.hxx"

#include "simsimulationoutputrequest_meters_energyendusecategory.hxx"

#include "simsimulationoutputrequest_meters_metercumulative.hxx"

#include "simsimulationoutputrequest_meters_metercumulativemeterfileonly.hxx"

#include "simsimulationoutputrequest_meters_meterfileonly.hxx"

#include "simsimulationoutputrequest_meters_varreqmeter.hxx"

#include "simsimulationoutputrequest_meters_varreqmetercustom.hxx"

#include "simsimulationoutputrequest_meters_varreqmetercustomdecrement.hxx"

#include "simsimulationoutputrequest_standardreports_tablemonthly.hxx"

#include "simsimulationoutputrequest_standardreports_tablesummaryreports.hxx"

#include "simsimulationoutputrequest_standardreports_tabletimebins.hxx"

#include "simsimulationoutputrequest_timeseriesvariables_energymgmtsystemmeteredoutputvariable.hxx"

#include "simsimulationoutputrequest_timeseriesvariables_energymgmtsystemoutputvariable.hxx"

#include "simsimulationoutputrequest_timeseriesvariables_varreqvariable.hxx"

#include "simsimulationparameters_algorithm_heatbalancealgorithm.hxx"

#include "simsimulationparameters_algorithm_surfaceconvectionalgorithminside.hxx"

#include "simsimulationparameters_algorithm_surfaceconvectionalgorithmoutside.hxx"

#include "simsimulationparameters_algorithm_zoneairheatbalancealgorithm.hxx"

#include "simsimulationparameters_convectioncoefficients_default.hxx"

#include "simsimulationparameters_convectioncoefficients_multiplesurfaces.hxx"

#include "simsimulationparameters_fluidproperties_concentration.hxx"

#include "simsimulationparameters_fluidproperties_glycolconcentrations.hxx"

#include "simsimulationparameters_fluidproperties_names.hxx"

#include "simsimulationparameters_fluidproperties_saturated.hxx"

#include "simsimulationparameters_fluidproperties_superheated.hxx"

#include "simsimulationparameters_fluidproperties_temperatures.hxx"

#include "simsimulationparameters_groundheattransfer_default.hxx"

#include "simsimulationparameters_hvacdesign_airloopsizing.hxx"

#include "simsimulationparameters_hvacdesign_outdoorairdesignspec.hxx"

#include "simsimulationparameters_hvacdesign_sizing.hxx"

#include "simsimulationparameters_hvacdesign_waterloopsizing.hxx"

#include "simsimulationparameters_hvacdesign_zoneairdistribution.hxx"

#include "simsimulationparameters_hvacdesign_zonesizing.hxx"

#include "simsimulationparameters_parametric_filenamesuffix.hxx"

#include "simsimulationparameters_parametric_logic.hxx"

#include "simsimulationparameters_parametric_runcontrol.hxx"

#include "simsimulationparameters_parametric_setvalueforrun.hxx"

#include "simsimulationparameters_simulationcontrol_daylightsavingtime.hxx"

#include "simsimulationparameters_simulationcontrol_default.hxx"

#include "simsimulationparameters_simulationcontrol_runperiod.hxx"

#include "simsimulationparameters_simulationcontrol_runperiodcustomrange.hxx"

#include "simsimulationparameters_simulationcontrol_specialdays.hxx"

#include "simsimulationparameters_sitewindpressure_winddirections.hxx"

#include "simsimulationparameters_sitewindpressure_windpressurevalues.hxx"

#include "simsimulationparameters_surfaceproperties_default.hxx"

#include "simsimulationparameters_surfaceproperties_vaporcoefficients.hxx"

#include "simsimulationrun_eplussimulation_default.hxx"

#include "simsimulationrun_standardsrun_ashrae90_1.hxx"

#include "simsimulationrun_standardsrun_leed.hxx"

#include "simsimulationrun_standardsrun_sbdh.hxx"

#include "simsimulationrun_standardsrun_t24.hxx"

#include "simsite_adjacentsite_default.hxx"

#include "simsite_buildingsite_default.hxx"

#include "simsiteassembly_siteassembly_exteriorequipmentwater.hxx"

#include "simsiteassembly_siteassembly_exteriorlighting.hxx"

#include "simsiteassembly_siteassembly_exteriorsignage.hxx"

#include "simsiteassembly_siteassembly_fuel.hxx"

#include "simsiteassembly_siteassembly_fuelcell.hxx"

#include "simsiteassembly_siteassembly_solarhotwater.hxx"

#include "simsiteassembly_siteassembly_solarphotovoltaic.hxx"

#include "simsiteassembly_siteassembly_water.hxx"

#include "simsiteassembly_siteassembly_windturbine.hxx"

#include "simsiunittype_siunit_default.hxx"

#include "simslab_ceiling_interzoneceiling.hxx"

#include "simslab_ceiling_interzoneceilingadiabatic.hxx"

#include "simslab_ceiling_interzoneceilingdetailed.hxx"

#include "simslab_default_default.hxx"

#include "simslab_floor_adiabatic.hxx"

#include "simslab_floor_flooroverair.hxx"

#include "simslab_floor_flooroverairdetailed.hxx"

#include "simslab_floor_flooroverearth.hxx"

#include "simslab_floor_flooroverearthdetailed.hxx"

#include "simslab_floor_interzonefloor.hxx"

#include "simslab_floor_interzonefloordetailed.hxx"

#include "simslab_floor_raisedfloor.hxx"

#include "simslab_landing_default.hxx"

#include "simslab_othersidecoefficients_default.hxx"

#include "simslab_othersidecoefficients_detailed.hxx"

#include "simslab_othersidecoefficients_detailedfloor.hxx"

#include "simslab_othersidecoefficients_detailedroofceiling.hxx"

#include "simslab_othersideconditionsmodel_default.hxx"

#include "simslab_othersideconditionsmodel_detailed.hxx"

#include "simslab_othersideconditionsmodel_detailedfloor.hxx"

#include "simslab_othersideconditionsmodel_detailedroofceiling.hxx"

#include "simslab_roofslab_roofunderair.hxx"

#include "simslab_roofslab_roofunderairdetailed.hxx"

#include "simslab_roofslab_roofunderearth.hxx"

#include "simslab_roofslab_roofunderearthdetailed.hxx"

#include "simslabparams_slab_ceiling.hxx"

#include "simslabparams_slab_floor.hxx"

#include "simslabparams_slab_landing.hxx"

#include "simslabparams_slab_roof.hxx"

#include "simslabtype_slab_ceiling.hxx"

#include "simslabtype_slab_default.hxx"

#include "simslabtype_slab_floor.hxx"

#include "simslabtype_slab_landing.hxx"

#include "simslabtype_slab_roof.hxx"

#include "simsoftwareapplication_default_default.hxx"

#include "simsolarobsparams_solarobstruction_default.hxx"

#include "simsolarshade_default_default.hxx"

#include "simsolarshade_fin_default.hxx"

#include "simsolarshade_fin_projection.hxx"

#include "simsolarshade_overhang_continuous.hxx"

#include "simsolarshade_overhang_default.hxx"

#include "simsolarshade_overhang_projection.hxx"

#include "simsolarshade_zonedetailed_default.hxx"

#include "simsolarshadearrayparams_solarshadearray_default.hxx"

#include "simsolarshadepanelparams_shadepanel_solarshading.hxx"

#include "simsolarshadetype_solarshade_default.hxx"

#include "simsolarshadetype_solarshade_leftfin.hxx"

#include "simsolarshadetype_solarshade_overhang.hxx"

#include "simsolarshadetype_solarshade_rightfin.hxx"

#include "simspace_occupied_default.hxx"

#include "simspace_unoccupied_ceilingplenum.hxx"

#include "simspace_unoccupied_ceilingvoid.hxx"

#include "simspace_unoccupied_default.hxx"

#include "simspace_unoccupied_floorplenum.hxx"

#include "simspace_unoccupied_floorvoid.hxx"

#include "simspace_unoccupied_plenum.hxx"

#include "simspaceboundary_ceiling_interzoneceiling.hxx"

#include "simspaceboundary_door_glazeddoor.hxx"

#include "simspaceboundary_door_opaquedoor.hxx"

#include "simspaceboundary_firstlevel_default.hxx"

#include "simspaceboundary_floor_flooroverair.hxx"

#include "simspaceboundary_floor_flooroverearth.hxx"

#include "simspaceboundary_floor_interzonefloor.hxx"

#include "simspaceboundary_roofslab_roofunderair.hxx"

#include "simspaceboundary_secondlevel_default.hxx"

#include "simspaceboundary_secondlevel_subtypea.hxx"

#include "simspaceboundary_secondlevel_subtypeb.hxx"

#include "simspaceboundary_secondlevel_subtypec.hxx"

#include "simspaceboundary_skylight_default.hxx"

#include "simspaceboundary_wall_exteriorabovegrade.hxx"

#include "simspaceboundary_wall_exteriorbelowgrade.hxx"

#include "simspaceboundary_wall_interior.hxx"

#include "simspaceboundary_window_exterior.hxx"

#include "simspaceoccupant_actor_spaceoccupant.hxx"

#include "simspaceparams_space_default.hxx"

#include "simspacetype_space_default.hxx"

#include "simspatialzone_outdoorair_default.hxx"

#include "simspatialzone_plenum_ceilingplenum.hxx"

#include "simspatialzone_plenum_default.hxx"

#include "simspatialzone_plenum_floorplenum.hxx"

#include "simspatialzone_securityzone_public.hxx"

#include "simspatialzone_securityzone_security.hxx"

#include "simspatialzone_securityzone_staffonly.hxx"

#include "simspatialzone_thermalzone_aboveceilingvoid.hxx"

#include "simspatialzone_thermalzone_belowfloorvoid.hxx"

#include "simspatialzone_thermalzone_default.hxx"

#include "simspatialzone_thermalzone_templateforzonegroup.hxx"

#include "simstair_stair_default.hxx"

#include "simstairflight_default_default.hxx"

#include "simstairflightparams_stairflight_default.hxx"

#include "simstairparams_stair_default.hxx"

#include "simsystem_airflownetwork_default.hxx"

#include "simsystem_electrical_systemscontainer.hxx"

#include "simsystem_electricallighting_fullsystem.hxx"

#include "simsystem_electricallighting_lightingcircuit.hxx"

#include "simsystem_electricalpower_fullsystem.hxx"

#include "simsystem_electromechanical_pv_solarthermal.hxx"

#include "simsystem_hvac_systemscontainer.hxx"

#include "simsystem_hvacair_airbranch.hxx"

#include "simsystem_hvacair_control.hxx"

#include "simsystem_hvacair_controldemand.hxx"

#include "simsystem_hvacair_controlsupply.hxx"

#include "simsystem_hvacair_demand.hxx"

#include "simsystem_hvacair_demandsidereturnpath.hxx"

#include "simsystem_hvacair_demandsidesupplypath.hxx"

#include "simsystem_hvacair_demandsidezonehvac.hxx"

#include "simsystem_hvacair_fullsystem.hxx"

#include "simsystem_hvacair_fullsystemdual.hxx"

#include "simsystem_hvacair_fullsystemtriple.hxx"

#include "simsystem_hvacair_outdoorair.hxx"

#include "simsystem_hvacair_outdoorairexhaust.hxx"

#include "simsystem_hvacair_outdoorairsupply.hxx"

#include "simsystem_hvacair_supply.hxx"

#include "simsystem_hvacair_supplysidereturnpath.hxx"

#include "simsystem_hvacair_supplysidesupplypath.hxx"

#include "simsystem_hvacchilledwater_control.hxx"

#include "simsystem_hvacchilledwater_controldemand.hxx"

#include "simsystem_hvacchilledwater_controlsupply.hxx"

#include "simsystem_hvacchilledwater_demand.hxx"

#include "simsystem_hvacchilledwater_demandsidedemandcomponents.hxx"

#include "simsystem_hvacchilledwater_demandsidereturnpath.hxx"

#include "simsystem_hvacchilledwater_demandsidesupplypath.hxx"

#include "simsystem_hvacchilledwater_fullsystem.hxx"

#include "simsystem_hvacchilledwater_supply.hxx"

#include "simsystem_hvacchilledwater_waterbranch.hxx"

#include "simsystem_hvaccondenser_condenserbranch.hxx"

#include "simsystem_hvaccondenser_control.hxx"

#include "simsystem_hvaccondenser_controldemand.hxx"

#include "simsystem_hvaccondenser_controlsupply.hxx"

#include "simsystem_hvaccondenser_demand.hxx"

#include "simsystem_hvaccondenser_demandsidedemandcomponents.hxx"

#include "simsystem_hvaccondenser_demandsidereturnpath.hxx"

#include "simsystem_hvaccondenser_demandsidesupplypath.hxx"

#include "simsystem_hvaccondenser_fullsystem.hxx"

#include "simsystem_hvaccondenser_supply.hxx"

#include "simsystem_hvachotwater_control.hxx"

#include "simsystem_hvachotwater_controldemand.hxx"

#include "simsystem_hvachotwater_controlsupply.hxx"

#include "simsystem_hvachotwater_demand.hxx"

#include "simsystem_hvachotwater_demandsidedemandcomponents.hxx"

#include "simsystem_hvachotwater_demandsidereturnpath.hxx"

#include "simsystem_hvachotwater_demandsidesupplypath.hxx"

#include "simsystem_hvachotwater_fullsystem.hxx"

#include "simsystem_hvachotwater_supply.hxx"

#include "simsystem_hvachotwater_waterbranch.hxx"

#include "simsystem_hvacmixedwater_control.hxx"

#include "simsystem_hvacmixedwater_controldemand.hxx"

#include "simsystem_hvacmixedwater_controlsupply.hxx"

#include "simsystem_hvacmixedwater_demand.hxx"

#include "simsystem_hvacmixedwater_demandsidedemandcomponents.hxx"

#include "simsystem_hvacmixedwater_demandsidereturnpath.hxx"

#include "simsystem_hvacmixedwater_demandsidesupplypath.hxx"

#include "simsystem_hvacmixedwater_fullsystem.hxx"

#include "simsystem_hvacmixedwater_supply.hxx"

#include "simsystem_hvacmixedwater_waterbranch.hxx"

#include "simsystem_hvacsteam_control.hxx"

#include "simsystem_hvacsteam_controldemand.hxx"

#include "simsystem_hvacsteam_controlsupply.hxx"

#include "simsystem_hvacsteam_demand.hxx"

#include "simsystem_hvacsteam_demandsidedemandcomponents.hxx"

#include "simsystem_hvacsteam_demandsidereturnpath.hxx"

#include "simsystem_hvacsteam_demandsidesupplypath.hxx"

#include "simsystem_hvacsteam_fullsystem.hxx"

#include "simsystem_hvacsteam_steambranch.hxx"

#include "simsystem_hvacsteam_supply.hxx"

#include "simsystem_mechanical_systemscontainer.hxx"

#include "simsystem_plumbing_coldwater.hxx"

#include "simsystem_plumbing_graywater.hxx"

#include "simsystem_plumbing_hotwater.hxx"

#include "simsystem_plumbing_potablewater.hxx"

#include "simsystem_plumbing_systemscontainer.hxx"

#include "simsystem_plumbing_undergroundpipingcircuit.hxx"

#include "simsystem_plumbing_wastewater.hxx"

#include "simsystem_plumbing_waterusesystem.hxx"

#include "simsystem_plumbing_waterusewell.hxx"

#include "simsystem_refrigerationprimary_control.hxx"

#include "simsystem_refrigerationprimary_demand.hxx"

#include "simsystem_refrigerationprimary_fullsystem.hxx"

#include "simsystem_refrigerationprimary_supply.hxx"

#include "simsystem_refrigerationsecondary_control.hxx"

#include "simsystem_refrigerationsecondary_demand.hxx"

#include "simsystem_refrigerationsecondary_fullsystem.hxx"

#include "simsystem_refrigerationsecondary_supply.hxx"

#include "simsystem_refrigerationtranscritical_control.hxx"

#include "simsystem_refrigerationtranscritical_demand.hxx"

#include "simsystem_refrigerationtranscritical_fullsystem.hxx"

#include "simsystem_refrigerationtranscritical_supply.hxx"

#include "simsystem_servicehotwater_control.hxx"

#include "simsystem_servicehotwater_demand.hxx"

#include "simsystem_servicehotwater_fullsystem.hxx"

#include "simsystem_servicehotwater_supply.hxx"

#include "simsystem_servicehotwater_waterbranch.hxx"

#include "simsystem_sitepowerdemand_electricityconsuming.hxx"

#include "simsystem_sitepowerdemand_fuelconsuming.hxx"

#include "simsystem_sitepowerdemand_waterconsuming.hxx"

#include "simsystem_sitepowergeneration_other.hxx"

#include "simsystem_sitepowergeneration_photovoltaic.hxx"

#include "simsystem_sitepowergeneration_windturbine.hxx"

#include "simsystem_transport_elevator.hxx"

#include "simsystem_transport_escalator.hxx"

#include "simsystem_transport_movingwalkway.hxx"

#include "simsystem_transport_systemscontainer.hxx"

#include "simsystem_variablerefrigerantflow_control.hxx"

#include "simsystem_variablerefrigerantflow_demand.hxx"

#include "simsystem_variablerefrigerantflow_fullsystem.hxx"

#include "simsystem_variablerefrigerantflow_supply.hxx"

#include "simsystem_zonehvacgroup_control.hxx"

#include "simsystem_zonehvacgroup_controldemand.hxx"

#include "simsystem_zonehvacgroup_controlsupply.hxx"

#include "simsystem_zonehvacgroup_demand.hxx"

#include "simsystem_zonehvacgroup_demandsidereturnpath.hxx"

#include "simsystem_zonehvacgroup_demandsidesupplypath.hxx"

#include "simsystem_zonehvacgroup_demandsidezonehvac.hxx"

#include "simsystem_zonehvacgroup_fullsystem.hxx"

#include "simsystem_zonehvacgroup_supply.hxx"

#include "simsystem_zoneshwgroup_demand.hxx"

#include "simsystem_zoneshwgroup_fullsystem.hxx"

#include "simsystem_zoneshwgroup_supply.hxx"

#include "simtemplateconstructions_constructions_default.hxx"

#include "simtemplatedaylighting_daylighting_default.hxx"

#include "simtemplatedaylighting_daylighting_skylights.hxx"

#include "simtemplatedaylighting_daylighting_windows.hxx"

#include "simtemplatehvaczoneequipment_hvaczoneequipment_default.hxx"

#include "simtemplateinteriorlighting_interiorlighting_default.hxx"

#include "simtemplatelocation_location_default.hxx"

#include "simtemplatenaturalventilation_naturalventilation_default.hxx"

#include "simtemplateoutputformatset_outputformatset_default.hxx"

#include "simtemplateoutputrequestset_outputrequestset_default.hxx"

#include "simtemplatesimulationparameters_simulationparameters_default.hxx"

#include "simtemplatezoneconditions_zoneconditions_default.hxx"

#include "simtemplatezoneloads_zoneloads_default.hxx"

#include "simtimeseriesschedule_calendar_configuration.hxx"

#include "simtimeseriesschedule_calendar_default.hxx"

#include "simtimeseriesschedule_calendar_specialdays.hxx"

#include "simtimeseriesschedule_compact_default.hxx"

#include "simtimeseriesschedule_constant_default.hxx"

#include "simtimeseriesschedule_day_hourly.hxx"

#include "simtimeseriesschedule_day_interval.hxx"

#include "simtimeseriesschedule_day_list.hxx"

#include "simtimeseriesschedule_file_default.hxx"

#include "simtimeseriesschedule_limits_default.hxx"

#include "simtimeseriesschedule_timeseries_default.hxx"

#include "simtimeseriesschedule_week_compact.hxx"

#include "simtimeseriesschedule_week_daily.hxx"

#include "simtimeseriesschedule_year_default.hxx"

#include "simtimeseriesvalue_timeseries_irregular.hxx"

#include "simtimeseriesvalue_timeseries_regular.hxx"

#include "simtoplogicalrepresentation_topologicalrepresentation_default.hxx"

#include "simtransportsysassembly_transportsysassembly_default.hxx"

#include "simtransportsysassembly_transportsysassembly_elevator.hxx"

#include "simtransportsysassembly_transportsysassembly_escalator.hxx"

#include "simtransportsysassembly_transportsysassembly_movingwalkway.hxx"

#include "simvalidationresultsair_airloop_default.hxx"

#include "simvalidationresultsbldg_building_default.hxx"

#include "simvalidationresultsrefrig_rfgloop_default.hxx"

#include "simvalidationresultsvrf_vrfloop_default.hxx"

#include "simvalidationresultswater_chwloop_default.hxx"

#include "simvalidationresultswater_cwloop_default.hxx"

#include "simvalidationresultswater_hwloop_default.hxx"

#include "simvalidationresultswater_mxwloop_default.hxx"

#include "simvalidationresultswater_shwloop_default.hxx"

#include "simvalidationresultswater_stmloop_default.hxx"

#include "simvalidationresultszonehvac_zonehvac_default.hxx"

#include "simventilationassembly_ventilationassembly_cooltower_shower.hxx"

#include "simventilationassembly_ventilationassembly_earthtube.hxx"

#include "simventilationassembly_ventilationassembly_exteriornaturallyventilatedcavity.hxx"

#include "simventilationassembly_ventilationassembly_refrigerationdoor.hxx"

#include "simventilationassembly_ventilationassembly_thermalchimney.hxx"

#include "simvertex_vertex_point.hxx"

#include "simvirtualelement_default_default.hxx"

#include "simvirtualelement_slab_ceiling.hxx"

#include "simvirtualelement_slab_default.hxx"

#include "simvirtualelement_slab_floor.hxx"

#include "simvirtualelement_slab_openingfiller.hxx"

#include "simvirtualelement_wall_default.hxx"

#include "simvirtualelement_wall_openingfiller.hxx"

#include "simvirtualgridintersection_virtualgridintersection_default.hxx"

#include "simwall_othersidecoefficients_default.hxx"

#include "simwall_othersidecoefficients_detailed.hxx"

#include "simwall_othersidecoefficients_detailedfloor.hxx"

#include "simwall_othersidecoefficients_detailedroofceiling.hxx"

#include "simwall_othersideconditionsmodel_default.hxx"

#include "simwall_othersideconditionsmodel_detailed.hxx"

#include "simwall_othersideconditionsmodel_detailedfloor.hxx"

#include "simwall_othersideconditionsmodel_detailedroofceiling.hxx"

#include "simwall_wall_adiabatic.hxx"

#include "simwall_wall_default.hxx"

#include "simwall_wall_exteriorabovegrade.hxx"

#include "simwall_wall_exteriorabovegradedetailed.hxx"

#include "simwall_wall_exteriorabovegradestandard.hxx"

#include "simwall_wall_exteriorbelowgrade.hxx"

#include "simwall_wall_exteriorbelowgradedetailed.hxx"

#include "simwall_wall_exteriorbelowgradestandard.hxx"

#include "simwall_wall_interior.hxx"

#include "simwall_wall_interiordetailed.hxx"

#include "simwall_wall_interiorstandard.hxx"

#include "simwall_wall_openingfiller.hxx"

#include "simwallparams_wall_default.hxx"

#include "simwalltype_wall_default.hxx"

#include "simwindow_complexfenestration_thermochromic.hxx"

#include "simwindow_skylight_exterior.hxx"

#include "simwindow_skylight_exteriordetailed.hxx"

#include "simwindow_window_default.hxx"

#include "simwindow_window_exterior.hxx"

#include "simwindow_window_exteriordetailed.hxx"

#include "simwindow_window_interior.hxx"

#include "simwindowarrayparams_windowarray_default.hxx"

#include "simwindowliningprops_windowliningprops_default.hxx"

#include "simwindowpanelprops_windowpanelprops_default.hxx"

#include "simwindowparams_window_default.hxx"

#include "simwindowtype_window_default.hxx"

namespace schema
{
  namespace simxml
  {
    namespace Model
    {
      // SimModel
      // 

      const SimModel::SimActor_Actor_Default_sequence& SimModel::
      SimActor_Actor_Default () const
      {
        return this->SimActor_Actor_Default_;
      }

      SimModel::SimActor_Actor_Default_sequence& SimModel::
      SimActor_Actor_Default ()
      {
        return this->SimActor_Actor_Default_;
      }

      void SimModel::
      SimActor_Actor_Default (const SimActor_Actor_Default_sequence& s)
      {
        this->SimActor_Actor_Default_ = s;
      }

      const SimModel::SimActor_Actor_SpaceOccupant_sequence& SimModel::
      SimActor_Actor_SpaceOccupant () const
      {
        return this->SimActor_Actor_SpaceOccupant_;
      }

      SimModel::SimActor_Actor_SpaceOccupant_sequence& SimModel::
      SimActor_Actor_SpaceOccupant ()
      {
        return this->SimActor_Actor_SpaceOccupant_;
      }

      void SimModel::
      SimActor_Actor_SpaceOccupant (const SimActor_Actor_SpaceOccupant_sequence& s)
      {
        this->SimActor_Actor_SpaceOccupant_ = s;
      }

      const SimModel::SimActuator_DamperActuator_Default_sequence& SimModel::
      SimActuator_DamperActuator_Default () const
      {
        return this->SimActuator_DamperActuator_Default_;
      }

      SimModel::SimActuator_DamperActuator_Default_sequence& SimModel::
      SimActuator_DamperActuator_Default ()
      {
        return this->SimActuator_DamperActuator_Default_;
      }

      void SimModel::
      SimActuator_DamperActuator_Default (const SimActuator_DamperActuator_Default_sequence& s)
      {
        this->SimActuator_DamperActuator_Default_ = s;
      }

      const SimModel::SimActuator_Default_Default_sequence& SimModel::
      SimActuator_Default_Default () const
      {
        return this->SimActuator_Default_Default_;
      }

      SimModel::SimActuator_Default_Default_sequence& SimModel::
      SimActuator_Default_Default ()
      {
        return this->SimActuator_Default_Default_;
      }

      void SimModel::
      SimActuator_Default_Default (const SimActuator_Default_Default_sequence& s)
      {
        this->SimActuator_Default_Default_ = s;
      }

      const SimModel::SimActuator_ElectricalRotor_Default_sequence& SimModel::
      SimActuator_ElectricalRotor_Default () const
      {
        return this->SimActuator_ElectricalRotor_Default_;
      }

      SimModel::SimActuator_ElectricalRotor_Default_sequence& SimModel::
      SimActuator_ElectricalRotor_Default ()
      {
        return this->SimActuator_ElectricalRotor_Default_;
      }

      void SimModel::
      SimActuator_ElectricalRotor_Default (const SimActuator_ElectricalRotor_Default_sequence& s)
      {
        this->SimActuator_ElectricalRotor_Default_ = s;
      }

      const SimModel::SimActuator_ValveActuator_Default_sequence& SimModel::
      SimActuator_ValveActuator_Default () const
      {
        return this->SimActuator_ValveActuator_Default_;
      }

      SimModel::SimActuator_ValveActuator_Default_sequence& SimModel::
      SimActuator_ValveActuator_Default ()
      {
        return this->SimActuator_ValveActuator_Default_;
      }

      void SimModel::
      SimActuator_ValveActuator_Default (const SimActuator_ValveActuator_Default_sequence& s)
      {
        this->SimActuator_ValveActuator_Default_ = s;
      }

      const SimModel::SimActuator_VirtualActuator_EmsActuator_sequence& SimModel::
      SimActuator_VirtualActuator_EmsActuator () const
      {
        return this->SimActuator_VirtualActuator_EmsActuator_;
      }

      SimModel::SimActuator_VirtualActuator_EmsActuator_sequence& SimModel::
      SimActuator_VirtualActuator_EmsActuator ()
      {
        return this->SimActuator_VirtualActuator_EmsActuator_;
      }

      void SimModel::
      SimActuator_VirtualActuator_EmsActuator (const SimActuator_VirtualActuator_EmsActuator_sequence& s)
      {
        this->SimActuator_VirtualActuator_EmsActuator_ = s;
      }

      const SimModel::SimAddress_Postal_Default_sequence& SimModel::
      SimAddress_Postal_Default () const
      {
        return this->SimAddress_Postal_Default_;
      }

      SimModel::SimAddress_Postal_Default_sequence& SimModel::
      SimAddress_Postal_Default ()
      {
        return this->SimAddress_Postal_Default_;
      }

      void SimModel::
      SimAddress_Postal_Default (const SimAddress_Postal_Default_sequence& s)
      {
        this->SimAddress_Postal_Default_ = s;
      }

      const SimModel::SimAddress_Telecom_Default_sequence& SimModel::
      SimAddress_Telecom_Default () const
      {
        return this->SimAddress_Telecom_Default_;
      }

      SimModel::SimAddress_Telecom_Default_sequence& SimModel::
      SimAddress_Telecom_Default ()
      {
        return this->SimAddress_Telecom_Default_;
      }

      void SimModel::
      SimAddress_Telecom_Default (const SimAddress_Telecom_Default_sequence& s)
      {
        this->SimAddress_Telecom_Default_ = s;
      }

      const SimModel::SimAdjacentSiteParams_AdjacentSite_Default_sequence& SimModel::
      SimAdjacentSiteParams_AdjacentSite_Default () const
      {
        return this->SimAdjacentSiteParams_AdjacentSite_Default_;
      }

      SimModel::SimAdjacentSiteParams_AdjacentSite_Default_sequence& SimModel::
      SimAdjacentSiteParams_AdjacentSite_Default ()
      {
        return this->SimAdjacentSiteParams_AdjacentSite_Default_;
      }

      void SimModel::
      SimAdjacentSiteParams_AdjacentSite_Default (const SimAdjacentSiteParams_AdjacentSite_Default_sequence& s)
      {
        this->SimAdjacentSiteParams_AdjacentSite_Default_ = s;
      }

      const SimModel::SimAnalyticalRepresentation_AnalyticalRepresentation_Default_sequence& SimModel::
      SimAnalyticalRepresentation_AnalyticalRepresentation_Default () const
      {
        return this->SimAnalyticalRepresentation_AnalyticalRepresentation_Default_;
      }

      SimModel::SimAnalyticalRepresentation_AnalyticalRepresentation_Default_sequence& SimModel::
      SimAnalyticalRepresentation_AnalyticalRepresentation_Default ()
      {
        return this->SimAnalyticalRepresentation_AnalyticalRepresentation_Default_;
      }

      void SimModel::
      SimAnalyticalRepresentation_AnalyticalRepresentation_Default (const SimAnalyticalRepresentation_AnalyticalRepresentation_Default_sequence& s)
      {
        this->SimAnalyticalRepresentation_AnalyticalRepresentation_Default_ = s;
      }

      const SimModel::SimAppLanguageDefault_AppLanguageDefault_Default_sequence& SimModel::
      SimAppLanguageDefault_AppLanguageDefault_Default () const
      {
        return this->SimAppLanguageDefault_AppLanguageDefault_Default_;
      }

      SimModel::SimAppLanguageDefault_AppLanguageDefault_Default_sequence& SimModel::
      SimAppLanguageDefault_AppLanguageDefault_Default ()
      {
        return this->SimAppLanguageDefault_AppLanguageDefault_Default_;
      }

      void SimModel::
      SimAppLanguageDefault_AppLanguageDefault_Default (const SimAppLanguageDefault_AppLanguageDefault_Default_sequence& s)
      {
        this->SimAppLanguageDefault_AppLanguageDefault_Default_ = s;
      }

      const SimModel::SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_sequence& SimModel::
      SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary () const
      {
        return this->SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_;
      }

      SimModel::SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_sequence& SimModel::
      SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary ()
      {
        return this->SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_;
      }

      void SimModel::
      SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary (const SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_sequence& s)
      {
        this->SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_ = s;
      }

      const SimModel::SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_sequence& SimModel::
      SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary () const
      {
        return this->SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_;
      }

      SimModel::SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_sequence& SimModel::
      SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary ()
      {
        return this->SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_;
      }

      void SimModel::
      SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary (const SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_sequence& s)
      {
        this->SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_ = s;
      }

      const SimModel::SimAppLibraryDefault_AppLibraryDefault_UserLibrary_sequence& SimModel::
      SimAppLibraryDefault_AppLibraryDefault_UserLibrary () const
      {
        return this->SimAppLibraryDefault_AppLibraryDefault_UserLibrary_;
      }

      SimModel::SimAppLibraryDefault_AppLibraryDefault_UserLibrary_sequence& SimModel::
      SimAppLibraryDefault_AppLibraryDefault_UserLibrary ()
      {
        return this->SimAppLibraryDefault_AppLibraryDefault_UserLibrary_;
      }

      void SimModel::
      SimAppLibraryDefault_AppLibraryDefault_UserLibrary (const SimAppLibraryDefault_AppLibraryDefault_UserLibrary_sequence& s)
      {
        this->SimAppLibraryDefault_AppLibraryDefault_UserLibrary_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_ = s;
      }

      const SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site () const
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_;
      }

      SimModel::SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_sequence& SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site ()
      {
        return this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_;
      }

      void SimModel::
      SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site (const SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_sequence& s)
      {
        this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_ = s;
      }

      const SimModel::SimAppObjNameDefault_BldgComponentGroup_HvacComponent_sequence& SimModel::
      SimAppObjNameDefault_BldgComponentGroup_HvacComponent () const
      {
        return this->SimAppObjNameDefault_BldgComponentGroup_HvacComponent_;
      }

      SimModel::SimAppObjNameDefault_BldgComponentGroup_HvacComponent_sequence& SimModel::
      SimAppObjNameDefault_BldgComponentGroup_HvacComponent ()
      {
        return this->SimAppObjNameDefault_BldgComponentGroup_HvacComponent_;
      }

      void SimModel::
      SimAppObjNameDefault_BldgComponentGroup_HvacComponent (const SimAppObjNameDefault_BldgComponentGroup_HvacComponent_sequence& s)
      {
        this->SimAppObjNameDefault_BldgComponentGroup_HvacComponent_ = s;
      }

      const SimModel::SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_sequence& SimModel::
      SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup () const
      {
        return this->SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_;
      }

      SimModel::SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_sequence& SimModel::
      SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup ()
      {
        return this->SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup (const SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_sequence& s)
      {
        this->SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_Default_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_Default () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_Default_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_Default_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_Default ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_Default_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_Default (const SimAppObjNameDefault_DistributionSystem_Default_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_Default_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_HvacAirLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacAirLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacAirLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_HvacAirLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacAirLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacAirLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacAirLoop (const SimAppObjNameDefault_DistributionSystem_HvacAirLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_HvacAirLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop (const SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop (const SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop (const SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacSteamLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacSteamLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_HvacSteamLoop (const SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_MixedWaterLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_MixedWaterLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_MixedWaterLoop (const SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_RefrigerationLoop () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_RefrigerationLoop ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_RefrigerationLoop (const SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_ServiceHotWater_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_ServiceHotWater () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_ServiceHotWater_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_ServiceHotWater_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_ServiceHotWater ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_ServiceHotWater_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_ServiceHotWater (const SimAppObjNameDefault_DistributionSystem_ServiceHotWater_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_ServiceHotWater_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_SitePowerDemand_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_SitePowerDemand () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_SitePowerDemand_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_SitePowerDemand_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_SitePowerDemand ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_SitePowerDemand_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_SitePowerDemand (const SimAppObjNameDefault_DistributionSystem_SitePowerDemand_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_SitePowerDemand_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_SitePowerGeneration () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_SitePowerGeneration ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_SitePowerGeneration (const SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_ = s;
      }

      const SimModel::SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow () const
      {
        return this->SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_;
      }

      SimModel::SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_sequence& SimModel::
      SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow ()
      {
        return this->SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_;
      }

      void SimModel::
      SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow (const SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_sequence& s)
      {
        this->SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_ = s;
      }

      const SimModel::SimAppObjNameDefault_OtherSystem_Default_sequence& SimModel::
      SimAppObjNameDefault_OtherSystem_Default () const
      {
        return this->SimAppObjNameDefault_OtherSystem_Default_;
      }

      SimModel::SimAppObjNameDefault_OtherSystem_Default_sequence& SimModel::
      SimAppObjNameDefault_OtherSystem_Default ()
      {
        return this->SimAppObjNameDefault_OtherSystem_Default_;
      }

      void SimModel::
      SimAppObjNameDefault_OtherSystem_Default (const SimAppObjNameDefault_OtherSystem_Default_sequence& s)
      {
        this->SimAppObjNameDefault_OtherSystem_Default_ = s;
      }

      const SimModel::SimAppObjNameDefault_SiteContext_AdjacentSite_sequence& SimModel::
      SimAppObjNameDefault_SiteContext_AdjacentSite () const
      {
        return this->SimAppObjNameDefault_SiteContext_AdjacentSite_;
      }

      SimModel::SimAppObjNameDefault_SiteContext_AdjacentSite_sequence& SimModel::
      SimAppObjNameDefault_SiteContext_AdjacentSite ()
      {
        return this->SimAppObjNameDefault_SiteContext_AdjacentSite_;
      }

      void SimModel::
      SimAppObjNameDefault_SiteContext_AdjacentSite (const SimAppObjNameDefault_SiteContext_AdjacentSite_sequence& s)
      {
        this->SimAppObjNameDefault_SiteContext_AdjacentSite_ = s;
      }

      const SimModel::SimAppObjNameDefault_SiteContext_SolarObstruction_sequence& SimModel::
      SimAppObjNameDefault_SiteContext_SolarObstruction () const
      {
        return this->SimAppObjNameDefault_SiteContext_SolarObstruction_;
      }

      SimModel::SimAppObjNameDefault_SiteContext_SolarObstruction_sequence& SimModel::
      SimAppObjNameDefault_SiteContext_SolarObstruction ()
      {
        return this->SimAppObjNameDefault_SiteContext_SolarObstruction_;
      }

      void SimModel::
      SimAppObjNameDefault_SiteContext_SolarObstruction (const SimAppObjNameDefault_SiteContext_SolarObstruction_sequence& s)
      {
        this->SimAppObjNameDefault_SiteContext_SolarObstruction_ = s;
      }

      const SimModel::SimAppObjNameDefault_Space_CeilingPlenum_sequence& SimModel::
      SimAppObjNameDefault_Space_CeilingPlenum () const
      {
        return this->SimAppObjNameDefault_Space_CeilingPlenum_;
      }

      SimModel::SimAppObjNameDefault_Space_CeilingPlenum_sequence& SimModel::
      SimAppObjNameDefault_Space_CeilingPlenum ()
      {
        return this->SimAppObjNameDefault_Space_CeilingPlenum_;
      }

      void SimModel::
      SimAppObjNameDefault_Space_CeilingPlenum (const SimAppObjNameDefault_Space_CeilingPlenum_sequence& s)
      {
        this->SimAppObjNameDefault_Space_CeilingPlenum_ = s;
      }

      const SimModel::SimAppObjNameDefault_Space_FloorPlenum_sequence& SimModel::
      SimAppObjNameDefault_Space_FloorPlenum () const
      {
        return this->SimAppObjNameDefault_Space_FloorPlenum_;
      }

      SimModel::SimAppObjNameDefault_Space_FloorPlenum_sequence& SimModel::
      SimAppObjNameDefault_Space_FloorPlenum ()
      {
        return this->SimAppObjNameDefault_Space_FloorPlenum_;
      }

      void SimModel::
      SimAppObjNameDefault_Space_FloorPlenum (const SimAppObjNameDefault_Space_FloorPlenum_sequence& s)
      {
        this->SimAppObjNameDefault_Space_FloorPlenum_ = s;
      }

      const SimModel::SimAppObjNameDefault_Space_Space_sequence& SimModel::
      SimAppObjNameDefault_Space_Space () const
      {
        return this->SimAppObjNameDefault_Space_Space_;
      }

      SimModel::SimAppObjNameDefault_Space_Space_sequence& SimModel::
      SimAppObjNameDefault_Space_Space ()
      {
        return this->SimAppObjNameDefault_Space_Space_;
      }

      void SimModel::
      SimAppObjNameDefault_Space_Space (const SimAppObjNameDefault_Space_Space_sequence& s)
      {
        this->SimAppObjNameDefault_Space_Space_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialContainer_Building_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_Building () const
      {
        return this->SimAppObjNameDefault_SpatialContainer_Building_;
      }

      SimModel::SimAppObjNameDefault_SpatialContainer_Building_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_Building ()
      {
        return this->SimAppObjNameDefault_SpatialContainer_Building_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialContainer_Building (const SimAppObjNameDefault_SpatialContainer_Building_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialContainer_Building_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialContainer_BuildingStory_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_BuildingStory () const
      {
        return this->SimAppObjNameDefault_SpatialContainer_BuildingStory_;
      }

      SimModel::SimAppObjNameDefault_SpatialContainer_BuildingStory_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_BuildingStory ()
      {
        return this->SimAppObjNameDefault_SpatialContainer_BuildingStory_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialContainer_BuildingStory (const SimAppObjNameDefault_SpatialContainer_BuildingStory_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialContainer_BuildingStory_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialContainer_Project_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_Project () const
      {
        return this->SimAppObjNameDefault_SpatialContainer_Project_;
      }

      SimModel::SimAppObjNameDefault_SpatialContainer_Project_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_Project ()
      {
        return this->SimAppObjNameDefault_SpatialContainer_Project_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialContainer_Project (const SimAppObjNameDefault_SpatialContainer_Project_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialContainer_Project_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialContainer_Site_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_Site () const
      {
        return this->SimAppObjNameDefault_SpatialContainer_Site_;
      }

      SimModel::SimAppObjNameDefault_SpatialContainer_Site_sequence& SimModel::
      SimAppObjNameDefault_SpatialContainer_Site ()
      {
        return this->SimAppObjNameDefault_SpatialContainer_Site_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialContainer_Site (const SimAppObjNameDefault_SpatialContainer_Site_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialContainer_Site_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_CeilingPlenumZone () const
      {
        return this->SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_;
      }

      SimModel::SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_CeilingPlenumZone ()
      {
        return this->SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialZone_CeilingPlenumZone (const SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialZone_FloorPlenumZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_FloorPlenumZone () const
      {
        return this->SimAppObjNameDefault_SpatialZone_FloorPlenumZone_;
      }

      SimModel::SimAppObjNameDefault_SpatialZone_FloorPlenumZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_FloorPlenumZone ()
      {
        return this->SimAppObjNameDefault_SpatialZone_FloorPlenumZone_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialZone_FloorPlenumZone (const SimAppObjNameDefault_SpatialZone_FloorPlenumZone_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialZone_FloorPlenumZone_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialZone_PlenumZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_PlenumZone () const
      {
        return this->SimAppObjNameDefault_SpatialZone_PlenumZone_;
      }

      SimModel::SimAppObjNameDefault_SpatialZone_PlenumZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_PlenumZone ()
      {
        return this->SimAppObjNameDefault_SpatialZone_PlenumZone_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialZone_PlenumZone (const SimAppObjNameDefault_SpatialZone_PlenumZone_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialZone_PlenumZone_ = s;
      }

      const SimModel::SimAppObjNameDefault_SpatialZone_ThermalZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_ThermalZone () const
      {
        return this->SimAppObjNameDefault_SpatialZone_ThermalZone_;
      }

      SimModel::SimAppObjNameDefault_SpatialZone_ThermalZone_sequence& SimModel::
      SimAppObjNameDefault_SpatialZone_ThermalZone ()
      {
        return this->SimAppObjNameDefault_SpatialZone_ThermalZone_;
      }

      void SimModel::
      SimAppObjNameDefault_SpatialZone_ThermalZone (const SimAppObjNameDefault_SpatialZone_ThermalZone_sequence& s)
      {
        this->SimAppObjNameDefault_SpatialZone_ThermalZone_ = s;
      }

      const SimModel::SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup () const
      {
        return this->SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_;
      }

      SimModel::SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup ()
      {
        return this->SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup (const SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_sequence& s)
      {
        this->SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_ = s;
      }

      const SimModel::SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup () const
      {
        return this->SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_;
      }

      SimModel::SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup ()
      {
        return this->SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup (const SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_sequence& s)
      {
        this->SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_ = s;
      }

      const SimModel::SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup () const
      {
        return this->SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_;
      }

      SimModel::SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup ()
      {
        return this->SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup (const SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_sequence& s)
      {
        this->SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_ = s;
      }

      const SimModel::SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup () const
      {
        return this->SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_;
      }

      SimModel::SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup ()
      {
        return this->SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup (const SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_sequence& s)
      {
        this->SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_ = s;
      }

      const SimModel::SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup () const
      {
        return this->SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_;
      }

      SimModel::SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup ()
      {
        return this->SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup (const SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_sequence& s)
      {
        this->SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_ = s;
      }

      const SimModel::SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup () const
      {
        return this->SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_;
      }

      SimModel::SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_sequence& SimModel::
      SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup ()
      {
        return this->SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_;
      }

      void SimModel::
      SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup (const SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_sequence& s)
      {
        this->SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_ = s;
      }

      const SimModel::SimAppPreferences_AppPreferences_AutoSave_sequence& SimModel::
      SimAppPreferences_AppPreferences_AutoSave () const
      {
        return this->SimAppPreferences_AppPreferences_AutoSave_;
      }

      SimModel::SimAppPreferences_AppPreferences_AutoSave_sequence& SimModel::
      SimAppPreferences_AppPreferences_AutoSave ()
      {
        return this->SimAppPreferences_AppPreferences_AutoSave_;
      }

      void SimModel::
      SimAppPreferences_AppPreferences_AutoSave (const SimAppPreferences_AppPreferences_AutoSave_sequence& s)
      {
        this->SimAppPreferences_AppPreferences_AutoSave_ = s;
      }

      const SimModel::SimAppPreferences_AppPreferences_AutoSaveInterval_sequence& SimModel::
      SimAppPreferences_AppPreferences_AutoSaveInterval () const
      {
        return this->SimAppPreferences_AppPreferences_AutoSaveInterval_;
      }

      SimModel::SimAppPreferences_AppPreferences_AutoSaveInterval_sequence& SimModel::
      SimAppPreferences_AppPreferences_AutoSaveInterval ()
      {
        return this->SimAppPreferences_AppPreferences_AutoSaveInterval_;
      }

      void SimModel::
      SimAppPreferences_AppPreferences_AutoSaveInterval (const SimAppPreferences_AppPreferences_AutoSaveInterval_sequence& s)
      {
        this->SimAppPreferences_AppPreferences_AutoSaveInterval_ = s;
      }

      const SimModel::SimAppPreferences_AppPreferences_EPlusInstalPath_sequence& SimModel::
      SimAppPreferences_AppPreferences_EPlusInstalPath () const
      {
        return this->SimAppPreferences_AppPreferences_EPlusInstalPath_;
      }

      SimModel::SimAppPreferences_AppPreferences_EPlusInstalPath_sequence& SimModel::
      SimAppPreferences_AppPreferences_EPlusInstalPath ()
      {
        return this->SimAppPreferences_AppPreferences_EPlusInstalPath_;
      }

      void SimModel::
      SimAppPreferences_AppPreferences_EPlusInstalPath (const SimAppPreferences_AppPreferences_EPlusInstalPath_sequence& s)
      {
        this->SimAppPreferences_AppPreferences_EPlusInstalPath_ = s;
      }

      const SimModel::SimAppPreferences_AppPreferences_EPlusInstalVersion_sequence& SimModel::
      SimAppPreferences_AppPreferences_EPlusInstalVersion () const
      {
        return this->SimAppPreferences_AppPreferences_EPlusInstalVersion_;
      }

      SimModel::SimAppPreferences_AppPreferences_EPlusInstalVersion_sequence& SimModel::
      SimAppPreferences_AppPreferences_EPlusInstalVersion ()
      {
        return this->SimAppPreferences_AppPreferences_EPlusInstalVersion_;
      }

      void SimModel::
      SimAppPreferences_AppPreferences_EPlusInstalVersion (const SimAppPreferences_AppPreferences_EPlusInstalVersion_sequence& s)
      {
        this->SimAppPreferences_AppPreferences_EPlusInstalVersion_ = s;
      }

      const SimModel::SimAppPreferences_AppPreferences_MinMonthlyChargeType_sequence& SimModel::
      SimAppPreferences_AppPreferences_MinMonthlyChargeType () const
      {
        return this->SimAppPreferences_AppPreferences_MinMonthlyChargeType_;
      }

      SimModel::SimAppPreferences_AppPreferences_MinMonthlyChargeType_sequence& SimModel::
      SimAppPreferences_AppPreferences_MinMonthlyChargeType ()
      {
        return this->SimAppPreferences_AppPreferences_MinMonthlyChargeType_;
      }

      void SimModel::
      SimAppPreferences_AppPreferences_MinMonthlyChargeType (const SimAppPreferences_AppPreferences_MinMonthlyChargeType_sequence& s)
      {
        this->SimAppPreferences_AppPreferences_MinMonthlyChargeType_ = s;
      }

      const SimModel::SimAppPreferences_AppPreferences_MonthlyChargeType_sequence& SimModel::
      SimAppPreferences_AppPreferences_MonthlyChargeType () const
      {
        return this->SimAppPreferences_AppPreferences_MonthlyChargeType_;
      }

      SimModel::SimAppPreferences_AppPreferences_MonthlyChargeType_sequence& SimModel::
      SimAppPreferences_AppPreferences_MonthlyChargeType ()
      {
        return this->SimAppPreferences_AppPreferences_MonthlyChargeType_;
      }

      void SimModel::
      SimAppPreferences_AppPreferences_MonthlyChargeType (const SimAppPreferences_AppPreferences_MonthlyChargeType_sequence& s)
      {
        this->SimAppPreferences_AppPreferences_MonthlyChargeType_ = s;
      }

      const SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam () const
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_;
      }

      SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam ()
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_;
      }

      void SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam (const SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_sequence& s)
      {
        this->SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_ = s;
      }

      const SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions () const
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_;
      }

      SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions ()
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_;
      }

      void SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions (const SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_sequence& s)
      {
        this->SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_ = s;
      }

      const SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis () const
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_;
      }

      SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis ()
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_;
      }

      void SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis (const SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_sequence& s)
      {
        this->SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_ = s;
      }

      const SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData () const
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_;
      }

      SimModel::SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_sequence& SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData ()
      {
        return this->SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_;
      }

      void SimModel::
      SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData (const SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_sequence& s)
      {
        this->SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_ = s;
      }

      const SimModel::SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam () const
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_;
      }

      SimModel::SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam ()
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_;
      }

      void SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam (const SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_sequence& s)
      {
        this->SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_ = s;
      }

      const SimModel::SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions () const
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_;
      }

      SimModel::SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions ()
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_;
      }

      void SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions (const SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_sequence& s)
      {
        this->SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_ = s;
      }

      const SimModel::SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis () const
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_;
      }

      SimModel::SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis ()
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_;
      }

      void SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis (const SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_sequence& s)
      {
        this->SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_ = s;
      }

      const SimModel::SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_ProjectData () const
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_;
      }

      SimModel::SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_sequence& SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_ProjectData ()
      {
        return this->SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_;
      }

      void SimModel::
      SimAppStdT24Defaults_AppStdT24Defaults_ProjectData (const SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_sequence& s)
      {
        this->SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_ = s;
      }

      const SimModel::SimAppUnitDefault_AppUnitDefault_DatabaseDefault_sequence& SimModel::
      SimAppUnitDefault_AppUnitDefault_DatabaseDefault () const
      {
        return this->SimAppUnitDefault_AppUnitDefault_DatabaseDefault_;
      }

      SimModel::SimAppUnitDefault_AppUnitDefault_DatabaseDefault_sequence& SimModel::
      SimAppUnitDefault_AppUnitDefault_DatabaseDefault ()
      {
        return this->SimAppUnitDefault_AppUnitDefault_DatabaseDefault_;
      }

      void SimModel::
      SimAppUnitDefault_AppUnitDefault_DatabaseDefault (const SimAppUnitDefault_AppUnitDefault_DatabaseDefault_sequence& s)
      {
        this->SimAppUnitDefault_AppUnitDefault_DatabaseDefault_ = s;
      }

      const SimModel::SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_sequence& SimModel::
      SimAppUnitDefault_AppUnitDefault_UserDisplayPreference () const
      {
        return this->SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_;
      }

      SimModel::SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_sequence& SimModel::
      SimAppUnitDefault_AppUnitDefault_UserDisplayPreference ()
      {
        return this->SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_;
      }

      void SimModel::
      SimAppUnitDefault_AppUnitDefault_UserDisplayPreference (const SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_sequence& s)
      {
        this->SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_ = s;
      }

      const SimModel::SimArbitraryProfileDef_ArbitraryProfile_Closed_sequence& SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_Closed () const
      {
        return this->SimArbitraryProfileDef_ArbitraryProfile_Closed_;
      }

      SimModel::SimArbitraryProfileDef_ArbitraryProfile_Closed_sequence& SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_Closed ()
      {
        return this->SimArbitraryProfileDef_ArbitraryProfile_Closed_;
      }

      void SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_Closed (const SimArbitraryProfileDef_ArbitraryProfile_Closed_sequence& s)
      {
        this->SimArbitraryProfileDef_ArbitraryProfile_Closed_ = s;
      }

      const SimModel::SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_sequence& SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids () const
      {
        return this->SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_;
      }

      SimModel::SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_sequence& SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids ()
      {
        return this->SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_;
      }

      void SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids (const SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_sequence& s)
      {
        this->SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_ = s;
      }

      const SimModel::SimArbitraryProfileDef_ArbitraryProfile_Open_sequence& SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_Open () const
      {
        return this->SimArbitraryProfileDef_ArbitraryProfile_Open_;
      }

      SimModel::SimArbitraryProfileDef_ArbitraryProfile_Open_sequence& SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_Open ()
      {
        return this->SimArbitraryProfileDef_ArbitraryProfile_Open_;
      }

      void SimModel::
      SimArbitraryProfileDef_ArbitraryProfile_Open (const SimArbitraryProfileDef_ArbitraryProfile_Open_sequence& s)
      {
        this->SimArbitraryProfileDef_ArbitraryProfile_Open_ = s;
      }

      const SimModel::SimArrayParams_ArrayParams_Default_sequence& SimModel::
      SimArrayParams_ArrayParams_Default () const
      {
        return this->SimArrayParams_ArrayParams_Default_;
      }

      SimModel::SimArrayParams_ArrayParams_Default_sequence& SimModel::
      SimArrayParams_ArrayParams_Default ()
      {
        return this->SimArrayParams_ArrayParams_Default_;
      }

      void SimModel::
      SimArrayParams_ArrayParams_Default (const SimArrayParams_ArrayParams_Default_sequence& s)
      {
        this->SimArrayParams_ArrayParams_Default_ = s;
      }

      const SimModel::SimArrayParams_BldgElementArray_Beam_sequence& SimModel::
      SimArrayParams_BldgElementArray_Beam () const
      {
        return this->SimArrayParams_BldgElementArray_Beam_;
      }

      SimModel::SimArrayParams_BldgElementArray_Beam_sequence& SimModel::
      SimArrayParams_BldgElementArray_Beam ()
      {
        return this->SimArrayParams_BldgElementArray_Beam_;
      }

      void SimModel::
      SimArrayParams_BldgElementArray_Beam (const SimArrayParams_BldgElementArray_Beam_sequence& s)
      {
        this->SimArrayParams_BldgElementArray_Beam_ = s;
      }

      const SimModel::SimArrayParams_BldgElementArray_Column_sequence& SimModel::
      SimArrayParams_BldgElementArray_Column () const
      {
        return this->SimArrayParams_BldgElementArray_Column_;
      }

      SimModel::SimArrayParams_BldgElementArray_Column_sequence& SimModel::
      SimArrayParams_BldgElementArray_Column ()
      {
        return this->SimArrayParams_BldgElementArray_Column_;
      }

      void SimModel::
      SimArrayParams_BldgElementArray_Column (const SimArrayParams_BldgElementArray_Column_sequence& s)
      {
        this->SimArrayParams_BldgElementArray_Column_ = s;
      }

      const SimModel::SimArrayParams_BldgElementArray_Default_sequence& SimModel::
      SimArrayParams_BldgElementArray_Default () const
      {
        return this->SimArrayParams_BldgElementArray_Default_;
      }

      SimModel::SimArrayParams_BldgElementArray_Default_sequence& SimModel::
      SimArrayParams_BldgElementArray_Default ()
      {
        return this->SimArrayParams_BldgElementArray_Default_;
      }

      void SimModel::
      SimArrayParams_BldgElementArray_Default (const SimArrayParams_BldgElementArray_Default_sequence& s)
      {
        this->SimArrayParams_BldgElementArray_Default_ = s;
      }

      const SimModel::SimArrayParams_DoorArray_Default_sequence& SimModel::
      SimArrayParams_DoorArray_Default () const
      {
        return this->SimArrayParams_DoorArray_Default_;
      }

      SimModel::SimArrayParams_DoorArray_Default_sequence& SimModel::
      SimArrayParams_DoorArray_Default ()
      {
        return this->SimArrayParams_DoorArray_Default_;
      }

      void SimModel::
      SimArrayParams_DoorArray_Default (const SimArrayParams_DoorArray_Default_sequence& s)
      {
        this->SimArrayParams_DoorArray_Default_ = s;
      }

      const SimModel::SimArrayParams_PanelArrayParams_Default_sequence& SimModel::
      SimArrayParams_PanelArrayParams_Default () const
      {
        return this->SimArrayParams_PanelArrayParams_Default_;
      }

      SimModel::SimArrayParams_PanelArrayParams_Default_sequence& SimModel::
      SimArrayParams_PanelArrayParams_Default ()
      {
        return this->SimArrayParams_PanelArrayParams_Default_;
      }

      void SimModel::
      SimArrayParams_PanelArrayParams_Default (const SimArrayParams_PanelArrayParams_Default_sequence& s)
      {
        this->SimArrayParams_PanelArrayParams_Default_ = s;
      }

      const SimModel::SimArrayParams_SolarShadeArray_Default_sequence& SimModel::
      SimArrayParams_SolarShadeArray_Default () const
      {
        return this->SimArrayParams_SolarShadeArray_Default_;
      }

      SimModel::SimArrayParams_SolarShadeArray_Default_sequence& SimModel::
      SimArrayParams_SolarShadeArray_Default ()
      {
        return this->SimArrayParams_SolarShadeArray_Default_;
      }

      void SimModel::
      SimArrayParams_SolarShadeArray_Default (const SimArrayParams_SolarShadeArray_Default_sequence& s)
      {
        this->SimArrayParams_SolarShadeArray_Default_ = s;
      }

      const SimModel::SimArrayParams_WindowArray_Default_sequence& SimModel::
      SimArrayParams_WindowArray_Default () const
      {
        return this->SimArrayParams_WindowArray_Default_;
      }

      SimModel::SimArrayParams_WindowArray_Default_sequence& SimModel::
      SimArrayParams_WindowArray_Default ()
      {
        return this->SimArrayParams_WindowArray_Default_;
      }

      void SimModel::
      SimArrayParams_WindowArray_Default (const SimArrayParams_WindowArray_Default_sequence& s)
      {
        this->SimArrayParams_WindowArray_Default_ = s;
      }

      const SimModel::SimBeam_Default_Default_sequence& SimModel::
      SimBeam_Default_Default () const
      {
        return this->SimBeam_Default_Default_;
      }

      SimModel::SimBeam_Default_Default_sequence& SimModel::
      SimBeam_Default_Default ()
      {
        return this->SimBeam_Default_Default_;
      }

      void SimModel::
      SimBeam_Default_Default (const SimBeam_Default_Default_sequence& s)
      {
        this->SimBeam_Default_Default_ = s;
      }

      const SimModel::SimBeamParams_Beam_Default_sequence& SimModel::
      SimBeamParams_Beam_Default () const
      {
        return this->SimBeamParams_Beam_Default_;
      }

      SimModel::SimBeamParams_Beam_Default_sequence& SimModel::
      SimBeamParams_Beam_Default ()
      {
        return this->SimBeamParams_Beam_Default_;
      }

      void SimModel::
      SimBeamParams_Beam_Default (const SimBeamParams_Beam_Default_sequence& s)
      {
        this->SimBeamParams_Beam_Default_ = s;
      }

      const SimModel::SimBeamType_Beam_Default_sequence& SimModel::
      SimBeamType_Beam_Default () const
      {
        return this->SimBeamType_Beam_Default_;
      }

      SimModel::SimBeamType_Beam_Default_sequence& SimModel::
      SimBeamType_Beam_Default ()
      {
        return this->SimBeamType_Beam_Default_;
      }

      void SimModel::
      SimBeamType_Beam_Default (const SimBeamType_Beam_Default_sequence& s)
      {
        this->SimBeamType_Beam_Default_ = s;
      }

      const SimModel::SimBldgElementArrayParams_BldgElementArray_Beam_sequence& SimModel::
      SimBldgElementArrayParams_BldgElementArray_Beam () const
      {
        return this->SimBldgElementArrayParams_BldgElementArray_Beam_;
      }

      SimModel::SimBldgElementArrayParams_BldgElementArray_Beam_sequence& SimModel::
      SimBldgElementArrayParams_BldgElementArray_Beam ()
      {
        return this->SimBldgElementArrayParams_BldgElementArray_Beam_;
      }

      void SimModel::
      SimBldgElementArrayParams_BldgElementArray_Beam (const SimBldgElementArrayParams_BldgElementArray_Beam_sequence& s)
      {
        this->SimBldgElementArrayParams_BldgElementArray_Beam_ = s;
      }

      const SimModel::SimBldgElementArrayParams_BldgElementArray_Column_sequence& SimModel::
      SimBldgElementArrayParams_BldgElementArray_Column () const
      {
        return this->SimBldgElementArrayParams_BldgElementArray_Column_;
      }

      SimModel::SimBldgElementArrayParams_BldgElementArray_Column_sequence& SimModel::
      SimBldgElementArrayParams_BldgElementArray_Column ()
      {
        return this->SimBldgElementArrayParams_BldgElementArray_Column_;
      }

      void SimModel::
      SimBldgElementArrayParams_BldgElementArray_Column (const SimBldgElementArrayParams_BldgElementArray_Column_sequence& s)
      {
        this->SimBldgElementArrayParams_BldgElementArray_Column_ = s;
      }

      const SimModel::SimBldgElementArrayParams_BldgElementArray_Default_sequence& SimModel::
      SimBldgElementArrayParams_BldgElementArray_Default () const
      {
        return this->SimBldgElementArrayParams_BldgElementArray_Default_;
      }

      SimModel::SimBldgElementArrayParams_BldgElementArray_Default_sequence& SimModel::
      SimBldgElementArrayParams_BldgElementArray_Default ()
      {
        return this->SimBldgElementArrayParams_BldgElementArray_Default_;
      }

      void SimModel::
      SimBldgElementArrayParams_BldgElementArray_Default (const SimBldgElementArrayParams_BldgElementArray_Default_sequence& s)
      {
        this->SimBldgElementArrayParams_BldgElementArray_Default_ = s;
      }

      const SimModel::SimBldgElementType_BldgElementProxy_Default_sequence& SimModel::
      SimBldgElementType_BldgElementProxy_Default () const
      {
        return this->SimBldgElementType_BldgElementProxy_Default_;
      }

      SimModel::SimBldgElementType_BldgElementProxy_Default_sequence& SimModel::
      SimBldgElementType_BldgElementProxy_Default ()
      {
        return this->SimBldgElementType_BldgElementProxy_Default_;
      }

      void SimModel::
      SimBldgElementType_BldgElementProxy_Default (const SimBldgElementType_BldgElementProxy_Default_sequence& s)
      {
        this->SimBldgElementType_BldgElementProxy_Default_ = s;
      }

      const SimModel::SimBldgElementType_Default_Default_sequence& SimModel::
      SimBldgElementType_Default_Default () const
      {
        return this->SimBldgElementType_Default_Default_;
      }

      SimModel::SimBldgElementType_Default_Default_sequence& SimModel::
      SimBldgElementType_Default_Default ()
      {
        return this->SimBldgElementType_Default_Default_;
      }

      void SimModel::
      SimBldgElementType_Default_Default (const SimBldgElementType_Default_Default_sequence& s)
      {
        this->SimBldgElementType_Default_Default_ = s;
      }

      const SimModel::SimBldgElementType_ElectricalTerminal_Default_sequence& SimModel::
      SimBldgElementType_ElectricalTerminal_Default () const
      {
        return this->SimBldgElementType_ElectricalTerminal_Default_;
      }

      SimModel::SimBldgElementType_ElectricalTerminal_Default_sequence& SimModel::
      SimBldgElementType_ElectricalTerminal_Default ()
      {
        return this->SimBldgElementType_ElectricalTerminal_Default_;
      }

      void SimModel::
      SimBldgElementType_ElectricalTerminal_Default (const SimBldgElementType_ElectricalTerminal_Default_sequence& s)
      {
        this->SimBldgElementType_ElectricalTerminal_Default_ = s;
      }

      const SimModel::SimBldgElementType_HumanTransport_Default_sequence& SimModel::
      SimBldgElementType_HumanTransport_Default () const
      {
        return this->SimBldgElementType_HumanTransport_Default_;
      }

      SimModel::SimBldgElementType_HumanTransport_Default_sequence& SimModel::
      SimBldgElementType_HumanTransport_Default ()
      {
        return this->SimBldgElementType_HumanTransport_Default_;
      }

      void SimModel::
      SimBldgElementType_HumanTransport_Default (const SimBldgElementType_HumanTransport_Default_sequence& s)
      {
        this->SimBldgElementType_HumanTransport_Default_ = s;
      }

      const SimModel::SimBldgElementType_PlumbingFixture_Default_sequence& SimModel::
      SimBldgElementType_PlumbingFixture_Default () const
      {
        return this->SimBldgElementType_PlumbingFixture_Default_;
      }

      SimModel::SimBldgElementType_PlumbingFixture_Default_sequence& SimModel::
      SimBldgElementType_PlumbingFixture_Default ()
      {
        return this->SimBldgElementType_PlumbingFixture_Default_;
      }

      void SimModel::
      SimBldgElementType_PlumbingFixture_Default (const SimBldgElementType_PlumbingFixture_Default_sequence& s)
      {
        this->SimBldgElementType_PlumbingFixture_Default_ = s;
      }

      const SimModel::SimBldgElementType_Railing_Default_sequence& SimModel::
      SimBldgElementType_Railing_Default () const
      {
        return this->SimBldgElementType_Railing_Default_;
      }

      SimModel::SimBldgElementType_Railing_Default_sequence& SimModel::
      SimBldgElementType_Railing_Default ()
      {
        return this->SimBldgElementType_Railing_Default_;
      }

      void SimModel::
      SimBldgElementType_Railing_Default (const SimBldgElementType_Railing_Default_sequence& s)
      {
        this->SimBldgElementType_Railing_Default_ = s;
      }

      const SimModel::SimBldgElementType_Ramp_Default_sequence& SimModel::
      SimBldgElementType_Ramp_Default () const
      {
        return this->SimBldgElementType_Ramp_Default_;
      }

      SimModel::SimBldgElementType_Ramp_Default_sequence& SimModel::
      SimBldgElementType_Ramp_Default ()
      {
        return this->SimBldgElementType_Ramp_Default_;
      }

      void SimModel::
      SimBldgElementType_Ramp_Default (const SimBldgElementType_Ramp_Default_sequence& s)
      {
        this->SimBldgElementType_Ramp_Default_ = s;
      }

      const SimModel::SimBldgElementType_RampFlight_Default_sequence& SimModel::
      SimBldgElementType_RampFlight_Default () const
      {
        return this->SimBldgElementType_RampFlight_Default_;
      }

      SimModel::SimBldgElementType_RampFlight_Default_sequence& SimModel::
      SimBldgElementType_RampFlight_Default ()
      {
        return this->SimBldgElementType_RampFlight_Default_;
      }

      void SimModel::
      SimBldgElementType_RampFlight_Default (const SimBldgElementType_RampFlight_Default_sequence& s)
      {
        this->SimBldgElementType_RampFlight_Default_ = s;
      }

      const SimModel::SimBldgElementType_Stair_Default_sequence& SimModel::
      SimBldgElementType_Stair_Default () const
      {
        return this->SimBldgElementType_Stair_Default_;
      }

      SimModel::SimBldgElementType_Stair_Default_sequence& SimModel::
      SimBldgElementType_Stair_Default ()
      {
        return this->SimBldgElementType_Stair_Default_;
      }

      void SimModel::
      SimBldgElementType_Stair_Default (const SimBldgElementType_Stair_Default_sequence& s)
      {
        this->SimBldgElementType_Stair_Default_ = s;
      }

      const SimModel::SimBldgElementType_StairFlight_Default_sequence& SimModel::
      SimBldgElementType_StairFlight_Default () const
      {
        return this->SimBldgElementType_StairFlight_Default_;
      }

      SimModel::SimBldgElementType_StairFlight_Default_sequence& SimModel::
      SimBldgElementType_StairFlight_Default ()
      {
        return this->SimBldgElementType_StairFlight_Default_;
      }

      void SimModel::
      SimBldgElementType_StairFlight_Default (const SimBldgElementType_StairFlight_Default_sequence& s)
      {
        this->SimBldgElementType_StairFlight_Default_ = s;
      }

      const SimModel::SimBldgElementType_VirtualElement_Default_sequence& SimModel::
      SimBldgElementType_VirtualElement_Default () const
      {
        return this->SimBldgElementType_VirtualElement_Default_;
      }

      SimModel::SimBldgElementType_VirtualElement_Default_sequence& SimModel::
      SimBldgElementType_VirtualElement_Default ()
      {
        return this->SimBldgElementType_VirtualElement_Default_;
      }

      void SimModel::
      SimBldgElementType_VirtualElement_Default (const SimBldgElementType_VirtualElement_Default_sequence& s)
      {
        this->SimBldgElementType_VirtualElement_Default_ = s;
      }

      const SimModel::SimBldgParams_Building_Default_sequence& SimModel::
      SimBldgParams_Building_Default () const
      {
        return this->SimBldgParams_Building_Default_;
      }

      SimModel::SimBldgParams_Building_Default_sequence& SimModel::
      SimBldgParams_Building_Default ()
      {
        return this->SimBldgParams_Building_Default_;
      }

      void SimModel::
      SimBldgParams_Building_Default (const SimBldgParams_Building_Default_sequence& s)
      {
        this->SimBldgParams_Building_Default_ = s;
      }

      const SimModel::SimBldgSiteParams_BuildingSite_Default_sequence& SimModel::
      SimBldgSiteParams_BuildingSite_Default () const
      {
        return this->SimBldgSiteParams_BuildingSite_Default_;
      }

      SimModel::SimBldgSiteParams_BuildingSite_Default_sequence& SimModel::
      SimBldgSiteParams_BuildingSite_Default ()
      {
        return this->SimBldgSiteParams_BuildingSite_Default_;
      }

      void SimModel::
      SimBldgSiteParams_BuildingSite_Default (const SimBldgSiteParams_BuildingSite_Default_sequence& s)
      {
        this->SimBldgSiteParams_BuildingSite_Default_ = s;
      }

      const SimModel::SimBldgStoryParams_BuildingStory_Default_sequence& SimModel::
      SimBldgStoryParams_BuildingStory_Default () const
      {
        return this->SimBldgStoryParams_BuildingStory_Default_;
      }

      SimModel::SimBldgStoryParams_BuildingStory_Default_sequence& SimModel::
      SimBldgStoryParams_BuildingStory_Default ()
      {
        return this->SimBldgStoryParams_BuildingStory_Default_;
      }

      void SimModel::
      SimBldgStoryParams_BuildingStory_Default (const SimBldgStoryParams_BuildingStory_Default_sequence& s)
      {
        this->SimBldgStoryParams_BuildingStory_Default_ = s;
      }

      const SimModel::SimBldgStoryType_BuildingStory_Default_sequence& SimModel::
      SimBldgStoryType_BuildingStory_Default () const
      {
        return this->SimBldgStoryType_BuildingStory_Default_;
      }

      SimModel::SimBldgStoryType_BuildingStory_Default_sequence& SimModel::
      SimBldgStoryType_BuildingStory_Default ()
      {
        return this->SimBldgStoryType_BuildingStory_Default_;
      }

      void SimModel::
      SimBldgStoryType_BuildingStory_Default (const SimBldgStoryType_BuildingStory_Default_sequence& s)
      {
        this->SimBldgStoryType_BuildingStory_Default_ = s;
      }

      const SimModel::SimBuilding_AdjacentBuilding_Default_sequence& SimModel::
      SimBuilding_AdjacentBuilding_Default () const
      {
        return this->SimBuilding_AdjacentBuilding_Default_;
      }

      SimModel::SimBuilding_AdjacentBuilding_Default_sequence& SimModel::
      SimBuilding_AdjacentBuilding_Default ()
      {
        return this->SimBuilding_AdjacentBuilding_Default_;
      }

      void SimModel::
      SimBuilding_AdjacentBuilding_Default (const SimBuilding_AdjacentBuilding_Default_sequence& s)
      {
        this->SimBuilding_AdjacentBuilding_Default_ = s;
      }

      const SimModel::SimBuilding_Building_Default_sequence& SimModel::
      SimBuilding_Building_Default () const
      {
        return this->SimBuilding_Building_Default_;
      }

      SimModel::SimBuilding_Building_Default_sequence& SimModel::
      SimBuilding_Building_Default ()
      {
        return this->SimBuilding_Building_Default_;
      }

      void SimModel::
      SimBuilding_Building_Default (const SimBuilding_Building_Default_sequence& s)
      {
        this->SimBuilding_Building_Default_ = s;
      }

      const SimModel::SimBuildingElementProxy_Default_Default_sequence& SimModel::
      SimBuildingElementProxy_Default_Default () const
      {
        return this->SimBuildingElementProxy_Default_Default_;
      }

      SimModel::SimBuildingElementProxy_Default_Default_sequence& SimModel::
      SimBuildingElementProxy_Default_Default ()
      {
        return this->SimBuildingElementProxy_Default_Default_;
      }

      void SimModel::
      SimBuildingElementProxy_Default_Default (const SimBuildingElementProxy_Default_Default_sequence& s)
      {
        this->SimBuildingElementProxy_Default_Default_ = s;
      }

      const SimModel::SimBuildingElementProxy_SiteContextElement_BuildingShading_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_BuildingShading () const
      {
        return this->SimBuildingElementProxy_SiteContextElement_BuildingShading_;
      }

      SimModel::SimBuildingElementProxy_SiteContextElement_BuildingShading_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_BuildingShading ()
      {
        return this->SimBuildingElementProxy_SiteContextElement_BuildingShading_;
      }

      void SimModel::
      SimBuildingElementProxy_SiteContextElement_BuildingShading (const SimBuildingElementProxy_SiteContextElement_BuildingShading_sequence& s)
      {
        this->SimBuildingElementProxy_SiteContextElement_BuildingShading_ = s;
      }

      const SimModel::SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed () const
      {
        return this->SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_;
      }

      SimModel::SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed ()
      {
        return this->SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_;
      }

      void SimModel::
      SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed (const SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_sequence& s)
      {
        this->SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_ = s;
      }

      const SimModel::SimBuildingElementProxy_SiteContextElement_Default_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_Default () const
      {
        return this->SimBuildingElementProxy_SiteContextElement_Default_;
      }

      SimModel::SimBuildingElementProxy_SiteContextElement_Default_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_Default ()
      {
        return this->SimBuildingElementProxy_SiteContextElement_Default_;
      }

      void SimModel::
      SimBuildingElementProxy_SiteContextElement_Default (const SimBuildingElementProxy_SiteContextElement_Default_sequence& s)
      {
        this->SimBuildingElementProxy_SiteContextElement_Default_ = s;
      }

      const SimModel::SimBuildingElementProxy_SiteContextElement_GroundPlane_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_GroundPlane () const
      {
        return this->SimBuildingElementProxy_SiteContextElement_GroundPlane_;
      }

      SimModel::SimBuildingElementProxy_SiteContextElement_GroundPlane_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_GroundPlane ()
      {
        return this->SimBuildingElementProxy_SiteContextElement_GroundPlane_;
      }

      void SimModel::
      SimBuildingElementProxy_SiteContextElement_GroundPlane (const SimBuildingElementProxy_SiteContextElement_GroundPlane_sequence& s)
      {
        this->SimBuildingElementProxy_SiteContextElement_GroundPlane_ = s;
      }

      const SimModel::SimBuildingElementProxy_SiteContextElement_SiteShading_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_SiteShading () const
      {
        return this->SimBuildingElementProxy_SiteContextElement_SiteShading_;
      }

      SimModel::SimBuildingElementProxy_SiteContextElement_SiteShading_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_SiteShading ()
      {
        return this->SimBuildingElementProxy_SiteContextElement_SiteShading_;
      }

      void SimModel::
      SimBuildingElementProxy_SiteContextElement_SiteShading (const SimBuildingElementProxy_SiteContextElement_SiteShading_sequence& s)
      {
        this->SimBuildingElementProxy_SiteContextElement_SiteShading_ = s;
      }

      const SimModel::SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed () const
      {
        return this->SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_;
      }

      SimModel::SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_sequence& SimModel::
      SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed ()
      {
        return this->SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_;
      }

      void SimModel::
      SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed (const SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_sequence& s)
      {
        this->SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_ = s;
      }

      const SimModel::SimBuildingElementProxy_ThermalMass_Default_sequence& SimModel::
      SimBuildingElementProxy_ThermalMass_Default () const
      {
        return this->SimBuildingElementProxy_ThermalMass_Default_;
      }

      SimModel::SimBuildingElementProxy_ThermalMass_Default_sequence& SimModel::
      SimBuildingElementProxy_ThermalMass_Default ()
      {
        return this->SimBuildingElementProxy_ThermalMass_Default_;
      }

      void SimModel::
      SimBuildingElementProxy_ThermalMass_Default (const SimBuildingElementProxy_ThermalMass_Default_sequence& s)
      {
        this->SimBuildingElementProxy_ThermalMass_Default_ = s;
      }

      const SimModel::SimBuildingStory_BuildingStory_Default_sequence& SimModel::
      SimBuildingStory_BuildingStory_Default () const
      {
        return this->SimBuildingStory_BuildingStory_Default_;
      }

      SimModel::SimBuildingStory_BuildingStory_Default_sequence& SimModel::
      SimBuildingStory_BuildingStory_Default ()
      {
        return this->SimBuildingStory_BuildingStory_Default_;
      }

      void SimModel::
      SimBuildingStory_BuildingStory_Default (const SimBuildingStory_BuildingStory_Default_sequence& s)
      {
        this->SimBuildingStory_BuildingStory_Default_ = s;
      }

      const SimModel::SimBuildingType_Building_Default_sequence& SimModel::
      SimBuildingType_Building_Default () const
      {
        return this->SimBuildingType_Building_Default_;
      }

      SimModel::SimBuildingType_Building_Default_sequence& SimModel::
      SimBuildingType_Building_Default ()
      {
        return this->SimBuildingType_Building_Default_;
      }

      void SimModel::
      SimBuildingType_Building_Default (const SimBuildingType_Building_Default_sequence& s)
      {
        this->SimBuildingType_Building_Default_ = s;
      }

      const SimModel::SimCalendarDate_Default_Default_sequence& SimModel::
      SimCalendarDate_Default_Default () const
      {
        return this->SimCalendarDate_Default_Default_;
      }

      SimModel::SimCalendarDate_Default_Default_sequence& SimModel::
      SimCalendarDate_Default_Default ()
      {
        return this->SimCalendarDate_Default_Default_;
      }

      void SimModel::
      SimCalendarDate_Default_Default (const SimCalendarDate_Default_Default_sequence& s)
      {
        this->SimCalendarDate_Default_Default_ = s;
      }

      const SimModel::SimCartesianTransformOperator_2D_NonUniform_sequence& SimModel::
      SimCartesianTransformOperator_2D_NonUniform () const
      {
        return this->SimCartesianTransformOperator_2D_NonUniform_;
      }

      SimModel::SimCartesianTransformOperator_2D_NonUniform_sequence& SimModel::
      SimCartesianTransformOperator_2D_NonUniform ()
      {
        return this->SimCartesianTransformOperator_2D_NonUniform_;
      }

      void SimModel::
      SimCartesianTransformOperator_2D_NonUniform (const SimCartesianTransformOperator_2D_NonUniform_sequence& s)
      {
        this->SimCartesianTransformOperator_2D_NonUniform_ = s;
      }

      const SimModel::SimCartesianTransformOperator_2D_Uniform_sequence& SimModel::
      SimCartesianTransformOperator_2D_Uniform () const
      {
        return this->SimCartesianTransformOperator_2D_Uniform_;
      }

      SimModel::SimCartesianTransformOperator_2D_Uniform_sequence& SimModel::
      SimCartesianTransformOperator_2D_Uniform ()
      {
        return this->SimCartesianTransformOperator_2D_Uniform_;
      }

      void SimModel::
      SimCartesianTransformOperator_2D_Uniform (const SimCartesianTransformOperator_2D_Uniform_sequence& s)
      {
        this->SimCartesianTransformOperator_2D_Uniform_ = s;
      }

      const SimModel::SimCartesianTransformOperator_3D_NonUniform_sequence& SimModel::
      SimCartesianTransformOperator_3D_NonUniform () const
      {
        return this->SimCartesianTransformOperator_3D_NonUniform_;
      }

      SimModel::SimCartesianTransformOperator_3D_NonUniform_sequence& SimModel::
      SimCartesianTransformOperator_3D_NonUniform ()
      {
        return this->SimCartesianTransformOperator_3D_NonUniform_;
      }

      void SimModel::
      SimCartesianTransformOperator_3D_NonUniform (const SimCartesianTransformOperator_3D_NonUniform_sequence& s)
      {
        this->SimCartesianTransformOperator_3D_NonUniform_ = s;
      }

      const SimModel::SimCartesianTransformOperator_3D_Uniform_sequence& SimModel::
      SimCartesianTransformOperator_3D_Uniform () const
      {
        return this->SimCartesianTransformOperator_3D_Uniform_;
      }

      SimModel::SimCartesianTransformOperator_3D_Uniform_sequence& SimModel::
      SimCartesianTransformOperator_3D_Uniform ()
      {
        return this->SimCartesianTransformOperator_3D_Uniform_;
      }

      void SimModel::
      SimCartesianTransformOperator_3D_Uniform (const SimCartesianTransformOperator_3D_Uniform_sequence& s)
      {
        this->SimCartesianTransformOperator_3D_Uniform_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_BuildingElementClassification_sequence& SimModel::
      SimClassification_ClassificationReference_BuildingElementClassification () const
      {
        return this->SimClassification_ClassificationReference_BuildingElementClassification_;
      }

      SimModel::SimClassification_ClassificationReference_BuildingElementClassification_sequence& SimModel::
      SimClassification_ClassificationReference_BuildingElementClassification ()
      {
        return this->SimClassification_ClassificationReference_BuildingElementClassification_;
      }

      void SimModel::
      SimClassification_ClassificationReference_BuildingElementClassification (const SimClassification_ClassificationReference_BuildingElementClassification_sequence& s)
      {
        this->SimClassification_ClassificationReference_BuildingElementClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_ConstructionEntityByFunction_sequence& SimModel::
      SimClassification_ClassificationReference_ConstructionEntityByFunction () const
      {
        return this->SimClassification_ClassificationReference_ConstructionEntityByFunction_;
      }

      SimModel::SimClassification_ClassificationReference_ConstructionEntityByFunction_sequence& SimModel::
      SimClassification_ClassificationReference_ConstructionEntityByFunction ()
      {
        return this->SimClassification_ClassificationReference_ConstructionEntityByFunction_;
      }

      void SimModel::
      SimClassification_ClassificationReference_ConstructionEntityByFunction (const SimClassification_ClassificationReference_ConstructionEntityByFunction_sequence& s)
      {
        this->SimClassification_ClassificationReference_ConstructionEntityByFunction_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_Default_sequence& SimModel::
      SimClassification_ClassificationReference_Default () const
      {
        return this->SimClassification_ClassificationReference_Default_;
      }

      SimModel::SimClassification_ClassificationReference_Default_sequence& SimModel::
      SimClassification_ClassificationReference_Default ()
      {
        return this->SimClassification_ClassificationReference_Default_;
      }

      void SimModel::
      SimClassification_ClassificationReference_Default (const SimClassification_ClassificationReference_Default_sequence& s)
      {
        this->SimClassification_ClassificationReference_Default_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_OrganizationalBillingID_sequence& SimModel::
      SimClassification_ClassificationReference_OrganizationalBillingID () const
      {
        return this->SimClassification_ClassificationReference_OrganizationalBillingID_;
      }

      SimModel::SimClassification_ClassificationReference_OrganizationalBillingID_sequence& SimModel::
      SimClassification_ClassificationReference_OrganizationalBillingID ()
      {
        return this->SimClassification_ClassificationReference_OrganizationalBillingID_;
      }

      void SimModel::
      SimClassification_ClassificationReference_OrganizationalBillingID (const SimClassification_ClassificationReference_OrganizationalBillingID_sequence& s)
      {
        this->SimClassification_ClassificationReference_OrganizationalBillingID_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_OrganizationalID_sequence& SimModel::
      SimClassification_ClassificationReference_OrganizationalID () const
      {
        return this->SimClassification_ClassificationReference_OrganizationalID_;
      }

      SimModel::SimClassification_ClassificationReference_OrganizationalID_sequence& SimModel::
      SimClassification_ClassificationReference_OrganizationalID ()
      {
        return this->SimClassification_ClassificationReference_OrganizationalID_;
      }

      void SimModel::
      SimClassification_ClassificationReference_OrganizationalID (const SimClassification_ClassificationReference_OrganizationalID_sequence& s)
      {
        this->SimClassification_ClassificationReference_OrganizationalID_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpaceByFunction_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceByFunction () const
      {
        return this->SimClassification_ClassificationReference_SpaceByFunction_;
      }

      SimModel::SimClassification_ClassificationReference_SpaceByFunction_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceByFunction ()
      {
        return this->SimClassification_ClassificationReference_SpaceByFunction_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpaceByFunction (const SimClassification_ClassificationReference_SpaceByFunction_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpaceByFunction_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpaceCategoryBoma_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceCategoryBoma () const
      {
        return this->SimClassification_ClassificationReference_SpaceCategoryBoma_;
      }

      SimModel::SimClassification_ClassificationReference_SpaceCategoryBoma_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceCategoryBoma ()
      {
        return this->SimClassification_ClassificationReference_SpaceCategoryBoma_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpaceCategoryBoma (const SimClassification_ClassificationReference_SpaceCategoryBoma_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpaceCategoryBoma_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpaceCategoryOwner_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceCategoryOwner () const
      {
        return this->SimClassification_ClassificationReference_SpaceCategoryOwner_;
      }

      SimModel::SimClassification_ClassificationReference_SpaceCategoryOwner_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceCategoryOwner ()
      {
        return this->SimClassification_ClassificationReference_SpaceCategoryOwner_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpaceCategoryOwner (const SimClassification_ClassificationReference_SpaceCategoryOwner_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpaceCategoryOwner_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpaceTypeOwner_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceTypeOwner () const
      {
        return this->SimClassification_ClassificationReference_SpaceTypeOwner_;
      }

      SimModel::SimClassification_ClassificationReference_SpaceTypeOwner_sequence& SimModel::
      SimClassification_ClassificationReference_SpaceTypeOwner ()
      {
        return this->SimClassification_ClassificationReference_SpaceTypeOwner_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpaceTypeOwner (const SimClassification_ClassificationReference_SpaceTypeOwner_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpaceTypeOwner_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpatialZoneEnergyType_sequence& SimModel::
      SimClassification_ClassificationReference_SpatialZoneEnergyType () const
      {
        return this->SimClassification_ClassificationReference_SpatialZoneEnergyType_;
      }

      SimModel::SimClassification_ClassificationReference_SpatialZoneEnergyType_sequence& SimModel::
      SimClassification_ClassificationReference_SpatialZoneEnergyType ()
      {
        return this->SimClassification_ClassificationReference_SpatialZoneEnergyType_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpatialZoneEnergyType (const SimClassification_ClassificationReference_SpatialZoneEnergyType_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpatialZoneEnergyType_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpatialZoneSecurityLevel_sequence& SimModel::
      SimClassification_ClassificationReference_SpatialZoneSecurityLevel () const
      {
        return this->SimClassification_ClassificationReference_SpatialZoneSecurityLevel_;
      }

      SimModel::SimClassification_ClassificationReference_SpatialZoneSecurityLevel_sequence& SimModel::
      SimClassification_ClassificationReference_SpatialZoneSecurityLevel ()
      {
        return this->SimClassification_ClassificationReference_SpatialZoneSecurityLevel_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpatialZoneSecurityLevel (const SimClassification_ClassificationReference_SpatialZoneSecurityLevel_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpatialZoneSecurityLevel_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SpatialZoneType_sequence& SimModel::
      SimClassification_ClassificationReference_SpatialZoneType () const
      {
        return this->SimClassification_ClassificationReference_SpatialZoneType_;
      }

      SimModel::SimClassification_ClassificationReference_SpatialZoneType_sequence& SimModel::
      SimClassification_ClassificationReference_SpatialZoneType ()
      {
        return this->SimClassification_ClassificationReference_SpatialZoneType_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SpatialZoneType (const SimClassification_ClassificationReference_SpatialZoneType_sequence& s)
      {
        this->SimClassification_ClassificationReference_SpatialZoneType_ = s;
      }

      const SimModel::SimClassification_ClassificationReference_SubOrganizationalID_sequence& SimModel::
      SimClassification_ClassificationReference_SubOrganizationalID () const
      {
        return this->SimClassification_ClassificationReference_SubOrganizationalID_;
      }

      SimModel::SimClassification_ClassificationReference_SubOrganizationalID_sequence& SimModel::
      SimClassification_ClassificationReference_SubOrganizationalID ()
      {
        return this->SimClassification_ClassificationReference_SubOrganizationalID_;
      }

      void SimModel::
      SimClassification_ClassificationReference_SubOrganizationalID (const SimClassification_ClassificationReference_SubOrganizationalID_sequence& s)
      {
        this->SimClassification_ClassificationReference_SubOrganizationalID_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_BomaSpaceCategoryClassification () const
      {
        return this->SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_BomaSpaceCategoryClassification ()
      {
        return this->SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_BomaSpaceCategoryClassification (const SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_Default_sequence& SimModel::
      SimClassification_ClassificationSystem_Default () const
      {
        return this->SimClassification_ClassificationSystem_Default_;
      }

      SimModel::SimClassification_ClassificationSystem_Default_sequence& SimModel::
      SimClassification_ClassificationSystem_Default ()
      {
        return this->SimClassification_ClassificationSystem_Default_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_Default (const SimClassification_ClassificationSystem_Default_sequence& s)
      {
        this->SimClassification_ClassificationSystem_Default_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_MasterFormat_sequence& SimModel::
      SimClassification_ClassificationSystem_MasterFormat () const
      {
        return this->SimClassification_ClassificationSystem_MasterFormat_;
      }

      SimModel::SimClassification_ClassificationSystem_MasterFormat_sequence& SimModel::
      SimClassification_ClassificationSystem_MasterFormat ()
      {
        return this->SimClassification_ClassificationSystem_MasterFormat_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_MasterFormat (const SimClassification_ClassificationSystem_MasterFormat_sequence& s)
      {
        this->SimClassification_ClassificationSystem_MasterFormat_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OmniClass_sequence& SimModel::
      SimClassification_ClassificationSystem_OmniClass () const
      {
        return this->SimClassification_ClassificationSystem_OmniClass_;
      }

      SimModel::SimClassification_ClassificationSystem_OmniClass_sequence& SimModel::
      SimClassification_ClassificationSystem_OmniClass ()
      {
        return this->SimClassification_ClassificationSystem_OmniClass_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OmniClass (const SimClassification_ClassificationSystem_OmniClass_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OmniClass_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OwnerOrganizationalClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerOrganizationalClassification () const
      {
        return this->SimClassification_ClassificationSystem_OwnerOrganizationalClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_OwnerOrganizationalClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerOrganizationalClassification ()
      {
        return this->SimClassification_ClassificationSystem_OwnerOrganizationalClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OwnerOrganizationalClassification (const SimClassification_ClassificationSystem_OwnerOrganizationalClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OwnerOrganizationalClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSecurityLevelClassification () const
      {
        return this->SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSecurityLevelClassification ()
      {
        return this->SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OwnerSecurityLevelClassification (const SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification () const
      {
        return this->SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification ()
      {
        return this->SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification (const SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification () const
      {
        return this->SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification ()
      {
        return this->SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification (const SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSpaceTypeClassification () const
      {
        return this->SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerSpaceTypeClassification ()
      {
        return this->SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OwnerSpaceTypeClassification (const SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_OwnerZoneTypeClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerZoneTypeClassification () const
      {
        return this->SimClassification_ClassificationSystem_OwnerZoneTypeClassification_;
      }

      SimModel::SimClassification_ClassificationSystem_OwnerZoneTypeClassification_sequence& SimModel::
      SimClassification_ClassificationSystem_OwnerZoneTypeClassification ()
      {
        return this->SimClassification_ClassificationSystem_OwnerZoneTypeClassification_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_OwnerZoneTypeClassification (const SimClassification_ClassificationSystem_OwnerZoneTypeClassification_sequence& s)
      {
        this->SimClassification_ClassificationSystem_OwnerZoneTypeClassification_ = s;
      }

      const SimModel::SimClassification_ClassificationSystem_Uniformat_sequence& SimModel::
      SimClassification_ClassificationSystem_Uniformat () const
      {
        return this->SimClassification_ClassificationSystem_Uniformat_;
      }

      SimModel::SimClassification_ClassificationSystem_Uniformat_sequence& SimModel::
      SimClassification_ClassificationSystem_Uniformat ()
      {
        return this->SimClassification_ClassificationSystem_Uniformat_;
      }

      void SimModel::
      SimClassification_ClassificationSystem_Uniformat (const SimClassification_ClassificationSystem_Uniformat_sequence& s)
      {
        this->SimClassification_ClassificationSystem_Uniformat_ = s;
      }

      const SimModel::SimColumn_Embedded_Default_sequence& SimModel::
      SimColumn_Embedded_Default () const
      {
        return this->SimColumn_Embedded_Default_;
      }

      SimModel::SimColumn_Embedded_Default_sequence& SimModel::
      SimColumn_Embedded_Default ()
      {
        return this->SimColumn_Embedded_Default_;
      }

      void SimModel::
      SimColumn_Embedded_Default (const SimColumn_Embedded_Default_sequence& s)
      {
        this->SimColumn_Embedded_Default_ = s;
      }

      const SimModel::SimColumn_Freestanding_Default_sequence& SimModel::
      SimColumn_Freestanding_Default () const
      {
        return this->SimColumn_Freestanding_Default_;
      }

      SimModel::SimColumn_Freestanding_Default_sequence& SimModel::
      SimColumn_Freestanding_Default ()
      {
        return this->SimColumn_Freestanding_Default_;
      }

      void SimModel::
      SimColumn_Freestanding_Default (const SimColumn_Freestanding_Default_sequence& s)
      {
        this->SimColumn_Freestanding_Default_ = s;
      }

      const SimModel::SimColumnParams_Column_Default_sequence& SimModel::
      SimColumnParams_Column_Default () const
      {
        return this->SimColumnParams_Column_Default_;
      }

      SimModel::SimColumnParams_Column_Default_sequence& SimModel::
      SimColumnParams_Column_Default ()
      {
        return this->SimColumnParams_Column_Default_;
      }

      void SimModel::
      SimColumnParams_Column_Default (const SimColumnParams_Column_Default_sequence& s)
      {
        this->SimColumnParams_Column_Default_ = s;
      }

      const SimModel::SimColumnType_Column_Default_sequence& SimModel::
      SimColumnType_Column_Default () const
      {
        return this->SimColumnType_Column_Default_;
      }

      SimModel::SimColumnType_Column_Default_sequence& SimModel::
      SimColumnType_Column_Default ()
      {
        return this->SimColumnType_Column_Default_;
      }

      void SimModel::
      SimColumnType_Column_Default (const SimColumnType_Column_Default_sequence& s)
      {
        this->SimColumnType_Column_Default_ = s;
      }

      const SimModel::SimComplexProperty_ComplexProp_Default_sequence& SimModel::
      SimComplexProperty_ComplexProp_Default () const
      {
        return this->SimComplexProperty_ComplexProp_Default_;
      }

      SimModel::SimComplexProperty_ComplexProp_Default_sequence& SimModel::
      SimComplexProperty_ComplexProp_Default ()
      {
        return this->SimComplexProperty_ComplexProp_Default_;
      }

      void SimModel::
      SimComplexProperty_ComplexProp_Default (const SimComplexProperty_ComplexProp_Default_sequence& s)
      {
        this->SimComplexProperty_ComplexProp_Default_ = s;
      }

      const SimModel::SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_sequence& SimModel::
      SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default () const
      {
        return this->SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_;
      }

      SimModel::SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_sequence& SimModel::
      SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default ()
      {
        return this->SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_;
      }

      void SimModel::
      SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default (const SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_sequence& s)
      {
        this->SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_ = s;
      }

      const SimModel::SimCompositeProfileDef_CompositeProfile_Default_sequence& SimModel::
      SimCompositeProfileDef_CompositeProfile_Default () const
      {
        return this->SimCompositeProfileDef_CompositeProfile_Default_;
      }

      SimModel::SimCompositeProfileDef_CompositeProfile_Default_sequence& SimModel::
      SimCompositeProfileDef_CompositeProfile_Default ()
      {
        return this->SimCompositeProfileDef_CompositeProfile_Default_;
      }

      void SimModel::
      SimCompositeProfileDef_CompositeProfile_Default (const SimCompositeProfileDef_CompositeProfile_Default_sequence& s)
      {
        this->SimCompositeProfileDef_CompositeProfile_Default_ = s;
      }

      const SimModel::SimConnectCurveGeom_Curve_Default_sequence& SimModel::
      SimConnectCurveGeom_Curve_Default () const
      {
        return this->SimConnectCurveGeom_Curve_Default_;
      }

      SimModel::SimConnectCurveGeom_Curve_Default_sequence& SimModel::
      SimConnectCurveGeom_Curve_Default ()
      {
        return this->SimConnectCurveGeom_Curve_Default_;
      }

      void SimModel::
      SimConnectCurveGeom_Curve_Default (const SimConnectCurveGeom_Curve_Default_sequence& s)
      {
        this->SimConnectCurveGeom_Curve_Default_ = s;
      }

      const SimModel::SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_sequence& SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_ClosedShell () const
      {
        return this->SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_;
      }

      SimModel::SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_sequence& SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_ClosedShell ()
      {
        return this->SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_;
      }

      void SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_ClosedShell (const SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_sequence& s)
      {
        this->SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_ = s;
      }

      const SimModel::SimConnectedFaceSet_ConnectedFaceSet_Default_sequence& SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_Default () const
      {
        return this->SimConnectedFaceSet_ConnectedFaceSet_Default_;
      }

      SimModel::SimConnectedFaceSet_ConnectedFaceSet_Default_sequence& SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_Default ()
      {
        return this->SimConnectedFaceSet_ConnectedFaceSet_Default_;
      }

      void SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_Default (const SimConnectedFaceSet_ConnectedFaceSet_Default_sequence& s)
      {
        this->SimConnectedFaceSet_ConnectedFaceSet_Default_ = s;
      }

      const SimModel::SimConnectedFaceSet_ConnectedFaceSet_OpenShell_sequence& SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_OpenShell () const
      {
        return this->SimConnectedFaceSet_ConnectedFaceSet_OpenShell_;
      }

      SimModel::SimConnectedFaceSet_ConnectedFaceSet_OpenShell_sequence& SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_OpenShell ()
      {
        return this->SimConnectedFaceSet_ConnectedFaceSet_OpenShell_;
      }

      void SimModel::
      SimConnectedFaceSet_ConnectedFaceSet_OpenShell (const SimConnectedFaceSet_ConnectedFaceSet_OpenShell_sequence& s)
      {
        this->SimConnectedFaceSet_ConnectedFaceSet_OpenShell_ = s;
      }

      const SimModel::SimConnection_AirFlow_CrossSystem_sequence& SimModel::
      SimConnection_AirFlow_CrossSystem () const
      {
        return this->SimConnection_AirFlow_CrossSystem_;
      }

      SimModel::SimConnection_AirFlow_CrossSystem_sequence& SimModel::
      SimConnection_AirFlow_CrossSystem ()
      {
        return this->SimConnection_AirFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_AirFlow_CrossSystem (const SimConnection_AirFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_AirFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_AirFlow_Default_sequence& SimModel::
      SimConnection_AirFlow_Default () const
      {
        return this->SimConnection_AirFlow_Default_;
      }

      SimModel::SimConnection_AirFlow_Default_sequence& SimModel::
      SimConnection_AirFlow_Default ()
      {
        return this->SimConnection_AirFlow_Default_;
      }

      void SimModel::
      SimConnection_AirFlow_Default (const SimConnection_AirFlow_Default_sequence& s)
      {
        this->SimConnection_AirFlow_Default_ = s;
      }

      const SimModel::SimConnection_AirFlow_Linkage_sequence& SimModel::
      SimConnection_AirFlow_Linkage () const
      {
        return this->SimConnection_AirFlow_Linkage_;
      }

      SimModel::SimConnection_AirFlow_Linkage_sequence& SimModel::
      SimConnection_AirFlow_Linkage ()
      {
        return this->SimConnection_AirFlow_Linkage_;
      }

      void SimModel::
      SimConnection_AirFlow_Linkage (const SimConnection_AirFlow_Linkage_sequence& s)
      {
        this->SimConnection_AirFlow_Linkage_ = s;
      }

      const SimModel::SimConnection_AirFlowNetwork_Default_sequence& SimModel::
      SimConnection_AirFlowNetwork_Default () const
      {
        return this->SimConnection_AirFlowNetwork_Default_;
      }

      SimModel::SimConnection_AirFlowNetwork_Default_sequence& SimModel::
      SimConnection_AirFlowNetwork_Default ()
      {
        return this->SimConnection_AirFlowNetwork_Default_;
      }

      void SimModel::
      SimConnection_AirFlowNetwork_Default (const SimConnection_AirFlowNetwork_Default_sequence& s)
      {
        this->SimConnection_AirFlowNetwork_Default_ = s;
      }

      const SimModel::SimConnection_ChilledWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_ChilledWaterFlow_CrossSystem () const
      {
        return this->SimConnection_ChilledWaterFlow_CrossSystem_;
      }

      SimModel::SimConnection_ChilledWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_ChilledWaterFlow_CrossSystem ()
      {
        return this->SimConnection_ChilledWaterFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_ChilledWaterFlow_CrossSystem (const SimConnection_ChilledWaterFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_ChilledWaterFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_ChilledWaterFlow_Default_sequence& SimModel::
      SimConnection_ChilledWaterFlow_Default () const
      {
        return this->SimConnection_ChilledWaterFlow_Default_;
      }

      SimModel::SimConnection_ChilledWaterFlow_Default_sequence& SimModel::
      SimConnection_ChilledWaterFlow_Default ()
      {
        return this->SimConnection_ChilledWaterFlow_Default_;
      }

      void SimModel::
      SimConnection_ChilledWaterFlow_Default (const SimConnection_ChilledWaterFlow_Default_sequence& s)
      {
        this->SimConnection_ChilledWaterFlow_Default_ = s;
      }

      const SimModel::SimConnection_CondenserFlow_CrossSystem_sequence& SimModel::
      SimConnection_CondenserFlow_CrossSystem () const
      {
        return this->SimConnection_CondenserFlow_CrossSystem_;
      }

      SimModel::SimConnection_CondenserFlow_CrossSystem_sequence& SimModel::
      SimConnection_CondenserFlow_CrossSystem ()
      {
        return this->SimConnection_CondenserFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_CondenserFlow_CrossSystem (const SimConnection_CondenserFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_CondenserFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_CondenserFlow_Default_sequence& SimModel::
      SimConnection_CondenserFlow_Default () const
      {
        return this->SimConnection_CondenserFlow_Default_;
      }

      SimModel::SimConnection_CondenserFlow_Default_sequence& SimModel::
      SimConnection_CondenserFlow_Default ()
      {
        return this->SimConnection_CondenserFlow_Default_;
      }

      void SimModel::
      SimConnection_CondenserFlow_Default (const SimConnection_CondenserFlow_Default_sequence& s)
      {
        this->SimConnection_CondenserFlow_Default_ = s;
      }

      const SimModel::SimConnection_Default_Default_sequence& SimModel::
      SimConnection_Default_Default () const
      {
        return this->SimConnection_Default_Default_;
      }

      SimModel::SimConnection_Default_Default_sequence& SimModel::
      SimConnection_Default_Default ()
      {
        return this->SimConnection_Default_Default_;
      }

      void SimModel::
      SimConnection_Default_Default (const SimConnection_Default_Default_sequence& s)
      {
        this->SimConnection_Default_Default_ = s;
      }

      const SimModel::SimConnection_DigitalControl_Default_sequence& SimModel::
      SimConnection_DigitalControl_Default () const
      {
        return this->SimConnection_DigitalControl_Default_;
      }

      SimModel::SimConnection_DigitalControl_Default_sequence& SimModel::
      SimConnection_DigitalControl_Default ()
      {
        return this->SimConnection_DigitalControl_Default_;
      }

      void SimModel::
      SimConnection_DigitalControl_Default (const SimConnection_DigitalControl_Default_sequence& s)
      {
        this->SimConnection_DigitalControl_Default_ = s;
      }

      const SimModel::SimConnection_Docking_Default_sequence& SimModel::
      SimConnection_Docking_Default () const
      {
        return this->SimConnection_Docking_Default_;
      }

      SimModel::SimConnection_Docking_Default_sequence& SimModel::
      SimConnection_Docking_Default ()
      {
        return this->SimConnection_Docking_Default_;
      }

      void SimModel::
      SimConnection_Docking_Default (const SimConnection_Docking_Default_sequence& s)
      {
        this->SimConnection_Docking_Default_ = s;
      }

      const SimModel::SimConnection_ElectricalPowerFlow_Default_sequence& SimModel::
      SimConnection_ElectricalPowerFlow_Default () const
      {
        return this->SimConnection_ElectricalPowerFlow_Default_;
      }

      SimModel::SimConnection_ElectricalPowerFlow_Default_sequence& SimModel::
      SimConnection_ElectricalPowerFlow_Default ()
      {
        return this->SimConnection_ElectricalPowerFlow_Default_;
      }

      void SimModel::
      SimConnection_ElectricalPowerFlow_Default (const SimConnection_ElectricalPowerFlow_Default_sequence& s)
      {
        this->SimConnection_ElectricalPowerFlow_Default_ = s;
      }

      const SimModel::SimConnection_HotWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_HotWaterFlow_CrossSystem () const
      {
        return this->SimConnection_HotWaterFlow_CrossSystem_;
      }

      SimModel::SimConnection_HotWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_HotWaterFlow_CrossSystem ()
      {
        return this->SimConnection_HotWaterFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_HotWaterFlow_CrossSystem (const SimConnection_HotWaterFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_HotWaterFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_HotWaterFlow_Default_sequence& SimModel::
      SimConnection_HotWaterFlow_Default () const
      {
        return this->SimConnection_HotWaterFlow_Default_;
      }

      SimModel::SimConnection_HotWaterFlow_Default_sequence& SimModel::
      SimConnection_HotWaterFlow_Default ()
      {
        return this->SimConnection_HotWaterFlow_Default_;
      }

      void SimModel::
      SimConnection_HotWaterFlow_Default (const SimConnection_HotWaterFlow_Default_sequence& s)
      {
        this->SimConnection_HotWaterFlow_Default_ = s;
      }

      const SimModel::SimConnection_MixedWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_MixedWaterFlow_CrossSystem () const
      {
        return this->SimConnection_MixedWaterFlow_CrossSystem_;
      }

      SimModel::SimConnection_MixedWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_MixedWaterFlow_CrossSystem ()
      {
        return this->SimConnection_MixedWaterFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_MixedWaterFlow_CrossSystem (const SimConnection_MixedWaterFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_MixedWaterFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_MixedWaterFlow_Default_sequence& SimModel::
      SimConnection_MixedWaterFlow_Default () const
      {
        return this->SimConnection_MixedWaterFlow_Default_;
      }

      SimModel::SimConnection_MixedWaterFlow_Default_sequence& SimModel::
      SimConnection_MixedWaterFlow_Default ()
      {
        return this->SimConnection_MixedWaterFlow_Default_;
      }

      void SimModel::
      SimConnection_MixedWaterFlow_Default (const SimConnection_MixedWaterFlow_Default_sequence& s)
      {
        this->SimConnection_MixedWaterFlow_Default_ = s;
      }

      const SimModel::SimConnection_RefrigerantFlow_Default_sequence& SimModel::
      SimConnection_RefrigerantFlow_Default () const
      {
        return this->SimConnection_RefrigerantFlow_Default_;
      }

      SimModel::SimConnection_RefrigerantFlow_Default_sequence& SimModel::
      SimConnection_RefrigerantFlow_Default ()
      {
        return this->SimConnection_RefrigerantFlow_Default_;
      }

      void SimModel::
      SimConnection_RefrigerantFlow_Default (const SimConnection_RefrigerantFlow_Default_sequence& s)
      {
        this->SimConnection_RefrigerantFlow_Default_ = s;
      }

      const SimModel::SimConnection_ServiceHotWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_ServiceHotWaterFlow_CrossSystem () const
      {
        return this->SimConnection_ServiceHotWaterFlow_CrossSystem_;
      }

      SimModel::SimConnection_ServiceHotWaterFlow_CrossSystem_sequence& SimModel::
      SimConnection_ServiceHotWaterFlow_CrossSystem ()
      {
        return this->SimConnection_ServiceHotWaterFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_ServiceHotWaterFlow_CrossSystem (const SimConnection_ServiceHotWaterFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_ServiceHotWaterFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_ServiceHotWaterFlow_Default_sequence& SimModel::
      SimConnection_ServiceHotWaterFlow_Default () const
      {
        return this->SimConnection_ServiceHotWaterFlow_Default_;
      }

      SimModel::SimConnection_ServiceHotWaterFlow_Default_sequence& SimModel::
      SimConnection_ServiceHotWaterFlow_Default ()
      {
        return this->SimConnection_ServiceHotWaterFlow_Default_;
      }

      void SimModel::
      SimConnection_ServiceHotWaterFlow_Default (const SimConnection_ServiceHotWaterFlow_Default_sequence& s)
      {
        this->SimConnection_ServiceHotWaterFlow_Default_ = s;
      }

      const SimModel::SimConnection_SteamFlow_CrossSystem_sequence& SimModel::
      SimConnection_SteamFlow_CrossSystem () const
      {
        return this->SimConnection_SteamFlow_CrossSystem_;
      }

      SimModel::SimConnection_SteamFlow_CrossSystem_sequence& SimModel::
      SimConnection_SteamFlow_CrossSystem ()
      {
        return this->SimConnection_SteamFlow_CrossSystem_;
      }

      void SimModel::
      SimConnection_SteamFlow_CrossSystem (const SimConnection_SteamFlow_CrossSystem_sequence& s)
      {
        this->SimConnection_SteamFlow_CrossSystem_ = s;
      }

      const SimModel::SimConnection_SteamFlow_Default_sequence& SimModel::
      SimConnection_SteamFlow_Default () const
      {
        return this->SimConnection_SteamFlow_Default_;
      }

      SimModel::SimConnection_SteamFlow_Default_sequence& SimModel::
      SimConnection_SteamFlow_Default ()
      {
        return this->SimConnection_SteamFlow_Default_;
      }

      void SimModel::
      SimConnection_SteamFlow_Default (const SimConnection_SteamFlow_Default_sequence& s)
      {
        this->SimConnection_SteamFlow_Default_ = s;
      }

      const SimModel::SimConnection_VarRefrigerantFlow_Default_sequence& SimModel::
      SimConnection_VarRefrigerantFlow_Default () const
      {
        return this->SimConnection_VarRefrigerantFlow_Default_;
      }

      SimModel::SimConnection_VarRefrigerantFlow_Default_sequence& SimModel::
      SimConnection_VarRefrigerantFlow_Default ()
      {
        return this->SimConnection_VarRefrigerantFlow_Default_;
      }

      void SimModel::
      SimConnection_VarRefrigerantFlow_Default (const SimConnection_VarRefrigerantFlow_Default_sequence& s)
      {
        this->SimConnection_VarRefrigerantFlow_Default_ = s;
      }

      const SimModel::SimConnection_ZoneAirFlow_Default_sequence& SimModel::
      SimConnection_ZoneAirFlow_Default () const
      {
        return this->SimConnection_ZoneAirFlow_Default_;
      }

      SimModel::SimConnection_ZoneAirFlow_Default_sequence& SimModel::
      SimConnection_ZoneAirFlow_Default ()
      {
        return this->SimConnection_ZoneAirFlow_Default_;
      }

      void SimModel::
      SimConnection_ZoneAirFlow_Default (const SimConnection_ZoneAirFlow_Default_sequence& s)
      {
        this->SimConnection_ZoneAirFlow_Default_ = s;
      }

      const SimModel::SimConnection_ZoneAirFlow_ZoneCrossMixing_sequence& SimModel::
      SimConnection_ZoneAirFlow_ZoneCrossMixing () const
      {
        return this->SimConnection_ZoneAirFlow_ZoneCrossMixing_;
      }

      SimModel::SimConnection_ZoneAirFlow_ZoneCrossMixing_sequence& SimModel::
      SimConnection_ZoneAirFlow_ZoneCrossMixing ()
      {
        return this->SimConnection_ZoneAirFlow_ZoneCrossMixing_;
      }

      void SimModel::
      SimConnection_ZoneAirFlow_ZoneCrossMixing (const SimConnection_ZoneAirFlow_ZoneCrossMixing_sequence& s)
      {
        this->SimConnection_ZoneAirFlow_ZoneCrossMixing_ = s;
      }

      const SimModel::SimConnection_ZoneAirFlow_ZoneMixing_sequence& SimModel::
      SimConnection_ZoneAirFlow_ZoneMixing () const
      {
        return this->SimConnection_ZoneAirFlow_ZoneMixing_;
      }

      SimModel::SimConnection_ZoneAirFlow_ZoneMixing_sequence& SimModel::
      SimConnection_ZoneAirFlow_ZoneMixing ()
      {
        return this->SimConnection_ZoneAirFlow_ZoneMixing_;
      }

      void SimModel::
      SimConnection_ZoneAirFlow_ZoneMixing (const SimConnection_ZoneAirFlow_ZoneMixing_sequence& s)
      {
        this->SimConnection_ZoneAirFlow_ZoneMixing_ = s;
      }

      const SimModel::SimConnectPointGeom_Point_Default_sequence& SimModel::
      SimConnectPointGeom_Point_Default () const
      {
        return this->SimConnectPointGeom_Point_Default_;
      }

      SimModel::SimConnectPointGeom_Point_Default_sequence& SimModel::
      SimConnectPointGeom_Point_Default ()
      {
        return this->SimConnectPointGeom_Point_Default_;
      }

      void SimModel::
      SimConnectPointGeom_Point_Default (const SimConnectPointGeom_Point_Default_sequence& s)
      {
        this->SimConnectPointGeom_Point_Default_ = s;
      }

      const SimModel::SimConnectPortGeom_Port_Default_sequence& SimModel::
      SimConnectPortGeom_Port_Default () const
      {
        return this->SimConnectPortGeom_Port_Default_;
      }

      SimModel::SimConnectPortGeom_Port_Default_sequence& SimModel::
      SimConnectPortGeom_Port_Default ()
      {
        return this->SimConnectPortGeom_Port_Default_;
      }

      void SimModel::
      SimConnectPortGeom_Port_Default (const SimConnectPortGeom_Port_Default_sequence& s)
      {
        this->SimConnectPortGeom_Port_Default_ = s;
      }

      const SimModel::SimConnectSurfaceGeom_Surface_Default_sequence& SimModel::
      SimConnectSurfaceGeom_Surface_Default () const
      {
        return this->SimConnectSurfaceGeom_Surface_Default_;
      }

      SimModel::SimConnectSurfaceGeom_Surface_Default_sequence& SimModel::
      SimConnectSurfaceGeom_Surface_Default ()
      {
        return this->SimConnectSurfaceGeom_Surface_Default_;
      }

      void SimModel::
      SimConnectSurfaceGeom_Surface_Default (const SimConnectSurfaceGeom_Surface_Default_sequence& s)
      {
        this->SimConnectSurfaceGeom_Surface_Default_ = s;
      }

      const SimModel::SimController_AvailabilityManager_AirLoop_sequence& SimModel::
      SimController_AvailabilityManager_AirLoop () const
      {
        return this->SimController_AvailabilityManager_AirLoop_;
      }

      SimModel::SimController_AvailabilityManager_AirLoop_sequence& SimModel::
      SimController_AvailabilityManager_AirLoop ()
      {
        return this->SimController_AvailabilityManager_AirLoop_;
      }

      void SimModel::
      SimController_AvailabilityManager_AirLoop (const SimController_AvailabilityManager_AirLoop_sequence& s)
      {
        this->SimController_AvailabilityManager_AirLoop_ = s;
      }

      const SimModel::SimController_AvailabilityManager_PlantLoop_sequence& SimModel::
      SimController_AvailabilityManager_PlantLoop () const
      {
        return this->SimController_AvailabilityManager_PlantLoop_;
      }

      SimModel::SimController_AvailabilityManager_PlantLoop_sequence& SimModel::
      SimController_AvailabilityManager_PlantLoop ()
      {
        return this->SimController_AvailabilityManager_PlantLoop_;
      }

      void SimModel::
      SimController_AvailabilityManager_PlantLoop (const SimController_AvailabilityManager_PlantLoop_sequence& s)
      {
        this->SimController_AvailabilityManager_PlantLoop_ = s;
      }

      const SimModel::SimController_Daylighting_DELight_sequence& SimModel::
      SimController_Daylighting_DELight () const
      {
        return this->SimController_Daylighting_DELight_;
      }

      SimModel::SimController_Daylighting_DELight_sequence& SimModel::
      SimController_Daylighting_DELight ()
      {
        return this->SimController_Daylighting_DELight_;
      }

      void SimModel::
      SimController_Daylighting_DELight (const SimController_Daylighting_DELight_sequence& s)
      {
        this->SimController_Daylighting_DELight_ = s;
      }

      const SimModel::SimController_Daylighting_Skylights_sequence& SimModel::
      SimController_Daylighting_Skylights () const
      {
        return this->SimController_Daylighting_Skylights_;
      }

      SimModel::SimController_Daylighting_Skylights_sequence& SimModel::
      SimController_Daylighting_Skylights ()
      {
        return this->SimController_Daylighting_Skylights_;
      }

      void SimModel::
      SimController_Daylighting_Skylights (const SimController_Daylighting_Skylights_sequence& s)
      {
        this->SimController_Daylighting_Skylights_ = s;
      }

      const SimModel::SimController_Daylighting_Standard_sequence& SimModel::
      SimController_Daylighting_Standard () const
      {
        return this->SimController_Daylighting_Standard_;
      }

      SimModel::SimController_Daylighting_Standard_sequence& SimModel::
      SimController_Daylighting_Standard ()
      {
        return this->SimController_Daylighting_Standard_;
      }

      void SimModel::
      SimController_Daylighting_Standard (const SimController_Daylighting_Standard_sequence& s)
      {
        this->SimController_Daylighting_Standard_ = s;
      }

      const SimModel::SimController_Daylighting_Windows_sequence& SimModel::
      SimController_Daylighting_Windows () const
      {
        return this->SimController_Daylighting_Windows_;
      }

      SimModel::SimController_Daylighting_Windows_sequence& SimModel::
      SimController_Daylighting_Windows ()
      {
        return this->SimController_Daylighting_Windows_;
      }

      void SimModel::
      SimController_Daylighting_Windows (const SimController_Daylighting_Windows_sequence& s)
      {
        this->SimController_Daylighting_Windows_ = s;
      }

      const SimModel::SimController_Default_Default_sequence& SimModel::
      SimController_Default_Default () const
      {
        return this->SimController_Default_Default_;
      }

      SimModel::SimController_Default_Default_sequence& SimModel::
      SimController_Default_Default ()
      {
        return this->SimController_Default_Default_;
      }

      void SimModel::
      SimController_Default_Default (const SimController_Default_Default_sequence& s)
      {
        this->SimController_Default_Default_ = s;
      }

      const SimModel::SimController_DemandManager_AirLoop_sequence& SimModel::
      SimController_DemandManager_AirLoop () const
      {
        return this->SimController_DemandManager_AirLoop_;
      }

      SimModel::SimController_DemandManager_AirLoop_sequence& SimModel::
      SimController_DemandManager_AirLoop ()
      {
        return this->SimController_DemandManager_AirLoop_;
      }

      void SimModel::
      SimController_DemandManager_AirLoop (const SimController_DemandManager_AirLoop_sequence& s)
      {
        this->SimController_DemandManager_AirLoop_ = s;
      }

      const SimModel::SimController_LightingControl_Continuous_sequence& SimModel::
      SimController_LightingControl_Continuous () const
      {
        return this->SimController_LightingControl_Continuous_;
      }

      SimModel::SimController_LightingControl_Continuous_sequence& SimModel::
      SimController_LightingControl_Continuous ()
      {
        return this->SimController_LightingControl_Continuous_;
      }

      void SimModel::
      SimController_LightingControl_Continuous (const SimController_LightingControl_Continuous_sequence& s)
      {
        this->SimController_LightingControl_Continuous_ = s;
      }

      const SimModel::SimController_LightingControl_ContinuousOff_sequence& SimModel::
      SimController_LightingControl_ContinuousOff () const
      {
        return this->SimController_LightingControl_ContinuousOff_;
      }

      SimModel::SimController_LightingControl_ContinuousOff_sequence& SimModel::
      SimController_LightingControl_ContinuousOff ()
      {
        return this->SimController_LightingControl_ContinuousOff_;
      }

      void SimModel::
      SimController_LightingControl_ContinuousOff (const SimController_LightingControl_ContinuousOff_sequence& s)
      {
        this->SimController_LightingControl_ContinuousOff_ = s;
      }

      const SimModel::SimController_LightingControl_MotionSensor_sequence& SimModel::
      SimController_LightingControl_MotionSensor () const
      {
        return this->SimController_LightingControl_MotionSensor_;
      }

      SimModel::SimController_LightingControl_MotionSensor_sequence& SimModel::
      SimController_LightingControl_MotionSensor ()
      {
        return this->SimController_LightingControl_MotionSensor_;
      }

      void SimModel::
      SimController_LightingControl_MotionSensor (const SimController_LightingControl_MotionSensor_sequence& s)
      {
        this->SimController_LightingControl_MotionSensor_ = s;
      }

      const SimModel::SimController_LightingControl_On_Off_sequence& SimModel::
      SimController_LightingControl_On_Off () const
      {
        return this->SimController_LightingControl_On_Off_;
      }

      SimModel::SimController_LightingControl_On_Off_sequence& SimModel::
      SimController_LightingControl_On_Off ()
      {
        return this->SimController_LightingControl_On_Off_;
      }

      void SimModel::
      SimController_LightingControl_On_Off (const SimController_LightingControl_On_Off_sequence& s)
      {
        this->SimController_LightingControl_On_Off_ = s;
      }

      const SimModel::SimController_LightingControl_Stepped_sequence& SimModel::
      SimController_LightingControl_Stepped () const
      {
        return this->SimController_LightingControl_Stepped_;
      }

      SimModel::SimController_LightingControl_Stepped_sequence& SimModel::
      SimController_LightingControl_Stepped ()
      {
        return this->SimController_LightingControl_Stepped_;
      }

      void SimModel::
      SimController_LightingControl_Stepped (const SimController_LightingControl_Stepped_sequence& s)
      {
        this->SimController_LightingControl_Stepped_ = s;
      }

      const SimModel::SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_sequence& SimModel::
      SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation () const
      {
        return this->SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_;
      }

      SimModel::SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_sequence& SimModel::
      SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation ()
      {
        return this->SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_;
      }

      void SimModel::
      SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation (const SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_sequence& s)
      {
        this->SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_ = s;
      }

      const SimModel::SimController_OperationManager_CondenserLoop_sequence& SimModel::
      SimController_OperationManager_CondenserLoop () const
      {
        return this->SimController_OperationManager_CondenserLoop_;
      }

      SimModel::SimController_OperationManager_CondenserLoop_sequence& SimModel::
      SimController_OperationManager_CondenserLoop ()
      {
        return this->SimController_OperationManager_CondenserLoop_;
      }

      void SimModel::
      SimController_OperationManager_CondenserLoop (const SimController_OperationManager_CondenserLoop_sequence& s)
      {
        this->SimController_OperationManager_CondenserLoop_ = s;
      }

      const SimModel::SimController_OperationManager_PlantLoop_sequence& SimModel::
      SimController_OperationManager_PlantLoop () const
      {
        return this->SimController_OperationManager_PlantLoop_;
      }

      SimModel::SimController_OperationManager_PlantLoop_sequence& SimModel::
      SimController_OperationManager_PlantLoop ()
      {
        return this->SimController_OperationManager_PlantLoop_;
      }

      void SimModel::
      SimController_OperationManager_PlantLoop (const SimController_OperationManager_PlantLoop_sequence& s)
      {
        this->SimController_OperationManager_PlantLoop_ = s;
      }

      const SimModel::SimController_OutdoorAir_EconomizerControl_sequence& SimModel::
      SimController_OutdoorAir_EconomizerControl () const
      {
        return this->SimController_OutdoorAir_EconomizerControl_;
      }

      SimModel::SimController_OutdoorAir_EconomizerControl_sequence& SimModel::
      SimController_OutdoorAir_EconomizerControl ()
      {
        return this->SimController_OutdoorAir_EconomizerControl_;
      }

      void SimModel::
      SimController_OutdoorAir_EconomizerControl (const SimController_OutdoorAir_EconomizerControl_sequence& s)
      {
        this->SimController_OutdoorAir_EconomizerControl_ = s;
      }

      const SimModel::SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_sequence& SimModel::
      SimController_OutdoorAir_EconomizerWithDemandControlledVentilation () const
      {
        return this->SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_;
      }

      SimModel::SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_sequence& SimModel::
      SimController_OutdoorAir_EconomizerWithDemandControlledVentilation ()
      {
        return this->SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_;
      }

      void SimModel::
      SimController_OutdoorAir_EconomizerWithDemandControlledVentilation (const SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_sequence& s)
      {
        this->SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_ = s;
      }

      const SimModel::SimController_OutdoorAir_OutdoorAirPreconditioningController_sequence& SimModel::
      SimController_OutdoorAir_OutdoorAirPreconditioningController () const
      {
        return this->SimController_OutdoorAir_OutdoorAirPreconditioningController_;
      }

      SimModel::SimController_OutdoorAir_OutdoorAirPreconditioningController_sequence& SimModel::
      SimController_OutdoorAir_OutdoorAirPreconditioningController ()
      {
        return this->SimController_OutdoorAir_OutdoorAirPreconditioningController_;
      }

      void SimModel::
      SimController_OutdoorAir_OutdoorAirPreconditioningController (const SimController_OutdoorAir_OutdoorAirPreconditioningController_sequence& s)
      {
        this->SimController_OutdoorAir_OutdoorAirPreconditioningController_ = s;
      }

      const SimModel::SimController_Programmable_Default_sequence& SimModel::
      SimController_Programmable_Default () const
      {
        return this->SimController_Programmable_Default_;
      }

      SimModel::SimController_Programmable_Default_sequence& SimModel::
      SimController_Programmable_Default ()
      {
        return this->SimController_Programmable_Default_;
      }

      void SimModel::
      SimController_Programmable_Default (const SimController_Programmable_Default_sequence& s)
      {
        this->SimController_Programmable_Default_ = s;
      }

      const SimModel::SimController_ShadingControl_Heating_CoolingLoads_sequence& SimModel::
      SimController_ShadingControl_Heating_CoolingLoads () const
      {
        return this->SimController_ShadingControl_Heating_CoolingLoads_;
      }

      SimModel::SimController_ShadingControl_Heating_CoolingLoads_sequence& SimModel::
      SimController_ShadingControl_Heating_CoolingLoads ()
      {
        return this->SimController_ShadingControl_Heating_CoolingLoads_;
      }

      void SimModel::
      SimController_ShadingControl_Heating_CoolingLoads (const SimController_ShadingControl_Heating_CoolingLoads_sequence& s)
      {
        this->SimController_ShadingControl_Heating_CoolingLoads_ = s;
      }

      const SimModel::SimController_ShadingControl_On_Off_sequence& SimModel::
      SimController_ShadingControl_On_Off () const
      {
        return this->SimController_ShadingControl_On_Off_;
      }

      SimModel::SimController_ShadingControl_On_Off_sequence& SimModel::
      SimController_ShadingControl_On_Off ()
      {
        return this->SimController_ShadingControl_On_Off_;
      }

      void SimModel::
      SimController_ShadingControl_On_Off (const SimController_ShadingControl_On_Off_sequence& s)
      {
        this->SimController_ShadingControl_On_Off_ = s;
      }

      const SimModel::SimController_ShadingControl_WindowTemp_Solar_sequence& SimModel::
      SimController_ShadingControl_WindowTemp_Solar () const
      {
        return this->SimController_ShadingControl_WindowTemp_Solar_;
      }

      SimModel::SimController_ShadingControl_WindowTemp_Solar_sequence& SimModel::
      SimController_ShadingControl_WindowTemp_Solar ()
      {
        return this->SimController_ShadingControl_WindowTemp_Solar_;
      }

      void SimModel::
      SimController_ShadingControl_WindowTemp_Solar (const SimController_ShadingControl_WindowTemp_Solar_sequence& s)
      {
        this->SimController_ShadingControl_WindowTemp_Solar_ = s;
      }

      const SimModel::SimController_SupplyAir_Humidity_sequence& SimModel::
      SimController_SupplyAir_Humidity () const
      {
        return this->SimController_SupplyAir_Humidity_;
      }

      SimModel::SimController_SupplyAir_Humidity_sequence& SimModel::
      SimController_SupplyAir_Humidity ()
      {
        return this->SimController_SupplyAir_Humidity_;
      }

      void SimModel::
      SimController_SupplyAir_Humidity (const SimController_SupplyAir_Humidity_sequence& s)
      {
        this->SimController_SupplyAir_Humidity_ = s;
      }

      const SimModel::SimController_SupplyAir_Temperature_sequence& SimModel::
      SimController_SupplyAir_Temperature () const
      {
        return this->SimController_SupplyAir_Temperature_;
      }

      SimModel::SimController_SupplyAir_Temperature_sequence& SimModel::
      SimController_SupplyAir_Temperature ()
      {
        return this->SimController_SupplyAir_Temperature_;
      }

      void SimModel::
      SimController_SupplyAir_Temperature (const SimController_SupplyAir_Temperature_sequence& s)
      {
        this->SimController_SupplyAir_Temperature_ = s;
      }

      const SimModel::SimController_SupplyWater_Temperature_sequence& SimModel::
      SimController_SupplyWater_Temperature () const
      {
        return this->SimController_SupplyWater_Temperature_;
      }

      SimModel::SimController_SupplyWater_Temperature_sequence& SimModel::
      SimController_SupplyWater_Temperature ()
      {
        return this->SimController_SupplyWater_Temperature_;
      }

      void SimModel::
      SimController_SupplyWater_Temperature (const SimController_SupplyWater_Temperature_sequence& s)
      {
        this->SimController_SupplyWater_Temperature_ = s;
      }

      const SimModel::SimController_ThermalStorage_ThermalEnergyStorageTank_sequence& SimModel::
      SimController_ThermalStorage_ThermalEnergyStorageTank () const
      {
        return this->SimController_ThermalStorage_ThermalEnergyStorageTank_;
      }

      SimModel::SimController_ThermalStorage_ThermalEnergyStorageTank_sequence& SimModel::
      SimController_ThermalStorage_ThermalEnergyStorageTank ()
      {
        return this->SimController_ThermalStorage_ThermalEnergyStorageTank_;
      }

      void SimModel::
      SimController_ThermalStorage_ThermalEnergyStorageTank (const SimController_ThermalStorage_ThermalEnergyStorageTank_sequence& s)
      {
        this->SimController_ThermalStorage_ThermalEnergyStorageTank_ = s;
      }

      const SimModel::SimController_Ventilation_ContaminantControl_sequence& SimModel::
      SimController_Ventilation_ContaminantControl () const
      {
        return this->SimController_Ventilation_ContaminantControl_;
      }

      SimModel::SimController_Ventilation_ContaminantControl_sequence& SimModel::
      SimController_Ventilation_ContaminantControl ()
      {
        return this->SimController_Ventilation_ContaminantControl_;
      }

      void SimModel::
      SimController_Ventilation_ContaminantControl (const SimController_Ventilation_ContaminantControl_sequence& s)
      {
        this->SimController_Ventilation_ContaminantControl_ = s;
      }

      const SimModel::SimController_WaterCoil_Default_sequence& SimModel::
      SimController_WaterCoil_Default () const
      {
        return this->SimController_WaterCoil_Default_;
      }

      SimModel::SimController_WaterCoil_Default_sequence& SimModel::
      SimController_WaterCoil_Default ()
      {
        return this->SimController_WaterCoil_Default_;
      }

      void SimModel::
      SimController_WaterCoil_Default (const SimController_WaterCoil_Default_sequence& s)
      {
        this->SimController_WaterCoil_Default_ = s;
      }

      const SimModel::SimController_ZoneControlHumidity_Humidistat_sequence& SimModel::
      SimController_ZoneControlHumidity_Humidistat () const
      {
        return this->SimController_ZoneControlHumidity_Humidistat_;
      }

      SimModel::SimController_ZoneControlHumidity_Humidistat_sequence& SimModel::
      SimController_ZoneControlHumidity_Humidistat ()
      {
        return this->SimController_ZoneControlHumidity_Humidistat_;
      }

      void SimModel::
      SimController_ZoneControlHumidity_Humidistat (const SimController_ZoneControlHumidity_Humidistat_sequence& s)
      {
        this->SimController_ZoneControlHumidity_Humidistat_ = s;
      }

      const SimModel::SimController_ZoneControlHumidity_Humidistat1Zone_sequence& SimModel::
      SimController_ZoneControlHumidity_Humidistat1Zone () const
      {
        return this->SimController_ZoneControlHumidity_Humidistat1Zone_;
      }

      SimModel::SimController_ZoneControlHumidity_Humidistat1Zone_sequence& SimModel::
      SimController_ZoneControlHumidity_Humidistat1Zone ()
      {
        return this->SimController_ZoneControlHumidity_Humidistat1Zone_;
      }

      void SimModel::
      SimController_ZoneControlHumidity_Humidistat1Zone (const SimController_ZoneControlHumidity_Humidistat1Zone_sequence& s)
      {
        this->SimController_ZoneControlHumidity_Humidistat1Zone_ = s;
      }

      const SimModel::SimController_ZoneControlTemperature_Thermostat_sequence& SimModel::
      SimController_ZoneControlTemperature_Thermostat () const
      {
        return this->SimController_ZoneControlTemperature_Thermostat_;
      }

      SimModel::SimController_ZoneControlTemperature_Thermostat_sequence& SimModel::
      SimController_ZoneControlTemperature_Thermostat ()
      {
        return this->SimController_ZoneControlTemperature_Thermostat_;
      }

      void SimModel::
      SimController_ZoneControlTemperature_Thermostat (const SimController_ZoneControlTemperature_Thermostat_sequence& s)
      {
        this->SimController_ZoneControlTemperature_Thermostat_ = s;
      }

      const SimModel::SimController_ZoneControlTemperature_Thermostat1Zone_sequence& SimModel::
      SimController_ZoneControlTemperature_Thermostat1Zone () const
      {
        return this->SimController_ZoneControlTemperature_Thermostat1Zone_;
      }

      SimModel::SimController_ZoneControlTemperature_Thermostat1Zone_sequence& SimModel::
      SimController_ZoneControlTemperature_Thermostat1Zone ()
      {
        return this->SimController_ZoneControlTemperature_Thermostat1Zone_;
      }

      void SimModel::
      SimController_ZoneControlTemperature_Thermostat1Zone (const SimController_ZoneControlTemperature_Thermostat1Zone_sequence& s)
      {
        this->SimController_ZoneControlTemperature_Thermostat1Zone_ = s;
      }

      const SimModel::SimController_ZoneControlTemperature_ThermostatStagedDual_sequence& SimModel::
      SimController_ZoneControlTemperature_ThermostatStagedDual () const
      {
        return this->SimController_ZoneControlTemperature_ThermostatStagedDual_;
      }

      SimModel::SimController_ZoneControlTemperature_ThermostatStagedDual_sequence& SimModel::
      SimController_ZoneControlTemperature_ThermostatStagedDual ()
      {
        return this->SimController_ZoneControlTemperature_ThermostatStagedDual_;
      }

      void SimModel::
      SimController_ZoneControlTemperature_ThermostatStagedDual (const SimController_ZoneControlTemperature_ThermostatStagedDual_sequence& s)
      {
        this->SimController_ZoneControlTemperature_ThermostatStagedDual_ = s;
      }

      const SimModel::SimController_ZoneControlTemperature_ThermostatThermalComfort_sequence& SimModel::
      SimController_ZoneControlTemperature_ThermostatThermalComfort () const
      {
        return this->SimController_ZoneControlTemperature_ThermostatThermalComfort_;
      }

      SimModel::SimController_ZoneControlTemperature_ThermostatThermalComfort_sequence& SimModel::
      SimController_ZoneControlTemperature_ThermostatThermalComfort ()
      {
        return this->SimController_ZoneControlTemperature_ThermostatThermalComfort_;
      }

      void SimModel::
      SimController_ZoneControlTemperature_ThermostatThermalComfort (const SimController_ZoneControlTemperature_ThermostatThermalComfort_sequence& s)
      {
        this->SimController_ZoneControlTemperature_ThermostatThermalComfort_ = s;
      }

      const SimModel::SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_sequence& SimModel::
      SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone () const
      {
        return this->SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_;
      }

      SimModel::SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_sequence& SimModel::
      SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone ()
      {
        return this->SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_;
      }

      void SimModel::
      SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone (const SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_sequence& s)
      {
        this->SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat (const SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff (const SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn (const SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_HybridVentilation_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_HybridVentilation_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_HybridVentilation_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_HybridVentilation_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_HybridVentilation (const SimControlScheme_AvailabilityManagerScheme_HybridVentilation_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_HybridVentilation_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff (const SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn (const SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_NightCycle_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_NightCycle () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_NightCycle_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_NightCycle_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_NightCycle ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_NightCycle_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_NightCycle (const SimControlScheme_AvailabilityManagerScheme_NightCycle_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_NightCycle_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_NightVentilation_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_NightVentilation () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_NightVentilation_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_NightVentilation_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_NightVentilation ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_NightVentilation_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_NightVentilation (const SimControlScheme_AvailabilityManagerScheme_NightVentilation_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_NightVentilation_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_OptimumStart_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_OptimumStart_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_OptimumStart_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_OptimumStart_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_OptimumStart (const SimControlScheme_AvailabilityManagerScheme_OptimumStart_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_OptimumStart_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_Scheduled_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_Scheduled () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_Scheduled_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_Scheduled_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_Scheduled ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_Scheduled_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_Scheduled (const SimControlScheme_AvailabilityManagerScheme_Scheduled_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_Scheduled_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_ScheduledOff_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_ScheduledOff () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_ScheduledOff_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_ScheduledOff_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_ScheduledOff ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_ScheduledOff_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_ScheduledOff (const SimControlScheme_AvailabilityManagerScheme_ScheduledOff_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_ScheduledOff_ = s;
      }

      const SimModel::SimControlScheme_AvailabilityManagerScheme_ScheduledOn_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_ScheduledOn () const
      {
        return this->SimControlScheme_AvailabilityManagerScheme_ScheduledOn_;
      }

      SimModel::SimControlScheme_AvailabilityManagerScheme_ScheduledOn_sequence& SimModel::
      SimControlScheme_AvailabilityManagerScheme_ScheduledOn ()
      {
        return this->SimControlScheme_AvailabilityManagerScheme_ScheduledOn_;
      }

      void SimModel::
      SimControlScheme_AvailabilityManagerScheme_ScheduledOn (const SimControlScheme_AvailabilityManagerScheme_ScheduledOn_sequence& s)
      {
        this->SimControlScheme_AvailabilityManagerScheme_ScheduledOn_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint (const SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_CoolingLoad_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_CoolingLoad () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_CoolingLoad_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_CoolingLoad_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_CoolingLoad ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_CoolingLoad_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_CoolingLoad (const SimControlScheme_ControlAndSequencingScheme_CoolingLoad_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_CoolingLoad_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter (const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_HeatingLoad_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_HeatingLoad () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_HeatingLoad_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_HeatingLoad_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_HeatingLoad ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_HeatingLoad_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_HeatingLoad (const SimControlScheme_ControlAndSequencingScheme_HeatingLoad_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_HeatingLoad_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity (const SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint (const SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference (const SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb (const SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference (const SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb (const SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference (const SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_Uncontrolled_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_Uncontrolled () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_Uncontrolled_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_Uncontrolled_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_Uncontrolled ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_Uncontrolled_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_Uncontrolled (const SimControlScheme_ControlAndSequencingScheme_Uncontrolled_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_Uncontrolled_ = s;
      }

      const SimModel::SimControlScheme_ControlAndSequencingScheme_UserDefined_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_UserDefined () const
      {
        return this->SimControlScheme_ControlAndSequencingScheme_UserDefined_;
      }

      SimModel::SimControlScheme_ControlAndSequencingScheme_UserDefined_sequence& SimModel::
      SimControlScheme_ControlAndSequencingScheme_UserDefined ()
      {
        return this->SimControlScheme_ControlAndSequencingScheme_UserDefined_;
      }

      void SimModel::
      SimControlScheme_ControlAndSequencingScheme_UserDefined (const SimControlScheme_ControlAndSequencingScheme_UserDefined_sequence& s)
      {
        this->SimControlScheme_ControlAndSequencingScheme_UserDefined_ = s;
      }

      const SimModel::SimControlScheme_DemandManagerScheme_ElectricEquipment_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_ElectricEquipment () const
      {
        return this->SimControlScheme_DemandManagerScheme_ElectricEquipment_;
      }

      SimModel::SimControlScheme_DemandManagerScheme_ElectricEquipment_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_ElectricEquipment ()
      {
        return this->SimControlScheme_DemandManagerScheme_ElectricEquipment_;
      }

      void SimModel::
      SimControlScheme_DemandManagerScheme_ElectricEquipment (const SimControlScheme_DemandManagerScheme_ElectricEquipment_sequence& s)
      {
        this->SimControlScheme_DemandManagerScheme_ElectricEquipment_ = s;
      }

      const SimModel::SimControlScheme_DemandManagerScheme_ExteriorLights_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_ExteriorLights () const
      {
        return this->SimControlScheme_DemandManagerScheme_ExteriorLights_;
      }

      SimModel::SimControlScheme_DemandManagerScheme_ExteriorLights_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_ExteriorLights ()
      {
        return this->SimControlScheme_DemandManagerScheme_ExteriorLights_;
      }

      void SimModel::
      SimControlScheme_DemandManagerScheme_ExteriorLights (const SimControlScheme_DemandManagerScheme_ExteriorLights_sequence& s)
      {
        this->SimControlScheme_DemandManagerScheme_ExteriorLights_ = s;
      }

      const SimModel::SimControlScheme_DemandManagerScheme_Lights_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_Lights () const
      {
        return this->SimControlScheme_DemandManagerScheme_Lights_;
      }

      SimModel::SimControlScheme_DemandManagerScheme_Lights_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_Lights ()
      {
        return this->SimControlScheme_DemandManagerScheme_Lights_;
      }

      void SimModel::
      SimControlScheme_DemandManagerScheme_Lights (const SimControlScheme_DemandManagerScheme_Lights_sequence& s)
      {
        this->SimControlScheme_DemandManagerScheme_Lights_ = s;
      }

      const SimModel::SimControlScheme_DemandManagerScheme_Thermostats_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_Thermostats () const
      {
        return this->SimControlScheme_DemandManagerScheme_Thermostats_;
      }

      SimModel::SimControlScheme_DemandManagerScheme_Thermostats_sequence& SimModel::
      SimControlScheme_DemandManagerScheme_Thermostats ()
      {
        return this->SimControlScheme_DemandManagerScheme_Thermostats_;
      }

      void SimModel::
      SimControlScheme_DemandManagerScheme_Thermostats (const SimControlScheme_DemandManagerScheme_Thermostats_sequence& s)
      {
        this->SimControlScheme_DemandManagerScheme_Thermostats_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable () const
      {
        return this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable ()
      {
        return this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable (const SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable () const
      {
        return this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable ()
      {
        return this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable (const SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_GlobalVairable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_GlobalVairable () const
      {
        return this->SimControlScheme_EnergyManagementScheme_GlobalVairable_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_GlobalVairable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_GlobalVairable ()
      {
        return this->SimControlScheme_EnergyManagementScheme_GlobalVairable_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_GlobalVairable (const SimControlScheme_EnergyManagementScheme_GlobalVairable_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_GlobalVairable_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_InternalVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_InternalVariable () const
      {
        return this->SimControlScheme_EnergyManagementScheme_InternalVariable_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_InternalVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_InternalVariable ()
      {
        return this->SimControlScheme_EnergyManagementScheme_InternalVariable_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_InternalVariable (const SimControlScheme_EnergyManagementScheme_InternalVariable_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_InternalVariable_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_OutputVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_OutputVariable () const
      {
        return this->SimControlScheme_EnergyManagementScheme_OutputVariable_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_OutputVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_OutputVariable ()
      {
        return this->SimControlScheme_EnergyManagementScheme_OutputVariable_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_OutputVariable (const SimControlScheme_EnergyManagementScheme_OutputVariable_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_OutputVariable_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_Program_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_Program () const
      {
        return this->SimControlScheme_EnergyManagementScheme_Program_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_Program_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_Program ()
      {
        return this->SimControlScheme_EnergyManagementScheme_Program_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_Program (const SimControlScheme_EnergyManagementScheme_Program_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_Program_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_ProgramCallingManager_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_ProgramCallingManager () const
      {
        return this->SimControlScheme_EnergyManagementScheme_ProgramCallingManager_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_ProgramCallingManager_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_ProgramCallingManager ()
      {
        return this->SimControlScheme_EnergyManagementScheme_ProgramCallingManager_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_ProgramCallingManager (const SimControlScheme_EnergyManagementScheme_ProgramCallingManager_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_ProgramCallingManager_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_Subroutine_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_Subroutine () const
      {
        return this->SimControlScheme_EnergyManagementScheme_Subroutine_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_Subroutine_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_Subroutine ()
      {
        return this->SimControlScheme_EnergyManagementScheme_Subroutine_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_Subroutine (const SimControlScheme_EnergyManagementScheme_Subroutine_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_Subroutine_ = s;
      }

      const SimModel::SimControlScheme_EnergyManagementScheme_TrendVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_TrendVariable () const
      {
        return this->SimControlScheme_EnergyManagementScheme_TrendVariable_;
      }

      SimModel::SimControlScheme_EnergyManagementScheme_TrendVariable_sequence& SimModel::
      SimControlScheme_EnergyManagementScheme_TrendVariable ()
      {
        return this->SimControlScheme_EnergyManagementScheme_TrendVariable_;
      }

      void SimModel::
      SimControlScheme_EnergyManagementScheme_TrendVariable (const SimControlScheme_EnergyManagementScheme_TrendVariable_sequence& s)
      {
        this->SimControlScheme_EnergyManagementScheme_TrendVariable_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceExport_FromVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_FromVariable () const
      {
        return this->SimControlScheme_ExternalInterfaceExport_FromVariable_;
      }

      SimModel::SimControlScheme_ExternalInterfaceExport_FromVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_FromVariable ()
      {
        return this->SimControlScheme_ExternalInterfaceExport_FromVariable_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceExport_FromVariable (const SimControlScheme_ExternalInterfaceExport_FromVariable_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceExport_FromVariable_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceExport_ToActuator_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_ToActuator () const
      {
        return this->SimControlScheme_ExternalInterfaceExport_ToActuator_;
      }

      SimModel::SimControlScheme_ExternalInterfaceExport_ToActuator_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_ToActuator ()
      {
        return this->SimControlScheme_ExternalInterfaceExport_ToActuator_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceExport_ToActuator (const SimControlScheme_ExternalInterfaceExport_ToActuator_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceExport_ToActuator_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceExport_ToSchedule_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_ToSchedule () const
      {
        return this->SimControlScheme_ExternalInterfaceExport_ToSchedule_;
      }

      SimModel::SimControlScheme_ExternalInterfaceExport_ToSchedule_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_ToSchedule ()
      {
        return this->SimControlScheme_ExternalInterfaceExport_ToSchedule_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceExport_ToSchedule (const SimControlScheme_ExternalInterfaceExport_ToSchedule_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceExport_ToSchedule_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceExport_ToVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_ToVariable () const
      {
        return this->SimControlScheme_ExternalInterfaceExport_ToVariable_;
      }

      SimModel::SimControlScheme_ExternalInterfaceExport_ToVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceExport_ToVariable ()
      {
        return this->SimControlScheme_ExternalInterfaceExport_ToVariable_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceExport_ToVariable (const SimControlScheme_ExternalInterfaceExport_ToVariable_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceExport_ToVariable_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceImport_Default_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_Default () const
      {
        return this->SimControlScheme_ExternalInterfaceImport_Default_;
      }

      SimModel::SimControlScheme_ExternalInterfaceImport_Default_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_Default ()
      {
        return this->SimControlScheme_ExternalInterfaceImport_Default_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceImport_Default (const SimControlScheme_ExternalInterfaceImport_Default_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceImport_Default_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceImport_FromVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_FromVariable () const
      {
        return this->SimControlScheme_ExternalInterfaceImport_FromVariable_;
      }

      SimModel::SimControlScheme_ExternalInterfaceImport_FromVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_FromVariable ()
      {
        return this->SimControlScheme_ExternalInterfaceImport_FromVariable_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceImport_FromVariable (const SimControlScheme_ExternalInterfaceImport_FromVariable_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceImport_FromVariable_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceImport_ToActuator_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_ToActuator () const
      {
        return this->SimControlScheme_ExternalInterfaceImport_ToActuator_;
      }

      SimModel::SimControlScheme_ExternalInterfaceImport_ToActuator_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_ToActuator ()
      {
        return this->SimControlScheme_ExternalInterfaceImport_ToActuator_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceImport_ToActuator (const SimControlScheme_ExternalInterfaceImport_ToActuator_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceImport_ToActuator_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceImport_ToSchedule_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_ToSchedule () const
      {
        return this->SimControlScheme_ExternalInterfaceImport_ToSchedule_;
      }

      SimModel::SimControlScheme_ExternalInterfaceImport_ToSchedule_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_ToSchedule ()
      {
        return this->SimControlScheme_ExternalInterfaceImport_ToSchedule_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceImport_ToSchedule (const SimControlScheme_ExternalInterfaceImport_ToSchedule_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceImport_ToSchedule_ = s;
      }

      const SimModel::SimControlScheme_ExternalInterfaceImport_ToVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_ToVariable () const
      {
        return this->SimControlScheme_ExternalInterfaceImport_ToVariable_;
      }

      SimModel::SimControlScheme_ExternalInterfaceImport_ToVariable_sequence& SimModel::
      SimControlScheme_ExternalInterfaceImport_ToVariable ()
      {
        return this->SimControlScheme_ExternalInterfaceImport_ToVariable_;
      }

      void SimModel::
      SimControlScheme_ExternalInterfaceImport_ToVariable (const SimControlScheme_ExternalInterfaceImport_ToVariable_sequence& s)
      {
        this->SimControlScheme_ExternalInterfaceImport_ToVariable_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme (const SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_sequence& SimModel::
      SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme () const
      {
        return this->SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_;
      }

      SimModel::SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_sequence& SimModel::
      SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme ()
      {
        return this->SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme (const SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme (const SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme (const SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme (const SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme (const SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme (const SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme (const SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme (const SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_sequence& SimModel::
      SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint () const
      {
        return this->SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_;
      }

      SimModel::SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_sequence& SimModel::
      SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint ()
      {
        return this->SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint (const SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_ = s;
      }

      const SimModel::SimControlScheme_OperatingScheme_UncontrolledOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_UncontrolledOperationScheme () const
      {
        return this->SimControlScheme_OperatingScheme_UncontrolledOperationScheme_;
      }

      SimModel::SimControlScheme_OperatingScheme_UncontrolledOperationScheme_sequence& SimModel::
      SimControlScheme_OperatingScheme_UncontrolledOperationScheme ()
      {
        return this->SimControlScheme_OperatingScheme_UncontrolledOperationScheme_;
      }

      void SimModel::
      SimControlScheme_OperatingScheme_UncontrolledOperationScheme (const SimControlScheme_OperatingScheme_UncontrolledOperationScheme_sequence& s)
      {
        this->SimControlScheme_OperatingScheme_UncontrolledOperationScheme_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity () const
      {
        return this->SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity ()
      {
        return this->SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity (const SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity () const
      {
        return this->SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity ()
      {
        return this->SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity (const SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_ColdestZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ColdestZoneReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_ColdestZoneReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_ColdestZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ColdestZoneReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_ColdestZoneReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_ColdestZoneReset (const SimControlScheme_SetpointManagerScheme_ColdestZoneReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_ColdestZoneReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_DuctStaticPressure_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_DuctStaticPressure () const
      {
        return this->SimControlScheme_SetpointManagerScheme_DuctStaticPressure_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_DuctStaticPressure_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_DuctStaticPressure ()
      {
        return this->SimControlScheme_SetpointManagerScheme_DuctStaticPressure_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_DuctStaticPressure (const SimControlScheme_SetpointManagerScheme_DuctStaticPressure_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_DuctStaticPressure_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_EnteringReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_EnteringReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_EnteringReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_EnteringReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_EnteringReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_EnteringReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_EnteringReset (const SimControlScheme_SetpointManagerScheme_EnteringReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_EnteringReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_EnteringResetIdeal () const
      {
        return this->SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_EnteringResetIdeal ()
      {
        return this->SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_EnteringResetIdeal (const SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_FollowGroundTemperature () const
      {
        return this->SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_FollowGroundTemperature ()
      {
        return this->SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_FollowGroundTemperature (const SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature () const
      {
        return this->SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature ()
      {
        return this->SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature (const SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature () const
      {
        return this->SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature ()
      {
        return this->SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature (const SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset (const SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_MixedAir_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_MixedAir () const
      {
        return this->SimControlScheme_SetpointManagerScheme_MixedAir_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_MixedAir_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_MixedAir ()
      {
        return this->SimControlScheme_SetpointManagerScheme_MixedAir_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_MixedAir (const SimControlScheme_SetpointManagerScheme_MixedAir_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_MixedAir_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_MostHumidZoneReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_MostHumidZoneReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_MostHumidZoneReset (const SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat () const
      {
        return this->SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat ()
      {
        return this->SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat (const SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_OutdoorAirReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_OutdoorAirReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_OutdoorAirReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_OutdoorAirReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_OutdoorAirReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_OutdoorAirReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_OutdoorAirReset (const SimControlScheme_SetpointManagerScheme_OutdoorAirReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_OutdoorAirReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow () const
      {
        return this->SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow ()
      {
        return this->SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow (const SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint () const
      {
        return this->SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint ()
      {
        return this->SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint (const SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ScheduledSetpoint () const
      {
        return this->SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ScheduledSetpoint ()
      {
        return this->SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_ScheduledSetpoint (const SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled (const SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint (const SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Cooling () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Cooling ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Cooling (const SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Heating_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Heating () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Heating_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Heating_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Heating ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Heating_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Heating (const SimControlScheme_SetpointManagerScheme_SingleZone_Heating_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_Heating_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum (const SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum (const SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling (const SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating (const SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Reheat () const
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Reheat ()
      {
        return this->SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_SingleZone_Reheat (const SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow () const
      {
        return this->SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow ()
      {
        return this->SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow (const SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_WarmestZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_WarmestZoneReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_WarmestZoneReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_WarmestZoneReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_WarmestZoneReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_WarmestZoneReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_WarmestZoneReset (const SimControlScheme_SetpointManagerScheme_WarmestZoneReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_WarmestZoneReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset (const SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset () const
      {
        return this->SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_;
      }

      SimModel::SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_sequence& SimModel::
      SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset ()
      {
        return this->SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_;
      }

      void SimModel::
      SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset (const SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_sequence& s)
      {
        this->SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_DualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointScheme_DualSetpoint () const
      {
        return this->SimControlScheme_SetpointScheme_DualSetpoint_;
      }

      SimModel::SimControlScheme_SetpointScheme_DualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointScheme_DualSetpoint ()
      {
        return this->SimControlScheme_SetpointScheme_DualSetpoint_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_DualSetpoint (const SimControlScheme_SetpointScheme_DualSetpoint_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_DualSetpoint_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_SingleCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_SingleCooling () const
      {
        return this->SimControlScheme_SetpointScheme_SingleCooling_;
      }

      SimModel::SimControlScheme_SetpointScheme_SingleCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_SingleCooling ()
      {
        return this->SimControlScheme_SetpointScheme_SingleCooling_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_SingleCooling (const SimControlScheme_SetpointScheme_SingleCooling_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_SingleCooling_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_SingleHeating_sequence& SimModel::
      SimControlScheme_SetpointScheme_SingleHeating () const
      {
        return this->SimControlScheme_SetpointScheme_SingleHeating_;
      }

      SimModel::SimControlScheme_SetpointScheme_SingleHeating_sequence& SimModel::
      SimControlScheme_SetpointScheme_SingleHeating ()
      {
        return this->SimControlScheme_SetpointScheme_SingleHeating_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_SingleHeating (const SimControlScheme_SetpointScheme_SingleHeating_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_SingleHeating_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_SingleHeatingOrCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_SingleHeatingOrCooling () const
      {
        return this->SimControlScheme_SetpointScheme_SingleHeatingOrCooling_;
      }

      SimModel::SimControlScheme_SetpointScheme_SingleHeatingOrCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_SingleHeatingOrCooling ()
      {
        return this->SimControlScheme_SetpointScheme_SingleHeatingOrCooling_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_SingleHeatingOrCooling (const SimControlScheme_SetpointScheme_SingleHeatingOrCooling_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_SingleHeatingOrCooling_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint () const
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_;
      }

      SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint ()
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint (const SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling () const
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_;
      }

      SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling ()
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling (const SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating () const
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_;
      }

      SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating ()
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating (const SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_ = s;
      }

      const SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling () const
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_;
      }

      SimModel::SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_sequence& SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling ()
      {
        return this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_;
      }

      void SimModel::
      SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling (const SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_sequence& s)
      {
        this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_ = s;
      }

      const SimModel::SimCost_ComponentCost_Adjustments_sequence& SimModel::
      SimCost_ComponentCost_Adjustments () const
      {
        return this->SimCost_ComponentCost_Adjustments_;
      }

      SimModel::SimCost_ComponentCost_Adjustments_sequence& SimModel::
      SimCost_ComponentCost_Adjustments ()
      {
        return this->SimCost_ComponentCost_Adjustments_;
      }

      void SimModel::
      SimCost_ComponentCost_Adjustments (const SimCost_ComponentCost_Adjustments_sequence& s)
      {
        this->SimCost_ComponentCost_Adjustments_ = s;
      }

      const SimModel::SimCost_ComponentCost_LineItem_sequence& SimModel::
      SimCost_ComponentCost_LineItem () const
      {
        return this->SimCost_ComponentCost_LineItem_;
      }

      SimModel::SimCost_ComponentCost_LineItem_sequence& SimModel::
      SimCost_ComponentCost_LineItem ()
      {
        return this->SimCost_ComponentCost_LineItem_;
      }

      void SimModel::
      SimCost_ComponentCost_LineItem (const SimCost_ComponentCost_LineItem_sequence& s)
      {
        this->SimCost_ComponentCost_LineItem_ = s;
      }

      const SimModel::SimCost_ComponentCost_Reference_sequence& SimModel::
      SimCost_ComponentCost_Reference () const
      {
        return this->SimCost_ComponentCost_Reference_;
      }

      SimModel::SimCost_ComponentCost_Reference_sequence& SimModel::
      SimCost_ComponentCost_Reference ()
      {
        return this->SimCost_ComponentCost_Reference_;
      }

      void SimModel::
      SimCost_ComponentCost_Reference (const SimCost_ComponentCost_Reference_sequence& s)
      {
        this->SimCost_ComponentCost_Reference_ = s;
      }

      const SimModel::SimCost_Default_Default_sequence& SimModel::
      SimCost_Default_Default () const
      {
        return this->SimCost_Default_Default_;
      }

      SimModel::SimCost_Default_Default_sequence& SimModel::
      SimCost_Default_Default ()
      {
        return this->SimCost_Default_Default_;
      }

      void SimModel::
      SimCost_Default_Default (const SimCost_Default_Default_sequence& s)
      {
        this->SimCost_Default_Default_ = s;
      }

      const SimModel::SimCost_LifeCycleCost_NonrecurringCost_sequence& SimModel::
      SimCost_LifeCycleCost_NonrecurringCost () const
      {
        return this->SimCost_LifeCycleCost_NonrecurringCost_;
      }

      SimModel::SimCost_LifeCycleCost_NonrecurringCost_sequence& SimModel::
      SimCost_LifeCycleCost_NonrecurringCost ()
      {
        return this->SimCost_LifeCycleCost_NonrecurringCost_;
      }

      void SimModel::
      SimCost_LifeCycleCost_NonrecurringCost (const SimCost_LifeCycleCost_NonrecurringCost_sequence& s)
      {
        this->SimCost_LifeCycleCost_NonrecurringCost_ = s;
      }

      const SimModel::SimCost_LifeCycleCost_Parameters_sequence& SimModel::
      SimCost_LifeCycleCost_Parameters () const
      {
        return this->SimCost_LifeCycleCost_Parameters_;
      }

      SimModel::SimCost_LifeCycleCost_Parameters_sequence& SimModel::
      SimCost_LifeCycleCost_Parameters ()
      {
        return this->SimCost_LifeCycleCost_Parameters_;
      }

      void SimModel::
      SimCost_LifeCycleCost_Parameters (const SimCost_LifeCycleCost_Parameters_sequence& s)
      {
        this->SimCost_LifeCycleCost_Parameters_ = s;
      }

      const SimModel::SimCost_LifeCycleCost_RecurringCosts_sequence& SimModel::
      SimCost_LifeCycleCost_RecurringCosts () const
      {
        return this->SimCost_LifeCycleCost_RecurringCosts_;
      }

      SimModel::SimCost_LifeCycleCost_RecurringCosts_sequence& SimModel::
      SimCost_LifeCycleCost_RecurringCosts ()
      {
        return this->SimCost_LifeCycleCost_RecurringCosts_;
      }

      void SimModel::
      SimCost_LifeCycleCost_RecurringCosts (const SimCost_LifeCycleCost_RecurringCosts_sequence& s)
      {
        this->SimCost_LifeCycleCost_RecurringCosts_ = s;
      }

      const SimModel::SimCost_LifeCycleCost_UseAdjustment_sequence& SimModel::
      SimCost_LifeCycleCost_UseAdjustment () const
      {
        return this->SimCost_LifeCycleCost_UseAdjustment_;
      }

      SimModel::SimCost_LifeCycleCost_UseAdjustment_sequence& SimModel::
      SimCost_LifeCycleCost_UseAdjustment ()
      {
        return this->SimCost_LifeCycleCost_UseAdjustment_;
      }

      void SimModel::
      SimCost_LifeCycleCost_UseAdjustment (const SimCost_LifeCycleCost_UseAdjustment_sequence& s)
      {
        this->SimCost_LifeCycleCost_UseAdjustment_ = s;
      }

      const SimModel::SimCost_LifeCycleCost_UsePriceEscalation_sequence& SimModel::
      SimCost_LifeCycleCost_UsePriceEscalation () const
      {
        return this->SimCost_LifeCycleCost_UsePriceEscalation_;
      }

      SimModel::SimCost_LifeCycleCost_UsePriceEscalation_sequence& SimModel::
      SimCost_LifeCycleCost_UsePriceEscalation ()
      {
        return this->SimCost_LifeCycleCost_UsePriceEscalation_;
      }

      void SimModel::
      SimCost_LifeCycleCost_UsePriceEscalation (const SimCost_LifeCycleCost_UsePriceEscalation_sequence& s)
      {
        this->SimCost_LifeCycleCost_UsePriceEscalation_ = s;
      }

      const SimModel::SimCost_UtilityCost_ChargeBlock_sequence& SimModel::
      SimCost_UtilityCost_ChargeBlock () const
      {
        return this->SimCost_UtilityCost_ChargeBlock_;
      }

      SimModel::SimCost_UtilityCost_ChargeBlock_sequence& SimModel::
      SimCost_UtilityCost_ChargeBlock ()
      {
        return this->SimCost_UtilityCost_ChargeBlock_;
      }

      void SimModel::
      SimCost_UtilityCost_ChargeBlock (const SimCost_UtilityCost_ChargeBlock_sequence& s)
      {
        this->SimCost_UtilityCost_ChargeBlock_ = s;
      }

      const SimModel::SimCost_UtilityCost_ChargeSimple_sequence& SimModel::
      SimCost_UtilityCost_ChargeSimple () const
      {
        return this->SimCost_UtilityCost_ChargeSimple_;
      }

      SimModel::SimCost_UtilityCost_ChargeSimple_sequence& SimModel::
      SimCost_UtilityCost_ChargeSimple ()
      {
        return this->SimCost_UtilityCost_ChargeSimple_;
      }

      void SimModel::
      SimCost_UtilityCost_ChargeSimple (const SimCost_UtilityCost_ChargeSimple_sequence& s)
      {
        this->SimCost_UtilityCost_ChargeSimple_ = s;
      }

      const SimModel::SimCost_UtilityCost_CostRatchet_sequence& SimModel::
      SimCost_UtilityCost_CostRatchet () const
      {
        return this->SimCost_UtilityCost_CostRatchet_;
      }

      SimModel::SimCost_UtilityCost_CostRatchet_sequence& SimModel::
      SimCost_UtilityCost_CostRatchet ()
      {
        return this->SimCost_UtilityCost_CostRatchet_;
      }

      void SimModel::
      SimCost_UtilityCost_CostRatchet (const SimCost_UtilityCost_CostRatchet_sequence& s)
      {
        this->SimCost_UtilityCost_CostRatchet_ = s;
      }

      const SimModel::SimCost_UtilityCost_CostVariable_sequence& SimModel::
      SimCost_UtilityCost_CostVariable () const
      {
        return this->SimCost_UtilityCost_CostVariable_;
      }

      SimModel::SimCost_UtilityCost_CostVariable_sequence& SimModel::
      SimCost_UtilityCost_CostVariable ()
      {
        return this->SimCost_UtilityCost_CostVariable_;
      }

      void SimModel::
      SimCost_UtilityCost_CostVariable (const SimCost_UtilityCost_CostVariable_sequence& s)
      {
        this->SimCost_UtilityCost_CostVariable_ = s;
      }

      const SimModel::SimCost_UtilityCost_Qualify_sequence& SimModel::
      SimCost_UtilityCost_Qualify () const
      {
        return this->SimCost_UtilityCost_Qualify_;
      }

      SimModel::SimCost_UtilityCost_Qualify_sequence& SimModel::
      SimCost_UtilityCost_Qualify ()
      {
        return this->SimCost_UtilityCost_Qualify_;
      }

      void SimModel::
      SimCost_UtilityCost_Qualify (const SimCost_UtilityCost_Qualify_sequence& s)
      {
        this->SimCost_UtilityCost_Qualify_ = s;
      }

      const SimModel::SimCost_UtilityCost_Tariff_sequence& SimModel::
      SimCost_UtilityCost_Tariff () const
      {
        return this->SimCost_UtilityCost_Tariff_;
      }

      SimModel::SimCost_UtilityCost_Tariff_sequence& SimModel::
      SimCost_UtilityCost_Tariff ()
      {
        return this->SimCost_UtilityCost_Tariff_;
      }

      void SimModel::
      SimCost_UtilityCost_Tariff (const SimCost_UtilityCost_Tariff_sequence& s)
      {
        this->SimCost_UtilityCost_Tariff_ = s;
      }

      const SimModel::SimCurtainWall_CurtainWall_Default_sequence& SimModel::
      SimCurtainWall_CurtainWall_Default () const
      {
        return this->SimCurtainWall_CurtainWall_Default_;
      }

      SimModel::SimCurtainWall_CurtainWall_Default_sequence& SimModel::
      SimCurtainWall_CurtainWall_Default ()
      {
        return this->SimCurtainWall_CurtainWall_Default_;
      }

      void SimModel::
      SimCurtainWall_CurtainWall_Default (const SimCurtainWall_CurtainWall_Default_sequence& s)
      {
        this->SimCurtainWall_CurtainWall_Default_ = s;
      }

      const SimModel::SimCurtainWallParams_CurtainWall_Default_sequence& SimModel::
      SimCurtainWallParams_CurtainWall_Default () const
      {
        return this->SimCurtainWallParams_CurtainWall_Default_;
      }

      SimModel::SimCurtainWallParams_CurtainWall_Default_sequence& SimModel::
      SimCurtainWallParams_CurtainWall_Default ()
      {
        return this->SimCurtainWallParams_CurtainWall_Default_;
      }

      void SimModel::
      SimCurtainWallParams_CurtainWall_Default (const SimCurtainWallParams_CurtainWall_Default_sequence& s)
      {
        this->SimCurtainWallParams_CurtainWall_Default_ = s;
      }

      const SimModel::SimCurtainWallType_CurtainWall_Default_sequence& SimModel::
      SimCurtainWallType_CurtainWall_Default () const
      {
        return this->SimCurtainWallType_CurtainWall_Default_;
      }

      SimModel::SimCurtainWallType_CurtainWall_Default_sequence& SimModel::
      SimCurtainWallType_CurtainWall_Default ()
      {
        return this->SimCurtainWallType_CurtainWall_Default_;
      }

      void SimModel::
      SimCurtainWallType_CurtainWall_Default (const SimCurtainWallType_CurtainWall_Default_sequence& s)
      {
        this->SimCurtainWallType_CurtainWall_Default_ = s;
      }

      const SimModel::SimCurveStyle_CurveStyle_Default_sequence& SimModel::
      SimCurveStyle_CurveStyle_Default () const
      {
        return this->SimCurveStyle_CurveStyle_Default_;
      }

      SimModel::SimCurveStyle_CurveStyle_Default_sequence& SimModel::
      SimCurveStyle_CurveStyle_Default ()
      {
        return this->SimCurveStyle_CurveStyle_Default_;
      }

      void SimModel::
      SimCurveStyle_CurveStyle_Default (const SimCurveStyle_CurveStyle_Default_sequence& s)
      {
        this->SimCurveStyle_CurveStyle_Default_ = s;
      }

      const SimModel::SimCurveStyle_CurveStyle_Font_sequence& SimModel::
      SimCurveStyle_CurveStyle_Font () const
      {
        return this->SimCurveStyle_CurveStyle_Font_;
      }

      SimModel::SimCurveStyle_CurveStyle_Font_sequence& SimModel::
      SimCurveStyle_CurveStyle_Font ()
      {
        return this->SimCurveStyle_CurveStyle_Font_;
      }

      void SimModel::
      SimCurveStyle_CurveStyle_Font (const SimCurveStyle_CurveStyle_Font_sequence& s)
      {
        this->SimCurveStyle_CurveStyle_Font_ = s;
      }

      const SimModel::SimCurveStyle_CurveStyle_FontAndScaling_sequence& SimModel::
      SimCurveStyle_CurveStyle_FontAndScaling () const
      {
        return this->SimCurveStyle_CurveStyle_FontAndScaling_;
      }

      SimModel::SimCurveStyle_CurveStyle_FontAndScaling_sequence& SimModel::
      SimCurveStyle_CurveStyle_FontAndScaling ()
      {
        return this->SimCurveStyle_CurveStyle_FontAndScaling_;
      }

      void SimModel::
      SimCurveStyle_CurveStyle_FontAndScaling (const SimCurveStyle_CurveStyle_FontAndScaling_sequence& s)
      {
        this->SimCurveStyle_CurveStyle_FontAndScaling_ = s;
      }

      const SimModel::SimCurveStyle_CurveStyle_FontPattern_sequence& SimModel::
      SimCurveStyle_CurveStyle_FontPattern () const
      {
        return this->SimCurveStyle_CurveStyle_FontPattern_;
      }

      SimModel::SimCurveStyle_CurveStyle_FontPattern_sequence& SimModel::
      SimCurveStyle_CurveStyle_FontPattern ()
      {
        return this->SimCurveStyle_CurveStyle_FontPattern_;
      }

      void SimModel::
      SimCurveStyle_CurveStyle_FontPattern (const SimCurveStyle_CurveStyle_FontPattern_sequence& s)
      {
        this->SimCurveStyle_CurveStyle_FontPattern_ = s;
      }

      const SimModel::SimDaylightingAssembly_DaylightingAssembly_LightShelf_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightShelf () const
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightShelf_;
      }

      SimModel::SimDaylightingAssembly_DaylightingAssembly_LightShelf_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightShelf ()
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightShelf_;
      }

      void SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightShelf (const SimDaylightingAssembly_DaylightingAssembly_LightShelf_sequence& s)
      {
        this->SimDaylightingAssembly_DaylightingAssembly_LightShelf_ = s;
      }

      const SimModel::SimDaylightingAssembly_DaylightingAssembly_LightTube_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightTube () const
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightTube_;
      }

      SimModel::SimDaylightingAssembly_DaylightingAssembly_LightTube_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightTube ()
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightTube_;
      }

      void SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightTube (const SimDaylightingAssembly_DaylightingAssembly_LightTube_sequence& s)
      {
        this->SimDaylightingAssembly_DaylightingAssembly_LightTube_ = s;
      }

      const SimModel::SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface () const
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_;
      }

      SimModel::SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface ()
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_;
      }

      void SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface (const SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_sequence& s)
      {
        this->SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_ = s;
      }

      const SimModel::SimDaylightingAssembly_DaylightingAssembly_LightWell_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightWell () const
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightWell_;
      }

      SimModel::SimDaylightingAssembly_DaylightingAssembly_LightWell_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightWell ()
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightWell_;
      }

      void SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightWell (const SimDaylightingAssembly_DaylightingAssembly_LightWell_sequence& s)
      {
        this->SimDaylightingAssembly_DaylightingAssembly_LightWell_ = s;
      }

      const SimModel::SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface () const
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_;
      }

      SimModel::SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_sequence& SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface ()
      {
        return this->SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_;
      }

      void SimModel::
      SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface (const SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_sequence& s)
      {
        this->SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_ = s;
      }

      const SimModel::SimDerivedUnitType_DerivedUnit_Default_sequence& SimModel::
      SimDerivedUnitType_DerivedUnit_Default () const
      {
        return this->SimDerivedUnitType_DerivedUnit_Default_;
      }

      SimModel::SimDerivedUnitType_DerivedUnit_Default_sequence& SimModel::
      SimDerivedUnitType_DerivedUnit_Default ()
      {
        return this->SimDerivedUnitType_DerivedUnit_Default_;
      }

      void SimModel::
      SimDerivedUnitType_DerivedUnit_Default (const SimDerivedUnitType_DerivedUnit_Default_sequence& s)
      {
        this->SimDerivedUnitType_DerivedUnit_Default_ = s;
      }

      const SimModel::SimDistributionPort_AirFlowPort_Air_In_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Air_In () const
      {
        return this->SimDistributionPort_AirFlowPort_Air_In_;
      }

      SimModel::SimDistributionPort_AirFlowPort_Air_In_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Air_In ()
      {
        return this->SimDistributionPort_AirFlowPort_Air_In_;
      }

      void SimModel::
      SimDistributionPort_AirFlowPort_Air_In (const SimDistributionPort_AirFlowPort_Air_In_sequence& s)
      {
        this->SimDistributionPort_AirFlowPort_Air_In_ = s;
      }

      const SimModel::SimDistributionPort_AirFlowPort_Air_InOrOut_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Air_InOrOut () const
      {
        return this->SimDistributionPort_AirFlowPort_Air_InOrOut_;
      }

      SimModel::SimDistributionPort_AirFlowPort_Air_InOrOut_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Air_InOrOut ()
      {
        return this->SimDistributionPort_AirFlowPort_Air_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_AirFlowPort_Air_InOrOut (const SimDistributionPort_AirFlowPort_Air_InOrOut_sequence& s)
      {
        this->SimDistributionPort_AirFlowPort_Air_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_AirFlowPort_Air_Out_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Air_Out () const
      {
        return this->SimDistributionPort_AirFlowPort_Air_Out_;
      }

      SimModel::SimDistributionPort_AirFlowPort_Air_Out_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Air_Out ()
      {
        return this->SimDistributionPort_AirFlowPort_Air_Out_;
      }

      void SimModel::
      SimDistributionPort_AirFlowPort_Air_Out (const SimDistributionPort_AirFlowPort_Air_Out_sequence& s)
      {
        this->SimDistributionPort_AirFlowPort_Air_Out_ = s;
      }

      const SimModel::SimDistributionPort_AirFlowPort_Default_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Default () const
      {
        return this->SimDistributionPort_AirFlowPort_Default_;
      }

      SimModel::SimDistributionPort_AirFlowPort_Default_sequence& SimModel::
      SimDistributionPort_AirFlowPort_Default ()
      {
        return this->SimDistributionPort_AirFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_AirFlowPort_Default (const SimDistributionPort_AirFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_AirFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_AirFlowPort_ExhaustAir_Out_sequence& SimModel::
      SimDistributionPort_AirFlowPort_ExhaustAir_Out () const
      {
        return this->SimDistributionPort_AirFlowPort_ExhaustAir_Out_;
      }

      SimModel::SimDistributionPort_AirFlowPort_ExhaustAir_Out_sequence& SimModel::
      SimDistributionPort_AirFlowPort_ExhaustAir_Out ()
      {
        return this->SimDistributionPort_AirFlowPort_ExhaustAir_Out_;
      }

      void SimModel::
      SimDistributionPort_AirFlowPort_ExhaustAir_Out (const SimDistributionPort_AirFlowPort_ExhaustAir_Out_sequence& s)
      {
        this->SimDistributionPort_AirFlowPort_ExhaustAir_Out_ = s;
      }

      const SimModel::SimDistributionPort_AirFlowPort_OutdoorAir_In_sequence& SimModel::
      SimDistributionPort_AirFlowPort_OutdoorAir_In () const
      {
        return this->SimDistributionPort_AirFlowPort_OutdoorAir_In_;
      }

      SimModel::SimDistributionPort_AirFlowPort_OutdoorAir_In_sequence& SimModel::
      SimDistributionPort_AirFlowPort_OutdoorAir_In ()
      {
        return this->SimDistributionPort_AirFlowPort_OutdoorAir_In_;
      }

      void SimModel::
      SimDistributionPort_AirFlowPort_OutdoorAir_In (const SimDistributionPort_AirFlowPort_OutdoorAir_In_sequence& s)
      {
        this->SimDistributionPort_AirFlowPort_OutdoorAir_In_ = s;
      }

      const SimModel::SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut (const SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimDistributionPort_ChilledWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Default () const
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Default_;
      }

      SimModel::SimDistributionPort_ChilledWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Default ()
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Default (const SimDistributionPort_ChilledWaterFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_ChilledWaterFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn (const SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimDistributionPort_ChilledWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_In () const
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Water_In_;
      }

      SimModel::SimDistributionPort_ChilledWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_In ()
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_In (const SimDistributionPort_ChilledWaterFlowPort_Water_In_sequence& s)
      {
        this->SimDistributionPort_ChilledWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut () const
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut ()
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut (const SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_ChilledWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_Out () const
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Water_Out_;
      }

      SimModel::SimDistributionPort_ChilledWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_Out ()
      {
        return this->SimDistributionPort_ChilledWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimDistributionPort_ChilledWaterFlowPort_Water_Out (const SimDistributionPort_ChilledWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimDistributionPort_ChilledWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimDistributionPort_CondenserFlowPort_CondenserFlow_In_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_In () const
      {
        return this->SimDistributionPort_CondenserFlowPort_CondenserFlow_In_;
      }

      SimModel::SimDistributionPort_CondenserFlowPort_CondenserFlow_In_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_In ()
      {
        return this->SimDistributionPort_CondenserFlowPort_CondenserFlow_In_;
      }

      void SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_In (const SimDistributionPort_CondenserFlowPort_CondenserFlow_In_sequence& s)
      {
        this->SimDistributionPort_CondenserFlowPort_CondenserFlow_In_ = s;
      }

      const SimModel::SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut () const
      {
        return this->SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_;
      }

      SimModel::SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut ()
      {
        return this->SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut (const SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_sequence& s)
      {
        this->SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_Out () const
      {
        return this->SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_;
      }

      SimModel::SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_Out ()
      {
        return this->SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_;
      }

      void SimModel::
      SimDistributionPort_CondenserFlowPort_CondenserFlow_Out (const SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_sequence& s)
      {
        this->SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_ = s;
      }

      const SimModel::SimDistributionPort_CondenserFlowPort_Default_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_Default () const
      {
        return this->SimDistributionPort_CondenserFlowPort_Default_;
      }

      SimModel::SimDistributionPort_CondenserFlowPort_Default_sequence& SimModel::
      SimDistributionPort_CondenserFlowPort_Default ()
      {
        return this->SimDistributionPort_CondenserFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_CondenserFlowPort_Default (const SimDistributionPort_CondenserFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_CondenserFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_AirLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_AirLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_AirLoop_Default (const SimDistributionPort_DigitalControl_AirLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_AirLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CHWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_CHWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_Default (const SimDistributionPort_DigitalControl_CHWLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CHWLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_CWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CWLoop_Default (const SimDistributionPort_DigitalControl_CWLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CWLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_HWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_HWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_HWLoop_Default (const SimDistributionPort_DigitalControl_HWLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_HWLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_MxWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_MxWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_Default (const SimDistributionPort_DigitalControl_MxWLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_MxWLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_RFGLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_RFGLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_Default (const SimDistributionPort_DigitalControl_RFGLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_RFGLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_SHWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_SHWLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_Default (const SimDistributionPort_DigitalControl_SHWLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_SHWLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_STMLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_STMLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_STMLoop_Default (const SimDistributionPort_DigitalControl_STMLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_STMLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_VRFLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_Default () const
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_Default_;
      }

      SimModel::SimDistributionPort_DigitalControl_VRFLoop_Default_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_Default ()
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_Default (const SimDistributionPort_DigitalControl_VRFLoop_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_VRFLoop_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In (const SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out (const SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControlPort_Default_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_Default () const
      {
        return this->SimDistributionPort_DigitalControlPort_Default_;
      }

      SimModel::SimDistributionPort_DigitalControlPort_Default_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_Default ()
      {
        return this->SimDistributionPort_DigitalControlPort_Default_;
      }

      void SimModel::
      SimDistributionPort_DigitalControlPort_Default (const SimDistributionPort_DigitalControlPort_Default_sequence& s)
      {
        this->SimDistributionPort_DigitalControlPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControlPort_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_In () const
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalSignal_In_;
      }

      SimModel::SimDistributionPort_DigitalControlPort_DigitalSignal_In_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_In ()
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalSignal_In_;
      }

      void SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_In (const SimDistributionPort_DigitalControlPort_DigitalSignal_In_sequence& s)
      {
        this->SimDistributionPort_DigitalControlPort_DigitalSignal_In_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut () const
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_;
      }

      SimModel::SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut ()
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut (const SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControlPort_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_Out () const
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalSignal_Out_;
      }

      SimModel::SimDistributionPort_DigitalControlPort_DigitalSignal_Out_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_Out ()
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalSignal_Out_;
      }

      void SimModel::
      SimDistributionPort_DigitalControlPort_DigitalSignal_Out (const SimDistributionPort_DigitalControlPort_DigitalSignal_Out_sequence& s)
      {
        this->SimDistributionPort_DigitalControlPort_DigitalSignal_Out_ = s;
      }

      const SimModel::SimDistributionPort_DigitalControlPort_DigitalVirtual_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalVirtual () const
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalVirtual_;
      }

      SimModel::SimDistributionPort_DigitalControlPort_DigitalVirtual_sequence& SimModel::
      SimDistributionPort_DigitalControlPort_DigitalVirtual ()
      {
        return this->SimDistributionPort_DigitalControlPort_DigitalVirtual_;
      }

      void SimModel::
      SimDistributionPort_DigitalControlPort_DigitalVirtual (const SimDistributionPort_DigitalControlPort_DigitalVirtual_sequence& s)
      {
        this->SimDistributionPort_DigitalControlPort_DigitalVirtual_ = s;
      }

      const SimModel::SimDistributionPort_DistributionPort_Default_sequence& SimModel::
      SimDistributionPort_DistributionPort_Default () const
      {
        return this->SimDistributionPort_DistributionPort_Default_;
      }

      SimModel::SimDistributionPort_DistributionPort_Default_sequence& SimModel::
      SimDistributionPort_DistributionPort_Default ()
      {
        return this->SimDistributionPort_DistributionPort_Default_;
      }

      void SimModel::
      SimDistributionPort_DistributionPort_Default (const SimDistributionPort_DistributionPort_Default_sequence& s)
      {
        this->SimDistributionPort_DistributionPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_ElectricalFlowPort_Default_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Default () const
      {
        return this->SimDistributionPort_ElectricalFlowPort_Default_;
      }

      SimModel::SimDistributionPort_ElectricalFlowPort_Default_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Default ()
      {
        return this->SimDistributionPort_ElectricalFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_ElectricalFlowPort_Default (const SimDistributionPort_ElectricalFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_ElectricalFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_ElectricalFlowPort_Electrical_In_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_In () const
      {
        return this->SimDistributionPort_ElectricalFlowPort_Electrical_In_;
      }

      SimModel::SimDistributionPort_ElectricalFlowPort_Electrical_In_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_In ()
      {
        return this->SimDistributionPort_ElectricalFlowPort_Electrical_In_;
      }

      void SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_In (const SimDistributionPort_ElectricalFlowPort_Electrical_In_sequence& s)
      {
        this->SimDistributionPort_ElectricalFlowPort_Electrical_In_ = s;
      }

      const SimModel::SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut () const
      {
        return this->SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_;
      }

      SimModel::SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut ()
      {
        return this->SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut (const SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_sequence& s)
      {
        this->SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_ElectricalFlowPort_Electrical_Out_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_Out () const
      {
        return this->SimDistributionPort_ElectricalFlowPort_Electrical_Out_;
      }

      SimModel::SimDistributionPort_ElectricalFlowPort_Electrical_Out_sequence& SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_Out ()
      {
        return this->SimDistributionPort_ElectricalFlowPort_Electrical_Out_;
      }

      void SimModel::
      SimDistributionPort_ElectricalFlowPort_Electrical_Out (const SimDistributionPort_ElectricalFlowPort_Electrical_Out_sequence& s)
      {
        this->SimDistributionPort_ElectricalFlowPort_Electrical_Out_ = s;
      }

      const SimModel::SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimDistributionPort_HotWaterFlowPort_CondensedWaterOut (const SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimDistributionPort_HotWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Default () const
      {
        return this->SimDistributionPort_HotWaterFlowPort_Default_;
      }

      SimModel::SimDistributionPort_HotWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Default ()
      {
        return this->SimDistributionPort_HotWaterFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_HotWaterFlowPort_Default (const SimDistributionPort_HotWaterFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_HotWaterFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn (const SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimDistributionPort_HotWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_In () const
      {
        return this->SimDistributionPort_HotWaterFlowPort_Water_In_;
      }

      SimModel::SimDistributionPort_HotWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_In ()
      {
        return this->SimDistributionPort_HotWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_In (const SimDistributionPort_HotWaterFlowPort_Water_In_sequence& s)
      {
        this->SimDistributionPort_HotWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimDistributionPort_HotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_InOrOut () const
      {
        return this->SimDistributionPort_HotWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimDistributionPort_HotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_InOrOut ()
      {
        return this->SimDistributionPort_HotWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_InOrOut (const SimDistributionPort_HotWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimDistributionPort_HotWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_HotWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_Out () const
      {
        return this->SimDistributionPort_HotWaterFlowPort_Water_Out_;
      }

      SimModel::SimDistributionPort_HotWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_Out ()
      {
        return this->SimDistributionPort_HotWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimDistributionPort_HotWaterFlowPort_Water_Out (const SimDistributionPort_HotWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimDistributionPort_HotWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut (const SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimDistributionPort_MixedWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Default () const
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Default_;
      }

      SimModel::SimDistributionPort_MixedWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Default ()
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_MixedWaterFlowPort_Default (const SimDistributionPort_MixedWaterFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_MixedWaterFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn (const SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimDistributionPort_MixedWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_In () const
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Water_In_;
      }

      SimModel::SimDistributionPort_MixedWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_In ()
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_In (const SimDistributionPort_MixedWaterFlowPort_Water_In_sequence& s)
      {
        this->SimDistributionPort_MixedWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_InOrOut () const
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_InOrOut ()
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_InOrOut (const SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_MixedWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_Out () const
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Water_Out_;
      }

      SimModel::SimDistributionPort_MixedWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_Out ()
      {
        return this->SimDistributionPort_MixedWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimDistributionPort_MixedWaterFlowPort_Water_Out (const SimDistributionPort_MixedWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimDistributionPort_MixedWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimDistributionPort_RefrigerationFlowPort_Default_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Default () const
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Default_;
      }

      SimModel::SimDistributionPort_RefrigerationFlowPort_Default_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Default ()
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_RefrigerationFlowPort_Default (const SimDistributionPort_RefrigerationFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_RefrigerationFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_In () const
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_;
      }

      SimModel::SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_In ()
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_;
      }

      void SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_In (const SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_sequence& s)
      {
        this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_ = s;
      }

      const SimModel::SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut () const
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_;
      }

      SimModel::SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut ()
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut (const SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& s)
      {
        this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out () const
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_;
      }

      SimModel::SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_sequence& SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out ()
      {
        return this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_;
      }

      void SimModel::
      SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out (const SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_sequence& s)
      {
        this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_ = s;
      }

      const SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Default () const
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Default_;
      }

      SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Default_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Default ()
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Default (const SimDistributionPort_ServiceHotWaterFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_ServiceHotWaterFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_In () const
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Water_In_;
      }

      SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Water_In_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_In ()
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_In (const SimDistributionPort_ServiceHotWaterFlowPort_Water_In_sequence& s)
      {
        this->SimDistributionPort_ServiceHotWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut () const
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut ()
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut (const SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_Out () const
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_;
      }

      SimModel::SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_sequence& SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_Out ()
      {
        return this->SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimDistributionPort_ServiceHotWaterFlowPort_Water_Out (const SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimDistributionPort_SteamFlowPort_Default_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Default () const
      {
        return this->SimDistributionPort_SteamFlowPort_Default_;
      }

      SimModel::SimDistributionPort_SteamFlowPort_Default_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Default ()
      {
        return this->SimDistributionPort_SteamFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_SteamFlowPort_Default (const SimDistributionPort_SteamFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_SteamFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_SteamFlowPort_Steam_In_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Steam_In () const
      {
        return this->SimDistributionPort_SteamFlowPort_Steam_In_;
      }

      SimModel::SimDistributionPort_SteamFlowPort_Steam_In_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Steam_In ()
      {
        return this->SimDistributionPort_SteamFlowPort_Steam_In_;
      }

      void SimModel::
      SimDistributionPort_SteamFlowPort_Steam_In (const SimDistributionPort_SteamFlowPort_Steam_In_sequence& s)
      {
        this->SimDistributionPort_SteamFlowPort_Steam_In_ = s;
      }

      const SimModel::SimDistributionPort_SteamFlowPort_Steam_InOrOut_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Steam_InOrOut () const
      {
        return this->SimDistributionPort_SteamFlowPort_Steam_InOrOut_;
      }

      SimModel::SimDistributionPort_SteamFlowPort_Steam_InOrOut_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Steam_InOrOut ()
      {
        return this->SimDistributionPort_SteamFlowPort_Steam_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_SteamFlowPort_Steam_InOrOut (const SimDistributionPort_SteamFlowPort_Steam_InOrOut_sequence& s)
      {
        this->SimDistributionPort_SteamFlowPort_Steam_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_SteamFlowPort_Steam_Out_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Steam_Out () const
      {
        return this->SimDistributionPort_SteamFlowPort_Steam_Out_;
      }

      SimModel::SimDistributionPort_SteamFlowPort_Steam_Out_sequence& SimModel::
      SimDistributionPort_SteamFlowPort_Steam_Out ()
      {
        return this->SimDistributionPort_SteamFlowPort_Steam_Out_;
      }

      void SimModel::
      SimDistributionPort_SteamFlowPort_Steam_Out (const SimDistributionPort_SteamFlowPort_Steam_Out_sequence& s)
      {
        this->SimDistributionPort_SteamFlowPort_Steam_Out_ = s;
      }

      const SimModel::SimDistributionPort_VarRefrigerantFlowPort_Default_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_Default () const
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_Default_;
      }

      SimModel::SimDistributionPort_VarRefrigerantFlowPort_Default_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_Default ()
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_Default_;
      }

      void SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_Default (const SimDistributionPort_VarRefrigerantFlowPort_Default_sequence& s)
      {
        this->SimDistributionPort_VarRefrigerantFlowPort_Default_ = s;
      }

      const SimModel::SimDistributionPort_VarRefrigerantFlowPort_VRF_In_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_In () const
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_VRF_In_;
      }

      SimModel::SimDistributionPort_VarRefrigerantFlowPort_VRF_In_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_In ()
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_VRF_In_;
      }

      void SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_In (const SimDistributionPort_VarRefrigerantFlowPort_VRF_In_sequence& s)
      {
        this->SimDistributionPort_VarRefrigerantFlowPort_VRF_In_ = s;
      }

      const SimModel::SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut () const
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_;
      }

      SimModel::SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut ()
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_;
      }

      void SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut (const SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_sequence& s)
      {
        this->SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_ = s;
      }

      const SimModel::SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_Out () const
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_;
      }

      SimModel::SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_sequence& SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_Out ()
      {
        return this->SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_;
      }

      void SimModel::
      SimDistributionPort_VarRefrigerantFlowPort_VRF_Out (const SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_sequence& s)
      {
        this->SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_ = s;
      }

      const SimModel::SimDistributionPort_ZoneAirFlowPort_Air_In_sequence& SimModel::
      SimDistributionPort_ZoneAirFlowPort_Air_In () const
      {
        return this->SimDistributionPort_ZoneAirFlowPort_Air_In_;
      }

      SimModel::SimDistributionPort_ZoneAirFlowPort_Air_In_sequence& SimModel::
      SimDistributionPort_ZoneAirFlowPort_Air_In ()
      {
        return this->SimDistributionPort_ZoneAirFlowPort_Air_In_;
      }

      void SimModel::
      SimDistributionPort_ZoneAirFlowPort_Air_In (const SimDistributionPort_ZoneAirFlowPort_Air_In_sequence& s)
      {
        this->SimDistributionPort_ZoneAirFlowPort_Air_In_ = s;
      }

      const SimModel::SimDistributionPort_ZoneAirFlowPort_Air_Out_sequence& SimModel::
      SimDistributionPort_ZoneAirFlowPort_Air_Out () const
      {
        return this->SimDistributionPort_ZoneAirFlowPort_Air_Out_;
      }

      SimModel::SimDistributionPort_ZoneAirFlowPort_Air_Out_sequence& SimModel::
      SimDistributionPort_ZoneAirFlowPort_Air_Out ()
      {
        return this->SimDistributionPort_ZoneAirFlowPort_Air_Out_;
      }

      void SimModel::
      SimDistributionPort_ZoneAirFlowPort_Air_Out (const SimDistributionPort_ZoneAirFlowPort_Air_Out_sequence& s)
      {
        this->SimDistributionPort_ZoneAirFlowPort_Air_Out_ = s;
      }

      const SimModel::SimDoor_Default_Default_sequence& SimModel::
      SimDoor_Default_Default () const
      {
        return this->SimDoor_Default_Default_;
      }

      SimModel::SimDoor_Default_Default_sequence& SimModel::
      SimDoor_Default_Default ()
      {
        return this->SimDoor_Default_Default_;
      }

      void SimModel::
      SimDoor_Default_Default (const SimDoor_Default_Default_sequence& s)
      {
        this->SimDoor_Default_Default_ = s;
      }

      const SimModel::SimDoor_GlazedDoor_Exterior_sequence& SimModel::
      SimDoor_GlazedDoor_Exterior () const
      {
        return this->SimDoor_GlazedDoor_Exterior_;
      }

      SimModel::SimDoor_GlazedDoor_Exterior_sequence& SimModel::
      SimDoor_GlazedDoor_Exterior ()
      {
        return this->SimDoor_GlazedDoor_Exterior_;
      }

      void SimModel::
      SimDoor_GlazedDoor_Exterior (const SimDoor_GlazedDoor_Exterior_sequence& s)
      {
        this->SimDoor_GlazedDoor_Exterior_ = s;
      }

      const SimModel::SimDoor_GlazedDoor_ExteriorDetailed_sequence& SimModel::
      SimDoor_GlazedDoor_ExteriorDetailed () const
      {
        return this->SimDoor_GlazedDoor_ExteriorDetailed_;
      }

      SimModel::SimDoor_GlazedDoor_ExteriorDetailed_sequence& SimModel::
      SimDoor_GlazedDoor_ExteriorDetailed ()
      {
        return this->SimDoor_GlazedDoor_ExteriorDetailed_;
      }

      void SimModel::
      SimDoor_GlazedDoor_ExteriorDetailed (const SimDoor_GlazedDoor_ExteriorDetailed_sequence& s)
      {
        this->SimDoor_GlazedDoor_ExteriorDetailed_ = s;
      }

      const SimModel::SimDoor_GlazedDoor_Interior_sequence& SimModel::
      SimDoor_GlazedDoor_Interior () const
      {
        return this->SimDoor_GlazedDoor_Interior_;
      }

      SimModel::SimDoor_GlazedDoor_Interior_sequence& SimModel::
      SimDoor_GlazedDoor_Interior ()
      {
        return this->SimDoor_GlazedDoor_Interior_;
      }

      void SimModel::
      SimDoor_GlazedDoor_Interior (const SimDoor_GlazedDoor_Interior_sequence& s)
      {
        this->SimDoor_GlazedDoor_Interior_ = s;
      }

      const SimModel::SimDoor_OpaqueDoor_Exterior_sequence& SimModel::
      SimDoor_OpaqueDoor_Exterior () const
      {
        return this->SimDoor_OpaqueDoor_Exterior_;
      }

      SimModel::SimDoor_OpaqueDoor_Exterior_sequence& SimModel::
      SimDoor_OpaqueDoor_Exterior ()
      {
        return this->SimDoor_OpaqueDoor_Exterior_;
      }

      void SimModel::
      SimDoor_OpaqueDoor_Exterior (const SimDoor_OpaqueDoor_Exterior_sequence& s)
      {
        this->SimDoor_OpaqueDoor_Exterior_ = s;
      }

      const SimModel::SimDoor_OpaqueDoor_ExteriorDetailed_sequence& SimModel::
      SimDoor_OpaqueDoor_ExteriorDetailed () const
      {
        return this->SimDoor_OpaqueDoor_ExteriorDetailed_;
      }

      SimModel::SimDoor_OpaqueDoor_ExteriorDetailed_sequence& SimModel::
      SimDoor_OpaqueDoor_ExteriorDetailed ()
      {
        return this->SimDoor_OpaqueDoor_ExteriorDetailed_;
      }

      void SimModel::
      SimDoor_OpaqueDoor_ExteriorDetailed (const SimDoor_OpaqueDoor_ExteriorDetailed_sequence& s)
      {
        this->SimDoor_OpaqueDoor_ExteriorDetailed_ = s;
      }

      const SimModel::SimDoor_OpaqueDoor_Interior_sequence& SimModel::
      SimDoor_OpaqueDoor_Interior () const
      {
        return this->SimDoor_OpaqueDoor_Interior_;
      }

      SimModel::SimDoor_OpaqueDoor_Interior_sequence& SimModel::
      SimDoor_OpaqueDoor_Interior ()
      {
        return this->SimDoor_OpaqueDoor_Interior_;
      }

      void SimModel::
      SimDoor_OpaqueDoor_Interior (const SimDoor_OpaqueDoor_Interior_sequence& s)
      {
        this->SimDoor_OpaqueDoor_Interior_ = s;
      }

      const SimModel::SimDoorArrayParams_DoorArray_Default_sequence& SimModel::
      SimDoorArrayParams_DoorArray_Default () const
      {
        return this->SimDoorArrayParams_DoorArray_Default_;
      }

      SimModel::SimDoorArrayParams_DoorArray_Default_sequence& SimModel::
      SimDoorArrayParams_DoorArray_Default ()
      {
        return this->SimDoorArrayParams_DoorArray_Default_;
      }

      void SimModel::
      SimDoorArrayParams_DoorArray_Default (const SimDoorArrayParams_DoorArray_Default_sequence& s)
      {
        this->SimDoorArrayParams_DoorArray_Default_ = s;
      }

      const SimModel::SimDoorLiningProps_DoorLiningProps_Default_sequence& SimModel::
      SimDoorLiningProps_DoorLiningProps_Default () const
      {
        return this->SimDoorLiningProps_DoorLiningProps_Default_;
      }

      SimModel::SimDoorLiningProps_DoorLiningProps_Default_sequence& SimModel::
      SimDoorLiningProps_DoorLiningProps_Default ()
      {
        return this->SimDoorLiningProps_DoorLiningProps_Default_;
      }

      void SimModel::
      SimDoorLiningProps_DoorLiningProps_Default (const SimDoorLiningProps_DoorLiningProps_Default_sequence& s)
      {
        this->SimDoorLiningProps_DoorLiningProps_Default_ = s;
      }

      const SimModel::SimDoorPanelProps_DoorPanelProps_Default_sequence& SimModel::
      SimDoorPanelProps_DoorPanelProps_Default () const
      {
        return this->SimDoorPanelProps_DoorPanelProps_Default_;
      }

      SimModel::SimDoorPanelProps_DoorPanelProps_Default_sequence& SimModel::
      SimDoorPanelProps_DoorPanelProps_Default ()
      {
        return this->SimDoorPanelProps_DoorPanelProps_Default_;
      }

      void SimModel::
      SimDoorPanelProps_DoorPanelProps_Default (const SimDoorPanelProps_DoorPanelProps_Default_sequence& s)
      {
        this->SimDoorPanelProps_DoorPanelProps_Default_ = s;
      }

      const SimModel::SimDoorParams_Door_Default_sequence& SimModel::
      SimDoorParams_Door_Default () const
      {
        return this->SimDoorParams_Door_Default_;
      }

      SimModel::SimDoorParams_Door_Default_sequence& SimModel::
      SimDoorParams_Door_Default ()
      {
        return this->SimDoorParams_Door_Default_;
      }

      void SimModel::
      SimDoorParams_Door_Default (const SimDoorParams_Door_Default_sequence& s)
      {
        this->SimDoorParams_Door_Default_ = s;
      }

      const SimModel::SimDoorType_Door_Default_sequence& SimModel::
      SimDoorType_Door_Default () const
      {
        return this->SimDoorType_Door_Default_;
      }

      SimModel::SimDoorType_Door_Default_sequence& SimModel::
      SimDoorType_Door_Default ()
      {
        return this->SimDoorType_Door_Default_;
      }

      void SimModel::
      SimDoorType_Door_Default (const SimDoorType_Door_Default_sequence& s)
      {
        this->SimDoorType_Door_Default_ = s;
      }

      const SimModel::SimDwgXrefParams_DwgXref_Default_sequence& SimModel::
      SimDwgXrefParams_DwgXref_Default () const
      {
        return this->SimDwgXrefParams_DwgXref_Default_;
      }

      SimModel::SimDwgXrefParams_DwgXref_Default_sequence& SimModel::
      SimDwgXrefParams_DwgXref_Default ()
      {
        return this->SimDwgXrefParams_DwgXref_Default_;
      }

      void SimModel::
      SimDwgXrefParams_DwgXref_Default (const SimDwgXrefParams_DwgXref_Default_sequence& s)
      {
        this->SimDwgXrefParams_DwgXref_Default_ = s;
      }

      const SimModel::SimEdge_Edge_EdgeCurve_sequence& SimModel::
      SimEdge_Edge_EdgeCurve () const
      {
        return this->SimEdge_Edge_EdgeCurve_;
      }

      SimModel::SimEdge_Edge_EdgeCurve_sequence& SimModel::
      SimEdge_Edge_EdgeCurve ()
      {
        return this->SimEdge_Edge_EdgeCurve_;
      }

      void SimModel::
      SimEdge_Edge_EdgeCurve (const SimEdge_Edge_EdgeCurve_sequence& s)
      {
        this->SimEdge_Edge_EdgeCurve_ = s;
      }

      const SimModel::SimEdge_Edge_OrientedEdge_sequence& SimModel::
      SimEdge_Edge_OrientedEdge () const
      {
        return this->SimEdge_Edge_OrientedEdge_;
      }

      SimModel::SimEdge_Edge_OrientedEdge_sequence& SimModel::
      SimEdge_Edge_OrientedEdge ()
      {
        return this->SimEdge_Edge_OrientedEdge_;
      }

      void SimModel::
      SimEdge_Edge_OrientedEdge (const SimEdge_Edge_OrientedEdge_sequence& s)
      {
        this->SimEdge_Edge_OrientedEdge_ = s;
      }

      const SimModel::SimEdge_Edge_Subedge_sequence& SimModel::
      SimEdge_Edge_Subedge () const
      {
        return this->SimEdge_Edge_Subedge_;
      }

      SimModel::SimEdge_Edge_Subedge_sequence& SimModel::
      SimEdge_Edge_Subedge ()
      {
        return this->SimEdge_Edge_Subedge_;
      }

      void SimModel::
      SimEdge_Edge_Subedge (const SimEdge_Edge_Subedge_sequence& s)
      {
        this->SimEdge_Edge_Subedge_ = s;
      }

      const SimModel::SimElementQuantity_ElementQuantity_Default_sequence& SimModel::
      SimElementQuantity_ElementQuantity_Default () const
      {
        return this->SimElementQuantity_ElementQuantity_Default_;
      }

      SimModel::SimElementQuantity_ElementQuantity_Default_sequence& SimModel::
      SimElementQuantity_ElementQuantity_Default ()
      {
        return this->SimElementQuantity_ElementQuantity_Default_;
      }

      void SimModel::
      SimElementQuantity_ElementQuantity_Default (const SimElementQuantity_ElementQuantity_Default_sequence& s)
      {
        this->SimElementQuantity_ElementQuantity_Default_ = s;
      }

      const SimModel::SimExtendedMaterialProps_ExtendedMatlProps_Default_sequence& SimModel::
      SimExtendedMaterialProps_ExtendedMatlProps_Default () const
      {
        return this->SimExtendedMaterialProps_ExtendedMatlProps_Default_;
      }

      SimModel::SimExtendedMaterialProps_ExtendedMatlProps_Default_sequence& SimModel::
      SimExtendedMaterialProps_ExtendedMatlProps_Default ()
      {
        return this->SimExtendedMaterialProps_ExtendedMatlProps_Default_;
      }

      void SimModel::
      SimExtendedMaterialProps_ExtendedMatlProps_Default (const SimExtendedMaterialProps_ExtendedMatlProps_Default_sequence& s)
      {
        this->SimExtendedMaterialProps_ExtendedMatlProps_Default_ = s;
      }

      const SimModel::SimExternalReference_Default_Default_sequence& SimModel::
      SimExternalReference_Default_Default () const
      {
        return this->SimExternalReference_Default_Default_;
      }

      SimModel::SimExternalReference_Default_Default_sequence& SimModel::
      SimExternalReference_Default_Default ()
      {
        return this->SimExternalReference_Default_Default_;
      }

      void SimModel::
      SimExternalReference_Default_Default (const SimExternalReference_Default_Default_sequence& s)
      {
        this->SimExternalReference_Default_Default_ = s;
      }

      const SimModel::SimExternalReference_DocumentReference_Default_sequence& SimModel::
      SimExternalReference_DocumentReference_Default () const
      {
        return this->SimExternalReference_DocumentReference_Default_;
      }

      SimModel::SimExternalReference_DocumentReference_Default_sequence& SimModel::
      SimExternalReference_DocumentReference_Default ()
      {
        return this->SimExternalReference_DocumentReference_Default_;
      }

      void SimModel::
      SimExternalReference_DocumentReference_Default (const SimExternalReference_DocumentReference_Default_sequence& s)
      {
        this->SimExternalReference_DocumentReference_Default_ = s;
      }

      const SimModel::SimExternalReference_ExternalReference_Default_sequence& SimModel::
      SimExternalReference_ExternalReference_Default () const
      {
        return this->SimExternalReference_ExternalReference_Default_;
      }

      SimModel::SimExternalReference_ExternalReference_Default_sequence& SimModel::
      SimExternalReference_ExternalReference_Default ()
      {
        return this->SimExternalReference_ExternalReference_Default_;
      }

      void SimModel::
      SimExternalReference_ExternalReference_Default (const SimExternalReference_ExternalReference_Default_sequence& s)
      {
        this->SimExternalReference_ExternalReference_Default_ = s;
      }

      const SimModel::SimExternalReference_LibraryReference_Default_sequence& SimModel::
      SimExternalReference_LibraryReference_Default () const
      {
        return this->SimExternalReference_LibraryReference_Default_;
      }

      SimModel::SimExternalReference_LibraryReference_Default_sequence& SimModel::
      SimExternalReference_LibraryReference_Default ()
      {
        return this->SimExternalReference_LibraryReference_Default_;
      }

      void SimModel::
      SimExternalReference_LibraryReference_Default (const SimExternalReference_LibraryReference_Default_sequence& s)
      {
        this->SimExternalReference_LibraryReference_Default_ = s;
      }

      const SimModel::SimExternalReference_PropertyReference_Default_sequence& SimModel::
      SimExternalReference_PropertyReference_Default () const
      {
        return this->SimExternalReference_PropertyReference_Default_;
      }

      SimModel::SimExternalReference_PropertyReference_Default_sequence& SimModel::
      SimExternalReference_PropertyReference_Default ()
      {
        return this->SimExternalReference_PropertyReference_Default_;
      }

      void SimModel::
      SimExternalReference_PropertyReference_Default (const SimExternalReference_PropertyReference_Default_sequence& s)
      {
        this->SimExternalReference_PropertyReference_Default_ = s;
      }

      const SimModel::SimFace_Face_Default_sequence& SimModel::
      SimFace_Face_Default () const
      {
        return this->SimFace_Face_Default_;
      }

      SimModel::SimFace_Face_Default_sequence& SimModel::
      SimFace_Face_Default ()
      {
        return this->SimFace_Face_Default_;
      }

      void SimModel::
      SimFace_Face_Default (const SimFace_Face_Default_sequence& s)
      {
        this->SimFace_Face_Default_ = s;
      }

      const SimModel::SimFace_Face_FaceSurface_sequence& SimModel::
      SimFace_Face_FaceSurface () const
      {
        return this->SimFace_Face_FaceSurface_;
      }

      SimModel::SimFace_Face_FaceSurface_sequence& SimModel::
      SimFace_Face_FaceSurface ()
      {
        return this->SimFace_Face_FaceSurface_;
      }

      void SimModel::
      SimFace_Face_FaceSurface (const SimFace_Face_FaceSurface_sequence& s)
      {
        this->SimFace_Face_FaceSurface_ = s;
      }

      const SimModel::SimFaceBound_FaceBound_Default_sequence& SimModel::
      SimFaceBound_FaceBound_Default () const
      {
        return this->SimFaceBound_FaceBound_Default_;
      }

      SimModel::SimFaceBound_FaceBound_Default_sequence& SimModel::
      SimFaceBound_FaceBound_Default ()
      {
        return this->SimFaceBound_FaceBound_Default_;
      }

      void SimModel::
      SimFaceBound_FaceBound_Default (const SimFaceBound_FaceBound_Default_sequence& s)
      {
        this->SimFaceBound_FaceBound_Default_ = s;
      }

      const SimModel::SimFaceBound_FaceBound_FaceOuterBound_sequence& SimModel::
      SimFaceBound_FaceBound_FaceOuterBound () const
      {
        return this->SimFaceBound_FaceBound_FaceOuterBound_;
      }

      SimModel::SimFaceBound_FaceBound_FaceOuterBound_sequence& SimModel::
      SimFaceBound_FaceBound_FaceOuterBound ()
      {
        return this->SimFaceBound_FaceBound_FaceOuterBound_;
      }

      void SimModel::
      SimFaceBound_FaceBound_FaceOuterBound (const SimFaceBound_FaceBound_FaceOuterBound_sequence& s)
      {
        this->SimFaceBound_FaceBound_FaceOuterBound_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Default_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Default_Default () const
      {
        return this->SimFeatureAirFlowNetwork_Default_Default_;
      }

      SimModel::SimFeatureAirFlowNetwork_Default_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Default_Default ()
      {
        return this->SimFeatureAirFlowNetwork_Default_Default_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Default_Default (const SimFeatureAirFlowNetwork_Default_Default_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Default_Default_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default () const
      {
        return this->SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_;
      }

      SimModel::SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default ()
      {
        return this->SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default (const SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_sequence& SimModel::
      SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan () const
      {
        return this->SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_;
      }

      SimModel::SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_sequence& SimModel::
      SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan ()
      {
        return this->SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan (const SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Opening_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Default () const
      {
        return this->SimFeatureAirFlowNetwork_Opening_Default_;
      }

      SimModel::SimFeatureAirFlowNetwork_Opening_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Default ()
      {
        return this->SimFeatureAirFlowNetwork_Opening_Default_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Opening_Default (const SimFeatureAirFlowNetwork_Opening_Default_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Opening_Default_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Opening_Detailed_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Detailed () const
      {
        return this->SimFeatureAirFlowNetwork_Opening_Detailed_;
      }

      SimModel::SimFeatureAirFlowNetwork_Opening_Detailed_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Detailed ()
      {
        return this->SimFeatureAirFlowNetwork_Opening_Detailed_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Opening_Detailed (const SimFeatureAirFlowNetwork_Opening_Detailed_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Opening_Detailed_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Opening_Horizontal_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Horizontal () const
      {
        return this->SimFeatureAirFlowNetwork_Opening_Horizontal_;
      }

      SimModel::SimFeatureAirFlowNetwork_Opening_Horizontal_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Horizontal ()
      {
        return this->SimFeatureAirFlowNetwork_Opening_Horizontal_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Opening_Horizontal (const SimFeatureAirFlowNetwork_Opening_Horizontal_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Opening_Horizontal_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Opening_Simple_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Simple () const
      {
        return this->SimFeatureAirFlowNetwork_Opening_Simple_;
      }

      SimModel::SimFeatureAirFlowNetwork_Opening_Simple_sequence& SimModel::
      SimFeatureAirFlowNetwork_Opening_Simple ()
      {
        return this->SimFeatureAirFlowNetwork_Opening_Simple_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Opening_Simple (const SimFeatureAirFlowNetwork_Opening_Simple_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Opening_Simple_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Surface_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Surface_Default () const
      {
        return this->SimFeatureAirFlowNetwork_Surface_Default_;
      }

      SimModel::SimFeatureAirFlowNetwork_Surface_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Surface_Default ()
      {
        return this->SimFeatureAirFlowNetwork_Surface_Default_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Surface_Default (const SimFeatureAirFlowNetwork_Surface_Default_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Surface_Default_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_SurfaceCrack_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_SurfaceCrack_Default () const
      {
        return this->SimFeatureAirFlowNetwork_SurfaceCrack_Default_;
      }

      SimModel::SimFeatureAirFlowNetwork_SurfaceCrack_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_SurfaceCrack_Default ()
      {
        return this->SimFeatureAirFlowNetwork_SurfaceCrack_Default_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_SurfaceCrack_Default (const SimFeatureAirFlowNetwork_SurfaceCrack_Default_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_SurfaceCrack_Default_ = s;
      }

      const SimModel::SimFeatureAirFlowNetwork_Zone_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Zone_Default () const
      {
        return this->SimFeatureAirFlowNetwork_Zone_Default_;
      }

      SimModel::SimFeatureAirFlowNetwork_Zone_Default_sequence& SimModel::
      SimFeatureAirFlowNetwork_Zone_Default ()
      {
        return this->SimFeatureAirFlowNetwork_Zone_Default_;
      }

      void SimModel::
      SimFeatureAirFlowNetwork_Zone_Default (const SimFeatureAirFlowNetwork_Zone_Default_sequence& s)
      {
        this->SimFeatureAirFlowNetwork_Zone_Default_ = s;
      }

      const SimModel::SimFeatureElementAddition_ProjectionElement_Default_sequence& SimModel::
      SimFeatureElementAddition_ProjectionElement_Default () const
      {
        return this->SimFeatureElementAddition_ProjectionElement_Default_;
      }

      SimModel::SimFeatureElementAddition_ProjectionElement_Default_sequence& SimModel::
      SimFeatureElementAddition_ProjectionElement_Default ()
      {
        return this->SimFeatureElementAddition_ProjectionElement_Default_;
      }

      void SimModel::
      SimFeatureElementAddition_ProjectionElement_Default (const SimFeatureElementAddition_ProjectionElement_Default_sequence& s)
      {
        this->SimFeatureElementAddition_ProjectionElement_Default_ = s;
      }

      const SimModel::SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_sequence& SimModel::
      SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge () const
      {
        return this->SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_;
      }

      SimModel::SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_sequence& SimModel::
      SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge ()
      {
        return this->SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_;
      }

      void SimModel::
      SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge (const SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_sequence& s)
      {
        this->SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_ = s;
      }

      const SimModel::SimFeatureElementSubtraction_EdgeFeature_Default_sequence& SimModel::
      SimFeatureElementSubtraction_EdgeFeature_Default () const
      {
        return this->SimFeatureElementSubtraction_EdgeFeature_Default_;
      }

      SimModel::SimFeatureElementSubtraction_EdgeFeature_Default_sequence& SimModel::
      SimFeatureElementSubtraction_EdgeFeature_Default ()
      {
        return this->SimFeatureElementSubtraction_EdgeFeature_Default_;
      }

      void SimModel::
      SimFeatureElementSubtraction_EdgeFeature_Default (const SimFeatureElementSubtraction_EdgeFeature_Default_sequence& s)
      {
        this->SimFeatureElementSubtraction_EdgeFeature_Default_ = s;
      }

      const SimModel::SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_sequence& SimModel::
      SimFeatureElementSubtraction_EdgeFeature_RoundedEdge () const
      {
        return this->SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_;
      }

      SimModel::SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_sequence& SimModel::
      SimFeatureElementSubtraction_EdgeFeature_RoundedEdge ()
      {
        return this->SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_;
      }

      void SimModel::
      SimFeatureElementSubtraction_EdgeFeature_RoundedEdge (const SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_sequence& s)
      {
        this->SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_ = s;
      }

      const SimModel::SimFeatureElementSubtraction_SlotFeature_Default_sequence& SimModel::
      SimFeatureElementSubtraction_SlotFeature_Default () const
      {
        return this->SimFeatureElementSubtraction_SlotFeature_Default_;
      }

      SimModel::SimFeatureElementSubtraction_SlotFeature_Default_sequence& SimModel::
      SimFeatureElementSubtraction_SlotFeature_Default ()
      {
        return this->SimFeatureElementSubtraction_SlotFeature_Default_;
      }

      void SimModel::
      SimFeatureElementSubtraction_SlotFeature_Default (const SimFeatureElementSubtraction_SlotFeature_Default_sequence& s)
      {
        this->SimFeatureElementSubtraction_SlotFeature_Default_ = s;
      }

      const SimModel::SimFeatureElementSubtraction_Void_Opening_sequence& SimModel::
      SimFeatureElementSubtraction_Void_Opening () const
      {
        return this->SimFeatureElementSubtraction_Void_Opening_;
      }

      SimModel::SimFeatureElementSubtraction_Void_Opening_sequence& SimModel::
      SimFeatureElementSubtraction_Void_Opening ()
      {
        return this->SimFeatureElementSubtraction_Void_Opening_;
      }

      void SimModel::
      SimFeatureElementSubtraction_Void_Opening (const SimFeatureElementSubtraction_Void_Opening_sequence& s)
      {
        this->SimFeatureElementSubtraction_Void_Opening_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_DistrictSupply_Cooling_sequence& SimModel::
      SimFlowCompoundEqmt_DistrictSupply_Cooling () const
      {
        return this->SimFlowCompoundEqmt_DistrictSupply_Cooling_;
      }

      SimModel::SimFlowCompoundEqmt_DistrictSupply_Cooling_sequence& SimModel::
      SimFlowCompoundEqmt_DistrictSupply_Cooling ()
      {
        return this->SimFlowCompoundEqmt_DistrictSupply_Cooling_;
      }

      void SimModel::
      SimFlowCompoundEqmt_DistrictSupply_Cooling (const SimFlowCompoundEqmt_DistrictSupply_Cooling_sequence& s)
      {
        this->SimFlowCompoundEqmt_DistrictSupply_Cooling_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_DistrictSupply_Heating_sequence& SimModel::
      SimFlowCompoundEqmt_DistrictSupply_Heating () const
      {
        return this->SimFlowCompoundEqmt_DistrictSupply_Heating_;
      }

      SimModel::SimFlowCompoundEqmt_DistrictSupply_Heating_sequence& SimModel::
      SimFlowCompoundEqmt_DistrictSupply_Heating ()
      {
        return this->SimFlowCompoundEqmt_DistrictSupply_Heating_;
      }

      void SimModel::
      SimFlowCompoundEqmt_DistrictSupply_Heating (const SimFlowCompoundEqmt_DistrictSupply_Heating_sequence& s)
      {
        this->SimFlowCompoundEqmt_DistrictSupply_Heating_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_sequence& SimModel::
      SimFlowCompoundEqmt_DistrictSupply_TemperatureSource () const
      {
        return this->SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_;
      }

      SimModel::SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_sequence& SimModel::
      SimFlowCompoundEqmt_DistrictSupply_TemperatureSource ()
      {
        return this->SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_;
      }

      void SimModel::
      SimFlowCompoundEqmt_DistrictSupply_TemperatureSource (const SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_sequence& s)
      {
        this->SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_PurchasedSupply_Cooling_sequence& SimModel::
      SimFlowCompoundEqmt_PurchasedSupply_Cooling () const
      {
        return this->SimFlowCompoundEqmt_PurchasedSupply_Cooling_;
      }

      SimModel::SimFlowCompoundEqmt_PurchasedSupply_Cooling_sequence& SimModel::
      SimFlowCompoundEqmt_PurchasedSupply_Cooling ()
      {
        return this->SimFlowCompoundEqmt_PurchasedSupply_Cooling_;
      }

      void SimModel::
      SimFlowCompoundEqmt_PurchasedSupply_Cooling (const SimFlowCompoundEqmt_PurchasedSupply_Cooling_sequence& s)
      {
        this->SimFlowCompoundEqmt_PurchasedSupply_Cooling_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_PurchasedSupply_Heating_sequence& SimModel::
      SimFlowCompoundEqmt_PurchasedSupply_Heating () const
      {
        return this->SimFlowCompoundEqmt_PurchasedSupply_Heating_;
      }

      SimModel::SimFlowCompoundEqmt_PurchasedSupply_Heating_sequence& SimModel::
      SimFlowCompoundEqmt_PurchasedSupply_Heating ()
      {
        return this->SimFlowCompoundEqmt_PurchasedSupply_Heating_;
      }

      void SimModel::
      SimFlowCompoundEqmt_PurchasedSupply_Heating (const SimFlowCompoundEqmt_PurchasedSupply_Heating_sequence& s)
      {
        this->SimFlowCompoundEqmt_PurchasedSupply_Heating_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow (const SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly (const SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool (const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly (const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool (const SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly (const SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir (const SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed (const SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW (const SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW () const
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW ()
      {
        return this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW (const SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow (const SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX (const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator (const SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit (const SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined (const SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil (const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW (const SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW (const SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit (const SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC (const SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP (const SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater (const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor (const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile (const SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate () const
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_;
      }

      SimModel::SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_sequence& SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate ()
      {
        return this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_;
      }

      void SimModel::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate (const SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_sequence& s)
      {
        this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_sequence& SimModel::
      SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner () const
      {
        return this->SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_;
      }

      SimModel::SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_sequence& SimModel::
      SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner ()
      {
        return this->SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner (const SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_sequence& s)
      {
        this->SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_sequence& SimModel::
      SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass () const
      {
        return this->SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_;
      }

      SimModel::SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_sequence& SimModel::
      SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass ()
      {
        return this->SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass (const SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_sequence& s)
      {
        this->SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop (const SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted (const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted (const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX (const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX (const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop (const SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_ = s;
      }

      const SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop () const
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_;
      }

      SimModel::SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_sequence& SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop ()
      {
        return this->SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_;
      }

      void SimModel::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop (const SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_sequence& s)
      {
        this->SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_ = s;
      }

      const SimModel::SimFlowController_Damper_Default_sequence& SimModel::
      SimFlowController_Damper_Default () const
      {
        return this->SimFlowController_Damper_Default_;
      }

      SimModel::SimFlowController_Damper_Default_sequence& SimModel::
      SimFlowController_Damper_Default ()
      {
        return this->SimFlowController_Damper_Default_;
      }

      void SimModel::
      SimFlowController_Damper_Default (const SimFlowController_Damper_Default_sequence& s)
      {
        this->SimFlowController_Damper_Default_ = s;
      }

      const SimModel::SimFlowController_Damper_Exhaust_sequence& SimModel::
      SimFlowController_Damper_Exhaust () const
      {
        return this->SimFlowController_Damper_Exhaust_;
      }

      SimModel::SimFlowController_Damper_Exhaust_sequence& SimModel::
      SimFlowController_Damper_Exhaust ()
      {
        return this->SimFlowController_Damper_Exhaust_;
      }

      void SimModel::
      SimFlowController_Damper_Exhaust (const SimFlowController_Damper_Exhaust_sequence& s)
      {
        this->SimFlowController_Damper_Exhaust_ = s;
      }

      const SimModel::SimFlowController_Damper_FaceBypass_sequence& SimModel::
      SimFlowController_Damper_FaceBypass () const
      {
        return this->SimFlowController_Damper_FaceBypass_;
      }

      SimModel::SimFlowController_Damper_FaceBypass_sequence& SimModel::
      SimFlowController_Damper_FaceBypass ()
      {
        return this->SimFlowController_Damper_FaceBypass_;
      }

      void SimModel::
      SimFlowController_Damper_FaceBypass (const SimFlowController_Damper_FaceBypass_sequence& s)
      {
        this->SimFlowController_Damper_FaceBypass_ = s;
      }

      const SimModel::SimFlowController_Damper_MixedAir_sequence& SimModel::
      SimFlowController_Damper_MixedAir () const
      {
        return this->SimFlowController_Damper_MixedAir_;
      }

      SimModel::SimFlowController_Damper_MixedAir_sequence& SimModel::
      SimFlowController_Damper_MixedAir ()
      {
        return this->SimFlowController_Damper_MixedAir_;
      }

      void SimModel::
      SimFlowController_Damper_MixedAir (const SimFlowController_Damper_MixedAir_sequence& s)
      {
        this->SimFlowController_Damper_MixedAir_ = s;
      }

      const SimModel::SimFlowController_Damper_OutsideAir_sequence& SimModel::
      SimFlowController_Damper_OutsideAir () const
      {
        return this->SimFlowController_Damper_OutsideAir_;
      }

      SimModel::SimFlowController_Damper_OutsideAir_sequence& SimModel::
      SimFlowController_Damper_OutsideAir ()
      {
        return this->SimFlowController_Damper_OutsideAir_;
      }

      void SimModel::
      SimFlowController_Damper_OutsideAir (const SimFlowController_Damper_OutsideAir_sequence& s)
      {
        this->SimFlowController_Damper_OutsideAir_ = s;
      }

      const SimModel::SimFlowController_Damper_Recirculation_sequence& SimModel::
      SimFlowController_Damper_Recirculation () const
      {
        return this->SimFlowController_Damper_Recirculation_;
      }

      SimModel::SimFlowController_Damper_Recirculation_sequence& SimModel::
      SimFlowController_Damper_Recirculation ()
      {
        return this->SimFlowController_Damper_Recirculation_;
      }

      void SimModel::
      SimFlowController_Damper_Recirculation (const SimFlowController_Damper_Recirculation_sequence& s)
      {
        this->SimFlowController_Damper_Recirculation_ = s;
      }

      const SimModel::SimFlowController_Damper_Relief_sequence& SimModel::
      SimFlowController_Damper_Relief () const
      {
        return this->SimFlowController_Damper_Relief_;
      }

      SimModel::SimFlowController_Damper_Relief_sequence& SimModel::
      SimFlowController_Damper_Relief ()
      {
        return this->SimFlowController_Damper_Relief_;
      }

      void SimModel::
      SimFlowController_Damper_Relief (const SimFlowController_Damper_Relief_sequence& s)
      {
        this->SimFlowController_Damper_Relief_ = s;
      }

      const SimModel::SimFlowController_Default_Default_sequence& SimModel::
      SimFlowController_Default_Default () const
      {
        return this->SimFlowController_Default_Default_;
      }

      SimModel::SimFlowController_Default_Default_sequence& SimModel::
      SimFlowController_Default_Default ()
      {
        return this->SimFlowController_Default_Default_;
      }

      void SimModel::
      SimFlowController_Default_Default (const SimFlowController_Default_Default_sequence& s)
      {
        this->SimFlowController_Default_Default_ = s;
      }

      const SimModel::SimFlowController_ElectricalSwitch_On_Off_sequence& SimModel::
      SimFlowController_ElectricalSwitch_On_Off () const
      {
        return this->SimFlowController_ElectricalSwitch_On_Off_;
      }

      SimModel::SimFlowController_ElectricalSwitch_On_Off_sequence& SimModel::
      SimFlowController_ElectricalSwitch_On_Off ()
      {
        return this->SimFlowController_ElectricalSwitch_On_Off_;
      }

      void SimModel::
      SimFlowController_ElectricalSwitch_On_Off (const SimFlowController_ElectricalSwitch_On_Off_sequence& s)
      {
        this->SimFlowController_ElectricalSwitch_On_Off_ = s;
      }

      const SimModel::SimFlowController_ElectricalSwitch_Variable_sequence& SimModel::
      SimFlowController_ElectricalSwitch_Variable () const
      {
        return this->SimFlowController_ElectricalSwitch_Variable_;
      }

      SimModel::SimFlowController_ElectricalSwitch_Variable_sequence& SimModel::
      SimFlowController_ElectricalSwitch_Variable ()
      {
        return this->SimFlowController_ElectricalSwitch_Variable_;
      }

      void SimModel::
      SimFlowController_ElectricalSwitch_Variable (const SimFlowController_ElectricalSwitch_Variable_sequence& s)
      {
        this->SimFlowController_ElectricalSwitch_Variable_ = s;
      }

      const SimModel::SimFlowController_Valve_Default_sequence& SimModel::
      SimFlowController_Valve_Default () const
      {
        return this->SimFlowController_Valve_Default_;
      }

      SimModel::SimFlowController_Valve_Default_sequence& SimModel::
      SimFlowController_Valve_Default ()
      {
        return this->SimFlowController_Valve_Default_;
      }

      void SimModel::
      SimFlowController_Valve_Default (const SimFlowController_Valve_Default_sequence& s)
      {
        this->SimFlowController_Valve_Default_ = s;
      }

      const SimModel::SimFlowController_Valve_EMSValve_sequence& SimModel::
      SimFlowController_Valve_EMSValve () const
      {
        return this->SimFlowController_Valve_EMSValve_;
      }

      SimModel::SimFlowController_Valve_EMSValve_sequence& SimModel::
      SimFlowController_Valve_EMSValve ()
      {
        return this->SimFlowController_Valve_EMSValve_;
      }

      void SimModel::
      SimFlowController_Valve_EMSValve (const SimFlowController_Valve_EMSValve_sequence& s)
      {
        this->SimFlowController_Valve_EMSValve_ = s;
      }

      const SimModel::SimFlowController_Valve_NonReturnValve_sequence& SimModel::
      SimFlowController_Valve_NonReturnValve () const
      {
        return this->SimFlowController_Valve_NonReturnValve_;
      }

      SimModel::SimFlowController_Valve_NonReturnValve_sequence& SimModel::
      SimFlowController_Valve_NonReturnValve ()
      {
        return this->SimFlowController_Valve_NonReturnValve_;
      }

      void SimModel::
      SimFlowController_Valve_NonReturnValve (const SimFlowController_Valve_NonReturnValve_sequence& s)
      {
        this->SimFlowController_Valve_NonReturnValve_ = s;
      }

      const SimModel::SimFlowController_Valve_TemperingValve_sequence& SimModel::
      SimFlowController_Valve_TemperingValve () const
      {
        return this->SimFlowController_Valve_TemperingValve_;
      }

      SimModel::SimFlowController_Valve_TemperingValve_sequence& SimModel::
      SimFlowController_Valve_TemperingValve ()
      {
        return this->SimFlowController_Valve_TemperingValve_;
      }

      void SimModel::
      SimFlowController_Valve_TemperingValve (const SimFlowController_Valve_TemperingValve_sequence& s)
      {
        this->SimFlowController_Valve_TemperingValve_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Electric_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Electric () const
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Electric_;
      }

      SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Electric_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Electric ()
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Electric_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Electric (const SimFlowEnergyTransfer_ConvectiveHeater_Electric_sequence& s)
      {
        this->SimFlowEnergyTransfer_ConvectiveHeater_Electric_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric () const
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_;
      }

      SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric ()
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric (const SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_sequence& s)
      {
        this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam () const
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_;
      }

      SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam ()
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam (const SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_sequence& s)
      {
        this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water () const
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_;
      }

      SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water ()
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water (const SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_sequence& s)
      {
        this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Water_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Water () const
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Water_;
      }

      SimModel::SimFlowEnergyTransfer_ConvectiveHeater_Water_sequence& SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Water ()
      {
        return this->SimFlowEnergyTransfer_ConvectiveHeater_Water_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ConvectiveHeater_Water (const SimFlowEnergyTransfer_ConvectiveHeater_Water_sequence& s)
      {
        this->SimFlowEnergyTransfer_ConvectiveHeater_Water_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined () const
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_;
      }

      SimModel::SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_sequence& SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined ()
      {
        return this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_;
      }

      void SimModel::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_sequence& s)
      {
        this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_Dehumidifier_Default_sequence& SimModel::
      SimFlowEnergyTransfer_Dehumidifier_Default () const
      {
        return this->SimFlowEnergyTransfer_Dehumidifier_Default_;
      }

      SimModel::SimFlowEnergyTransfer_Dehumidifier_Default_sequence& SimModel::
      SimFlowEnergyTransfer_Dehumidifier_Default ()
      {
        return this->SimFlowEnergyTransfer_Dehumidifier_Default_;
      }

      void SimModel::
      SimFlowEnergyTransfer_Dehumidifier_Default (const SimFlowEnergyTransfer_Dehumidifier_Default_sequence& s)
      {
        this->SimFlowEnergyTransfer_Dehumidifier_Default_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_Dehumidifier_NoFans_sequence& SimModel::
      SimFlowEnergyTransfer_Dehumidifier_NoFans () const
      {
        return this->SimFlowEnergyTransfer_Dehumidifier_NoFans_;
      }

      SimModel::SimFlowEnergyTransfer_Dehumidifier_NoFans_sequence& SimModel::
      SimFlowEnergyTransfer_Dehumidifier_NoFans ()
      {
        return this->SimFlowEnergyTransfer_Dehumidifier_NoFans_;
      }

      void SimModel::
      SimFlowEnergyTransfer_Dehumidifier_NoFans (const SimFlowEnergyTransfer_Dehumidifier_NoFans_sequence& s)
      {
        this->SimFlowEnergyTransfer_Dehumidifier_NoFans_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_Economizer_AirToAir_sequence& SimModel::
      SimFlowEnergyTransfer_Economizer_AirToAir () const
      {
        return this->SimFlowEnergyTransfer_Economizer_AirToAir_;
      }

      SimModel::SimFlowEnergyTransfer_Economizer_AirToAir_sequence& SimModel::
      SimFlowEnergyTransfer_Economizer_AirToAir ()
      {
        return this->SimFlowEnergyTransfer_Economizer_AirToAir_;
      }

      void SimModel::
      SimFlowEnergyTransfer_Economizer_AirToAir (const SimFlowEnergyTransfer_Economizer_AirToAir_sequence& s)
      {
        this->SimFlowEnergyTransfer_Economizer_AirToAir_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_Electrical_Transformer_sequence& SimModel::
      SimFlowEnergyTransfer_Electrical_Transformer () const
      {
        return this->SimFlowEnergyTransfer_Electrical_Transformer_;
      }

      SimModel::SimFlowEnergyTransfer_Electrical_Transformer_sequence& SimModel::
      SimFlowEnergyTransfer_Electrical_Transformer ()
      {
        return this->SimFlowEnergyTransfer_Electrical_Transformer_;
      }

      void SimModel::
      SimFlowEnergyTransfer_Electrical_Transformer (const SimFlowEnergyTransfer_Electrical_Transformer_sequence& s)
      {
        this->SimFlowEnergyTransfer_Electrical_Transformer_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_sequence& SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower () const
      {
        return this->SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_;
      }

      SimModel::SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_sequence& SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower ()
      {
        return this->SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower (const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_sequence& s)
      {
        this->SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_sequence& SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_LookUpTable () const
      {
        return this->SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_;
      }

      SimModel::SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_sequence& SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_LookUpTable ()
      {
        return this->SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_LookUpTable (const SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_sequence& s)
      {
        this->SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_ElectricalInverter_Simple_sequence& SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_Simple () const
      {
        return this->SimFlowEnergyTransfer_ElectricalInverter_Simple_;
      }

      SimModel::SimFlowEnergyTransfer_ElectricalInverter_Simple_sequence& SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_Simple ()
      {
        return this->SimFlowEnergyTransfer_ElectricalInverter_Simple_;
      }

      void SimModel::
      SimFlowEnergyTransfer_ElectricalInverter_Simple (const SimFlowEnergyTransfer_ElectricalInverter_Simple_sequence& s)
      {
        this->SimFlowEnergyTransfer_ElectricalInverter_Simple_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad () const
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_;
      }

      SimModel::SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad ()
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_;
      }

      void SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad (const SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_sequence& s)
      {
        this->SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial () const
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_;
      }

      SimModel::SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial ()
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_;
      }

      void SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial (const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_sequence& s)
      {
        this->SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad () const
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_;
      }

      SimModel::SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad ()
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_;
      }

      void SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad (const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_sequence& s)
      {
        this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial () const
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_;
      }

      SimModel::SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial ()
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_;
      }

      void SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial (const SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_sequence& s)
      {
        this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil () const
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_;
      }

      SimModel::SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_sequence& SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil ()
      {
        return this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_;
      }

      void SimModel::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil (const SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_sequence& s)
      {
        this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW (const SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW (const SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW (const SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW () const
      {
        return this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_;
      }

      SimModel::SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_sequence& SimModel::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW ()
      {
        return this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_;
      }

      void SimModel::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW (const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_sequence& s)
      {
        this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow () const
      {
        return this->SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow ()
      {
        return this->SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow (const SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate () const
      {
        return this->SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate ()
      {
        return this->SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate (const SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent () const
      {
        return this->SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent ()
      {
        return this->SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent (const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench () const
      {
        return this->SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench ()
      {
        return this->SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench (const SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExEarthToWater_Surface_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface () const
      {
        return this->SimFlowEnergyTransfer_HeatExEarthToWater_Surface_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExEarthToWater_Surface_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface ()
      {
        return this->SimFlowEnergyTransfer_HeatExEarthToWater_Surface_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_Surface (const SimFlowEnergyTransfer_HeatExEarthToWater_Surface_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExEarthToWater_Surface_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_Vertical () const
      {
        return this->SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_Vertical ()
      {
        return this->SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExEarthToWater_Vertical (const SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser (const SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser (const SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser (const SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser (const SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater () const
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater ()
      {
        return this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater (const SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatExWaterToWater_Pond_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExWaterToWater_Pond () const
      {
        return this->SimFlowEnergyTransfer_HeatExWaterToWater_Pond_;
      }

      SimModel::SimFlowEnergyTransfer_HeatExWaterToWater_Pond_sequence& SimModel::
      SimFlowEnergyTransfer_HeatExWaterToWater_Pond ()
      {
        return this->SimFlowEnergyTransfer_HeatExWaterToWater_Pond_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatExWaterToWater_Pond (const SimFlowEnergyTransfer_HeatExWaterToWater_Pond_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatExWaterToWater_Pond_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric (const SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage (const SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric (const SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas (const SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage (const SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas (const SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam (const SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam (const SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump (const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater () const
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_;
      }

      SimModel::SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_sequence& SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater ()
      {
        return this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_;
      }

      void SimModel::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater (const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_sequence& s)
      {
        this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_Humidifier_ElectricSteam_sequence& SimModel::
      SimFlowEnergyTransfer_Humidifier_ElectricSteam () const
      {
        return this->SimFlowEnergyTransfer_Humidifier_ElectricSteam_;
      }

      SimModel::SimFlowEnergyTransfer_Humidifier_ElectricSteam_sequence& SimModel::
      SimFlowEnergyTransfer_Humidifier_ElectricSteam ()
      {
        return this->SimFlowEnergyTransfer_Humidifier_ElectricSteam_;
      }

      void SimModel::
      SimFlowEnergyTransfer_Humidifier_ElectricSteam (const SimFlowEnergyTransfer_Humidifier_ElectricSteam_sequence& s)
      {
        this->SimFlowEnergyTransfer_Humidifier_ElectricSteam_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_sequence& SimModel::
      SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground () const
      {
        return this->SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_;
      }

      SimModel::SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_sequence& SimModel::
      SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground ()
      {
        return this->SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_;
      }

      void SimModel::
      SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground (const SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_sequence& s)
      {
        this->SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_Beam_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_Beam () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_Beam_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_Beam_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_Beam ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_Beam_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_Beam (const SimFlowEnergyTransfer_RadiantDevice_Beam_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_Beam_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow (const SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow (const SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated (const SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow (const SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow (const SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated (const SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_HighTemp_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_HighTemp () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_HighTemp_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_HighTemp_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_HighTemp ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_HighTemp_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_HighTemp (const SimFlowEnergyTransfer_RadiantDevice_HighTemp_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_HighTemp_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric (const SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_ = s;
      }

      const SimModel::SimFlowEnergyTransfer_RadiantDevice_Slab_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_Slab () const
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_Slab_;
      }

      SimModel::SimFlowEnergyTransfer_RadiantDevice_Slab_sequence& SimModel::
      SimFlowEnergyTransfer_RadiantDevice_Slab ()
      {
        return this->SimFlowEnergyTransfer_RadiantDevice_Slab_;
      }

      void SimModel::
      SimFlowEnergyTransfer_RadiantDevice_Slab (const SimFlowEnergyTransfer_RadiantDevice_Slab_sequence& s)
      {
        this->SimFlowEnergyTransfer_RadiantDevice_Slab_ = s;
      }

      const SimModel::SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater () const
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_;
      }

      SimModel::SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater ()
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_;
      }

      void SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater (const SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_sequence& s)
      {
        this->SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_ = s;
      }

      const SimModel::SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_HeatPump () const
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_;
      }

      SimModel::SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_HeatPump ()
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_;
      }

      void SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_HeatPump (const SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_sequence& s)
      {
        this->SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_ = s;
      }

      const SimModel::SimFlowEnergyTransferStorage_HotWaterTank_Mixed_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed () const
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_Mixed_;
      }

      SimModel::SimFlowEnergyTransferStorage_HotWaterTank_Mixed_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed ()
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_Mixed_;
      }

      void SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_Mixed (const SimFlowEnergyTransferStorage_HotWaterTank_Mixed_sequence& s)
      {
        this->SimFlowEnergyTransferStorage_HotWaterTank_Mixed_ = s;
      }

      const SimModel::SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_MixedTank () const
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_;
      }

      SimModel::SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_MixedTank ()
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_;
      }

      void SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_MixedTank (const SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_sequence& s)
      {
        this->SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_ = s;
      }

      const SimModel::SimFlowEnergyTransferStorage_HotWaterTank_Stratified_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_Stratified () const
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_Stratified_;
      }

      SimModel::SimFlowEnergyTransferStorage_HotWaterTank_Stratified_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_Stratified ()
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_Stratified_;
      }

      void SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_Stratified (const SimFlowEnergyTransferStorage_HotWaterTank_Stratified_sequence& s)
      {
        this->SimFlowEnergyTransferStorage_HotWaterTank_Stratified_ = s;
      }

      const SimModel::SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank () const
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_;
      }

      SimModel::SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_sequence& SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank ()
      {
        return this->SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_;
      }

      void SimModel::
      SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank (const SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_sequence& s)
      {
        this->SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_ = s;
      }

      const SimModel::SimFlowFitting_Default_Default_sequence& SimModel::
      SimFlowFitting_Default_Default () const
      {
        return this->SimFlowFitting_Default_Default_;
      }

      SimModel::SimFlowFitting_Default_Default_sequence& SimModel::
      SimFlowFitting_Default_Default ()
      {
        return this->SimFlowFitting_Default_Default_;
      }

      void SimModel::
      SimFlowFitting_Default_Default (const SimFlowFitting_Default_Default_sequence& s)
      {
        this->SimFlowFitting_Default_Default_ = s;
      }

      const SimModel::SimFlowFitting_Difusser_Default_sequence& SimModel::
      SimFlowFitting_Difusser_Default () const
      {
        return this->SimFlowFitting_Difusser_Default_;
      }

      SimModel::SimFlowFitting_Difusser_Default_sequence& SimModel::
      SimFlowFitting_Difusser_Default ()
      {
        return this->SimFlowFitting_Difusser_Default_;
      }

      void SimModel::
      SimFlowFitting_Difusser_Default (const SimFlowFitting_Difusser_Default_sequence& s)
      {
        this->SimFlowFitting_Difusser_Default_ = s;
      }

      const SimModel::SimFlowFitting_Electrical_Transformer_sequence& SimModel::
      SimFlowFitting_Electrical_Transformer () const
      {
        return this->SimFlowFitting_Electrical_Transformer_;
      }

      SimModel::SimFlowFitting_Electrical_Transformer_sequence& SimModel::
      SimFlowFitting_Electrical_Transformer ()
      {
        return this->SimFlowFitting_Electrical_Transformer_;
      }

      void SimModel::
      SimFlowFitting_Electrical_Transformer (const SimFlowFitting_Electrical_Transformer_sequence& s)
      {
        this->SimFlowFitting_Electrical_Transformer_ = s;
      }

      const SimModel::SimFlowFitting_FlowElementProxy_Default_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_Default () const
      {
        return this->SimFlowFitting_FlowElementProxy_Default_;
      }

      SimModel::SimFlowFitting_FlowElementProxy_Default_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_Default ()
      {
        return this->SimFlowFitting_FlowElementProxy_Default_;
      }

      void SimModel::
      SimFlowFitting_FlowElementProxy_Default (const SimFlowFitting_FlowElementProxy_Default_sequence& s)
      {
        this->SimFlowFitting_FlowElementProxy_Default_ = s;
      }

      const SimModel::SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop () const
      {
        return this->SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_;
      }

      SimModel::SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop ()
      {
        return this->SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_;
      }

      void SimModel::
      SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop (const SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_sequence& s)
      {
        this->SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_ = s;
      }

      const SimModel::SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop () const
      {
        return this->SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_;
      }

      SimModel::SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop ()
      {
        return this->SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_;
      }

      void SimModel::
      SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop (const SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_sequence& s)
      {
        this->SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_ = s;
      }

      const SimModel::SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop () const
      {
        return this->SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_;
      }

      SimModel::SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop ()
      {
        return this->SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_;
      }

      void SimModel::
      SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop (const SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_sequence& s)
      {
        this->SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_ = s;
      }

      const SimModel::SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop () const
      {
        return this->SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_;
      }

      SimModel::SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_sequence& SimModel::
      SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop ()
      {
        return this->SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_;
      }

      void SimModel::
      SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop (const SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_sequence& s)
      {
        this->SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_AirMixer_sequence& SimModel::
      SimFlowFitting_Mixer_AirMixer () const
      {
        return this->SimFlowFitting_Mixer_AirMixer_;
      }

      SimModel::SimFlowFitting_Mixer_AirMixer_sequence& SimModel::
      SimFlowFitting_Mixer_AirMixer ()
      {
        return this->SimFlowFitting_Mixer_AirMixer_;
      }

      void SimModel::
      SimFlowFitting_Mixer_AirMixer (const SimFlowFitting_Mixer_AirMixer_sequence& s)
      {
        this->SimFlowFitting_Mixer_AirMixer_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_AirMixerOutdoor_sequence& SimModel::
      SimFlowFitting_Mixer_AirMixerOutdoor () const
      {
        return this->SimFlowFitting_Mixer_AirMixerOutdoor_;
      }

      SimModel::SimFlowFitting_Mixer_AirMixerOutdoor_sequence& SimModel::
      SimFlowFitting_Mixer_AirMixerOutdoor ()
      {
        return this->SimFlowFitting_Mixer_AirMixerOutdoor_;
      }

      void SimModel::
      SimFlowFitting_Mixer_AirMixerOutdoor (const SimFlowFitting_Mixer_AirMixerOutdoor_sequence& s)
      {
        this->SimFlowFitting_Mixer_AirMixerOutdoor_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_AirMixerZoneReturn_sequence& SimModel::
      SimFlowFitting_Mixer_AirMixerZoneReturn () const
      {
        return this->SimFlowFitting_Mixer_AirMixerZoneReturn_;
      }

      SimModel::SimFlowFitting_Mixer_AirMixerZoneReturn_sequence& SimModel::
      SimFlowFitting_Mixer_AirMixerZoneReturn ()
      {
        return this->SimFlowFitting_Mixer_AirMixerZoneReturn_;
      }

      void SimModel::
      SimFlowFitting_Mixer_AirMixerZoneReturn (const SimFlowFitting_Mixer_AirMixerZoneReturn_sequence& s)
      {
        this->SimFlowFitting_Mixer_AirMixerZoneReturn_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_CondenserMixer_sequence& SimModel::
      SimFlowFitting_Mixer_CondenserMixer () const
      {
        return this->SimFlowFitting_Mixer_CondenserMixer_;
      }

      SimModel::SimFlowFitting_Mixer_CondenserMixer_sequence& SimModel::
      SimFlowFitting_Mixer_CondenserMixer ()
      {
        return this->SimFlowFitting_Mixer_CondenserMixer_;
      }

      void SimModel::
      SimFlowFitting_Mixer_CondenserMixer (const SimFlowFitting_Mixer_CondenserMixer_sequence& s)
      {
        this->SimFlowFitting_Mixer_CondenserMixer_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_DemandProxyMixer_sequence& SimModel::
      SimFlowFitting_Mixer_DemandProxyMixer () const
      {
        return this->SimFlowFitting_Mixer_DemandProxyMixer_;
      }

      SimModel::SimFlowFitting_Mixer_DemandProxyMixer_sequence& SimModel::
      SimFlowFitting_Mixer_DemandProxyMixer ()
      {
        return this->SimFlowFitting_Mixer_DemandProxyMixer_;
      }

      void SimModel::
      SimFlowFitting_Mixer_DemandProxyMixer (const SimFlowFitting_Mixer_DemandProxyMixer_sequence& s)
      {
        this->SimFlowFitting_Mixer_DemandProxyMixer_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_DemandProxyMixerAir_sequence& SimModel::
      SimFlowFitting_Mixer_DemandProxyMixerAir () const
      {
        return this->SimFlowFitting_Mixer_DemandProxyMixerAir_;
      }

      SimModel::SimFlowFitting_Mixer_DemandProxyMixerAir_sequence& SimModel::
      SimFlowFitting_Mixer_DemandProxyMixerAir ()
      {
        return this->SimFlowFitting_Mixer_DemandProxyMixerAir_;
      }

      void SimModel::
      SimFlowFitting_Mixer_DemandProxyMixerAir (const SimFlowFitting_Mixer_DemandProxyMixerAir_sequence& s)
      {
        this->SimFlowFitting_Mixer_DemandProxyMixerAir_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_DemandProxyMixerWater_sequence& SimModel::
      SimFlowFitting_Mixer_DemandProxyMixerWater () const
      {
        return this->SimFlowFitting_Mixer_DemandProxyMixerWater_;
      }

      SimModel::SimFlowFitting_Mixer_DemandProxyMixerWater_sequence& SimModel::
      SimFlowFitting_Mixer_DemandProxyMixerWater ()
      {
        return this->SimFlowFitting_Mixer_DemandProxyMixerWater_;
      }

      void SimModel::
      SimFlowFitting_Mixer_DemandProxyMixerWater (const SimFlowFitting_Mixer_DemandProxyMixerWater_sequence& s)
      {
        this->SimFlowFitting_Mixer_DemandProxyMixerWater_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_SteamMixer_sequence& SimModel::
      SimFlowFitting_Mixer_SteamMixer () const
      {
        return this->SimFlowFitting_Mixer_SteamMixer_;
      }

      SimModel::SimFlowFitting_Mixer_SteamMixer_sequence& SimModel::
      SimFlowFitting_Mixer_SteamMixer ()
      {
        return this->SimFlowFitting_Mixer_SteamMixer_;
      }

      void SimModel::
      SimFlowFitting_Mixer_SteamMixer (const SimFlowFitting_Mixer_SteamMixer_sequence& s)
      {
        this->SimFlowFitting_Mixer_SteamMixer_ = s;
      }

      const SimModel::SimFlowFitting_Mixer_WaterMixer_sequence& SimModel::
      SimFlowFitting_Mixer_WaterMixer () const
      {
        return this->SimFlowFitting_Mixer_WaterMixer_;
      }

      SimModel::SimFlowFitting_Mixer_WaterMixer_sequence& SimModel::
      SimFlowFitting_Mixer_WaterMixer ()
      {
        return this->SimFlowFitting_Mixer_WaterMixer_;
      }

      void SimModel::
      SimFlowFitting_Mixer_WaterMixer (const SimFlowFitting_Mixer_WaterMixer_sequence& s)
      {
        this->SimFlowFitting_Mixer_WaterMixer_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_AirSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_AirSplitter () const
      {
        return this->SimFlowFitting_Splitter_AirSplitter_;
      }

      SimModel::SimFlowFitting_Splitter_AirSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_AirSplitter ()
      {
        return this->SimFlowFitting_Splitter_AirSplitter_;
      }

      void SimModel::
      SimFlowFitting_Splitter_AirSplitter (const SimFlowFitting_Splitter_AirSplitter_sequence& s)
      {
        this->SimFlowFitting_Splitter_AirSplitter_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_AirSplitterZoneSupply_sequence& SimModel::
      SimFlowFitting_Splitter_AirSplitterZoneSupply () const
      {
        return this->SimFlowFitting_Splitter_AirSplitterZoneSupply_;
      }

      SimModel::SimFlowFitting_Splitter_AirSplitterZoneSupply_sequence& SimModel::
      SimFlowFitting_Splitter_AirSplitterZoneSupply ()
      {
        return this->SimFlowFitting_Splitter_AirSplitterZoneSupply_;
      }

      void SimModel::
      SimFlowFitting_Splitter_AirSplitterZoneSupply (const SimFlowFitting_Splitter_AirSplitterZoneSupply_sequence& s)
      {
        this->SimFlowFitting_Splitter_AirSplitterZoneSupply_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_CondenserSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_CondenserSplitter () const
      {
        return this->SimFlowFitting_Splitter_CondenserSplitter_;
      }

      SimModel::SimFlowFitting_Splitter_CondenserSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_CondenserSplitter ()
      {
        return this->SimFlowFitting_Splitter_CondenserSplitter_;
      }

      void SimModel::
      SimFlowFitting_Splitter_CondenserSplitter (const SimFlowFitting_Splitter_CondenserSplitter_sequence& s)
      {
        this->SimFlowFitting_Splitter_CondenserSplitter_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_DemandProxySplitter_sequence& SimModel::
      SimFlowFitting_Splitter_DemandProxySplitter () const
      {
        return this->SimFlowFitting_Splitter_DemandProxySplitter_;
      }

      SimModel::SimFlowFitting_Splitter_DemandProxySplitter_sequence& SimModel::
      SimFlowFitting_Splitter_DemandProxySplitter ()
      {
        return this->SimFlowFitting_Splitter_DemandProxySplitter_;
      }

      void SimModel::
      SimFlowFitting_Splitter_DemandProxySplitter (const SimFlowFitting_Splitter_DemandProxySplitter_sequence& s)
      {
        this->SimFlowFitting_Splitter_DemandProxySplitter_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_DemandProxySplitterAir_sequence& SimModel::
      SimFlowFitting_Splitter_DemandProxySplitterAir () const
      {
        return this->SimFlowFitting_Splitter_DemandProxySplitterAir_;
      }

      SimModel::SimFlowFitting_Splitter_DemandProxySplitterAir_sequence& SimModel::
      SimFlowFitting_Splitter_DemandProxySplitterAir ()
      {
        return this->SimFlowFitting_Splitter_DemandProxySplitterAir_;
      }

      void SimModel::
      SimFlowFitting_Splitter_DemandProxySplitterAir (const SimFlowFitting_Splitter_DemandProxySplitterAir_sequence& s)
      {
        this->SimFlowFitting_Splitter_DemandProxySplitterAir_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_DemandProxySplitterWater_sequence& SimModel::
      SimFlowFitting_Splitter_DemandProxySplitterWater () const
      {
        return this->SimFlowFitting_Splitter_DemandProxySplitterWater_;
      }

      SimModel::SimFlowFitting_Splitter_DemandProxySplitterWater_sequence& SimModel::
      SimFlowFitting_Splitter_DemandProxySplitterWater ()
      {
        return this->SimFlowFitting_Splitter_DemandProxySplitterWater_;
      }

      void SimModel::
      SimFlowFitting_Splitter_DemandProxySplitterWater (const SimFlowFitting_Splitter_DemandProxySplitterWater_sequence& s)
      {
        this->SimFlowFitting_Splitter_DemandProxySplitterWater_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_SteamSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_SteamSplitter () const
      {
        return this->SimFlowFitting_Splitter_SteamSplitter_;
      }

      SimModel::SimFlowFitting_Splitter_SteamSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_SteamSplitter ()
      {
        return this->SimFlowFitting_Splitter_SteamSplitter_;
      }

      void SimModel::
      SimFlowFitting_Splitter_SteamSplitter (const SimFlowFitting_Splitter_SteamSplitter_sequence& s)
      {
        this->SimFlowFitting_Splitter_SteamSplitter_ = s;
      }

      const SimModel::SimFlowFitting_Splitter_WaterSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_WaterSplitter () const
      {
        return this->SimFlowFitting_Splitter_WaterSplitter_;
      }

      SimModel::SimFlowFitting_Splitter_WaterSplitter_sequence& SimModel::
      SimFlowFitting_Splitter_WaterSplitter ()
      {
        return this->SimFlowFitting_Splitter_WaterSplitter_;
      }

      void SimModel::
      SimFlowFitting_Splitter_WaterSplitter (const SimFlowFitting_Splitter_WaterSplitter_sequence& s)
      {
        this->SimFlowFitting_Splitter_WaterSplitter_ = s;
      }

      const SimModel::SimFlowMover_Default_Default_sequence& SimModel::
      SimFlowMover_Default_Default () const
      {
        return this->SimFlowMover_Default_Default_;
      }

      SimModel::SimFlowMover_Default_Default_sequence& SimModel::
      SimFlowMover_Default_Default ()
      {
        return this->SimFlowMover_Default_Default_;
      }

      void SimModel::
      SimFlowMover_Default_Default (const SimFlowMover_Default_Default_sequence& s)
      {
        this->SimFlowMover_Default_Default_ = s;
      }

      const SimModel::SimFlowMover_Fan_NightVentilation_sequence& SimModel::
      SimFlowMover_Fan_NightVentilation () const
      {
        return this->SimFlowMover_Fan_NightVentilation_;
      }

      SimModel::SimFlowMover_Fan_NightVentilation_sequence& SimModel::
      SimFlowMover_Fan_NightVentilation ()
      {
        return this->SimFlowMover_Fan_NightVentilation_;
      }

      void SimModel::
      SimFlowMover_Fan_NightVentilation (const SimFlowMover_Fan_NightVentilation_sequence& s)
      {
        this->SimFlowMover_Fan_NightVentilation_ = s;
      }

      const SimModel::SimFlowMover_Fan_Relief_sequence& SimModel::
      SimFlowMover_Fan_Relief () const
      {
        return this->SimFlowMover_Fan_Relief_;
      }

      SimModel::SimFlowMover_Fan_Relief_sequence& SimModel::
      SimFlowMover_Fan_Relief ()
      {
        return this->SimFlowMover_Fan_Relief_;
      }

      void SimModel::
      SimFlowMover_Fan_Relief (const SimFlowMover_Fan_Relief_sequence& s)
      {
        this->SimFlowMover_Fan_Relief_ = s;
      }

      const SimModel::SimFlowMover_Fan_ZoneExhaust_sequence& SimModel::
      SimFlowMover_Fan_ZoneExhaust () const
      {
        return this->SimFlowMover_Fan_ZoneExhaust_;
      }

      SimModel::SimFlowMover_Fan_ZoneExhaust_sequence& SimModel::
      SimFlowMover_Fan_ZoneExhaust ()
      {
        return this->SimFlowMover_Fan_ZoneExhaust_;
      }

      void SimModel::
      SimFlowMover_Fan_ZoneExhaust (const SimFlowMover_Fan_ZoneExhaust_sequence& s)
      {
        this->SimFlowMover_Fan_ZoneExhaust_ = s;
      }

      const SimModel::SimFlowMover_Pump_ConstantSpeedReturn_sequence& SimModel::
      SimFlowMover_Pump_ConstantSpeedReturn () const
      {
        return this->SimFlowMover_Pump_ConstantSpeedReturn_;
      }

      SimModel::SimFlowMover_Pump_ConstantSpeedReturn_sequence& SimModel::
      SimFlowMover_Pump_ConstantSpeedReturn ()
      {
        return this->SimFlowMover_Pump_ConstantSpeedReturn_;
      }

      void SimModel::
      SimFlowMover_Pump_ConstantSpeedReturn (const SimFlowMover_Pump_ConstantSpeedReturn_sequence& s)
      {
        this->SimFlowMover_Pump_ConstantSpeedReturn_ = s;
      }

      const SimModel::SimFlowMover_Pump_ConstantSpeedSupply_sequence& SimModel::
      SimFlowMover_Pump_ConstantSpeedSupply () const
      {
        return this->SimFlowMover_Pump_ConstantSpeedSupply_;
      }

      SimModel::SimFlowMover_Pump_ConstantSpeedSupply_sequence& SimModel::
      SimFlowMover_Pump_ConstantSpeedSupply ()
      {
        return this->SimFlowMover_Pump_ConstantSpeedSupply_;
      }

      void SimModel::
      SimFlowMover_Pump_ConstantSpeedSupply (const SimFlowMover_Pump_ConstantSpeedSupply_sequence& s)
      {
        this->SimFlowMover_Pump_ConstantSpeedSupply_ = s;
      }

      const SimModel::SimFlowMover_Pump_UserDefined_sequence& SimModel::
      SimFlowMover_Pump_UserDefined () const
      {
        return this->SimFlowMover_Pump_UserDefined_;
      }

      SimModel::SimFlowMover_Pump_UserDefined_sequence& SimModel::
      SimFlowMover_Pump_UserDefined ()
      {
        return this->SimFlowMover_Pump_UserDefined_;
      }

      void SimModel::
      SimFlowMover_Pump_UserDefined (const SimFlowMover_Pump_UserDefined_sequence& s)
      {
        this->SimFlowMover_Pump_UserDefined_ = s;
      }

      const SimModel::SimFlowMover_Pump_VariableSpeedReturn_sequence& SimModel::
      SimFlowMover_Pump_VariableSpeedReturn () const
      {
        return this->SimFlowMover_Pump_VariableSpeedReturn_;
      }

      SimModel::SimFlowMover_Pump_VariableSpeedReturn_sequence& SimModel::
      SimFlowMover_Pump_VariableSpeedReturn ()
      {
        return this->SimFlowMover_Pump_VariableSpeedReturn_;
      }

      void SimModel::
      SimFlowMover_Pump_VariableSpeedReturn (const SimFlowMover_Pump_VariableSpeedReturn_sequence& s)
      {
        this->SimFlowMover_Pump_VariableSpeedReturn_ = s;
      }

      const SimModel::SimFlowMover_Pump_VariableSpeedSupply_sequence& SimModel::
      SimFlowMover_Pump_VariableSpeedSupply () const
      {
        return this->SimFlowMover_Pump_VariableSpeedSupply_;
      }

      SimModel::SimFlowMover_Pump_VariableSpeedSupply_sequence& SimModel::
      SimFlowMover_Pump_VariableSpeedSupply ()
      {
        return this->SimFlowMover_Pump_VariableSpeedSupply_;
      }

      void SimModel::
      SimFlowMover_Pump_VariableSpeedSupply (const SimFlowMover_Pump_VariableSpeedSupply_sequence& s)
      {
        this->SimFlowMover_Pump_VariableSpeedSupply_ = s;
      }

      const SimModel::SimFlowMover_Pump_VarSpeedCondensateReturn_sequence& SimModel::
      SimFlowMover_Pump_VarSpeedCondensateReturn () const
      {
        return this->SimFlowMover_Pump_VarSpeedCondensateReturn_;
      }

      SimModel::SimFlowMover_Pump_VarSpeedCondensateReturn_sequence& SimModel::
      SimFlowMover_Pump_VarSpeedCondensateReturn ()
      {
        return this->SimFlowMover_Pump_VarSpeedCondensateReturn_;
      }

      void SimModel::
      SimFlowMover_Pump_VarSpeedCondensateReturn (const SimFlowMover_Pump_VarSpeedCondensateReturn_sequence& s)
      {
        this->SimFlowMover_Pump_VarSpeedCondensateReturn_ = s;
      }

      const SimModel::SimFlowMover_Pump_VarSpeedCondensateSupply_sequence& SimModel::
      SimFlowMover_Pump_VarSpeedCondensateSupply () const
      {
        return this->SimFlowMover_Pump_VarSpeedCondensateSupply_;
      }

      SimModel::SimFlowMover_Pump_VarSpeedCondensateSupply_sequence& SimModel::
      SimFlowMover_Pump_VarSpeedCondensateSupply ()
      {
        return this->SimFlowMover_Pump_VarSpeedCondensateSupply_;
      }

      void SimModel::
      SimFlowMover_Pump_VarSpeedCondensateSupply (const SimFlowMover_Pump_VarSpeedCondensateSupply_sequence& s)
      {
        this->SimFlowMover_Pump_VarSpeedCondensateSupply_ = s;
      }

      const SimModel::SimFlowMover_PumpSet_ConstantSpeed2_sequence& SimModel::
      SimFlowMover_PumpSet_ConstantSpeed2 () const
      {
        return this->SimFlowMover_PumpSet_ConstantSpeed2_;
      }

      SimModel::SimFlowMover_PumpSet_ConstantSpeed2_sequence& SimModel::
      SimFlowMover_PumpSet_ConstantSpeed2 ()
      {
        return this->SimFlowMover_PumpSet_ConstantSpeed2_;
      }

      void SimModel::
      SimFlowMover_PumpSet_ConstantSpeed2 (const SimFlowMover_PumpSet_ConstantSpeed2_sequence& s)
      {
        this->SimFlowMover_PumpSet_ConstantSpeed2_ = s;
      }

      const SimModel::SimFlowMover_PumpSet_ConstantSpeed3_sequence& SimModel::
      SimFlowMover_PumpSet_ConstantSpeed3 () const
      {
        return this->SimFlowMover_PumpSet_ConstantSpeed3_;
      }

      SimModel::SimFlowMover_PumpSet_ConstantSpeed3_sequence& SimModel::
      SimFlowMover_PumpSet_ConstantSpeed3 ()
      {
        return this->SimFlowMover_PumpSet_ConstantSpeed3_;
      }

      void SimModel::
      SimFlowMover_PumpSet_ConstantSpeed3 (const SimFlowMover_PumpSet_ConstantSpeed3_sequence& s)
      {
        this->SimFlowMover_PumpSet_ConstantSpeed3_ = s;
      }

      const SimModel::SimFlowMover_PumpSet_VariableSpeed2_sequence& SimModel::
      SimFlowMover_PumpSet_VariableSpeed2 () const
      {
        return this->SimFlowMover_PumpSet_VariableSpeed2_;
      }

      SimModel::SimFlowMover_PumpSet_VariableSpeed2_sequence& SimModel::
      SimFlowMover_PumpSet_VariableSpeed2 ()
      {
        return this->SimFlowMover_PumpSet_VariableSpeed2_;
      }

      void SimModel::
      SimFlowMover_PumpSet_VariableSpeed2 (const SimFlowMover_PumpSet_VariableSpeed2_sequence& s)
      {
        this->SimFlowMover_PumpSet_VariableSpeed2_ = s;
      }

      const SimModel::SimFlowMover_PumpSet_VariableSpeed3_sequence& SimModel::
      SimFlowMover_PumpSet_VariableSpeed3 () const
      {
        return this->SimFlowMover_PumpSet_VariableSpeed3_;
      }

      SimModel::SimFlowMover_PumpSet_VariableSpeed3_sequence& SimModel::
      SimFlowMover_PumpSet_VariableSpeed3 ()
      {
        return this->SimFlowMover_PumpSet_VariableSpeed3_;
      }

      void SimModel::
      SimFlowMover_PumpSet_VariableSpeed3 (const SimFlowMover_PumpSet_VariableSpeed3_sequence& s)
      {
        this->SimFlowMover_PumpSet_VariableSpeed3_ = s;
      }

      const SimModel::SimFlowMover_ReturnFan_ComponentModel_sequence& SimModel::
      SimFlowMover_ReturnFan_ComponentModel () const
      {
        return this->SimFlowMover_ReturnFan_ComponentModel_;
      }

      SimModel::SimFlowMover_ReturnFan_ComponentModel_sequence& SimModel::
      SimFlowMover_ReturnFan_ComponentModel ()
      {
        return this->SimFlowMover_ReturnFan_ComponentModel_;
      }

      void SimModel::
      SimFlowMover_ReturnFan_ComponentModel (const SimFlowMover_ReturnFan_ComponentModel_sequence& s)
      {
        this->SimFlowMover_ReturnFan_ComponentModel_ = s;
      }

      const SimModel::SimFlowMover_ReturnFan_ConstantVolume_sequence& SimModel::
      SimFlowMover_ReturnFan_ConstantVolume () const
      {
        return this->SimFlowMover_ReturnFan_ConstantVolume_;
      }

      SimModel::SimFlowMover_ReturnFan_ConstantVolume_sequence& SimModel::
      SimFlowMover_ReturnFan_ConstantVolume ()
      {
        return this->SimFlowMover_ReturnFan_ConstantVolume_;
      }

      void SimModel::
      SimFlowMover_ReturnFan_ConstantVolume (const SimFlowMover_ReturnFan_ConstantVolume_sequence& s)
      {
        this->SimFlowMover_ReturnFan_ConstantVolume_ = s;
      }

      const SimModel::SimFlowMover_ReturnFan_OnOff_sequence& SimModel::
      SimFlowMover_ReturnFan_OnOff () const
      {
        return this->SimFlowMover_ReturnFan_OnOff_;
      }

      SimModel::SimFlowMover_ReturnFan_OnOff_sequence& SimModel::
      SimFlowMover_ReturnFan_OnOff ()
      {
        return this->SimFlowMover_ReturnFan_OnOff_;
      }

      void SimModel::
      SimFlowMover_ReturnFan_OnOff (const SimFlowMover_ReturnFan_OnOff_sequence& s)
      {
        this->SimFlowMover_ReturnFan_OnOff_ = s;
      }

      const SimModel::SimFlowMover_ReturnFan_VariableVolume_sequence& SimModel::
      SimFlowMover_ReturnFan_VariableVolume () const
      {
        return this->SimFlowMover_ReturnFan_VariableVolume_;
      }

      SimModel::SimFlowMover_ReturnFan_VariableVolume_sequence& SimModel::
      SimFlowMover_ReturnFan_VariableVolume ()
      {
        return this->SimFlowMover_ReturnFan_VariableVolume_;
      }

      void SimModel::
      SimFlowMover_ReturnFan_VariableVolume (const SimFlowMover_ReturnFan_VariableVolume_sequence& s)
      {
        this->SimFlowMover_ReturnFan_VariableVolume_ = s;
      }

      const SimModel::SimFlowMover_SupplyFan_ComponentModel_sequence& SimModel::
      SimFlowMover_SupplyFan_ComponentModel () const
      {
        return this->SimFlowMover_SupplyFan_ComponentModel_;
      }

      SimModel::SimFlowMover_SupplyFan_ComponentModel_sequence& SimModel::
      SimFlowMover_SupplyFan_ComponentModel ()
      {
        return this->SimFlowMover_SupplyFan_ComponentModel_;
      }

      void SimModel::
      SimFlowMover_SupplyFan_ComponentModel (const SimFlowMover_SupplyFan_ComponentModel_sequence& s)
      {
        this->SimFlowMover_SupplyFan_ComponentModel_ = s;
      }

      const SimModel::SimFlowMover_SupplyFan_ConstantVolume_sequence& SimModel::
      SimFlowMover_SupplyFan_ConstantVolume () const
      {
        return this->SimFlowMover_SupplyFan_ConstantVolume_;
      }

      SimModel::SimFlowMover_SupplyFan_ConstantVolume_sequence& SimModel::
      SimFlowMover_SupplyFan_ConstantVolume ()
      {
        return this->SimFlowMover_SupplyFan_ConstantVolume_;
      }

      void SimModel::
      SimFlowMover_SupplyFan_ConstantVolume (const SimFlowMover_SupplyFan_ConstantVolume_sequence& s)
      {
        this->SimFlowMover_SupplyFan_ConstantVolume_ = s;
      }

      const SimModel::SimFlowMover_SupplyFan_OnOff_sequence& SimModel::
      SimFlowMover_SupplyFan_OnOff () const
      {
        return this->SimFlowMover_SupplyFan_OnOff_;
      }

      SimModel::SimFlowMover_SupplyFan_OnOff_sequence& SimModel::
      SimFlowMover_SupplyFan_OnOff ()
      {
        return this->SimFlowMover_SupplyFan_OnOff_;
      }

      void SimModel::
      SimFlowMover_SupplyFan_OnOff (const SimFlowMover_SupplyFan_OnOff_sequence& s)
      {
        this->SimFlowMover_SupplyFan_OnOff_ = s;
      }

      const SimModel::SimFlowMover_SupplyFan_VariableVolume_sequence& SimModel::
      SimFlowMover_SupplyFan_VariableVolume () const
      {
        return this->SimFlowMover_SupplyFan_VariableVolume_;
      }

      SimModel::SimFlowMover_SupplyFan_VariableVolume_sequence& SimModel::
      SimFlowMover_SupplyFan_VariableVolume ()
      {
        return this->SimFlowMover_SupplyFan_VariableVolume_;
      }

      void SimModel::
      SimFlowMover_SupplyFan_VariableVolume (const SimFlowMover_SupplyFan_VariableVolume_sequence& s)
      {
        this->SimFlowMover_SupplyFan_VariableVolume_ = s;
      }

      const SimModel::SimFlowPlant_Boiler_BoilerHotWater_sequence& SimModel::
      SimFlowPlant_Boiler_BoilerHotWater () const
      {
        return this->SimFlowPlant_Boiler_BoilerHotWater_;
      }

      SimModel::SimFlowPlant_Boiler_BoilerHotWater_sequence& SimModel::
      SimFlowPlant_Boiler_BoilerHotWater ()
      {
        return this->SimFlowPlant_Boiler_BoilerHotWater_;
      }

      void SimModel::
      SimFlowPlant_Boiler_BoilerHotWater (const SimFlowPlant_Boiler_BoilerHotWater_sequence& s)
      {
        this->SimFlowPlant_Boiler_BoilerHotWater_ = s;
      }

      const SimModel::SimFlowPlant_Boiler_BoilerSteam_sequence& SimModel::
      SimFlowPlant_Boiler_BoilerSteam () const
      {
        return this->SimFlowPlant_Boiler_BoilerSteam_;
      }

      SimModel::SimFlowPlant_Boiler_BoilerSteam_sequence& SimModel::
      SimFlowPlant_Boiler_BoilerSteam ()
      {
        return this->SimFlowPlant_Boiler_BoilerSteam_;
      }

      void SimModel::
      SimFlowPlant_Boiler_BoilerSteam (const SimFlowPlant_Boiler_BoilerSteam_sequence& s)
      {
        this->SimFlowPlant_Boiler_BoilerSteam_ = s;
      }

      const SimModel::SimFlowPlant_Boiler_UserDefined_sequence& SimModel::
      SimFlowPlant_Boiler_UserDefined () const
      {
        return this->SimFlowPlant_Boiler_UserDefined_;
      }

      SimModel::SimFlowPlant_Boiler_UserDefined_sequence& SimModel::
      SimFlowPlant_Boiler_UserDefined ()
      {
        return this->SimFlowPlant_Boiler_UserDefined_;
      }

      void SimModel::
      SimFlowPlant_Boiler_UserDefined (const SimFlowPlant_Boiler_UserDefined_sequence& s)
      {
        this->SimFlowPlant_Boiler_UserDefined_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_Absorption_sequence& SimModel::
      SimFlowPlant_Chiller_Absorption () const
      {
        return this->SimFlowPlant_Chiller_Absorption_;
      }

      SimModel::SimFlowPlant_Chiller_Absorption_sequence& SimModel::
      SimFlowPlant_Chiller_Absorption ()
      {
        return this->SimFlowPlant_Chiller_Absorption_;
      }

      void SimModel::
      SimFlowPlant_Chiller_Absorption (const SimFlowPlant_Chiller_Absorption_sequence& s)
      {
        this->SimFlowPlant_Chiller_Absorption_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_AbsorptionIndirect_sequence& SimModel::
      SimFlowPlant_Chiller_AbsorptionIndirect () const
      {
        return this->SimFlowPlant_Chiller_AbsorptionIndirect_;
      }

      SimModel::SimFlowPlant_Chiller_AbsorptionIndirect_sequence& SimModel::
      SimFlowPlant_Chiller_AbsorptionIndirect ()
      {
        return this->SimFlowPlant_Chiller_AbsorptionIndirect_;
      }

      void SimModel::
      SimFlowPlant_Chiller_AbsorptionIndirect (const SimFlowPlant_Chiller_AbsorptionIndirect_sequence& s)
      {
        this->SimFlowPlant_Chiller_AbsorptionIndirect_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine () const
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_;
      }

      SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine ()
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_;
      }

      void SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine (const SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_sequence& s)
      {
        this->SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP () const
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_;
      }

      SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP ()
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_;
      }

      void SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP (const SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_sequence& s)
      {
        this->SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionElectric_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric () const
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_;
      }

      SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionElectric_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric ()
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_;
      }

      void SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric (const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_sequence& s)
      {
        this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR () const
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_;
      }

      SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR ()
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_;
      }

      void SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR (const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_sequence& s)
      {
        this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR () const
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_;
      }

      SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR ()
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_;
      }

      void SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR (const SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_sequence& s)
      {
        this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven () const
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_;
      }

      SimModel::SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_sequence& SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven ()
      {
        return this->SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_;
      }

      void SimModel::
      SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven (const SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_sequence& s)
      {
        this->SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_ = s;
      }

      const SimModel::SimFlowPlant_Chiller_UserDefined_sequence& SimModel::
      SimFlowPlant_Chiller_UserDefined () const
      {
        return this->SimFlowPlant_Chiller_UserDefined_;
      }

      SimModel::SimFlowPlant_Chiller_UserDefined_sequence& SimModel::
      SimFlowPlant_Chiller_UserDefined ()
      {
        return this->SimFlowPlant_Chiller_UserDefined_;
      }

      void SimModel::
      SimFlowPlant_Chiller_UserDefined (const SimFlowPlant_Chiller_UserDefined_sequence& s)
      {
        this->SimFlowPlant_Chiller_UserDefined_ = s;
      }

      const SimModel::SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_sequence& SimModel::
      SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect () const
      {
        return this->SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_;
      }

      SimModel::SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_sequence& SimModel::
      SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect ()
      {
        return this->SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_;
      }

      void SimModel::
      SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect (const SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_sequence& s)
      {
        this->SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_ = s;
      }

      const SimModel::SimFlowPlant_ChillerHeater_AbsorptionDirectFired_sequence& SimModel::
      SimFlowPlant_ChillerHeater_AbsorptionDirectFired () const
      {
        return this->SimFlowPlant_ChillerHeater_AbsorptionDirectFired_;
      }

      SimModel::SimFlowPlant_ChillerHeater_AbsorptionDirectFired_sequence& SimModel::
      SimFlowPlant_ChillerHeater_AbsorptionDirectFired ()
      {
        return this->SimFlowPlant_ChillerHeater_AbsorptionDirectFired_;
      }

      void SimModel::
      SimFlowPlant_ChillerHeater_AbsorptionDirectFired (const SimFlowPlant_ChillerHeater_AbsorptionDirectFired_sequence& s)
      {
        this->SimFlowPlant_ChillerHeater_AbsorptionDirectFired_ = s;
      }

      const SimModel::SimFlowPlant_ChillerHeater_PerformanceElectricEIR_sequence& SimModel::
      SimFlowPlant_ChillerHeater_PerformanceElectricEIR () const
      {
        return this->SimFlowPlant_ChillerHeater_PerformanceElectricEIR_;
      }

      SimModel::SimFlowPlant_ChillerHeater_PerformanceElectricEIR_sequence& SimModel::
      SimFlowPlant_ChillerHeater_PerformanceElectricEIR ()
      {
        return this->SimFlowPlant_ChillerHeater_PerformanceElectricEIR_;
      }

      void SimModel::
      SimFlowPlant_ChillerHeater_PerformanceElectricEIR (const SimFlowPlant_ChillerHeater_PerformanceElectricEIR_sequence& s)
      {
        this->SimFlowPlant_ChillerHeater_PerformanceElectricEIR_ = s;
      }

      const SimModel::SimFlowPlant_CoolingTower_SingleSpeed_sequence& SimModel::
      SimFlowPlant_CoolingTower_SingleSpeed () const
      {
        return this->SimFlowPlant_CoolingTower_SingleSpeed_;
      }

      SimModel::SimFlowPlant_CoolingTower_SingleSpeed_sequence& SimModel::
      SimFlowPlant_CoolingTower_SingleSpeed ()
      {
        return this->SimFlowPlant_CoolingTower_SingleSpeed_;
      }

      void SimModel::
      SimFlowPlant_CoolingTower_SingleSpeed (const SimFlowPlant_CoolingTower_SingleSpeed_sequence& s)
      {
        this->SimFlowPlant_CoolingTower_SingleSpeed_ = s;
      }

      const SimModel::SimFlowPlant_CoolingTower_TwoSpeed_sequence& SimModel::
      SimFlowPlant_CoolingTower_TwoSpeed () const
      {
        return this->SimFlowPlant_CoolingTower_TwoSpeed_;
      }

      SimModel::SimFlowPlant_CoolingTower_TwoSpeed_sequence& SimModel::
      SimFlowPlant_CoolingTower_TwoSpeed ()
      {
        return this->SimFlowPlant_CoolingTower_TwoSpeed_;
      }

      void SimModel::
      SimFlowPlant_CoolingTower_TwoSpeed (const SimFlowPlant_CoolingTower_TwoSpeed_sequence& s)
      {
        this->SimFlowPlant_CoolingTower_TwoSpeed_ = s;
      }

      const SimModel::SimFlowPlant_CoolingTower_UserDefined_sequence& SimModel::
      SimFlowPlant_CoolingTower_UserDefined () const
      {
        return this->SimFlowPlant_CoolingTower_UserDefined_;
      }

      SimModel::SimFlowPlant_CoolingTower_UserDefined_sequence& SimModel::
      SimFlowPlant_CoolingTower_UserDefined ()
      {
        return this->SimFlowPlant_CoolingTower_UserDefined_;
      }

      void SimModel::
      SimFlowPlant_CoolingTower_UserDefined (const SimFlowPlant_CoolingTower_UserDefined_sequence& s)
      {
        this->SimFlowPlant_CoolingTower_UserDefined_ = s;
      }

      const SimModel::SimFlowPlant_CoolingTower_VariableSpeed_sequence& SimModel::
      SimFlowPlant_CoolingTower_VariableSpeed () const
      {
        return this->SimFlowPlant_CoolingTower_VariableSpeed_;
      }

      SimModel::SimFlowPlant_CoolingTower_VariableSpeed_sequence& SimModel::
      SimFlowPlant_CoolingTower_VariableSpeed ()
      {
        return this->SimFlowPlant_CoolingTower_VariableSpeed_;
      }

      void SimModel::
      SimFlowPlant_CoolingTower_VariableSpeed (const SimFlowPlant_CoolingTower_VariableSpeed_sequence& s)
      {
        this->SimFlowPlant_CoolingTower_VariableSpeed_ = s;
      }

      const SimModel::SimFlowPlant_CoolingTower_VariableSpeed_Merkel_sequence& SimModel::
      SimFlowPlant_CoolingTower_VariableSpeed_Merkel () const
      {
        return this->SimFlowPlant_CoolingTower_VariableSpeed_Merkel_;
      }

      SimModel::SimFlowPlant_CoolingTower_VariableSpeed_Merkel_sequence& SimModel::
      SimFlowPlant_CoolingTower_VariableSpeed_Merkel ()
      {
        return this->SimFlowPlant_CoolingTower_VariableSpeed_Merkel_;
      }

      void SimModel::
      SimFlowPlant_CoolingTower_VariableSpeed_Merkel (const SimFlowPlant_CoolingTower_VariableSpeed_Merkel_sequence& s)
      {
        this->SimFlowPlant_CoolingTower_VariableSpeed_Merkel_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_CombustionTurbine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_CombustionTurbine () const
      {
        return this->SimFlowPlant_ElectricalGenerator_CombustionTurbine_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_CombustionTurbine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_CombustionTurbine ()
      {
        return this->SimFlowPlant_ElectricalGenerator_CombustionTurbine_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_CombustionTurbine (const SimFlowPlant_ElectricalGenerator_CombustionTurbine_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_CombustionTurbine_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_DefaultGenerator_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_DefaultGenerator () const
      {
        return this->SimFlowPlant_ElectricalGenerator_DefaultGenerator_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_DefaultGenerator_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_DefaultGenerator ()
      {
        return this->SimFlowPlant_ElectricalGenerator_DefaultGenerator_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_DefaultGenerator (const SimFlowPlant_ElectricalGenerator_DefaultGenerator_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_DefaultGenerator_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCell_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCell () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCell_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCell_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCell ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCell_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCell (const SimFlowPlant_ElectricalGenerator_FuelCell_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCell_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellAirSupply (const SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater (const SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage (const SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger (const SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellInverter_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellInverter () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellInverter_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellInverter_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellInverter ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellInverter_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellInverter (const SimFlowPlant_ElectricalGenerator_FuelCellInverter_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellInverter_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellPowerModule (const SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellStackCooler () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellStackCooler ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellStackCooler (const SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply (const SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelEquipment_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelEquipment () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelEquipment_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelEquipment_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelEquipment ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelEquipment_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelEquipment (const SimFlowPlant_ElectricalGenerator_FuelEquipment_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelEquipment_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_FuelSupply_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelSupply () const
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelSupply_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_FuelSupply_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_FuelSupply ()
      {
        return this->SimFlowPlant_ElectricalGenerator_FuelSupply_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_FuelSupply (const SimFlowPlant_ElectricalGenerator_FuelSupply_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_FuelSupply_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_InternalCombustionEngine () const
      {
        return this->SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_InternalCombustionEngine ()
      {
        return this->SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_InternalCombustionEngine (const SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_MicroCHP_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_MicroCHP () const
      {
        return this->SimFlowPlant_ElectricalGenerator_MicroCHP_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_MicroCHP_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_MicroCHP ()
      {
        return this->SimFlowPlant_ElectricalGenerator_MicroCHP_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_MicroCHP (const SimFlowPlant_ElectricalGenerator_MicroCHP_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_MicroCHP_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_MicroTurbine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_MicroTurbine () const
      {
        return this->SimFlowPlant_ElectricalGenerator_MicroTurbine_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_MicroTurbine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_MicroTurbine ()
      {
        return this->SimFlowPlant_ElectricalGenerator_MicroTurbine_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_MicroTurbine (const SimFlowPlant_ElectricalGenerator_MicroTurbine_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_MicroTurbine_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_Photovoltaic_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_Photovoltaic () const
      {
        return this->SimFlowPlant_ElectricalGenerator_Photovoltaic_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_Photovoltaic_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_Photovoltaic ()
      {
        return this->SimFlowPlant_ElectricalGenerator_Photovoltaic_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_Photovoltaic (const SimFlowPlant_ElectricalGenerator_Photovoltaic_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_Photovoltaic_ = s;
      }

      const SimModel::SimFlowPlant_ElectricalGenerator_WindTurbine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_WindTurbine () const
      {
        return this->SimFlowPlant_ElectricalGenerator_WindTurbine_;
      }

      SimModel::SimFlowPlant_ElectricalGenerator_WindTurbine_sequence& SimModel::
      SimFlowPlant_ElectricalGenerator_WindTurbine ()
      {
        return this->SimFlowPlant_ElectricalGenerator_WindTurbine_;
      }

      void SimModel::
      SimFlowPlant_ElectricalGenerator_WindTurbine (const SimFlowPlant_ElectricalGenerator_WindTurbine_sequence& s)
      {
        this->SimFlowPlant_ElectricalGenerator_WindTurbine_ = s;
      }

      const SimModel::SimFlowPlant_HeatAndPower_Default_sequence& SimModel::
      SimFlowPlant_HeatAndPower_Default () const
      {
        return this->SimFlowPlant_HeatAndPower_Default_;
      }

      SimModel::SimFlowPlant_HeatAndPower_Default_sequence& SimModel::
      SimFlowPlant_HeatAndPower_Default ()
      {
        return this->SimFlowPlant_HeatAndPower_Default_;
      }

      void SimModel::
      SimFlowPlant_HeatAndPower_Default (const SimFlowPlant_HeatAndPower_Default_sequence& s)
      {
        this->SimFlowPlant_HeatAndPower_Default_ = s;
      }

      const SimModel::SimFlowPlant_HeatExWaterToWater_Pond_sequence& SimModel::
      SimFlowPlant_HeatExWaterToWater_Pond () const
      {
        return this->SimFlowPlant_HeatExWaterToWater_Pond_;
      }

      SimModel::SimFlowPlant_HeatExWaterToWater_Pond_sequence& SimModel::
      SimFlowPlant_HeatExWaterToWater_Pond ()
      {
        return this->SimFlowPlant_HeatExWaterToWater_Pond_;
      }

      void SimModel::
      SimFlowPlant_HeatExWaterToWater_Pond (const SimFlowPlant_HeatExWaterToWater_Pond_sequence& s)
      {
        this->SimFlowPlant_HeatExWaterToWater_Pond_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_AirToAir_sequence& SimModel::
      SimFlowPlant_HeatPump_AirToAir () const
      {
        return this->SimFlowPlant_HeatPump_AirToAir_;
      }

      SimModel::SimFlowPlant_HeatPump_AirToAir_sequence& SimModel::
      SimFlowPlant_HeatPump_AirToAir ()
      {
        return this->SimFlowPlant_HeatPump_AirToAir_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_AirToAir (const SimFlowPlant_HeatPump_AirToAir_sequence& s)
      {
        this->SimFlowPlant_HeatPump_AirToAir_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_AirToAir_MultiSpeed_sequence& SimModel::
      SimFlowPlant_HeatPump_AirToAir_MultiSpeed () const
      {
        return this->SimFlowPlant_HeatPump_AirToAir_MultiSpeed_;
      }

      SimModel::SimFlowPlant_HeatPump_AirToAir_MultiSpeed_sequence& SimModel::
      SimFlowPlant_HeatPump_AirToAir_MultiSpeed ()
      {
        return this->SimFlowPlant_HeatPump_AirToAir_MultiSpeed_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_AirToAir_MultiSpeed (const SimFlowPlant_HeatPump_AirToAir_MultiSpeed_sequence& s)
      {
        this->SimFlowPlant_HeatPump_AirToAir_MultiSpeed_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_CentralSystem_sequence& SimModel::
      SimFlowPlant_HeatPump_CentralSystem () const
      {
        return this->SimFlowPlant_HeatPump_CentralSystem_;
      }

      SimModel::SimFlowPlant_HeatPump_CentralSystem_sequence& SimModel::
      SimFlowPlant_HeatPump_CentralSystem ()
      {
        return this->SimFlowPlant_HeatPump_CentralSystem_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_CentralSystem (const SimFlowPlant_HeatPump_CentralSystem_sequence& s)
      {
        this->SimFlowPlant_HeatPump_CentralSystem_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_GroundSource_sequence& SimModel::
      SimFlowPlant_HeatPump_GroundSource () const
      {
        return this->SimFlowPlant_HeatPump_GroundSource_;
      }

      SimModel::SimFlowPlant_HeatPump_GroundSource_sequence& SimModel::
      SimFlowPlant_HeatPump_GroundSource ()
      {
        return this->SimFlowPlant_HeatPump_GroundSource_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_GroundSource (const SimFlowPlant_HeatPump_GroundSource_sequence& s)
      {
        this->SimFlowPlant_HeatPump_GroundSource_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_WaterToAir_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToAir () const
      {
        return this->SimFlowPlant_HeatPump_WaterToAir_;
      }

      SimModel::SimFlowPlant_HeatPump_WaterToAir_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToAir ()
      {
        return this->SimFlowPlant_HeatPump_WaterToAir_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_WaterToAir (const SimFlowPlant_HeatPump_WaterToAir_sequence& s)
      {
        this->SimFlowPlant_HeatPump_WaterToAir_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling () const
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_;
      }

      SimModel::SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling ()
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling (const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_sequence& s)
      {
        this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating () const
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_;
      }

      SimModel::SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating ()
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating (const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_sequence& s)
      {
        this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling () const
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_;
      }

      SimModel::SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling ()
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling (const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_sequence& s)
      {
        this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_ = s;
      }

      const SimModel::SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating () const
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_;
      }

      SimModel::SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_sequence& SimModel::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating ()
      {
        return this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_;
      }

      void SimModel::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating (const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_sequence& s)
      {
        this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage () const
      {
        return this->SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage ()
      {
        return this->SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage (const SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage () const
      {
        return this->SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage ()
      {
        return this->SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage (const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarPhotoVoltaic_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaic () const
      {
        return this->SimFlowPlant_SolarDevice_SolarPhotoVoltaic_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarPhotoVoltaic_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaic ()
      {
        return this->SimFlowPlant_SolarDevice_SolarPhotoVoltaic_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaic (const SimFlowPlant_SolarDevice_SolarPhotoVoltaic_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarPhotoVoltaic_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal () const
      {
        return this->SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal ()
      {
        return this->SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarThermalAir_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarThermalAir () const
      {
        return this->SimFlowPlant_SolarDevice_SolarThermalAir_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarThermalAir_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarThermalAir ()
      {
        return this->SimFlowPlant_SolarDevice_SolarThermalAir_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarThermalAir (const SimFlowPlant_SolarDevice_SolarThermalAir_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarThermalAir_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem () const
      {
        return this->SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem ()
      {
        return this->SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem (const SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_ = s;
      }

      const SimModel::SimFlowPlant_SolarDevice_SolarThermalWater_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarThermalWater () const
      {
        return this->SimFlowPlant_SolarDevice_SolarThermalWater_;
      }

      SimModel::SimFlowPlant_SolarDevice_SolarThermalWater_sequence& SimModel::
      SimFlowPlant_SolarDevice_SolarThermalWater ()
      {
        return this->SimFlowPlant_SolarDevice_SolarThermalWater_;
      }

      void SimModel::
      SimFlowPlant_SolarDevice_SolarThermalWater (const SimFlowPlant_SolarDevice_SolarThermalWater_sequence& s)
      {
        this->SimFlowPlant_SolarDevice_SolarThermalWater_ = s;
      }

      const SimModel::SimFlowSegment_Default_Default_sequence& SimModel::
      SimFlowSegment_Default_Default () const
      {
        return this->SimFlowSegment_Default_Default_;
      }

      SimModel::SimFlowSegment_Default_Default_sequence& SimModel::
      SimFlowSegment_Default_Default ()
      {
        return this->SimFlowSegment_Default_Default_;
      }

      void SimModel::
      SimFlowSegment_Default_Default (const SimFlowSegment_Default_Default_sequence& s)
      {
        this->SimFlowSegment_Default_Default_ = s;
      }

      const SimModel::SimFlowSegment_Duct_AirFlowNetworkDistribution_sequence& SimModel::
      SimFlowSegment_Duct_AirFlowNetworkDistribution () const
      {
        return this->SimFlowSegment_Duct_AirFlowNetworkDistribution_;
      }

      SimModel::SimFlowSegment_Duct_AirFlowNetworkDistribution_sequence& SimModel::
      SimFlowSegment_Duct_AirFlowNetworkDistribution ()
      {
        return this->SimFlowSegment_Duct_AirFlowNetworkDistribution_;
      }

      void SimModel::
      SimFlowSegment_Duct_AirFlowNetworkDistribution (const SimFlowSegment_Duct_AirFlowNetworkDistribution_sequence& s)
      {
        this->SimFlowSegment_Duct_AirFlowNetworkDistribution_ = s;
      }

      const SimModel::SimFlowSegment_Duct_Default_sequence& SimModel::
      SimFlowSegment_Duct_Default () const
      {
        return this->SimFlowSegment_Duct_Default_;
      }

      SimModel::SimFlowSegment_Duct_Default_sequence& SimModel::
      SimFlowSegment_Duct_Default ()
      {
        return this->SimFlowSegment_Duct_Default_;
      }

      void SimModel::
      SimFlowSegment_Duct_Default (const SimFlowSegment_Duct_Default_sequence& s)
      {
        this->SimFlowSegment_Duct_Default_ = s;
      }

      const SimModel::SimFlowSegment_Filter_Bag_sequence& SimModel::
      SimFlowSegment_Filter_Bag () const
      {
        return this->SimFlowSegment_Filter_Bag_;
      }

      SimModel::SimFlowSegment_Filter_Bag_sequence& SimModel::
      SimFlowSegment_Filter_Bag ()
      {
        return this->SimFlowSegment_Filter_Bag_;
      }

      void SimModel::
      SimFlowSegment_Filter_Bag (const SimFlowSegment_Filter_Bag_sequence& s)
      {
        this->SimFlowSegment_Filter_Bag_ = s;
      }

      const SimModel::SimFlowSegment_Filter_Default_sequence& SimModel::
      SimFlowSegment_Filter_Default () const
      {
        return this->SimFlowSegment_Filter_Default_;
      }

      SimModel::SimFlowSegment_Filter_Default_sequence& SimModel::
      SimFlowSegment_Filter_Default ()
      {
        return this->SimFlowSegment_Filter_Default_;
      }

      void SimModel::
      SimFlowSegment_Filter_Default (const SimFlowSegment_Filter_Default_sequence& s)
      {
        this->SimFlowSegment_Filter_Default_ = s;
      }

      const SimModel::SimFlowSegment_Filter_Electrostatic_sequence& SimModel::
      SimFlowSegment_Filter_Electrostatic () const
      {
        return this->SimFlowSegment_Filter_Electrostatic_;
      }

      SimModel::SimFlowSegment_Filter_Electrostatic_sequence& SimModel::
      SimFlowSegment_Filter_Electrostatic ()
      {
        return this->SimFlowSegment_Filter_Electrostatic_;
      }

      void SimModel::
      SimFlowSegment_Filter_Electrostatic (const SimFlowSegment_Filter_Electrostatic_sequence& s)
      {
        this->SimFlowSegment_Filter_Electrostatic_ = s;
      }

      const SimModel::SimFlowSegment_Filter_HEPA_sequence& SimModel::
      SimFlowSegment_Filter_HEPA () const
      {
        return this->SimFlowSegment_Filter_HEPA_;
      }

      SimModel::SimFlowSegment_Filter_HEPA_sequence& SimModel::
      SimFlowSegment_Filter_HEPA ()
      {
        return this->SimFlowSegment_Filter_HEPA_;
      }

      void SimModel::
      SimFlowSegment_Filter_HEPA (const SimFlowSegment_Filter_HEPA_sequence& s)
      {
        this->SimFlowSegment_Filter_HEPA_ = s;
      }

      const SimModel::SimFlowSegment_Filter_Panel_sequence& SimModel::
      SimFlowSegment_Filter_Panel () const
      {
        return this->SimFlowSegment_Filter_Panel_;
      }

      SimModel::SimFlowSegment_Filter_Panel_sequence& SimModel::
      SimFlowSegment_Filter_Panel ()
      {
        return this->SimFlowSegment_Filter_Panel_;
      }

      void SimModel::
      SimFlowSegment_Filter_Panel (const SimFlowSegment_Filter_Panel_sequence& s)
      {
        this->SimFlowSegment_Filter_Panel_ = s;
      }

      const SimModel::SimFlowSegment_Grill_Return_sequence& SimModel::
      SimFlowSegment_Grill_Return () const
      {
        return this->SimFlowSegment_Grill_Return_;
      }

      SimModel::SimFlowSegment_Grill_Return_sequence& SimModel::
      SimFlowSegment_Grill_Return ()
      {
        return this->SimFlowSegment_Grill_Return_;
      }

      void SimModel::
      SimFlowSegment_Grill_Return (const SimFlowSegment_Grill_Return_sequence& s)
      {
        this->SimFlowSegment_Grill_Return_ = s;
      }

      const SimModel::SimFlowSegment_Grill_Supply_sequence& SimModel::
      SimFlowSegment_Grill_Supply () const
      {
        return this->SimFlowSegment_Grill_Supply_;
      }

      SimModel::SimFlowSegment_Grill_Supply_sequence& SimModel::
      SimFlowSegment_Grill_Supply ()
      {
        return this->SimFlowSegment_Grill_Supply_;
      }

      void SimModel::
      SimFlowSegment_Grill_Supply (const SimFlowSegment_Grill_Supply_sequence& s)
      {
        this->SimFlowSegment_Grill_Supply_ = s;
      }

      const SimModel::SimFlowSegment_Louver_Default_sequence& SimModel::
      SimFlowSegment_Louver_Default () const
      {
        return this->SimFlowSegment_Louver_Default_;
      }

      SimModel::SimFlowSegment_Louver_Default_sequence& SimModel::
      SimFlowSegment_Louver_Default ()
      {
        return this->SimFlowSegment_Louver_Default_;
      }

      void SimModel::
      SimFlowSegment_Louver_Default (const SimFlowSegment_Louver_Default_sequence& s)
      {
        this->SimFlowSegment_Louver_Default_ = s;
      }

      const SimModel::SimFlowSegment_Louver_Exhaust_sequence& SimModel::
      SimFlowSegment_Louver_Exhaust () const
      {
        return this->SimFlowSegment_Louver_Exhaust_;
      }

      SimModel::SimFlowSegment_Louver_Exhaust_sequence& SimModel::
      SimFlowSegment_Louver_Exhaust ()
      {
        return this->SimFlowSegment_Louver_Exhaust_;
      }

      void SimModel::
      SimFlowSegment_Louver_Exhaust (const SimFlowSegment_Louver_Exhaust_sequence& s)
      {
        this->SimFlowSegment_Louver_Exhaust_ = s;
      }

      const SimModel::SimFlowSegment_Louver_Intake_sequence& SimModel::
      SimFlowSegment_Louver_Intake () const
      {
        return this->SimFlowSegment_Louver_Intake_;
      }

      SimModel::SimFlowSegment_Louver_Intake_sequence& SimModel::
      SimFlowSegment_Louver_Intake ()
      {
        return this->SimFlowSegment_Louver_Intake_;
      }

      void SimModel::
      SimFlowSegment_Louver_Intake (const SimFlowSegment_Louver_Intake_sequence& s)
      {
        this->SimFlowSegment_Louver_Intake_ = s;
      }

      const SimModel::SimFlowSegment_Louver_Safety_sequence& SimModel::
      SimFlowSegment_Louver_Safety () const
      {
        return this->SimFlowSegment_Louver_Safety_;
      }

      SimModel::SimFlowSegment_Louver_Safety_sequence& SimModel::
      SimFlowSegment_Louver_Safety ()
      {
        return this->SimFlowSegment_Louver_Safety_;
      }

      void SimModel::
      SimFlowSegment_Louver_Safety (const SimFlowSegment_Louver_Safety_sequence& s)
      {
        this->SimFlowSegment_Louver_Safety_ = s;
      }

      const SimModel::SimFlowSegment_Louver_Ventilation_sequence& SimModel::
      SimFlowSegment_Louver_Ventilation () const
      {
        return this->SimFlowSegment_Louver_Ventilation_;
      }

      SimModel::SimFlowSegment_Louver_Ventilation_sequence& SimModel::
      SimFlowSegment_Louver_Ventilation ()
      {
        return this->SimFlowSegment_Louver_Ventilation_;
      }

      void SimModel::
      SimFlowSegment_Louver_Ventilation (const SimFlowSegment_Louver_Ventilation_sequence& s)
      {
        this->SimFlowSegment_Louver_Ventilation_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_Adiabatic_sequence& SimModel::
      SimFlowSegment_Pipe_Adiabatic () const
      {
        return this->SimFlowSegment_Pipe_Adiabatic_;
      }

      SimModel::SimFlowSegment_Pipe_Adiabatic_sequence& SimModel::
      SimFlowSegment_Pipe_Adiabatic ()
      {
        return this->SimFlowSegment_Pipe_Adiabatic_;
      }

      void SimModel::
      SimFlowSegment_Pipe_Adiabatic (const SimFlowSegment_Pipe_Adiabatic_sequence& s)
      {
        this->SimFlowSegment_Pipe_Adiabatic_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_Adiabatic_Steam_sequence& SimModel::
      SimFlowSegment_Pipe_Adiabatic_Steam () const
      {
        return this->SimFlowSegment_Pipe_Adiabatic_Steam_;
      }

      SimModel::SimFlowSegment_Pipe_Adiabatic_Steam_sequence& SimModel::
      SimFlowSegment_Pipe_Adiabatic_Steam ()
      {
        return this->SimFlowSegment_Pipe_Adiabatic_Steam_;
      }

      void SimModel::
      SimFlowSegment_Pipe_Adiabatic_Steam (const SimFlowSegment_Pipe_Adiabatic_Steam_sequence& s)
      {
        this->SimFlowSegment_Pipe_Adiabatic_Steam_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_Indoor_sequence& SimModel::
      SimFlowSegment_Pipe_Indoor () const
      {
        return this->SimFlowSegment_Pipe_Indoor_;
      }

      SimModel::SimFlowSegment_Pipe_Indoor_sequence& SimModel::
      SimFlowSegment_Pipe_Indoor ()
      {
        return this->SimFlowSegment_Pipe_Indoor_;
      }

      void SimModel::
      SimFlowSegment_Pipe_Indoor (const SimFlowSegment_Pipe_Indoor_sequence& s)
      {
        this->SimFlowSegment_Pipe_Indoor_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_Outdoor_sequence& SimModel::
      SimFlowSegment_Pipe_Outdoor () const
      {
        return this->SimFlowSegment_Pipe_Outdoor_;
      }

      SimModel::SimFlowSegment_Pipe_Outdoor_sequence& SimModel::
      SimFlowSegment_Pipe_Outdoor ()
      {
        return this->SimFlowSegment_Pipe_Outdoor_;
      }

      void SimModel::
      SimFlowSegment_Pipe_Outdoor (const SimFlowSegment_Pipe_Outdoor_sequence& s)
      {
        this->SimFlowSegment_Pipe_Outdoor_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_Underground_sequence& SimModel::
      SimFlowSegment_Pipe_Underground () const
      {
        return this->SimFlowSegment_Pipe_Underground_;
      }

      SimModel::SimFlowSegment_Pipe_Underground_sequence& SimModel::
      SimFlowSegment_Pipe_Underground ()
      {
        return this->SimFlowSegment_Pipe_Underground_;
      }

      void SimModel::
      SimFlowSegment_Pipe_Underground (const SimFlowSegment_Pipe_Underground_sequence& s)
      {
        this->SimFlowSegment_Pipe_Underground_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_UndergroundPipeCircuit_sequence& SimModel::
      SimFlowSegment_Pipe_UndergroundPipeCircuit () const
      {
        return this->SimFlowSegment_Pipe_UndergroundPipeCircuit_;
      }

      SimModel::SimFlowSegment_Pipe_UndergroundPipeCircuit_sequence& SimModel::
      SimFlowSegment_Pipe_UndergroundPipeCircuit ()
      {
        return this->SimFlowSegment_Pipe_UndergroundPipeCircuit_;
      }

      void SimModel::
      SimFlowSegment_Pipe_UndergroundPipeCircuit (const SimFlowSegment_Pipe_UndergroundPipeCircuit_sequence& s)
      {
        this->SimFlowSegment_Pipe_UndergroundPipeCircuit_ = s;
      }

      const SimModel::SimFlowSegment_Pipe_UndergroundPipeSegment_sequence& SimModel::
      SimFlowSegment_Pipe_UndergroundPipeSegment () const
      {
        return this->SimFlowSegment_Pipe_UndergroundPipeSegment_;
      }

      SimModel::SimFlowSegment_Pipe_UndergroundPipeSegment_sequence& SimModel::
      SimFlowSegment_Pipe_UndergroundPipeSegment ()
      {
        return this->SimFlowSegment_Pipe_UndergroundPipeSegment_;
      }

      void SimModel::
      SimFlowSegment_Pipe_UndergroundPipeSegment (const SimFlowSegment_Pipe_UndergroundPipeSegment_sequence& s)
      {
        this->SimFlowSegment_Pipe_UndergroundPipeSegment_ = s;
      }

      const SimModel::SimFlowSegment_Plenum_DedicatedReturn_sequence& SimModel::
      SimFlowSegment_Plenum_DedicatedReturn () const
      {
        return this->SimFlowSegment_Plenum_DedicatedReturn_;
      }

      SimModel::SimFlowSegment_Plenum_DedicatedReturn_sequence& SimModel::
      SimFlowSegment_Plenum_DedicatedReturn ()
      {
        return this->SimFlowSegment_Plenum_DedicatedReturn_;
      }

      void SimModel::
      SimFlowSegment_Plenum_DedicatedReturn (const SimFlowSegment_Plenum_DedicatedReturn_sequence& s)
      {
        this->SimFlowSegment_Plenum_DedicatedReturn_ = s;
      }

      const SimModel::SimFlowSegment_Plenum_DedicatedSupply_sequence& SimModel::
      SimFlowSegment_Plenum_DedicatedSupply () const
      {
        return this->SimFlowSegment_Plenum_DedicatedSupply_;
      }

      SimModel::SimFlowSegment_Plenum_DedicatedSupply_sequence& SimModel::
      SimFlowSegment_Plenum_DedicatedSupply ()
      {
        return this->SimFlowSegment_Plenum_DedicatedSupply_;
      }

      void SimModel::
      SimFlowSegment_Plenum_DedicatedSupply (const SimFlowSegment_Plenum_DedicatedSupply_sequence& s)
      {
        this->SimFlowSegment_Plenum_DedicatedSupply_ = s;
      }

      const SimModel::SimFlowSegment_Plenum_SharedReturn_sequence& SimModel::
      SimFlowSegment_Plenum_SharedReturn () const
      {
        return this->SimFlowSegment_Plenum_SharedReturn_;
      }

      SimModel::SimFlowSegment_Plenum_SharedReturn_sequence& SimModel::
      SimFlowSegment_Plenum_SharedReturn ()
      {
        return this->SimFlowSegment_Plenum_SharedReturn_;
      }

      void SimModel::
      SimFlowSegment_Plenum_SharedReturn (const SimFlowSegment_Plenum_SharedReturn_sequence& s)
      {
        this->SimFlowSegment_Plenum_SharedReturn_ = s;
      }

      const SimModel::SimFlowSegment_Plenum_SharedSupply_sequence& SimModel::
      SimFlowSegment_Plenum_SharedSupply () const
      {
        return this->SimFlowSegment_Plenum_SharedSupply_;
      }

      SimModel::SimFlowSegment_Plenum_SharedSupply_sequence& SimModel::
      SimFlowSegment_Plenum_SharedSupply ()
      {
        return this->SimFlowSegment_Plenum_SharedSupply_;
      }

      void SimModel::
      SimFlowSegment_Plenum_SharedSupply (const SimFlowSegment_Plenum_SharedSupply_sequence& s)
      {
        this->SimFlowSegment_Plenum_SharedSupply_ = s;
      }

      const SimModel::SimFlowSegment_VirtualComponent_ConstantPressureDrop_sequence& SimModel::
      SimFlowSegment_VirtualComponent_ConstantPressureDrop () const
      {
        return this->SimFlowSegment_VirtualComponent_ConstantPressureDrop_;
      }

      SimModel::SimFlowSegment_VirtualComponent_ConstantPressureDrop_sequence& SimModel::
      SimFlowSegment_VirtualComponent_ConstantPressureDrop ()
      {
        return this->SimFlowSegment_VirtualComponent_ConstantPressureDrop_;
      }

      void SimModel::
      SimFlowSegment_VirtualComponent_ConstantPressureDrop (const SimFlowSegment_VirtualComponent_ConstantPressureDrop_sequence& s)
      {
        this->SimFlowSegment_VirtualComponent_ConstantPressureDrop_ = s;
      }

      const SimModel::SimFlowSegment_VirtualComponent_Leak_sequence& SimModel::
      SimFlowSegment_VirtualComponent_Leak () const
      {
        return this->SimFlowSegment_VirtualComponent_Leak_;
      }

      SimModel::SimFlowSegment_VirtualComponent_Leak_sequence& SimModel::
      SimFlowSegment_VirtualComponent_Leak ()
      {
        return this->SimFlowSegment_VirtualComponent_Leak_;
      }

      void SimModel::
      SimFlowSegment_VirtualComponent_Leak (const SimFlowSegment_VirtualComponent_Leak_sequence& s)
      {
        this->SimFlowSegment_VirtualComponent_Leak_ = s;
      }

      const SimModel::SimFlowSegment_VirtualComponent_LeakageRatio_sequence& SimModel::
      SimFlowSegment_VirtualComponent_LeakageRatio () const
      {
        return this->SimFlowSegment_VirtualComponent_LeakageRatio_;
      }

      SimModel::SimFlowSegment_VirtualComponent_LeakageRatio_sequence& SimModel::
      SimFlowSegment_VirtualComponent_LeakageRatio ()
      {
        return this->SimFlowSegment_VirtualComponent_LeakageRatio_;
      }

      void SimModel::
      SimFlowSegment_VirtualComponent_LeakageRatio (const SimFlowSegment_VirtualComponent_LeakageRatio_sequence& s)
      {
        this->SimFlowSegment_VirtualComponent_LeakageRatio_ = s;
      }

      const SimModel::SimFlowSegment_Wire_Default_sequence& SimModel::
      SimFlowSegment_Wire_Default () const
      {
        return this->SimFlowSegment_Wire_Default_;
      }

      SimModel::SimFlowSegment_Wire_Default_sequence& SimModel::
      SimFlowSegment_Wire_Default ()
      {
        return this->SimFlowSegment_Wire_Default_;
      }

      void SimModel::
      SimFlowSegment_Wire_Default (const SimFlowSegment_Wire_Default_sequence& s)
      {
        this->SimFlowSegment_Wire_Default_ = s;
      }

      const SimModel::SimFlowStorage_ElectricalStorage_BatteryBank_sequence& SimModel::
      SimFlowStorage_ElectricalStorage_BatteryBank () const
      {
        return this->SimFlowStorage_ElectricalStorage_BatteryBank_;
      }

      SimModel::SimFlowStorage_ElectricalStorage_BatteryBank_sequence& SimModel::
      SimFlowStorage_ElectricalStorage_BatteryBank ()
      {
        return this->SimFlowStorage_ElectricalStorage_BatteryBank_;
      }

      void SimModel::
      SimFlowStorage_ElectricalStorage_BatteryBank (const SimFlowStorage_ElectricalStorage_BatteryBank_sequence& s)
      {
        this->SimFlowStorage_ElectricalStorage_BatteryBank_ = s;
      }

      const SimModel::SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_sequence& SimModel::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage () const
      {
        return this->SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_;
      }

      SimModel::SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_sequence& SimModel::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage ()
      {
        return this->SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_;
      }

      void SimModel::
      SimFlowStorage_ElectricalStorage_DefaultElectricalStorage (const SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_sequence& s)
      {
        this->SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_ = s;
      }

      const SimModel::SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed () const
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_;
      }

      SimModel::SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed ()
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_;
      }

      void SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed (const SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_sequence& s)
      {
        this->SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_ = s;
      }

      const SimModel::SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageIceSimple () const
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_;
      }

      SimModel::SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageIceSimple ()
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_;
      }

      void SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageIceSimple (const SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_sequence& s)
      {
        this->SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_ = s;
      }

      const SimModel::SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed () const
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_;
      }

      SimModel::SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed ()
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_;
      }

      void SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed (const SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_sequence& s)
      {
        this->SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_ = s;
      }

      const SimModel::SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified () const
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_;
      }

      SimModel::SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_sequence& SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified ()
      {
        return this->SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_;
      }

      void SimModel::
      SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified (const SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_sequence& s)
      {
        this->SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_ = s;
      }

      const SimModel::SimFlowStorage_WaterStorage_CleanWater_sequence& SimModel::
      SimFlowStorage_WaterStorage_CleanWater () const
      {
        return this->SimFlowStorage_WaterStorage_CleanWater_;
      }

      SimModel::SimFlowStorage_WaterStorage_CleanWater_sequence& SimModel::
      SimFlowStorage_WaterStorage_CleanWater ()
      {
        return this->SimFlowStorage_WaterStorage_CleanWater_;
      }

      void SimModel::
      SimFlowStorage_WaterStorage_CleanWater (const SimFlowStorage_WaterStorage_CleanWater_sequence& s)
      {
        this->SimFlowStorage_WaterStorage_CleanWater_ = s;
      }

      const SimModel::SimFlowStorage_WaterStorage_GrayWater_sequence& SimModel::
      SimFlowStorage_WaterStorage_GrayWater () const
      {
        return this->SimFlowStorage_WaterStorage_GrayWater_;
      }

      SimModel::SimFlowStorage_WaterStorage_GrayWater_sequence& SimModel::
      SimFlowStorage_WaterStorage_GrayWater ()
      {
        return this->SimFlowStorage_WaterStorage_GrayWater_;
      }

      void SimModel::
      SimFlowStorage_WaterStorage_GrayWater (const SimFlowStorage_WaterStorage_GrayWater_sequence& s)
      {
        this->SimFlowStorage_WaterStorage_GrayWater_ = s;
      }

      const SimModel::SimFlowStorage_WaterStorage_RainWater_sequence& SimModel::
      SimFlowStorage_WaterStorage_RainWater () const
      {
        return this->SimFlowStorage_WaterStorage_RainWater_;
      }

      SimModel::SimFlowStorage_WaterStorage_RainWater_sequence& SimModel::
      SimFlowStorage_WaterStorage_RainWater ()
      {
        return this->SimFlowStorage_WaterStorage_RainWater_;
      }

      void SimModel::
      SimFlowStorage_WaterStorage_RainWater (const SimFlowStorage_WaterStorage_RainWater_sequence& s)
      {
        this->SimFlowStorage_WaterStorage_RainWater_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume () const
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_;
      }

      SimModel::SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume ()
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume (const SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV () const
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_;
      }

      SimModel::SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV ()
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV (const SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir () const
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_;
      }

      SimModel::SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir ()
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir (const SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume () const
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_;
      }

      SimModel::SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume ()
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume (const SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV () const
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_;
      }

      SimModel::SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_sequence& SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV ()
      {
        return this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV (const SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam () const
      {
        return this->SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_;
      }

      SimModel::SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam ()
      {
        return this->SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam (const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction () const
      {
        return this->SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_;
      }

      SimModel::SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction ()
      {
        return this->SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction (const SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam () const
      {
        return this->SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_;
      }

      SimModel::SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam ()
      {
        return this->SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam (const SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction () const
      {
        return this->SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_;
      }

      SimModel::SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_sequence& SimModel::
      SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction ()
      {
        return this->SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction (const SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_ConstantVolume_Reheat () const
      {
        return this->SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_ConstantVolume_Reheat ()
      {
        return this->SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_ConstantVolume_Reheat (const SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_InletSideMixer_sequence& SimModel::
      SimFlowTerminal_AirTerminal_InletSideMixer () const
      {
        return this->SimFlowTerminal_AirTerminal_InletSideMixer_;
      }

      SimModel::SimFlowTerminal_AirTerminal_InletSideMixer_sequence& SimModel::
      SimFlowTerminal_AirTerminal_InletSideMixer ()
      {
        return this->SimFlowTerminal_AirTerminal_InletSideMixer_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_InletSideMixer (const SimFlowTerminal_AirTerminal_InletSideMixer_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_InletSideMixer_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat () const
      {
        return this->SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat ()
      {
        return this->SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat (const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_SeriesPIU_Reheat () const
      {
        return this->SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_SeriesPIU_Reheat ()
      {
        return this->SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_SeriesPIU_Reheat (const SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_SingleDuctUserDefined_sequence& SimModel::
      SimFlowTerminal_AirTerminal_SingleDuctUserDefined () const
      {
        return this->SimFlowTerminal_AirTerminal_SingleDuctUserDefined_;
      }

      SimModel::SimFlowTerminal_AirTerminal_SingleDuctUserDefined_sequence& SimModel::
      SimFlowTerminal_AirTerminal_SingleDuctUserDefined ()
      {
        return this->SimFlowTerminal_AirTerminal_SingleDuctUserDefined_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_SingleDuctUserDefined (const SimFlowTerminal_AirTerminal_SingleDuctUserDefined_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_SingleDuctUserDefined_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_SupplySideMixer_sequence& SimModel::
      SimFlowTerminal_AirTerminal_SupplySideMixer () const
      {
        return this->SimFlowTerminal_AirTerminal_SupplySideMixer_;
      }

      SimModel::SimFlowTerminal_AirTerminal_SupplySideMixer_sequence& SimModel::
      SimFlowTerminal_AirTerminal_SupplySideMixer ()
      {
        return this->SimFlowTerminal_AirTerminal_SupplySideMixer_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_SupplySideMixer (const SimFlowTerminal_AirTerminal_SupplySideMixer_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_SupplySideMixer_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_Uncontrolled_sequence& SimModel::
      SimFlowTerminal_AirTerminal_Uncontrolled () const
      {
        return this->SimFlowTerminal_AirTerminal_Uncontrolled_;
      }

      SimModel::SimFlowTerminal_AirTerminal_Uncontrolled_sequence& SimModel::
      SimFlowTerminal_AirTerminal_Uncontrolled ()
      {
        return this->SimFlowTerminal_AirTerminal_Uncontrolled_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_Uncontrolled (const SimFlowTerminal_AirTerminal_Uncontrolled_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_Uncontrolled_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat () const
      {
        return this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat ()
      {
        return this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat (const SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat () const
      {
        return this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat ()
      {
        return this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat (const SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_VAV_NoReheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_NoReheat () const
      {
        return this->SimFlowTerminal_AirTerminal_VAV_NoReheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_VAV_NoReheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_NoReheat ()
      {
        return this->SimFlowTerminal_AirTerminal_VAV_NoReheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_VAV_NoReheat (const SimFlowTerminal_AirTerminal_VAV_NoReheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_VAV_NoReheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_VAV_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_Reheat () const
      {
        return this->SimFlowTerminal_AirTerminal_VAV_Reheat_;
      }

      SimModel::SimFlowTerminal_AirTerminal_VAV_Reheat_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_Reheat ()
      {
        return this->SimFlowTerminal_AirTerminal_VAV_Reheat_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_VAV_Reheat (const SimFlowTerminal_AirTerminal_VAV_Reheat_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_VAV_Reheat_ = s;
      }

      const SimModel::SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan () const
      {
        return this->SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_;
      }

      SimModel::SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_sequence& SimModel::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan ()
      {
        return this->SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_;
      }

      void SimModel::
      SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan (const SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_sequence& s)
      {
        this->SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_ = s;
      }

      const SimModel::SimFlowTerminal_Default_Default_sequence& SimModel::
      SimFlowTerminal_Default_Default () const
      {
        return this->SimFlowTerminal_Default_Default_;
      }

      SimModel::SimFlowTerminal_Default_Default_sequence& SimModel::
      SimFlowTerminal_Default_Default ()
      {
        return this->SimFlowTerminal_Default_Default_;
      }

      void SimModel::
      SimFlowTerminal_Default_Default (const SimFlowTerminal_Default_Default_sequence& s)
      {
        this->SimFlowTerminal_Default_Default_ = s;
      }

      const SimModel::SimFlowTerminal_ElectricalTerminalExterior_Default_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_Default () const
      {
        return this->SimFlowTerminal_ElectricalTerminalExterior_Default_;
      }

      SimModel::SimFlowTerminal_ElectricalTerminalExterior_Default_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_Default ()
      {
        return this->SimFlowTerminal_ElectricalTerminalExterior_Default_;
      }

      void SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_Default (const SimFlowTerminal_ElectricalTerminalExterior_Default_sequence& s)
      {
        this->SimFlowTerminal_ElectricalTerminalExterior_Default_ = s;
      }

      const SimModel::SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet () const
      {
        return this->SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_;
      }

      SimModel::SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet ()
      {
        return this->SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_;
      }

      void SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet (const SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_sequence& s)
      {
        this->SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_ = s;
      }

      const SimModel::SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_LightingFixture () const
      {
        return this->SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_;
      }

      SimModel::SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_LightingFixture ()
      {
        return this->SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_;
      }

      void SimModel::
      SimFlowTerminal_ElectricalTerminalExterior_LightingFixture (const SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_sequence& s)
      {
        this->SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_ = s;
      }

      const SimModel::SimFlowTerminal_ElectricalTerminalInterior_Default_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_Default () const
      {
        return this->SimFlowTerminal_ElectricalTerminalInterior_Default_;
      }

      SimModel::SimFlowTerminal_ElectricalTerminalInterior_Default_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_Default ()
      {
        return this->SimFlowTerminal_ElectricalTerminalInterior_Default_;
      }

      void SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_Default (const SimFlowTerminal_ElectricalTerminalInterior_Default_sequence& s)
      {
        this->SimFlowTerminal_ElectricalTerminalInterior_Default_ = s;
      }

      const SimModel::SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet () const
      {
        return this->SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_;
      }

      SimModel::SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet ()
      {
        return this->SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_;
      }

      void SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet (const SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_sequence& s)
      {
        this->SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_ = s;
      }

      const SimModel::SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture () const
      {
        return this->SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_;
      }

      SimModel::SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_sequence& SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture ()
      {
        return this->SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_;
      }

      void SimModel::
      SimFlowTerminal_ElectricalTerminalInterior_LightingFixture (const SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_sequence& s)
      {
        this->SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_DishWasher_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_DishWasher () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_DishWasher_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_DishWasher_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_DishWasher ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_DishWasher_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_DishWasher (const SimFlowTerminal_PlumbingTerminal_DishWasher_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_DishWasher_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet (const SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_PlumbingFixture_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_PlumbingFixture () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_PlumbingFixture_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_PlumbingFixture_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_PlumbingFixture ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_PlumbingFixture_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_PlumbingFixture (const SimFlowTerminal_PlumbingTerminal_PlumbingFixture_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_PlumbingFixture_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_Shower_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Shower () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_Shower_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_Shower_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Shower ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_Shower_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_Shower (const SimFlowTerminal_PlumbingTerminal_Shower_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_Shower_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_Sink_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Sink () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_Sink_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_Sink_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Sink ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_Sink_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_Sink (const SimFlowTerminal_PlumbingTerminal_Sink_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_Sink_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment (const SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_Toilet_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Toilet () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_Toilet_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_Toilet_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Toilet ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_Toilet_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_Toilet (const SimFlowTerminal_PlumbingTerminal_Toilet_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_Toilet_ = s;
      }

      const SimModel::SimFlowTerminal_PlumbingTerminal_Urinal_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Urinal () const
      {
        return this->SimFlowTerminal_PlumbingTerminal_Urinal_;
      }

      SimModel::SimFlowTerminal_PlumbingTerminal_Urinal_sequence& SimModel::
      SimFlowTerminal_PlumbingTerminal_Urinal ()
      {
        return this->SimFlowTerminal_PlumbingTerminal_Urinal_;
      }

      void SimModel::
      SimFlowTerminal_PlumbingTerminal_Urinal (const SimFlowTerminal_PlumbingTerminal_Urinal_sequence& s)
      {
        this->SimFlowTerminal_PlumbingTerminal_Urinal_ = s;
      }

      const SimModel::SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_sequence& SimModel::
      SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow () const
      {
        return this->SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_;
      }

      SimModel::SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_sequence& SimModel::
      SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow ()
      {
        return this->SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_;
      }

      void SimModel::
      SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow (const SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_sequence& s)
      {
        this->SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_ = s;
      }

      const SimModel::SimFluid_Concentration_Default_sequence& SimModel::
      SimFluid_Concentration_Default () const
      {
        return this->SimFluid_Concentration_Default_;
      }

      SimModel::SimFluid_Concentration_Default_sequence& SimModel::
      SimFluid_Concentration_Default ()
      {
        return this->SimFluid_Concentration_Default_;
      }

      void SimModel::
      SimFluid_Concentration_Default (const SimFluid_Concentration_Default_sequence& s)
      {
        this->SimFluid_Concentration_Default_ = s;
      }

      const SimModel::SimFluid_Default_Default_sequence& SimModel::
      SimFluid_Default_Default () const
      {
        return this->SimFluid_Default_Default_;
      }

      SimModel::SimFluid_Default_Default_sequence& SimModel::
      SimFluid_Default_Default ()
      {
        return this->SimFluid_Default_Default_;
      }

      void SimModel::
      SimFluid_Default_Default (const SimFluid_Default_Default_sequence& s)
      {
        this->SimFluid_Default_Default_ = s;
      }

      const SimModel::SimFluid_GlycolConcentration_Default_sequence& SimModel::
      SimFluid_GlycolConcentration_Default () const
      {
        return this->SimFluid_GlycolConcentration_Default_;
      }

      SimModel::SimFluid_GlycolConcentration_Default_sequence& SimModel::
      SimFluid_GlycolConcentration_Default ()
      {
        return this->SimFluid_GlycolConcentration_Default_;
      }

      void SimModel::
      SimFluid_GlycolConcentration_Default (const SimFluid_GlycolConcentration_Default_sequence& s)
      {
        this->SimFluid_GlycolConcentration_Default_ = s;
      }

      const SimModel::SimFluid_Name_Default_sequence& SimModel::
      SimFluid_Name_Default () const
      {
        return this->SimFluid_Name_Default_;
      }

      SimModel::SimFluid_Name_Default_sequence& SimModel::
      SimFluid_Name_Default ()
      {
        return this->SimFluid_Name_Default_;
      }

      void SimModel::
      SimFluid_Name_Default (const SimFluid_Name_Default_sequence& s)
      {
        this->SimFluid_Name_Default_ = s;
      }

      const SimModel::SimFluid_Saturated_Default_sequence& SimModel::
      SimFluid_Saturated_Default () const
      {
        return this->SimFluid_Saturated_Default_;
      }

      SimModel::SimFluid_Saturated_Default_sequence& SimModel::
      SimFluid_Saturated_Default ()
      {
        return this->SimFluid_Saturated_Default_;
      }

      void SimModel::
      SimFluid_Saturated_Default (const SimFluid_Saturated_Default_sequence& s)
      {
        this->SimFluid_Saturated_Default_ = s;
      }

      const SimModel::SimFluid_SuperHeated_Default_sequence& SimModel::
      SimFluid_SuperHeated_Default () const
      {
        return this->SimFluid_SuperHeated_Default_;
      }

      SimModel::SimFluid_SuperHeated_Default_sequence& SimModel::
      SimFluid_SuperHeated_Default ()
      {
        return this->SimFluid_SuperHeated_Default_;
      }

      void SimModel::
      SimFluid_SuperHeated_Default (const SimFluid_SuperHeated_Default_sequence& s)
      {
        this->SimFluid_SuperHeated_Default_ = s;
      }

      const SimModel::SimFluid_Temperatures_Default_sequence& SimModel::
      SimFluid_Temperatures_Default () const
      {
        return this->SimFluid_Temperatures_Default_;
      }

      SimModel::SimFluid_Temperatures_Default_sequence& SimModel::
      SimFluid_Temperatures_Default ()
      {
        return this->SimFluid_Temperatures_Default_;
      }

      void SimModel::
      SimFluid_Temperatures_Default (const SimFluid_Temperatures_Default_sequence& s)
      {
        this->SimFluid_Temperatures_Default_ = s;
      }

      const SimModel::SimFrameAndDividerProps_FrameAndDivider_Default_sequence& SimModel::
      SimFrameAndDividerProps_FrameAndDivider_Default () const
      {
        return this->SimFrameAndDividerProps_FrameAndDivider_Default_;
      }

      SimModel::SimFrameAndDividerProps_FrameAndDivider_Default_sequence& SimModel::
      SimFrameAndDividerProps_FrameAndDivider_Default ()
      {
        return this->SimFrameAndDividerProps_FrameAndDivider_Default_;
      }

      void SimModel::
      SimFrameAndDividerProps_FrameAndDivider_Default (const SimFrameAndDividerProps_FrameAndDivider_Default_sequence& s)
      {
        this->SimFrameAndDividerProps_FrameAndDivider_Default_ = s;
      }

      const SimModel::SimFurnishingElement_Default_Default_sequence& SimModel::
      SimFurnishingElement_Default_Default () const
      {
        return this->SimFurnishingElement_Default_Default_;
      }

      SimModel::SimFurnishingElement_Default_Default_sequence& SimModel::
      SimFurnishingElement_Default_Default ()
      {
        return this->SimFurnishingElement_Default_Default_;
      }

      void SimModel::
      SimFurnishingElement_Default_Default (const SimFurnishingElement_Default_Default_sequence& s)
      {
        this->SimFurnishingElement_Default_Default_ = s;
      }

      const SimModel::SimFurnishingElementType_Furnishing_Default_sequence& SimModel::
      SimFurnishingElementType_Furnishing_Default () const
      {
        return this->SimFurnishingElementType_Furnishing_Default_;
      }

      SimModel::SimFurnishingElementType_Furnishing_Default_sequence& SimModel::
      SimFurnishingElementType_Furnishing_Default ()
      {
        return this->SimFurnishingElementType_Furnishing_Default_;
      }

      void SimModel::
      SimFurnishingElementType_Furnishing_Default (const SimFurnishingElementType_Furnishing_Default_sequence& s)
      {
        this->SimFurnishingElementType_Furnishing_Default_ = s;
      }

      const SimModel::SimFurnishingElementType_Furniture_Default_sequence& SimModel::
      SimFurnishingElementType_Furniture_Default () const
      {
        return this->SimFurnishingElementType_Furniture_Default_;
      }

      SimModel::SimFurnishingElementType_Furniture_Default_sequence& SimModel::
      SimFurnishingElementType_Furniture_Default ()
      {
        return this->SimFurnishingElementType_Furniture_Default_;
      }

      void SimModel::
      SimFurnishingElementType_Furniture_Default (const SimFurnishingElementType_Furniture_Default_sequence& s)
      {
        this->SimFurnishingElementType_Furniture_Default_ = s;
      }

      const SimModel::SimFurnitureType_Furniture_Default_sequence& SimModel::
      SimFurnitureType_Furniture_Default () const
      {
        return this->SimFurnitureType_Furniture_Default_;
      }

      SimModel::SimFurnitureType_Furniture_Default_sequence& SimModel::
      SimFurnitureType_Furniture_Default ()
      {
        return this->SimFurnitureType_Furniture_Default_;
      }

      void SimModel::
      SimFurnitureType_Furniture_Default (const SimFurnitureType_Furniture_Default_sequence& s)
      {
        this->SimFurnitureType_Furniture_Default_ = s;
      }

      const SimModel::SimGeomBooleanResult_BooleanClippingResult_Default_sequence& SimModel::
      SimGeomBooleanResult_BooleanClippingResult_Default () const
      {
        return this->SimGeomBooleanResult_BooleanClippingResult_Default_;
      }

      SimModel::SimGeomBooleanResult_BooleanClippingResult_Default_sequence& SimModel::
      SimGeomBooleanResult_BooleanClippingResult_Default ()
      {
        return this->SimGeomBooleanResult_BooleanClippingResult_Default_;
      }

      void SimModel::
      SimGeomBooleanResult_BooleanClippingResult_Default (const SimGeomBooleanResult_BooleanClippingResult_Default_sequence& s)
      {
        this->SimGeomBooleanResult_BooleanClippingResult_Default_ = s;
      }

      const SimModel::SimGeomBooleanResult_BooleanResult_Default_sequence& SimModel::
      SimGeomBooleanResult_BooleanResult_Default () const
      {
        return this->SimGeomBooleanResult_BooleanResult_Default_;
      }

      SimModel::SimGeomBooleanResult_BooleanResult_Default_sequence& SimModel::
      SimGeomBooleanResult_BooleanResult_Default ()
      {
        return this->SimGeomBooleanResult_BooleanResult_Default_;
      }

      void SimModel::
      SimGeomBooleanResult_BooleanResult_Default (const SimGeomBooleanResult_BooleanResult_Default_sequence& s)
      {
        this->SimGeomBooleanResult_BooleanResult_Default_ = s;
      }

      const SimModel::SimGeomBoundingBox_BoundingBox_Default_sequence& SimModel::
      SimGeomBoundingBox_BoundingBox_Default () const
      {
        return this->SimGeomBoundingBox_BoundingBox_Default_;
      }

      SimModel::SimGeomBoundingBox_BoundingBox_Default_sequence& SimModel::
      SimGeomBoundingBox_BoundingBox_Default ()
      {
        return this->SimGeomBoundingBox_BoundingBox_Default_;
      }

      void SimModel::
      SimGeomBoundingBox_BoundingBox_Default (const SimGeomBoundingBox_BoundingBox_Default_sequence& s)
      {
        this->SimGeomBoundingBox_BoundingBox_Default_ = s;
      }

      const SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_Block_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_Block () const
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_Block_;
      }

      SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_Block_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_Block ()
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_Block_;
      }

      void SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_Block (const SimGeomCsgPrimative3D_CsgPrimative3D_Block_sequence& s)
      {
        this->SimGeomCsgPrimative3D_CsgPrimative3D_Block_ = s;
      }

      const SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid () const
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_;
      }

      SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid ()
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_;
      }

      void SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid (const SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_sequence& s)
      {
        this->SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_ = s;
      }

      const SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone () const
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_;
      }

      SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone ()
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_;
      }

      void SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone (const SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_sequence& s)
      {
        this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_ = s;
      }

      const SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder () const
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_;
      }

      SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder ()
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_;
      }

      void SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder (const SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_sequence& s)
      {
        this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_ = s;
      }

      const SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_Sphere () const
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_;
      }

      SimModel::SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_sequence& SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_Sphere ()
      {
        return this->SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_;
      }

      void SimModel::
      SimGeomCsgPrimative3D_CsgPrimative3D_Sphere (const SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_sequence& s)
      {
        this->SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_ = s;
      }

      const SimModel::SimGeomCurve_2DCompositeCurve_Default_sequence& SimModel::
      SimGeomCurve_2DCompositeCurve_Default () const
      {
        return this->SimGeomCurve_2DCompositeCurve_Default_;
      }

      SimModel::SimGeomCurve_2DCompositeCurve_Default_sequence& SimModel::
      SimGeomCurve_2DCompositeCurve_Default ()
      {
        return this->SimGeomCurve_2DCompositeCurve_Default_;
      }

      void SimModel::
      SimGeomCurve_2DCompositeCurve_Default (const SimGeomCurve_2DCompositeCurve_Default_sequence& s)
      {
        this->SimGeomCurve_2DCompositeCurve_Default_ = s;
      }

      const SimModel::SimGeomCurve_BoundedCurve_Default_sequence& SimModel::
      SimGeomCurve_BoundedCurve_Default () const
      {
        return this->SimGeomCurve_BoundedCurve_Default_;
      }

      SimModel::SimGeomCurve_BoundedCurve_Default_sequence& SimModel::
      SimGeomCurve_BoundedCurve_Default ()
      {
        return this->SimGeomCurve_BoundedCurve_Default_;
      }

      void SimModel::
      SimGeomCurve_BoundedCurve_Default (const SimGeomCurve_BoundedCurve_Default_sequence& s)
      {
        this->SimGeomCurve_BoundedCurve_Default_ = s;
      }

      const SimModel::SimGeomCurve_Circle_Default_sequence& SimModel::
      SimGeomCurve_Circle_Default () const
      {
        return this->SimGeomCurve_Circle_Default_;
      }

      SimModel::SimGeomCurve_Circle_Default_sequence& SimModel::
      SimGeomCurve_Circle_Default ()
      {
        return this->SimGeomCurve_Circle_Default_;
      }

      void SimModel::
      SimGeomCurve_Circle_Default (const SimGeomCurve_Circle_Default_sequence& s)
      {
        this->SimGeomCurve_Circle_Default_ = s;
      }

      const SimModel::SimGeomCurve_CompositeCurve_Default_sequence& SimModel::
      SimGeomCurve_CompositeCurve_Default () const
      {
        return this->SimGeomCurve_CompositeCurve_Default_;
      }

      SimModel::SimGeomCurve_CompositeCurve_Default_sequence& SimModel::
      SimGeomCurve_CompositeCurve_Default ()
      {
        return this->SimGeomCurve_CompositeCurve_Default_;
      }

      void SimModel::
      SimGeomCurve_CompositeCurve_Default (const SimGeomCurve_CompositeCurve_Default_sequence& s)
      {
        this->SimGeomCurve_CompositeCurve_Default_ = s;
      }

      const SimModel::SimGeomCurve_CompositeCurveSegment_Default_sequence& SimModel::
      SimGeomCurve_CompositeCurveSegment_Default () const
      {
        return this->SimGeomCurve_CompositeCurveSegment_Default_;
      }

      SimModel::SimGeomCurve_CompositeCurveSegment_Default_sequence& SimModel::
      SimGeomCurve_CompositeCurveSegment_Default ()
      {
        return this->SimGeomCurve_CompositeCurveSegment_Default_;
      }

      void SimModel::
      SimGeomCurve_CompositeCurveSegment_Default (const SimGeomCurve_CompositeCurveSegment_Default_sequence& s)
      {
        this->SimGeomCurve_CompositeCurveSegment_Default_ = s;
      }

      const SimModel::SimGeomCurve_Ellipse_Default_sequence& SimModel::
      SimGeomCurve_Ellipse_Default () const
      {
        return this->SimGeomCurve_Ellipse_Default_;
      }

      SimModel::SimGeomCurve_Ellipse_Default_sequence& SimModel::
      SimGeomCurve_Ellipse_Default ()
      {
        return this->SimGeomCurve_Ellipse_Default_;
      }

      void SimModel::
      SimGeomCurve_Ellipse_Default (const SimGeomCurve_Ellipse_Default_sequence& s)
      {
        this->SimGeomCurve_Ellipse_Default_ = s;
      }

      const SimModel::SimGeomCurve_Line_Default_sequence& SimModel::
      SimGeomCurve_Line_Default () const
      {
        return this->SimGeomCurve_Line_Default_;
      }

      SimModel::SimGeomCurve_Line_Default_sequence& SimModel::
      SimGeomCurve_Line_Default ()
      {
        return this->SimGeomCurve_Line_Default_;
      }

      void SimModel::
      SimGeomCurve_Line_Default (const SimGeomCurve_Line_Default_sequence& s)
      {
        this->SimGeomCurve_Line_Default_ = s;
      }

      const SimModel::SimGeomCurve_OffsetCurve2D_Default_sequence& SimModel::
      SimGeomCurve_OffsetCurve2D_Default () const
      {
        return this->SimGeomCurve_OffsetCurve2D_Default_;
      }

      SimModel::SimGeomCurve_OffsetCurve2D_Default_sequence& SimModel::
      SimGeomCurve_OffsetCurve2D_Default ()
      {
        return this->SimGeomCurve_OffsetCurve2D_Default_;
      }

      void SimModel::
      SimGeomCurve_OffsetCurve2D_Default (const SimGeomCurve_OffsetCurve2D_Default_sequence& s)
      {
        this->SimGeomCurve_OffsetCurve2D_Default_ = s;
      }

      const SimModel::SimGeomCurve_OffsetCurve3D_Default_sequence& SimModel::
      SimGeomCurve_OffsetCurve3D_Default () const
      {
        return this->SimGeomCurve_OffsetCurve3D_Default_;
      }

      SimModel::SimGeomCurve_OffsetCurve3D_Default_sequence& SimModel::
      SimGeomCurve_OffsetCurve3D_Default ()
      {
        return this->SimGeomCurve_OffsetCurve3D_Default_;
      }

      void SimModel::
      SimGeomCurve_OffsetCurve3D_Default (const SimGeomCurve_OffsetCurve3D_Default_sequence& s)
      {
        this->SimGeomCurve_OffsetCurve3D_Default_ = s;
      }

      const SimModel::SimGeomCurve_Polyline_Default_sequence& SimModel::
      SimGeomCurve_Polyline_Default () const
      {
        return this->SimGeomCurve_Polyline_Default_;
      }

      SimModel::SimGeomCurve_Polyline_Default_sequence& SimModel::
      SimGeomCurve_Polyline_Default ()
      {
        return this->SimGeomCurve_Polyline_Default_;
      }

      void SimModel::
      SimGeomCurve_Polyline_Default (const SimGeomCurve_Polyline_Default_sequence& s)
      {
        this->SimGeomCurve_Polyline_Default_ = s;
      }

      const SimModel::SimGeomCurve_TrimmedCurve_Default_sequence& SimModel::
      SimGeomCurve_TrimmedCurve_Default () const
      {
        return this->SimGeomCurve_TrimmedCurve_Default_;
      }

      SimModel::SimGeomCurve_TrimmedCurve_Default_sequence& SimModel::
      SimGeomCurve_TrimmedCurve_Default ()
      {
        return this->SimGeomCurve_TrimmedCurve_Default_;
      }

      void SimModel::
      SimGeomCurve_TrimmedCurve_Default (const SimGeomCurve_TrimmedCurve_Default_sequence& s)
      {
        this->SimGeomCurve_TrimmedCurve_Default_ = s;
      }

      const SimModel::SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_sequence& SimModel::
      SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace () const
      {
        return this->SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_;
      }

      SimModel::SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_sequence& SimModel::
      SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace ()
      {
        return this->SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_;
      }

      void SimModel::
      SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace (const SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_sequence& s)
      {
        this->SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_ = s;
      }

      const SimModel::SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_sequence& SimModel::
      SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace () const
      {
        return this->SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_;
      }

      SimModel::SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_sequence& SimModel::
      SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace ()
      {
        return this->SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_;
      }

      void SimModel::
      SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace (const SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_sequence& s)
      {
        this->SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_ = s;
      }

      const SimModel::SimGeomPoint_Point_CartesianPoint_sequence& SimModel::
      SimGeomPoint_Point_CartesianPoint () const
      {
        return this->SimGeomPoint_Point_CartesianPoint_;
      }

      SimModel::SimGeomPoint_Point_CartesianPoint_sequence& SimModel::
      SimGeomPoint_Point_CartesianPoint ()
      {
        return this->SimGeomPoint_Point_CartesianPoint_;
      }

      void SimModel::
      SimGeomPoint_Point_CartesianPoint (const SimGeomPoint_Point_CartesianPoint_sequence& s)
      {
        this->SimGeomPoint_Point_CartesianPoint_ = s;
      }

      const SimModel::SimGeomPoint_Point_PointOnCurve_sequence& SimModel::
      SimGeomPoint_Point_PointOnCurve () const
      {
        return this->SimGeomPoint_Point_PointOnCurve_;
      }

      SimModel::SimGeomPoint_Point_PointOnCurve_sequence& SimModel::
      SimGeomPoint_Point_PointOnCurve ()
      {
        return this->SimGeomPoint_Point_PointOnCurve_;
      }

      void SimModel::
      SimGeomPoint_Point_PointOnCurve (const SimGeomPoint_Point_PointOnCurve_sequence& s)
      {
        this->SimGeomPoint_Point_PointOnCurve_ = s;
      }

      const SimModel::SimGeomPoint_Point_PointOnSurface_sequence& SimModel::
      SimGeomPoint_Point_PointOnSurface () const
      {
        return this->SimGeomPoint_Point_PointOnSurface_;
      }

      SimModel::SimGeomPoint_Point_PointOnSurface_sequence& SimModel::
      SimGeomPoint_Point_PointOnSurface ()
      {
        return this->SimGeomPoint_Point_PointOnSurface_;
      }

      void SimModel::
      SimGeomPoint_Point_PointOnSurface (const SimGeomPoint_Point_PointOnSurface_sequence& s)
      {
        this->SimGeomPoint_Point_PointOnSurface_ = s;
      }

      const SimModel::SimGeomSet_GeometricCurveSet_Default_sequence& SimModel::
      SimGeomSet_GeometricCurveSet_Default () const
      {
        return this->SimGeomSet_GeometricCurveSet_Default_;
      }

      SimModel::SimGeomSet_GeometricCurveSet_Default_sequence& SimModel::
      SimGeomSet_GeometricCurveSet_Default ()
      {
        return this->SimGeomSet_GeometricCurveSet_Default_;
      }

      void SimModel::
      SimGeomSet_GeometricCurveSet_Default (const SimGeomSet_GeometricCurveSet_Default_sequence& s)
      {
        this->SimGeomSet_GeometricCurveSet_Default_ = s;
      }

      const SimModel::SimGeomSet_GeometricSet_Default_sequence& SimModel::
      SimGeomSet_GeometricSet_Default () const
      {
        return this->SimGeomSet_GeometricSet_Default_;
      }

      SimModel::SimGeomSet_GeometricSet_Default_sequence& SimModel::
      SimGeomSet_GeometricSet_Default ()
      {
        return this->SimGeomSet_GeometricSet_Default_;
      }

      void SimModel::
      SimGeomSet_GeometricSet_Default (const SimGeomSet_GeometricSet_Default_sequence& s)
      {
        this->SimGeomSet_GeometricSet_Default_ = s;
      }

      const SimModel::SimGeomSolidModel_CSGSolid_Default_sequence& SimModel::
      SimGeomSolidModel_CSGSolid_Default () const
      {
        return this->SimGeomSolidModel_CSGSolid_Default_;
      }

      SimModel::SimGeomSolidModel_CSGSolid_Default_sequence& SimModel::
      SimGeomSolidModel_CSGSolid_Default ()
      {
        return this->SimGeomSolidModel_CSGSolid_Default_;
      }

      void SimModel::
      SimGeomSolidModel_CSGSolid_Default (const SimGeomSolidModel_CSGSolid_Default_sequence& s)
      {
        this->SimGeomSolidModel_CSGSolid_Default_ = s;
      }

      const SimModel::SimGeomSolidModel_FacetedBrep_Default_sequence& SimModel::
      SimGeomSolidModel_FacetedBrep_Default () const
      {
        return this->SimGeomSolidModel_FacetedBrep_Default_;
      }

      SimModel::SimGeomSolidModel_FacetedBrep_Default_sequence& SimModel::
      SimGeomSolidModel_FacetedBrep_Default ()
      {
        return this->SimGeomSolidModel_FacetedBrep_Default_;
      }

      void SimModel::
      SimGeomSolidModel_FacetedBrep_Default (const SimGeomSolidModel_FacetedBrep_Default_sequence& s)
      {
        this->SimGeomSolidModel_FacetedBrep_Default_ = s;
      }

      const SimModel::SimGeomSolidModel_FacetedBrepWithVoids_Default_sequence& SimModel::
      SimGeomSolidModel_FacetedBrepWithVoids_Default () const
      {
        return this->SimGeomSolidModel_FacetedBrepWithVoids_Default_;
      }

      SimModel::SimGeomSolidModel_FacetedBrepWithVoids_Default_sequence& SimModel::
      SimGeomSolidModel_FacetedBrepWithVoids_Default ()
      {
        return this->SimGeomSolidModel_FacetedBrepWithVoids_Default_;
      }

      void SimModel::
      SimGeomSolidModel_FacetedBrepWithVoids_Default (const SimGeomSolidModel_FacetedBrepWithVoids_Default_sequence& s)
      {
        this->SimGeomSolidModel_FacetedBrepWithVoids_Default_ = s;
      }

      const SimModel::SimGeomSolidModel_ManifoldSolidBrep_Default_sequence& SimModel::
      SimGeomSolidModel_ManifoldSolidBrep_Default () const
      {
        return this->SimGeomSolidModel_ManifoldSolidBrep_Default_;
      }

      SimModel::SimGeomSolidModel_ManifoldSolidBrep_Default_sequence& SimModel::
      SimGeomSolidModel_ManifoldSolidBrep_Default ()
      {
        return this->SimGeomSolidModel_ManifoldSolidBrep_Default_;
      }

      void SimModel::
      SimGeomSolidModel_ManifoldSolidBrep_Default (const SimGeomSolidModel_ManifoldSolidBrep_Default_sequence& s)
      {
        this->SimGeomSolidModel_ManifoldSolidBrep_Default_ = s;
      }

      const SimModel::SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_sequence& SimModel::
      SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid () const
      {
        return this->SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_;
      }

      SimModel::SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_sequence& SimModel::
      SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid ()
      {
        return this->SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_;
      }

      void SimModel::
      SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid (const SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_sequence& s)
      {
        this->SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_ = s;
      }

      const SimModel::SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_sequence& SimModel::
      SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid () const
      {
        return this->SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_;
      }

      SimModel::SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_sequence& SimModel::
      SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid ()
      {
        return this->SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_;
      }

      void SimModel::
      SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid (const SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_sequence& s)
      {
        this->SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_ = s;
      }

      const SimModel::SimGeomSolidModel_SweptDiskSolid_Default_sequence& SimModel::
      SimGeomSolidModel_SweptDiskSolid_Default () const
      {
        return this->SimGeomSolidModel_SweptDiskSolid_Default_;
      }

      SimModel::SimGeomSolidModel_SweptDiskSolid_Default_sequence& SimModel::
      SimGeomSolidModel_SweptDiskSolid_Default ()
      {
        return this->SimGeomSolidModel_SweptDiskSolid_Default_;
      }

      void SimModel::
      SimGeomSolidModel_SweptDiskSolid_Default (const SimGeomSolidModel_SweptDiskSolid_Default_sequence& s)
      {
        this->SimGeomSolidModel_SweptDiskSolid_Default_ = s;
      }

      const SimModel::SimGeomSurface_BoundedSurface_CurveBoundedPlane_sequence& SimModel::
      SimGeomSurface_BoundedSurface_CurveBoundedPlane () const
      {
        return this->SimGeomSurface_BoundedSurface_CurveBoundedPlane_;
      }

      SimModel::SimGeomSurface_BoundedSurface_CurveBoundedPlane_sequence& SimModel::
      SimGeomSurface_BoundedSurface_CurveBoundedPlane ()
      {
        return this->SimGeomSurface_BoundedSurface_CurveBoundedPlane_;
      }

      void SimModel::
      SimGeomSurface_BoundedSurface_CurveBoundedPlane (const SimGeomSurface_BoundedSurface_CurveBoundedPlane_sequence& s)
      {
        this->SimGeomSurface_BoundedSurface_CurveBoundedPlane_ = s;
      }

      const SimModel::SimGeomSurface_BoundedSurface_Default_sequence& SimModel::
      SimGeomSurface_BoundedSurface_Default () const
      {
        return this->SimGeomSurface_BoundedSurface_Default_;
      }

      SimModel::SimGeomSurface_BoundedSurface_Default_sequence& SimModel::
      SimGeomSurface_BoundedSurface_Default ()
      {
        return this->SimGeomSurface_BoundedSurface_Default_;
      }

      void SimModel::
      SimGeomSurface_BoundedSurface_Default (const SimGeomSurface_BoundedSurface_Default_sequence& s)
      {
        this->SimGeomSurface_BoundedSurface_Default_ = s;
      }

      const SimModel::SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_sequence& SimModel::
      SimGeomSurface_BoundedSurface_RectangularTrimmedSurface () const
      {
        return this->SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_;
      }

      SimModel::SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_sequence& SimModel::
      SimGeomSurface_BoundedSurface_RectangularTrimmedSurface ()
      {
        return this->SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_;
      }

      void SimModel::
      SimGeomSurface_BoundedSurface_RectangularTrimmedSurface (const SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_sequence& s)
      {
        this->SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_ = s;
      }

      const SimModel::SimGeomSurface_Default_Default_sequence& SimModel::
      SimGeomSurface_Default_Default () const
      {
        return this->SimGeomSurface_Default_Default_;
      }

      SimModel::SimGeomSurface_Default_Default_sequence& SimModel::
      SimGeomSurface_Default_Default ()
      {
        return this->SimGeomSurface_Default_Default_;
      }

      void SimModel::
      SimGeomSurface_Default_Default (const SimGeomSurface_Default_Default_sequence& s)
      {
        this->SimGeomSurface_Default_Default_ = s;
      }

      const SimModel::SimGeomSurface_ElementarySurface_Default_sequence& SimModel::
      SimGeomSurface_ElementarySurface_Default () const
      {
        return this->SimGeomSurface_ElementarySurface_Default_;
      }

      SimModel::SimGeomSurface_ElementarySurface_Default_sequence& SimModel::
      SimGeomSurface_ElementarySurface_Default ()
      {
        return this->SimGeomSurface_ElementarySurface_Default_;
      }

      void SimModel::
      SimGeomSurface_ElementarySurface_Default (const SimGeomSurface_ElementarySurface_Default_sequence& s)
      {
        this->SimGeomSurface_ElementarySurface_Default_ = s;
      }

      const SimModel::SimGeomSurface_ElementarySurface_Plane_sequence& SimModel::
      SimGeomSurface_ElementarySurface_Plane () const
      {
        return this->SimGeomSurface_ElementarySurface_Plane_;
      }

      SimModel::SimGeomSurface_ElementarySurface_Plane_sequence& SimModel::
      SimGeomSurface_ElementarySurface_Plane ()
      {
        return this->SimGeomSurface_ElementarySurface_Plane_;
      }

      void SimModel::
      SimGeomSurface_ElementarySurface_Plane (const SimGeomSurface_ElementarySurface_Plane_sequence& s)
      {
        this->SimGeomSurface_ElementarySurface_Plane_ = s;
      }

      const SimModel::SimGeomSurface_SweptSurface_Default_sequence& SimModel::
      SimGeomSurface_SweptSurface_Default () const
      {
        return this->SimGeomSurface_SweptSurface_Default_;
      }

      SimModel::SimGeomSurface_SweptSurface_Default_sequence& SimModel::
      SimGeomSurface_SweptSurface_Default ()
      {
        return this->SimGeomSurface_SweptSurface_Default_;
      }

      void SimModel::
      SimGeomSurface_SweptSurface_Default (const SimGeomSurface_SweptSurface_Default_sequence& s)
      {
        this->SimGeomSurface_SweptSurface_Default_ = s;
      }

      const SimModel::SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_sequence& SimModel::
      SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion () const
      {
        return this->SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_;
      }

      SimModel::SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_sequence& SimModel::
      SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion ()
      {
        return this->SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_;
      }

      void SimModel::
      SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion (const SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_sequence& s)
      {
        this->SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_ = s;
      }

      const SimModel::SimGeomSurface_SweptSurface_SurfaceOfRevolution_sequence& SimModel::
      SimGeomSurface_SweptSurface_SurfaceOfRevolution () const
      {
        return this->SimGeomSurface_SweptSurface_SurfaceOfRevolution_;
      }

      SimModel::SimGeomSurface_SweptSurface_SurfaceOfRevolution_sequence& SimModel::
      SimGeomSurface_SweptSurface_SurfaceOfRevolution ()
      {
        return this->SimGeomSurface_SweptSurface_SurfaceOfRevolution_;
      }

      void SimModel::
      SimGeomSurface_SweptSurface_SurfaceOfRevolution (const SimGeomSurface_SweptSurface_SurfaceOfRevolution_sequence& s)
      {
        this->SimGeomSurface_SweptSurface_SurfaceOfRevolution_ = s;
      }

      const SimModel::SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_sequence& SimModel::
      SimGeomSurfaceModel_FaceBasedSurfaceModel_Default () const
      {
        return this->SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_;
      }

      SimModel::SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_sequence& SimModel::
      SimGeomSurfaceModel_FaceBasedSurfaceModel_Default ()
      {
        return this->SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_;
      }

      void SimModel::
      SimGeomSurfaceModel_FaceBasedSurfaceModel_Default (const SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_sequence& s)
      {
        this->SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_ = s;
      }

      const SimModel::SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_sequence& SimModel::
      SimGeomSurfaceModel_ShellBasedSurfaceModel_Default () const
      {
        return this->SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_;
      }

      SimModel::SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_sequence& SimModel::
      SimGeomSurfaceModel_ShellBasedSurfaceModel_Default ()
      {
        return this->SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_;
      }

      void SimModel::
      SimGeomSurfaceModel_ShellBasedSurfaceModel_Default (const SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_sequence& s)
      {
        this->SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_ = s;
      }

      const SimModel::SimGeomVector_Vector_Default_sequence& SimModel::
      SimGeomVector_Vector_Default () const
      {
        return this->SimGeomVector_Vector_Default_;
      }

      SimModel::SimGeomVector_Vector_Default_sequence& SimModel::
      SimGeomVector_Vector_Default ()
      {
        return this->SimGeomVector_Vector_Default_;
      }

      void SimModel::
      SimGeomVector_Vector_Default (const SimGeomVector_Vector_Default_sequence& s)
      {
        this->SimGeomVector_Vector_Default_ = s;
      }

      const SimModel::SimGeomVector_Vector_Direction_sequence& SimModel::
      SimGeomVector_Vector_Direction () const
      {
        return this->SimGeomVector_Vector_Direction_;
      }

      SimModel::SimGeomVector_Vector_Direction_sequence& SimModel::
      SimGeomVector_Vector_Direction ()
      {
        return this->SimGeomVector_Vector_Direction_;
      }

      void SimModel::
      SimGeomVector_Vector_Direction (const SimGeomVector_Vector_Direction_sequence& s)
      {
        this->SimGeomVector_Vector_Direction_ = s;
      }

      const SimModel::SimGlazingPanelParams_GlazingPanel_Glazing_sequence& SimModel::
      SimGlazingPanelParams_GlazingPanel_Glazing () const
      {
        return this->SimGlazingPanelParams_GlazingPanel_Glazing_;
      }

      SimModel::SimGlazingPanelParams_GlazingPanel_Glazing_sequence& SimModel::
      SimGlazingPanelParams_GlazingPanel_Glazing ()
      {
        return this->SimGlazingPanelParams_GlazingPanel_Glazing_;
      }

      void SimModel::
      SimGlazingPanelParams_GlazingPanel_Glazing (const SimGlazingPanelParams_GlazingPanel_Glazing_sequence& s)
      {
        this->SimGlazingPanelParams_GlazingPanel_Glazing_ = s;
      }

      const SimModel::SimGridAxis_GridAxis_Default_sequence& SimModel::
      SimGridAxis_GridAxis_Default () const
      {
        return this->SimGridAxis_GridAxis_Default_;
      }

      SimModel::SimGridAxis_GridAxis_Default_sequence& SimModel::
      SimGridAxis_GridAxis_Default ()
      {
        return this->SimGridAxis_GridAxis_Default_;
      }

      void SimModel::
      SimGridAxis_GridAxis_Default (const SimGridAxis_GridAxis_Default_sequence& s)
      {
        this->SimGridAxis_GridAxis_Default_ = s;
      }

      const SimModel::SimGridPlacement_GridPlacement_Default_sequence& SimModel::
      SimGridPlacement_GridPlacement_Default () const
      {
        return this->SimGridPlacement_GridPlacement_Default_;
      }

      SimModel::SimGridPlacement_GridPlacement_Default_sequence& SimModel::
      SimGridPlacement_GridPlacement_Default ()
      {
        return this->SimGridPlacement_GridPlacement_Default_;
      }

      void SimModel::
      SimGridPlacement_GridPlacement_Default (const SimGridPlacement_GridPlacement_Default_sequence& s)
      {
        this->SimGridPlacement_GridPlacement_Default_ = s;
      }

      const SimModel::SimGroundHeatTransferBasement_BasementTransferModel_Default_sequence& SimModel::
      SimGroundHeatTransferBasement_BasementTransferModel_Default () const
      {
        return this->SimGroundHeatTransferBasement_BasementTransferModel_Default_;
      }

      SimModel::SimGroundHeatTransferBasement_BasementTransferModel_Default_sequence& SimModel::
      SimGroundHeatTransferBasement_BasementTransferModel_Default ()
      {
        return this->SimGroundHeatTransferBasement_BasementTransferModel_Default_;
      }

      void SimModel::
      SimGroundHeatTransferBasement_BasementTransferModel_Default (const SimGroundHeatTransferBasement_BasementTransferModel_Default_sequence& s)
      {
        this->SimGroundHeatTransferBasement_BasementTransferModel_Default_ = s;
      }

      const SimModel::SimGroundHeatTransferSlab_SlabTransferModel_Default_sequence& SimModel::
      SimGroundHeatTransferSlab_SlabTransferModel_Default () const
      {
        return this->SimGroundHeatTransferSlab_SlabTransferModel_Default_;
      }

      SimModel::SimGroundHeatTransferSlab_SlabTransferModel_Default_sequence& SimModel::
      SimGroundHeatTransferSlab_SlabTransferModel_Default ()
      {
        return this->SimGroundHeatTransferSlab_SlabTransferModel_Default_;
      }

      void SimModel::
      SimGroundHeatTransferSlab_SlabTransferModel_Default (const SimGroundHeatTransferSlab_SlabTransferModel_Default_sequence& s)
      {
        this->SimGroundHeatTransferSlab_SlabTransferModel_Default_ = s;
      }

      const SimModel::SimGroup_BldgCompGroup_AirTerminal_sequence& SimModel::
      SimGroup_BldgCompGroup_AirTerminal () const
      {
        return this->SimGroup_BldgCompGroup_AirTerminal_;
      }

      SimModel::SimGroup_BldgCompGroup_AirTerminal_sequence& SimModel::
      SimGroup_BldgCompGroup_AirTerminal ()
      {
        return this->SimGroup_BldgCompGroup_AirTerminal_;
      }

      void SimModel::
      SimGroup_BldgCompGroup_AirTerminal (const SimGroup_BldgCompGroup_AirTerminal_sequence& s)
      {
        this->SimGroup_BldgCompGroup_AirTerminal_ = s;
      }

      const SimModel::SimGroup_BldgCompGroup_Coil_sequence& SimModel::
      SimGroup_BldgCompGroup_Coil () const
      {
        return this->SimGroup_BldgCompGroup_Coil_;
      }

      SimModel::SimGroup_BldgCompGroup_Coil_sequence& SimModel::
      SimGroup_BldgCompGroup_Coil ()
      {
        return this->SimGroup_BldgCompGroup_Coil_;
      }

      void SimModel::
      SimGroup_BldgCompGroup_Coil (const SimGroup_BldgCompGroup_Coil_sequence& s)
      {
        this->SimGroup_BldgCompGroup_Coil_ = s;
      }

      const SimModel::SimGroup_BldgCompGroup_Default_sequence& SimModel::
      SimGroup_BldgCompGroup_Default () const
      {
        return this->SimGroup_BldgCompGroup_Default_;
      }

      SimModel::SimGroup_BldgCompGroup_Default_sequence& SimModel::
      SimGroup_BldgCompGroup_Default ()
      {
        return this->SimGroup_BldgCompGroup_Default_;
      }

      void SimModel::
      SimGroup_BldgCompGroup_Default (const SimGroup_BldgCompGroup_Default_sequence& s)
      {
        this->SimGroup_BldgCompGroup_Default_ = s;
      }

      const SimModel::SimGroup_BldgCompGroup_Sensor_sequence& SimModel::
      SimGroup_BldgCompGroup_Sensor () const
      {
        return this->SimGroup_BldgCompGroup_Sensor_;
      }

      SimModel::SimGroup_BldgCompGroup_Sensor_sequence& SimModel::
      SimGroup_BldgCompGroup_Sensor ()
      {
        return this->SimGroup_BldgCompGroup_Sensor_;
      }

      void SimModel::
      SimGroup_BldgCompGroup_Sensor (const SimGroup_BldgCompGroup_Sensor_sequence& s)
      {
        this->SimGroup_BldgCompGroup_Sensor_ = s;
      }

      const SimModel::SimGroup_BldgCompGroup_ZoneController_sequence& SimModel::
      SimGroup_BldgCompGroup_ZoneController () const
      {
        return this->SimGroup_BldgCompGroup_ZoneController_;
      }

      SimModel::SimGroup_BldgCompGroup_ZoneController_sequence& SimModel::
      SimGroup_BldgCompGroup_ZoneController ()
      {
        return this->SimGroup_BldgCompGroup_ZoneController_;
      }

      void SimModel::
      SimGroup_BldgCompGroup_ZoneController (const SimGroup_BldgCompGroup_ZoneController_sequence& s)
      {
        this->SimGroup_BldgCompGroup_ZoneController_ = s;
      }

      const SimModel::SimGroup_BldgCompGroup_ZoneEquipment_sequence& SimModel::
      SimGroup_BldgCompGroup_ZoneEquipment () const
      {
        return this->SimGroup_BldgCompGroup_ZoneEquipment_;
      }

      SimModel::SimGroup_BldgCompGroup_ZoneEquipment_sequence& SimModel::
      SimGroup_BldgCompGroup_ZoneEquipment ()
      {
        return this->SimGroup_BldgCompGroup_ZoneEquipment_;
      }

      void SimModel::
      SimGroup_BldgCompGroup_ZoneEquipment (const SimGroup_BldgCompGroup_ZoneEquipment_sequence& s)
      {
        this->SimGroup_BldgCompGroup_ZoneEquipment_ = s;
      }

      const SimModel::SimGroup_BldgElementGroup_Default_sequence& SimModel::
      SimGroup_BldgElementGroup_Default () const
      {
        return this->SimGroup_BldgElementGroup_Default_;
      }

      SimModel::SimGroup_BldgElementGroup_Default_sequence& SimModel::
      SimGroup_BldgElementGroup_Default ()
      {
        return this->SimGroup_BldgElementGroup_Default_;
      }

      void SimModel::
      SimGroup_BldgElementGroup_Default (const SimGroup_BldgElementGroup_Default_sequence& s)
      {
        this->SimGroup_BldgElementGroup_Default_ = s;
      }

      const SimModel::SimGroup_BuildingGroup_Default_sequence& SimModel::
      SimGroup_BuildingGroup_Default () const
      {
        return this->SimGroup_BuildingGroup_Default_;
      }

      SimModel::SimGroup_BuildingGroup_Default_sequence& SimModel::
      SimGroup_BuildingGroup_Default ()
      {
        return this->SimGroup_BuildingGroup_Default_;
      }

      void SimModel::
      SimGroup_BuildingGroup_Default (const SimGroup_BuildingGroup_Default_sequence& s)
      {
        this->SimGroup_BuildingGroup_Default_ = s;
      }

      const SimModel::SimGroup_ConnectorList_AirConnections_sequence& SimModel::
      SimGroup_ConnectorList_AirConnections () const
      {
        return this->SimGroup_ConnectorList_AirConnections_;
      }

      SimModel::SimGroup_ConnectorList_AirConnections_sequence& SimModel::
      SimGroup_ConnectorList_AirConnections ()
      {
        return this->SimGroup_ConnectorList_AirConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_AirConnections (const SimGroup_ConnectorList_AirConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_AirConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_ChilledWaterConnections_sequence& SimModel::
      SimGroup_ConnectorList_ChilledWaterConnections () const
      {
        return this->SimGroup_ConnectorList_ChilledWaterConnections_;
      }

      SimModel::SimGroup_ConnectorList_ChilledWaterConnections_sequence& SimModel::
      SimGroup_ConnectorList_ChilledWaterConnections ()
      {
        return this->SimGroup_ConnectorList_ChilledWaterConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_ChilledWaterConnections (const SimGroup_ConnectorList_ChilledWaterConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_ChilledWaterConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_CondenserConnections_sequence& SimModel::
      SimGroup_ConnectorList_CondenserConnections () const
      {
        return this->SimGroup_ConnectorList_CondenserConnections_;
      }

      SimModel::SimGroup_ConnectorList_CondenserConnections_sequence& SimModel::
      SimGroup_ConnectorList_CondenserConnections ()
      {
        return this->SimGroup_ConnectorList_CondenserConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_CondenserConnections (const SimGroup_ConnectorList_CondenserConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_CondenserConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_ControllerConnections_sequence& SimModel::
      SimGroup_ConnectorList_ControllerConnections () const
      {
        return this->SimGroup_ConnectorList_ControllerConnections_;
      }

      SimModel::SimGroup_ConnectorList_ControllerConnections_sequence& SimModel::
      SimGroup_ConnectorList_ControllerConnections ()
      {
        return this->SimGroup_ConnectorList_ControllerConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_ControllerConnections (const SimGroup_ConnectorList_ControllerConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_ControllerConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_HotWaterConnections_sequence& SimModel::
      SimGroup_ConnectorList_HotWaterConnections () const
      {
        return this->SimGroup_ConnectorList_HotWaterConnections_;
      }

      SimModel::SimGroup_ConnectorList_HotWaterConnections_sequence& SimModel::
      SimGroup_ConnectorList_HotWaterConnections ()
      {
        return this->SimGroup_ConnectorList_HotWaterConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_HotWaterConnections (const SimGroup_ConnectorList_HotWaterConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_HotWaterConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_ServiceHotWaterConnections_sequence& SimModel::
      SimGroup_ConnectorList_ServiceHotWaterConnections () const
      {
        return this->SimGroup_ConnectorList_ServiceHotWaterConnections_;
      }

      SimModel::SimGroup_ConnectorList_ServiceHotWaterConnections_sequence& SimModel::
      SimGroup_ConnectorList_ServiceHotWaterConnections ()
      {
        return this->SimGroup_ConnectorList_ServiceHotWaterConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_ServiceHotWaterConnections (const SimGroup_ConnectorList_ServiceHotWaterConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_ServiceHotWaterConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_SimConnections_sequence& SimModel::
      SimGroup_ConnectorList_SimConnections () const
      {
        return this->SimGroup_ConnectorList_SimConnections_;
      }

      SimModel::SimGroup_ConnectorList_SimConnections_sequence& SimModel::
      SimGroup_ConnectorList_SimConnections ()
      {
        return this->SimGroup_ConnectorList_SimConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_SimConnections (const SimGroup_ConnectorList_SimConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_SimConnections_ = s;
      }

      const SimModel::SimGroup_ConnectorList_SteamConnections_sequence& SimModel::
      SimGroup_ConnectorList_SteamConnections () const
      {
        return this->SimGroup_ConnectorList_SteamConnections_;
      }

      SimModel::SimGroup_ConnectorList_SteamConnections_sequence& SimModel::
      SimGroup_ConnectorList_SteamConnections ()
      {
        return this->SimGroup_ConnectorList_SteamConnections_;
      }

      void SimModel::
      SimGroup_ConnectorList_SteamConnections (const SimGroup_ConnectorList_SteamConnections_sequence& s)
      {
        this->SimGroup_ConnectorList_SteamConnections_ = s;
      }

      const SimModel::SimGroup_ControllerList_Default_sequence& SimModel::
      SimGroup_ControllerList_Default () const
      {
        return this->SimGroup_ControllerList_Default_;
      }

      SimModel::SimGroup_ControllerList_Default_sequence& SimModel::
      SimGroup_ControllerList_Default ()
      {
        return this->SimGroup_ControllerList_Default_;
      }

      void SimModel::
      SimGroup_ControllerList_Default (const SimGroup_ControllerList_Default_sequence& s)
      {
        this->SimGroup_ControllerList_Default_ = s;
      }

      const SimModel::SimGroup_DefaultGroup_Default_sequence& SimModel::
      SimGroup_DefaultGroup_Default () const
      {
        return this->SimGroup_DefaultGroup_Default_;
      }

      SimModel::SimGroup_DefaultGroup_Default_sequence& SimModel::
      SimGroup_DefaultGroup_Default ()
      {
        return this->SimGroup_DefaultGroup_Default_;
      }

      void SimModel::
      SimGroup_DefaultGroup_Default (const SimGroup_DefaultGroup_Default_sequence& s)
      {
        this->SimGroup_DefaultGroup_Default_ = s;
      }

      const SimModel::SimGroup_DefaultList_Default_sequence& SimModel::
      SimGroup_DefaultList_Default () const
      {
        return this->SimGroup_DefaultList_Default_;
      }

      SimModel::SimGroup_DefaultList_Default_sequence& SimModel::
      SimGroup_DefaultList_Default ()
      {
        return this->SimGroup_DefaultList_Default_;
      }

      void SimModel::
      SimGroup_DefaultList_Default (const SimGroup_DefaultList_Default_sequence& s)
      {
        this->SimGroup_DefaultList_Default_ = s;
      }

      const SimModel::SimGroup_EquipmentList_CondenserEquipment_sequence& SimModel::
      SimGroup_EquipmentList_CondenserEquipment () const
      {
        return this->SimGroup_EquipmentList_CondenserEquipment_;
      }

      SimModel::SimGroup_EquipmentList_CondenserEquipment_sequence& SimModel::
      SimGroup_EquipmentList_CondenserEquipment ()
      {
        return this->SimGroup_EquipmentList_CondenserEquipment_;
      }

      void SimModel::
      SimGroup_EquipmentList_CondenserEquipment (const SimGroup_EquipmentList_CondenserEquipment_sequence& s)
      {
        this->SimGroup_EquipmentList_CondenserEquipment_ = s;
      }

      const SimModel::SimGroup_EquipmentList_ElectricalLoadCenter_sequence& SimModel::
      SimGroup_EquipmentList_ElectricalLoadCenter () const
      {
        return this->SimGroup_EquipmentList_ElectricalLoadCenter_;
      }

      SimModel::SimGroup_EquipmentList_ElectricalLoadCenter_sequence& SimModel::
      SimGroup_EquipmentList_ElectricalLoadCenter ()
      {
        return this->SimGroup_EquipmentList_ElectricalLoadCenter_;
      }

      void SimModel::
      SimGroup_EquipmentList_ElectricalLoadCenter (const SimGroup_EquipmentList_ElectricalLoadCenter_sequence& s)
      {
        this->SimGroup_EquipmentList_ElectricalLoadCenter_ = s;
      }

      const SimModel::SimGroup_EquipmentList_OutdoorAirSystem_sequence& SimModel::
      SimGroup_EquipmentList_OutdoorAirSystem () const
      {
        return this->SimGroup_EquipmentList_OutdoorAirSystem_;
      }

      SimModel::SimGroup_EquipmentList_OutdoorAirSystem_sequence& SimModel::
      SimGroup_EquipmentList_OutdoorAirSystem ()
      {
        return this->SimGroup_EquipmentList_OutdoorAirSystem_;
      }

      void SimModel::
      SimGroup_EquipmentList_OutdoorAirSystem (const SimGroup_EquipmentList_OutdoorAirSystem_sequence& s)
      {
        this->SimGroup_EquipmentList_OutdoorAirSystem_ = s;
      }

      const SimModel::SimGroup_EquipmentList_OutdoorAirUnit_sequence& SimModel::
      SimGroup_EquipmentList_OutdoorAirUnit () const
      {
        return this->SimGroup_EquipmentList_OutdoorAirUnit_;
      }

      SimModel::SimGroup_EquipmentList_OutdoorAirUnit_sequence& SimModel::
      SimGroup_EquipmentList_OutdoorAirUnit ()
      {
        return this->SimGroup_EquipmentList_OutdoorAirUnit_;
      }

      void SimModel::
      SimGroup_EquipmentList_OutdoorAirUnit (const SimGroup_EquipmentList_OutdoorAirUnit_sequence& s)
      {
        this->SimGroup_EquipmentList_OutdoorAirUnit_ = s;
      }

      const SimModel::SimGroup_EquipmentList_PlantEquipment_sequence& SimModel::
      SimGroup_EquipmentList_PlantEquipment () const
      {
        return this->SimGroup_EquipmentList_PlantEquipment_;
      }

      SimModel::SimGroup_EquipmentList_PlantEquipment_sequence& SimModel::
      SimGroup_EquipmentList_PlantEquipment ()
      {
        return this->SimGroup_EquipmentList_PlantEquipment_;
      }

      void SimModel::
      SimGroup_EquipmentList_PlantEquipment (const SimGroup_EquipmentList_PlantEquipment_sequence& s)
      {
        this->SimGroup_EquipmentList_PlantEquipment_ = s;
      }

      const SimModel::SimGroup_EquipmentList_RefrigerationCompressor_sequence& SimModel::
      SimGroup_EquipmentList_RefrigerationCompressor () const
      {
        return this->SimGroup_EquipmentList_RefrigerationCompressor_;
      }

      SimModel::SimGroup_EquipmentList_RefrigerationCompressor_sequence& SimModel::
      SimGroup_EquipmentList_RefrigerationCompressor ()
      {
        return this->SimGroup_EquipmentList_RefrigerationCompressor_;
      }

      void SimModel::
      SimGroup_EquipmentList_RefrigerationCompressor (const SimGroup_EquipmentList_RefrigerationCompressor_sequence& s)
      {
        this->SimGroup_EquipmentList_RefrigerationCompressor_ = s;
      }

      const SimModel::SimGroup_EquipmentList_RefrigerationEquipment_sequence& SimModel::
      SimGroup_EquipmentList_RefrigerationEquipment () const
      {
        return this->SimGroup_EquipmentList_RefrigerationEquipment_;
      }

      SimModel::SimGroup_EquipmentList_RefrigerationEquipment_sequence& SimModel::
      SimGroup_EquipmentList_RefrigerationEquipment ()
      {
        return this->SimGroup_EquipmentList_RefrigerationEquipment_;
      }

      void SimModel::
      SimGroup_EquipmentList_RefrigerationEquipment (const SimGroup_EquipmentList_RefrigerationEquipment_sequence& s)
      {
        this->SimGroup_EquipmentList_RefrigerationEquipment_ = s;
      }

      const SimModel::SimGroup_EquipmentList_RefrigerationLoadTransfer_sequence& SimModel::
      SimGroup_EquipmentList_RefrigerationLoadTransfer () const
      {
        return this->SimGroup_EquipmentList_RefrigerationLoadTransfer_;
      }

      SimModel::SimGroup_EquipmentList_RefrigerationLoadTransfer_sequence& SimModel::
      SimGroup_EquipmentList_RefrigerationLoadTransfer ()
      {
        return this->SimGroup_EquipmentList_RefrigerationLoadTransfer_;
      }

      void SimModel::
      SimGroup_EquipmentList_RefrigerationLoadTransfer (const SimGroup_EquipmentList_RefrigerationLoadTransfer_sequence& s)
      {
        this->SimGroup_EquipmentList_RefrigerationLoadTransfer_ = s;
      }

      const SimModel::SimGroup_EquipmentList_ServiceHotWater_sequence& SimModel::
      SimGroup_EquipmentList_ServiceHotWater () const
      {
        return this->SimGroup_EquipmentList_ServiceHotWater_;
      }

      SimModel::SimGroup_EquipmentList_ServiceHotWater_sequence& SimModel::
      SimGroup_EquipmentList_ServiceHotWater ()
      {
        return this->SimGroup_EquipmentList_ServiceHotWater_;
      }

      void SimModel::
      SimGroup_EquipmentList_ServiceHotWater (const SimGroup_EquipmentList_ServiceHotWater_sequence& s)
      {
        this->SimGroup_EquipmentList_ServiceHotWater_ = s;
      }

      const SimModel::SimGroup_EquipmentList_ZoneHvac_sequence& SimModel::
      SimGroup_EquipmentList_ZoneHvac () const
      {
        return this->SimGroup_EquipmentList_ZoneHvac_;
      }

      SimModel::SimGroup_EquipmentList_ZoneHvac_sequence& SimModel::
      SimGroup_EquipmentList_ZoneHvac ()
      {
        return this->SimGroup_EquipmentList_ZoneHvac_;
      }

      void SimModel::
      SimGroup_EquipmentList_ZoneHvac (const SimGroup_EquipmentList_ZoneHvac_sequence& s)
      {
        this->SimGroup_EquipmentList_ZoneHvac_ = s;
      }

      const SimModel::SimGroup_HvacDemandGroup_AirSystem_sequence& SimModel::
      SimGroup_HvacDemandGroup_AirSystem () const
      {
        return this->SimGroup_HvacDemandGroup_AirSystem_;
      }

      SimModel::SimGroup_HvacDemandGroup_AirSystem_sequence& SimModel::
      SimGroup_HvacDemandGroup_AirSystem ()
      {
        return this->SimGroup_HvacDemandGroup_AirSystem_;
      }

      void SimModel::
      SimGroup_HvacDemandGroup_AirSystem (const SimGroup_HvacDemandGroup_AirSystem_sequence& s)
      {
        this->SimGroup_HvacDemandGroup_AirSystem_ = s;
      }

      const SimModel::SimGroup_HvacDemandGroup_RefrigerationSystem_sequence& SimModel::
      SimGroup_HvacDemandGroup_RefrigerationSystem () const
      {
        return this->SimGroup_HvacDemandGroup_RefrigerationSystem_;
      }

      SimModel::SimGroup_HvacDemandGroup_RefrigerationSystem_sequence& SimModel::
      SimGroup_HvacDemandGroup_RefrigerationSystem ()
      {
        return this->SimGroup_HvacDemandGroup_RefrigerationSystem_;
      }

      void SimModel::
      SimGroup_HvacDemandGroup_RefrigerationSystem (const SimGroup_HvacDemandGroup_RefrigerationSystem_sequence& s)
      {
        this->SimGroup_HvacDemandGroup_RefrigerationSystem_ = s;
      }

      const SimModel::SimGroup_HvacDemandGroup_WaterSystem_sequence& SimModel::
      SimGroup_HvacDemandGroup_WaterSystem () const
      {
        return this->SimGroup_HvacDemandGroup_WaterSystem_;
      }

      SimModel::SimGroup_HvacDemandGroup_WaterSystem_sequence& SimModel::
      SimGroup_HvacDemandGroup_WaterSystem ()
      {
        return this->SimGroup_HvacDemandGroup_WaterSystem_;
      }

      void SimModel::
      SimGroup_HvacDemandGroup_WaterSystem (const SimGroup_HvacDemandGroup_WaterSystem_sequence& s)
      {
        this->SimGroup_HvacDemandGroup_WaterSystem_ = s;
      }

      const SimModel::SimGroup_MaterialList_Default_sequence& SimModel::
      SimGroup_MaterialList_Default () const
      {
        return this->SimGroup_MaterialList_Default_;
      }

      SimModel::SimGroup_MaterialList_Default_sequence& SimModel::
      SimGroup_MaterialList_Default ()
      {
        return this->SimGroup_MaterialList_Default_;
      }

      void SimModel::
      SimGroup_MaterialList_Default (const SimGroup_MaterialList_Default_sequence& s)
      {
        this->SimGroup_MaterialList_Default_ = s;
      }

      const SimModel::SimGroup_NodeList_Default_sequence& SimModel::
      SimGroup_NodeList_Default () const
      {
        return this->SimGroup_NodeList_Default_;
      }

      SimModel::SimGroup_NodeList_Default_sequence& SimModel::
      SimGroup_NodeList_Default ()
      {
        return this->SimGroup_NodeList_Default_;
      }

      void SimModel::
      SimGroup_NodeList_Default (const SimGroup_NodeList_Default_sequence& s)
      {
        this->SimGroup_NodeList_Default_ = s;
      }

      const SimModel::SimGroup_NodeList_OutdoorAir_sequence& SimModel::
      SimGroup_NodeList_OutdoorAir () const
      {
        return this->SimGroup_NodeList_OutdoorAir_;
      }

      SimModel::SimGroup_NodeList_OutdoorAir_sequence& SimModel::
      SimGroup_NodeList_OutdoorAir ()
      {
        return this->SimGroup_NodeList_OutdoorAir_;
      }

      void SimModel::
      SimGroup_NodeList_OutdoorAir (const SimGroup_NodeList_OutdoorAir_sequence& s)
      {
        this->SimGroup_NodeList_OutdoorAir_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Daylighting_sequence& SimModel::
      SimGroup_OutputRequestList_Daylighting () const
      {
        return this->SimGroup_OutputRequestList_Daylighting_;
      }

      SimModel::SimGroup_OutputRequestList_Daylighting_sequence& SimModel::
      SimGroup_OutputRequestList_Daylighting ()
      {
        return this->SimGroup_OutputRequestList_Daylighting_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Daylighting (const SimGroup_OutputRequestList_Daylighting_sequence& s)
      {
        this->SimGroup_OutputRequestList_Daylighting_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Environmental_sequence& SimModel::
      SimGroup_OutputRequestList_Environmental () const
      {
        return this->SimGroup_OutputRequestList_Environmental_;
      }

      SimModel::SimGroup_OutputRequestList_Environmental_sequence& SimModel::
      SimGroup_OutputRequestList_Environmental ()
      {
        return this->SimGroup_OutputRequestList_Environmental_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Environmental (const SimGroup_OutputRequestList_Environmental_sequence& s)
      {
        this->SimGroup_OutputRequestList_Environmental_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Fuel_sequence& SimModel::
      SimGroup_OutputRequestList_Fuel () const
      {
        return this->SimGroup_OutputRequestList_Fuel_;
      }

      SimModel::SimGroup_OutputRequestList_Fuel_sequence& SimModel::
      SimGroup_OutputRequestList_Fuel ()
      {
        return this->SimGroup_OutputRequestList_Fuel_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Fuel (const SimGroup_OutputRequestList_Fuel_sequence& s)
      {
        this->SimGroup_OutputRequestList_Fuel_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Geometry_sequence& SimModel::
      SimGroup_OutputRequestList_Geometry () const
      {
        return this->SimGroup_OutputRequestList_Geometry_;
      }

      SimModel::SimGroup_OutputRequestList_Geometry_sequence& SimModel::
      SimGroup_OutputRequestList_Geometry ()
      {
        return this->SimGroup_OutputRequestList_Geometry_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Geometry (const SimGroup_OutputRequestList_Geometry_sequence& s)
      {
        this->SimGroup_OutputRequestList_Geometry_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Meters_sequence& SimModel::
      SimGroup_OutputRequestList_Meters () const
      {
        return this->SimGroup_OutputRequestList_Meters_;
      }

      SimModel::SimGroup_OutputRequestList_Meters_sequence& SimModel::
      SimGroup_OutputRequestList_Meters ()
      {
        return this->SimGroup_OutputRequestList_Meters_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Meters (const SimGroup_OutputRequestList_Meters_sequence& s)
      {
        this->SimGroup_OutputRequestList_Meters_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Reports_sequence& SimModel::
      SimGroup_OutputRequestList_Reports () const
      {
        return this->SimGroup_OutputRequestList_Reports_;
      }

      SimModel::SimGroup_OutputRequestList_Reports_sequence& SimModel::
      SimGroup_OutputRequestList_Reports ()
      {
        return this->SimGroup_OutputRequestList_Reports_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Reports (const SimGroup_OutputRequestList_Reports_sequence& s)
      {
        this->SimGroup_OutputRequestList_Reports_ = s;
      }

      const SimModel::SimGroup_OutputRequestList_Variables_sequence& SimModel::
      SimGroup_OutputRequestList_Variables () const
      {
        return this->SimGroup_OutputRequestList_Variables_;
      }

      SimModel::SimGroup_OutputRequestList_Variables_sequence& SimModel::
      SimGroup_OutputRequestList_Variables ()
      {
        return this->SimGroup_OutputRequestList_Variables_;
      }

      void SimModel::
      SimGroup_OutputRequestList_Variables (const SimGroup_OutputRequestList_Variables_sequence& s)
      {
        this->SimGroup_OutputRequestList_Variables_ = s;
      }

      const SimModel::SimGroup_Refrigeration_ChillerSet_sequence& SimModel::
      SimGroup_Refrigeration_ChillerSet () const
      {
        return this->SimGroup_Refrigeration_ChillerSet_;
      }

      SimModel::SimGroup_Refrigeration_ChillerSet_sequence& SimModel::
      SimGroup_Refrigeration_ChillerSet ()
      {
        return this->SimGroup_Refrigeration_ChillerSet_;
      }

      void SimModel::
      SimGroup_Refrigeration_ChillerSet (const SimGroup_Refrigeration_ChillerSet_sequence& s)
      {
        this->SimGroup_Refrigeration_ChillerSet_ = s;
      }

      const SimModel::SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_sequence& SimModel::
      SimGroup_SchemeList_AirLoopAvailabilityMgrScheme () const
      {
        return this->SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_;
      }

      SimModel::SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_sequence& SimModel::
      SimGroup_SchemeList_AirLoopAvailabilityMgrScheme ()
      {
        return this->SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_AirLoopAvailabilityMgrScheme (const SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_sequence& s)
      {
        this->SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_AirTempControlScheme_sequence& SimModel::
      SimGroup_SchemeList_AirTempControlScheme () const
      {
        return this->SimGroup_SchemeList_AirTempControlScheme_;
      }

      SimModel::SimGroup_SchemeList_AirTempControlScheme_sequence& SimModel::
      SimGroup_SchemeList_AirTempControlScheme ()
      {
        return this->SimGroup_SchemeList_AirTempControlScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_AirTempControlScheme (const SimGroup_SchemeList_AirTempControlScheme_sequence& s)
      {
        this->SimGroup_SchemeList_AirTempControlScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_CondenserOperatingScheme_sequence& SimModel::
      SimGroup_SchemeList_CondenserOperatingScheme () const
      {
        return this->SimGroup_SchemeList_CondenserOperatingScheme_;
      }

      SimModel::SimGroup_SchemeList_CondenserOperatingScheme_sequence& SimModel::
      SimGroup_SchemeList_CondenserOperatingScheme ()
      {
        return this->SimGroup_SchemeList_CondenserOperatingScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_CondenserOperatingScheme (const SimGroup_SchemeList_CondenserOperatingScheme_sequence& s)
      {
        this->SimGroup_SchemeList_CondenserOperatingScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_DemandManagerScheme_sequence& SimModel::
      SimGroup_SchemeList_DemandManagerScheme () const
      {
        return this->SimGroup_SchemeList_DemandManagerScheme_;
      }

      SimModel::SimGroup_SchemeList_DemandManagerScheme_sequence& SimModel::
      SimGroup_SchemeList_DemandManagerScheme ()
      {
        return this->SimGroup_SchemeList_DemandManagerScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_DemandManagerScheme (const SimGroup_SchemeList_DemandManagerScheme_sequence& s)
      {
        this->SimGroup_SchemeList_DemandManagerScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_MultiZoneHumidityScheme_sequence& SimModel::
      SimGroup_SchemeList_MultiZoneHumidityScheme () const
      {
        return this->SimGroup_SchemeList_MultiZoneHumidityScheme_;
      }

      SimModel::SimGroup_SchemeList_MultiZoneHumidityScheme_sequence& SimModel::
      SimGroup_SchemeList_MultiZoneHumidityScheme ()
      {
        return this->SimGroup_SchemeList_MultiZoneHumidityScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_MultiZoneHumidityScheme (const SimGroup_SchemeList_MultiZoneHumidityScheme_sequence& s)
      {
        this->SimGroup_SchemeList_MultiZoneHumidityScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_sequence& SimModel::
      SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme () const
      {
        return this->SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_;
      }

      SimModel::SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_sequence& SimModel::
      SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme ()
      {
        return this->SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme (const SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_sequence& s)
      {
        this->SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_PlantOperatingScheme_sequence& SimModel::
      SimGroup_SchemeList_PlantOperatingScheme () const
      {
        return this->SimGroup_SchemeList_PlantOperatingScheme_;
      }

      SimModel::SimGroup_SchemeList_PlantOperatingScheme_sequence& SimModel::
      SimGroup_SchemeList_PlantOperatingScheme ()
      {
        return this->SimGroup_SchemeList_PlantOperatingScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_PlantOperatingScheme (const SimGroup_SchemeList_PlantOperatingScheme_sequence& s)
      {
        this->SimGroup_SchemeList_PlantOperatingScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_SingleZoneHumidityScheme_sequence& SimModel::
      SimGroup_SchemeList_SingleZoneHumidityScheme () const
      {
        return this->SimGroup_SchemeList_SingleZoneHumidityScheme_;
      }

      SimModel::SimGroup_SchemeList_SingleZoneHumidityScheme_sequence& SimModel::
      SimGroup_SchemeList_SingleZoneHumidityScheme ()
      {
        return this->SimGroup_SchemeList_SingleZoneHumidityScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_SingleZoneHumidityScheme (const SimGroup_SchemeList_SingleZoneHumidityScheme_sequence& s)
      {
        this->SimGroup_SchemeList_SingleZoneHumidityScheme_ = s;
      }

      const SimModel::SimGroup_SchemeList_WaterTempControlScheme_sequence& SimModel::
      SimGroup_SchemeList_WaterTempControlScheme () const
      {
        return this->SimGroup_SchemeList_WaterTempControlScheme_;
      }

      SimModel::SimGroup_SchemeList_WaterTempControlScheme_sequence& SimModel::
      SimGroup_SchemeList_WaterTempControlScheme ()
      {
        return this->SimGroup_SchemeList_WaterTempControlScheme_;
      }

      void SimModel::
      SimGroup_SchemeList_WaterTempControlScheme (const SimGroup_SchemeList_WaterTempControlScheme_sequence& s)
      {
        this->SimGroup_SchemeList_WaterTempControlScheme_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_Daylighting_sequence& SimModel::
      SimGroup_SpatialZoneGroup_Daylighting () const
      {
        return this->SimGroup_SpatialZoneGroup_Daylighting_;
      }

      SimModel::SimGroup_SpatialZoneGroup_Daylighting_sequence& SimModel::
      SimGroup_SpatialZoneGroup_Daylighting ()
      {
        return this->SimGroup_SpatialZoneGroup_Daylighting_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_Daylighting (const SimGroup_SpatialZoneGroup_Daylighting_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_Daylighting_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_Lighting_sequence& SimModel::
      SimGroup_SpatialZoneGroup_Lighting () const
      {
        return this->SimGroup_SpatialZoneGroup_Lighting_;
      }

      SimModel::SimGroup_SpatialZoneGroup_Lighting_sequence& SimModel::
      SimGroup_SpatialZoneGroup_Lighting ()
      {
        return this->SimGroup_SpatialZoneGroup_Lighting_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_Lighting (const SimGroup_SpatialZoneGroup_Lighting_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_Lighting_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_NaturalVentilation_sequence& SimModel::
      SimGroup_SpatialZoneGroup_NaturalVentilation () const
      {
        return this->SimGroup_SpatialZoneGroup_NaturalVentilation_;
      }

      SimModel::SimGroup_SpatialZoneGroup_NaturalVentilation_sequence& SimModel::
      SimGroup_SpatialZoneGroup_NaturalVentilation ()
      {
        return this->SimGroup_SpatialZoneGroup_NaturalVentilation_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_NaturalVentilation (const SimGroup_SpatialZoneGroup_NaturalVentilation_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_NaturalVentilation_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_PlenumZoneGroup_sequence& SimModel::
      SimGroup_SpatialZoneGroup_PlenumZoneGroup () const
      {
        return this->SimGroup_SpatialZoneGroup_PlenumZoneGroup_;
      }

      SimModel::SimGroup_SpatialZoneGroup_PlenumZoneGroup_sequence& SimModel::
      SimGroup_SpatialZoneGroup_PlenumZoneGroup ()
      {
        return this->SimGroup_SpatialZoneGroup_PlenumZoneGroup_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_PlenumZoneGroup (const SimGroup_SpatialZoneGroup_PlenumZoneGroup_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_PlenumZoneGroup_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_ServiceHotWater_sequence& SimModel::
      SimGroup_SpatialZoneGroup_ServiceHotWater () const
      {
        return this->SimGroup_SpatialZoneGroup_ServiceHotWater_;
      }

      SimModel::SimGroup_SpatialZoneGroup_ServiceHotWater_sequence& SimModel::
      SimGroup_SpatialZoneGroup_ServiceHotWater ()
      {
        return this->SimGroup_SpatialZoneGroup_ServiceHotWater_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_ServiceHotWater (const SimGroup_SpatialZoneGroup_ServiceHotWater_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_ServiceHotWater_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_ZoneGroup_sequence& SimModel::
      SimGroup_SpatialZoneGroup_ZoneGroup () const
      {
        return this->SimGroup_SpatialZoneGroup_ZoneGroup_;
      }

      SimModel::SimGroup_SpatialZoneGroup_ZoneGroup_sequence& SimModel::
      SimGroup_SpatialZoneGroup_ZoneGroup ()
      {
        return this->SimGroup_SpatialZoneGroup_ZoneGroup_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_ZoneGroup (const SimGroup_SpatialZoneGroup_ZoneGroup_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_ZoneGroup_ = s;
      }

      const SimModel::SimGroup_SpatialZoneGroup_ZoneHvacGroup_sequence& SimModel::
      SimGroup_SpatialZoneGroup_ZoneHvacGroup () const
      {
        return this->SimGroup_SpatialZoneGroup_ZoneHvacGroup_;
      }

      SimModel::SimGroup_SpatialZoneGroup_ZoneHvacGroup_sequence& SimModel::
      SimGroup_SpatialZoneGroup_ZoneHvacGroup ()
      {
        return this->SimGroup_SpatialZoneGroup_ZoneHvacGroup_;
      }

      void SimModel::
      SimGroup_SpatialZoneGroup_ZoneHvacGroup (const SimGroup_SpatialZoneGroup_ZoneHvacGroup_sequence& s)
      {
        this->SimGroup_SpatialZoneGroup_ZoneHvacGroup_ = s;
      }

      const SimModel::SimGroup_SurfaceGroup_Default_sequence& SimModel::
      SimGroup_SurfaceGroup_Default () const
      {
        return this->SimGroup_SurfaceGroup_Default_;
      }

      SimModel::SimGroup_SurfaceGroup_Default_sequence& SimModel::
      SimGroup_SurfaceGroup_Default ()
      {
        return this->SimGroup_SurfaceGroup_Default_;
      }

      void SimModel::
      SimGroup_SurfaceGroup_Default (const SimGroup_SurfaceGroup_Default_sequence& s)
      {
        this->SimGroup_SurfaceGroup_Default_ = s;
      }

      const SimModel::SimGroup_SurfaceGroup_LowTempRadiant_sequence& SimModel::
      SimGroup_SurfaceGroup_LowTempRadiant () const
      {
        return this->SimGroup_SurfaceGroup_LowTempRadiant_;
      }

      SimModel::SimGroup_SurfaceGroup_LowTempRadiant_sequence& SimModel::
      SimGroup_SurfaceGroup_LowTempRadiant ()
      {
        return this->SimGroup_SurfaceGroup_LowTempRadiant_;
      }

      void SimModel::
      SimGroup_SurfaceGroup_LowTempRadiant (const SimGroup_SurfaceGroup_LowTempRadiant_sequence& s)
      {
        this->SimGroup_SurfaceGroup_LowTempRadiant_ = s;
      }

      const SimModel::SimGroup_SurfaceGroup_VentilatedSlab_sequence& SimModel::
      SimGroup_SurfaceGroup_VentilatedSlab () const
      {
        return this->SimGroup_SurfaceGroup_VentilatedSlab_;
      }

      SimModel::SimGroup_SurfaceGroup_VentilatedSlab_sequence& SimModel::
      SimGroup_SurfaceGroup_VentilatedSlab ()
      {
        return this->SimGroup_SurfaceGroup_VentilatedSlab_;
      }

      void SimModel::
      SimGroup_SurfaceGroup_VentilatedSlab (const SimGroup_SurfaceGroup_VentilatedSlab_sequence& s)
      {
        this->SimGroup_SurfaceGroup_VentilatedSlab_ = s;
      }

      const SimModel::SimGroup_TemplateOutputRequestList_Daylighting_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Daylighting () const
      {
        return this->SimGroup_TemplateOutputRequestList_Daylighting_;
      }

      SimModel::SimGroup_TemplateOutputRequestList_Daylighting_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Daylighting ()
      {
        return this->SimGroup_TemplateOutputRequestList_Daylighting_;
      }

      void SimModel::
      SimGroup_TemplateOutputRequestList_Daylighting (const SimGroup_TemplateOutputRequestList_Daylighting_sequence& s)
      {
        this->SimGroup_TemplateOutputRequestList_Daylighting_ = s;
      }

      const SimModel::SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_FuelAndEnvironmental () const
      {
        return this->SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_;
      }

      SimModel::SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_FuelAndEnvironmental ()
      {
        return this->SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_;
      }

      void SimModel::
      SimGroup_TemplateOutputRequestList_FuelAndEnvironmental (const SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_sequence& s)
      {
        this->SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_ = s;
      }

      const SimModel::SimGroup_TemplateOutputRequestList_Geometry_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Geometry () const
      {
        return this->SimGroup_TemplateOutputRequestList_Geometry_;
      }

      SimModel::SimGroup_TemplateOutputRequestList_Geometry_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Geometry ()
      {
        return this->SimGroup_TemplateOutputRequestList_Geometry_;
      }

      void SimModel::
      SimGroup_TemplateOutputRequestList_Geometry (const SimGroup_TemplateOutputRequestList_Geometry_sequence& s)
      {
        this->SimGroup_TemplateOutputRequestList_Geometry_ = s;
      }

      const SimModel::SimGroup_TemplateOutputRequestList_Meters_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Meters () const
      {
        return this->SimGroup_TemplateOutputRequestList_Meters_;
      }

      SimModel::SimGroup_TemplateOutputRequestList_Meters_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Meters ()
      {
        return this->SimGroup_TemplateOutputRequestList_Meters_;
      }

      void SimModel::
      SimGroup_TemplateOutputRequestList_Meters (const SimGroup_TemplateOutputRequestList_Meters_sequence& s)
      {
        this->SimGroup_TemplateOutputRequestList_Meters_ = s;
      }

      const SimModel::SimGroup_TemplateOutputRequestList_Reports_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Reports () const
      {
        return this->SimGroup_TemplateOutputRequestList_Reports_;
      }

      SimModel::SimGroup_TemplateOutputRequestList_Reports_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Reports ()
      {
        return this->SimGroup_TemplateOutputRequestList_Reports_;
      }

      void SimModel::
      SimGroup_TemplateOutputRequestList_Reports (const SimGroup_TemplateOutputRequestList_Reports_sequence& s)
      {
        this->SimGroup_TemplateOutputRequestList_Reports_ = s;
      }

      const SimModel::SimGroup_TemplateOutputRequestList_Variables_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Variables () const
      {
        return this->SimGroup_TemplateOutputRequestList_Variables_;
      }

      SimModel::SimGroup_TemplateOutputRequestList_Variables_sequence& SimModel::
      SimGroup_TemplateOutputRequestList_Variables ()
      {
        return this->SimGroup_TemplateOutputRequestList_Variables_;
      }

      void SimModel::
      SimGroup_TemplateOutputRequestList_Variables (const SimGroup_TemplateOutputRequestList_Variables_sequence& s)
      {
        this->SimGroup_TemplateOutputRequestList_Variables_ = s;
      }

      const SimModel::SimGroup_VrfList_VrfTerminals_sequence& SimModel::
      SimGroup_VrfList_VrfTerminals () const
      {
        return this->SimGroup_VrfList_VrfTerminals_;
      }

      SimModel::SimGroup_VrfList_VrfTerminals_sequence& SimModel::
      SimGroup_VrfList_VrfTerminals ()
      {
        return this->SimGroup_VrfList_VrfTerminals_;
      }

      void SimModel::
      SimGroup_VrfList_VrfTerminals (const SimGroup_VrfList_VrfTerminals_sequence& s)
      {
        this->SimGroup_VrfList_VrfTerminals_ = s;
      }

      const SimModel::SimHeatTransAlgProps_HeatTransferAlgProps_Default_sequence& SimModel::
      SimHeatTransAlgProps_HeatTransferAlgProps_Default () const
      {
        return this->SimHeatTransAlgProps_HeatTransferAlgProps_Default_;
      }

      SimModel::SimHeatTransAlgProps_HeatTransferAlgProps_Default_sequence& SimModel::
      SimHeatTransAlgProps_HeatTransferAlgProps_Default ()
      {
        return this->SimHeatTransAlgProps_HeatTransferAlgProps_Default_;
      }

      void SimModel::
      SimHeatTransAlgProps_HeatTransferAlgProps_Default (const SimHeatTransAlgProps_HeatTransferAlgProps_Default_sequence& s)
      {
        this->SimHeatTransAlgProps_HeatTransferAlgProps_Default_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_Default_Default_sequence& SimModel::
      SimInfiltrationOrVentilation_Default_Default () const
      {
        return this->SimInfiltrationOrVentilation_Default_Default_;
      }

      SimModel::SimInfiltrationOrVentilation_Default_Default_sequence& SimModel::
      SimInfiltrationOrVentilation_Default_Default ()
      {
        return this->SimInfiltrationOrVentilation_Default_Default_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_Default_Default (const SimInfiltrationOrVentilation_Default_Default_sequence& s)
      {
        this->SimInfiltrationOrVentilation_Default_Default_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation (const SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation (const SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation (const SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior (const SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior (const SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UserDefined () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UserDefined ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirSettings_UserDefined (const SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient (const SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_Default_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_Default () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_Default_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_Default_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_Default ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_Default_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_Default (const SimInfiltrationOrVentilation_RoomAirTempPattern_Default_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirTempPattern_Default_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight (const SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping (const SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient (const SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined () const
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_;
      }

      SimModel::SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_sequence& SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined ()
      {
        return this->SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined (const SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_sequence& s)
      {
        this->SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate () const
      {
        return this->SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_;
      }

      SimModel::SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate ()
      {
        return this->SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate (const SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_sequence& s)
      {
        this->SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea () const
      {
        return this->SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_;
      }

      SimModel::SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea ()
      {
        return this->SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea (const SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_sequence& s)
      {
        this->SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient () const
      {
        return this->SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_;
      }

      SimModel::SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient ()
      {
        return this->SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient (const SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_sequence& s)
      {
        this->SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate () const
      {
        return this->SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_;
      }

      SimModel::SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate ()
      {
        return this->SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate (const SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_sequence& s)
      {
        this->SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_ = s;
      }

      const SimModel::SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea () const
      {
        return this->SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_;
      }

      SimModel::SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_sequence& SimModel::
      SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea ()
      {
        return this->SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_;
      }

      void SimModel::
      SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea (const SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_sequence& s)
      {
        this->SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_ = s;
      }

      const SimModel::SimInternalLoad_ComfortViewFactorAngles_Default_sequence& SimModel::
      SimInternalLoad_ComfortViewFactorAngles_Default () const
      {
        return this->SimInternalLoad_ComfortViewFactorAngles_Default_;
      }

      SimModel::SimInternalLoad_ComfortViewFactorAngles_Default_sequence& SimModel::
      SimInternalLoad_ComfortViewFactorAngles_Default ()
      {
        return this->SimInternalLoad_ComfortViewFactorAngles_Default_;
      }

      void SimModel::
      SimInternalLoad_ComfortViewFactorAngles_Default (const SimInternalLoad_ComfortViewFactorAngles_Default_sequence& s)
      {
        this->SimInternalLoad_ComfortViewFactorAngles_Default_ = s;
      }

      const SimModel::SimInternalLoad_Default_Default_sequence& SimModel::
      SimInternalLoad_Default_Default () const
      {
        return this->SimInternalLoad_Default_Default_;
      }

      SimModel::SimInternalLoad_Default_Default_sequence& SimModel::
      SimInternalLoad_Default_Default ()
      {
        return this->SimInternalLoad_Default_Default_;
      }

      void SimModel::
      SimInternalLoad_Default_Default (const SimInternalLoad_Default_Default_sequence& s)
      {
        this->SimInternalLoad_Default_Default_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Electric_sequence& SimModel::
      SimInternalLoad_Equipment_Electric () const
      {
        return this->SimInternalLoad_Equipment_Electric_;
      }

      SimModel::SimInternalLoad_Equipment_Electric_sequence& SimModel::
      SimInternalLoad_Equipment_Electric ()
      {
        return this->SimInternalLoad_Equipment_Electric_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Electric (const SimInternalLoad_Equipment_Electric_sequence& s)
      {
        this->SimInternalLoad_Equipment_Electric_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Electric_Elevators_sequence& SimModel::
      SimInternalLoad_Equipment_Electric_Elevators () const
      {
        return this->SimInternalLoad_Equipment_Electric_Elevators_;
      }

      SimModel::SimInternalLoad_Equipment_Electric_Elevators_sequence& SimModel::
      SimInternalLoad_Equipment_Electric_Elevators ()
      {
        return this->SimInternalLoad_Equipment_Electric_Elevators_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Electric_Elevators (const SimInternalLoad_Equipment_Electric_Elevators_sequence& s)
      {
        this->SimInternalLoad_Equipment_Electric_Elevators_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Electric_Escalators_sequence& SimModel::
      SimInternalLoad_Equipment_Electric_Escalators () const
      {
        return this->SimInternalLoad_Equipment_Electric_Escalators_;
      }

      SimModel::SimInternalLoad_Equipment_Electric_Escalators_sequence& SimModel::
      SimInternalLoad_Equipment_Electric_Escalators ()
      {
        return this->SimInternalLoad_Equipment_Electric_Escalators_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Electric_Escalators (const SimInternalLoad_Equipment_Electric_Escalators_sequence& s)
      {
        this->SimInternalLoad_Equipment_Electric_Escalators_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Electric_Process_sequence& SimModel::
      SimInternalLoad_Equipment_Electric_Process () const
      {
        return this->SimInternalLoad_Equipment_Electric_Process_;
      }

      SimModel::SimInternalLoad_Equipment_Electric_Process_sequence& SimModel::
      SimInternalLoad_Equipment_Electric_Process ()
      {
        return this->SimInternalLoad_Equipment_Electric_Process_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Electric_Process (const SimInternalLoad_Equipment_Electric_Process_sequence& s)
      {
        this->SimInternalLoad_Equipment_Electric_Process_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Gas_sequence& SimModel::
      SimInternalLoad_Equipment_Gas () const
      {
        return this->SimInternalLoad_Equipment_Gas_;
      }

      SimModel::SimInternalLoad_Equipment_Gas_sequence& SimModel::
      SimInternalLoad_Equipment_Gas ()
      {
        return this->SimInternalLoad_Equipment_Gas_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Gas (const SimInternalLoad_Equipment_Gas_sequence& s)
      {
        this->SimInternalLoad_Equipment_Gas_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Gas_Process_sequence& SimModel::
      SimInternalLoad_Equipment_Gas_Process () const
      {
        return this->SimInternalLoad_Equipment_Gas_Process_;
      }

      SimModel::SimInternalLoad_Equipment_Gas_Process_sequence& SimModel::
      SimInternalLoad_Equipment_Gas_Process ()
      {
        return this->SimInternalLoad_Equipment_Gas_Process_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Gas_Process (const SimInternalLoad_Equipment_Gas_Process_sequence& s)
      {
        this->SimInternalLoad_Equipment_Gas_Process_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_HotWater_sequence& SimModel::
      SimInternalLoad_Equipment_HotWater () const
      {
        return this->SimInternalLoad_Equipment_HotWater_;
      }

      SimModel::SimInternalLoad_Equipment_HotWater_sequence& SimModel::
      SimInternalLoad_Equipment_HotWater ()
      {
        return this->SimInternalLoad_Equipment_HotWater_;
      }

      void SimModel::
      SimInternalLoad_Equipment_HotWater (const SimInternalLoad_Equipment_HotWater_sequence& s)
      {
        this->SimInternalLoad_Equipment_HotWater_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Other_sequence& SimModel::
      SimInternalLoad_Equipment_Other () const
      {
        return this->SimInternalLoad_Equipment_Other_;
      }

      SimModel::SimInternalLoad_Equipment_Other_sequence& SimModel::
      SimInternalLoad_Equipment_Other ()
      {
        return this->SimInternalLoad_Equipment_Other_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Other (const SimInternalLoad_Equipment_Other_sequence& s)
      {
        this->SimInternalLoad_Equipment_Other_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_Steam_sequence& SimModel::
      SimInternalLoad_Equipment_Steam () const
      {
        return this->SimInternalLoad_Equipment_Steam_;
      }

      SimModel::SimInternalLoad_Equipment_Steam_sequence& SimModel::
      SimInternalLoad_Equipment_Steam ()
      {
        return this->SimInternalLoad_Equipment_Steam_;
      }

      void SimModel::
      SimInternalLoad_Equipment_Steam (const SimInternalLoad_Equipment_Steam_sequence& s)
      {
        this->SimInternalLoad_Equipment_Steam_ = s;
      }

      const SimModel::SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_sequence& SimModel::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled () const
      {
        return this->SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_;
      }

      SimModel::SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_sequence& SimModel::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled ()
      {
        return this->SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_;
      }

      void SimModel::
      SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled (const SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_sequence& s)
      {
        this->SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_ = s;
      }

      const SimModel::SimInternalLoad_Lights_Default_sequence& SimModel::
      SimInternalLoad_Lights_Default () const
      {
        return this->SimInternalLoad_Lights_Default_;
      }

      SimModel::SimInternalLoad_Lights_Default_sequence& SimModel::
      SimInternalLoad_Lights_Default ()
      {
        return this->SimInternalLoad_Lights_Default_;
      }

      void SimModel::
      SimInternalLoad_Lights_Default (const SimInternalLoad_Lights_Default_sequence& s)
      {
        this->SimInternalLoad_Lights_Default_ = s;
      }

      const SimModel::SimInternalLoad_People_Default_sequence& SimModel::
      SimInternalLoad_People_Default () const
      {
        return this->SimInternalLoad_People_Default_;
      }

      SimModel::SimInternalLoad_People_Default_sequence& SimModel::
      SimInternalLoad_People_Default ()
      {
        return this->SimInternalLoad_People_Default_;
      }

      void SimModel::
      SimInternalLoad_People_Default (const SimInternalLoad_People_Default_sequence& s)
      {
        this->SimInternalLoad_People_Default_ = s;
      }

      const SimModel::SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_sequence& SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion () const
      {
        return this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_;
      }

      SimModel::SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_sequence& SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion ()
      {
        return this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_;
      }

      void SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion (const SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_sequence& s)
      {
        this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_ = s;
      }

      const SimModel::SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_sequence& SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink () const
      {
        return this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_;
      }

      SimModel::SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_sequence& SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink ()
      {
        return this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_;
      }

      void SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink (const SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_sequence& s)
      {
        this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_ = s;
      }

      const SimModel::SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_sequence& SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven () const
      {
        return this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_;
      }

      SimModel::SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_sequence& SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven ()
      {
        return this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_;
      }

      void SimModel::
      SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven (const SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_sequence& s)
      {
        this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_ = s;
      }

      const SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide () const
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_;
      }

      SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide ()
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_;
      }

      void SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide (const SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_sequence& s)
      {
        this->SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_ = s;
      }

      const SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant () const
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_;
      }

      SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant ()
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_;
      }

      void SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant (const SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_sequence& s)
      {
        this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_ = s;
      }

      const SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel () const
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_;
      }

      SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel ()
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_;
      }

      void SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel (const SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_sequence& s)
      {
        this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_ = s;
      }

      const SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource () const
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_;
      }

      SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource ()
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_;
      }

      void SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource (const SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_sequence& s)
      {
        this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_ = s;
      }

      const SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink () const
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_;
      }

      SimModel::SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_sequence& SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink ()
      {
        return this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_;
      }

      void SimModel::
      SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink (const SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_sequence& s)
      {
        this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_ = s;
      }

      const SimModel::SimIrregularTimeSeries_Irregular_Default_sequence& SimModel::
      SimIrregularTimeSeries_Irregular_Default () const
      {
        return this->SimIrregularTimeSeries_Irregular_Default_;
      }

      SimModel::SimIrregularTimeSeries_Irregular_Default_sequence& SimModel::
      SimIrregularTimeSeries_Irregular_Default ()
      {
        return this->SimIrregularTimeSeries_Irregular_Default_;
      }

      void SimModel::
      SimIrregularTimeSeries_Irregular_Default (const SimIrregularTimeSeries_Irregular_Default_sequence& s)
      {
        this->SimIrregularTimeSeries_Irregular_Default_ = s;
      }

      const SimModel::SimIrregularTimeSeriesValue_TimeSeries_Irregular_sequence& SimModel::
      SimIrregularTimeSeriesValue_TimeSeries_Irregular () const
      {
        return this->SimIrregularTimeSeriesValue_TimeSeries_Irregular_;
      }

      SimModel::SimIrregularTimeSeriesValue_TimeSeries_Irregular_sequence& SimModel::
      SimIrregularTimeSeriesValue_TimeSeries_Irregular ()
      {
        return this->SimIrregularTimeSeriesValue_TimeSeries_Irregular_;
      }

      void SimModel::
      SimIrregularTimeSeriesValue_TimeSeries_Irregular (const SimIrregularTimeSeriesValue_TimeSeries_Irregular_sequence& s)
      {
        this->SimIrregularTimeSeriesValue_TimeSeries_Irregular_ = s;
      }

      const SimModel::SimLightingFixtureType_LightingFixture_Default_sequence& SimModel::
      SimLightingFixtureType_LightingFixture_Default () const
      {
        return this->SimLightingFixtureType_LightingFixture_Default_;
      }

      SimModel::SimLightingFixtureType_LightingFixture_Default_sequence& SimModel::
      SimLightingFixtureType_LightingFixture_Default ()
      {
        return this->SimLightingFixtureType_LightingFixture_Default_;
      }

      void SimModel::
      SimLightingFixtureType_LightingFixture_Default (const SimLightingFixtureType_LightingFixture_Default_sequence& s)
      {
        this->SimLightingFixtureType_LightingFixture_Default_ = s;
      }

      const SimModel::SimList_ConnectorList_AirConnections_sequence& SimModel::
      SimList_ConnectorList_AirConnections () const
      {
        return this->SimList_ConnectorList_AirConnections_;
      }

      SimModel::SimList_ConnectorList_AirConnections_sequence& SimModel::
      SimList_ConnectorList_AirConnections ()
      {
        return this->SimList_ConnectorList_AirConnections_;
      }

      void SimModel::
      SimList_ConnectorList_AirConnections (const SimList_ConnectorList_AirConnections_sequence& s)
      {
        this->SimList_ConnectorList_AirConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_ChilledWaterConnections_sequence& SimModel::
      SimList_ConnectorList_ChilledWaterConnections () const
      {
        return this->SimList_ConnectorList_ChilledWaterConnections_;
      }

      SimModel::SimList_ConnectorList_ChilledWaterConnections_sequence& SimModel::
      SimList_ConnectorList_ChilledWaterConnections ()
      {
        return this->SimList_ConnectorList_ChilledWaterConnections_;
      }

      void SimModel::
      SimList_ConnectorList_ChilledWaterConnections (const SimList_ConnectorList_ChilledWaterConnections_sequence& s)
      {
        this->SimList_ConnectorList_ChilledWaterConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_CondenserConnections_sequence& SimModel::
      SimList_ConnectorList_CondenserConnections () const
      {
        return this->SimList_ConnectorList_CondenserConnections_;
      }

      SimModel::SimList_ConnectorList_CondenserConnections_sequence& SimModel::
      SimList_ConnectorList_CondenserConnections ()
      {
        return this->SimList_ConnectorList_CondenserConnections_;
      }

      void SimModel::
      SimList_ConnectorList_CondenserConnections (const SimList_ConnectorList_CondenserConnections_sequence& s)
      {
        this->SimList_ConnectorList_CondenserConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_ControllerConnections_sequence& SimModel::
      SimList_ConnectorList_ControllerConnections () const
      {
        return this->SimList_ConnectorList_ControllerConnections_;
      }

      SimModel::SimList_ConnectorList_ControllerConnections_sequence& SimModel::
      SimList_ConnectorList_ControllerConnections ()
      {
        return this->SimList_ConnectorList_ControllerConnections_;
      }

      void SimModel::
      SimList_ConnectorList_ControllerConnections (const SimList_ConnectorList_ControllerConnections_sequence& s)
      {
        this->SimList_ConnectorList_ControllerConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_HotWaterConnections_sequence& SimModel::
      SimList_ConnectorList_HotWaterConnections () const
      {
        return this->SimList_ConnectorList_HotWaterConnections_;
      }

      SimModel::SimList_ConnectorList_HotWaterConnections_sequence& SimModel::
      SimList_ConnectorList_HotWaterConnections ()
      {
        return this->SimList_ConnectorList_HotWaterConnections_;
      }

      void SimModel::
      SimList_ConnectorList_HotWaterConnections (const SimList_ConnectorList_HotWaterConnections_sequence& s)
      {
        this->SimList_ConnectorList_HotWaterConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_ServiceHotWaterConnections_sequence& SimModel::
      SimList_ConnectorList_ServiceHotWaterConnections () const
      {
        return this->SimList_ConnectorList_ServiceHotWaterConnections_;
      }

      SimModel::SimList_ConnectorList_ServiceHotWaterConnections_sequence& SimModel::
      SimList_ConnectorList_ServiceHotWaterConnections ()
      {
        return this->SimList_ConnectorList_ServiceHotWaterConnections_;
      }

      void SimModel::
      SimList_ConnectorList_ServiceHotWaterConnections (const SimList_ConnectorList_ServiceHotWaterConnections_sequence& s)
      {
        this->SimList_ConnectorList_ServiceHotWaterConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_SimConnections_sequence& SimModel::
      SimList_ConnectorList_SimConnections () const
      {
        return this->SimList_ConnectorList_SimConnections_;
      }

      SimModel::SimList_ConnectorList_SimConnections_sequence& SimModel::
      SimList_ConnectorList_SimConnections ()
      {
        return this->SimList_ConnectorList_SimConnections_;
      }

      void SimModel::
      SimList_ConnectorList_SimConnections (const SimList_ConnectorList_SimConnections_sequence& s)
      {
        this->SimList_ConnectorList_SimConnections_ = s;
      }

      const SimModel::SimList_ConnectorList_SteamConnections_sequence& SimModel::
      SimList_ConnectorList_SteamConnections () const
      {
        return this->SimList_ConnectorList_SteamConnections_;
      }

      SimModel::SimList_ConnectorList_SteamConnections_sequence& SimModel::
      SimList_ConnectorList_SteamConnections ()
      {
        return this->SimList_ConnectorList_SteamConnections_;
      }

      void SimModel::
      SimList_ConnectorList_SteamConnections (const SimList_ConnectorList_SteamConnections_sequence& s)
      {
        this->SimList_ConnectorList_SteamConnections_ = s;
      }

      const SimModel::SimList_ControllerList_Default_sequence& SimModel::
      SimList_ControllerList_Default () const
      {
        return this->SimList_ControllerList_Default_;
      }

      SimModel::SimList_ControllerList_Default_sequence& SimModel::
      SimList_ControllerList_Default ()
      {
        return this->SimList_ControllerList_Default_;
      }

      void SimModel::
      SimList_ControllerList_Default (const SimList_ControllerList_Default_sequence& s)
      {
        this->SimList_ControllerList_Default_ = s;
      }

      const SimModel::SimList_DefaultList_Default_sequence& SimModel::
      SimList_DefaultList_Default () const
      {
        return this->SimList_DefaultList_Default_;
      }

      SimModel::SimList_DefaultList_Default_sequence& SimModel::
      SimList_DefaultList_Default ()
      {
        return this->SimList_DefaultList_Default_;
      }

      void SimModel::
      SimList_DefaultList_Default (const SimList_DefaultList_Default_sequence& s)
      {
        this->SimList_DefaultList_Default_ = s;
      }

      const SimModel::SimList_EquipmentList_CondenserEquipment_sequence& SimModel::
      SimList_EquipmentList_CondenserEquipment () const
      {
        return this->SimList_EquipmentList_CondenserEquipment_;
      }

      SimModel::SimList_EquipmentList_CondenserEquipment_sequence& SimModel::
      SimList_EquipmentList_CondenserEquipment ()
      {
        return this->SimList_EquipmentList_CondenserEquipment_;
      }

      void SimModel::
      SimList_EquipmentList_CondenserEquipment (const SimList_EquipmentList_CondenserEquipment_sequence& s)
      {
        this->SimList_EquipmentList_CondenserEquipment_ = s;
      }

      const SimModel::SimList_EquipmentList_ElectricalLoadCenter_sequence& SimModel::
      SimList_EquipmentList_ElectricalLoadCenter () const
      {
        return this->SimList_EquipmentList_ElectricalLoadCenter_;
      }

      SimModel::SimList_EquipmentList_ElectricalLoadCenter_sequence& SimModel::
      SimList_EquipmentList_ElectricalLoadCenter ()
      {
        return this->SimList_EquipmentList_ElectricalLoadCenter_;
      }

      void SimModel::
      SimList_EquipmentList_ElectricalLoadCenter (const SimList_EquipmentList_ElectricalLoadCenter_sequence& s)
      {
        this->SimList_EquipmentList_ElectricalLoadCenter_ = s;
      }

      const SimModel::SimList_EquipmentList_OutdoorAirSystem_sequence& SimModel::
      SimList_EquipmentList_OutdoorAirSystem () const
      {
        return this->SimList_EquipmentList_OutdoorAirSystem_;
      }

      SimModel::SimList_EquipmentList_OutdoorAirSystem_sequence& SimModel::
      SimList_EquipmentList_OutdoorAirSystem ()
      {
        return this->SimList_EquipmentList_OutdoorAirSystem_;
      }

      void SimModel::
      SimList_EquipmentList_OutdoorAirSystem (const SimList_EquipmentList_OutdoorAirSystem_sequence& s)
      {
        this->SimList_EquipmentList_OutdoorAirSystem_ = s;
      }

      const SimModel::SimList_EquipmentList_OutdoorAirUnit_sequence& SimModel::
      SimList_EquipmentList_OutdoorAirUnit () const
      {
        return this->SimList_EquipmentList_OutdoorAirUnit_;
      }

      SimModel::SimList_EquipmentList_OutdoorAirUnit_sequence& SimModel::
      SimList_EquipmentList_OutdoorAirUnit ()
      {
        return this->SimList_EquipmentList_OutdoorAirUnit_;
      }

      void SimModel::
      SimList_EquipmentList_OutdoorAirUnit (const SimList_EquipmentList_OutdoorAirUnit_sequence& s)
      {
        this->SimList_EquipmentList_OutdoorAirUnit_ = s;
      }

      const SimModel::SimList_EquipmentList_PlantEquipment_sequence& SimModel::
      SimList_EquipmentList_PlantEquipment () const
      {
        return this->SimList_EquipmentList_PlantEquipment_;
      }

      SimModel::SimList_EquipmentList_PlantEquipment_sequence& SimModel::
      SimList_EquipmentList_PlantEquipment ()
      {
        return this->SimList_EquipmentList_PlantEquipment_;
      }

      void SimModel::
      SimList_EquipmentList_PlantEquipment (const SimList_EquipmentList_PlantEquipment_sequence& s)
      {
        this->SimList_EquipmentList_PlantEquipment_ = s;
      }

      const SimModel::SimList_EquipmentList_RefrigerationCompressor_sequence& SimModel::
      SimList_EquipmentList_RefrigerationCompressor () const
      {
        return this->SimList_EquipmentList_RefrigerationCompressor_;
      }

      SimModel::SimList_EquipmentList_RefrigerationCompressor_sequence& SimModel::
      SimList_EquipmentList_RefrigerationCompressor ()
      {
        return this->SimList_EquipmentList_RefrigerationCompressor_;
      }

      void SimModel::
      SimList_EquipmentList_RefrigerationCompressor (const SimList_EquipmentList_RefrigerationCompressor_sequence& s)
      {
        this->SimList_EquipmentList_RefrigerationCompressor_ = s;
      }

      const SimModel::SimList_EquipmentList_RefrigerationEquipment_sequence& SimModel::
      SimList_EquipmentList_RefrigerationEquipment () const
      {
        return this->SimList_EquipmentList_RefrigerationEquipment_;
      }

      SimModel::SimList_EquipmentList_RefrigerationEquipment_sequence& SimModel::
      SimList_EquipmentList_RefrigerationEquipment ()
      {
        return this->SimList_EquipmentList_RefrigerationEquipment_;
      }

      void SimModel::
      SimList_EquipmentList_RefrigerationEquipment (const SimList_EquipmentList_RefrigerationEquipment_sequence& s)
      {
        this->SimList_EquipmentList_RefrigerationEquipment_ = s;
      }

      const SimModel::SimList_EquipmentList_RefrigerationLoadTransfer_sequence& SimModel::
      SimList_EquipmentList_RefrigerationLoadTransfer () const
      {
        return this->SimList_EquipmentList_RefrigerationLoadTransfer_;
      }

      SimModel::SimList_EquipmentList_RefrigerationLoadTransfer_sequence& SimModel::
      SimList_EquipmentList_RefrigerationLoadTransfer ()
      {
        return this->SimList_EquipmentList_RefrigerationLoadTransfer_;
      }

      void SimModel::
      SimList_EquipmentList_RefrigerationLoadTransfer (const SimList_EquipmentList_RefrigerationLoadTransfer_sequence& s)
      {
        this->SimList_EquipmentList_RefrigerationLoadTransfer_ = s;
      }

      const SimModel::SimList_EquipmentList_ServiceHotWater_sequence& SimModel::
      SimList_EquipmentList_ServiceHotWater () const
      {
        return this->SimList_EquipmentList_ServiceHotWater_;
      }

      SimModel::SimList_EquipmentList_ServiceHotWater_sequence& SimModel::
      SimList_EquipmentList_ServiceHotWater ()
      {
        return this->SimList_EquipmentList_ServiceHotWater_;
      }

      void SimModel::
      SimList_EquipmentList_ServiceHotWater (const SimList_EquipmentList_ServiceHotWater_sequence& s)
      {
        this->SimList_EquipmentList_ServiceHotWater_ = s;
      }

      const SimModel::SimList_EquipmentList_ZoneHvac_sequence& SimModel::
      SimList_EquipmentList_ZoneHvac () const
      {
        return this->SimList_EquipmentList_ZoneHvac_;
      }

      SimModel::SimList_EquipmentList_ZoneHvac_sequence& SimModel::
      SimList_EquipmentList_ZoneHvac ()
      {
        return this->SimList_EquipmentList_ZoneHvac_;
      }

      void SimModel::
      SimList_EquipmentList_ZoneHvac (const SimList_EquipmentList_ZoneHvac_sequence& s)
      {
        this->SimList_EquipmentList_ZoneHvac_ = s;
      }

      const SimModel::SimList_MaterialList_Default_sequence& SimModel::
      SimList_MaterialList_Default () const
      {
        return this->SimList_MaterialList_Default_;
      }

      SimModel::SimList_MaterialList_Default_sequence& SimModel::
      SimList_MaterialList_Default ()
      {
        return this->SimList_MaterialList_Default_;
      }

      void SimModel::
      SimList_MaterialList_Default (const SimList_MaterialList_Default_sequence& s)
      {
        this->SimList_MaterialList_Default_ = s;
      }

      const SimModel::SimList_NodeList_Default_sequence& SimModel::
      SimList_NodeList_Default () const
      {
        return this->SimList_NodeList_Default_;
      }

      SimModel::SimList_NodeList_Default_sequence& SimModel::
      SimList_NodeList_Default ()
      {
        return this->SimList_NodeList_Default_;
      }

      void SimModel::
      SimList_NodeList_Default (const SimList_NodeList_Default_sequence& s)
      {
        this->SimList_NodeList_Default_ = s;
      }

      const SimModel::SimList_NodeList_OutdoorAir_sequence& SimModel::
      SimList_NodeList_OutdoorAir () const
      {
        return this->SimList_NodeList_OutdoorAir_;
      }

      SimModel::SimList_NodeList_OutdoorAir_sequence& SimModel::
      SimList_NodeList_OutdoorAir ()
      {
        return this->SimList_NodeList_OutdoorAir_;
      }

      void SimModel::
      SimList_NodeList_OutdoorAir (const SimList_NodeList_OutdoorAir_sequence& s)
      {
        this->SimList_NodeList_OutdoorAir_ = s;
      }

      const SimModel::SimList_OutputRequestList_Daylighting_sequence& SimModel::
      SimList_OutputRequestList_Daylighting () const
      {
        return this->SimList_OutputRequestList_Daylighting_;
      }

      SimModel::SimList_OutputRequestList_Daylighting_sequence& SimModel::
      SimList_OutputRequestList_Daylighting ()
      {
        return this->SimList_OutputRequestList_Daylighting_;
      }

      void SimModel::
      SimList_OutputRequestList_Daylighting (const SimList_OutputRequestList_Daylighting_sequence& s)
      {
        this->SimList_OutputRequestList_Daylighting_ = s;
      }

      const SimModel::SimList_OutputRequestList_Environmental_sequence& SimModel::
      SimList_OutputRequestList_Environmental () const
      {
        return this->SimList_OutputRequestList_Environmental_;
      }

      SimModel::SimList_OutputRequestList_Environmental_sequence& SimModel::
      SimList_OutputRequestList_Environmental ()
      {
        return this->SimList_OutputRequestList_Environmental_;
      }

      void SimModel::
      SimList_OutputRequestList_Environmental (const SimList_OutputRequestList_Environmental_sequence& s)
      {
        this->SimList_OutputRequestList_Environmental_ = s;
      }

      const SimModel::SimList_OutputRequestList_Fuel_sequence& SimModel::
      SimList_OutputRequestList_Fuel () const
      {
        return this->SimList_OutputRequestList_Fuel_;
      }

      SimModel::SimList_OutputRequestList_Fuel_sequence& SimModel::
      SimList_OutputRequestList_Fuel ()
      {
        return this->SimList_OutputRequestList_Fuel_;
      }

      void SimModel::
      SimList_OutputRequestList_Fuel (const SimList_OutputRequestList_Fuel_sequence& s)
      {
        this->SimList_OutputRequestList_Fuel_ = s;
      }

      const SimModel::SimList_OutputRequestList_Geometry_sequence& SimModel::
      SimList_OutputRequestList_Geometry () const
      {
        return this->SimList_OutputRequestList_Geometry_;
      }

      SimModel::SimList_OutputRequestList_Geometry_sequence& SimModel::
      SimList_OutputRequestList_Geometry ()
      {
        return this->SimList_OutputRequestList_Geometry_;
      }

      void SimModel::
      SimList_OutputRequestList_Geometry (const SimList_OutputRequestList_Geometry_sequence& s)
      {
        this->SimList_OutputRequestList_Geometry_ = s;
      }

      const SimModel::SimList_OutputRequestList_Meters_sequence& SimModel::
      SimList_OutputRequestList_Meters () const
      {
        return this->SimList_OutputRequestList_Meters_;
      }

      SimModel::SimList_OutputRequestList_Meters_sequence& SimModel::
      SimList_OutputRequestList_Meters ()
      {
        return this->SimList_OutputRequestList_Meters_;
      }

      void SimModel::
      SimList_OutputRequestList_Meters (const SimList_OutputRequestList_Meters_sequence& s)
      {
        this->SimList_OutputRequestList_Meters_ = s;
      }

      const SimModel::SimList_OutputRequestList_Reports_sequence& SimModel::
      SimList_OutputRequestList_Reports () const
      {
        return this->SimList_OutputRequestList_Reports_;
      }

      SimModel::SimList_OutputRequestList_Reports_sequence& SimModel::
      SimList_OutputRequestList_Reports ()
      {
        return this->SimList_OutputRequestList_Reports_;
      }

      void SimModel::
      SimList_OutputRequestList_Reports (const SimList_OutputRequestList_Reports_sequence& s)
      {
        this->SimList_OutputRequestList_Reports_ = s;
      }

      const SimModel::SimList_OutputRequestList_Variables_sequence& SimModel::
      SimList_OutputRequestList_Variables () const
      {
        return this->SimList_OutputRequestList_Variables_;
      }

      SimModel::SimList_OutputRequestList_Variables_sequence& SimModel::
      SimList_OutputRequestList_Variables ()
      {
        return this->SimList_OutputRequestList_Variables_;
      }

      void SimModel::
      SimList_OutputRequestList_Variables (const SimList_OutputRequestList_Variables_sequence& s)
      {
        this->SimList_OutputRequestList_Variables_ = s;
      }

      const SimModel::SimList_Refrigeration_ChillerSet_sequence& SimModel::
      SimList_Refrigeration_ChillerSet () const
      {
        return this->SimList_Refrigeration_ChillerSet_;
      }

      SimModel::SimList_Refrigeration_ChillerSet_sequence& SimModel::
      SimList_Refrigeration_ChillerSet ()
      {
        return this->SimList_Refrigeration_ChillerSet_;
      }

      void SimModel::
      SimList_Refrigeration_ChillerSet (const SimList_Refrigeration_ChillerSet_sequence& s)
      {
        this->SimList_Refrigeration_ChillerSet_ = s;
      }

      const SimModel::SimList_SchemeList_AirLoopAvailabilityMgrScheme_sequence& SimModel::
      SimList_SchemeList_AirLoopAvailabilityMgrScheme () const
      {
        return this->SimList_SchemeList_AirLoopAvailabilityMgrScheme_;
      }

      SimModel::SimList_SchemeList_AirLoopAvailabilityMgrScheme_sequence& SimModel::
      SimList_SchemeList_AirLoopAvailabilityMgrScheme ()
      {
        return this->SimList_SchemeList_AirLoopAvailabilityMgrScheme_;
      }

      void SimModel::
      SimList_SchemeList_AirLoopAvailabilityMgrScheme (const SimList_SchemeList_AirLoopAvailabilityMgrScheme_sequence& s)
      {
        this->SimList_SchemeList_AirLoopAvailabilityMgrScheme_ = s;
      }

      const SimModel::SimList_SchemeList_AirTempControlScheme_sequence& SimModel::
      SimList_SchemeList_AirTempControlScheme () const
      {
        return this->SimList_SchemeList_AirTempControlScheme_;
      }

      SimModel::SimList_SchemeList_AirTempControlScheme_sequence& SimModel::
      SimList_SchemeList_AirTempControlScheme ()
      {
        return this->SimList_SchemeList_AirTempControlScheme_;
      }

      void SimModel::
      SimList_SchemeList_AirTempControlScheme (const SimList_SchemeList_AirTempControlScheme_sequence& s)
      {
        this->SimList_SchemeList_AirTempControlScheme_ = s;
      }

      const SimModel::SimList_SchemeList_CondenserOperatingScheme_sequence& SimModel::
      SimList_SchemeList_CondenserOperatingScheme () const
      {
        return this->SimList_SchemeList_CondenserOperatingScheme_;
      }

      SimModel::SimList_SchemeList_CondenserOperatingScheme_sequence& SimModel::
      SimList_SchemeList_CondenserOperatingScheme ()
      {
        return this->SimList_SchemeList_CondenserOperatingScheme_;
      }

      void SimModel::
      SimList_SchemeList_CondenserOperatingScheme (const SimList_SchemeList_CondenserOperatingScheme_sequence& s)
      {
        this->SimList_SchemeList_CondenserOperatingScheme_ = s;
      }

      const SimModel::SimList_SchemeList_DemandManagerScheme_sequence& SimModel::
      SimList_SchemeList_DemandManagerScheme () const
      {
        return this->SimList_SchemeList_DemandManagerScheme_;
      }

      SimModel::SimList_SchemeList_DemandManagerScheme_sequence& SimModel::
      SimList_SchemeList_DemandManagerScheme ()
      {
        return this->SimList_SchemeList_DemandManagerScheme_;
      }

      void SimModel::
      SimList_SchemeList_DemandManagerScheme (const SimList_SchemeList_DemandManagerScheme_sequence& s)
      {
        this->SimList_SchemeList_DemandManagerScheme_ = s;
      }

      const SimModel::SimList_SchemeList_MultiZoneHumidityScheme_sequence& SimModel::
      SimList_SchemeList_MultiZoneHumidityScheme () const
      {
        return this->SimList_SchemeList_MultiZoneHumidityScheme_;
      }

      SimModel::SimList_SchemeList_MultiZoneHumidityScheme_sequence& SimModel::
      SimList_SchemeList_MultiZoneHumidityScheme ()
      {
        return this->SimList_SchemeList_MultiZoneHumidityScheme_;
      }

      void SimModel::
      SimList_SchemeList_MultiZoneHumidityScheme (const SimList_SchemeList_MultiZoneHumidityScheme_sequence& s)
      {
        this->SimList_SchemeList_MultiZoneHumidityScheme_ = s;
      }

      const SimModel::SimList_SchemeList_PlantLoopAvailabilityMgrScheme_sequence& SimModel::
      SimList_SchemeList_PlantLoopAvailabilityMgrScheme () const
      {
        return this->SimList_SchemeList_PlantLoopAvailabilityMgrScheme_;
      }

      SimModel::SimList_SchemeList_PlantLoopAvailabilityMgrScheme_sequence& SimModel::
      SimList_SchemeList_PlantLoopAvailabilityMgrScheme ()
      {
        return this->SimList_SchemeList_PlantLoopAvailabilityMgrScheme_;
      }

      void SimModel::
      SimList_SchemeList_PlantLoopAvailabilityMgrScheme (const SimList_SchemeList_PlantLoopAvailabilityMgrScheme_sequence& s)
      {
        this->SimList_SchemeList_PlantLoopAvailabilityMgrScheme_ = s;
      }

      const SimModel::SimList_SchemeList_PlantOperatingScheme_sequence& SimModel::
      SimList_SchemeList_PlantOperatingScheme () const
      {
        return this->SimList_SchemeList_PlantOperatingScheme_;
      }

      SimModel::SimList_SchemeList_PlantOperatingScheme_sequence& SimModel::
      SimList_SchemeList_PlantOperatingScheme ()
      {
        return this->SimList_SchemeList_PlantOperatingScheme_;
      }

      void SimModel::
      SimList_SchemeList_PlantOperatingScheme (const SimList_SchemeList_PlantOperatingScheme_sequence& s)
      {
        this->SimList_SchemeList_PlantOperatingScheme_ = s;
      }

      const SimModel::SimList_SchemeList_SingleZoneHumidityScheme_sequence& SimModel::
      SimList_SchemeList_SingleZoneHumidityScheme () const
      {
        return this->SimList_SchemeList_SingleZoneHumidityScheme_;
      }

      SimModel::SimList_SchemeList_SingleZoneHumidityScheme_sequence& SimModel::
      SimList_SchemeList_SingleZoneHumidityScheme ()
      {
        return this->SimList_SchemeList_SingleZoneHumidityScheme_;
      }

      void SimModel::
      SimList_SchemeList_SingleZoneHumidityScheme (const SimList_SchemeList_SingleZoneHumidityScheme_sequence& s)
      {
        this->SimList_SchemeList_SingleZoneHumidityScheme_ = s;
      }

      const SimModel::SimList_SchemeList_WaterTempControlScheme_sequence& SimModel::
      SimList_SchemeList_WaterTempControlScheme () const
      {
        return this->SimList_SchemeList_WaterTempControlScheme_;
      }

      SimModel::SimList_SchemeList_WaterTempControlScheme_sequence& SimModel::
      SimList_SchemeList_WaterTempControlScheme ()
      {
        return this->SimList_SchemeList_WaterTempControlScheme_;
      }

      void SimModel::
      SimList_SchemeList_WaterTempControlScheme (const SimList_SchemeList_WaterTempControlScheme_sequence& s)
      {
        this->SimList_SchemeList_WaterTempControlScheme_ = s;
      }

      const SimModel::SimList_TemplateOutputRequestList_Daylighting_sequence& SimModel::
      SimList_TemplateOutputRequestList_Daylighting () const
      {
        return this->SimList_TemplateOutputRequestList_Daylighting_;
      }

      SimModel::SimList_TemplateOutputRequestList_Daylighting_sequence& SimModel::
      SimList_TemplateOutputRequestList_Daylighting ()
      {
        return this->SimList_TemplateOutputRequestList_Daylighting_;
      }

      void SimModel::
      SimList_TemplateOutputRequestList_Daylighting (const SimList_TemplateOutputRequestList_Daylighting_sequence& s)
      {
        this->SimList_TemplateOutputRequestList_Daylighting_ = s;
      }

      const SimModel::SimList_TemplateOutputRequestList_FuelAndEnvironmental_sequence& SimModel::
      SimList_TemplateOutputRequestList_FuelAndEnvironmental () const
      {
        return this->SimList_TemplateOutputRequestList_FuelAndEnvironmental_;
      }

      SimModel::SimList_TemplateOutputRequestList_FuelAndEnvironmental_sequence& SimModel::
      SimList_TemplateOutputRequestList_FuelAndEnvironmental ()
      {
        return this->SimList_TemplateOutputRequestList_FuelAndEnvironmental_;
      }

      void SimModel::
      SimList_TemplateOutputRequestList_FuelAndEnvironmental (const SimList_TemplateOutputRequestList_FuelAndEnvironmental_sequence& s)
      {
        this->SimList_TemplateOutputRequestList_FuelAndEnvironmental_ = s;
      }

      const SimModel::SimList_TemplateOutputRequestList_Geometry_sequence& SimModel::
      SimList_TemplateOutputRequestList_Geometry () const
      {
        return this->SimList_TemplateOutputRequestList_Geometry_;
      }

      SimModel::SimList_TemplateOutputRequestList_Geometry_sequence& SimModel::
      SimList_TemplateOutputRequestList_Geometry ()
      {
        return this->SimList_TemplateOutputRequestList_Geometry_;
      }

      void SimModel::
      SimList_TemplateOutputRequestList_Geometry (const SimList_TemplateOutputRequestList_Geometry_sequence& s)
      {
        this->SimList_TemplateOutputRequestList_Geometry_ = s;
      }

      const SimModel::SimList_TemplateOutputRequestList_Meters_sequence& SimModel::
      SimList_TemplateOutputRequestList_Meters () const
      {
        return this->SimList_TemplateOutputRequestList_Meters_;
      }

      SimModel::SimList_TemplateOutputRequestList_Meters_sequence& SimModel::
      SimList_TemplateOutputRequestList_Meters ()
      {
        return this->SimList_TemplateOutputRequestList_Meters_;
      }

      void SimModel::
      SimList_TemplateOutputRequestList_Meters (const SimList_TemplateOutputRequestList_Meters_sequence& s)
      {
        this->SimList_TemplateOutputRequestList_Meters_ = s;
      }

      const SimModel::SimList_TemplateOutputRequestList_Reports_sequence& SimModel::
      SimList_TemplateOutputRequestList_Reports () const
      {
        return this->SimList_TemplateOutputRequestList_Reports_;
      }

      SimModel::SimList_TemplateOutputRequestList_Reports_sequence& SimModel::
      SimList_TemplateOutputRequestList_Reports ()
      {
        return this->SimList_TemplateOutputRequestList_Reports_;
      }

      void SimModel::
      SimList_TemplateOutputRequestList_Reports (const SimList_TemplateOutputRequestList_Reports_sequence& s)
      {
        this->SimList_TemplateOutputRequestList_Reports_ = s;
      }

      const SimModel::SimList_TemplateOutputRequestList_Variables_sequence& SimModel::
      SimList_TemplateOutputRequestList_Variables () const
      {
        return this->SimList_TemplateOutputRequestList_Variables_;
      }

      SimModel::SimList_TemplateOutputRequestList_Variables_sequence& SimModel::
      SimList_TemplateOutputRequestList_Variables ()
      {
        return this->SimList_TemplateOutputRequestList_Variables_;
      }

      void SimModel::
      SimList_TemplateOutputRequestList_Variables (const SimList_TemplateOutputRequestList_Variables_sequence& s)
      {
        this->SimList_TemplateOutputRequestList_Variables_ = s;
      }

      const SimModel::SimList_VrfList_VrfTerminals_sequence& SimModel::
      SimList_VrfList_VrfTerminals () const
      {
        return this->SimList_VrfList_VrfTerminals_;
      }

      SimModel::SimList_VrfList_VrfTerminals_sequence& SimModel::
      SimList_VrfList_VrfTerminals ()
      {
        return this->SimList_VrfList_VrfTerminals_;
      }

      void SimModel::
      SimList_VrfList_VrfTerminals (const SimList_VrfList_VrfTerminals_sequence& s)
      {
        this->SimList_VrfList_VrfTerminals_ = s;
      }

      const SimModel::SimLocalPlacement_LocalPlacement_AbsolutePlacement_sequence& SimModel::
      SimLocalPlacement_LocalPlacement_AbsolutePlacement () const
      {
        return this->SimLocalPlacement_LocalPlacement_AbsolutePlacement_;
      }

      SimModel::SimLocalPlacement_LocalPlacement_AbsolutePlacement_sequence& SimModel::
      SimLocalPlacement_LocalPlacement_AbsolutePlacement ()
      {
        return this->SimLocalPlacement_LocalPlacement_AbsolutePlacement_;
      }

      void SimModel::
      SimLocalPlacement_LocalPlacement_AbsolutePlacement (const SimLocalPlacement_LocalPlacement_AbsolutePlacement_sequence& s)
      {
        this->SimLocalPlacement_LocalPlacement_AbsolutePlacement_ = s;
      }

      const SimModel::SimLocalPlacement_LocalPlacement_RelativePlacement_sequence& SimModel::
      SimLocalPlacement_LocalPlacement_RelativePlacement () const
      {
        return this->SimLocalPlacement_LocalPlacement_RelativePlacement_;
      }

      SimModel::SimLocalPlacement_LocalPlacement_RelativePlacement_sequence& SimModel::
      SimLocalPlacement_LocalPlacement_RelativePlacement ()
      {
        return this->SimLocalPlacement_LocalPlacement_RelativePlacement_;
      }

      void SimModel::
      SimLocalPlacement_LocalPlacement_RelativePlacement (const SimLocalPlacement_LocalPlacement_RelativePlacement_sequence& s)
      {
        this->SimLocalPlacement_LocalPlacement_RelativePlacement_ = s;
      }

      const SimModel::SimLocationAndWeather_DesignDay_Default_sequence& SimModel::
      SimLocationAndWeather_DesignDay_Default () const
      {
        return this->SimLocationAndWeather_DesignDay_Default_;
      }

      SimModel::SimLocationAndWeather_DesignDay_Default_sequence& SimModel::
      SimLocationAndWeather_DesignDay_Default ()
      {
        return this->SimLocationAndWeather_DesignDay_Default_;
      }

      void SimModel::
      SimLocationAndWeather_DesignDay_Default (const SimLocationAndWeather_DesignDay_Default_sequence& s)
      {
        this->SimLocationAndWeather_DesignDay_Default_ = s;
      }

      const SimModel::SimLocationAndWeather_Location_Default_sequence& SimModel::
      SimLocationAndWeather_Location_Default () const
      {
        return this->SimLocationAndWeather_Location_Default_;
      }

      SimModel::SimLocationAndWeather_Location_Default_sequence& SimModel::
      SimLocationAndWeather_Location_Default ()
      {
        return this->SimLocationAndWeather_Location_Default_;
      }

      void SimModel::
      SimLocationAndWeather_Location_Default (const SimLocationAndWeather_Location_Default_sequence& s)
      {
        this->SimLocationAndWeather_Location_Default_ = s;
      }

      const SimModel::SimLocationAndWeather_WeatherFile_ConditionType_sequence& SimModel::
      SimLocationAndWeather_WeatherFile_ConditionType () const
      {
        return this->SimLocationAndWeather_WeatherFile_ConditionType_;
      }

      SimModel::SimLocationAndWeather_WeatherFile_ConditionType_sequence& SimModel::
      SimLocationAndWeather_WeatherFile_ConditionType ()
      {
        return this->SimLocationAndWeather_WeatherFile_ConditionType_;
      }

      void SimModel::
      SimLocationAndWeather_WeatherFile_ConditionType (const SimLocationAndWeather_WeatherFile_ConditionType_sequence& s)
      {
        this->SimLocationAndWeather_WeatherFile_ConditionType_ = s;
      }

      const SimModel::SimLocationAndWeather_WeatherFile_Days_sequence& SimModel::
      SimLocationAndWeather_WeatherFile_Days () const
      {
        return this->SimLocationAndWeather_WeatherFile_Days_;
      }

      SimModel::SimLocationAndWeather_WeatherFile_Days_sequence& SimModel::
      SimLocationAndWeather_WeatherFile_Days ()
      {
        return this->SimLocationAndWeather_WeatherFile_Days_;
      }

      void SimModel::
      SimLocationAndWeather_WeatherFile_Days (const SimLocationAndWeather_WeatherFile_Days_sequence& s)
      {
        this->SimLocationAndWeather_WeatherFile_Days_ = s;
      }

      const SimModel::SimLocationAndWeather_WeatherFile_WeatherStation_sequence& SimModel::
      SimLocationAndWeather_WeatherFile_WeatherStation () const
      {
        return this->SimLocationAndWeather_WeatherFile_WeatherStation_;
      }

      SimModel::SimLocationAndWeather_WeatherFile_WeatherStation_sequence& SimModel::
      SimLocationAndWeather_WeatherFile_WeatherStation ()
      {
        return this->SimLocationAndWeather_WeatherFile_WeatherStation_;
      }

      void SimModel::
      SimLocationAndWeather_WeatherFile_WeatherStation (const SimLocationAndWeather_WeatherFile_WeatherStation_sequence& s)
      {
        this->SimLocationAndWeather_WeatherFile_WeatherStation_ = s;
      }

      const SimModel::SimLocationAndWeather_WeatherProperty_SkyTemperature_sequence& SimModel::
      SimLocationAndWeather_WeatherProperty_SkyTemperature () const
      {
        return this->SimLocationAndWeather_WeatherProperty_SkyTemperature_;
      }

      SimModel::SimLocationAndWeather_WeatherProperty_SkyTemperature_sequence& SimModel::
      SimLocationAndWeather_WeatherProperty_SkyTemperature ()
      {
        return this->SimLocationAndWeather_WeatherProperty_SkyTemperature_;
      }

      void SimModel::
      SimLocationAndWeather_WeatherProperty_SkyTemperature (const SimLocationAndWeather_WeatherProperty_SkyTemperature_sequence& s)
      {
        this->SimLocationAndWeather_WeatherProperty_SkyTemperature_ = s;
      }

      const SimModel::SimLoop_Loop_EdgeLoop_sequence& SimModel::
      SimLoop_Loop_EdgeLoop () const
      {
        return this->SimLoop_Loop_EdgeLoop_;
      }

      SimModel::SimLoop_Loop_EdgeLoop_sequence& SimModel::
      SimLoop_Loop_EdgeLoop ()
      {
        return this->SimLoop_Loop_EdgeLoop_;
      }

      void SimModel::
      SimLoop_Loop_EdgeLoop (const SimLoop_Loop_EdgeLoop_sequence& s)
      {
        this->SimLoop_Loop_EdgeLoop_ = s;
      }

      const SimModel::SimLoop_Loop_PolyLoop_sequence& SimModel::
      SimLoop_Loop_PolyLoop () const
      {
        return this->SimLoop_Loop_PolyLoop_;
      }

      SimModel::SimLoop_Loop_PolyLoop_sequence& SimModel::
      SimLoop_Loop_PolyLoop ()
      {
        return this->SimLoop_Loop_PolyLoop_;
      }

      void SimModel::
      SimLoop_Loop_PolyLoop (const SimLoop_Loop_PolyLoop_sequence& s)
      {
        this->SimLoop_Loop_PolyLoop_ = s;
      }

      const SimModel::SimLoop_Loop_VertexLoop_sequence& SimModel::
      SimLoop_Loop_VertexLoop () const
      {
        return this->SimLoop_Loop_VertexLoop_;
      }

      SimModel::SimLoop_Loop_VertexLoop_sequence& SimModel::
      SimLoop_Loop_VertexLoop ()
      {
        return this->SimLoop_Loop_VertexLoop_;
      }

      void SimModel::
      SimLoop_Loop_VertexLoop (const SimLoop_Loop_VertexLoop_sequence& s)
      {
        this->SimLoop_Loop_VertexLoop_ = s;
      }

      const SimModel::SimMappedRepresentationItem_Default_Default_sequence& SimModel::
      SimMappedRepresentationItem_Default_Default () const
      {
        return this->SimMappedRepresentationItem_Default_Default_;
      }

      SimModel::SimMappedRepresentationItem_Default_Default_sequence& SimModel::
      SimMappedRepresentationItem_Default_Default ()
      {
        return this->SimMappedRepresentationItem_Default_Default_;
      }

      void SimModel::
      SimMappedRepresentationItem_Default_Default (const SimMappedRepresentationItem_Default_Default_sequence& s)
      {
        this->SimMappedRepresentationItem_Default_Default_ = s;
      }

      const SimModel::SimMaterial_Default_Default_sequence& SimModel::
      SimMaterial_Default_Default () const
      {
        return this->SimMaterial_Default_Default_;
      }

      SimModel::SimMaterial_Default_Default_sequence& SimModel::
      SimMaterial_Default_Default ()
      {
        return this->SimMaterial_Default_Default_;
      }

      void SimModel::
      SimMaterial_Default_Default (const SimMaterial_Default_Default_sequence& s)
      {
        this->SimMaterial_Default_Default_ = s;
      }

      const SimModel::SimMaterial_EquivGlazingMaterial_Blind_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Blind () const
      {
        return this->SimMaterial_EquivGlazingMaterial_Blind_;
      }

      SimModel::SimMaterial_EquivGlazingMaterial_Blind_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Blind ()
      {
        return this->SimMaterial_EquivGlazingMaterial_Blind_;
      }

      void SimModel::
      SimMaterial_EquivGlazingMaterial_Blind (const SimMaterial_EquivGlazingMaterial_Blind_sequence& s)
      {
        this->SimMaterial_EquivGlazingMaterial_Blind_ = s;
      }

      const SimModel::SimMaterial_EquivGlazingMaterial_Drape_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Drape () const
      {
        return this->SimMaterial_EquivGlazingMaterial_Drape_;
      }

      SimModel::SimMaterial_EquivGlazingMaterial_Drape_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Drape ()
      {
        return this->SimMaterial_EquivGlazingMaterial_Drape_;
      }

      void SimModel::
      SimMaterial_EquivGlazingMaterial_Drape (const SimMaterial_EquivGlazingMaterial_Drape_sequence& s)
      {
        this->SimMaterial_EquivGlazingMaterial_Drape_ = s;
      }

      const SimModel::SimMaterial_EquivGlazingMaterial_Gap_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Gap () const
      {
        return this->SimMaterial_EquivGlazingMaterial_Gap_;
      }

      SimModel::SimMaterial_EquivGlazingMaterial_Gap_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Gap ()
      {
        return this->SimMaterial_EquivGlazingMaterial_Gap_;
      }

      void SimModel::
      SimMaterial_EquivGlazingMaterial_Gap (const SimMaterial_EquivGlazingMaterial_Gap_sequence& s)
      {
        this->SimMaterial_EquivGlazingMaterial_Gap_ = s;
      }

      const SimModel::SimMaterial_EquivGlazingMaterial_Glazing_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Glazing () const
      {
        return this->SimMaterial_EquivGlazingMaterial_Glazing_;
      }

      SimModel::SimMaterial_EquivGlazingMaterial_Glazing_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Glazing ()
      {
        return this->SimMaterial_EquivGlazingMaterial_Glazing_;
      }

      void SimModel::
      SimMaterial_EquivGlazingMaterial_Glazing (const SimMaterial_EquivGlazingMaterial_Glazing_sequence& s)
      {
        this->SimMaterial_EquivGlazingMaterial_Glazing_ = s;
      }

      const SimModel::SimMaterial_EquivGlazingMaterial_Screen_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Screen () const
      {
        return this->SimMaterial_EquivGlazingMaterial_Screen_;
      }

      SimModel::SimMaterial_EquivGlazingMaterial_Screen_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Screen ()
      {
        return this->SimMaterial_EquivGlazingMaterial_Screen_;
      }

      void SimModel::
      SimMaterial_EquivGlazingMaterial_Screen (const SimMaterial_EquivGlazingMaterial_Screen_sequence& s)
      {
        this->SimMaterial_EquivGlazingMaterial_Screen_ = s;
      }

      const SimModel::SimMaterial_EquivGlazingMaterial_Shade_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Shade () const
      {
        return this->SimMaterial_EquivGlazingMaterial_Shade_;
      }

      SimModel::SimMaterial_EquivGlazingMaterial_Shade_sequence& SimModel::
      SimMaterial_EquivGlazingMaterial_Shade ()
      {
        return this->SimMaterial_EquivGlazingMaterial_Shade_;
      }

      void SimModel::
      SimMaterial_EquivGlazingMaterial_Shade (const SimMaterial_EquivGlazingMaterial_Shade_sequence& s)
      {
        this->SimMaterial_EquivGlazingMaterial_Shade_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Blind_sequence& SimModel::
      SimMaterial_GlazingMaterial_Blind () const
      {
        return this->SimMaterial_GlazingMaterial_Blind_;
      }

      SimModel::SimMaterial_GlazingMaterial_Blind_sequence& SimModel::
      SimMaterial_GlazingMaterial_Blind ()
      {
        return this->SimMaterial_GlazingMaterial_Blind_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Blind (const SimMaterial_GlazingMaterial_Blind_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Blind_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_ComplexShade_sequence& SimModel::
      SimMaterial_GlazingMaterial_ComplexShade () const
      {
        return this->SimMaterial_GlazingMaterial_ComplexShade_;
      }

      SimModel::SimMaterial_GlazingMaterial_ComplexShade_sequence& SimModel::
      SimMaterial_GlazingMaterial_ComplexShade ()
      {
        return this->SimMaterial_GlazingMaterial_ComplexShade_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_ComplexShade (const SimMaterial_GlazingMaterial_ComplexShade_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_ComplexShade_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Gap_sequence& SimModel::
      SimMaterial_GlazingMaterial_Gap () const
      {
        return this->SimMaterial_GlazingMaterial_Gap_;
      }

      SimModel::SimMaterial_GlazingMaterial_Gap_sequence& SimModel::
      SimMaterial_GlazingMaterial_Gap ()
      {
        return this->SimMaterial_GlazingMaterial_Gap_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Gap (const SimMaterial_GlazingMaterial_Gap_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Gap_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Gas_sequence& SimModel::
      SimMaterial_GlazingMaterial_Gas () const
      {
        return this->SimMaterial_GlazingMaterial_Gas_;
      }

      SimModel::SimMaterial_GlazingMaterial_Gas_sequence& SimModel::
      SimMaterial_GlazingMaterial_Gas ()
      {
        return this->SimMaterial_GlazingMaterial_Gas_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Gas (const SimMaterial_GlazingMaterial_Gas_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Gas_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_GasMixture_sequence& SimModel::
      SimMaterial_GlazingMaterial_GasMixture () const
      {
        return this->SimMaterial_GlazingMaterial_GasMixture_;
      }

      SimModel::SimMaterial_GlazingMaterial_GasMixture_sequence& SimModel::
      SimMaterial_GlazingMaterial_GasMixture ()
      {
        return this->SimMaterial_GlazingMaterial_GasMixture_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_GasMixture (const SimMaterial_GlazingMaterial_GasMixture_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_GasMixture_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Glazing_sequence& SimModel::
      SimMaterial_GlazingMaterial_Glazing () const
      {
        return this->SimMaterial_GlazingMaterial_Glazing_;
      }

      SimModel::SimMaterial_GlazingMaterial_Glazing_sequence& SimModel::
      SimMaterial_GlazingMaterial_Glazing ()
      {
        return this->SimMaterial_GlazingMaterial_Glazing_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Glazing (const SimMaterial_GlazingMaterial_Glazing_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Glazing_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_sequence& SimModel::
      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod () const
      {
        return this->SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_;
      }

      SimModel::SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_sequence& SimModel::
      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod ()
      {
        return this->SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod (const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Screen_sequence& SimModel::
      SimMaterial_GlazingMaterial_Screen () const
      {
        return this->SimMaterial_GlazingMaterial_Screen_;
      }

      SimModel::SimMaterial_GlazingMaterial_Screen_sequence& SimModel::
      SimMaterial_GlazingMaterial_Screen ()
      {
        return this->SimMaterial_GlazingMaterial_Screen_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Screen (const SimMaterial_GlazingMaterial_Screen_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Screen_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Shade_sequence& SimModel::
      SimMaterial_GlazingMaterial_Shade () const
      {
        return this->SimMaterial_GlazingMaterial_Shade_;
      }

      SimModel::SimMaterial_GlazingMaterial_Shade_sequence& SimModel::
      SimMaterial_GlazingMaterial_Shade ()
      {
        return this->SimMaterial_GlazingMaterial_Shade_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Shade (const SimMaterial_GlazingMaterial_Shade_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Shade_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_SimpleGlazingSystem_sequence& SimModel::
      SimMaterial_GlazingMaterial_SimpleGlazingSystem () const
      {
        return this->SimMaterial_GlazingMaterial_SimpleGlazingSystem_;
      }

      SimModel::SimMaterial_GlazingMaterial_SimpleGlazingSystem_sequence& SimModel::
      SimMaterial_GlazingMaterial_SimpleGlazingSystem ()
      {
        return this->SimMaterial_GlazingMaterial_SimpleGlazingSystem_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_SimpleGlazingSystem (const SimMaterial_GlazingMaterial_SimpleGlazingSystem_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_SimpleGlazingSystem_ = s;
      }

      const SimModel::SimMaterial_GlazingMaterial_Thermochromic_sequence& SimModel::
      SimMaterial_GlazingMaterial_Thermochromic () const
      {
        return this->SimMaterial_GlazingMaterial_Thermochromic_;
      }

      SimModel::SimMaterial_GlazingMaterial_Thermochromic_sequence& SimModel::
      SimMaterial_GlazingMaterial_Thermochromic ()
      {
        return this->SimMaterial_GlazingMaterial_Thermochromic_;
      }

      void SimModel::
      SimMaterial_GlazingMaterial_Thermochromic (const SimMaterial_GlazingMaterial_Thermochromic_sequence& s)
      {
        this->SimMaterial_GlazingMaterial_Thermochromic_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_AirGap_sequence& SimModel::
      SimMaterial_OpaqueMaterial_AirGap () const
      {
        return this->SimMaterial_OpaqueMaterial_AirGap_;
      }

      SimModel::SimMaterial_OpaqueMaterial_AirGap_sequence& SimModel::
      SimMaterial_OpaqueMaterial_AirGap ()
      {
        return this->SimMaterial_OpaqueMaterial_AirGap_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_AirGap (const SimMaterial_OpaqueMaterial_AirGap_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_AirGap_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_Composite_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Composite () const
      {
        return this->SimMaterial_OpaqueMaterial_Composite_;
      }

      SimModel::SimMaterial_OpaqueMaterial_Composite_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Composite ()
      {
        return this->SimMaterial_OpaqueMaterial_Composite_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_Composite (const SimMaterial_OpaqueMaterial_Composite_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_Composite_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_Default_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Default () const
      {
        return this->SimMaterial_OpaqueMaterial_Default_;
      }

      SimModel::SimMaterial_OpaqueMaterial_Default_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Default ()
      {
        return this->SimMaterial_OpaqueMaterial_Default_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_Default (const SimMaterial_OpaqueMaterial_Default_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_Default_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_InfraredTransparent_sequence& SimModel::
      SimMaterial_OpaqueMaterial_InfraredTransparent () const
      {
        return this->SimMaterial_OpaqueMaterial_InfraredTransparent_;
      }

      SimModel::SimMaterial_OpaqueMaterial_InfraredTransparent_sequence& SimModel::
      SimMaterial_OpaqueMaterial_InfraredTransparent ()
      {
        return this->SimMaterial_OpaqueMaterial_InfraredTransparent_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_InfraredTransparent (const SimMaterial_OpaqueMaterial_InfraredTransparent_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_InfraredTransparent_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_Insulation_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Insulation () const
      {
        return this->SimMaterial_OpaqueMaterial_Insulation_;
      }

      SimModel::SimMaterial_OpaqueMaterial_Insulation_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Insulation ()
      {
        return this->SimMaterial_OpaqueMaterial_Insulation_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_Insulation (const SimMaterial_OpaqueMaterial_Insulation_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_Insulation_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_InsulationMovable_sequence& SimModel::
      SimMaterial_OpaqueMaterial_InsulationMovable () const
      {
        return this->SimMaterial_OpaqueMaterial_InsulationMovable_;
      }

      SimModel::SimMaterial_OpaqueMaterial_InsulationMovable_sequence& SimModel::
      SimMaterial_OpaqueMaterial_InsulationMovable ()
      {
        return this->SimMaterial_OpaqueMaterial_InsulationMovable_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_InsulationMovable (const SimMaterial_OpaqueMaterial_InsulationMovable_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_InsulationMovable_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_NoMass_sequence& SimModel::
      SimMaterial_OpaqueMaterial_NoMass () const
      {
        return this->SimMaterial_OpaqueMaterial_NoMass_;
      }

      SimModel::SimMaterial_OpaqueMaterial_NoMass_sequence& SimModel::
      SimMaterial_OpaqueMaterial_NoMass ()
      {
        return this->SimMaterial_OpaqueMaterial_NoMass_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_NoMass (const SimMaterial_OpaqueMaterial_NoMass_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_NoMass_ = s;
      }

      const SimModel::SimMaterial_OpaqueMaterial_Vegetation_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Vegetation () const
      {
        return this->SimMaterial_OpaqueMaterial_Vegetation_;
      }

      SimModel::SimMaterial_OpaqueMaterial_Vegetation_sequence& SimModel::
      SimMaterial_OpaqueMaterial_Vegetation ()
      {
        return this->SimMaterial_OpaqueMaterial_Vegetation_;
      }

      void SimModel::
      SimMaterial_OpaqueMaterial_Vegetation (const SimMaterial_OpaqueMaterial_Vegetation_sequence& s)
      {
        this->SimMaterial_OpaqueMaterial_Vegetation_ = s;
      }

      const SimModel::SimMaterial_VirtualBoundary_Default_sequence& SimModel::
      SimMaterial_VirtualBoundary_Default () const
      {
        return this->SimMaterial_VirtualBoundary_Default_;
      }

      SimModel::SimMaterial_VirtualBoundary_Default_sequence& SimModel::
      SimMaterial_VirtualBoundary_Default ()
      {
        return this->SimMaterial_VirtualBoundary_Default_;
      }

      void SimModel::
      SimMaterial_VirtualBoundary_Default (const SimMaterial_VirtualBoundary_Default_sequence& s)
      {
        this->SimMaterial_VirtualBoundary_Default_ = s;
      }

      const SimModel::SimMaterialLayer_EquivGlazingLayer_Default_sequence& SimModel::
      SimMaterialLayer_EquivGlazingLayer_Default () const
      {
        return this->SimMaterialLayer_EquivGlazingLayer_Default_;
      }

      SimModel::SimMaterialLayer_EquivGlazingLayer_Default_sequence& SimModel::
      SimMaterialLayer_EquivGlazingLayer_Default ()
      {
        return this->SimMaterialLayer_EquivGlazingLayer_Default_;
      }

      void SimModel::
      SimMaterialLayer_EquivGlazingLayer_Default (const SimMaterialLayer_EquivGlazingLayer_Default_sequence& s)
      {
        this->SimMaterialLayer_EquivGlazingLayer_Default_ = s;
      }

      const SimModel::SimMaterialLayer_GlazingMaterialLayer_Default_sequence& SimModel::
      SimMaterialLayer_GlazingMaterialLayer_Default () const
      {
        return this->SimMaterialLayer_GlazingMaterialLayer_Default_;
      }

      SimModel::SimMaterialLayer_GlazingMaterialLayer_Default_sequence& SimModel::
      SimMaterialLayer_GlazingMaterialLayer_Default ()
      {
        return this->SimMaterialLayer_GlazingMaterialLayer_Default_;
      }

      void SimModel::
      SimMaterialLayer_GlazingMaterialLayer_Default (const SimMaterialLayer_GlazingMaterialLayer_Default_sequence& s)
      {
        this->SimMaterialLayer_GlazingMaterialLayer_Default_ = s;
      }

      const SimModel::SimMaterialLayer_OpaqueMaterialLayer_Default_sequence& SimModel::
      SimMaterialLayer_OpaqueMaterialLayer_Default () const
      {
        return this->SimMaterialLayer_OpaqueMaterialLayer_Default_;
      }

      SimModel::SimMaterialLayer_OpaqueMaterialLayer_Default_sequence& SimModel::
      SimMaterialLayer_OpaqueMaterialLayer_Default ()
      {
        return this->SimMaterialLayer_OpaqueMaterialLayer_Default_;
      }

      void SimModel::
      SimMaterialLayer_OpaqueMaterialLayer_Default (const SimMaterialLayer_OpaqueMaterialLayer_Default_sequence& s)
      {
        this->SimMaterialLayer_OpaqueMaterialLayer_Default_ = s;
      }

      const SimModel::SimMaterialLayer_VirtualBoundaryLayer_Default_sequence& SimModel::
      SimMaterialLayer_VirtualBoundaryLayer_Default () const
      {
        return this->SimMaterialLayer_VirtualBoundaryLayer_Default_;
      }

      SimModel::SimMaterialLayer_VirtualBoundaryLayer_Default_sequence& SimModel::
      SimMaterialLayer_VirtualBoundaryLayer_Default ()
      {
        return this->SimMaterialLayer_VirtualBoundaryLayer_Default_;
      }

      void SimModel::
      SimMaterialLayer_VirtualBoundaryLayer_Default (const SimMaterialLayer_VirtualBoundaryLayer_Default_sequence& s)
      {
        this->SimMaterialLayer_VirtualBoundaryLayer_Default_ = s;
      }

      const SimModel::SimMaterialLayerSet_Default_Default_sequence& SimModel::
      SimMaterialLayerSet_Default_Default () const
      {
        return this->SimMaterialLayerSet_Default_Default_;
      }

      SimModel::SimMaterialLayerSet_Default_Default_sequence& SimModel::
      SimMaterialLayerSet_Default_Default ()
      {
        return this->SimMaterialLayerSet_Default_Default_;
      }

      void SimModel::
      SimMaterialLayerSet_Default_Default (const SimMaterialLayerSet_Default_Default_sequence& s)
      {
        this->SimMaterialLayerSet_Default_Default_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_CurtainWall_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_CurtainWall () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_CurtainWall_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_CurtainWall_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_CurtainWall ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_CurtainWall_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_CurtainWall (const SimMaterialLayerSet_GlazingLayerSet_CurtainWall_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_CurtainWall_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_Default_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_Default () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_Default_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_Default_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_Default ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_Default_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_Default (const SimMaterialLayerSet_GlazingLayerSet_Default_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_Default_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_GlassDoor_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_GlassDoor () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_GlassDoor_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_GlassDoor_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_GlassDoor ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_GlassDoor_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_GlassDoor (const SimMaterialLayerSet_GlazingLayerSet_GlassDoor_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_GlassDoor_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_Window_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_Window () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_Window_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_Window_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_Window ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_Window_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_Window (const SimMaterialLayerSet_GlazingLayerSet_Window_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_Window_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_WindowDataFile () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_WindowDataFile ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_WindowDataFile (const SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_ = s;
      }

      const SimModel::SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer () const
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_;
      }

      SimModel::SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_sequence& SimModel::
      SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer ()
      {
        return this->SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_;
      }

      void SimModel::
      SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer (const SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_sequence& s)
      {
        this->SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Ceiling_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Ceiling () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Ceiling_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Ceiling_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Ceiling ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Ceiling_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Ceiling (const SimMaterialLayerSet_OpaqueLayerSet_Ceiling_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Ceiling_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall (const SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Default_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Default () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Default_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Default_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Default ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Default_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Default (const SimMaterialLayerSet_OpaqueLayerSet_Default_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Default_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Door_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Door () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Door_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Door_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Door ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Door_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Door (const SimMaterialLayerSet_OpaqueLayerSet_Door_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Door_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor (const SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Floor_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Floor () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Floor_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Floor_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Floor ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Floor_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Floor (const SimMaterialLayerSet_OpaqueLayerSet_Floor_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Floor_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_InternalSource_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_InternalSource () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_InternalSource_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_InternalSource_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_InternalSource ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_InternalSource_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_InternalSource (const SimMaterialLayerSet_OpaqueLayerSet_InternalSource_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_InternalSource_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Landing_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Landing () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Landing_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Landing_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Landing ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Landing_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Landing (const SimMaterialLayerSet_OpaqueLayerSet_Landing_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Landing_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Roof_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Roof () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Roof_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Roof_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Roof ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Roof_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Roof (const SimMaterialLayerSet_OpaqueLayerSet_Roof_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Roof_ = s;
      }

      const SimModel::SimMaterialLayerSet_OpaqueLayerSet_Wall_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Wall () const
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Wall_;
      }

      SimModel::SimMaterialLayerSet_OpaqueLayerSet_Wall_sequence& SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Wall ()
      {
        return this->SimMaterialLayerSet_OpaqueLayerSet_Wall_;
      }

      void SimModel::
      SimMaterialLayerSet_OpaqueLayerSet_Wall (const SimMaterialLayerSet_OpaqueLayerSet_Wall_sequence& s)
      {
        this->SimMaterialLayerSet_OpaqueLayerSet_Wall_ = s;
      }

      const SimModel::SimMeasureType_AreaMeasure_Default_sequence& SimModel::
      SimMeasureType_AreaMeasure_Default () const
      {
        return this->SimMeasureType_AreaMeasure_Default_;
      }

      SimModel::SimMeasureType_AreaMeasure_Default_sequence& SimModel::
      SimMeasureType_AreaMeasure_Default ()
      {
        return this->SimMeasureType_AreaMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_AreaMeasure_Default (const SimMeasureType_AreaMeasure_Default_sequence& s)
      {
        this->SimMeasureType_AreaMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_CountMeasure_AirChangesPerhour_sequence& SimModel::
      SimMeasureType_CountMeasure_AirChangesPerhour () const
      {
        return this->SimMeasureType_CountMeasure_AirChangesPerhour_;
      }

      SimModel::SimMeasureType_CountMeasure_AirChangesPerhour_sequence& SimModel::
      SimMeasureType_CountMeasure_AirChangesPerhour ()
      {
        return this->SimMeasureType_CountMeasure_AirChangesPerhour_;
      }

      void SimModel::
      SimMeasureType_CountMeasure_AirChangesPerhour (const SimMeasureType_CountMeasure_AirChangesPerhour_sequence& s)
      {
        this->SimMeasureType_CountMeasure_AirChangesPerhour_ = s;
      }

      const SimModel::SimMeasureType_CountMeasure_Count_sequence& SimModel::
      SimMeasureType_CountMeasure_Count () const
      {
        return this->SimMeasureType_CountMeasure_Count_;
      }

      SimModel::SimMeasureType_CountMeasure_Count_sequence& SimModel::
      SimMeasureType_CountMeasure_Count ()
      {
        return this->SimMeasureType_CountMeasure_Count_;
      }

      void SimModel::
      SimMeasureType_CountMeasure_Count (const SimMeasureType_CountMeasure_Count_sequence& s)
      {
        this->SimMeasureType_CountMeasure_Count_ = s;
      }

      const SimModel::SimMeasureType_Default_Default_sequence& SimModel::
      SimMeasureType_Default_Default () const
      {
        return this->SimMeasureType_Default_Default_;
      }

      SimModel::SimMeasureType_Default_Default_sequence& SimModel::
      SimMeasureType_Default_Default ()
      {
        return this->SimMeasureType_Default_Default_;
      }

      void SimModel::
      SimMeasureType_Default_Default (const SimMeasureType_Default_Default_sequence& s)
      {
        this->SimMeasureType_Default_Default_ = s;
      }

      const SimModel::SimMeasureType_EnergyMeasure_Default_sequence& SimModel::
      SimMeasureType_EnergyMeasure_Default () const
      {
        return this->SimMeasureType_EnergyMeasure_Default_;
      }

      SimModel::SimMeasureType_EnergyMeasure_Default_sequence& SimModel::
      SimMeasureType_EnergyMeasure_Default ()
      {
        return this->SimMeasureType_EnergyMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_EnergyMeasure_Default (const SimMeasureType_EnergyMeasure_Default_sequence& s)
      {
        this->SimMeasureType_EnergyMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_sequence& SimModel::
      SimMeasureType_EnergyMeasure_WattsPerAreaMeasure () const
      {
        return this->SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_;
      }

      SimModel::SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_sequence& SimModel::
      SimMeasureType_EnergyMeasure_WattsPerAreaMeasure ()
      {
        return this->SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_;
      }

      void SimModel::
      SimMeasureType_EnergyMeasure_WattsPerAreaMeasure (const SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_sequence& s)
      {
        this->SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_ = s;
      }

      const SimModel::SimMeasureType_EnergyMeasure_WattsPerPerson_sequence& SimModel::
      SimMeasureType_EnergyMeasure_WattsPerPerson () const
      {
        return this->SimMeasureType_EnergyMeasure_WattsPerPerson_;
      }

      SimModel::SimMeasureType_EnergyMeasure_WattsPerPerson_sequence& SimModel::
      SimMeasureType_EnergyMeasure_WattsPerPerson ()
      {
        return this->SimMeasureType_EnergyMeasure_WattsPerPerson_;
      }

      void SimModel::
      SimMeasureType_EnergyMeasure_WattsPerPerson (const SimMeasureType_EnergyMeasure_WattsPerPerson_sequence& s)
      {
        this->SimMeasureType_EnergyMeasure_WattsPerPerson_ = s;
      }

      const SimModel::SimMeasureType_LengthMeasure_Default_sequence& SimModel::
      SimMeasureType_LengthMeasure_Default () const
      {
        return this->SimMeasureType_LengthMeasure_Default_;
      }

      SimModel::SimMeasureType_LengthMeasure_Default_sequence& SimModel::
      SimMeasureType_LengthMeasure_Default ()
      {
        return this->SimMeasureType_LengthMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_LengthMeasure_Default (const SimMeasureType_LengthMeasure_Default_sequence& s)
      {
        this->SimMeasureType_LengthMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_MassMeasure_Default_sequence& SimModel::
      SimMeasureType_MassMeasure_Default () const
      {
        return this->SimMeasureType_MassMeasure_Default_;
      }

      SimModel::SimMeasureType_MassMeasure_Default_sequence& SimModel::
      SimMeasureType_MassMeasure_Default ()
      {
        return this->SimMeasureType_MassMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_MassMeasure_Default (const SimMeasureType_MassMeasure_Default_sequence& s)
      {
        this->SimMeasureType_MassMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_MonetaryMeasure_Default_sequence& SimModel::
      SimMeasureType_MonetaryMeasure_Default () const
      {
        return this->SimMeasureType_MonetaryMeasure_Default_;
      }

      SimModel::SimMeasureType_MonetaryMeasure_Default_sequence& SimModel::
      SimMeasureType_MonetaryMeasure_Default ()
      {
        return this->SimMeasureType_MonetaryMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_MonetaryMeasure_Default (const SimMeasureType_MonetaryMeasure_Default_sequence& s)
      {
        this->SimMeasureType_MonetaryMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_PersonsPerAreaMeasure_Default_sequence& SimModel::
      SimMeasureType_PersonsPerAreaMeasure_Default () const
      {
        return this->SimMeasureType_PersonsPerAreaMeasure_Default_;
      }

      SimModel::SimMeasureType_PersonsPerAreaMeasure_Default_sequence& SimModel::
      SimMeasureType_PersonsPerAreaMeasure_Default ()
      {
        return this->SimMeasureType_PersonsPerAreaMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_PersonsPerAreaMeasure_Default (const SimMeasureType_PersonsPerAreaMeasure_Default_sequence& s)
      {
        this->SimMeasureType_PersonsPerAreaMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_RatioMeasure_Default_sequence& SimModel::
      SimMeasureType_RatioMeasure_Default () const
      {
        return this->SimMeasureType_RatioMeasure_Default_;
      }

      SimModel::SimMeasureType_RatioMeasure_Default_sequence& SimModel::
      SimMeasureType_RatioMeasure_Default ()
      {
        return this->SimMeasureType_RatioMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_RatioMeasure_Default (const SimMeasureType_RatioMeasure_Default_sequence& s)
      {
        this->SimMeasureType_RatioMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_RatioMeasure_PositiveRatioMeasure_sequence& SimModel::
      SimMeasureType_RatioMeasure_PositiveRatioMeasure () const
      {
        return this->SimMeasureType_RatioMeasure_PositiveRatioMeasure_;
      }

      SimModel::SimMeasureType_RatioMeasure_PositiveRatioMeasure_sequence& SimModel::
      SimMeasureType_RatioMeasure_PositiveRatioMeasure ()
      {
        return this->SimMeasureType_RatioMeasure_PositiveRatioMeasure_;
      }

      void SimModel::
      SimMeasureType_RatioMeasure_PositiveRatioMeasure (const SimMeasureType_RatioMeasure_PositiveRatioMeasure_sequence& s)
      {
        this->SimMeasureType_RatioMeasure_PositiveRatioMeasure_ = s;
      }

      const SimModel::SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_sequence& SimModel::
      SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure () const
      {
        return this->SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_;
      }

      SimModel::SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_sequence& SimModel::
      SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure ()
      {
        return this->SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_;
      }

      void SimModel::
      SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure (const SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_sequence& s)
      {
        this->SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_ = s;
      }

      const SimModel::SimMeasureType_RotationalAngleMeasure_Degrees_sequence& SimModel::
      SimMeasureType_RotationalAngleMeasure_Degrees () const
      {
        return this->SimMeasureType_RotationalAngleMeasure_Degrees_;
      }

      SimModel::SimMeasureType_RotationalAngleMeasure_Degrees_sequence& SimModel::
      SimMeasureType_RotationalAngleMeasure_Degrees ()
      {
        return this->SimMeasureType_RotationalAngleMeasure_Degrees_;
      }

      void SimModel::
      SimMeasureType_RotationalAngleMeasure_Degrees (const SimMeasureType_RotationalAngleMeasure_Degrees_sequence& s)
      {
        this->SimMeasureType_RotationalAngleMeasure_Degrees_ = s;
      }

      const SimModel::SimMeasureType_ThermodynamicTemperatureMeasure_Default_sequence& SimModel::
      SimMeasureType_ThermodynamicTemperatureMeasure_Default () const
      {
        return this->SimMeasureType_ThermodynamicTemperatureMeasure_Default_;
      }

      SimModel::SimMeasureType_ThermodynamicTemperatureMeasure_Default_sequence& SimModel::
      SimMeasureType_ThermodynamicTemperatureMeasure_Default ()
      {
        return this->SimMeasureType_ThermodynamicTemperatureMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_ThermodynamicTemperatureMeasure_Default (const SimMeasureType_ThermodynamicTemperatureMeasure_Default_sequence& s)
      {
        this->SimMeasureType_ThermodynamicTemperatureMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_VolumeMeasure_Default_sequence& SimModel::
      SimMeasureType_VolumeMeasure_Default () const
      {
        return this->SimMeasureType_VolumeMeasure_Default_;
      }

      SimModel::SimMeasureType_VolumeMeasure_Default_sequence& SimModel::
      SimMeasureType_VolumeMeasure_Default ()
      {
        return this->SimMeasureType_VolumeMeasure_Default_;
      }

      void SimModel::
      SimMeasureType_VolumeMeasure_Default (const SimMeasureType_VolumeMeasure_Default_sequence& s)
      {
        this->SimMeasureType_VolumeMeasure_Default_ = s;
      }

      const SimModel::SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_sequence& SimModel::
      SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond () const
      {
        return this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_;
      }

      SimModel::SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_sequence& SimModel::
      SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond ()
      {
        return this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_;
      }

      void SimModel::
      SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond (const SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_sequence& s)
      {
        this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_ = s;
      }

      const SimModel::SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_sequence& SimModel::
      SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson () const
      {
        return this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_;
      }

      SimModel::SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_sequence& SimModel::
      SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson ()
      {
        return this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_;
      }

      void SimModel::
      SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson (const SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_sequence& s)
      {
        this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_ = s;
      }

      const SimModel::SimMember_Default_Default_sequence& SimModel::
      SimMember_Default_Default () const
      {
        return this->SimMember_Default_Default_;
      }

      SimModel::SimMember_Default_Default_sequence& SimModel::
      SimMember_Default_Default ()
      {
        return this->SimMember_Default_Default_;
      }

      void SimModel::
      SimMember_Default_Default (const SimMember_Default_Default_sequence& s)
      {
        this->SimMember_Default_Default_ = s;
      }

      const SimModel::SimMemberParams_Member_Default_sequence& SimModel::
      SimMemberParams_Member_Default () const
      {
        return this->SimMemberParams_Member_Default_;
      }

      SimModel::SimMemberParams_Member_Default_sequence& SimModel::
      SimMemberParams_Member_Default ()
      {
        return this->SimMemberParams_Member_Default_;
      }

      void SimModel::
      SimMemberParams_Member_Default (const SimMemberParams_Member_Default_sequence& s)
      {
        this->SimMemberParams_Member_Default_ = s;
      }

      const SimModel::SimMemberProfileProperties_Beam_Default_sequence& SimModel::
      SimMemberProfileProperties_Beam_Default () const
      {
        return this->SimMemberProfileProperties_Beam_Default_;
      }

      SimModel::SimMemberProfileProperties_Beam_Default_sequence& SimModel::
      SimMemberProfileProperties_Beam_Default ()
      {
        return this->SimMemberProfileProperties_Beam_Default_;
      }

      void SimModel::
      SimMemberProfileProperties_Beam_Default (const SimMemberProfileProperties_Beam_Default_sequence& s)
      {
        this->SimMemberProfileProperties_Beam_Default_ = s;
      }

      const SimModel::SimMemberProfileProperties_Column_Default_sequence& SimModel::
      SimMemberProfileProperties_Column_Default () const
      {
        return this->SimMemberProfileProperties_Column_Default_;
      }

      SimModel::SimMemberProfileProperties_Column_Default_sequence& SimModel::
      SimMemberProfileProperties_Column_Default ()
      {
        return this->SimMemberProfileProperties_Column_Default_;
      }

      void SimModel::
      SimMemberProfileProperties_Column_Default (const SimMemberProfileProperties_Column_Default_sequence& s)
      {
        this->SimMemberProfileProperties_Column_Default_ = s;
      }

      const SimModel::SimMemberProfileProperties_Default_Default_sequence& SimModel::
      SimMemberProfileProperties_Default_Default () const
      {
        return this->SimMemberProfileProperties_Default_Default_;
      }

      SimModel::SimMemberProfileProperties_Default_Default_sequence& SimModel::
      SimMemberProfileProperties_Default_Default ()
      {
        return this->SimMemberProfileProperties_Default_Default_;
      }

      void SimModel::
      SimMemberProfileProperties_Default_Default (const SimMemberProfileProperties_Default_Default_sequence& s)
      {
        this->SimMemberProfileProperties_Default_Default_ = s;
      }

      const SimModel::SimModelRepresentationContext_GeometricRepresentationContext_Default_sequence& SimModel::
      SimModelRepresentationContext_GeometricRepresentationContext_Default () const
      {
        return this->SimModelRepresentationContext_GeometricRepresentationContext_Default_;
      }

      SimModel::SimModelRepresentationContext_GeometricRepresentationContext_Default_sequence& SimModel::
      SimModelRepresentationContext_GeometricRepresentationContext_Default ()
      {
        return this->SimModelRepresentationContext_GeometricRepresentationContext_Default_;
      }

      void SimModel::
      SimModelRepresentationContext_GeometricRepresentationContext_Default (const SimModelRepresentationContext_GeometricRepresentationContext_Default_sequence& s)
      {
        this->SimModelRepresentationContext_GeometricRepresentationContext_Default_ = s;
      }

      const SimModel::SimModelRepresentationContext_GeometricRepresentationSubContext_Default_sequence& SimModel::
      SimModelRepresentationContext_GeometricRepresentationSubContext_Default () const
      {
        return this->SimModelRepresentationContext_GeometricRepresentationSubContext_Default_;
      }

      SimModel::SimModelRepresentationContext_GeometricRepresentationSubContext_Default_sequence& SimModel::
      SimModelRepresentationContext_GeometricRepresentationSubContext_Default ()
      {
        return this->SimModelRepresentationContext_GeometricRepresentationSubContext_Default_;
      }

      void SimModel::
      SimModelRepresentationContext_GeometricRepresentationSubContext_Default (const SimModelRepresentationContext_GeometricRepresentationSubContext_Default_sequence& s)
      {
        this->SimModelRepresentationContext_GeometricRepresentationSubContext_Default_ = s;
      }

      const SimModel::SimModelRepresentationContext_RepresentationContext_Default_sequence& SimModel::
      SimModelRepresentationContext_RepresentationContext_Default () const
      {
        return this->SimModelRepresentationContext_RepresentationContext_Default_;
      }

      SimModel::SimModelRepresentationContext_RepresentationContext_Default_sequence& SimModel::
      SimModelRepresentationContext_RepresentationContext_Default ()
      {
        return this->SimModelRepresentationContext_RepresentationContext_Default_;
      }

      void SimModel::
      SimModelRepresentationContext_RepresentationContext_Default (const SimModelRepresentationContext_RepresentationContext_Default_sequence& s)
      {
        this->SimModelRepresentationContext_RepresentationContext_Default_ = s;
      }

      const SimModel::SimNode_AirflowNetworkNode_AirDistributionNode_sequence& SimModel::
      SimNode_AirflowNetworkNode_AirDistributionNode () const
      {
        return this->SimNode_AirflowNetworkNode_AirDistributionNode_;
      }

      SimModel::SimNode_AirflowNetworkNode_AirDistributionNode_sequence& SimModel::
      SimNode_AirflowNetworkNode_AirDistributionNode ()
      {
        return this->SimNode_AirflowNetworkNode_AirDistributionNode_;
      }

      void SimModel::
      SimNode_AirflowNetworkNode_AirDistributionNode (const SimNode_AirflowNetworkNode_AirDistributionNode_sequence& s)
      {
        this->SimNode_AirflowNetworkNode_AirDistributionNode_ = s;
      }

      const SimModel::SimNode_AirflowNetworkNode_ExternalNode_sequence& SimModel::
      SimNode_AirflowNetworkNode_ExternalNode () const
      {
        return this->SimNode_AirflowNetworkNode_ExternalNode_;
      }

      SimModel::SimNode_AirflowNetworkNode_ExternalNode_sequence& SimModel::
      SimNode_AirflowNetworkNode_ExternalNode ()
      {
        return this->SimNode_AirflowNetworkNode_ExternalNode_;
      }

      void SimModel::
      SimNode_AirflowNetworkNode_ExternalNode (const SimNode_AirflowNetworkNode_ExternalNode_sequence& s)
      {
        this->SimNode_AirflowNetworkNode_ExternalNode_ = s;
      }

      const SimModel::SimNode_AirflowNetworkNode_ZoneNode_sequence& SimModel::
      SimNode_AirflowNetworkNode_ZoneNode () const
      {
        return this->SimNode_AirflowNetworkNode_ZoneNode_;
      }

      SimModel::SimNode_AirflowNetworkNode_ZoneNode_sequence& SimModel::
      SimNode_AirflowNetworkNode_ZoneNode ()
      {
        return this->SimNode_AirflowNetworkNode_ZoneNode_;
      }

      void SimModel::
      SimNode_AirflowNetworkNode_ZoneNode (const SimNode_AirflowNetworkNode_ZoneNode_sequence& s)
      {
        this->SimNode_AirflowNetworkNode_ZoneNode_ = s;
      }

      const SimModel::SimNode_AirFlowPort_Air_In_sequence& SimModel::
      SimNode_AirFlowPort_Air_In () const
      {
        return this->SimNode_AirFlowPort_Air_In_;
      }

      SimModel::SimNode_AirFlowPort_Air_In_sequence& SimModel::
      SimNode_AirFlowPort_Air_In ()
      {
        return this->SimNode_AirFlowPort_Air_In_;
      }

      void SimModel::
      SimNode_AirFlowPort_Air_In (const SimNode_AirFlowPort_Air_In_sequence& s)
      {
        this->SimNode_AirFlowPort_Air_In_ = s;
      }

      const SimModel::SimNode_AirFlowPort_Air_InOrOut_sequence& SimModel::
      SimNode_AirFlowPort_Air_InOrOut () const
      {
        return this->SimNode_AirFlowPort_Air_InOrOut_;
      }

      SimModel::SimNode_AirFlowPort_Air_InOrOut_sequence& SimModel::
      SimNode_AirFlowPort_Air_InOrOut ()
      {
        return this->SimNode_AirFlowPort_Air_InOrOut_;
      }

      void SimModel::
      SimNode_AirFlowPort_Air_InOrOut (const SimNode_AirFlowPort_Air_InOrOut_sequence& s)
      {
        this->SimNode_AirFlowPort_Air_InOrOut_ = s;
      }

      const SimModel::SimNode_AirFlowPort_Air_Out_sequence& SimModel::
      SimNode_AirFlowPort_Air_Out () const
      {
        return this->SimNode_AirFlowPort_Air_Out_;
      }

      SimModel::SimNode_AirFlowPort_Air_Out_sequence& SimModel::
      SimNode_AirFlowPort_Air_Out ()
      {
        return this->SimNode_AirFlowPort_Air_Out_;
      }

      void SimModel::
      SimNode_AirFlowPort_Air_Out (const SimNode_AirFlowPort_Air_Out_sequence& s)
      {
        this->SimNode_AirFlowPort_Air_Out_ = s;
      }

      const SimModel::SimNode_AirFlowPort_Default_sequence& SimModel::
      SimNode_AirFlowPort_Default () const
      {
        return this->SimNode_AirFlowPort_Default_;
      }

      SimModel::SimNode_AirFlowPort_Default_sequence& SimModel::
      SimNode_AirFlowPort_Default ()
      {
        return this->SimNode_AirFlowPort_Default_;
      }

      void SimModel::
      SimNode_AirFlowPort_Default (const SimNode_AirFlowPort_Default_sequence& s)
      {
        this->SimNode_AirFlowPort_Default_ = s;
      }

      const SimModel::SimNode_AirFlowPort_ExhaustAir_Out_sequence& SimModel::
      SimNode_AirFlowPort_ExhaustAir_Out () const
      {
        return this->SimNode_AirFlowPort_ExhaustAir_Out_;
      }

      SimModel::SimNode_AirFlowPort_ExhaustAir_Out_sequence& SimModel::
      SimNode_AirFlowPort_ExhaustAir_Out ()
      {
        return this->SimNode_AirFlowPort_ExhaustAir_Out_;
      }

      void SimModel::
      SimNode_AirFlowPort_ExhaustAir_Out (const SimNode_AirFlowPort_ExhaustAir_Out_sequence& s)
      {
        this->SimNode_AirFlowPort_ExhaustAir_Out_ = s;
      }

      const SimModel::SimNode_AirFlowPort_OutdoorAir_In_sequence& SimModel::
      SimNode_AirFlowPort_OutdoorAir_In () const
      {
        return this->SimNode_AirFlowPort_OutdoorAir_In_;
      }

      SimModel::SimNode_AirFlowPort_OutdoorAir_In_sequence& SimModel::
      SimNode_AirFlowPort_OutdoorAir_In ()
      {
        return this->SimNode_AirFlowPort_OutdoorAir_In_;
      }

      void SimModel::
      SimNode_AirFlowPort_OutdoorAir_In (const SimNode_AirFlowPort_OutdoorAir_In_sequence& s)
      {
        this->SimNode_AirFlowPort_OutdoorAir_In_ = s;
      }

      const SimModel::SimNode_ChilledWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimNode_ChilledWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimNode_ChilledWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimNode_ChilledWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimNode_ChilledWaterFlowPort_CondensedWaterOut (const SimNode_ChilledWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimNode_ChilledWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimNode_ChilledWaterFlowPort_Default_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Default () const
      {
        return this->SimNode_ChilledWaterFlowPort_Default_;
      }

      SimModel::SimNode_ChilledWaterFlowPort_Default_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Default ()
      {
        return this->SimNode_ChilledWaterFlowPort_Default_;
      }

      void SimModel::
      SimNode_ChilledWaterFlowPort_Default (const SimNode_ChilledWaterFlowPort_Default_sequence& s)
      {
        this->SimNode_ChilledWaterFlowPort_Default_ = s;
      }

      const SimModel::SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimNode_ChilledWaterFlowPort_EvaporativeWaterIn (const SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimNode_ChilledWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Water_In () const
      {
        return this->SimNode_ChilledWaterFlowPort_Water_In_;
      }

      SimModel::SimNode_ChilledWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Water_In ()
      {
        return this->SimNode_ChilledWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimNode_ChilledWaterFlowPort_Water_In (const SimNode_ChilledWaterFlowPort_Water_In_sequence& s)
      {
        this->SimNode_ChilledWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimNode_ChilledWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Water_InOrOut () const
      {
        return this->SimNode_ChilledWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimNode_ChilledWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Water_InOrOut ()
      {
        return this->SimNode_ChilledWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimNode_ChilledWaterFlowPort_Water_InOrOut (const SimNode_ChilledWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimNode_ChilledWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimNode_ChilledWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Water_Out () const
      {
        return this->SimNode_ChilledWaterFlowPort_Water_Out_;
      }

      SimModel::SimNode_ChilledWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_ChilledWaterFlowPort_Water_Out ()
      {
        return this->SimNode_ChilledWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimNode_ChilledWaterFlowPort_Water_Out (const SimNode_ChilledWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimNode_ChilledWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimNode_CondenserFlowPort_CondenserFlow_In_sequence& SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_In () const
      {
        return this->SimNode_CondenserFlowPort_CondenserFlow_In_;
      }

      SimModel::SimNode_CondenserFlowPort_CondenserFlow_In_sequence& SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_In ()
      {
        return this->SimNode_CondenserFlowPort_CondenserFlow_In_;
      }

      void SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_In (const SimNode_CondenserFlowPort_CondenserFlow_In_sequence& s)
      {
        this->SimNode_CondenserFlowPort_CondenserFlow_In_ = s;
      }

      const SimModel::SimNode_CondenserFlowPort_CondenserFlow_InOrOut_sequence& SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_InOrOut () const
      {
        return this->SimNode_CondenserFlowPort_CondenserFlow_InOrOut_;
      }

      SimModel::SimNode_CondenserFlowPort_CondenserFlow_InOrOut_sequence& SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_InOrOut ()
      {
        return this->SimNode_CondenserFlowPort_CondenserFlow_InOrOut_;
      }

      void SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_InOrOut (const SimNode_CondenserFlowPort_CondenserFlow_InOrOut_sequence& s)
      {
        this->SimNode_CondenserFlowPort_CondenserFlow_InOrOut_ = s;
      }

      const SimModel::SimNode_CondenserFlowPort_CondenserFlow_Out_sequence& SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_Out () const
      {
        return this->SimNode_CondenserFlowPort_CondenserFlow_Out_;
      }

      SimModel::SimNode_CondenserFlowPort_CondenserFlow_Out_sequence& SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_Out ()
      {
        return this->SimNode_CondenserFlowPort_CondenserFlow_Out_;
      }

      void SimModel::
      SimNode_CondenserFlowPort_CondenserFlow_Out (const SimNode_CondenserFlowPort_CondenserFlow_Out_sequence& s)
      {
        this->SimNode_CondenserFlowPort_CondenserFlow_Out_ = s;
      }

      const SimModel::SimNode_CondenserFlowPort_Default_sequence& SimModel::
      SimNode_CondenserFlowPort_Default () const
      {
        return this->SimNode_CondenserFlowPort_Default_;
      }

      SimModel::SimNode_CondenserFlowPort_Default_sequence& SimModel::
      SimNode_CondenserFlowPort_Default ()
      {
        return this->SimNode_CondenserFlowPort_Default_;
      }

      void SimModel::
      SimNode_CondenserFlowPort_Default (const SimNode_CondenserFlowPort_Default_sequence& s)
      {
        this->SimNode_CondenserFlowPort_Default_ = s;
      }

      const SimModel::SimNode_DaylightingReferencePoint_Default_sequence& SimModel::
      SimNode_DaylightingReferencePoint_Default () const
      {
        return this->SimNode_DaylightingReferencePoint_Default_;
      }

      SimModel::SimNode_DaylightingReferencePoint_Default_sequence& SimModel::
      SimNode_DaylightingReferencePoint_Default ()
      {
        return this->SimNode_DaylightingReferencePoint_Default_;
      }

      void SimModel::
      SimNode_DaylightingReferencePoint_Default (const SimNode_DaylightingReferencePoint_Default_sequence& s)
      {
        this->SimNode_DaylightingReferencePoint_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_AirLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_Default () const
      {
        return this->SimNode_DigitalControl_AirLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_AirLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_Default ()
      {
        return this->SimNode_DigitalControl_AirLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_AirLoop_Default (const SimNode_DigitalControl_AirLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_AirLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_AirLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_AirLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_AirLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_AirLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_In (const SimNode_DigitalControl_AirLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_AirLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_AirLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_AirLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_AirLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_AirLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_AirLoop_DigitalSignal_Out (const SimNode_DigitalControl_AirLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_AirLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_CHWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_Default () const
      {
        return this->SimNode_DigitalControl_CHWLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_CHWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_Default ()
      {
        return this->SimNode_DigitalControl_CHWLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_CHWLoop_Default (const SimNode_DigitalControl_CHWLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_CHWLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_CHWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_CHWLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_CHWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_CHWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_In (const SimNode_DigitalControl_CHWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_CHWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_CHWLoop_DigitalSignal_Out (const SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_CWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_Default () const
      {
        return this->SimNode_DigitalControl_CWLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_CWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_Default ()
      {
        return this->SimNode_DigitalControl_CWLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_CWLoop_Default (const SimNode_DigitalControl_CWLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_CWLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_CWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_CWLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_CWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_CWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_In (const SimNode_DigitalControl_CWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_CWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_CWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_CWLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_CWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_CWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_CWLoop_DigitalSignal_Out (const SimNode_DigitalControl_CWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_CWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_HWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_Default () const
      {
        return this->SimNode_DigitalControl_HWLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_HWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_Default ()
      {
        return this->SimNode_DigitalControl_HWLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_HWLoop_Default (const SimNode_DigitalControl_HWLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_HWLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_HWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_HWLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_HWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_HWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_In (const SimNode_DigitalControl_HWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_HWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_HWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_HWLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_HWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_HWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_HWLoop_DigitalSignal_Out (const SimNode_DigitalControl_HWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_HWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_MxWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_Default () const
      {
        return this->SimNode_DigitalControl_MxWLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_MxWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_Default ()
      {
        return this->SimNode_DigitalControl_MxWLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_MxWLoop_Default (const SimNode_DigitalControl_MxWLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_MxWLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_MxWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_MxWLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_MxWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_MxWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_In (const SimNode_DigitalControl_MxWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_MxWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_MxWLoop_DigitalSignal_Out (const SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_RFGLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_Default () const
      {
        return this->SimNode_DigitalControl_RFGLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_RFGLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_Default ()
      {
        return this->SimNode_DigitalControl_RFGLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_RFGLoop_Default (const SimNode_DigitalControl_RFGLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_RFGLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_RFGLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_RFGLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_RFGLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_RFGLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_In (const SimNode_DigitalControl_RFGLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_RFGLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_RFGLoop_DigitalSignal_Out (const SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_SHWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_Default () const
      {
        return this->SimNode_DigitalControl_SHWLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_SHWLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_Default ()
      {
        return this->SimNode_DigitalControl_SHWLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_SHWLoop_Default (const SimNode_DigitalControl_SHWLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_SHWLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_SHWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_SHWLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_SHWLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_SHWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_In (const SimNode_DigitalControl_SHWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_SHWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_SHWLoop_DigitalSignal_Out (const SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_STMLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_Default () const
      {
        return this->SimNode_DigitalControl_STMLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_STMLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_Default ()
      {
        return this->SimNode_DigitalControl_STMLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_STMLoop_Default (const SimNode_DigitalControl_STMLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_STMLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_STMLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_STMLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_STMLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_STMLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_In (const SimNode_DigitalControl_STMLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_STMLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_STMLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_STMLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_STMLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_STMLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_STMLoop_DigitalSignal_Out (const SimNode_DigitalControl_STMLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_STMLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControl_VRFLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_Default () const
      {
        return this->SimNode_DigitalControl_VRFLoop_Default_;
      }

      SimModel::SimNode_DigitalControl_VRFLoop_Default_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_Default ()
      {
        return this->SimNode_DigitalControl_VRFLoop_Default_;
      }

      void SimModel::
      SimNode_DigitalControl_VRFLoop_Default (const SimNode_DigitalControl_VRFLoop_Default_sequence& s)
      {
        this->SimNode_DigitalControl_VRFLoop_Default_ = s;
      }

      const SimModel::SimNode_DigitalControl_VRFLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControl_VRFLoop_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControl_VRFLoop_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControl_VRFLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_In (const SimNode_DigitalControl_VRFLoop_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControl_VRFLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut (const SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControl_VRFLoop_DigitalSignal_Out (const SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControlPort_Default_sequence& SimModel::
      SimNode_DigitalControlPort_Default () const
      {
        return this->SimNode_DigitalControlPort_Default_;
      }

      SimModel::SimNode_DigitalControlPort_Default_sequence& SimModel::
      SimNode_DigitalControlPort_Default ()
      {
        return this->SimNode_DigitalControlPort_Default_;
      }

      void SimModel::
      SimNode_DigitalControlPort_Default (const SimNode_DigitalControlPort_Default_sequence& s)
      {
        this->SimNode_DigitalControlPort_Default_ = s;
      }

      const SimModel::SimNode_DigitalControlPort_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalSignal_In () const
      {
        return this->SimNode_DigitalControlPort_DigitalSignal_In_;
      }

      SimModel::SimNode_DigitalControlPort_DigitalSignal_In_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalSignal_In ()
      {
        return this->SimNode_DigitalControlPort_DigitalSignal_In_;
      }

      void SimModel::
      SimNode_DigitalControlPort_DigitalSignal_In (const SimNode_DigitalControlPort_DigitalSignal_In_sequence& s)
      {
        this->SimNode_DigitalControlPort_DigitalSignal_In_ = s;
      }

      const SimModel::SimNode_DigitalControlPort_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalSignal_InOrOut () const
      {
        return this->SimNode_DigitalControlPort_DigitalSignal_InOrOut_;
      }

      SimModel::SimNode_DigitalControlPort_DigitalSignal_InOrOut_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalSignal_InOrOut ()
      {
        return this->SimNode_DigitalControlPort_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimNode_DigitalControlPort_DigitalSignal_InOrOut (const SimNode_DigitalControlPort_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimNode_DigitalControlPort_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimNode_DigitalControlPort_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalSignal_Out () const
      {
        return this->SimNode_DigitalControlPort_DigitalSignal_Out_;
      }

      SimModel::SimNode_DigitalControlPort_DigitalSignal_Out_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalSignal_Out ()
      {
        return this->SimNode_DigitalControlPort_DigitalSignal_Out_;
      }

      void SimModel::
      SimNode_DigitalControlPort_DigitalSignal_Out (const SimNode_DigitalControlPort_DigitalSignal_Out_sequence& s)
      {
        this->SimNode_DigitalControlPort_DigitalSignal_Out_ = s;
      }

      const SimModel::SimNode_DigitalControlPort_DigitalVirtual_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalVirtual () const
      {
        return this->SimNode_DigitalControlPort_DigitalVirtual_;
      }

      SimModel::SimNode_DigitalControlPort_DigitalVirtual_sequence& SimModel::
      SimNode_DigitalControlPort_DigitalVirtual ()
      {
        return this->SimNode_DigitalControlPort_DigitalVirtual_;
      }

      void SimModel::
      SimNode_DigitalControlPort_DigitalVirtual (const SimNode_DigitalControlPort_DigitalVirtual_sequence& s)
      {
        this->SimNode_DigitalControlPort_DigitalVirtual_ = s;
      }

      const SimModel::SimNode_DistributionPort_Default_sequence& SimModel::
      SimNode_DistributionPort_Default () const
      {
        return this->SimNode_DistributionPort_Default_;
      }

      SimModel::SimNode_DistributionPort_Default_sequence& SimModel::
      SimNode_DistributionPort_Default ()
      {
        return this->SimNode_DistributionPort_Default_;
      }

      void SimModel::
      SimNode_DistributionPort_Default (const SimNode_DistributionPort_Default_sequence& s)
      {
        this->SimNode_DistributionPort_Default_ = s;
      }

      const SimModel::SimNode_Docking_Default_sequence& SimModel::
      SimNode_Docking_Default () const
      {
        return this->SimNode_Docking_Default_;
      }

      SimModel::SimNode_Docking_Default_sequence& SimModel::
      SimNode_Docking_Default ()
      {
        return this->SimNode_Docking_Default_;
      }

      void SimModel::
      SimNode_Docking_Default (const SimNode_Docking_Default_sequence& s)
      {
        this->SimNode_Docking_Default_ = s;
      }

      const SimModel::SimNode_Docking_ThermalZone_sequence& SimModel::
      SimNode_Docking_ThermalZone () const
      {
        return this->SimNode_Docking_ThermalZone_;
      }

      SimModel::SimNode_Docking_ThermalZone_sequence& SimModel::
      SimNode_Docking_ThermalZone ()
      {
        return this->SimNode_Docking_ThermalZone_;
      }

      void SimModel::
      SimNode_Docking_ThermalZone (const SimNode_Docking_ThermalZone_sequence& s)
      {
        this->SimNode_Docking_ThermalZone_ = s;
      }

      const SimModel::SimNode_ElectricalFlowPort_Default_sequence& SimModel::
      SimNode_ElectricalFlowPort_Default () const
      {
        return this->SimNode_ElectricalFlowPort_Default_;
      }

      SimModel::SimNode_ElectricalFlowPort_Default_sequence& SimModel::
      SimNode_ElectricalFlowPort_Default ()
      {
        return this->SimNode_ElectricalFlowPort_Default_;
      }

      void SimModel::
      SimNode_ElectricalFlowPort_Default (const SimNode_ElectricalFlowPort_Default_sequence& s)
      {
        this->SimNode_ElectricalFlowPort_Default_ = s;
      }

      const SimModel::SimNode_ElectricalFlowPort_Electrical_In_sequence& SimModel::
      SimNode_ElectricalFlowPort_Electrical_In () const
      {
        return this->SimNode_ElectricalFlowPort_Electrical_In_;
      }

      SimModel::SimNode_ElectricalFlowPort_Electrical_In_sequence& SimModel::
      SimNode_ElectricalFlowPort_Electrical_In ()
      {
        return this->SimNode_ElectricalFlowPort_Electrical_In_;
      }

      void SimModel::
      SimNode_ElectricalFlowPort_Electrical_In (const SimNode_ElectricalFlowPort_Electrical_In_sequence& s)
      {
        this->SimNode_ElectricalFlowPort_Electrical_In_ = s;
      }

      const SimModel::SimNode_ElectricalFlowPort_Electrical_InOrOut_sequence& SimModel::
      SimNode_ElectricalFlowPort_Electrical_InOrOut () const
      {
        return this->SimNode_ElectricalFlowPort_Electrical_InOrOut_;
      }

      SimModel::SimNode_ElectricalFlowPort_Electrical_InOrOut_sequence& SimModel::
      SimNode_ElectricalFlowPort_Electrical_InOrOut ()
      {
        return this->SimNode_ElectricalFlowPort_Electrical_InOrOut_;
      }

      void SimModel::
      SimNode_ElectricalFlowPort_Electrical_InOrOut (const SimNode_ElectricalFlowPort_Electrical_InOrOut_sequence& s)
      {
        this->SimNode_ElectricalFlowPort_Electrical_InOrOut_ = s;
      }

      const SimModel::SimNode_ElectricalFlowPort_Electrical_Out_sequence& SimModel::
      SimNode_ElectricalFlowPort_Electrical_Out () const
      {
        return this->SimNode_ElectricalFlowPort_Electrical_Out_;
      }

      SimModel::SimNode_ElectricalFlowPort_Electrical_Out_sequence& SimModel::
      SimNode_ElectricalFlowPort_Electrical_Out ()
      {
        return this->SimNode_ElectricalFlowPort_Electrical_Out_;
      }

      void SimModel::
      SimNode_ElectricalFlowPort_Electrical_Out (const SimNode_ElectricalFlowPort_Electrical_Out_sequence& s)
      {
        this->SimNode_ElectricalFlowPort_Electrical_Out_ = s;
      }

      const SimModel::SimNode_HotWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimNode_HotWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimNode_HotWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimNode_HotWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimNode_HotWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimNode_HotWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimNode_HotWaterFlowPort_CondensedWaterOut (const SimNode_HotWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimNode_HotWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimNode_HotWaterFlowPort_Default_sequence& SimModel::
      SimNode_HotWaterFlowPort_Default () const
      {
        return this->SimNode_HotWaterFlowPort_Default_;
      }

      SimModel::SimNode_HotWaterFlowPort_Default_sequence& SimModel::
      SimNode_HotWaterFlowPort_Default ()
      {
        return this->SimNode_HotWaterFlowPort_Default_;
      }

      void SimModel::
      SimNode_HotWaterFlowPort_Default (const SimNode_HotWaterFlowPort_Default_sequence& s)
      {
        this->SimNode_HotWaterFlowPort_Default_ = s;
      }

      const SimModel::SimNode_HotWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimNode_HotWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimNode_HotWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimNode_HotWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimNode_HotWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimNode_HotWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimNode_HotWaterFlowPort_EvaporativeWaterIn (const SimNode_HotWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimNode_HotWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimNode_HotWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_HotWaterFlowPort_Water_In () const
      {
        return this->SimNode_HotWaterFlowPort_Water_In_;
      }

      SimModel::SimNode_HotWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_HotWaterFlowPort_Water_In ()
      {
        return this->SimNode_HotWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimNode_HotWaterFlowPort_Water_In (const SimNode_HotWaterFlowPort_Water_In_sequence& s)
      {
        this->SimNode_HotWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimNode_HotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_HotWaterFlowPort_Water_InOrOut () const
      {
        return this->SimNode_HotWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimNode_HotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_HotWaterFlowPort_Water_InOrOut ()
      {
        return this->SimNode_HotWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimNode_HotWaterFlowPort_Water_InOrOut (const SimNode_HotWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimNode_HotWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimNode_HotWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_HotWaterFlowPort_Water_Out () const
      {
        return this->SimNode_HotWaterFlowPort_Water_Out_;
      }

      SimModel::SimNode_HotWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_HotWaterFlowPort_Water_Out ()
      {
        return this->SimNode_HotWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimNode_HotWaterFlowPort_Water_Out (const SimNode_HotWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimNode_HotWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimNode_MixedWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimNode_MixedWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimNode_MixedWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimNode_MixedWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimNode_MixedWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimNode_MixedWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimNode_MixedWaterFlowPort_CondensedWaterOut (const SimNode_MixedWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimNode_MixedWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimNode_MixedWaterFlowPort_Default_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Default () const
      {
        return this->SimNode_MixedWaterFlowPort_Default_;
      }

      SimModel::SimNode_MixedWaterFlowPort_Default_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Default ()
      {
        return this->SimNode_MixedWaterFlowPort_Default_;
      }

      void SimModel::
      SimNode_MixedWaterFlowPort_Default (const SimNode_MixedWaterFlowPort_Default_sequence& s)
      {
        this->SimNode_MixedWaterFlowPort_Default_ = s;
      }

      const SimModel::SimNode_MixedWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimNode_MixedWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimNode_MixedWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimNode_MixedWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimNode_MixedWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimNode_MixedWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimNode_MixedWaterFlowPort_EvaporativeWaterIn (const SimNode_MixedWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimNode_MixedWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimNode_MixedWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Water_In () const
      {
        return this->SimNode_MixedWaterFlowPort_Water_In_;
      }

      SimModel::SimNode_MixedWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Water_In ()
      {
        return this->SimNode_MixedWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimNode_MixedWaterFlowPort_Water_In (const SimNode_MixedWaterFlowPort_Water_In_sequence& s)
      {
        this->SimNode_MixedWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimNode_MixedWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Water_InOrOut () const
      {
        return this->SimNode_MixedWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimNode_MixedWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Water_InOrOut ()
      {
        return this->SimNode_MixedWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimNode_MixedWaterFlowPort_Water_InOrOut (const SimNode_MixedWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimNode_MixedWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimNode_MixedWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Water_Out () const
      {
        return this->SimNode_MixedWaterFlowPort_Water_Out_;
      }

      SimModel::SimNode_MixedWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_MixedWaterFlowPort_Water_Out ()
      {
        return this->SimNode_MixedWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimNode_MixedWaterFlowPort_Water_Out (const SimNode_MixedWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimNode_MixedWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimNode_Node_Default_sequence& SimModel::
      SimNode_Node_Default () const
      {
        return this->SimNode_Node_Default_;
      }

      SimModel::SimNode_Node_Default_sequence& SimModel::
      SimNode_Node_Default ()
      {
        return this->SimNode_Node_Default_;
      }

      void SimModel::
      SimNode_Node_Default (const SimNode_Node_Default_sequence& s)
      {
        this->SimNode_Node_Default_ = s;
      }

      const SimModel::SimNode_Node_OutdoorAir_sequence& SimModel::
      SimNode_Node_OutdoorAir () const
      {
        return this->SimNode_Node_OutdoorAir_;
      }

      SimModel::SimNode_Node_OutdoorAir_sequence& SimModel::
      SimNode_Node_OutdoorAir ()
      {
        return this->SimNode_Node_OutdoorAir_;
      }

      void SimModel::
      SimNode_Node_OutdoorAir (const SimNode_Node_OutdoorAir_sequence& s)
      {
        this->SimNode_Node_OutdoorAir_ = s;
      }

      const SimModel::SimNode_Port_Default_sequence& SimModel::
      SimNode_Port_Default () const
      {
        return this->SimNode_Port_Default_;
      }

      SimModel::SimNode_Port_Default_sequence& SimModel::
      SimNode_Port_Default ()
      {
        return this->SimNode_Port_Default_;
      }

      void SimModel::
      SimNode_Port_Default (const SimNode_Port_Default_sequence& s)
      {
        this->SimNode_Port_Default_ = s;
      }

      const SimModel::SimNode_RefrigerationFlowPort_Default_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Default () const
      {
        return this->SimNode_RefrigerationFlowPort_Default_;
      }

      SimModel::SimNode_RefrigerationFlowPort_Default_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Default ()
      {
        return this->SimNode_RefrigerationFlowPort_Default_;
      }

      void SimModel::
      SimNode_RefrigerationFlowPort_Default (const SimNode_RefrigerationFlowPort_Default_sequence& s)
      {
        this->SimNode_RefrigerationFlowPort_Default_ = s;
      }

      const SimModel::SimNode_RefrigerationFlowPort_Refrigeration_In_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_In () const
      {
        return this->SimNode_RefrigerationFlowPort_Refrigeration_In_;
      }

      SimModel::SimNode_RefrigerationFlowPort_Refrigeration_In_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_In ()
      {
        return this->SimNode_RefrigerationFlowPort_Refrigeration_In_;
      }

      void SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_In (const SimNode_RefrigerationFlowPort_Refrigeration_In_sequence& s)
      {
        this->SimNode_RefrigerationFlowPort_Refrigeration_In_ = s;
      }

      const SimModel::SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_InOrOut () const
      {
        return this->SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_;
      }

      SimModel::SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_InOrOut ()
      {
        return this->SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_;
      }

      void SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_InOrOut (const SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& s)
      {
        this->SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_ = s;
      }

      const SimModel::SimNode_RefrigerationFlowPort_Refrigeration_Out_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_Out () const
      {
        return this->SimNode_RefrigerationFlowPort_Refrigeration_Out_;
      }

      SimModel::SimNode_RefrigerationFlowPort_Refrigeration_Out_sequence& SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_Out ()
      {
        return this->SimNode_RefrigerationFlowPort_Refrigeration_Out_;
      }

      void SimModel::
      SimNode_RefrigerationFlowPort_Refrigeration_Out (const SimNode_RefrigerationFlowPort_Refrigeration_Out_sequence& s)
      {
        this->SimNode_RefrigerationFlowPort_Refrigeration_Out_ = s;
      }

      const SimModel::SimNode_ServiceHotWaterFlowPort_Default_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Default () const
      {
        return this->SimNode_ServiceHotWaterFlowPort_Default_;
      }

      SimModel::SimNode_ServiceHotWaterFlowPort_Default_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Default ()
      {
        return this->SimNode_ServiceHotWaterFlowPort_Default_;
      }

      void SimModel::
      SimNode_ServiceHotWaterFlowPort_Default (const SimNode_ServiceHotWaterFlowPort_Default_sequence& s)
      {
        this->SimNode_ServiceHotWaterFlowPort_Default_ = s;
      }

      const SimModel::SimNode_ServiceHotWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_In () const
      {
        return this->SimNode_ServiceHotWaterFlowPort_Water_In_;
      }

      SimModel::SimNode_ServiceHotWaterFlowPort_Water_In_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_In ()
      {
        return this->SimNode_ServiceHotWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_In (const SimNode_ServiceHotWaterFlowPort_Water_In_sequence& s)
      {
        this->SimNode_ServiceHotWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimNode_ServiceHotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_InOrOut () const
      {
        return this->SimNode_ServiceHotWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimNode_ServiceHotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_InOrOut ()
      {
        return this->SimNode_ServiceHotWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_InOrOut (const SimNode_ServiceHotWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimNode_ServiceHotWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimNode_ServiceHotWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_Out () const
      {
        return this->SimNode_ServiceHotWaterFlowPort_Water_Out_;
      }

      SimModel::SimNode_ServiceHotWaterFlowPort_Water_Out_sequence& SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_Out ()
      {
        return this->SimNode_ServiceHotWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimNode_ServiceHotWaterFlowPort_Water_Out (const SimNode_ServiceHotWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimNode_ServiceHotWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimNode_SetpointNode_Default_sequence& SimModel::
      SimNode_SetpointNode_Default () const
      {
        return this->SimNode_SetpointNode_Default_;
      }

      SimModel::SimNode_SetpointNode_Default_sequence& SimModel::
      SimNode_SetpointNode_Default ()
      {
        return this->SimNode_SetpointNode_Default_;
      }

      void SimModel::
      SimNode_SetpointNode_Default (const SimNode_SetpointNode_Default_sequence& s)
      {
        this->SimNode_SetpointNode_Default_ = s;
      }

      const SimModel::SimNode_SteamFlowPort_Default_sequence& SimModel::
      SimNode_SteamFlowPort_Default () const
      {
        return this->SimNode_SteamFlowPort_Default_;
      }

      SimModel::SimNode_SteamFlowPort_Default_sequence& SimModel::
      SimNode_SteamFlowPort_Default ()
      {
        return this->SimNode_SteamFlowPort_Default_;
      }

      void SimModel::
      SimNode_SteamFlowPort_Default (const SimNode_SteamFlowPort_Default_sequence& s)
      {
        this->SimNode_SteamFlowPort_Default_ = s;
      }

      const SimModel::SimNode_SteamFlowPort_Steam_In_sequence& SimModel::
      SimNode_SteamFlowPort_Steam_In () const
      {
        return this->SimNode_SteamFlowPort_Steam_In_;
      }

      SimModel::SimNode_SteamFlowPort_Steam_In_sequence& SimModel::
      SimNode_SteamFlowPort_Steam_In ()
      {
        return this->SimNode_SteamFlowPort_Steam_In_;
      }

      void SimModel::
      SimNode_SteamFlowPort_Steam_In (const SimNode_SteamFlowPort_Steam_In_sequence& s)
      {
        this->SimNode_SteamFlowPort_Steam_In_ = s;
      }

      const SimModel::SimNode_SteamFlowPort_Steam_InOrOut_sequence& SimModel::
      SimNode_SteamFlowPort_Steam_InOrOut () const
      {
        return this->SimNode_SteamFlowPort_Steam_InOrOut_;
      }

      SimModel::SimNode_SteamFlowPort_Steam_InOrOut_sequence& SimModel::
      SimNode_SteamFlowPort_Steam_InOrOut ()
      {
        return this->SimNode_SteamFlowPort_Steam_InOrOut_;
      }

      void SimModel::
      SimNode_SteamFlowPort_Steam_InOrOut (const SimNode_SteamFlowPort_Steam_InOrOut_sequence& s)
      {
        this->SimNode_SteamFlowPort_Steam_InOrOut_ = s;
      }

      const SimModel::SimNode_SteamFlowPort_Steam_Out_sequence& SimModel::
      SimNode_SteamFlowPort_Steam_Out () const
      {
        return this->SimNode_SteamFlowPort_Steam_Out_;
      }

      SimModel::SimNode_SteamFlowPort_Steam_Out_sequence& SimModel::
      SimNode_SteamFlowPort_Steam_Out ()
      {
        return this->SimNode_SteamFlowPort_Steam_Out_;
      }

      void SimModel::
      SimNode_SteamFlowPort_Steam_Out (const SimNode_SteamFlowPort_Steam_Out_sequence& s)
      {
        this->SimNode_SteamFlowPort_Steam_Out_ = s;
      }

      const SimModel::SimNode_VarRefrigerantFlowPort_Default_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_Default () const
      {
        return this->SimNode_VarRefrigerantFlowPort_Default_;
      }

      SimModel::SimNode_VarRefrigerantFlowPort_Default_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_Default ()
      {
        return this->SimNode_VarRefrigerantFlowPort_Default_;
      }

      void SimModel::
      SimNode_VarRefrigerantFlowPort_Default (const SimNode_VarRefrigerantFlowPort_Default_sequence& s)
      {
        this->SimNode_VarRefrigerantFlowPort_Default_ = s;
      }

      const SimModel::SimNode_VarRefrigerantFlowPort_VRF_In_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_In () const
      {
        return this->SimNode_VarRefrigerantFlowPort_VRF_In_;
      }

      SimModel::SimNode_VarRefrigerantFlowPort_VRF_In_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_In ()
      {
        return this->SimNode_VarRefrigerantFlowPort_VRF_In_;
      }

      void SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_In (const SimNode_VarRefrigerantFlowPort_VRF_In_sequence& s)
      {
        this->SimNode_VarRefrigerantFlowPort_VRF_In_ = s;
      }

      const SimModel::SimNode_VarRefrigerantFlowPort_VRF_InOrOut_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_InOrOut () const
      {
        return this->SimNode_VarRefrigerantFlowPort_VRF_InOrOut_;
      }

      SimModel::SimNode_VarRefrigerantFlowPort_VRF_InOrOut_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_InOrOut ()
      {
        return this->SimNode_VarRefrigerantFlowPort_VRF_InOrOut_;
      }

      void SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_InOrOut (const SimNode_VarRefrigerantFlowPort_VRF_InOrOut_sequence& s)
      {
        this->SimNode_VarRefrigerantFlowPort_VRF_InOrOut_ = s;
      }

      const SimModel::SimNode_VarRefrigerantFlowPort_VRF_Out_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_Out () const
      {
        return this->SimNode_VarRefrigerantFlowPort_VRF_Out_;
      }

      SimModel::SimNode_VarRefrigerantFlowPort_VRF_Out_sequence& SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_Out ()
      {
        return this->SimNode_VarRefrigerantFlowPort_VRF_Out_;
      }

      void SimModel::
      SimNode_VarRefrigerantFlowPort_VRF_Out (const SimNode_VarRefrigerantFlowPort_VRF_Out_sequence& s)
      {
        this->SimNode_VarRefrigerantFlowPort_VRF_Out_ = s;
      }

      const SimModel::SimNode_ZoneAirFlowPort_Air_In_sequence& SimModel::
      SimNode_ZoneAirFlowPort_Air_In () const
      {
        return this->SimNode_ZoneAirFlowPort_Air_In_;
      }

      SimModel::SimNode_ZoneAirFlowPort_Air_In_sequence& SimModel::
      SimNode_ZoneAirFlowPort_Air_In ()
      {
        return this->SimNode_ZoneAirFlowPort_Air_In_;
      }

      void SimModel::
      SimNode_ZoneAirFlowPort_Air_In (const SimNode_ZoneAirFlowPort_Air_In_sequence& s)
      {
        this->SimNode_ZoneAirFlowPort_Air_In_ = s;
      }

      const SimModel::SimNode_ZoneAirFlowPort_Air_Out_sequence& SimModel::
      SimNode_ZoneAirFlowPort_Air_Out () const
      {
        return this->SimNode_ZoneAirFlowPort_Air_Out_;
      }

      SimModel::SimNode_ZoneAirFlowPort_Air_Out_sequence& SimModel::
      SimNode_ZoneAirFlowPort_Air_Out ()
      {
        return this->SimNode_ZoneAirFlowPort_Air_Out_;
      }

      void SimModel::
      SimNode_ZoneAirFlowPort_Air_Out (const SimNode_ZoneAirFlowPort_Air_Out_sequence& s)
      {
        this->SimNode_ZoneAirFlowPort_Air_Out_ = s;
      }

      const SimModel::SimNode_ZoneAirNode_Default_sequence& SimModel::
      SimNode_ZoneAirNode_Default () const
      {
        return this->SimNode_ZoneAirNode_Default_;
      }

      SimModel::SimNode_ZoneAirNode_Default_sequence& SimModel::
      SimNode_ZoneAirNode_Default ()
      {
        return this->SimNode_ZoneAirNode_Default_;
      }

      void SimModel::
      SimNode_ZoneAirNode_Default (const SimNode_ZoneAirNode_Default_sequence& s)
      {
        this->SimNode_ZoneAirNode_Default_ = s;
      }

      const SimModel::SimObjectOutputRequestSet_Default_Default_sequence& SimModel::
      SimObjectOutputRequestSet_Default_Default () const
      {
        return this->SimObjectOutputRequestSet_Default_Default_;
      }

      SimModel::SimObjectOutputRequestSet_Default_Default_sequence& SimModel::
      SimObjectOutputRequestSet_Default_Default ()
      {
        return this->SimObjectOutputRequestSet_Default_Default_;
      }

      void SimModel::
      SimObjectOutputRequestSet_Default_Default (const SimObjectOutputRequestSet_Default_Default_sequence& s)
      {
        this->SimObjectOutputRequestSet_Default_Default_ = s;
      }

      const SimModel::SimOpeningType_Opening_Default_sequence& SimModel::
      SimOpeningType_Opening_Default () const
      {
        return this->SimOpeningType_Opening_Default_;
      }

      SimModel::SimOpeningType_Opening_Default_sequence& SimModel::
      SimOpeningType_Opening_Default ()
      {
        return this->SimOpeningType_Opening_Default_;
      }

      void SimModel::
      SimOpeningType_Opening_Default (const SimOpeningType_Opening_Default_sequence& s)
      {
        this->SimOpeningType_Opening_Default_ = s;
      }

      const SimModel::SimOrganization_Organization_Default_sequence& SimModel::
      SimOrganization_Organization_Default () const
      {
        return this->SimOrganization_Organization_Default_;
      }

      SimModel::SimOrganization_Organization_Default_sequence& SimModel::
      SimOrganization_Organization_Default ()
      {
        return this->SimOrganization_Organization_Default_;
      }

      void SimModel::
      SimOrganization_Organization_Default (const SimOrganization_Organization_Default_sequence& s)
      {
        this->SimOrganization_Organization_Default_ = s;
      }

      const SimModel::SimOwnerHistory_Default_Default_sequence& SimModel::
      SimOwnerHistory_Default_Default () const
      {
        return this->SimOwnerHistory_Default_Default_;
      }

      SimModel::SimOwnerHistory_Default_Default_sequence& SimModel::
      SimOwnerHistory_Default_Default ()
      {
        return this->SimOwnerHistory_Default_Default_;
      }

      void SimModel::
      SimOwnerHistory_Default_Default (const SimOwnerHistory_Default_Default_sequence& s)
      {
        this->SimOwnerHistory_Default_Default_ = s;
      }

      const SimModel::SimPanel_Default_Default_sequence& SimModel::
      SimPanel_Default_Default () const
      {
        return this->SimPanel_Default_Default_;
      }

      SimModel::SimPanel_Default_Default_sequence& SimModel::
      SimPanel_Default_Default ()
      {
        return this->SimPanel_Default_Default_;
      }

      void SimModel::
      SimPanel_Default_Default (const SimPanel_Default_Default_sequence& s)
      {
        this->SimPanel_Default_Default_ = s;
      }

      const SimModel::SimPanelArrayParams_PanelArrayParams_Default_sequence& SimModel::
      SimPanelArrayParams_PanelArrayParams_Default () const
      {
        return this->SimPanelArrayParams_PanelArrayParams_Default_;
      }

      SimModel::SimPanelArrayParams_PanelArrayParams_Default_sequence& SimModel::
      SimPanelArrayParams_PanelArrayParams_Default ()
      {
        return this->SimPanelArrayParams_PanelArrayParams_Default_;
      }

      void SimModel::
      SimPanelArrayParams_PanelArrayParams_Default (const SimPanelArrayParams_PanelArrayParams_Default_sequence& s)
      {
        this->SimPanelArrayParams_PanelArrayParams_Default_ = s;
      }

      const SimModel::SimPanelArrayParams_SolarShadeArray_Default_sequence& SimModel::
      SimPanelArrayParams_SolarShadeArray_Default () const
      {
        return this->SimPanelArrayParams_SolarShadeArray_Default_;
      }

      SimModel::SimPanelArrayParams_SolarShadeArray_Default_sequence& SimModel::
      SimPanelArrayParams_SolarShadeArray_Default ()
      {
        return this->SimPanelArrayParams_SolarShadeArray_Default_;
      }

      void SimModel::
      SimPanelArrayParams_SolarShadeArray_Default (const SimPanelArrayParams_SolarShadeArray_Default_sequence& s)
      {
        this->SimPanelArrayParams_SolarShadeArray_Default_ = s;
      }

      const SimModel::SimPanelParams_GlazingPanel_Glazing_sequence& SimModel::
      SimPanelParams_GlazingPanel_Glazing () const
      {
        return this->SimPanelParams_GlazingPanel_Glazing_;
      }

      SimModel::SimPanelParams_GlazingPanel_Glazing_sequence& SimModel::
      SimPanelParams_GlazingPanel_Glazing ()
      {
        return this->SimPanelParams_GlazingPanel_Glazing_;
      }

      void SimModel::
      SimPanelParams_GlazingPanel_Glazing (const SimPanelParams_GlazingPanel_Glazing_sequence& s)
      {
        this->SimPanelParams_GlazingPanel_Glazing_ = s;
      }

      const SimModel::SimPanelParams_PanelParams_Default_sequence& SimModel::
      SimPanelParams_PanelParams_Default () const
      {
        return this->SimPanelParams_PanelParams_Default_;
      }

      SimModel::SimPanelParams_PanelParams_Default_sequence& SimModel::
      SimPanelParams_PanelParams_Default ()
      {
        return this->SimPanelParams_PanelParams_Default_;
      }

      void SimModel::
      SimPanelParams_PanelParams_Default (const SimPanelParams_PanelParams_Default_sequence& s)
      {
        this->SimPanelParams_PanelParams_Default_ = s;
      }

      const SimModel::SimPanelParams_ShadePanel_SolarShading_sequence& SimModel::
      SimPanelParams_ShadePanel_SolarShading () const
      {
        return this->SimPanelParams_ShadePanel_SolarShading_;
      }

      SimModel::SimPanelParams_ShadePanel_SolarShading_sequence& SimModel::
      SimPanelParams_ShadePanel_SolarShading ()
      {
        return this->SimPanelParams_ShadePanel_SolarShading_;
      }

      void SimModel::
      SimPanelParams_ShadePanel_SolarShading (const SimPanelParams_ShadePanel_SolarShading_sequence& s)
      {
        this->SimPanelParams_ShadePanel_SolarShading_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_C_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_C_Shape () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_C_Shape_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_C_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_C_Shape ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_C_Shape_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_C_Shape (const SimParameterizedProfileDef_ParameterizedProfile_C_Shape_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_C_Shape_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_Circle_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Circle () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Circle_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_Circle_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Circle ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Circle_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Circle (const SimParameterizedProfileDef_ParameterizedProfile_Circle_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_Circle_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_Ellipse_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Ellipse () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Ellipse_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_Ellipse_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Ellipse ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Ellipse_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Ellipse (const SimParameterizedProfileDef_ParameterizedProfile_Ellipse_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_Ellipse_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle (const SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_I_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_I_Shape () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_I_Shape_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_I_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_I_Shape ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_I_Shape_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_I_Shape (const SimParameterizedProfileDef_ParameterizedProfile_I_Shape_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_I_Shape_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_L_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_L_Shape () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_L_Shape_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_L_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_L_Shape ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_L_Shape_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_L_Shape (const SimParameterizedProfileDef_ParameterizedProfile_L_Shape_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_L_Shape_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_Rectangle_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Rectangle () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Rectangle_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_Rectangle_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Rectangle ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Rectangle_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Rectangle (const SimParameterizedProfileDef_ParameterizedProfile_Rectangle_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_Rectangle_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_T_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_T_Shape_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_T_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_T_Shape_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape (const SimParameterizedProfileDef_ParameterizedProfile_T_Shape_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_T_Shape_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_U_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_U_Shape () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_U_Shape_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_U_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_U_Shape ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_U_Shape_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_U_Shape (const SimParameterizedProfileDef_ParameterizedProfile_U_Shape_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_U_Shape_ = s;
      }

      const SimModel::SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Z_Shape () const
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_;
      }

      SimModel::SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_sequence& SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Z_Shape ()
      {
        return this->SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_;
      }

      void SimModel::
      SimParameterizedProfileDef_ParameterizedProfile_Z_Shape (const SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_sequence& s)
      {
        this->SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Bicubic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Bicubic () const
      {
        return this->SimPerformanceCurve_Mathematical_Bicubic_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Bicubic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Bicubic ()
      {
        return this->SimPerformanceCurve_Mathematical_Bicubic_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Bicubic (const SimPerformanceCurve_Mathematical_Bicubic_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Bicubic_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Biquadratic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Biquadratic () const
      {
        return this->SimPerformanceCurve_Mathematical_Biquadratic_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Biquadratic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Biquadratic ()
      {
        return this->SimPerformanceCurve_Mathematical_Biquadratic_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Biquadratic (const SimPerformanceCurve_Mathematical_Biquadratic_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Biquadratic_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Cubic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Cubic () const
      {
        return this->SimPerformanceCurve_Mathematical_Cubic_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Cubic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Cubic ()
      {
        return this->SimPerformanceCurve_Mathematical_Cubic_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Cubic (const SimPerformanceCurve_Mathematical_Cubic_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Cubic_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_DoubleExponentialDecay_sequence& SimModel::
      SimPerformanceCurve_Mathematical_DoubleExponentialDecay () const
      {
        return this->SimPerformanceCurve_Mathematical_DoubleExponentialDecay_;
      }

      SimModel::SimPerformanceCurve_Mathematical_DoubleExponentialDecay_sequence& SimModel::
      SimPerformanceCurve_Mathematical_DoubleExponentialDecay ()
      {
        return this->SimPerformanceCurve_Mathematical_DoubleExponentialDecay_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_DoubleExponentialDecay (const SimPerformanceCurve_Mathematical_DoubleExponentialDecay_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_DoubleExponentialDecay_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Exponent_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Exponent () const
      {
        return this->SimPerformanceCurve_Mathematical_Exponent_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Exponent_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Exponent ()
      {
        return this->SimPerformanceCurve_Mathematical_Exponent_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Exponent (const SimPerformanceCurve_Mathematical_Exponent_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Exponent_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_ExponentialDecay_sequence& SimModel::
      SimPerformanceCurve_Mathematical_ExponentialDecay () const
      {
        return this->SimPerformanceCurve_Mathematical_ExponentialDecay_;
      }

      SimModel::SimPerformanceCurve_Mathematical_ExponentialDecay_sequence& SimModel::
      SimPerformanceCurve_Mathematical_ExponentialDecay ()
      {
        return this->SimPerformanceCurve_Mathematical_ExponentialDecay_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_ExponentialDecay (const SimPerformanceCurve_Mathematical_ExponentialDecay_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_ExponentialDecay_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_ExponentialSkewNormal_sequence& SimModel::
      SimPerformanceCurve_Mathematical_ExponentialSkewNormal () const
      {
        return this->SimPerformanceCurve_Mathematical_ExponentialSkewNormal_;
      }

      SimModel::SimPerformanceCurve_Mathematical_ExponentialSkewNormal_sequence& SimModel::
      SimPerformanceCurve_Mathematical_ExponentialSkewNormal ()
      {
        return this->SimPerformanceCurve_Mathematical_ExponentialSkewNormal_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_ExponentialSkewNormal (const SimPerformanceCurve_Mathematical_ExponentialSkewNormal_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_ExponentialSkewNormal_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_FanPressureRise_sequence& SimModel::
      SimPerformanceCurve_Mathematical_FanPressureRise () const
      {
        return this->SimPerformanceCurve_Mathematical_FanPressureRise_;
      }

      SimModel::SimPerformanceCurve_Mathematical_FanPressureRise_sequence& SimModel::
      SimPerformanceCurve_Mathematical_FanPressureRise ()
      {
        return this->SimPerformanceCurve_Mathematical_FanPressureRise_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_FanPressureRise (const SimPerformanceCurve_Mathematical_FanPressureRise_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_FanPressureRise_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Linear_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Linear () const
      {
        return this->SimPerformanceCurve_Mathematical_Linear_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Linear_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Linear ()
      {
        return this->SimPerformanceCurve_Mathematical_Linear_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Linear (const SimPerformanceCurve_Mathematical_Linear_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Linear_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_QuadLinear_sequence& SimModel::
      SimPerformanceCurve_Mathematical_QuadLinear () const
      {
        return this->SimPerformanceCurve_Mathematical_QuadLinear_;
      }

      SimModel::SimPerformanceCurve_Mathematical_QuadLinear_sequence& SimModel::
      SimPerformanceCurve_Mathematical_QuadLinear ()
      {
        return this->SimPerformanceCurve_Mathematical_QuadLinear_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_QuadLinear (const SimPerformanceCurve_Mathematical_QuadLinear_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_QuadLinear_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Quadratic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Quadratic () const
      {
        return this->SimPerformanceCurve_Mathematical_Quadratic_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Quadratic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Quadratic ()
      {
        return this->SimPerformanceCurve_Mathematical_Quadratic_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Quadratic (const SimPerformanceCurve_Mathematical_Quadratic_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Quadratic_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_QuadraticLinear_sequence& SimModel::
      SimPerformanceCurve_Mathematical_QuadraticLinear () const
      {
        return this->SimPerformanceCurve_Mathematical_QuadraticLinear_;
      }

      SimModel::SimPerformanceCurve_Mathematical_QuadraticLinear_sequence& SimModel::
      SimPerformanceCurve_Mathematical_QuadraticLinear ()
      {
        return this->SimPerformanceCurve_Mathematical_QuadraticLinear_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_QuadraticLinear (const SimPerformanceCurve_Mathematical_QuadraticLinear_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_QuadraticLinear_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Quartic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Quartic () const
      {
        return this->SimPerformanceCurve_Mathematical_Quartic_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Quartic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Quartic ()
      {
        return this->SimPerformanceCurve_Mathematical_Quartic_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Quartic (const SimPerformanceCurve_Mathematical_Quartic_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Quartic_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_RectangularHyperbola1_sequence& SimModel::
      SimPerformanceCurve_Mathematical_RectangularHyperbola1 () const
      {
        return this->SimPerformanceCurve_Mathematical_RectangularHyperbola1_;
      }

      SimModel::SimPerformanceCurve_Mathematical_RectangularHyperbola1_sequence& SimModel::
      SimPerformanceCurve_Mathematical_RectangularHyperbola1 ()
      {
        return this->SimPerformanceCurve_Mathematical_RectangularHyperbola1_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_RectangularHyperbola1 (const SimPerformanceCurve_Mathematical_RectangularHyperbola1_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_RectangularHyperbola1_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_RectangularHyperbola2_sequence& SimModel::
      SimPerformanceCurve_Mathematical_RectangularHyperbola2 () const
      {
        return this->SimPerformanceCurve_Mathematical_RectangularHyperbola2_;
      }

      SimModel::SimPerformanceCurve_Mathematical_RectangularHyperbola2_sequence& SimModel::
      SimPerformanceCurve_Mathematical_RectangularHyperbola2 ()
      {
        return this->SimPerformanceCurve_Mathematical_RectangularHyperbola2_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_RectangularHyperbola2 (const SimPerformanceCurve_Mathematical_RectangularHyperbola2_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_RectangularHyperbola2_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_Sigmoid_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Sigmoid () const
      {
        return this->SimPerformanceCurve_Mathematical_Sigmoid_;
      }

      SimModel::SimPerformanceCurve_Mathematical_Sigmoid_sequence& SimModel::
      SimPerformanceCurve_Mathematical_Sigmoid ()
      {
        return this->SimPerformanceCurve_Mathematical_Sigmoid_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_Sigmoid (const SimPerformanceCurve_Mathematical_Sigmoid_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_Sigmoid_ = s;
      }

      const SimModel::SimPerformanceCurve_Mathematical_TriQuadratic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_TriQuadratic () const
      {
        return this->SimPerformanceCurve_Mathematical_TriQuadratic_;
      }

      SimModel::SimPerformanceCurve_Mathematical_TriQuadratic_sequence& SimModel::
      SimPerformanceCurve_Mathematical_TriQuadratic ()
      {
        return this->SimPerformanceCurve_Mathematical_TriQuadratic_;
      }

      void SimModel::
      SimPerformanceCurve_Mathematical_TriQuadratic (const SimPerformanceCurve_Mathematical_TriQuadratic_sequence& s)
      {
        this->SimPerformanceCurve_Mathematical_TriQuadratic_ = s;
      }

      const SimModel::SimPerformanceCurve_Relational_PressureDrop_sequence& SimModel::
      SimPerformanceCurve_Relational_PressureDrop () const
      {
        return this->SimPerformanceCurve_Relational_PressureDrop_;
      }

      SimModel::SimPerformanceCurve_Relational_PressureDrop_sequence& SimModel::
      SimPerformanceCurve_Relational_PressureDrop ()
      {
        return this->SimPerformanceCurve_Relational_PressureDrop_;
      }

      void SimModel::
      SimPerformanceCurve_Relational_PressureDrop (const SimPerformanceCurve_Relational_PressureDrop_sequence& s)
      {
        this->SimPerformanceCurve_Relational_PressureDrop_ = s;
      }

      const SimModel::SimPerformanceTable_Variable_MultiLookup_sequence& SimModel::
      SimPerformanceTable_Variable_MultiLookup () const
      {
        return this->SimPerformanceTable_Variable_MultiLookup_;
      }

      SimModel::SimPerformanceTable_Variable_MultiLookup_sequence& SimModel::
      SimPerformanceTable_Variable_MultiLookup ()
      {
        return this->SimPerformanceTable_Variable_MultiLookup_;
      }

      void SimModel::
      SimPerformanceTable_Variable_MultiLookup (const SimPerformanceTable_Variable_MultiLookup_sequence& s)
      {
        this->SimPerformanceTable_Variable_MultiLookup_ = s;
      }

      const SimModel::SimPerformanceTable_Variable_OneIndependent_sequence& SimModel::
      SimPerformanceTable_Variable_OneIndependent () const
      {
        return this->SimPerformanceTable_Variable_OneIndependent_;
      }

      SimModel::SimPerformanceTable_Variable_OneIndependent_sequence& SimModel::
      SimPerformanceTable_Variable_OneIndependent ()
      {
        return this->SimPerformanceTable_Variable_OneIndependent_;
      }

      void SimModel::
      SimPerformanceTable_Variable_OneIndependent (const SimPerformanceTable_Variable_OneIndependent_sequence& s)
      {
        this->SimPerformanceTable_Variable_OneIndependent_ = s;
      }

      const SimModel::SimPerformanceTable_Variable_TwoIndependent_sequence& SimModel::
      SimPerformanceTable_Variable_TwoIndependent () const
      {
        return this->SimPerformanceTable_Variable_TwoIndependent_;
      }

      SimModel::SimPerformanceTable_Variable_TwoIndependent_sequence& SimModel::
      SimPerformanceTable_Variable_TwoIndependent ()
      {
        return this->SimPerformanceTable_Variable_TwoIndependent_;
      }

      void SimModel::
      SimPerformanceTable_Variable_TwoIndependent (const SimPerformanceTable_Variable_TwoIndependent_sequence& s)
      {
        this->SimPerformanceTable_Variable_TwoIndependent_ = s;
      }

      const SimModel::SimPerson_Person_Default_sequence& SimModel::
      SimPerson_Person_Default () const
      {
        return this->SimPerson_Person_Default_;
      }

      SimModel::SimPerson_Person_Default_sequence& SimModel::
      SimPerson_Person_Default ()
      {
        return this->SimPerson_Person_Default_;
      }

      void SimModel::
      SimPerson_Person_Default (const SimPerson_Person_Default_sequence& s)
      {
        this->SimPerson_Person_Default_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_Architect_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Architect () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Architect_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_Architect_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Architect ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Architect_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Architect (const SimPersonAndOrganization_PersonAndOrganization_Architect_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_Architect_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_Default_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Default () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Default_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_Default_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Default ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Default_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Default (const SimPersonAndOrganization_PersonAndOrganization_Default_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_Default_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor (const SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant (const SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_Engineer_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Engineer () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Engineer_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_Engineer_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Engineer ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Engineer_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Engineer (const SimPersonAndOrganization_PersonAndOrganization_Engineer_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_Engineer_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_LightingDesigner () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_LightingDesigner ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_LightingDesigner (const SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_ = s;
      }

      const SimModel::SimPersonAndOrganization_PersonAndOrganization_Owner_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Owner () const
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Owner_;
      }

      SimModel::SimPersonAndOrganization_PersonAndOrganization_Owner_sequence& SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Owner ()
      {
        return this->SimPersonAndOrganization_PersonAndOrganization_Owner_;
      }

      void SimModel::
      SimPersonAndOrganization_PersonAndOrganization_Owner (const SimPersonAndOrganization_PersonAndOrganization_Owner_sequence& s)
      {
        this->SimPersonAndOrganization_PersonAndOrganization_Owner_ = s;
      }

      const SimModel::SimPlacement_Axis1Placement_Default_sequence& SimModel::
      SimPlacement_Axis1Placement_Default () const
      {
        return this->SimPlacement_Axis1Placement_Default_;
      }

      SimModel::SimPlacement_Axis1Placement_Default_sequence& SimModel::
      SimPlacement_Axis1Placement_Default ()
      {
        return this->SimPlacement_Axis1Placement_Default_;
      }

      void SimModel::
      SimPlacement_Axis1Placement_Default (const SimPlacement_Axis1Placement_Default_sequence& s)
      {
        this->SimPlacement_Axis1Placement_Default_ = s;
      }

      const SimModel::SimPlacement_Axis2Placement2D_Default_sequence& SimModel::
      SimPlacement_Axis2Placement2D_Default () const
      {
        return this->SimPlacement_Axis2Placement2D_Default_;
      }

      SimModel::SimPlacement_Axis2Placement2D_Default_sequence& SimModel::
      SimPlacement_Axis2Placement2D_Default ()
      {
        return this->SimPlacement_Axis2Placement2D_Default_;
      }

      void SimModel::
      SimPlacement_Axis2Placement2D_Default (const SimPlacement_Axis2Placement2D_Default_sequence& s)
      {
        this->SimPlacement_Axis2Placement2D_Default_ = s;
      }

      const SimModel::SimPlacement_Axis2Placement3D_Default_sequence& SimModel::
      SimPlacement_Axis2Placement3D_Default () const
      {
        return this->SimPlacement_Axis2Placement3D_Default_;
      }

      SimModel::SimPlacement_Axis2Placement3D_Default_sequence& SimModel::
      SimPlacement_Axis2Placement3D_Default ()
      {
        return this->SimPlacement_Axis2Placement3D_Default_;
      }

      void SimModel::
      SimPlacement_Axis2Placement3D_Default (const SimPlacement_Axis2Placement3D_Default_sequence& s)
      {
        this->SimPlacement_Axis2Placement3D_Default_ = s;
      }

      const SimModel::SimPort_AirFlowPort_Air_In_sequence& SimModel::
      SimPort_AirFlowPort_Air_In () const
      {
        return this->SimPort_AirFlowPort_Air_In_;
      }

      SimModel::SimPort_AirFlowPort_Air_In_sequence& SimModel::
      SimPort_AirFlowPort_Air_In ()
      {
        return this->SimPort_AirFlowPort_Air_In_;
      }

      void SimModel::
      SimPort_AirFlowPort_Air_In (const SimPort_AirFlowPort_Air_In_sequence& s)
      {
        this->SimPort_AirFlowPort_Air_In_ = s;
      }

      const SimModel::SimPort_AirFlowPort_Air_InOrOut_sequence& SimModel::
      SimPort_AirFlowPort_Air_InOrOut () const
      {
        return this->SimPort_AirFlowPort_Air_InOrOut_;
      }

      SimModel::SimPort_AirFlowPort_Air_InOrOut_sequence& SimModel::
      SimPort_AirFlowPort_Air_InOrOut ()
      {
        return this->SimPort_AirFlowPort_Air_InOrOut_;
      }

      void SimModel::
      SimPort_AirFlowPort_Air_InOrOut (const SimPort_AirFlowPort_Air_InOrOut_sequence& s)
      {
        this->SimPort_AirFlowPort_Air_InOrOut_ = s;
      }

      const SimModel::SimPort_AirFlowPort_Air_Out_sequence& SimModel::
      SimPort_AirFlowPort_Air_Out () const
      {
        return this->SimPort_AirFlowPort_Air_Out_;
      }

      SimModel::SimPort_AirFlowPort_Air_Out_sequence& SimModel::
      SimPort_AirFlowPort_Air_Out ()
      {
        return this->SimPort_AirFlowPort_Air_Out_;
      }

      void SimModel::
      SimPort_AirFlowPort_Air_Out (const SimPort_AirFlowPort_Air_Out_sequence& s)
      {
        this->SimPort_AirFlowPort_Air_Out_ = s;
      }

      const SimModel::SimPort_AirFlowPort_Default_sequence& SimModel::
      SimPort_AirFlowPort_Default () const
      {
        return this->SimPort_AirFlowPort_Default_;
      }

      SimModel::SimPort_AirFlowPort_Default_sequence& SimModel::
      SimPort_AirFlowPort_Default ()
      {
        return this->SimPort_AirFlowPort_Default_;
      }

      void SimModel::
      SimPort_AirFlowPort_Default (const SimPort_AirFlowPort_Default_sequence& s)
      {
        this->SimPort_AirFlowPort_Default_ = s;
      }

      const SimModel::SimPort_AirFlowPort_ExhaustAir_Out_sequence& SimModel::
      SimPort_AirFlowPort_ExhaustAir_Out () const
      {
        return this->SimPort_AirFlowPort_ExhaustAir_Out_;
      }

      SimModel::SimPort_AirFlowPort_ExhaustAir_Out_sequence& SimModel::
      SimPort_AirFlowPort_ExhaustAir_Out ()
      {
        return this->SimPort_AirFlowPort_ExhaustAir_Out_;
      }

      void SimModel::
      SimPort_AirFlowPort_ExhaustAir_Out (const SimPort_AirFlowPort_ExhaustAir_Out_sequence& s)
      {
        this->SimPort_AirFlowPort_ExhaustAir_Out_ = s;
      }

      const SimModel::SimPort_AirFlowPort_OutdoorAir_In_sequence& SimModel::
      SimPort_AirFlowPort_OutdoorAir_In () const
      {
        return this->SimPort_AirFlowPort_OutdoorAir_In_;
      }

      SimModel::SimPort_AirFlowPort_OutdoorAir_In_sequence& SimModel::
      SimPort_AirFlowPort_OutdoorAir_In ()
      {
        return this->SimPort_AirFlowPort_OutdoorAir_In_;
      }

      void SimModel::
      SimPort_AirFlowPort_OutdoorAir_In (const SimPort_AirFlowPort_OutdoorAir_In_sequence& s)
      {
        this->SimPort_AirFlowPort_OutdoorAir_In_ = s;
      }

      const SimModel::SimPort_ChilledWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimPort_ChilledWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimPort_ChilledWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimPort_ChilledWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimPort_ChilledWaterFlowPort_CondensedWaterOut (const SimPort_ChilledWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimPort_ChilledWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimPort_ChilledWaterFlowPort_Default_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Default () const
      {
        return this->SimPort_ChilledWaterFlowPort_Default_;
      }

      SimModel::SimPort_ChilledWaterFlowPort_Default_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Default ()
      {
        return this->SimPort_ChilledWaterFlowPort_Default_;
      }

      void SimModel::
      SimPort_ChilledWaterFlowPort_Default (const SimPort_ChilledWaterFlowPort_Default_sequence& s)
      {
        this->SimPort_ChilledWaterFlowPort_Default_ = s;
      }

      const SimModel::SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimPort_ChilledWaterFlowPort_EvaporativeWaterIn (const SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimPort_ChilledWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Water_In () const
      {
        return this->SimPort_ChilledWaterFlowPort_Water_In_;
      }

      SimModel::SimPort_ChilledWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Water_In ()
      {
        return this->SimPort_ChilledWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimPort_ChilledWaterFlowPort_Water_In (const SimPort_ChilledWaterFlowPort_Water_In_sequence& s)
      {
        this->SimPort_ChilledWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimPort_ChilledWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Water_InOrOut () const
      {
        return this->SimPort_ChilledWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimPort_ChilledWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Water_InOrOut ()
      {
        return this->SimPort_ChilledWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimPort_ChilledWaterFlowPort_Water_InOrOut (const SimPort_ChilledWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimPort_ChilledWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimPort_ChilledWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Water_Out () const
      {
        return this->SimPort_ChilledWaterFlowPort_Water_Out_;
      }

      SimModel::SimPort_ChilledWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_ChilledWaterFlowPort_Water_Out ()
      {
        return this->SimPort_ChilledWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimPort_ChilledWaterFlowPort_Water_Out (const SimPort_ChilledWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimPort_ChilledWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimPort_CondenserFlowPort_CondenserFlow_In_sequence& SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_In () const
      {
        return this->SimPort_CondenserFlowPort_CondenserFlow_In_;
      }

      SimModel::SimPort_CondenserFlowPort_CondenserFlow_In_sequence& SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_In ()
      {
        return this->SimPort_CondenserFlowPort_CondenserFlow_In_;
      }

      void SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_In (const SimPort_CondenserFlowPort_CondenserFlow_In_sequence& s)
      {
        this->SimPort_CondenserFlowPort_CondenserFlow_In_ = s;
      }

      const SimModel::SimPort_CondenserFlowPort_CondenserFlow_InOrOut_sequence& SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_InOrOut () const
      {
        return this->SimPort_CondenserFlowPort_CondenserFlow_InOrOut_;
      }

      SimModel::SimPort_CondenserFlowPort_CondenserFlow_InOrOut_sequence& SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_InOrOut ()
      {
        return this->SimPort_CondenserFlowPort_CondenserFlow_InOrOut_;
      }

      void SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_InOrOut (const SimPort_CondenserFlowPort_CondenserFlow_InOrOut_sequence& s)
      {
        this->SimPort_CondenserFlowPort_CondenserFlow_InOrOut_ = s;
      }

      const SimModel::SimPort_CondenserFlowPort_CondenserFlow_Out_sequence& SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_Out () const
      {
        return this->SimPort_CondenserFlowPort_CondenserFlow_Out_;
      }

      SimModel::SimPort_CondenserFlowPort_CondenserFlow_Out_sequence& SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_Out ()
      {
        return this->SimPort_CondenserFlowPort_CondenserFlow_Out_;
      }

      void SimModel::
      SimPort_CondenserFlowPort_CondenserFlow_Out (const SimPort_CondenserFlowPort_CondenserFlow_Out_sequence& s)
      {
        this->SimPort_CondenserFlowPort_CondenserFlow_Out_ = s;
      }

      const SimModel::SimPort_CondenserFlowPort_Default_sequence& SimModel::
      SimPort_CondenserFlowPort_Default () const
      {
        return this->SimPort_CondenserFlowPort_Default_;
      }

      SimModel::SimPort_CondenserFlowPort_Default_sequence& SimModel::
      SimPort_CondenserFlowPort_Default ()
      {
        return this->SimPort_CondenserFlowPort_Default_;
      }

      void SimModel::
      SimPort_CondenserFlowPort_Default (const SimPort_CondenserFlowPort_Default_sequence& s)
      {
        this->SimPort_CondenserFlowPort_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_AirLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_Default () const
      {
        return this->SimPort_DigitalControl_AirLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_AirLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_Default ()
      {
        return this->SimPort_DigitalControl_AirLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_AirLoop_Default (const SimPort_DigitalControl_AirLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_AirLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_AirLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_AirLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_AirLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_AirLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_In (const SimPort_DigitalControl_AirLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_AirLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_AirLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_AirLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_AirLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_AirLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_AirLoop_DigitalSignal_Out (const SimPort_DigitalControl_AirLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_AirLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_CHWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_Default () const
      {
        return this->SimPort_DigitalControl_CHWLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_CHWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_Default ()
      {
        return this->SimPort_DigitalControl_CHWLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_CHWLoop_Default (const SimPort_DigitalControl_CHWLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_CHWLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_CHWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_CHWLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_CHWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_CHWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_In (const SimPort_DigitalControl_CHWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_CHWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_CHWLoop_DigitalSignal_Out (const SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_CWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_Default () const
      {
        return this->SimPort_DigitalControl_CWLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_CWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_Default ()
      {
        return this->SimPort_DigitalControl_CWLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_CWLoop_Default (const SimPort_DigitalControl_CWLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_CWLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_CWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_CWLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_CWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_CWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_In (const SimPort_DigitalControl_CWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_CWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_CWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_CWLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_CWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_CWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_CWLoop_DigitalSignal_Out (const SimPort_DigitalControl_CWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_CWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_HWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_Default () const
      {
        return this->SimPort_DigitalControl_HWLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_HWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_Default ()
      {
        return this->SimPort_DigitalControl_HWLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_HWLoop_Default (const SimPort_DigitalControl_HWLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_HWLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_HWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_HWLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_HWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_HWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_In (const SimPort_DigitalControl_HWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_HWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_HWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_HWLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_HWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_HWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_HWLoop_DigitalSignal_Out (const SimPort_DigitalControl_HWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_HWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_MxWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_Default () const
      {
        return this->SimPort_DigitalControl_MxWLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_MxWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_Default ()
      {
        return this->SimPort_DigitalControl_MxWLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_MxWLoop_Default (const SimPort_DigitalControl_MxWLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_MxWLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_MxWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_MxWLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_MxWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_MxWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_In (const SimPort_DigitalControl_MxWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_MxWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_MxWLoop_DigitalSignal_Out (const SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_RFGLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_Default () const
      {
        return this->SimPort_DigitalControl_RFGLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_RFGLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_Default ()
      {
        return this->SimPort_DigitalControl_RFGLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_RFGLoop_Default (const SimPort_DigitalControl_RFGLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_RFGLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_RFGLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_RFGLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_RFGLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_RFGLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_In (const SimPort_DigitalControl_RFGLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_RFGLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_RFGLoop_DigitalSignal_Out (const SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_SHWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_Default () const
      {
        return this->SimPort_DigitalControl_SHWLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_SHWLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_Default ()
      {
        return this->SimPort_DigitalControl_SHWLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_SHWLoop_Default (const SimPort_DigitalControl_SHWLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_SHWLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_SHWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_SHWLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_SHWLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_SHWLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_In (const SimPort_DigitalControl_SHWLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_SHWLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_SHWLoop_DigitalSignal_Out (const SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_STMLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_Default () const
      {
        return this->SimPort_DigitalControl_STMLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_STMLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_Default ()
      {
        return this->SimPort_DigitalControl_STMLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_STMLoop_Default (const SimPort_DigitalControl_STMLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_STMLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_STMLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_STMLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_STMLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_STMLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_In (const SimPort_DigitalControl_STMLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_STMLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_STMLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_STMLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_STMLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_STMLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_STMLoop_DigitalSignal_Out (const SimPort_DigitalControl_STMLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_STMLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControl_VRFLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_Default () const
      {
        return this->SimPort_DigitalControl_VRFLoop_Default_;
      }

      SimModel::SimPort_DigitalControl_VRFLoop_Default_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_Default ()
      {
        return this->SimPort_DigitalControl_VRFLoop_Default_;
      }

      void SimModel::
      SimPort_DigitalControl_VRFLoop_Default (const SimPort_DigitalControl_VRFLoop_Default_sequence& s)
      {
        this->SimPort_DigitalControl_VRFLoop_Default_ = s;
      }

      const SimModel::SimPort_DigitalControl_VRFLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControl_VRFLoop_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControl_VRFLoop_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControl_VRFLoop_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_In (const SimPort_DigitalControl_VRFLoop_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControl_VRFLoop_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut (const SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControl_VRFLoop_DigitalSignal_Out (const SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControlPort_Default_sequence& SimModel::
      SimPort_DigitalControlPort_Default () const
      {
        return this->SimPort_DigitalControlPort_Default_;
      }

      SimModel::SimPort_DigitalControlPort_Default_sequence& SimModel::
      SimPort_DigitalControlPort_Default ()
      {
        return this->SimPort_DigitalControlPort_Default_;
      }

      void SimModel::
      SimPort_DigitalControlPort_Default (const SimPort_DigitalControlPort_Default_sequence& s)
      {
        this->SimPort_DigitalControlPort_Default_ = s;
      }

      const SimModel::SimPort_DigitalControlPort_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalSignal_In () const
      {
        return this->SimPort_DigitalControlPort_DigitalSignal_In_;
      }

      SimModel::SimPort_DigitalControlPort_DigitalSignal_In_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalSignal_In ()
      {
        return this->SimPort_DigitalControlPort_DigitalSignal_In_;
      }

      void SimModel::
      SimPort_DigitalControlPort_DigitalSignal_In (const SimPort_DigitalControlPort_DigitalSignal_In_sequence& s)
      {
        this->SimPort_DigitalControlPort_DigitalSignal_In_ = s;
      }

      const SimModel::SimPort_DigitalControlPort_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalSignal_InOrOut () const
      {
        return this->SimPort_DigitalControlPort_DigitalSignal_InOrOut_;
      }

      SimModel::SimPort_DigitalControlPort_DigitalSignal_InOrOut_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalSignal_InOrOut ()
      {
        return this->SimPort_DigitalControlPort_DigitalSignal_InOrOut_;
      }

      void SimModel::
      SimPort_DigitalControlPort_DigitalSignal_InOrOut (const SimPort_DigitalControlPort_DigitalSignal_InOrOut_sequence& s)
      {
        this->SimPort_DigitalControlPort_DigitalSignal_InOrOut_ = s;
      }

      const SimModel::SimPort_DigitalControlPort_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalSignal_Out () const
      {
        return this->SimPort_DigitalControlPort_DigitalSignal_Out_;
      }

      SimModel::SimPort_DigitalControlPort_DigitalSignal_Out_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalSignal_Out ()
      {
        return this->SimPort_DigitalControlPort_DigitalSignal_Out_;
      }

      void SimModel::
      SimPort_DigitalControlPort_DigitalSignal_Out (const SimPort_DigitalControlPort_DigitalSignal_Out_sequence& s)
      {
        this->SimPort_DigitalControlPort_DigitalSignal_Out_ = s;
      }

      const SimModel::SimPort_DigitalControlPort_DigitalVirtual_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalVirtual () const
      {
        return this->SimPort_DigitalControlPort_DigitalVirtual_;
      }

      SimModel::SimPort_DigitalControlPort_DigitalVirtual_sequence& SimModel::
      SimPort_DigitalControlPort_DigitalVirtual ()
      {
        return this->SimPort_DigitalControlPort_DigitalVirtual_;
      }

      void SimModel::
      SimPort_DigitalControlPort_DigitalVirtual (const SimPort_DigitalControlPort_DigitalVirtual_sequence& s)
      {
        this->SimPort_DigitalControlPort_DigitalVirtual_ = s;
      }

      const SimModel::SimPort_DistributionPort_Default_sequence& SimModel::
      SimPort_DistributionPort_Default () const
      {
        return this->SimPort_DistributionPort_Default_;
      }

      SimModel::SimPort_DistributionPort_Default_sequence& SimModel::
      SimPort_DistributionPort_Default ()
      {
        return this->SimPort_DistributionPort_Default_;
      }

      void SimModel::
      SimPort_DistributionPort_Default (const SimPort_DistributionPort_Default_sequence& s)
      {
        this->SimPort_DistributionPort_Default_ = s;
      }

      const SimModel::SimPort_Docking_Default_sequence& SimModel::
      SimPort_Docking_Default () const
      {
        return this->SimPort_Docking_Default_;
      }

      SimModel::SimPort_Docking_Default_sequence& SimModel::
      SimPort_Docking_Default ()
      {
        return this->SimPort_Docking_Default_;
      }

      void SimModel::
      SimPort_Docking_Default (const SimPort_Docking_Default_sequence& s)
      {
        this->SimPort_Docking_Default_ = s;
      }

      const SimModel::SimPort_Docking_ThermalZone_sequence& SimModel::
      SimPort_Docking_ThermalZone () const
      {
        return this->SimPort_Docking_ThermalZone_;
      }

      SimModel::SimPort_Docking_ThermalZone_sequence& SimModel::
      SimPort_Docking_ThermalZone ()
      {
        return this->SimPort_Docking_ThermalZone_;
      }

      void SimModel::
      SimPort_Docking_ThermalZone (const SimPort_Docking_ThermalZone_sequence& s)
      {
        this->SimPort_Docking_ThermalZone_ = s;
      }

      const SimModel::SimPort_ElectricalFlowPort_Default_sequence& SimModel::
      SimPort_ElectricalFlowPort_Default () const
      {
        return this->SimPort_ElectricalFlowPort_Default_;
      }

      SimModel::SimPort_ElectricalFlowPort_Default_sequence& SimModel::
      SimPort_ElectricalFlowPort_Default ()
      {
        return this->SimPort_ElectricalFlowPort_Default_;
      }

      void SimModel::
      SimPort_ElectricalFlowPort_Default (const SimPort_ElectricalFlowPort_Default_sequence& s)
      {
        this->SimPort_ElectricalFlowPort_Default_ = s;
      }

      const SimModel::SimPort_ElectricalFlowPort_Electrical_In_sequence& SimModel::
      SimPort_ElectricalFlowPort_Electrical_In () const
      {
        return this->SimPort_ElectricalFlowPort_Electrical_In_;
      }

      SimModel::SimPort_ElectricalFlowPort_Electrical_In_sequence& SimModel::
      SimPort_ElectricalFlowPort_Electrical_In ()
      {
        return this->SimPort_ElectricalFlowPort_Electrical_In_;
      }

      void SimModel::
      SimPort_ElectricalFlowPort_Electrical_In (const SimPort_ElectricalFlowPort_Electrical_In_sequence& s)
      {
        this->SimPort_ElectricalFlowPort_Electrical_In_ = s;
      }

      const SimModel::SimPort_ElectricalFlowPort_Electrical_InOrOut_sequence& SimModel::
      SimPort_ElectricalFlowPort_Electrical_InOrOut () const
      {
        return this->SimPort_ElectricalFlowPort_Electrical_InOrOut_;
      }

      SimModel::SimPort_ElectricalFlowPort_Electrical_InOrOut_sequence& SimModel::
      SimPort_ElectricalFlowPort_Electrical_InOrOut ()
      {
        return this->SimPort_ElectricalFlowPort_Electrical_InOrOut_;
      }

      void SimModel::
      SimPort_ElectricalFlowPort_Electrical_InOrOut (const SimPort_ElectricalFlowPort_Electrical_InOrOut_sequence& s)
      {
        this->SimPort_ElectricalFlowPort_Electrical_InOrOut_ = s;
      }

      const SimModel::SimPort_ElectricalFlowPort_Electrical_Out_sequence& SimModel::
      SimPort_ElectricalFlowPort_Electrical_Out () const
      {
        return this->SimPort_ElectricalFlowPort_Electrical_Out_;
      }

      SimModel::SimPort_ElectricalFlowPort_Electrical_Out_sequence& SimModel::
      SimPort_ElectricalFlowPort_Electrical_Out ()
      {
        return this->SimPort_ElectricalFlowPort_Electrical_Out_;
      }

      void SimModel::
      SimPort_ElectricalFlowPort_Electrical_Out (const SimPort_ElectricalFlowPort_Electrical_Out_sequence& s)
      {
        this->SimPort_ElectricalFlowPort_Electrical_Out_ = s;
      }

      const SimModel::SimPort_HotWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimPort_HotWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimPort_HotWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimPort_HotWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimPort_HotWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimPort_HotWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimPort_HotWaterFlowPort_CondensedWaterOut (const SimPort_HotWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimPort_HotWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimPort_HotWaterFlowPort_Default_sequence& SimModel::
      SimPort_HotWaterFlowPort_Default () const
      {
        return this->SimPort_HotWaterFlowPort_Default_;
      }

      SimModel::SimPort_HotWaterFlowPort_Default_sequence& SimModel::
      SimPort_HotWaterFlowPort_Default ()
      {
        return this->SimPort_HotWaterFlowPort_Default_;
      }

      void SimModel::
      SimPort_HotWaterFlowPort_Default (const SimPort_HotWaterFlowPort_Default_sequence& s)
      {
        this->SimPort_HotWaterFlowPort_Default_ = s;
      }

      const SimModel::SimPort_HotWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimPort_HotWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimPort_HotWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimPort_HotWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimPort_HotWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimPort_HotWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimPort_HotWaterFlowPort_EvaporativeWaterIn (const SimPort_HotWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimPort_HotWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimPort_HotWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_HotWaterFlowPort_Water_In () const
      {
        return this->SimPort_HotWaterFlowPort_Water_In_;
      }

      SimModel::SimPort_HotWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_HotWaterFlowPort_Water_In ()
      {
        return this->SimPort_HotWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimPort_HotWaterFlowPort_Water_In (const SimPort_HotWaterFlowPort_Water_In_sequence& s)
      {
        this->SimPort_HotWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimPort_HotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_HotWaterFlowPort_Water_InOrOut () const
      {
        return this->SimPort_HotWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimPort_HotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_HotWaterFlowPort_Water_InOrOut ()
      {
        return this->SimPort_HotWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimPort_HotWaterFlowPort_Water_InOrOut (const SimPort_HotWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimPort_HotWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimPort_HotWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_HotWaterFlowPort_Water_Out () const
      {
        return this->SimPort_HotWaterFlowPort_Water_Out_;
      }

      SimModel::SimPort_HotWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_HotWaterFlowPort_Water_Out ()
      {
        return this->SimPort_HotWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimPort_HotWaterFlowPort_Water_Out (const SimPort_HotWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimPort_HotWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimPort_MixedWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimPort_MixedWaterFlowPort_CondensedWaterOut () const
      {
        return this->SimPort_MixedWaterFlowPort_CondensedWaterOut_;
      }

      SimModel::SimPort_MixedWaterFlowPort_CondensedWaterOut_sequence& SimModel::
      SimPort_MixedWaterFlowPort_CondensedWaterOut ()
      {
        return this->SimPort_MixedWaterFlowPort_CondensedWaterOut_;
      }

      void SimModel::
      SimPort_MixedWaterFlowPort_CondensedWaterOut (const SimPort_MixedWaterFlowPort_CondensedWaterOut_sequence& s)
      {
        this->SimPort_MixedWaterFlowPort_CondensedWaterOut_ = s;
      }

      const SimModel::SimPort_MixedWaterFlowPort_Default_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Default () const
      {
        return this->SimPort_MixedWaterFlowPort_Default_;
      }

      SimModel::SimPort_MixedWaterFlowPort_Default_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Default ()
      {
        return this->SimPort_MixedWaterFlowPort_Default_;
      }

      void SimModel::
      SimPort_MixedWaterFlowPort_Default (const SimPort_MixedWaterFlowPort_Default_sequence& s)
      {
        this->SimPort_MixedWaterFlowPort_Default_ = s;
      }

      const SimModel::SimPort_MixedWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimPort_MixedWaterFlowPort_EvaporativeWaterIn () const
      {
        return this->SimPort_MixedWaterFlowPort_EvaporativeWaterIn_;
      }

      SimModel::SimPort_MixedWaterFlowPort_EvaporativeWaterIn_sequence& SimModel::
      SimPort_MixedWaterFlowPort_EvaporativeWaterIn ()
      {
        return this->SimPort_MixedWaterFlowPort_EvaporativeWaterIn_;
      }

      void SimModel::
      SimPort_MixedWaterFlowPort_EvaporativeWaterIn (const SimPort_MixedWaterFlowPort_EvaporativeWaterIn_sequence& s)
      {
        this->SimPort_MixedWaterFlowPort_EvaporativeWaterIn_ = s;
      }

      const SimModel::SimPort_MixedWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Water_In () const
      {
        return this->SimPort_MixedWaterFlowPort_Water_In_;
      }

      SimModel::SimPort_MixedWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Water_In ()
      {
        return this->SimPort_MixedWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimPort_MixedWaterFlowPort_Water_In (const SimPort_MixedWaterFlowPort_Water_In_sequence& s)
      {
        this->SimPort_MixedWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimPort_MixedWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Water_InOrOut () const
      {
        return this->SimPort_MixedWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimPort_MixedWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Water_InOrOut ()
      {
        return this->SimPort_MixedWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimPort_MixedWaterFlowPort_Water_InOrOut (const SimPort_MixedWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimPort_MixedWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimPort_MixedWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Water_Out () const
      {
        return this->SimPort_MixedWaterFlowPort_Water_Out_;
      }

      SimModel::SimPort_MixedWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_MixedWaterFlowPort_Water_Out ()
      {
        return this->SimPort_MixedWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimPort_MixedWaterFlowPort_Water_Out (const SimPort_MixedWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimPort_MixedWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimPort_Port_Default_sequence& SimModel::
      SimPort_Port_Default () const
      {
        return this->SimPort_Port_Default_;
      }

      SimModel::SimPort_Port_Default_sequence& SimModel::
      SimPort_Port_Default ()
      {
        return this->SimPort_Port_Default_;
      }

      void SimModel::
      SimPort_Port_Default (const SimPort_Port_Default_sequence& s)
      {
        this->SimPort_Port_Default_ = s;
      }

      const SimModel::SimPort_RefrigerationFlowPort_Default_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Default () const
      {
        return this->SimPort_RefrigerationFlowPort_Default_;
      }

      SimModel::SimPort_RefrigerationFlowPort_Default_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Default ()
      {
        return this->SimPort_RefrigerationFlowPort_Default_;
      }

      void SimModel::
      SimPort_RefrigerationFlowPort_Default (const SimPort_RefrigerationFlowPort_Default_sequence& s)
      {
        this->SimPort_RefrigerationFlowPort_Default_ = s;
      }

      const SimModel::SimPort_RefrigerationFlowPort_Refrigeration_In_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_In () const
      {
        return this->SimPort_RefrigerationFlowPort_Refrigeration_In_;
      }

      SimModel::SimPort_RefrigerationFlowPort_Refrigeration_In_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_In ()
      {
        return this->SimPort_RefrigerationFlowPort_Refrigeration_In_;
      }

      void SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_In (const SimPort_RefrigerationFlowPort_Refrigeration_In_sequence& s)
      {
        this->SimPort_RefrigerationFlowPort_Refrigeration_In_ = s;
      }

      const SimModel::SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_InOrOut () const
      {
        return this->SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_;
      }

      SimModel::SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_InOrOut ()
      {
        return this->SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_;
      }

      void SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_InOrOut (const SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_sequence& s)
      {
        this->SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_ = s;
      }

      const SimModel::SimPort_RefrigerationFlowPort_Refrigeration_Out_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_Out () const
      {
        return this->SimPort_RefrigerationFlowPort_Refrigeration_Out_;
      }

      SimModel::SimPort_RefrigerationFlowPort_Refrigeration_Out_sequence& SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_Out ()
      {
        return this->SimPort_RefrigerationFlowPort_Refrigeration_Out_;
      }

      void SimModel::
      SimPort_RefrigerationFlowPort_Refrigeration_Out (const SimPort_RefrigerationFlowPort_Refrigeration_Out_sequence& s)
      {
        this->SimPort_RefrigerationFlowPort_Refrigeration_Out_ = s;
      }

      const SimModel::SimPort_ServiceHotWaterFlowPort_Default_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Default () const
      {
        return this->SimPort_ServiceHotWaterFlowPort_Default_;
      }

      SimModel::SimPort_ServiceHotWaterFlowPort_Default_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Default ()
      {
        return this->SimPort_ServiceHotWaterFlowPort_Default_;
      }

      void SimModel::
      SimPort_ServiceHotWaterFlowPort_Default (const SimPort_ServiceHotWaterFlowPort_Default_sequence& s)
      {
        this->SimPort_ServiceHotWaterFlowPort_Default_ = s;
      }

      const SimModel::SimPort_ServiceHotWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_In () const
      {
        return this->SimPort_ServiceHotWaterFlowPort_Water_In_;
      }

      SimModel::SimPort_ServiceHotWaterFlowPort_Water_In_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_In ()
      {
        return this->SimPort_ServiceHotWaterFlowPort_Water_In_;
      }

      void SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_In (const SimPort_ServiceHotWaterFlowPort_Water_In_sequence& s)
      {
        this->SimPort_ServiceHotWaterFlowPort_Water_In_ = s;
      }

      const SimModel::SimPort_ServiceHotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_InOrOut () const
      {
        return this->SimPort_ServiceHotWaterFlowPort_Water_InOrOut_;
      }

      SimModel::SimPort_ServiceHotWaterFlowPort_Water_InOrOut_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_InOrOut ()
      {
        return this->SimPort_ServiceHotWaterFlowPort_Water_InOrOut_;
      }

      void SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_InOrOut (const SimPort_ServiceHotWaterFlowPort_Water_InOrOut_sequence& s)
      {
        this->SimPort_ServiceHotWaterFlowPort_Water_InOrOut_ = s;
      }

      const SimModel::SimPort_ServiceHotWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_Out () const
      {
        return this->SimPort_ServiceHotWaterFlowPort_Water_Out_;
      }

      SimModel::SimPort_ServiceHotWaterFlowPort_Water_Out_sequence& SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_Out ()
      {
        return this->SimPort_ServiceHotWaterFlowPort_Water_Out_;
      }

      void SimModel::
      SimPort_ServiceHotWaterFlowPort_Water_Out (const SimPort_ServiceHotWaterFlowPort_Water_Out_sequence& s)
      {
        this->SimPort_ServiceHotWaterFlowPort_Water_Out_ = s;
      }

      const SimModel::SimPort_SteamFlowPort_Default_sequence& SimModel::
      SimPort_SteamFlowPort_Default () const
      {
        return this->SimPort_SteamFlowPort_Default_;
      }

      SimModel::SimPort_SteamFlowPort_Default_sequence& SimModel::
      SimPort_SteamFlowPort_Default ()
      {
        return this->SimPort_SteamFlowPort_Default_;
      }

      void SimModel::
      SimPort_SteamFlowPort_Default (const SimPort_SteamFlowPort_Default_sequence& s)
      {
        this->SimPort_SteamFlowPort_Default_ = s;
      }

      const SimModel::SimPort_SteamFlowPort_Steam_In_sequence& SimModel::
      SimPort_SteamFlowPort_Steam_In () const
      {
        return this->SimPort_SteamFlowPort_Steam_In_;
      }

      SimModel::SimPort_SteamFlowPort_Steam_In_sequence& SimModel::
      SimPort_SteamFlowPort_Steam_In ()
      {
        return this->SimPort_SteamFlowPort_Steam_In_;
      }

      void SimModel::
      SimPort_SteamFlowPort_Steam_In (const SimPort_SteamFlowPort_Steam_In_sequence& s)
      {
        this->SimPort_SteamFlowPort_Steam_In_ = s;
      }

      const SimModel::SimPort_SteamFlowPort_Steam_InOrOut_sequence& SimModel::
      SimPort_SteamFlowPort_Steam_InOrOut () const
      {
        return this->SimPort_SteamFlowPort_Steam_InOrOut_;
      }

      SimModel::SimPort_SteamFlowPort_Steam_InOrOut_sequence& SimModel::
      SimPort_SteamFlowPort_Steam_InOrOut ()
      {
        return this->SimPort_SteamFlowPort_Steam_InOrOut_;
      }

      void SimModel::
      SimPort_SteamFlowPort_Steam_InOrOut (const SimPort_SteamFlowPort_Steam_InOrOut_sequence& s)
      {
        this->SimPort_SteamFlowPort_Steam_InOrOut_ = s;
      }

      const SimModel::SimPort_SteamFlowPort_Steam_Out_sequence& SimModel::
      SimPort_SteamFlowPort_Steam_Out () const
      {
        return this->SimPort_SteamFlowPort_Steam_Out_;
      }

      SimModel::SimPort_SteamFlowPort_Steam_Out_sequence& SimModel::
      SimPort_SteamFlowPort_Steam_Out ()
      {
        return this->SimPort_SteamFlowPort_Steam_Out_;
      }

      void SimModel::
      SimPort_SteamFlowPort_Steam_Out (const SimPort_SteamFlowPort_Steam_Out_sequence& s)
      {
        this->SimPort_SteamFlowPort_Steam_Out_ = s;
      }

      const SimModel::SimPort_VarRefrigerantFlowPort_Default_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_Default () const
      {
        return this->SimPort_VarRefrigerantFlowPort_Default_;
      }

      SimModel::SimPort_VarRefrigerantFlowPort_Default_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_Default ()
      {
        return this->SimPort_VarRefrigerantFlowPort_Default_;
      }

      void SimModel::
      SimPort_VarRefrigerantFlowPort_Default (const SimPort_VarRefrigerantFlowPort_Default_sequence& s)
      {
        this->SimPort_VarRefrigerantFlowPort_Default_ = s;
      }

      const SimModel::SimPort_VarRefrigerantFlowPort_VRF_In_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_In () const
      {
        return this->SimPort_VarRefrigerantFlowPort_VRF_In_;
      }

      SimModel::SimPort_VarRefrigerantFlowPort_VRF_In_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_In ()
      {
        return this->SimPort_VarRefrigerantFlowPort_VRF_In_;
      }

      void SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_In (const SimPort_VarRefrigerantFlowPort_VRF_In_sequence& s)
      {
        this->SimPort_VarRefrigerantFlowPort_VRF_In_ = s;
      }

      const SimModel::SimPort_VarRefrigerantFlowPort_VRF_InOrOut_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_InOrOut () const
      {
        return this->SimPort_VarRefrigerantFlowPort_VRF_InOrOut_;
      }

      SimModel::SimPort_VarRefrigerantFlowPort_VRF_InOrOut_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_InOrOut ()
      {
        return this->SimPort_VarRefrigerantFlowPort_VRF_InOrOut_;
      }

      void SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_InOrOut (const SimPort_VarRefrigerantFlowPort_VRF_InOrOut_sequence& s)
      {
        this->SimPort_VarRefrigerantFlowPort_VRF_InOrOut_ = s;
      }

      const SimModel::SimPort_VarRefrigerantFlowPort_VRF_Out_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_Out () const
      {
        return this->SimPort_VarRefrigerantFlowPort_VRF_Out_;
      }

      SimModel::SimPort_VarRefrigerantFlowPort_VRF_Out_sequence& SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_Out ()
      {
        return this->SimPort_VarRefrigerantFlowPort_VRF_Out_;
      }

      void SimModel::
      SimPort_VarRefrigerantFlowPort_VRF_Out (const SimPort_VarRefrigerantFlowPort_VRF_Out_sequence& s)
      {
        this->SimPort_VarRefrigerantFlowPort_VRF_Out_ = s;
      }

      const SimModel::SimPort_ZoneAirFlowPort_Air_In_sequence& SimModel::
      SimPort_ZoneAirFlowPort_Air_In () const
      {
        return this->SimPort_ZoneAirFlowPort_Air_In_;
      }

      SimModel::SimPort_ZoneAirFlowPort_Air_In_sequence& SimModel::
      SimPort_ZoneAirFlowPort_Air_In ()
      {
        return this->SimPort_ZoneAirFlowPort_Air_In_;
      }

      void SimModel::
      SimPort_ZoneAirFlowPort_Air_In (const SimPort_ZoneAirFlowPort_Air_In_sequence& s)
      {
        this->SimPort_ZoneAirFlowPort_Air_In_ = s;
      }

      const SimModel::SimPort_ZoneAirFlowPort_Air_Out_sequence& SimModel::
      SimPort_ZoneAirFlowPort_Air_Out () const
      {
        return this->SimPort_ZoneAirFlowPort_Air_Out_;
      }

      SimModel::SimPort_ZoneAirFlowPort_Air_Out_sequence& SimModel::
      SimPort_ZoneAirFlowPort_Air_Out ()
      {
        return this->SimPort_ZoneAirFlowPort_Air_Out_;
      }

      void SimModel::
      SimPort_ZoneAirFlowPort_Air_Out (const SimPort_ZoneAirFlowPort_Air_Out_sequence& s)
      {
        this->SimPort_ZoneAirFlowPort_Air_Out_ = s;
      }

      const SimModel::SimPresentationLayerAssignment_Default_Default_sequence& SimModel::
      SimPresentationLayerAssignment_Default_Default () const
      {
        return this->SimPresentationLayerAssignment_Default_Default_;
      }

      SimModel::SimPresentationLayerAssignment_Default_Default_sequence& SimModel::
      SimPresentationLayerAssignment_Default_Default ()
      {
        return this->SimPresentationLayerAssignment_Default_Default_;
      }

      void SimModel::
      SimPresentationLayerAssignment_Default_Default (const SimPresentationLayerAssignment_Default_Default_sequence& s)
      {
        this->SimPresentationLayerAssignment_Default_Default_ = s;
      }

      const SimModel::SimProfileParams_Member_Default_sequence& SimModel::
      SimProfileParams_Member_Default () const
      {
        return this->SimProfileParams_Member_Default_;
      }

      SimModel::SimProfileParams_Member_Default_sequence& SimModel::
      SimProfileParams_Member_Default ()
      {
        return this->SimProfileParams_Member_Default_;
      }

      void SimModel::
      SimProfileParams_Member_Default (const SimProfileParams_Member_Default_sequence& s)
      {
        this->SimProfileParams_Member_Default_ = s;
      }

      const SimModel::SimProfileParams_ProfileParams_Default_sequence& SimModel::
      SimProfileParams_ProfileParams_Default () const
      {
        return this->SimProfileParams_ProfileParams_Default_;
      }

      SimModel::SimProfileParams_ProfileParams_Default_sequence& SimModel::
      SimProfileParams_ProfileParams_Default ()
      {
        return this->SimProfileParams_ProfileParams_Default_;
      }

      void SimModel::
      SimProfileParams_ProfileParams_Default (const SimProfileParams_ProfileParams_Default_sequence& s)
      {
        this->SimProfileParams_ProfileParams_Default_ = s;
      }

      const SimModel::SimProject_Project_Backpack_sequence& SimModel::
      SimProject_Project_Backpack () const
      {
        return this->SimProject_Project_Backpack_;
      }

      SimModel::SimProject_Project_Backpack_sequence& SimModel::
      SimProject_Project_Backpack ()
      {
        return this->SimProject_Project_Backpack_;
      }

      void SimModel::
      SimProject_Project_Backpack (const SimProject_Project_Backpack_sequence& s)
      {
        this->SimProject_Project_Backpack_ = s;
      }

      const SimModel::SimProject_Project_DesignAlternative_sequence& SimModel::
      SimProject_Project_DesignAlternative () const
      {
        return this->SimProject_Project_DesignAlternative_;
      }

      SimModel::SimProject_Project_DesignAlternative_sequence& SimModel::
      SimProject_Project_DesignAlternative ()
      {
        return this->SimProject_Project_DesignAlternative_;
      }

      void SimModel::
      SimProject_Project_DesignAlternative (const SimProject_Project_DesignAlternative_sequence& s)
      {
        this->SimProject_Project_DesignAlternative_ = s;
      }

      const SimModel::SimProject_Project_SBD_View_sequence& SimModel::
      SimProject_Project_SBD_View () const
      {
        return this->SimProject_Project_SBD_View_;
      }

      SimModel::SimProject_Project_SBD_View_sequence& SimModel::
      SimProject_Project_SBD_View ()
      {
        return this->SimProject_Project_SBD_View_;
      }

      void SimModel::
      SimProject_Project_SBD_View (const SimProject_Project_SBD_View_sequence& s)
      {
        this->SimProject_Project_SBD_View_ = s;
      }

      const SimModel::SimProject_Project_T24_View_sequence& SimModel::
      SimProject_Project_T24_View () const
      {
        return this->SimProject_Project_T24_View_;
      }

      SimModel::SimProject_Project_T24_View_sequence& SimModel::
      SimProject_Project_T24_View ()
      {
        return this->SimProject_Project_T24_View_;
      }

      void SimModel::
      SimProject_Project_T24_View (const SimProject_Project_T24_View_sequence& s)
      {
        this->SimProject_Project_T24_View_ = s;
      }

      const SimModel::SimPropertyListValue_SimpleProp_ListValue_sequence& SimModel::
      SimPropertyListValue_SimpleProp_ListValue () const
      {
        return this->SimPropertyListValue_SimpleProp_ListValue_;
      }

      SimModel::SimPropertyListValue_SimpleProp_ListValue_sequence& SimModel::
      SimPropertyListValue_SimpleProp_ListValue ()
      {
        return this->SimPropertyListValue_SimpleProp_ListValue_;
      }

      void SimModel::
      SimPropertyListValue_SimpleProp_ListValue (const SimPropertyListValue_SimpleProp_ListValue_sequence& s)
      {
        this->SimPropertyListValue_SimpleProp_ListValue_ = s;
      }

      const SimModel::SimPropertySet_PropertySet_Default_sequence& SimModel::
      SimPropertySet_PropertySet_Default () const
      {
        return this->SimPropertySet_PropertySet_Default_;
      }

      SimModel::SimPropertySet_PropertySet_Default_sequence& SimModel::
      SimPropertySet_PropertySet_Default ()
      {
        return this->SimPropertySet_PropertySet_Default_;
      }

      void SimModel::
      SimPropertySet_PropertySet_Default (const SimPropertySet_PropertySet_Default_sequence& s)
      {
        this->SimPropertySet_PropertySet_Default_ = s;
      }

      const SimModel::SimPropertySingleValue_SimpleProp_SingleValue_sequence& SimModel::
      SimPropertySingleValue_SimpleProp_SingleValue () const
      {
        return this->SimPropertySingleValue_SimpleProp_SingleValue_;
      }

      SimModel::SimPropertySingleValue_SimpleProp_SingleValue_sequence& SimModel::
      SimPropertySingleValue_SimpleProp_SingleValue ()
      {
        return this->SimPropertySingleValue_SimpleProp_SingleValue_;
      }

      void SimModel::
      SimPropertySingleValue_SimpleProp_SingleValue (const SimPropertySingleValue_SimpleProp_SingleValue_sequence& s)
      {
        this->SimPropertySingleValue_SimpleProp_SingleValue_ = s;
      }

      const SimModel::SimRailing_Default_Default_sequence& SimModel::
      SimRailing_Default_Default () const
      {
        return this->SimRailing_Default_Default_;
      }

      SimModel::SimRailing_Default_Default_sequence& SimModel::
      SimRailing_Default_Default ()
      {
        return this->SimRailing_Default_Default_;
      }

      void SimModel::
      SimRailing_Default_Default (const SimRailing_Default_Default_sequence& s)
      {
        this->SimRailing_Default_Default_ = s;
      }

      const SimModel::SimRailing_GuardRailing_Default_sequence& SimModel::
      SimRailing_GuardRailing_Default () const
      {
        return this->SimRailing_GuardRailing_Default_;
      }

      SimModel::SimRailing_GuardRailing_Default_sequence& SimModel::
      SimRailing_GuardRailing_Default ()
      {
        return this->SimRailing_GuardRailing_Default_;
      }

      void SimModel::
      SimRailing_GuardRailing_Default (const SimRailing_GuardRailing_Default_sequence& s)
      {
        this->SimRailing_GuardRailing_Default_ = s;
      }

      const SimModel::SimRailing_HandRailing_Default_sequence& SimModel::
      SimRailing_HandRailing_Default () const
      {
        return this->SimRailing_HandRailing_Default_;
      }

      SimModel::SimRailing_HandRailing_Default_sequence& SimModel::
      SimRailing_HandRailing_Default ()
      {
        return this->SimRailing_HandRailing_Default_;
      }

      void SimModel::
      SimRailing_HandRailing_Default (const SimRailing_HandRailing_Default_sequence& s)
      {
        this->SimRailing_HandRailing_Default_ = s;
      }

      const SimModel::SimRailingParams_Railing_Default_sequence& SimModel::
      SimRailingParams_Railing_Default () const
      {
        return this->SimRailingParams_Railing_Default_;
      }

      SimModel::SimRailingParams_Railing_Default_sequence& SimModel::
      SimRailingParams_Railing_Default ()
      {
        return this->SimRailingParams_Railing_Default_;
      }

      void SimModel::
      SimRailingParams_Railing_Default (const SimRailingParams_Railing_Default_sequence& s)
      {
        this->SimRailingParams_Railing_Default_ = s;
      }

      const SimModel::SimRamp_Ramp_Default_sequence& SimModel::
      SimRamp_Ramp_Default () const
      {
        return this->SimRamp_Ramp_Default_;
      }

      SimModel::SimRamp_Ramp_Default_sequence& SimModel::
      SimRamp_Ramp_Default ()
      {
        return this->SimRamp_Ramp_Default_;
      }

      void SimModel::
      SimRamp_Ramp_Default (const SimRamp_Ramp_Default_sequence& s)
      {
        this->SimRamp_Ramp_Default_ = s;
      }

      const SimModel::SimRampFlight_Default_Default_sequence& SimModel::
      SimRampFlight_Default_Default () const
      {
        return this->SimRampFlight_Default_Default_;
      }

      SimModel::SimRampFlight_Default_Default_sequence& SimModel::
      SimRampFlight_Default_Default ()
      {
        return this->SimRampFlight_Default_Default_;
      }

      void SimModel::
      SimRampFlight_Default_Default (const SimRampFlight_Default_Default_sequence& s)
      {
        this->SimRampFlight_Default_Default_ = s;
      }

      const SimModel::SimRampFlightParams_RampFlight_Default_sequence& SimModel::
      SimRampFlightParams_RampFlight_Default () const
      {
        return this->SimRampFlightParams_RampFlight_Default_;
      }

      SimModel::SimRampFlightParams_RampFlight_Default_sequence& SimModel::
      SimRampFlightParams_RampFlight_Default ()
      {
        return this->SimRampFlightParams_RampFlight_Default_;
      }

      void SimModel::
      SimRampFlightParams_RampFlight_Default (const SimRampFlightParams_RampFlight_Default_sequence& s)
      {
        this->SimRampFlightParams_RampFlight_Default_ = s;
      }

      const SimModel::SimRampParams_Ramp_Default_sequence& SimModel::
      SimRampParams_Ramp_Default () const
      {
        return this->SimRampParams_Ramp_Default_;
      }

      SimModel::SimRampParams_Ramp_Default_sequence& SimModel::
      SimRampParams_Ramp_Default ()
      {
        return this->SimRampParams_Ramp_Default_;
      }

      void SimModel::
      SimRampParams_Ramp_Default (const SimRampParams_Ramp_Default_sequence& s)
      {
        this->SimRampParams_Ramp_Default_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Compressor_Default_sequence& SimModel::
      SimRefrigerationSystemElement_Compressor_Default () const
      {
        return this->SimRefrigerationSystemElement_Compressor_Default_;
      }

      SimModel::SimRefrigerationSystemElement_Compressor_Default_sequence& SimModel::
      SimRefrigerationSystemElement_Compressor_Default ()
      {
        return this->SimRefrigerationSystemElement_Compressor_Default_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Compressor_Default (const SimRefrigerationSystemElement_Compressor_Default_sequence& s)
      {
        this->SimRefrigerationSystemElement_Compressor_Default_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Condenser_AirCooled_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_AirCooled () const
      {
        return this->SimRefrigerationSystemElement_Condenser_AirCooled_;
      }

      SimModel::SimRefrigerationSystemElement_Condenser_AirCooled_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_AirCooled ()
      {
        return this->SimRefrigerationSystemElement_Condenser_AirCooled_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Condenser_AirCooled (const SimRefrigerationSystemElement_Condenser_AirCooled_sequence& s)
      {
        this->SimRefrigerationSystemElement_Condenser_AirCooled_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Condenser_Cascade_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_Cascade () const
      {
        return this->SimRefrigerationSystemElement_Condenser_Cascade_;
      }

      SimModel::SimRefrigerationSystemElement_Condenser_Cascade_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_Cascade ()
      {
        return this->SimRefrigerationSystemElement_Condenser_Cascade_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Condenser_Cascade (const SimRefrigerationSystemElement_Condenser_Cascade_sequence& s)
      {
        this->SimRefrigerationSystemElement_Condenser_Cascade_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Condenser_EvaporativeCooled_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled () const
      {
        return this->SimRefrigerationSystemElement_Condenser_EvaporativeCooled_;
      }

      SimModel::SimRefrigerationSystemElement_Condenser_EvaporativeCooled_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled ()
      {
        return this->SimRefrigerationSystemElement_Condenser_EvaporativeCooled_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const SimRefrigerationSystemElement_Condenser_EvaporativeCooled_sequence& s)
      {
        this->SimRefrigerationSystemElement_Condenser_EvaporativeCooled_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Condenser_WaterCooled_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_WaterCooled () const
      {
        return this->SimRefrigerationSystemElement_Condenser_WaterCooled_;
      }

      SimModel::SimRefrigerationSystemElement_Condenser_WaterCooled_sequence& SimModel::
      SimRefrigerationSystemElement_Condenser_WaterCooled ()
      {
        return this->SimRefrigerationSystemElement_Condenser_WaterCooled_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Condenser_WaterCooled (const SimRefrigerationSystemElement_Condenser_WaterCooled_sequence& s)
      {
        this->SimRefrigerationSystemElement_Condenser_WaterCooled_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Default_Default_sequence& SimModel::
      SimRefrigerationSystemElement_Default_Default () const
      {
        return this->SimRefrigerationSystemElement_Default_Default_;
      }

      SimModel::SimRefrigerationSystemElement_Default_Default_sequence& SimModel::
      SimRefrigerationSystemElement_Default_Default ()
      {
        return this->SimRefrigerationSystemElement_Default_Default_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Default_Default (const SimRefrigerationSystemElement_Default_Default_sequence& s)
      {
        this->SimRefrigerationSystemElement_Default_Default_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_GasCooler_AirCooled_sequence& SimModel::
      SimRefrigerationSystemElement_GasCooler_AirCooled () const
      {
        return this->SimRefrigerationSystemElement_GasCooler_AirCooled_;
      }

      SimModel::SimRefrigerationSystemElement_GasCooler_AirCooled_sequence& SimModel::
      SimRefrigerationSystemElement_GasCooler_AirCooled ()
      {
        return this->SimRefrigerationSystemElement_GasCooler_AirCooled_;
      }

      void SimModel::
      SimRefrigerationSystemElement_GasCooler_AirCooled (const SimRefrigerationSystemElement_GasCooler_AirCooled_sequence& s)
      {
        this->SimRefrigerationSystemElement_GasCooler_AirCooled_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_PackagedCompressorRack_Default_sequence& SimModel::
      SimRefrigerationSystemElement_PackagedCompressorRack_Default () const
      {
        return this->SimRefrigerationSystemElement_PackagedCompressorRack_Default_;
      }

      SimModel::SimRefrigerationSystemElement_PackagedCompressorRack_Default_sequence& SimModel::
      SimRefrigerationSystemElement_PackagedCompressorRack_Default ()
      {
        return this->SimRefrigerationSystemElement_PackagedCompressorRack_Default_;
      }

      void SimModel::
      SimRefrigerationSystemElement_PackagedCompressorRack_Default (const SimRefrigerationSystemElement_PackagedCompressorRack_Default_sequence& s)
      {
        this->SimRefrigerationSystemElement_PackagedCompressorRack_Default_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_RefrigeratedCase_Default_sequence& SimModel::
      SimRefrigerationSystemElement_RefrigeratedCase_Default () const
      {
        return this->SimRefrigerationSystemElement_RefrigeratedCase_Default_;
      }

      SimModel::SimRefrigerationSystemElement_RefrigeratedCase_Default_sequence& SimModel::
      SimRefrigerationSystemElement_RefrigeratedCase_Default ()
      {
        return this->SimRefrigerationSystemElement_RefrigeratedCase_Default_;
      }

      void SimModel::
      SimRefrigerationSystemElement_RefrigeratedCase_Default (const SimRefrigerationSystemElement_RefrigeratedCase_Default_sequence& s)
      {
        this->SimRefrigerationSystemElement_RefrigeratedCase_Default_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_sequence& SimModel::
      SimRefrigerationSystemElement_RefrigerationChiller_AirChiller () const
      {
        return this->SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_;
      }

      SimModel::SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_sequence& SimModel::
      SimRefrigerationSystemElement_RefrigerationChiller_AirChiller ()
      {
        return this->SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_;
      }

      void SimModel::
      SimRefrigerationSystemElement_RefrigerationChiller_AirChiller (const SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_sequence& s)
      {
        this->SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_Subcooler_Default_sequence& SimModel::
      SimRefrigerationSystemElement_Subcooler_Default () const
      {
        return this->SimRefrigerationSystemElement_Subcooler_Default_;
      }

      SimModel::SimRefrigerationSystemElement_Subcooler_Default_sequence& SimModel::
      SimRefrigerationSystemElement_Subcooler_Default ()
      {
        return this->SimRefrigerationSystemElement_Subcooler_Default_;
      }

      void SimModel::
      SimRefrigerationSystemElement_Subcooler_Default (const SimRefrigerationSystemElement_Subcooler_Default_sequence& s)
      {
        this->SimRefrigerationSystemElement_Subcooler_Default_ = s;
      }

      const SimModel::SimRefrigerationSystemElement_WalkInCooler_Default_sequence& SimModel::
      SimRefrigerationSystemElement_WalkInCooler_Default () const
      {
        return this->SimRefrigerationSystemElement_WalkInCooler_Default_;
      }

      SimModel::SimRefrigerationSystemElement_WalkInCooler_Default_sequence& SimModel::
      SimRefrigerationSystemElement_WalkInCooler_Default ()
      {
        return this->SimRefrigerationSystemElement_WalkInCooler_Default_;
      }

      void SimModel::
      SimRefrigerationSystemElement_WalkInCooler_Default (const SimRefrigerationSystemElement_WalkInCooler_Default_sequence& s)
      {
        this->SimRefrigerationSystemElement_WalkInCooler_Default_ = s;
      }

      const SimModel::SimRegularTimeSeries_Regular_Default_sequence& SimModel::
      SimRegularTimeSeries_Regular_Default () const
      {
        return this->SimRegularTimeSeries_Regular_Default_;
      }

      SimModel::SimRegularTimeSeries_Regular_Default_sequence& SimModel::
      SimRegularTimeSeries_Regular_Default ()
      {
        return this->SimRegularTimeSeries_Regular_Default_;
      }

      void SimModel::
      SimRegularTimeSeries_Regular_Default (const SimRegularTimeSeries_Regular_Default_sequence& s)
      {
        this->SimRegularTimeSeries_Regular_Default_ = s;
      }

      const SimModel::SimRepresentationMap_RepresentationMap_Default_sequence& SimModel::
      SimRepresentationMap_RepresentationMap_Default () const
      {
        return this->SimRepresentationMap_RepresentationMap_Default_;
      }

      SimModel::SimRepresentationMap_RepresentationMap_Default_sequence& SimModel::
      SimRepresentationMap_RepresentationMap_Default ()
      {
        return this->SimRepresentationMap_RepresentationMap_Default_;
      }

      void SimModel::
      SimRepresentationMap_RepresentationMap_Default (const SimRepresentationMap_RepresentationMap_Default_sequence& s)
      {
        this->SimRepresentationMap_RepresentationMap_Default_ = s;
      }

      const SimModel::SimResourceConsumption_ExteriorConsumption_Default_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Default () const
      {
        return this->SimResourceConsumption_ExteriorConsumption_Default_;
      }

      SimModel::SimResourceConsumption_ExteriorConsumption_Default_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Default ()
      {
        return this->SimResourceConsumption_ExteriorConsumption_Default_;
      }

      void SimModel::
      SimResourceConsumption_ExteriorConsumption_Default (const SimResourceConsumption_ExteriorConsumption_Default_sequence& s)
      {
        this->SimResourceConsumption_ExteriorConsumption_Default_ = s;
      }

      const SimModel::SimResourceConsumption_ExteriorConsumption_Electricity_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Electricity () const
      {
        return this->SimResourceConsumption_ExteriorConsumption_Electricity_;
      }

      SimModel::SimResourceConsumption_ExteriorConsumption_Electricity_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Electricity ()
      {
        return this->SimResourceConsumption_ExteriorConsumption_Electricity_;
      }

      void SimModel::
      SimResourceConsumption_ExteriorConsumption_Electricity (const SimResourceConsumption_ExteriorConsumption_Electricity_sequence& s)
      {
        this->SimResourceConsumption_ExteriorConsumption_Electricity_ = s;
      }

      const SimModel::SimResourceConsumption_ExteriorConsumption_Fuel_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Fuel () const
      {
        return this->SimResourceConsumption_ExteriorConsumption_Fuel_;
      }

      SimModel::SimResourceConsumption_ExteriorConsumption_Fuel_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Fuel ()
      {
        return this->SimResourceConsumption_ExteriorConsumption_Fuel_;
      }

      void SimModel::
      SimResourceConsumption_ExteriorConsumption_Fuel (const SimResourceConsumption_ExteriorConsumption_Fuel_sequence& s)
      {
        this->SimResourceConsumption_ExteriorConsumption_Fuel_ = s;
      }

      const SimModel::SimResourceConsumption_ExteriorConsumption_NaturalGas_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_NaturalGas () const
      {
        return this->SimResourceConsumption_ExteriorConsumption_NaturalGas_;
      }

      SimModel::SimResourceConsumption_ExteriorConsumption_NaturalGas_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_NaturalGas ()
      {
        return this->SimResourceConsumption_ExteriorConsumption_NaturalGas_;
      }

      void SimModel::
      SimResourceConsumption_ExteriorConsumption_NaturalGas (const SimResourceConsumption_ExteriorConsumption_NaturalGas_sequence& s)
      {
        this->SimResourceConsumption_ExteriorConsumption_NaturalGas_ = s;
      }

      const SimModel::SimResourceConsumption_ExteriorConsumption_Water_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Water () const
      {
        return this->SimResourceConsumption_ExteriorConsumption_Water_;
      }

      SimModel::SimResourceConsumption_ExteriorConsumption_Water_sequence& SimModel::
      SimResourceConsumption_ExteriorConsumption_Water ()
      {
        return this->SimResourceConsumption_ExteriorConsumption_Water_;
      }

      void SimModel::
      SimResourceConsumption_ExteriorConsumption_Water (const SimResourceConsumption_ExteriorConsumption_Water_sequence& s)
      {
        this->SimResourceConsumption_ExteriorConsumption_Water_ = s;
      }

      const SimModel::SimResourceConsumption_InteriorConsumption_Default_sequence& SimModel::
      SimResourceConsumption_InteriorConsumption_Default () const
      {
        return this->SimResourceConsumption_InteriorConsumption_Default_;
      }

      SimModel::SimResourceConsumption_InteriorConsumption_Default_sequence& SimModel::
      SimResourceConsumption_InteriorConsumption_Default ()
      {
        return this->SimResourceConsumption_InteriorConsumption_Default_;
      }

      void SimModel::
      SimResourceConsumption_InteriorConsumption_Default (const SimResourceConsumption_InteriorConsumption_Default_sequence& s)
      {
        this->SimResourceConsumption_InteriorConsumption_Default_ = s;
      }

      const SimModel::SimResultsGuide_ResultsGuide_CustomTemplate_sequence& SimModel::
      SimResultsGuide_ResultsGuide_CustomTemplate () const
      {
        return this->SimResultsGuide_ResultsGuide_CustomTemplate_;
      }

      SimModel::SimResultsGuide_ResultsGuide_CustomTemplate_sequence& SimModel::
      SimResultsGuide_ResultsGuide_CustomTemplate ()
      {
        return this->SimResultsGuide_ResultsGuide_CustomTemplate_;
      }

      void SimModel::
      SimResultsGuide_ResultsGuide_CustomTemplate (const SimResultsGuide_ResultsGuide_CustomTemplate_sequence& s)
      {
        this->SimResultsGuide_ResultsGuide_CustomTemplate_ = s;
      }

      const SimModel::SimResultsGuide_ResultsGuide_Default_sequence& SimModel::
      SimResultsGuide_ResultsGuide_Default () const
      {
        return this->SimResultsGuide_ResultsGuide_Default_;
      }

      SimModel::SimResultsGuide_ResultsGuide_Default_sequence& SimModel::
      SimResultsGuide_ResultsGuide_Default ()
      {
        return this->SimResultsGuide_ResultsGuide_Default_;
      }

      void SimModel::
      SimResultsGuide_ResultsGuide_Default (const SimResultsGuide_ResultsGuide_Default_sequence& s)
      {
        this->SimResultsGuide_ResultsGuide_Default_ = s;
      }

      const SimModel::SimResultsGuide_ResultsGuide_PackageTemplate_sequence& SimModel::
      SimResultsGuide_ResultsGuide_PackageTemplate () const
      {
        return this->SimResultsGuide_ResultsGuide_PackageTemplate_;
      }

      SimModel::SimResultsGuide_ResultsGuide_PackageTemplate_sequence& SimModel::
      SimResultsGuide_ResultsGuide_PackageTemplate ()
      {
        return this->SimResultsGuide_ResultsGuide_PackageTemplate_;
      }

      void SimModel::
      SimResultsGuide_ResultsGuide_PackageTemplate (const SimResultsGuide_ResultsGuide_PackageTemplate_sequence& s)
      {
        this->SimResultsGuide_ResultsGuide_PackageTemplate_ = s;
      }

      const SimModel::SimResultsTextInfo_ResultsTextInfo_Default_sequence& SimModel::
      SimResultsTextInfo_ResultsTextInfo_Default () const
      {
        return this->SimResultsTextInfo_ResultsTextInfo_Default_;
      }

      SimModel::SimResultsTextInfo_ResultsTextInfo_Default_sequence& SimModel::
      SimResultsTextInfo_ResultsTextInfo_Default ()
      {
        return this->SimResultsTextInfo_ResultsTextInfo_Default_;
      }

      void SimModel::
      SimResultsTextInfo_ResultsTextInfo_Default (const SimResultsTextInfo_ResultsTextInfo_Default_sequence& s)
      {
        this->SimResultsTextInfo_ResultsTextInfo_Default_ = s;
      }

      const SimModel::SimResultsVariables_ResultsVariables_Default_sequence& SimModel::
      SimResultsVariables_ResultsVariables_Default () const
      {
        return this->SimResultsVariables_ResultsVariables_Default_;
      }

      SimModel::SimResultsVariables_ResultsVariables_Default_sequence& SimModel::
      SimResultsVariables_ResultsVariables_Default ()
      {
        return this->SimResultsVariables_ResultsVariables_Default_;
      }

      void SimModel::
      SimResultsVariables_ResultsVariables_Default (const SimResultsVariables_ResultsVariables_Default_sequence& s)
      {
        this->SimResultsVariables_ResultsVariables_Default_ = s;
      }

      const SimModel::SimResultsView_ResultsView_Default_sequence& SimModel::
      SimResultsView_ResultsView_Default () const
      {
        return this->SimResultsView_ResultsView_Default_;
      }

      SimModel::SimResultsView_ResultsView_Default_sequence& SimModel::
      SimResultsView_ResultsView_Default ()
      {
        return this->SimResultsView_ResultsView_Default_;
      }

      void SimModel::
      SimResultsView_ResultsView_Default (const SimResultsView_ResultsView_Default_sequence& s)
      {
        this->SimResultsView_ResultsView_Default_ = s;
      }

      const SimModel::SimResultsViewSet_ResultsViewSet_Default_sequence& SimModel::
      SimResultsViewSet_ResultsViewSet_Default () const
      {
        return this->SimResultsViewSet_ResultsViewSet_Default_;
      }

      SimModel::SimResultsViewSet_ResultsViewSet_Default_sequence& SimModel::
      SimResultsViewSet_ResultsViewSet_Default ()
      {
        return this->SimResultsViewSet_ResultsViewSet_Default_;
      }

      void SimModel::
      SimResultsViewSet_ResultsViewSet_Default (const SimResultsViewSet_ResultsViewSet_Default_sequence& s)
      {
        this->SimResultsViewSet_ResultsViewSet_Default_ = s;
      }

      const SimModel::SimRoof_Roof_Default_sequence& SimModel::
      SimRoof_Roof_Default () const
      {
        return this->SimRoof_Roof_Default_;
      }

      SimModel::SimRoof_Roof_Default_sequence& SimModel::
      SimRoof_Roof_Default ()
      {
        return this->SimRoof_Roof_Default_;
      }

      void SimModel::
      SimRoof_Roof_Default (const SimRoof_Roof_Default_sequence& s)
      {
        this->SimRoof_Roof_Default_ = s;
      }

      const SimModel::SimSensor_AirVelocitySensor_Default_sequence& SimModel::
      SimSensor_AirVelocitySensor_Default () const
      {
        return this->SimSensor_AirVelocitySensor_Default_;
      }

      SimModel::SimSensor_AirVelocitySensor_Default_sequence& SimModel::
      SimSensor_AirVelocitySensor_Default ()
      {
        return this->SimSensor_AirVelocitySensor_Default_;
      }

      void SimModel::
      SimSensor_AirVelocitySensor_Default (const SimSensor_AirVelocitySensor_Default_sequence& s)
      {
        this->SimSensor_AirVelocitySensor_Default_ = s;
      }

      const SimModel::SimSensor_Default_Default_sequence& SimModel::
      SimSensor_Default_Default () const
      {
        return this->SimSensor_Default_Default_;
      }

      SimModel::SimSensor_Default_Default_sequence& SimModel::
      SimSensor_Default_Default ()
      {
        return this->SimSensor_Default_Default_;
      }

      void SimModel::
      SimSensor_Default_Default (const SimSensor_Default_Default_sequence& s)
      {
        this->SimSensor_Default_Default_ = s;
      }

      const SimModel::SimSensor_FireSensor_Default_sequence& SimModel::
      SimSensor_FireSensor_Default () const
      {
        return this->SimSensor_FireSensor_Default_;
      }

      SimModel::SimSensor_FireSensor_Default_sequence& SimModel::
      SimSensor_FireSensor_Default ()
      {
        return this->SimSensor_FireSensor_Default_;
      }

      void SimModel::
      SimSensor_FireSensor_Default (const SimSensor_FireSensor_Default_sequence& s)
      {
        this->SimSensor_FireSensor_Default_ = s;
      }

      const SimModel::SimSensor_GasSensor_CO2Sensor_sequence& SimModel::
      SimSensor_GasSensor_CO2Sensor () const
      {
        return this->SimSensor_GasSensor_CO2Sensor_;
      }

      SimModel::SimSensor_GasSensor_CO2Sensor_sequence& SimModel::
      SimSensor_GasSensor_CO2Sensor ()
      {
        return this->SimSensor_GasSensor_CO2Sensor_;
      }

      void SimModel::
      SimSensor_GasSensor_CO2Sensor (const SimSensor_GasSensor_CO2Sensor_sequence& s)
      {
        this->SimSensor_GasSensor_CO2Sensor_ = s;
      }

      const SimModel::SimSensor_GasSensor_SmokeSensor_sequence& SimModel::
      SimSensor_GasSensor_SmokeSensor () const
      {
        return this->SimSensor_GasSensor_SmokeSensor_;
      }

      SimModel::SimSensor_GasSensor_SmokeSensor_sequence& SimModel::
      SimSensor_GasSensor_SmokeSensor ()
      {
        return this->SimSensor_GasSensor_SmokeSensor_;
      }

      void SimModel::
      SimSensor_GasSensor_SmokeSensor (const SimSensor_GasSensor_SmokeSensor_sequence& s)
      {
        this->SimSensor_GasSensor_SmokeSensor_ = s;
      }

      const SimModel::SimSensor_HeatSensor_Default_sequence& SimModel::
      SimSensor_HeatSensor_Default () const
      {
        return this->SimSensor_HeatSensor_Default_;
      }

      SimModel::SimSensor_HeatSensor_Default_sequence& SimModel::
      SimSensor_HeatSensor_Default ()
      {
        return this->SimSensor_HeatSensor_Default_;
      }

      void SimModel::
      SimSensor_HeatSensor_Default (const SimSensor_HeatSensor_Default_sequence& s)
      {
        this->SimSensor_HeatSensor_Default_ = s;
      }

      const SimModel::SimSensor_LuxSensor_Default_sequence& SimModel::
      SimSensor_LuxSensor_Default () const
      {
        return this->SimSensor_LuxSensor_Default_;
      }

      SimModel::SimSensor_LuxSensor_Default_sequence& SimModel::
      SimSensor_LuxSensor_Default ()
      {
        return this->SimSensor_LuxSensor_Default_;
      }

      void SimModel::
      SimSensor_LuxSensor_Default (const SimSensor_LuxSensor_Default_sequence& s)
      {
        this->SimSensor_LuxSensor_Default_ = s;
      }

      const SimModel::SimSensor_Meter_AirFlowRateMeter_sequence& SimModel::
      SimSensor_Meter_AirFlowRateMeter () const
      {
        return this->SimSensor_Meter_AirFlowRateMeter_;
      }

      SimModel::SimSensor_Meter_AirFlowRateMeter_sequence& SimModel::
      SimSensor_Meter_AirFlowRateMeter ()
      {
        return this->SimSensor_Meter_AirFlowRateMeter_;
      }

      void SimModel::
      SimSensor_Meter_AirFlowRateMeter (const SimSensor_Meter_AirFlowRateMeter_sequence& s)
      {
        this->SimSensor_Meter_AirFlowRateMeter_ = s;
      }

      const SimModel::SimSensor_Meter_FluidFlowRateMeter_sequence& SimModel::
      SimSensor_Meter_FluidFlowRateMeter () const
      {
        return this->SimSensor_Meter_FluidFlowRateMeter_;
      }

      SimModel::SimSensor_Meter_FluidFlowRateMeter_sequence& SimModel::
      SimSensor_Meter_FluidFlowRateMeter ()
      {
        return this->SimSensor_Meter_FluidFlowRateMeter_;
      }

      void SimModel::
      SimSensor_Meter_FluidFlowRateMeter (const SimSensor_Meter_FluidFlowRateMeter_sequence& s)
      {
        this->SimSensor_Meter_FluidFlowRateMeter_ = s;
      }

      const SimModel::SimSensor_Meter_HvacZoneWaterUseMeter_sequence& SimModel::
      SimSensor_Meter_HvacZoneWaterUseMeter () const
      {
        return this->SimSensor_Meter_HvacZoneWaterUseMeter_;
      }

      SimModel::SimSensor_Meter_HvacZoneWaterUseMeter_sequence& SimModel::
      SimSensor_Meter_HvacZoneWaterUseMeter ()
      {
        return this->SimSensor_Meter_HvacZoneWaterUseMeter_;
      }

      void SimModel::
      SimSensor_Meter_HvacZoneWaterUseMeter (const SimSensor_Meter_HvacZoneWaterUseMeter_sequence& s)
      {
        this->SimSensor_Meter_HvacZoneWaterUseMeter_ = s;
      }

      const SimModel::SimSensor_MovementSensor_Default_sequence& SimModel::
      SimSensor_MovementSensor_Default () const
      {
        return this->SimSensor_MovementSensor_Default_;
      }

      SimModel::SimSensor_MovementSensor_Default_sequence& SimModel::
      SimSensor_MovementSensor_Default ()
      {
        return this->SimSensor_MovementSensor_Default_;
      }

      void SimModel::
      SimSensor_MovementSensor_Default (const SimSensor_MovementSensor_Default_sequence& s)
      {
        this->SimSensor_MovementSensor_Default_ = s;
      }

      const SimModel::SimSensor_PressureSensor_Default_sequence& SimModel::
      SimSensor_PressureSensor_Default () const
      {
        return this->SimSensor_PressureSensor_Default_;
      }

      SimModel::SimSensor_PressureSensor_Default_sequence& SimModel::
      SimSensor_PressureSensor_Default ()
      {
        return this->SimSensor_PressureSensor_Default_;
      }

      void SimModel::
      SimSensor_PressureSensor_Default (const SimSensor_PressureSensor_Default_sequence& s)
      {
        this->SimSensor_PressureSensor_Default_ = s;
      }

      const SimModel::SimSensor_RelativeHumidity_Type1_sequence& SimModel::
      SimSensor_RelativeHumidity_Type1 () const
      {
        return this->SimSensor_RelativeHumidity_Type1_;
      }

      SimModel::SimSensor_RelativeHumidity_Type1_sequence& SimModel::
      SimSensor_RelativeHumidity_Type1 ()
      {
        return this->SimSensor_RelativeHumidity_Type1_;
      }

      void SimModel::
      SimSensor_RelativeHumidity_Type1 (const SimSensor_RelativeHumidity_Type1_sequence& s)
      {
        this->SimSensor_RelativeHumidity_Type1_ = s;
      }

      const SimModel::SimSensor_RelativeHumidity_Type2_sequence& SimModel::
      SimSensor_RelativeHumidity_Type2 () const
      {
        return this->SimSensor_RelativeHumidity_Type2_;
      }

      SimModel::SimSensor_RelativeHumidity_Type2_sequence& SimModel::
      SimSensor_RelativeHumidity_Type2 ()
      {
        return this->SimSensor_RelativeHumidity_Type2_;
      }

      void SimModel::
      SimSensor_RelativeHumidity_Type2 (const SimSensor_RelativeHumidity_Type2_sequence& s)
      {
        this->SimSensor_RelativeHumidity_Type2_ = s;
      }

      const SimModel::SimSensor_SolarRadiation_Default_sequence& SimModel::
      SimSensor_SolarRadiation_Default () const
      {
        return this->SimSensor_SolarRadiation_Default_;
      }

      SimModel::SimSensor_SolarRadiation_Default_sequence& SimModel::
      SimSensor_SolarRadiation_Default ()
      {
        return this->SimSensor_SolarRadiation_Default_;
      }

      void SimModel::
      SimSensor_SolarRadiation_Default (const SimSensor_SolarRadiation_Default_sequence& s)
      {
        this->SimSensor_SolarRadiation_Default_ = s;
      }

      const SimModel::SimSensor_SoundSensor_Default_sequence& SimModel::
      SimSensor_SoundSensor_Default () const
      {
        return this->SimSensor_SoundSensor_Default_;
      }

      SimModel::SimSensor_SoundSensor_Default_sequence& SimModel::
      SimSensor_SoundSensor_Default ()
      {
        return this->SimSensor_SoundSensor_Default_;
      }

      void SimModel::
      SimSensor_SoundSensor_Default (const SimSensor_SoundSensor_Default_sequence& s)
      {
        this->SimSensor_SoundSensor_Default_ = s;
      }

      const SimModel::SimSensor_TemperatureSensor_DryBulb_sequence& SimModel::
      SimSensor_TemperatureSensor_DryBulb () const
      {
        return this->SimSensor_TemperatureSensor_DryBulb_;
      }

      SimModel::SimSensor_TemperatureSensor_DryBulb_sequence& SimModel::
      SimSensor_TemperatureSensor_DryBulb ()
      {
        return this->SimSensor_TemperatureSensor_DryBulb_;
      }

      void SimModel::
      SimSensor_TemperatureSensor_DryBulb (const SimSensor_TemperatureSensor_DryBulb_sequence& s)
      {
        this->SimSensor_TemperatureSensor_DryBulb_ = s;
      }

      const SimModel::SimSensor_TemperatureSensor_Fluid_sequence& SimModel::
      SimSensor_TemperatureSensor_Fluid () const
      {
        return this->SimSensor_TemperatureSensor_Fluid_;
      }

      SimModel::SimSensor_TemperatureSensor_Fluid_sequence& SimModel::
      SimSensor_TemperatureSensor_Fluid ()
      {
        return this->SimSensor_TemperatureSensor_Fluid_;
      }

      void SimModel::
      SimSensor_TemperatureSensor_Fluid (const SimSensor_TemperatureSensor_Fluid_sequence& s)
      {
        this->SimSensor_TemperatureSensor_Fluid_ = s;
      }

      const SimModel::SimSensor_TemperatureSensor_Radiant_sequence& SimModel::
      SimSensor_TemperatureSensor_Radiant () const
      {
        return this->SimSensor_TemperatureSensor_Radiant_;
      }

      SimModel::SimSensor_TemperatureSensor_Radiant_sequence& SimModel::
      SimSensor_TemperatureSensor_Radiant ()
      {
        return this->SimSensor_TemperatureSensor_Radiant_;
      }

      void SimModel::
      SimSensor_TemperatureSensor_Radiant (const SimSensor_TemperatureSensor_Radiant_sequence& s)
      {
        this->SimSensor_TemperatureSensor_Radiant_ = s;
      }

      const SimModel::SimSensor_TemperatureSensor_WetBulb_sequence& SimModel::
      SimSensor_TemperatureSensor_WetBulb () const
      {
        return this->SimSensor_TemperatureSensor_WetBulb_;
      }

      SimModel::SimSensor_TemperatureSensor_WetBulb_sequence& SimModel::
      SimSensor_TemperatureSensor_WetBulb ()
      {
        return this->SimSensor_TemperatureSensor_WetBulb_;
      }

      void SimModel::
      SimSensor_TemperatureSensor_WetBulb (const SimSensor_TemperatureSensor_WetBulb_sequence& s)
      {
        this->SimSensor_TemperatureSensor_WetBulb_ = s;
      }

      const SimModel::SimSensor_VirtualSensor_EmsSensor_sequence& SimModel::
      SimSensor_VirtualSensor_EmsSensor () const
      {
        return this->SimSensor_VirtualSensor_EmsSensor_;
      }

      SimModel::SimSensor_VirtualSensor_EmsSensor_sequence& SimModel::
      SimSensor_VirtualSensor_EmsSensor ()
      {
        return this->SimSensor_VirtualSensor_EmsSensor_;
      }

      void SimModel::
      SimSensor_VirtualSensor_EmsSensor (const SimSensor_VirtualSensor_EmsSensor_sequence& s)
      {
        this->SimSensor_VirtualSensor_EmsSensor_ = s;
      }

      const SimModel::SimShapeRepresentation_ShapeRepresentation_Default_sequence& SimModel::
      SimShapeRepresentation_ShapeRepresentation_Default () const
      {
        return this->SimShapeRepresentation_ShapeRepresentation_Default_;
      }

      SimModel::SimShapeRepresentation_ShapeRepresentation_Default_sequence& SimModel::
      SimShapeRepresentation_ShapeRepresentation_Default ()
      {
        return this->SimShapeRepresentation_ShapeRepresentation_Default_;
      }

      void SimModel::
      SimShapeRepresentation_ShapeRepresentation_Default (const SimShapeRepresentation_ShapeRepresentation_Default_sequence& s)
      {
        this->SimShapeRepresentation_ShapeRepresentation_Default_ = s;
      }

      const SimModel::SimSimpleProperty_SimpleProp_Default_sequence& SimModel::
      SimSimpleProperty_SimpleProp_Default () const
      {
        return this->SimSimpleProperty_SimpleProp_Default_;
      }

      SimModel::SimSimpleProperty_SimpleProp_Default_sequence& SimModel::
      SimSimpleProperty_SimpleProp_Default ()
      {
        return this->SimSimpleProperty_SimpleProp_Default_;
      }

      void SimModel::
      SimSimpleProperty_SimpleProp_Default (const SimSimpleProperty_SimpleProp_Default_sequence& s)
      {
        this->SimSimpleProperty_SimpleProp_Default_ = s;
      }

      const SimModel::SimSimpleProperty_SimpleProp_ListValue_sequence& SimModel::
      SimSimpleProperty_SimpleProp_ListValue () const
      {
        return this->SimSimpleProperty_SimpleProp_ListValue_;
      }

      SimModel::SimSimpleProperty_SimpleProp_ListValue_sequence& SimModel::
      SimSimpleProperty_SimpleProp_ListValue ()
      {
        return this->SimSimpleProperty_SimpleProp_ListValue_;
      }

      void SimModel::
      SimSimpleProperty_SimpleProp_ListValue (const SimSimpleProperty_SimpleProp_ListValue_sequence& s)
      {
        this->SimSimpleProperty_SimpleProp_ListValue_ = s;
      }

      const SimModel::SimSimpleProperty_SimpleProp_SingleValue_sequence& SimModel::
      SimSimpleProperty_SimpleProp_SingleValue () const
      {
        return this->SimSimpleProperty_SimpleProp_SingleValue_;
      }

      SimModel::SimSimpleProperty_SimpleProp_SingleValue_sequence& SimModel::
      SimSimpleProperty_SimpleProp_SingleValue ()
      {
        return this->SimSimpleProperty_SimpleProp_SingleValue_;
      }

      void SimModel::
      SimSimpleProperty_SimpleProp_SingleValue (const SimSimpleProperty_SimpleProp_SingleValue_sequence& s)
      {
        this->SimSimpleProperty_SimpleProp_SingleValue_ = s;
      }

      const SimModel::SimSimulationConfiguration_SimulationConfiguration_Default_sequence& SimModel::
      SimSimulationConfiguration_SimulationConfiguration_Default () const
      {
        return this->SimSimulationConfiguration_SimulationConfiguration_Default_;
      }

      SimModel::SimSimulationConfiguration_SimulationConfiguration_Default_sequence& SimModel::
      SimSimulationConfiguration_SimulationConfiguration_Default ()
      {
        return this->SimSimulationConfiguration_SimulationConfiguration_Default_;
      }

      void SimModel::
      SimSimulationConfiguration_SimulationConfiguration_Default (const SimSimulationConfiguration_SimulationConfiguration_Default_sequence& s)
      {
        this->SimSimulationConfiguration_SimulationConfiguration_Default_ = s;
      }

      const SimModel::SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1 () const
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_;
      }

      SimModel::SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1 ()
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_;
      }

      void SimModel::
      SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1 (const SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_sequence& s)
      {
        this->SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_ = s;
      }

      const SimModel::SimSimulationConfiguration_StandardsConfiguration_LEED_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_LEED () const
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_LEED_;
      }

      SimModel::SimSimulationConfiguration_StandardsConfiguration_LEED_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_LEED ()
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_LEED_;
      }

      void SimModel::
      SimSimulationConfiguration_StandardsConfiguration_LEED (const SimSimulationConfiguration_StandardsConfiguration_LEED_sequence& s)
      {
        this->SimSimulationConfiguration_StandardsConfiguration_LEED_ = s;
      }

      const SimModel::SimSimulationConfiguration_StandardsConfiguration_SBDH_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_SBDH () const
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_SBDH_;
      }

      SimModel::SimSimulationConfiguration_StandardsConfiguration_SBDH_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_SBDH ()
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_SBDH_;
      }

      void SimModel::
      SimSimulationConfiguration_StandardsConfiguration_SBDH (const SimSimulationConfiguration_StandardsConfiguration_SBDH_sequence& s)
      {
        this->SimSimulationConfiguration_StandardsConfiguration_SBDH_ = s;
      }

      const SimModel::SimSimulationConfiguration_StandardsConfiguration_T24_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_T24 () const
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_T24_;
      }

      SimModel::SimSimulationConfiguration_StandardsConfiguration_T24_sequence& SimModel::
      SimSimulationConfiguration_StandardsConfiguration_T24 ()
      {
        return this->SimSimulationConfiguration_StandardsConfiguration_T24_;
      }

      void SimModel::
      SimSimulationConfiguration_StandardsConfiguration_T24 (const SimSimulationConfiguration_StandardsConfiguration_T24_sequence& s)
      {
        this->SimSimulationConfiguration_StandardsConfiguration_T24_ = s;
      }

      const SimModel::SimSimulationOutputFormat_ControlReportingTolerances_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlReportingTolerances_Default () const
      {
        return this->SimSimulationOutputFormat_ControlReportingTolerances_Default_;
      }

      SimModel::SimSimulationOutputFormat_ControlReportingTolerances_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlReportingTolerances_Default ()
      {
        return this->SimSimulationOutputFormat_ControlReportingTolerances_Default_;
      }

      void SimModel::
      SimSimulationOutputFormat_ControlReportingTolerances_Default (const SimSimulationOutputFormat_ControlReportingTolerances_Default_sequence& s)
      {
        this->SimSimulationOutputFormat_ControlReportingTolerances_Default_ = s;
      }

      const SimModel::SimSimulationOutputFormat_ControlSizingStyle_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlSizingStyle_Default () const
      {
        return this->SimSimulationOutputFormat_ControlSizingStyle_Default_;
      }

      SimModel::SimSimulationOutputFormat_ControlSizingStyle_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlSizingStyle_Default ()
      {
        return this->SimSimulationOutputFormat_ControlSizingStyle_Default_;
      }

      void SimModel::
      SimSimulationOutputFormat_ControlSizingStyle_Default (const SimSimulationOutputFormat_ControlSizingStyle_Default_sequence& s)
      {
        this->SimSimulationOutputFormat_ControlSizingStyle_Default_ = s;
      }

      const SimModel::SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlSurfaceColorScheme_Default () const
      {
        return this->SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_;
      }

      SimModel::SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlSurfaceColorScheme_Default ()
      {
        return this->SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_;
      }

      void SimModel::
      SimSimulationOutputFormat_ControlSurfaceColorScheme_Default (const SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_sequence& s)
      {
        this->SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_ = s;
      }

      const SimModel::SimSimulationOutputFormat_ControlTableStyle_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlTableStyle_Default () const
      {
        return this->SimSimulationOutputFormat_ControlTableStyle_Default_;
      }

      SimModel::SimSimulationOutputFormat_ControlTableStyle_Default_sequence& SimModel::
      SimSimulationOutputFormat_ControlTableStyle_Default ()
      {
        return this->SimSimulationOutputFormat_ControlTableStyle_Default_;
      }

      void SimModel::
      SimSimulationOutputFormat_ControlTableStyle_Default (const SimSimulationOutputFormat_ControlTableStyle_Default_sequence& s)
      {
        this->SimSimulationOutputFormat_ControlTableStyle_Default_ = s;
      }

      const SimModel::SimSimulationOutputFormat_Default_Default_sequence& SimModel::
      SimSimulationOutputFormat_Default_Default () const
      {
        return this->SimSimulationOutputFormat_Default_Default_;
      }

      SimModel::SimSimulationOutputFormat_Default_Default_sequence& SimModel::
      SimSimulationOutputFormat_Default_Default ()
      {
        return this->SimSimulationOutputFormat_Default_Default_;
      }

      void SimModel::
      SimSimulationOutputFormat_Default_Default (const SimSimulationOutputFormat_Default_Default_sequence& s)
      {
        this->SimSimulationOutputFormat_Default_Default_ = s;
      }

      const SimModel::SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_sequence& SimModel::
      SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default () const
      {
        return this->SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_;
      }

      SimModel::SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_sequence& SimModel::
      SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default ()
      {
        return this->SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_;
      }

      void SimModel::
      SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default (const SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_sequence& s)
      {
        this->SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Daylighting_DaylightFactors_sequence& SimModel::
      SimSimulationOutputRequest_Daylighting_DaylightFactors () const
      {
        return this->SimSimulationOutputRequest_Daylighting_DaylightFactors_;
      }

      SimModel::SimSimulationOutputRequest_Daylighting_DaylightFactors_sequence& SimModel::
      SimSimulationOutputRequest_Daylighting_DaylightFactors ()
      {
        return this->SimSimulationOutputRequest_Daylighting_DaylightFactors_;
      }

      void SimModel::
      SimSimulationOutputRequest_Daylighting_DaylightFactors (const SimSimulationOutputRequest_Daylighting_DaylightFactors_sequence& s)
      {
        this->SimSimulationOutputRequest_Daylighting_DaylightFactors_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_sequence& SimModel::
      SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap () const
      {
        return this->SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_;
      }

      SimModel::SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_sequence& SimModel::
      SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap ()
      {
        return this->SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_;
      }

      void SimModel::
      SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap (const SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_sequence& s)
      {
        this->SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Default_Default_sequence& SimModel::
      SimSimulationOutputRequest_Default_Default () const
      {
        return this->SimSimulationOutputRequest_Default_Default_;
      }

      SimModel::SimSimulationOutputRequest_Default_Default_sequence& SimModel::
      SimSimulationOutputRequest_Default_Default ()
      {
        return this->SimSimulationOutputRequest_Default_Default_;
      }

      void SimModel::
      SimSimulationOutputRequest_Default_Default (const SimSimulationOutputRequest_Default_Default_sequence& s)
      {
        this->SimSimulationOutputRequest_Default_Default_ = s;
      }

      const SimModel::SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_sequence& SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors () const
      {
        return this->SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_;
      }

      SimModel::SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_sequence& SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors ()
      {
        return this->SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_;
      }

      void SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors (const SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_sequence& s)
      {
        this->SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_ = s;
      }

      const SimModel::SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_sequence& SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors () const
      {
        return this->SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_;
      }

      SimModel::SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_sequence& SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors ()
      {
        return this->SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_;
      }

      void SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors (const SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_sequence& s)
      {
        this->SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_ = s;
      }

      const SimModel::SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_sequence& SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors () const
      {
        return this->SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_;
      }

      SimModel::SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_sequence& SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors ()
      {
        return this->SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_;
      }

      void SimModel::
      SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors (const SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_sequence& s)
      {
        this->SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqDebuggingData_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqDebuggingData () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqDebuggingData_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqDebuggingData_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqDebuggingData ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqDebuggingData_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqDebuggingData (const SimSimulationOutputRequest_General_ReportReqDebuggingData_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqDebuggingData_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqDiagnostics_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqDiagnostics () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqDiagnostics_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqDiagnostics_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqDiagnostics ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqDiagnostics_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqDiagnostics (const SimSimulationOutputRequest_General_ReportReqDiagnostics_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqDiagnostics_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem (const SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqPreprocessorMessage () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqPreprocessorMessage ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqPreprocessorMessage (const SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqSchedules_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqSchedules () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqSchedules_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqSchedules_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqSchedules ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqSchedules_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqSchedules (const SimSimulationOutputRequest_General_ReportReqSchedules_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqSchedules_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqSQLite_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqSQLite () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqSQLite_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqSQLite_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqSQLite ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqSQLite_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqSQLite (const SimSimulationOutputRequest_General_ReportReqSQLite_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqSQLite_ = s;
      }

      const SimModel::SimSimulationOutputRequest_General_ReportReqVariableDictionary_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqVariableDictionary () const
      {
        return this->SimSimulationOutputRequest_General_ReportReqVariableDictionary_;
      }

      SimModel::SimSimulationOutputRequest_General_ReportReqVariableDictionary_sequence& SimModel::
      SimSimulationOutputRequest_General_ReportReqVariableDictionary ()
      {
        return this->SimSimulationOutputRequest_General_ReportReqVariableDictionary_;
      }

      void SimModel::
      SimSimulationOutputRequest_General_ReportReqVariableDictionary (const SimSimulationOutputRequest_General_ReportReqVariableDictionary_sequence& s)
      {
        this->SimSimulationOutputRequest_General_ReportReqVariableDictionary_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Geometry_ReportReqConstructions_sequence& SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqConstructions () const
      {
        return this->SimSimulationOutputRequest_Geometry_ReportReqConstructions_;
      }

      SimModel::SimSimulationOutputRequest_Geometry_ReportReqConstructions_sequence& SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqConstructions ()
      {
        return this->SimSimulationOutputRequest_Geometry_ReportReqConstructions_;
      }

      void SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqConstructions (const SimSimulationOutputRequest_Geometry_ReportReqConstructions_sequence& s)
      {
        this->SimSimulationOutputRequest_Geometry_ReportReqConstructions_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_sequence& SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing () const
      {
        return this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_;
      }

      SimModel::SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_sequence& SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing ()
      {
        return this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_;
      }

      void SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing (const SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_sequence& s)
      {
        this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_sequence& SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqSurfacesList () const
      {
        return this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_;
      }

      SimModel::SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_sequence& SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqSurfacesList ()
      {
        return this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_;
      }

      void SimModel::
      SimSimulationOutputRequest_Geometry_ReportReqSurfacesList (const SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_sequence& s)
      {
        this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_EnergyEndUseCategory_sequence& SimModel::
      SimSimulationOutputRequest_Meters_EnergyEndUseCategory () const
      {
        return this->SimSimulationOutputRequest_Meters_EnergyEndUseCategory_;
      }

      SimModel::SimSimulationOutputRequest_Meters_EnergyEndUseCategory_sequence& SimModel::
      SimSimulationOutputRequest_Meters_EnergyEndUseCategory ()
      {
        return this->SimSimulationOutputRequest_Meters_EnergyEndUseCategory_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_EnergyEndUseCategory (const SimSimulationOutputRequest_Meters_EnergyEndUseCategory_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_EnergyEndUseCategory_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_MeterCumulative_sequence& SimModel::
      SimSimulationOutputRequest_Meters_MeterCumulative () const
      {
        return this->SimSimulationOutputRequest_Meters_MeterCumulative_;
      }

      SimModel::SimSimulationOutputRequest_Meters_MeterCumulative_sequence& SimModel::
      SimSimulationOutputRequest_Meters_MeterCumulative ()
      {
        return this->SimSimulationOutputRequest_Meters_MeterCumulative_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_MeterCumulative (const SimSimulationOutputRequest_Meters_MeterCumulative_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_MeterCumulative_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_sequence& SimModel::
      SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly () const
      {
        return this->SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_;
      }

      SimModel::SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_sequence& SimModel::
      SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly ()
      {
        return this->SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly (const SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_MeterFileOnly_sequence& SimModel::
      SimSimulationOutputRequest_Meters_MeterFileOnly () const
      {
        return this->SimSimulationOutputRequest_Meters_MeterFileOnly_;
      }

      SimModel::SimSimulationOutputRequest_Meters_MeterFileOnly_sequence& SimModel::
      SimSimulationOutputRequest_Meters_MeterFileOnly ()
      {
        return this->SimSimulationOutputRequest_Meters_MeterFileOnly_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_MeterFileOnly (const SimSimulationOutputRequest_Meters_MeterFileOnly_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_MeterFileOnly_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_VarReqMeter_sequence& SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeter () const
      {
        return this->SimSimulationOutputRequest_Meters_VarReqMeter_;
      }

      SimModel::SimSimulationOutputRequest_Meters_VarReqMeter_sequence& SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeter ()
      {
        return this->SimSimulationOutputRequest_Meters_VarReqMeter_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeter (const SimSimulationOutputRequest_Meters_VarReqMeter_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_VarReqMeter_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_VarReqMeterCustom_sequence& SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeterCustom () const
      {
        return this->SimSimulationOutputRequest_Meters_VarReqMeterCustom_;
      }

      SimModel::SimSimulationOutputRequest_Meters_VarReqMeterCustom_sequence& SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeterCustom ()
      {
        return this->SimSimulationOutputRequest_Meters_VarReqMeterCustom_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeterCustom (const SimSimulationOutputRequest_Meters_VarReqMeterCustom_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_VarReqMeterCustom_ = s;
      }

      const SimModel::SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_sequence& SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement () const
      {
        return this->SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_;
      }

      SimModel::SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_sequence& SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement ()
      {
        return this->SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_;
      }

      void SimModel::
      SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement (const SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_sequence& s)
      {
        this->SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_ = s;
      }

      const SimModel::SimSimulationOutputRequest_StandardReports_TableMonthly_sequence& SimModel::
      SimSimulationOutputRequest_StandardReports_TableMonthly () const
      {
        return this->SimSimulationOutputRequest_StandardReports_TableMonthly_;
      }

      SimModel::SimSimulationOutputRequest_StandardReports_TableMonthly_sequence& SimModel::
      SimSimulationOutputRequest_StandardReports_TableMonthly ()
      {
        return this->SimSimulationOutputRequest_StandardReports_TableMonthly_;
      }

      void SimModel::
      SimSimulationOutputRequest_StandardReports_TableMonthly (const SimSimulationOutputRequest_StandardReports_TableMonthly_sequence& s)
      {
        this->SimSimulationOutputRequest_StandardReports_TableMonthly_ = s;
      }

      const SimModel::SimSimulationOutputRequest_StandardReports_TableSummaryReports_sequence& SimModel::
      SimSimulationOutputRequest_StandardReports_TableSummaryReports () const
      {
        return this->SimSimulationOutputRequest_StandardReports_TableSummaryReports_;
      }

      SimModel::SimSimulationOutputRequest_StandardReports_TableSummaryReports_sequence& SimModel::
      SimSimulationOutputRequest_StandardReports_TableSummaryReports ()
      {
        return this->SimSimulationOutputRequest_StandardReports_TableSummaryReports_;
      }

      void SimModel::
      SimSimulationOutputRequest_StandardReports_TableSummaryReports (const SimSimulationOutputRequest_StandardReports_TableSummaryReports_sequence& s)
      {
        this->SimSimulationOutputRequest_StandardReports_TableSummaryReports_ = s;
      }

      const SimModel::SimSimulationOutputRequest_StandardReports_TableTimeBins_sequence& SimModel::
      SimSimulationOutputRequest_StandardReports_TableTimeBins () const
      {
        return this->SimSimulationOutputRequest_StandardReports_TableTimeBins_;
      }

      SimModel::SimSimulationOutputRequest_StandardReports_TableTimeBins_sequence& SimModel::
      SimSimulationOutputRequest_StandardReports_TableTimeBins ()
      {
        return this->SimSimulationOutputRequest_StandardReports_TableTimeBins_;
      }

      void SimModel::
      SimSimulationOutputRequest_StandardReports_TableTimeBins (const SimSimulationOutputRequest_StandardReports_TableTimeBins_sequence& s)
      {
        this->SimSimulationOutputRequest_StandardReports_TableTimeBins_ = s;
      }

      const SimModel::SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_sequence& SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable () const
      {
        return this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_;
      }

      SimModel::SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_sequence& SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable ()
      {
        return this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_;
      }

      void SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable (const SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_sequence& s)
      {
        this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_ = s;
      }

      const SimModel::SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_sequence& SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable () const
      {
        return this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_;
      }

      SimModel::SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_sequence& SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable ()
      {
        return this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_;
      }

      void SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable (const SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_sequence& s)
      {
        this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_ = s;
      }

      const SimModel::SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_sequence& SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable () const
      {
        return this->SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_;
      }

      SimModel::SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_sequence& SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable ()
      {
        return this->SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_;
      }

      void SimModel::
      SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable (const SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_sequence& s)
      {
        this->SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_ = s;
      }

      const SimModel::SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_sequence& SimModel::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm () const
      {
        return this->SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_;
      }

      SimModel::SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_sequence& SimModel::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm ()
      {
        return this->SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_;
      }

      void SimModel::
      SimSimulationParameters_Algorithm_HeatBalanceAlgorithm (const SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_sequence& s)
      {
        this->SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_ = s;
      }

      const SimModel::SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_sequence& SimModel::
      SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside () const
      {
        return this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_;
      }

      SimModel::SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_sequence& SimModel::
      SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside ()
      {
        return this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_;
      }

      void SimModel::
      SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside (const SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_sequence& s)
      {
        this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_ = s;
      }

      const SimModel::SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_sequence& SimModel::
      SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside () const
      {
        return this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_;
      }

      SimModel::SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_sequence& SimModel::
      SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside ()
      {
        return this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_;
      }

      void SimModel::
      SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside (const SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_sequence& s)
      {
        this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_ = s;
      }

      const SimModel::SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_sequence& SimModel::
      SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm () const
      {
        return this->SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_;
      }

      SimModel::SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_sequence& SimModel::
      SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm ()
      {
        return this->SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_;
      }

      void SimModel::
      SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm (const SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_sequence& s)
      {
        this->SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_ = s;
      }

      const SimModel::SimSimulationParameters_ConvectionCoefficients_Default_sequence& SimModel::
      SimSimulationParameters_ConvectionCoefficients_Default () const
      {
        return this->SimSimulationParameters_ConvectionCoefficients_Default_;
      }

      SimModel::SimSimulationParameters_ConvectionCoefficients_Default_sequence& SimModel::
      SimSimulationParameters_ConvectionCoefficients_Default ()
      {
        return this->SimSimulationParameters_ConvectionCoefficients_Default_;
      }

      void SimModel::
      SimSimulationParameters_ConvectionCoefficients_Default (const SimSimulationParameters_ConvectionCoefficients_Default_sequence& s)
      {
        this->SimSimulationParameters_ConvectionCoefficients_Default_ = s;
      }

      const SimModel::SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_sequence& SimModel::
      SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces () const
      {
        return this->SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_;
      }

      SimModel::SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_sequence& SimModel::
      SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces ()
      {
        return this->SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_;
      }

      void SimModel::
      SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces (const SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_sequence& s)
      {
        this->SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_ = s;
      }

      const SimModel::SimSimulationParameters_FluidProperties_Concentration_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Concentration () const
      {
        return this->SimSimulationParameters_FluidProperties_Concentration_;
      }

      SimModel::SimSimulationParameters_FluidProperties_Concentration_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Concentration ()
      {
        return this->SimSimulationParameters_FluidProperties_Concentration_;
      }

      void SimModel::
      SimSimulationParameters_FluidProperties_Concentration (const SimSimulationParameters_FluidProperties_Concentration_sequence& s)
      {
        this->SimSimulationParameters_FluidProperties_Concentration_ = s;
      }

      const SimModel::SimSimulationParameters_FluidProperties_GlycolConcentrations_sequence& SimModel::
      SimSimulationParameters_FluidProperties_GlycolConcentrations () const
      {
        return this->SimSimulationParameters_FluidProperties_GlycolConcentrations_;
      }

      SimModel::SimSimulationParameters_FluidProperties_GlycolConcentrations_sequence& SimModel::
      SimSimulationParameters_FluidProperties_GlycolConcentrations ()
      {
        return this->SimSimulationParameters_FluidProperties_GlycolConcentrations_;
      }

      void SimModel::
      SimSimulationParameters_FluidProperties_GlycolConcentrations (const SimSimulationParameters_FluidProperties_GlycolConcentrations_sequence& s)
      {
        this->SimSimulationParameters_FluidProperties_GlycolConcentrations_ = s;
      }

      const SimModel::SimSimulationParameters_FluidProperties_Names_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Names () const
      {
        return this->SimSimulationParameters_FluidProperties_Names_;
      }

      SimModel::SimSimulationParameters_FluidProperties_Names_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Names ()
      {
        return this->SimSimulationParameters_FluidProperties_Names_;
      }

      void SimModel::
      SimSimulationParameters_FluidProperties_Names (const SimSimulationParameters_FluidProperties_Names_sequence& s)
      {
        this->SimSimulationParameters_FluidProperties_Names_ = s;
      }

      const SimModel::SimSimulationParameters_FluidProperties_Saturated_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Saturated () const
      {
        return this->SimSimulationParameters_FluidProperties_Saturated_;
      }

      SimModel::SimSimulationParameters_FluidProperties_Saturated_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Saturated ()
      {
        return this->SimSimulationParameters_FluidProperties_Saturated_;
      }

      void SimModel::
      SimSimulationParameters_FluidProperties_Saturated (const SimSimulationParameters_FluidProperties_Saturated_sequence& s)
      {
        this->SimSimulationParameters_FluidProperties_Saturated_ = s;
      }

      const SimModel::SimSimulationParameters_FluidProperties_SuperHeated_sequence& SimModel::
      SimSimulationParameters_FluidProperties_SuperHeated () const
      {
        return this->SimSimulationParameters_FluidProperties_SuperHeated_;
      }

      SimModel::SimSimulationParameters_FluidProperties_SuperHeated_sequence& SimModel::
      SimSimulationParameters_FluidProperties_SuperHeated ()
      {
        return this->SimSimulationParameters_FluidProperties_SuperHeated_;
      }

      void SimModel::
      SimSimulationParameters_FluidProperties_SuperHeated (const SimSimulationParameters_FluidProperties_SuperHeated_sequence& s)
      {
        this->SimSimulationParameters_FluidProperties_SuperHeated_ = s;
      }

      const SimModel::SimSimulationParameters_FluidProperties_Temperatures_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Temperatures () const
      {
        return this->SimSimulationParameters_FluidProperties_Temperatures_;
      }

      SimModel::SimSimulationParameters_FluidProperties_Temperatures_sequence& SimModel::
      SimSimulationParameters_FluidProperties_Temperatures ()
      {
        return this->SimSimulationParameters_FluidProperties_Temperatures_;
      }

      void SimModel::
      SimSimulationParameters_FluidProperties_Temperatures (const SimSimulationParameters_FluidProperties_Temperatures_sequence& s)
      {
        this->SimSimulationParameters_FluidProperties_Temperatures_ = s;
      }

      const SimModel::SimSimulationParameters_GroundHeatTransfer_Default_sequence& SimModel::
      SimSimulationParameters_GroundHeatTransfer_Default () const
      {
        return this->SimSimulationParameters_GroundHeatTransfer_Default_;
      }

      SimModel::SimSimulationParameters_GroundHeatTransfer_Default_sequence& SimModel::
      SimSimulationParameters_GroundHeatTransfer_Default ()
      {
        return this->SimSimulationParameters_GroundHeatTransfer_Default_;
      }

      void SimModel::
      SimSimulationParameters_GroundHeatTransfer_Default (const SimSimulationParameters_GroundHeatTransfer_Default_sequence& s)
      {
        this->SimSimulationParameters_GroundHeatTransfer_Default_ = s;
      }

      const SimModel::SimSimulationParameters_HvacDesign_AirLoopSizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_AirLoopSizing () const
      {
        return this->SimSimulationParameters_HvacDesign_AirLoopSizing_;
      }

      SimModel::SimSimulationParameters_HvacDesign_AirLoopSizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_AirLoopSizing ()
      {
        return this->SimSimulationParameters_HvacDesign_AirLoopSizing_;
      }

      void SimModel::
      SimSimulationParameters_HvacDesign_AirLoopSizing (const SimSimulationParameters_HvacDesign_AirLoopSizing_sequence& s)
      {
        this->SimSimulationParameters_HvacDesign_AirLoopSizing_ = s;
      }

      const SimModel::SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_sequence& SimModel::
      SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec () const
      {
        return this->SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_;
      }

      SimModel::SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_sequence& SimModel::
      SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec ()
      {
        return this->SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_;
      }

      void SimModel::
      SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec (const SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_sequence& s)
      {
        this->SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_ = s;
      }

      const SimModel::SimSimulationParameters_HvacDesign_Sizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_Sizing () const
      {
        return this->SimSimulationParameters_HvacDesign_Sizing_;
      }

      SimModel::SimSimulationParameters_HvacDesign_Sizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_Sizing ()
      {
        return this->SimSimulationParameters_HvacDesign_Sizing_;
      }

      void SimModel::
      SimSimulationParameters_HvacDesign_Sizing (const SimSimulationParameters_HvacDesign_Sizing_sequence& s)
      {
        this->SimSimulationParameters_HvacDesign_Sizing_ = s;
      }

      const SimModel::SimSimulationParameters_HvacDesign_WaterLoopSizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_WaterLoopSizing () const
      {
        return this->SimSimulationParameters_HvacDesign_WaterLoopSizing_;
      }

      SimModel::SimSimulationParameters_HvacDesign_WaterLoopSizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_WaterLoopSizing ()
      {
        return this->SimSimulationParameters_HvacDesign_WaterLoopSizing_;
      }

      void SimModel::
      SimSimulationParameters_HvacDesign_WaterLoopSizing (const SimSimulationParameters_HvacDesign_WaterLoopSizing_sequence& s)
      {
        this->SimSimulationParameters_HvacDesign_WaterLoopSizing_ = s;
      }

      const SimModel::SimSimulationParameters_HvacDesign_ZoneAIrDistribution_sequence& SimModel::
      SimSimulationParameters_HvacDesign_ZoneAIrDistribution () const
      {
        return this->SimSimulationParameters_HvacDesign_ZoneAIrDistribution_;
      }

      SimModel::SimSimulationParameters_HvacDesign_ZoneAIrDistribution_sequence& SimModel::
      SimSimulationParameters_HvacDesign_ZoneAIrDistribution ()
      {
        return this->SimSimulationParameters_HvacDesign_ZoneAIrDistribution_;
      }

      void SimModel::
      SimSimulationParameters_HvacDesign_ZoneAIrDistribution (const SimSimulationParameters_HvacDesign_ZoneAIrDistribution_sequence& s)
      {
        this->SimSimulationParameters_HvacDesign_ZoneAIrDistribution_ = s;
      }

      const SimModel::SimSimulationParameters_HvacDesign_ZoneSizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_ZoneSizing () const
      {
        return this->SimSimulationParameters_HvacDesign_ZoneSizing_;
      }

      SimModel::SimSimulationParameters_HvacDesign_ZoneSizing_sequence& SimModel::
      SimSimulationParameters_HvacDesign_ZoneSizing ()
      {
        return this->SimSimulationParameters_HvacDesign_ZoneSizing_;
      }

      void SimModel::
      SimSimulationParameters_HvacDesign_ZoneSizing (const SimSimulationParameters_HvacDesign_ZoneSizing_sequence& s)
      {
        this->SimSimulationParameters_HvacDesign_ZoneSizing_ = s;
      }

      const SimModel::SimSimulationParameters_Parametric_FileNameSuffix_sequence& SimModel::
      SimSimulationParameters_Parametric_FileNameSuffix () const
      {
        return this->SimSimulationParameters_Parametric_FileNameSuffix_;
      }

      SimModel::SimSimulationParameters_Parametric_FileNameSuffix_sequence& SimModel::
      SimSimulationParameters_Parametric_FileNameSuffix ()
      {
        return this->SimSimulationParameters_Parametric_FileNameSuffix_;
      }

      void SimModel::
      SimSimulationParameters_Parametric_FileNameSuffix (const SimSimulationParameters_Parametric_FileNameSuffix_sequence& s)
      {
        this->SimSimulationParameters_Parametric_FileNameSuffix_ = s;
      }

      const SimModel::SimSimulationParameters_Parametric_Logic_sequence& SimModel::
      SimSimulationParameters_Parametric_Logic () const
      {
        return this->SimSimulationParameters_Parametric_Logic_;
      }

      SimModel::SimSimulationParameters_Parametric_Logic_sequence& SimModel::
      SimSimulationParameters_Parametric_Logic ()
      {
        return this->SimSimulationParameters_Parametric_Logic_;
      }

      void SimModel::
      SimSimulationParameters_Parametric_Logic (const SimSimulationParameters_Parametric_Logic_sequence& s)
      {
        this->SimSimulationParameters_Parametric_Logic_ = s;
      }

      const SimModel::SimSimulationParameters_Parametric_RunControl_sequence& SimModel::
      SimSimulationParameters_Parametric_RunControl () const
      {
        return this->SimSimulationParameters_Parametric_RunControl_;
      }

      SimModel::SimSimulationParameters_Parametric_RunControl_sequence& SimModel::
      SimSimulationParameters_Parametric_RunControl ()
      {
        return this->SimSimulationParameters_Parametric_RunControl_;
      }

      void SimModel::
      SimSimulationParameters_Parametric_RunControl (const SimSimulationParameters_Parametric_RunControl_sequence& s)
      {
        this->SimSimulationParameters_Parametric_RunControl_ = s;
      }

      const SimModel::SimSimulationParameters_Parametric_SetValueForRun_sequence& SimModel::
      SimSimulationParameters_Parametric_SetValueForRun () const
      {
        return this->SimSimulationParameters_Parametric_SetValueForRun_;
      }

      SimModel::SimSimulationParameters_Parametric_SetValueForRun_sequence& SimModel::
      SimSimulationParameters_Parametric_SetValueForRun ()
      {
        return this->SimSimulationParameters_Parametric_SetValueForRun_;
      }

      void SimModel::
      SimSimulationParameters_Parametric_SetValueForRun (const SimSimulationParameters_Parametric_SetValueForRun_sequence& s)
      {
        this->SimSimulationParameters_Parametric_SetValueForRun_ = s;
      }

      const SimModel::SimSimulationParameters_SimulationControl_DaylightSavingTime_sequence& SimModel::
      SimSimulationParameters_SimulationControl_DaylightSavingTime () const
      {
        return this->SimSimulationParameters_SimulationControl_DaylightSavingTime_;
      }

      SimModel::SimSimulationParameters_SimulationControl_DaylightSavingTime_sequence& SimModel::
      SimSimulationParameters_SimulationControl_DaylightSavingTime ()
      {
        return this->SimSimulationParameters_SimulationControl_DaylightSavingTime_;
      }

      void SimModel::
      SimSimulationParameters_SimulationControl_DaylightSavingTime (const SimSimulationParameters_SimulationControl_DaylightSavingTime_sequence& s)
      {
        this->SimSimulationParameters_SimulationControl_DaylightSavingTime_ = s;
      }

      const SimModel::SimSimulationParameters_SimulationControl_Default_sequence& SimModel::
      SimSimulationParameters_SimulationControl_Default () const
      {
        return this->SimSimulationParameters_SimulationControl_Default_;
      }

      SimModel::SimSimulationParameters_SimulationControl_Default_sequence& SimModel::
      SimSimulationParameters_SimulationControl_Default ()
      {
        return this->SimSimulationParameters_SimulationControl_Default_;
      }

      void SimModel::
      SimSimulationParameters_SimulationControl_Default (const SimSimulationParameters_SimulationControl_Default_sequence& s)
      {
        this->SimSimulationParameters_SimulationControl_Default_ = s;
      }

      const SimModel::SimSimulationParameters_SimulationControl_RunPeriod_sequence& SimModel::
      SimSimulationParameters_SimulationControl_RunPeriod () const
      {
        return this->SimSimulationParameters_SimulationControl_RunPeriod_;
      }

      SimModel::SimSimulationParameters_SimulationControl_RunPeriod_sequence& SimModel::
      SimSimulationParameters_SimulationControl_RunPeriod ()
      {
        return this->SimSimulationParameters_SimulationControl_RunPeriod_;
      }

      void SimModel::
      SimSimulationParameters_SimulationControl_RunPeriod (const SimSimulationParameters_SimulationControl_RunPeriod_sequence& s)
      {
        this->SimSimulationParameters_SimulationControl_RunPeriod_ = s;
      }

      const SimModel::SimSimulationParameters_SimulationControl_RunPeriodCustomRange_sequence& SimModel::
      SimSimulationParameters_SimulationControl_RunPeriodCustomRange () const
      {
        return this->SimSimulationParameters_SimulationControl_RunPeriodCustomRange_;
      }

      SimModel::SimSimulationParameters_SimulationControl_RunPeriodCustomRange_sequence& SimModel::
      SimSimulationParameters_SimulationControl_RunPeriodCustomRange ()
      {
        return this->SimSimulationParameters_SimulationControl_RunPeriodCustomRange_;
      }

      void SimModel::
      SimSimulationParameters_SimulationControl_RunPeriodCustomRange (const SimSimulationParameters_SimulationControl_RunPeriodCustomRange_sequence& s)
      {
        this->SimSimulationParameters_SimulationControl_RunPeriodCustomRange_ = s;
      }

      const SimModel::SimSimulationParameters_SimulationControl_SpecialDays_sequence& SimModel::
      SimSimulationParameters_SimulationControl_SpecialDays () const
      {
        return this->SimSimulationParameters_SimulationControl_SpecialDays_;
      }

      SimModel::SimSimulationParameters_SimulationControl_SpecialDays_sequence& SimModel::
      SimSimulationParameters_SimulationControl_SpecialDays ()
      {
        return this->SimSimulationParameters_SimulationControl_SpecialDays_;
      }

      void SimModel::
      SimSimulationParameters_SimulationControl_SpecialDays (const SimSimulationParameters_SimulationControl_SpecialDays_sequence& s)
      {
        this->SimSimulationParameters_SimulationControl_SpecialDays_ = s;
      }

      const SimModel::SimSimulationParameters_SiteWindPressure_WindDirections_sequence& SimModel::
      SimSimulationParameters_SiteWindPressure_WindDirections () const
      {
        return this->SimSimulationParameters_SiteWindPressure_WindDirections_;
      }

      SimModel::SimSimulationParameters_SiteWindPressure_WindDirections_sequence& SimModel::
      SimSimulationParameters_SiteWindPressure_WindDirections ()
      {
        return this->SimSimulationParameters_SiteWindPressure_WindDirections_;
      }

      void SimModel::
      SimSimulationParameters_SiteWindPressure_WindDirections (const SimSimulationParameters_SiteWindPressure_WindDirections_sequence& s)
      {
        this->SimSimulationParameters_SiteWindPressure_WindDirections_ = s;
      }

      const SimModel::SimSimulationParameters_SiteWindPressure_WindPressureValues_sequence& SimModel::
      SimSimulationParameters_SiteWindPressure_WindPressureValues () const
      {
        return this->SimSimulationParameters_SiteWindPressure_WindPressureValues_;
      }

      SimModel::SimSimulationParameters_SiteWindPressure_WindPressureValues_sequence& SimModel::
      SimSimulationParameters_SiteWindPressure_WindPressureValues ()
      {
        return this->SimSimulationParameters_SiteWindPressure_WindPressureValues_;
      }

      void SimModel::
      SimSimulationParameters_SiteWindPressure_WindPressureValues (const SimSimulationParameters_SiteWindPressure_WindPressureValues_sequence& s)
      {
        this->SimSimulationParameters_SiteWindPressure_WindPressureValues_ = s;
      }

      const SimModel::SimSimulationParameters_SurfaceProperties_Default_sequence& SimModel::
      SimSimulationParameters_SurfaceProperties_Default () const
      {
        return this->SimSimulationParameters_SurfaceProperties_Default_;
      }

      SimModel::SimSimulationParameters_SurfaceProperties_Default_sequence& SimModel::
      SimSimulationParameters_SurfaceProperties_Default ()
      {
        return this->SimSimulationParameters_SurfaceProperties_Default_;
      }

      void SimModel::
      SimSimulationParameters_SurfaceProperties_Default (const SimSimulationParameters_SurfaceProperties_Default_sequence& s)
      {
        this->SimSimulationParameters_SurfaceProperties_Default_ = s;
      }

      const SimModel::SimSimulationParameters_SurfaceProperties_VaporCoefficients_sequence& SimModel::
      SimSimulationParameters_SurfaceProperties_VaporCoefficients () const
      {
        return this->SimSimulationParameters_SurfaceProperties_VaporCoefficients_;
      }

      SimModel::SimSimulationParameters_SurfaceProperties_VaporCoefficients_sequence& SimModel::
      SimSimulationParameters_SurfaceProperties_VaporCoefficients ()
      {
        return this->SimSimulationParameters_SurfaceProperties_VaporCoefficients_;
      }

      void SimModel::
      SimSimulationParameters_SurfaceProperties_VaporCoefficients (const SimSimulationParameters_SurfaceProperties_VaporCoefficients_sequence& s)
      {
        this->SimSimulationParameters_SurfaceProperties_VaporCoefficients_ = s;
      }

      const SimModel::SimSimulationRun_EPlusSimulation_Default_sequence& SimModel::
      SimSimulationRun_EPlusSimulation_Default () const
      {
        return this->SimSimulationRun_EPlusSimulation_Default_;
      }

      SimModel::SimSimulationRun_EPlusSimulation_Default_sequence& SimModel::
      SimSimulationRun_EPlusSimulation_Default ()
      {
        return this->SimSimulationRun_EPlusSimulation_Default_;
      }

      void SimModel::
      SimSimulationRun_EPlusSimulation_Default (const SimSimulationRun_EPlusSimulation_Default_sequence& s)
      {
        this->SimSimulationRun_EPlusSimulation_Default_ = s;
      }

      const SimModel::SimSimulationRun_StandardsRun_ASHRAE90_1_sequence& SimModel::
      SimSimulationRun_StandardsRun_ASHRAE90_1 () const
      {
        return this->SimSimulationRun_StandardsRun_ASHRAE90_1_;
      }

      SimModel::SimSimulationRun_StandardsRun_ASHRAE90_1_sequence& SimModel::
      SimSimulationRun_StandardsRun_ASHRAE90_1 ()
      {
        return this->SimSimulationRun_StandardsRun_ASHRAE90_1_;
      }

      void SimModel::
      SimSimulationRun_StandardsRun_ASHRAE90_1 (const SimSimulationRun_StandardsRun_ASHRAE90_1_sequence& s)
      {
        this->SimSimulationRun_StandardsRun_ASHRAE90_1_ = s;
      }

      const SimModel::SimSimulationRun_StandardsRun_LEED_sequence& SimModel::
      SimSimulationRun_StandardsRun_LEED () const
      {
        return this->SimSimulationRun_StandardsRun_LEED_;
      }

      SimModel::SimSimulationRun_StandardsRun_LEED_sequence& SimModel::
      SimSimulationRun_StandardsRun_LEED ()
      {
        return this->SimSimulationRun_StandardsRun_LEED_;
      }

      void SimModel::
      SimSimulationRun_StandardsRun_LEED (const SimSimulationRun_StandardsRun_LEED_sequence& s)
      {
        this->SimSimulationRun_StandardsRun_LEED_ = s;
      }

      const SimModel::SimSimulationRun_StandardsRun_SBDH_sequence& SimModel::
      SimSimulationRun_StandardsRun_SBDH () const
      {
        return this->SimSimulationRun_StandardsRun_SBDH_;
      }

      SimModel::SimSimulationRun_StandardsRun_SBDH_sequence& SimModel::
      SimSimulationRun_StandardsRun_SBDH ()
      {
        return this->SimSimulationRun_StandardsRun_SBDH_;
      }

      void SimModel::
      SimSimulationRun_StandardsRun_SBDH (const SimSimulationRun_StandardsRun_SBDH_sequence& s)
      {
        this->SimSimulationRun_StandardsRun_SBDH_ = s;
      }

      const SimModel::SimSimulationRun_StandardsRun_T24_sequence& SimModel::
      SimSimulationRun_StandardsRun_T24 () const
      {
        return this->SimSimulationRun_StandardsRun_T24_;
      }

      SimModel::SimSimulationRun_StandardsRun_T24_sequence& SimModel::
      SimSimulationRun_StandardsRun_T24 ()
      {
        return this->SimSimulationRun_StandardsRun_T24_;
      }

      void SimModel::
      SimSimulationRun_StandardsRun_T24 (const SimSimulationRun_StandardsRun_T24_sequence& s)
      {
        this->SimSimulationRun_StandardsRun_T24_ = s;
      }

      const SimModel::SimSite_AdjacentSite_Default_sequence& SimModel::
      SimSite_AdjacentSite_Default () const
      {
        return this->SimSite_AdjacentSite_Default_;
      }

      SimModel::SimSite_AdjacentSite_Default_sequence& SimModel::
      SimSite_AdjacentSite_Default ()
      {
        return this->SimSite_AdjacentSite_Default_;
      }

      void SimModel::
      SimSite_AdjacentSite_Default (const SimSite_AdjacentSite_Default_sequence& s)
      {
        this->SimSite_AdjacentSite_Default_ = s;
      }

      const SimModel::SimSite_BuildingSite_Default_sequence& SimModel::
      SimSite_BuildingSite_Default () const
      {
        return this->SimSite_BuildingSite_Default_;
      }

      SimModel::SimSite_BuildingSite_Default_sequence& SimModel::
      SimSite_BuildingSite_Default ()
      {
        return this->SimSite_BuildingSite_Default_;
      }

      void SimModel::
      SimSite_BuildingSite_Default (const SimSite_BuildingSite_Default_sequence& s)
      {
        this->SimSite_BuildingSite_Default_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater () const
      {
        return this->SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater ()
      {
        return this->SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater (const SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_ExteriorLighting_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorLighting () const
      {
        return this->SimSiteAssembly_SiteAssembly_ExteriorLighting_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_ExteriorLighting_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorLighting ()
      {
        return this->SimSiteAssembly_SiteAssembly_ExteriorLighting_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorLighting (const SimSiteAssembly_SiteAssembly_ExteriorLighting_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_ExteriorLighting_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_ExteriorSignage_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorSignage () const
      {
        return this->SimSiteAssembly_SiteAssembly_ExteriorSignage_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_ExteriorSignage_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorSignage ()
      {
        return this->SimSiteAssembly_SiteAssembly_ExteriorSignage_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_ExteriorSignage (const SimSiteAssembly_SiteAssembly_ExteriorSignage_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_ExteriorSignage_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_Fuel_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_Fuel () const
      {
        return this->SimSiteAssembly_SiteAssembly_Fuel_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_Fuel_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_Fuel ()
      {
        return this->SimSiteAssembly_SiteAssembly_Fuel_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_Fuel (const SimSiteAssembly_SiteAssembly_Fuel_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_Fuel_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_FuelCell_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_FuelCell () const
      {
        return this->SimSiteAssembly_SiteAssembly_FuelCell_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_FuelCell_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_FuelCell ()
      {
        return this->SimSiteAssembly_SiteAssembly_FuelCell_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_FuelCell (const SimSiteAssembly_SiteAssembly_FuelCell_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_FuelCell_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_SolarHotWater_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_SolarHotWater () const
      {
        return this->SimSiteAssembly_SiteAssembly_SolarHotWater_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_SolarHotWater_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_SolarHotWater ()
      {
        return this->SimSiteAssembly_SiteAssembly_SolarHotWater_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_SolarHotWater (const SimSiteAssembly_SiteAssembly_SolarHotWater_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_SolarHotWater_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_SolarPhotovoltaic () const
      {
        return this->SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_SolarPhotovoltaic ()
      {
        return this->SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_SolarPhotovoltaic (const SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_Water_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_Water () const
      {
        return this->SimSiteAssembly_SiteAssembly_Water_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_Water_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_Water ()
      {
        return this->SimSiteAssembly_SiteAssembly_Water_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_Water (const SimSiteAssembly_SiteAssembly_Water_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_Water_ = s;
      }

      const SimModel::SimSiteAssembly_SiteAssembly_WindTurbine_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_WindTurbine () const
      {
        return this->SimSiteAssembly_SiteAssembly_WindTurbine_;
      }

      SimModel::SimSiteAssembly_SiteAssembly_WindTurbine_sequence& SimModel::
      SimSiteAssembly_SiteAssembly_WindTurbine ()
      {
        return this->SimSiteAssembly_SiteAssembly_WindTurbine_;
      }

      void SimModel::
      SimSiteAssembly_SiteAssembly_WindTurbine (const SimSiteAssembly_SiteAssembly_WindTurbine_sequence& s)
      {
        this->SimSiteAssembly_SiteAssembly_WindTurbine_ = s;
      }

      const SimModel::SimSIUnitType_SiUnit_Default_sequence& SimModel::
      SimSIUnitType_SiUnit_Default () const
      {
        return this->SimSIUnitType_SiUnit_Default_;
      }

      SimModel::SimSIUnitType_SiUnit_Default_sequence& SimModel::
      SimSIUnitType_SiUnit_Default ()
      {
        return this->SimSIUnitType_SiUnit_Default_;
      }

      void SimModel::
      SimSIUnitType_SiUnit_Default (const SimSIUnitType_SiUnit_Default_sequence& s)
      {
        this->SimSIUnitType_SiUnit_Default_ = s;
      }

      const SimModel::SimSlab_Ceiling_InterzoneCeiling_sequence& SimModel::
      SimSlab_Ceiling_InterzoneCeiling () const
      {
        return this->SimSlab_Ceiling_InterzoneCeiling_;
      }

      SimModel::SimSlab_Ceiling_InterzoneCeiling_sequence& SimModel::
      SimSlab_Ceiling_InterzoneCeiling ()
      {
        return this->SimSlab_Ceiling_InterzoneCeiling_;
      }

      void SimModel::
      SimSlab_Ceiling_InterzoneCeiling (const SimSlab_Ceiling_InterzoneCeiling_sequence& s)
      {
        this->SimSlab_Ceiling_InterzoneCeiling_ = s;
      }

      const SimModel::SimSlab_Ceiling_InterzoneCeilingAdiabatic_sequence& SimModel::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic () const
      {
        return this->SimSlab_Ceiling_InterzoneCeilingAdiabatic_;
      }

      SimModel::SimSlab_Ceiling_InterzoneCeilingAdiabatic_sequence& SimModel::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic ()
      {
        return this->SimSlab_Ceiling_InterzoneCeilingAdiabatic_;
      }

      void SimModel::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic (const SimSlab_Ceiling_InterzoneCeilingAdiabatic_sequence& s)
      {
        this->SimSlab_Ceiling_InterzoneCeilingAdiabatic_ = s;
      }

      const SimModel::SimSlab_Ceiling_InterzoneCeilingDetailed_sequence& SimModel::
      SimSlab_Ceiling_InterzoneCeilingDetailed () const
      {
        return this->SimSlab_Ceiling_InterzoneCeilingDetailed_;
      }

      SimModel::SimSlab_Ceiling_InterzoneCeilingDetailed_sequence& SimModel::
      SimSlab_Ceiling_InterzoneCeilingDetailed ()
      {
        return this->SimSlab_Ceiling_InterzoneCeilingDetailed_;
      }

      void SimModel::
      SimSlab_Ceiling_InterzoneCeilingDetailed (const SimSlab_Ceiling_InterzoneCeilingDetailed_sequence& s)
      {
        this->SimSlab_Ceiling_InterzoneCeilingDetailed_ = s;
      }

      const SimModel::SimSlab_Default_Default_sequence& SimModel::
      SimSlab_Default_Default () const
      {
        return this->SimSlab_Default_Default_;
      }

      SimModel::SimSlab_Default_Default_sequence& SimModel::
      SimSlab_Default_Default ()
      {
        return this->SimSlab_Default_Default_;
      }

      void SimModel::
      SimSlab_Default_Default (const SimSlab_Default_Default_sequence& s)
      {
        this->SimSlab_Default_Default_ = s;
      }

      const SimModel::SimSlab_Floor_Adiabatic_sequence& SimModel::
      SimSlab_Floor_Adiabatic () const
      {
        return this->SimSlab_Floor_Adiabatic_;
      }

      SimModel::SimSlab_Floor_Adiabatic_sequence& SimModel::
      SimSlab_Floor_Adiabatic ()
      {
        return this->SimSlab_Floor_Adiabatic_;
      }

      void SimModel::
      SimSlab_Floor_Adiabatic (const SimSlab_Floor_Adiabatic_sequence& s)
      {
        this->SimSlab_Floor_Adiabatic_ = s;
      }

      const SimModel::SimSlab_Floor_FloorOverAir_sequence& SimModel::
      SimSlab_Floor_FloorOverAir () const
      {
        return this->SimSlab_Floor_FloorOverAir_;
      }

      SimModel::SimSlab_Floor_FloorOverAir_sequence& SimModel::
      SimSlab_Floor_FloorOverAir ()
      {
        return this->SimSlab_Floor_FloorOverAir_;
      }

      void SimModel::
      SimSlab_Floor_FloorOverAir (const SimSlab_Floor_FloorOverAir_sequence& s)
      {
        this->SimSlab_Floor_FloorOverAir_ = s;
      }

      const SimModel::SimSlab_Floor_FloorOverAirDetailed_sequence& SimModel::
      SimSlab_Floor_FloorOverAirDetailed () const
      {
        return this->SimSlab_Floor_FloorOverAirDetailed_;
      }

      SimModel::SimSlab_Floor_FloorOverAirDetailed_sequence& SimModel::
      SimSlab_Floor_FloorOverAirDetailed ()
      {
        return this->SimSlab_Floor_FloorOverAirDetailed_;
      }

      void SimModel::
      SimSlab_Floor_FloorOverAirDetailed (const SimSlab_Floor_FloorOverAirDetailed_sequence& s)
      {
        this->SimSlab_Floor_FloorOverAirDetailed_ = s;
      }

      const SimModel::SimSlab_Floor_FloorOverEarth_sequence& SimModel::
      SimSlab_Floor_FloorOverEarth () const
      {
        return this->SimSlab_Floor_FloorOverEarth_;
      }

      SimModel::SimSlab_Floor_FloorOverEarth_sequence& SimModel::
      SimSlab_Floor_FloorOverEarth ()
      {
        return this->SimSlab_Floor_FloorOverEarth_;
      }

      void SimModel::
      SimSlab_Floor_FloorOverEarth (const SimSlab_Floor_FloorOverEarth_sequence& s)
      {
        this->SimSlab_Floor_FloorOverEarth_ = s;
      }

      const SimModel::SimSlab_Floor_FloorOverEarthDetailed_sequence& SimModel::
      SimSlab_Floor_FloorOverEarthDetailed () const
      {
        return this->SimSlab_Floor_FloorOverEarthDetailed_;
      }

      SimModel::SimSlab_Floor_FloorOverEarthDetailed_sequence& SimModel::
      SimSlab_Floor_FloorOverEarthDetailed ()
      {
        return this->SimSlab_Floor_FloorOverEarthDetailed_;
      }

      void SimModel::
      SimSlab_Floor_FloorOverEarthDetailed (const SimSlab_Floor_FloorOverEarthDetailed_sequence& s)
      {
        this->SimSlab_Floor_FloorOverEarthDetailed_ = s;
      }

      const SimModel::SimSlab_Floor_InterzoneFloor_sequence& SimModel::
      SimSlab_Floor_InterzoneFloor () const
      {
        return this->SimSlab_Floor_InterzoneFloor_;
      }

      SimModel::SimSlab_Floor_InterzoneFloor_sequence& SimModel::
      SimSlab_Floor_InterzoneFloor ()
      {
        return this->SimSlab_Floor_InterzoneFloor_;
      }

      void SimModel::
      SimSlab_Floor_InterzoneFloor (const SimSlab_Floor_InterzoneFloor_sequence& s)
      {
        this->SimSlab_Floor_InterzoneFloor_ = s;
      }

      const SimModel::SimSlab_Floor_InterzoneFloorDetailed_sequence& SimModel::
      SimSlab_Floor_InterzoneFloorDetailed () const
      {
        return this->SimSlab_Floor_InterzoneFloorDetailed_;
      }

      SimModel::SimSlab_Floor_InterzoneFloorDetailed_sequence& SimModel::
      SimSlab_Floor_InterzoneFloorDetailed ()
      {
        return this->SimSlab_Floor_InterzoneFloorDetailed_;
      }

      void SimModel::
      SimSlab_Floor_InterzoneFloorDetailed (const SimSlab_Floor_InterzoneFloorDetailed_sequence& s)
      {
        this->SimSlab_Floor_InterzoneFloorDetailed_ = s;
      }

      const SimModel::SimSlab_Floor_RaisedFloor_sequence& SimModel::
      SimSlab_Floor_RaisedFloor () const
      {
        return this->SimSlab_Floor_RaisedFloor_;
      }

      SimModel::SimSlab_Floor_RaisedFloor_sequence& SimModel::
      SimSlab_Floor_RaisedFloor ()
      {
        return this->SimSlab_Floor_RaisedFloor_;
      }

      void SimModel::
      SimSlab_Floor_RaisedFloor (const SimSlab_Floor_RaisedFloor_sequence& s)
      {
        this->SimSlab_Floor_RaisedFloor_ = s;
      }

      const SimModel::SimSlab_Landing_Default_sequence& SimModel::
      SimSlab_Landing_Default () const
      {
        return this->SimSlab_Landing_Default_;
      }

      SimModel::SimSlab_Landing_Default_sequence& SimModel::
      SimSlab_Landing_Default ()
      {
        return this->SimSlab_Landing_Default_;
      }

      void SimModel::
      SimSlab_Landing_Default (const SimSlab_Landing_Default_sequence& s)
      {
        this->SimSlab_Landing_Default_ = s;
      }

      const SimModel::SimSlab_OtherSideCoefficients_Default_sequence& SimModel::
      SimSlab_OtherSideCoefficients_Default () const
      {
        return this->SimSlab_OtherSideCoefficients_Default_;
      }

      SimModel::SimSlab_OtherSideCoefficients_Default_sequence& SimModel::
      SimSlab_OtherSideCoefficients_Default ()
      {
        return this->SimSlab_OtherSideCoefficients_Default_;
      }

      void SimModel::
      SimSlab_OtherSideCoefficients_Default (const SimSlab_OtherSideCoefficients_Default_sequence& s)
      {
        this->SimSlab_OtherSideCoefficients_Default_ = s;
      }

      const SimModel::SimSlab_OtherSideCoefficients_Detailed_sequence& SimModel::
      SimSlab_OtherSideCoefficients_Detailed () const
      {
        return this->SimSlab_OtherSideCoefficients_Detailed_;
      }

      SimModel::SimSlab_OtherSideCoefficients_Detailed_sequence& SimModel::
      SimSlab_OtherSideCoefficients_Detailed ()
      {
        return this->SimSlab_OtherSideCoefficients_Detailed_;
      }

      void SimModel::
      SimSlab_OtherSideCoefficients_Detailed (const SimSlab_OtherSideCoefficients_Detailed_sequence& s)
      {
        this->SimSlab_OtherSideCoefficients_Detailed_ = s;
      }

      const SimModel::SimSlab_OtherSideCoefficients_DetailedFloor_sequence& SimModel::
      SimSlab_OtherSideCoefficients_DetailedFloor () const
      {
        return this->SimSlab_OtherSideCoefficients_DetailedFloor_;
      }

      SimModel::SimSlab_OtherSideCoefficients_DetailedFloor_sequence& SimModel::
      SimSlab_OtherSideCoefficients_DetailedFloor ()
      {
        return this->SimSlab_OtherSideCoefficients_DetailedFloor_;
      }

      void SimModel::
      SimSlab_OtherSideCoefficients_DetailedFloor (const SimSlab_OtherSideCoefficients_DetailedFloor_sequence& s)
      {
        this->SimSlab_OtherSideCoefficients_DetailedFloor_ = s;
      }

      const SimModel::SimSlab_OtherSideCoefficients_DetailedRoofCeiling_sequence& SimModel::
      SimSlab_OtherSideCoefficients_DetailedRoofCeiling () const
      {
        return this->SimSlab_OtherSideCoefficients_DetailedRoofCeiling_;
      }

      SimModel::SimSlab_OtherSideCoefficients_DetailedRoofCeiling_sequence& SimModel::
      SimSlab_OtherSideCoefficients_DetailedRoofCeiling ()
      {
        return this->SimSlab_OtherSideCoefficients_DetailedRoofCeiling_;
      }

      void SimModel::
      SimSlab_OtherSideCoefficients_DetailedRoofCeiling (const SimSlab_OtherSideCoefficients_DetailedRoofCeiling_sequence& s)
      {
        this->SimSlab_OtherSideCoefficients_DetailedRoofCeiling_ = s;
      }

      const SimModel::SimSlab_OtherSideConditionsModel_Default_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_Default () const
      {
        return this->SimSlab_OtherSideConditionsModel_Default_;
      }

      SimModel::SimSlab_OtherSideConditionsModel_Default_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_Default ()
      {
        return this->SimSlab_OtherSideConditionsModel_Default_;
      }

      void SimModel::
      SimSlab_OtherSideConditionsModel_Default (const SimSlab_OtherSideConditionsModel_Default_sequence& s)
      {
        this->SimSlab_OtherSideConditionsModel_Default_ = s;
      }

      const SimModel::SimSlab_OtherSideConditionsModel_Detailed_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_Detailed () const
      {
        return this->SimSlab_OtherSideConditionsModel_Detailed_;
      }

      SimModel::SimSlab_OtherSideConditionsModel_Detailed_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_Detailed ()
      {
        return this->SimSlab_OtherSideConditionsModel_Detailed_;
      }

      void SimModel::
      SimSlab_OtherSideConditionsModel_Detailed (const SimSlab_OtherSideConditionsModel_Detailed_sequence& s)
      {
        this->SimSlab_OtherSideConditionsModel_Detailed_ = s;
      }

      const SimModel::SimSlab_OtherSideConditionsModel_DetailedFloor_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_DetailedFloor () const
      {
        return this->SimSlab_OtherSideConditionsModel_DetailedFloor_;
      }

      SimModel::SimSlab_OtherSideConditionsModel_DetailedFloor_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_DetailedFloor ()
      {
        return this->SimSlab_OtherSideConditionsModel_DetailedFloor_;
      }

      void SimModel::
      SimSlab_OtherSideConditionsModel_DetailedFloor (const SimSlab_OtherSideConditionsModel_DetailedFloor_sequence& s)
      {
        this->SimSlab_OtherSideConditionsModel_DetailedFloor_ = s;
      }

      const SimModel::SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_DetailedRoofCeiling () const
      {
        return this->SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_;
      }

      SimModel::SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_sequence& SimModel::
      SimSlab_OtherSideConditionsModel_DetailedRoofCeiling ()
      {
        return this->SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_;
      }

      void SimModel::
      SimSlab_OtherSideConditionsModel_DetailedRoofCeiling (const SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_sequence& s)
      {
        this->SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_ = s;
      }

      const SimModel::SimSlab_RoofSlab_RoofUnderAir_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderAir () const
      {
        return this->SimSlab_RoofSlab_RoofUnderAir_;
      }

      SimModel::SimSlab_RoofSlab_RoofUnderAir_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderAir ()
      {
        return this->SimSlab_RoofSlab_RoofUnderAir_;
      }

      void SimModel::
      SimSlab_RoofSlab_RoofUnderAir (const SimSlab_RoofSlab_RoofUnderAir_sequence& s)
      {
        this->SimSlab_RoofSlab_RoofUnderAir_ = s;
      }

      const SimModel::SimSlab_RoofSlab_RoofUnderAirDetailed_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderAirDetailed () const
      {
        return this->SimSlab_RoofSlab_RoofUnderAirDetailed_;
      }

      SimModel::SimSlab_RoofSlab_RoofUnderAirDetailed_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderAirDetailed ()
      {
        return this->SimSlab_RoofSlab_RoofUnderAirDetailed_;
      }

      void SimModel::
      SimSlab_RoofSlab_RoofUnderAirDetailed (const SimSlab_RoofSlab_RoofUnderAirDetailed_sequence& s)
      {
        this->SimSlab_RoofSlab_RoofUnderAirDetailed_ = s;
      }

      const SimModel::SimSlab_RoofSlab_RoofUnderEarth_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderEarth () const
      {
        return this->SimSlab_RoofSlab_RoofUnderEarth_;
      }

      SimModel::SimSlab_RoofSlab_RoofUnderEarth_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderEarth ()
      {
        return this->SimSlab_RoofSlab_RoofUnderEarth_;
      }

      void SimModel::
      SimSlab_RoofSlab_RoofUnderEarth (const SimSlab_RoofSlab_RoofUnderEarth_sequence& s)
      {
        this->SimSlab_RoofSlab_RoofUnderEarth_ = s;
      }

      const SimModel::SimSlab_RoofSlab_RoofUnderEarthDetailed_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderEarthDetailed () const
      {
        return this->SimSlab_RoofSlab_RoofUnderEarthDetailed_;
      }

      SimModel::SimSlab_RoofSlab_RoofUnderEarthDetailed_sequence& SimModel::
      SimSlab_RoofSlab_RoofUnderEarthDetailed ()
      {
        return this->SimSlab_RoofSlab_RoofUnderEarthDetailed_;
      }

      void SimModel::
      SimSlab_RoofSlab_RoofUnderEarthDetailed (const SimSlab_RoofSlab_RoofUnderEarthDetailed_sequence& s)
      {
        this->SimSlab_RoofSlab_RoofUnderEarthDetailed_ = s;
      }

      const SimModel::SimSlabParams_Slab_Ceiling_sequence& SimModel::
      SimSlabParams_Slab_Ceiling () const
      {
        return this->SimSlabParams_Slab_Ceiling_;
      }

      SimModel::SimSlabParams_Slab_Ceiling_sequence& SimModel::
      SimSlabParams_Slab_Ceiling ()
      {
        return this->SimSlabParams_Slab_Ceiling_;
      }

      void SimModel::
      SimSlabParams_Slab_Ceiling (const SimSlabParams_Slab_Ceiling_sequence& s)
      {
        this->SimSlabParams_Slab_Ceiling_ = s;
      }

      const SimModel::SimSlabParams_Slab_Floor_sequence& SimModel::
      SimSlabParams_Slab_Floor () const
      {
        return this->SimSlabParams_Slab_Floor_;
      }

      SimModel::SimSlabParams_Slab_Floor_sequence& SimModel::
      SimSlabParams_Slab_Floor ()
      {
        return this->SimSlabParams_Slab_Floor_;
      }

      void SimModel::
      SimSlabParams_Slab_Floor (const SimSlabParams_Slab_Floor_sequence& s)
      {
        this->SimSlabParams_Slab_Floor_ = s;
      }

      const SimModel::SimSlabParams_Slab_Landing_sequence& SimModel::
      SimSlabParams_Slab_Landing () const
      {
        return this->SimSlabParams_Slab_Landing_;
      }

      SimModel::SimSlabParams_Slab_Landing_sequence& SimModel::
      SimSlabParams_Slab_Landing ()
      {
        return this->SimSlabParams_Slab_Landing_;
      }

      void SimModel::
      SimSlabParams_Slab_Landing (const SimSlabParams_Slab_Landing_sequence& s)
      {
        this->SimSlabParams_Slab_Landing_ = s;
      }

      const SimModel::SimSlabParams_Slab_Roof_sequence& SimModel::
      SimSlabParams_Slab_Roof () const
      {
        return this->SimSlabParams_Slab_Roof_;
      }

      SimModel::SimSlabParams_Slab_Roof_sequence& SimModel::
      SimSlabParams_Slab_Roof ()
      {
        return this->SimSlabParams_Slab_Roof_;
      }

      void SimModel::
      SimSlabParams_Slab_Roof (const SimSlabParams_Slab_Roof_sequence& s)
      {
        this->SimSlabParams_Slab_Roof_ = s;
      }

      const SimModel::SimSlabType_Slab_Ceiling_sequence& SimModel::
      SimSlabType_Slab_Ceiling () const
      {
        return this->SimSlabType_Slab_Ceiling_;
      }

      SimModel::SimSlabType_Slab_Ceiling_sequence& SimModel::
      SimSlabType_Slab_Ceiling ()
      {
        return this->SimSlabType_Slab_Ceiling_;
      }

      void SimModel::
      SimSlabType_Slab_Ceiling (const SimSlabType_Slab_Ceiling_sequence& s)
      {
        this->SimSlabType_Slab_Ceiling_ = s;
      }

      const SimModel::SimSlabType_Slab_Default_sequence& SimModel::
      SimSlabType_Slab_Default () const
      {
        return this->SimSlabType_Slab_Default_;
      }

      SimModel::SimSlabType_Slab_Default_sequence& SimModel::
      SimSlabType_Slab_Default ()
      {
        return this->SimSlabType_Slab_Default_;
      }

      void SimModel::
      SimSlabType_Slab_Default (const SimSlabType_Slab_Default_sequence& s)
      {
        this->SimSlabType_Slab_Default_ = s;
      }

      const SimModel::SimSlabType_Slab_Floor_sequence& SimModel::
      SimSlabType_Slab_Floor () const
      {
        return this->SimSlabType_Slab_Floor_;
      }

      SimModel::SimSlabType_Slab_Floor_sequence& SimModel::
      SimSlabType_Slab_Floor ()
      {
        return this->SimSlabType_Slab_Floor_;
      }

      void SimModel::
      SimSlabType_Slab_Floor (const SimSlabType_Slab_Floor_sequence& s)
      {
        this->SimSlabType_Slab_Floor_ = s;
      }

      const SimModel::SimSlabType_Slab_Landing_sequence& SimModel::
      SimSlabType_Slab_Landing () const
      {
        return this->SimSlabType_Slab_Landing_;
      }

      SimModel::SimSlabType_Slab_Landing_sequence& SimModel::
      SimSlabType_Slab_Landing ()
      {
        return this->SimSlabType_Slab_Landing_;
      }

      void SimModel::
      SimSlabType_Slab_Landing (const SimSlabType_Slab_Landing_sequence& s)
      {
        this->SimSlabType_Slab_Landing_ = s;
      }

      const SimModel::SimSlabType_Slab_Roof_sequence& SimModel::
      SimSlabType_Slab_Roof () const
      {
        return this->SimSlabType_Slab_Roof_;
      }

      SimModel::SimSlabType_Slab_Roof_sequence& SimModel::
      SimSlabType_Slab_Roof ()
      {
        return this->SimSlabType_Slab_Roof_;
      }

      void SimModel::
      SimSlabType_Slab_Roof (const SimSlabType_Slab_Roof_sequence& s)
      {
        this->SimSlabType_Slab_Roof_ = s;
      }

      const SimModel::SimSoftwareApplication_Default_Default_sequence& SimModel::
      SimSoftwareApplication_Default_Default () const
      {
        return this->SimSoftwareApplication_Default_Default_;
      }

      SimModel::SimSoftwareApplication_Default_Default_sequence& SimModel::
      SimSoftwareApplication_Default_Default ()
      {
        return this->SimSoftwareApplication_Default_Default_;
      }

      void SimModel::
      SimSoftwareApplication_Default_Default (const SimSoftwareApplication_Default_Default_sequence& s)
      {
        this->SimSoftwareApplication_Default_Default_ = s;
      }

      const SimModel::SimSolarObsParams_SolarObstruction_Default_sequence& SimModel::
      SimSolarObsParams_SolarObstruction_Default () const
      {
        return this->SimSolarObsParams_SolarObstruction_Default_;
      }

      SimModel::SimSolarObsParams_SolarObstruction_Default_sequence& SimModel::
      SimSolarObsParams_SolarObstruction_Default ()
      {
        return this->SimSolarObsParams_SolarObstruction_Default_;
      }

      void SimModel::
      SimSolarObsParams_SolarObstruction_Default (const SimSolarObsParams_SolarObstruction_Default_sequence& s)
      {
        this->SimSolarObsParams_SolarObstruction_Default_ = s;
      }

      const SimModel::SimSolarShade_Default_Default_sequence& SimModel::
      SimSolarShade_Default_Default () const
      {
        return this->SimSolarShade_Default_Default_;
      }

      SimModel::SimSolarShade_Default_Default_sequence& SimModel::
      SimSolarShade_Default_Default ()
      {
        return this->SimSolarShade_Default_Default_;
      }

      void SimModel::
      SimSolarShade_Default_Default (const SimSolarShade_Default_Default_sequence& s)
      {
        this->SimSolarShade_Default_Default_ = s;
      }

      const SimModel::SimSolarShade_Fin_Default_sequence& SimModel::
      SimSolarShade_Fin_Default () const
      {
        return this->SimSolarShade_Fin_Default_;
      }

      SimModel::SimSolarShade_Fin_Default_sequence& SimModel::
      SimSolarShade_Fin_Default ()
      {
        return this->SimSolarShade_Fin_Default_;
      }

      void SimModel::
      SimSolarShade_Fin_Default (const SimSolarShade_Fin_Default_sequence& s)
      {
        this->SimSolarShade_Fin_Default_ = s;
      }

      const SimModel::SimSolarShade_Fin_Projection_sequence& SimModel::
      SimSolarShade_Fin_Projection () const
      {
        return this->SimSolarShade_Fin_Projection_;
      }

      SimModel::SimSolarShade_Fin_Projection_sequence& SimModel::
      SimSolarShade_Fin_Projection ()
      {
        return this->SimSolarShade_Fin_Projection_;
      }

      void SimModel::
      SimSolarShade_Fin_Projection (const SimSolarShade_Fin_Projection_sequence& s)
      {
        this->SimSolarShade_Fin_Projection_ = s;
      }

      const SimModel::SimSolarShade_Overhang_Continuous_sequence& SimModel::
      SimSolarShade_Overhang_Continuous () const
      {
        return this->SimSolarShade_Overhang_Continuous_;
      }

      SimModel::SimSolarShade_Overhang_Continuous_sequence& SimModel::
      SimSolarShade_Overhang_Continuous ()
      {
        return this->SimSolarShade_Overhang_Continuous_;
      }

      void SimModel::
      SimSolarShade_Overhang_Continuous (const SimSolarShade_Overhang_Continuous_sequence& s)
      {
        this->SimSolarShade_Overhang_Continuous_ = s;
      }

      const SimModel::SimSolarShade_Overhang_Default_sequence& SimModel::
      SimSolarShade_Overhang_Default () const
      {
        return this->SimSolarShade_Overhang_Default_;
      }

      SimModel::SimSolarShade_Overhang_Default_sequence& SimModel::
      SimSolarShade_Overhang_Default ()
      {
        return this->SimSolarShade_Overhang_Default_;
      }

      void SimModel::
      SimSolarShade_Overhang_Default (const SimSolarShade_Overhang_Default_sequence& s)
      {
        this->SimSolarShade_Overhang_Default_ = s;
      }

      const SimModel::SimSolarShade_Overhang_Projection_sequence& SimModel::
      SimSolarShade_Overhang_Projection () const
      {
        return this->SimSolarShade_Overhang_Projection_;
      }

      SimModel::SimSolarShade_Overhang_Projection_sequence& SimModel::
      SimSolarShade_Overhang_Projection ()
      {
        return this->SimSolarShade_Overhang_Projection_;
      }

      void SimModel::
      SimSolarShade_Overhang_Projection (const SimSolarShade_Overhang_Projection_sequence& s)
      {
        this->SimSolarShade_Overhang_Projection_ = s;
      }

      const SimModel::SimSolarShade_ZoneDetailed_Default_sequence& SimModel::
      SimSolarShade_ZoneDetailed_Default () const
      {
        return this->SimSolarShade_ZoneDetailed_Default_;
      }

      SimModel::SimSolarShade_ZoneDetailed_Default_sequence& SimModel::
      SimSolarShade_ZoneDetailed_Default ()
      {
        return this->SimSolarShade_ZoneDetailed_Default_;
      }

      void SimModel::
      SimSolarShade_ZoneDetailed_Default (const SimSolarShade_ZoneDetailed_Default_sequence& s)
      {
        this->SimSolarShade_ZoneDetailed_Default_ = s;
      }

      const SimModel::SimSolarShadeArrayParams_SolarShadeArray_Default_sequence& SimModel::
      SimSolarShadeArrayParams_SolarShadeArray_Default () const
      {
        return this->SimSolarShadeArrayParams_SolarShadeArray_Default_;
      }

      SimModel::SimSolarShadeArrayParams_SolarShadeArray_Default_sequence& SimModel::
      SimSolarShadeArrayParams_SolarShadeArray_Default ()
      {
        return this->SimSolarShadeArrayParams_SolarShadeArray_Default_;
      }

      void SimModel::
      SimSolarShadeArrayParams_SolarShadeArray_Default (const SimSolarShadeArrayParams_SolarShadeArray_Default_sequence& s)
      {
        this->SimSolarShadeArrayParams_SolarShadeArray_Default_ = s;
      }

      const SimModel::SimSolarShadePanelParams_ShadePanel_SolarShading_sequence& SimModel::
      SimSolarShadePanelParams_ShadePanel_SolarShading () const
      {
        return this->SimSolarShadePanelParams_ShadePanel_SolarShading_;
      }

      SimModel::SimSolarShadePanelParams_ShadePanel_SolarShading_sequence& SimModel::
      SimSolarShadePanelParams_ShadePanel_SolarShading ()
      {
        return this->SimSolarShadePanelParams_ShadePanel_SolarShading_;
      }

      void SimModel::
      SimSolarShadePanelParams_ShadePanel_SolarShading (const SimSolarShadePanelParams_ShadePanel_SolarShading_sequence& s)
      {
        this->SimSolarShadePanelParams_ShadePanel_SolarShading_ = s;
      }

      const SimModel::SimSolarShadeType_SolarShade_Default_sequence& SimModel::
      SimSolarShadeType_SolarShade_Default () const
      {
        return this->SimSolarShadeType_SolarShade_Default_;
      }

      SimModel::SimSolarShadeType_SolarShade_Default_sequence& SimModel::
      SimSolarShadeType_SolarShade_Default ()
      {
        return this->SimSolarShadeType_SolarShade_Default_;
      }

      void SimModel::
      SimSolarShadeType_SolarShade_Default (const SimSolarShadeType_SolarShade_Default_sequence& s)
      {
        this->SimSolarShadeType_SolarShade_Default_ = s;
      }

      const SimModel::SimSolarShadeType_SolarShade_LeftFin_sequence& SimModel::
      SimSolarShadeType_SolarShade_LeftFin () const
      {
        return this->SimSolarShadeType_SolarShade_LeftFin_;
      }

      SimModel::SimSolarShadeType_SolarShade_LeftFin_sequence& SimModel::
      SimSolarShadeType_SolarShade_LeftFin ()
      {
        return this->SimSolarShadeType_SolarShade_LeftFin_;
      }

      void SimModel::
      SimSolarShadeType_SolarShade_LeftFin (const SimSolarShadeType_SolarShade_LeftFin_sequence& s)
      {
        this->SimSolarShadeType_SolarShade_LeftFin_ = s;
      }

      const SimModel::SimSolarShadeType_SolarShade_Overhang_sequence& SimModel::
      SimSolarShadeType_SolarShade_Overhang () const
      {
        return this->SimSolarShadeType_SolarShade_Overhang_;
      }

      SimModel::SimSolarShadeType_SolarShade_Overhang_sequence& SimModel::
      SimSolarShadeType_SolarShade_Overhang ()
      {
        return this->SimSolarShadeType_SolarShade_Overhang_;
      }

      void SimModel::
      SimSolarShadeType_SolarShade_Overhang (const SimSolarShadeType_SolarShade_Overhang_sequence& s)
      {
        this->SimSolarShadeType_SolarShade_Overhang_ = s;
      }

      const SimModel::SimSolarShadeType_SolarShade_RightFin_sequence& SimModel::
      SimSolarShadeType_SolarShade_RightFin () const
      {
        return this->SimSolarShadeType_SolarShade_RightFin_;
      }

      SimModel::SimSolarShadeType_SolarShade_RightFin_sequence& SimModel::
      SimSolarShadeType_SolarShade_RightFin ()
      {
        return this->SimSolarShadeType_SolarShade_RightFin_;
      }

      void SimModel::
      SimSolarShadeType_SolarShade_RightFin (const SimSolarShadeType_SolarShade_RightFin_sequence& s)
      {
        this->SimSolarShadeType_SolarShade_RightFin_ = s;
      }

      const SimModel::SimSpace_Occupied_Default_sequence& SimModel::
      SimSpace_Occupied_Default () const
      {
        return this->SimSpace_Occupied_Default_;
      }

      SimModel::SimSpace_Occupied_Default_sequence& SimModel::
      SimSpace_Occupied_Default ()
      {
        return this->SimSpace_Occupied_Default_;
      }

      void SimModel::
      SimSpace_Occupied_Default (const SimSpace_Occupied_Default_sequence& s)
      {
        this->SimSpace_Occupied_Default_ = s;
      }

      const SimModel::SimSpace_Unoccupied_CeilingPlenum_sequence& SimModel::
      SimSpace_Unoccupied_CeilingPlenum () const
      {
        return this->SimSpace_Unoccupied_CeilingPlenum_;
      }

      SimModel::SimSpace_Unoccupied_CeilingPlenum_sequence& SimModel::
      SimSpace_Unoccupied_CeilingPlenum ()
      {
        return this->SimSpace_Unoccupied_CeilingPlenum_;
      }

      void SimModel::
      SimSpace_Unoccupied_CeilingPlenum (const SimSpace_Unoccupied_CeilingPlenum_sequence& s)
      {
        this->SimSpace_Unoccupied_CeilingPlenum_ = s;
      }

      const SimModel::SimSpace_Unoccupied_CeilingVoid_sequence& SimModel::
      SimSpace_Unoccupied_CeilingVoid () const
      {
        return this->SimSpace_Unoccupied_CeilingVoid_;
      }

      SimModel::SimSpace_Unoccupied_CeilingVoid_sequence& SimModel::
      SimSpace_Unoccupied_CeilingVoid ()
      {
        return this->SimSpace_Unoccupied_CeilingVoid_;
      }

      void SimModel::
      SimSpace_Unoccupied_CeilingVoid (const SimSpace_Unoccupied_CeilingVoid_sequence& s)
      {
        this->SimSpace_Unoccupied_CeilingVoid_ = s;
      }

      const SimModel::SimSpace_Unoccupied_Default_sequence& SimModel::
      SimSpace_Unoccupied_Default () const
      {
        return this->SimSpace_Unoccupied_Default_;
      }

      SimModel::SimSpace_Unoccupied_Default_sequence& SimModel::
      SimSpace_Unoccupied_Default ()
      {
        return this->SimSpace_Unoccupied_Default_;
      }

      void SimModel::
      SimSpace_Unoccupied_Default (const SimSpace_Unoccupied_Default_sequence& s)
      {
        this->SimSpace_Unoccupied_Default_ = s;
      }

      const SimModel::SimSpace_Unoccupied_FloorPlenum_sequence& SimModel::
      SimSpace_Unoccupied_FloorPlenum () const
      {
        return this->SimSpace_Unoccupied_FloorPlenum_;
      }

      SimModel::SimSpace_Unoccupied_FloorPlenum_sequence& SimModel::
      SimSpace_Unoccupied_FloorPlenum ()
      {
        return this->SimSpace_Unoccupied_FloorPlenum_;
      }

      void SimModel::
      SimSpace_Unoccupied_FloorPlenum (const SimSpace_Unoccupied_FloorPlenum_sequence& s)
      {
        this->SimSpace_Unoccupied_FloorPlenum_ = s;
      }

      const SimModel::SimSpace_Unoccupied_FloorVoid_sequence& SimModel::
      SimSpace_Unoccupied_FloorVoid () const
      {
        return this->SimSpace_Unoccupied_FloorVoid_;
      }

      SimModel::SimSpace_Unoccupied_FloorVoid_sequence& SimModel::
      SimSpace_Unoccupied_FloorVoid ()
      {
        return this->SimSpace_Unoccupied_FloorVoid_;
      }

      void SimModel::
      SimSpace_Unoccupied_FloorVoid (const SimSpace_Unoccupied_FloorVoid_sequence& s)
      {
        this->SimSpace_Unoccupied_FloorVoid_ = s;
      }

      const SimModel::SimSpace_Unoccupied_Plenum_sequence& SimModel::
      SimSpace_Unoccupied_Plenum () const
      {
        return this->SimSpace_Unoccupied_Plenum_;
      }

      SimModel::SimSpace_Unoccupied_Plenum_sequence& SimModel::
      SimSpace_Unoccupied_Plenum ()
      {
        return this->SimSpace_Unoccupied_Plenum_;
      }

      void SimModel::
      SimSpace_Unoccupied_Plenum (const SimSpace_Unoccupied_Plenum_sequence& s)
      {
        this->SimSpace_Unoccupied_Plenum_ = s;
      }

      const SimModel::SimSpaceBoundary_Ceiling_InterzoneCeiling_sequence& SimModel::
      SimSpaceBoundary_Ceiling_InterzoneCeiling () const
      {
        return this->SimSpaceBoundary_Ceiling_InterzoneCeiling_;
      }

      SimModel::SimSpaceBoundary_Ceiling_InterzoneCeiling_sequence& SimModel::
      SimSpaceBoundary_Ceiling_InterzoneCeiling ()
      {
        return this->SimSpaceBoundary_Ceiling_InterzoneCeiling_;
      }

      void SimModel::
      SimSpaceBoundary_Ceiling_InterzoneCeiling (const SimSpaceBoundary_Ceiling_InterzoneCeiling_sequence& s)
      {
        this->SimSpaceBoundary_Ceiling_InterzoneCeiling_ = s;
      }

      const SimModel::SimSpaceBoundary_Door_GlazedDoor_sequence& SimModel::
      SimSpaceBoundary_Door_GlazedDoor () const
      {
        return this->SimSpaceBoundary_Door_GlazedDoor_;
      }

      SimModel::SimSpaceBoundary_Door_GlazedDoor_sequence& SimModel::
      SimSpaceBoundary_Door_GlazedDoor ()
      {
        return this->SimSpaceBoundary_Door_GlazedDoor_;
      }

      void SimModel::
      SimSpaceBoundary_Door_GlazedDoor (const SimSpaceBoundary_Door_GlazedDoor_sequence& s)
      {
        this->SimSpaceBoundary_Door_GlazedDoor_ = s;
      }

      const SimModel::SimSpaceBoundary_Door_OpaqueDoor_sequence& SimModel::
      SimSpaceBoundary_Door_OpaqueDoor () const
      {
        return this->SimSpaceBoundary_Door_OpaqueDoor_;
      }

      SimModel::SimSpaceBoundary_Door_OpaqueDoor_sequence& SimModel::
      SimSpaceBoundary_Door_OpaqueDoor ()
      {
        return this->SimSpaceBoundary_Door_OpaqueDoor_;
      }

      void SimModel::
      SimSpaceBoundary_Door_OpaqueDoor (const SimSpaceBoundary_Door_OpaqueDoor_sequence& s)
      {
        this->SimSpaceBoundary_Door_OpaqueDoor_ = s;
      }

      const SimModel::SimSpaceBoundary_FirstLevel_Default_sequence& SimModel::
      SimSpaceBoundary_FirstLevel_Default () const
      {
        return this->SimSpaceBoundary_FirstLevel_Default_;
      }

      SimModel::SimSpaceBoundary_FirstLevel_Default_sequence& SimModel::
      SimSpaceBoundary_FirstLevel_Default ()
      {
        return this->SimSpaceBoundary_FirstLevel_Default_;
      }

      void SimModel::
      SimSpaceBoundary_FirstLevel_Default (const SimSpaceBoundary_FirstLevel_Default_sequence& s)
      {
        this->SimSpaceBoundary_FirstLevel_Default_ = s;
      }

      const SimModel::SimSpaceBoundary_Floor_FloorOverAir_sequence& SimModel::
      SimSpaceBoundary_Floor_FloorOverAir () const
      {
        return this->SimSpaceBoundary_Floor_FloorOverAir_;
      }

      SimModel::SimSpaceBoundary_Floor_FloorOverAir_sequence& SimModel::
      SimSpaceBoundary_Floor_FloorOverAir ()
      {
        return this->SimSpaceBoundary_Floor_FloorOverAir_;
      }

      void SimModel::
      SimSpaceBoundary_Floor_FloorOverAir (const SimSpaceBoundary_Floor_FloorOverAir_sequence& s)
      {
        this->SimSpaceBoundary_Floor_FloorOverAir_ = s;
      }

      const SimModel::SimSpaceBoundary_Floor_FloorOverEarth_sequence& SimModel::
      SimSpaceBoundary_Floor_FloorOverEarth () const
      {
        return this->SimSpaceBoundary_Floor_FloorOverEarth_;
      }

      SimModel::SimSpaceBoundary_Floor_FloorOverEarth_sequence& SimModel::
      SimSpaceBoundary_Floor_FloorOverEarth ()
      {
        return this->SimSpaceBoundary_Floor_FloorOverEarth_;
      }

      void SimModel::
      SimSpaceBoundary_Floor_FloorOverEarth (const SimSpaceBoundary_Floor_FloorOverEarth_sequence& s)
      {
        this->SimSpaceBoundary_Floor_FloorOverEarth_ = s;
      }

      const SimModel::SimSpaceBoundary_Floor_InterzoneFloor_sequence& SimModel::
      SimSpaceBoundary_Floor_InterzoneFloor () const
      {
        return this->SimSpaceBoundary_Floor_InterzoneFloor_;
      }

      SimModel::SimSpaceBoundary_Floor_InterzoneFloor_sequence& SimModel::
      SimSpaceBoundary_Floor_InterzoneFloor ()
      {
        return this->SimSpaceBoundary_Floor_InterzoneFloor_;
      }

      void SimModel::
      SimSpaceBoundary_Floor_InterzoneFloor (const SimSpaceBoundary_Floor_InterzoneFloor_sequence& s)
      {
        this->SimSpaceBoundary_Floor_InterzoneFloor_ = s;
      }

      const SimModel::SimSpaceBoundary_RoofSlab_RoofUnderAir_sequence& SimModel::
      SimSpaceBoundary_RoofSlab_RoofUnderAir () const
      {
        return this->SimSpaceBoundary_RoofSlab_RoofUnderAir_;
      }

      SimModel::SimSpaceBoundary_RoofSlab_RoofUnderAir_sequence& SimModel::
      SimSpaceBoundary_RoofSlab_RoofUnderAir ()
      {
        return this->SimSpaceBoundary_RoofSlab_RoofUnderAir_;
      }

      void SimModel::
      SimSpaceBoundary_RoofSlab_RoofUnderAir (const SimSpaceBoundary_RoofSlab_RoofUnderAir_sequence& s)
      {
        this->SimSpaceBoundary_RoofSlab_RoofUnderAir_ = s;
      }

      const SimModel::SimSpaceBoundary_SecondLevel_Default_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_Default () const
      {
        return this->SimSpaceBoundary_SecondLevel_Default_;
      }

      SimModel::SimSpaceBoundary_SecondLevel_Default_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_Default ()
      {
        return this->SimSpaceBoundary_SecondLevel_Default_;
      }

      void SimModel::
      SimSpaceBoundary_SecondLevel_Default (const SimSpaceBoundary_SecondLevel_Default_sequence& s)
      {
        this->SimSpaceBoundary_SecondLevel_Default_ = s;
      }

      const SimModel::SimSpaceBoundary_SecondLevel_SubTypeA_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeA () const
      {
        return this->SimSpaceBoundary_SecondLevel_SubTypeA_;
      }

      SimModel::SimSpaceBoundary_SecondLevel_SubTypeA_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeA ()
      {
        return this->SimSpaceBoundary_SecondLevel_SubTypeA_;
      }

      void SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeA (const SimSpaceBoundary_SecondLevel_SubTypeA_sequence& s)
      {
        this->SimSpaceBoundary_SecondLevel_SubTypeA_ = s;
      }

      const SimModel::SimSpaceBoundary_SecondLevel_SubTypeB_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeB () const
      {
        return this->SimSpaceBoundary_SecondLevel_SubTypeB_;
      }

      SimModel::SimSpaceBoundary_SecondLevel_SubTypeB_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeB ()
      {
        return this->SimSpaceBoundary_SecondLevel_SubTypeB_;
      }

      void SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeB (const SimSpaceBoundary_SecondLevel_SubTypeB_sequence& s)
      {
        this->SimSpaceBoundary_SecondLevel_SubTypeB_ = s;
      }

      const SimModel::SimSpaceBoundary_SecondLevel_SubTypeC_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeC () const
      {
        return this->SimSpaceBoundary_SecondLevel_SubTypeC_;
      }

      SimModel::SimSpaceBoundary_SecondLevel_SubTypeC_sequence& SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeC ()
      {
        return this->SimSpaceBoundary_SecondLevel_SubTypeC_;
      }

      void SimModel::
      SimSpaceBoundary_SecondLevel_SubTypeC (const SimSpaceBoundary_SecondLevel_SubTypeC_sequence& s)
      {
        this->SimSpaceBoundary_SecondLevel_SubTypeC_ = s;
      }

      const SimModel::SimSpaceBoundary_Skylight_Default_sequence& SimModel::
      SimSpaceBoundary_Skylight_Default () const
      {
        return this->SimSpaceBoundary_Skylight_Default_;
      }

      SimModel::SimSpaceBoundary_Skylight_Default_sequence& SimModel::
      SimSpaceBoundary_Skylight_Default ()
      {
        return this->SimSpaceBoundary_Skylight_Default_;
      }

      void SimModel::
      SimSpaceBoundary_Skylight_Default (const SimSpaceBoundary_Skylight_Default_sequence& s)
      {
        this->SimSpaceBoundary_Skylight_Default_ = s;
      }

      const SimModel::SimSpaceBoundary_Wall_ExteriorAboveGrade_sequence& SimModel::
      SimSpaceBoundary_Wall_ExteriorAboveGrade () const
      {
        return this->SimSpaceBoundary_Wall_ExteriorAboveGrade_;
      }

      SimModel::SimSpaceBoundary_Wall_ExteriorAboveGrade_sequence& SimModel::
      SimSpaceBoundary_Wall_ExteriorAboveGrade ()
      {
        return this->SimSpaceBoundary_Wall_ExteriorAboveGrade_;
      }

      void SimModel::
      SimSpaceBoundary_Wall_ExteriorAboveGrade (const SimSpaceBoundary_Wall_ExteriorAboveGrade_sequence& s)
      {
        this->SimSpaceBoundary_Wall_ExteriorAboveGrade_ = s;
      }

      const SimModel::SimSpaceBoundary_Wall_ExteriorBelowGrade_sequence& SimModel::
      SimSpaceBoundary_Wall_ExteriorBelowGrade () const
      {
        return this->SimSpaceBoundary_Wall_ExteriorBelowGrade_;
      }

      SimModel::SimSpaceBoundary_Wall_ExteriorBelowGrade_sequence& SimModel::
      SimSpaceBoundary_Wall_ExteriorBelowGrade ()
      {
        return this->SimSpaceBoundary_Wall_ExteriorBelowGrade_;
      }

      void SimModel::
      SimSpaceBoundary_Wall_ExteriorBelowGrade (const SimSpaceBoundary_Wall_ExteriorBelowGrade_sequence& s)
      {
        this->SimSpaceBoundary_Wall_ExteriorBelowGrade_ = s;
      }

      const SimModel::SimSpaceBoundary_Wall_Interior_sequence& SimModel::
      SimSpaceBoundary_Wall_Interior () const
      {
        return this->SimSpaceBoundary_Wall_Interior_;
      }

      SimModel::SimSpaceBoundary_Wall_Interior_sequence& SimModel::
      SimSpaceBoundary_Wall_Interior ()
      {
        return this->SimSpaceBoundary_Wall_Interior_;
      }

      void SimModel::
      SimSpaceBoundary_Wall_Interior (const SimSpaceBoundary_Wall_Interior_sequence& s)
      {
        this->SimSpaceBoundary_Wall_Interior_ = s;
      }

      const SimModel::SimSpaceBoundary_Window_Exterior_sequence& SimModel::
      SimSpaceBoundary_Window_Exterior () const
      {
        return this->SimSpaceBoundary_Window_Exterior_;
      }

      SimModel::SimSpaceBoundary_Window_Exterior_sequence& SimModel::
      SimSpaceBoundary_Window_Exterior ()
      {
        return this->SimSpaceBoundary_Window_Exterior_;
      }

      void SimModel::
      SimSpaceBoundary_Window_Exterior (const SimSpaceBoundary_Window_Exterior_sequence& s)
      {
        this->SimSpaceBoundary_Window_Exterior_ = s;
      }

      const SimModel::SimSpaceOccupant_Actor_SpaceOccupant_sequence& SimModel::
      SimSpaceOccupant_Actor_SpaceOccupant () const
      {
        return this->SimSpaceOccupant_Actor_SpaceOccupant_;
      }

      SimModel::SimSpaceOccupant_Actor_SpaceOccupant_sequence& SimModel::
      SimSpaceOccupant_Actor_SpaceOccupant ()
      {
        return this->SimSpaceOccupant_Actor_SpaceOccupant_;
      }

      void SimModel::
      SimSpaceOccupant_Actor_SpaceOccupant (const SimSpaceOccupant_Actor_SpaceOccupant_sequence& s)
      {
        this->SimSpaceOccupant_Actor_SpaceOccupant_ = s;
      }

      const SimModel::SimSpaceParams_Space_Default_sequence& SimModel::
      SimSpaceParams_Space_Default () const
      {
        return this->SimSpaceParams_Space_Default_;
      }

      SimModel::SimSpaceParams_Space_Default_sequence& SimModel::
      SimSpaceParams_Space_Default ()
      {
        return this->SimSpaceParams_Space_Default_;
      }

      void SimModel::
      SimSpaceParams_Space_Default (const SimSpaceParams_Space_Default_sequence& s)
      {
        this->SimSpaceParams_Space_Default_ = s;
      }

      const SimModel::SimSpaceType_Space_Default_sequence& SimModel::
      SimSpaceType_Space_Default () const
      {
        return this->SimSpaceType_Space_Default_;
      }

      SimModel::SimSpaceType_Space_Default_sequence& SimModel::
      SimSpaceType_Space_Default ()
      {
        return this->SimSpaceType_Space_Default_;
      }

      void SimModel::
      SimSpaceType_Space_Default (const SimSpaceType_Space_Default_sequence& s)
      {
        this->SimSpaceType_Space_Default_ = s;
      }

      const SimModel::SimSpatialZone_OutdoorAir_Default_sequence& SimModel::
      SimSpatialZone_OutdoorAir_Default () const
      {
        return this->SimSpatialZone_OutdoorAir_Default_;
      }

      SimModel::SimSpatialZone_OutdoorAir_Default_sequence& SimModel::
      SimSpatialZone_OutdoorAir_Default ()
      {
        return this->SimSpatialZone_OutdoorAir_Default_;
      }

      void SimModel::
      SimSpatialZone_OutdoorAir_Default (const SimSpatialZone_OutdoorAir_Default_sequence& s)
      {
        this->SimSpatialZone_OutdoorAir_Default_ = s;
      }

      const SimModel::SimSpatialZone_Plenum_CeilingPlenum_sequence& SimModel::
      SimSpatialZone_Plenum_CeilingPlenum () const
      {
        return this->SimSpatialZone_Plenum_CeilingPlenum_;
      }

      SimModel::SimSpatialZone_Plenum_CeilingPlenum_sequence& SimModel::
      SimSpatialZone_Plenum_CeilingPlenum ()
      {
        return this->SimSpatialZone_Plenum_CeilingPlenum_;
      }

      void SimModel::
      SimSpatialZone_Plenum_CeilingPlenum (const SimSpatialZone_Plenum_CeilingPlenum_sequence& s)
      {
        this->SimSpatialZone_Plenum_CeilingPlenum_ = s;
      }

      const SimModel::SimSpatialZone_Plenum_Default_sequence& SimModel::
      SimSpatialZone_Plenum_Default () const
      {
        return this->SimSpatialZone_Plenum_Default_;
      }

      SimModel::SimSpatialZone_Plenum_Default_sequence& SimModel::
      SimSpatialZone_Plenum_Default ()
      {
        return this->SimSpatialZone_Plenum_Default_;
      }

      void SimModel::
      SimSpatialZone_Plenum_Default (const SimSpatialZone_Plenum_Default_sequence& s)
      {
        this->SimSpatialZone_Plenum_Default_ = s;
      }

      const SimModel::SimSpatialZone_Plenum_FloorPlenum_sequence& SimModel::
      SimSpatialZone_Plenum_FloorPlenum () const
      {
        return this->SimSpatialZone_Plenum_FloorPlenum_;
      }

      SimModel::SimSpatialZone_Plenum_FloorPlenum_sequence& SimModel::
      SimSpatialZone_Plenum_FloorPlenum ()
      {
        return this->SimSpatialZone_Plenum_FloorPlenum_;
      }

      void SimModel::
      SimSpatialZone_Plenum_FloorPlenum (const SimSpatialZone_Plenum_FloorPlenum_sequence& s)
      {
        this->SimSpatialZone_Plenum_FloorPlenum_ = s;
      }

      const SimModel::SimSpatialZone_SecurityZone_Public_sequence& SimModel::
      SimSpatialZone_SecurityZone_Public () const
      {
        return this->SimSpatialZone_SecurityZone_Public_;
      }

      SimModel::SimSpatialZone_SecurityZone_Public_sequence& SimModel::
      SimSpatialZone_SecurityZone_Public ()
      {
        return this->SimSpatialZone_SecurityZone_Public_;
      }

      void SimModel::
      SimSpatialZone_SecurityZone_Public (const SimSpatialZone_SecurityZone_Public_sequence& s)
      {
        this->SimSpatialZone_SecurityZone_Public_ = s;
      }

      const SimModel::SimSpatialZone_SecurityZone_Security_sequence& SimModel::
      SimSpatialZone_SecurityZone_Security () const
      {
        return this->SimSpatialZone_SecurityZone_Security_;
      }

      SimModel::SimSpatialZone_SecurityZone_Security_sequence& SimModel::
      SimSpatialZone_SecurityZone_Security ()
      {
        return this->SimSpatialZone_SecurityZone_Security_;
      }

      void SimModel::
      SimSpatialZone_SecurityZone_Security (const SimSpatialZone_SecurityZone_Security_sequence& s)
      {
        this->SimSpatialZone_SecurityZone_Security_ = s;
      }

      const SimModel::SimSpatialZone_SecurityZone_StaffOnly_sequence& SimModel::
      SimSpatialZone_SecurityZone_StaffOnly () const
      {
        return this->SimSpatialZone_SecurityZone_StaffOnly_;
      }

      SimModel::SimSpatialZone_SecurityZone_StaffOnly_sequence& SimModel::
      SimSpatialZone_SecurityZone_StaffOnly ()
      {
        return this->SimSpatialZone_SecurityZone_StaffOnly_;
      }

      void SimModel::
      SimSpatialZone_SecurityZone_StaffOnly (const SimSpatialZone_SecurityZone_StaffOnly_sequence& s)
      {
        this->SimSpatialZone_SecurityZone_StaffOnly_ = s;
      }

      const SimModel::SimSpatialZone_ThermalZone_AboveCeilingVoid_sequence& SimModel::
      SimSpatialZone_ThermalZone_AboveCeilingVoid () const
      {
        return this->SimSpatialZone_ThermalZone_AboveCeilingVoid_;
      }

      SimModel::SimSpatialZone_ThermalZone_AboveCeilingVoid_sequence& SimModel::
      SimSpatialZone_ThermalZone_AboveCeilingVoid ()
      {
        return this->SimSpatialZone_ThermalZone_AboveCeilingVoid_;
      }

      void SimModel::
      SimSpatialZone_ThermalZone_AboveCeilingVoid (const SimSpatialZone_ThermalZone_AboveCeilingVoid_sequence& s)
      {
        this->SimSpatialZone_ThermalZone_AboveCeilingVoid_ = s;
      }

      const SimModel::SimSpatialZone_ThermalZone_BelowFloorVoid_sequence& SimModel::
      SimSpatialZone_ThermalZone_BelowFloorVoid () const
      {
        return this->SimSpatialZone_ThermalZone_BelowFloorVoid_;
      }

      SimModel::SimSpatialZone_ThermalZone_BelowFloorVoid_sequence& SimModel::
      SimSpatialZone_ThermalZone_BelowFloorVoid ()
      {
        return this->SimSpatialZone_ThermalZone_BelowFloorVoid_;
      }

      void SimModel::
      SimSpatialZone_ThermalZone_BelowFloorVoid (const SimSpatialZone_ThermalZone_BelowFloorVoid_sequence& s)
      {
        this->SimSpatialZone_ThermalZone_BelowFloorVoid_ = s;
      }

      const SimModel::SimSpatialZone_ThermalZone_Default_sequence& SimModel::
      SimSpatialZone_ThermalZone_Default () const
      {
        return this->SimSpatialZone_ThermalZone_Default_;
      }

      SimModel::SimSpatialZone_ThermalZone_Default_sequence& SimModel::
      SimSpatialZone_ThermalZone_Default ()
      {
        return this->SimSpatialZone_ThermalZone_Default_;
      }

      void SimModel::
      SimSpatialZone_ThermalZone_Default (const SimSpatialZone_ThermalZone_Default_sequence& s)
      {
        this->SimSpatialZone_ThermalZone_Default_ = s;
      }

      const SimModel::SimSpatialZone_ThermalZone_TemplateForZoneGroup_sequence& SimModel::
      SimSpatialZone_ThermalZone_TemplateForZoneGroup () const
      {
        return this->SimSpatialZone_ThermalZone_TemplateForZoneGroup_;
      }

      SimModel::SimSpatialZone_ThermalZone_TemplateForZoneGroup_sequence& SimModel::
      SimSpatialZone_ThermalZone_TemplateForZoneGroup ()
      {
        return this->SimSpatialZone_ThermalZone_TemplateForZoneGroup_;
      }

      void SimModel::
      SimSpatialZone_ThermalZone_TemplateForZoneGroup (const SimSpatialZone_ThermalZone_TemplateForZoneGroup_sequence& s)
      {
        this->SimSpatialZone_ThermalZone_TemplateForZoneGroup_ = s;
      }

      const SimModel::SimStair_Stair_Default_sequence& SimModel::
      SimStair_Stair_Default () const
      {
        return this->SimStair_Stair_Default_;
      }

      SimModel::SimStair_Stair_Default_sequence& SimModel::
      SimStair_Stair_Default ()
      {
        return this->SimStair_Stair_Default_;
      }

      void SimModel::
      SimStair_Stair_Default (const SimStair_Stair_Default_sequence& s)
      {
        this->SimStair_Stair_Default_ = s;
      }

      const SimModel::SimStairFlight_Default_Default_sequence& SimModel::
      SimStairFlight_Default_Default () const
      {
        return this->SimStairFlight_Default_Default_;
      }

      SimModel::SimStairFlight_Default_Default_sequence& SimModel::
      SimStairFlight_Default_Default ()
      {
        return this->SimStairFlight_Default_Default_;
      }

      void SimModel::
      SimStairFlight_Default_Default (const SimStairFlight_Default_Default_sequence& s)
      {
        this->SimStairFlight_Default_Default_ = s;
      }

      const SimModel::SimStairFlightParams_StairFlight_Default_sequence& SimModel::
      SimStairFlightParams_StairFlight_Default () const
      {
        return this->SimStairFlightParams_StairFlight_Default_;
      }

      SimModel::SimStairFlightParams_StairFlight_Default_sequence& SimModel::
      SimStairFlightParams_StairFlight_Default ()
      {
        return this->SimStairFlightParams_StairFlight_Default_;
      }

      void SimModel::
      SimStairFlightParams_StairFlight_Default (const SimStairFlightParams_StairFlight_Default_sequence& s)
      {
        this->SimStairFlightParams_StairFlight_Default_ = s;
      }

      const SimModel::SimStairParams_Stair_Default_sequence& SimModel::
      SimStairParams_Stair_Default () const
      {
        return this->SimStairParams_Stair_Default_;
      }

      SimModel::SimStairParams_Stair_Default_sequence& SimModel::
      SimStairParams_Stair_Default ()
      {
        return this->SimStairParams_Stair_Default_;
      }

      void SimModel::
      SimStairParams_Stair_Default (const SimStairParams_Stair_Default_sequence& s)
      {
        this->SimStairParams_Stair_Default_ = s;
      }

      const SimModel::SimSystem_AirFlowNetwork_Default_sequence& SimModel::
      SimSystem_AirFlowNetwork_Default () const
      {
        return this->SimSystem_AirFlowNetwork_Default_;
      }

      SimModel::SimSystem_AirFlowNetwork_Default_sequence& SimModel::
      SimSystem_AirFlowNetwork_Default ()
      {
        return this->SimSystem_AirFlowNetwork_Default_;
      }

      void SimModel::
      SimSystem_AirFlowNetwork_Default (const SimSystem_AirFlowNetwork_Default_sequence& s)
      {
        this->SimSystem_AirFlowNetwork_Default_ = s;
      }

      const SimModel::SimSystem_Electrical_SystemsContainer_sequence& SimModel::
      SimSystem_Electrical_SystemsContainer () const
      {
        return this->SimSystem_Electrical_SystemsContainer_;
      }

      SimModel::SimSystem_Electrical_SystemsContainer_sequence& SimModel::
      SimSystem_Electrical_SystemsContainer ()
      {
        return this->SimSystem_Electrical_SystemsContainer_;
      }

      void SimModel::
      SimSystem_Electrical_SystemsContainer (const SimSystem_Electrical_SystemsContainer_sequence& s)
      {
        this->SimSystem_Electrical_SystemsContainer_ = s;
      }

      const SimModel::SimSystem_ElectricalLighting_FullSystem_sequence& SimModel::
      SimSystem_ElectricalLighting_FullSystem () const
      {
        return this->SimSystem_ElectricalLighting_FullSystem_;
      }

      SimModel::SimSystem_ElectricalLighting_FullSystem_sequence& SimModel::
      SimSystem_ElectricalLighting_FullSystem ()
      {
        return this->SimSystem_ElectricalLighting_FullSystem_;
      }

      void SimModel::
      SimSystem_ElectricalLighting_FullSystem (const SimSystem_ElectricalLighting_FullSystem_sequence& s)
      {
        this->SimSystem_ElectricalLighting_FullSystem_ = s;
      }

      const SimModel::SimSystem_ElectricalLighting_LightingCircuit_sequence& SimModel::
      SimSystem_ElectricalLighting_LightingCircuit () const
      {
        return this->SimSystem_ElectricalLighting_LightingCircuit_;
      }

      SimModel::SimSystem_ElectricalLighting_LightingCircuit_sequence& SimModel::
      SimSystem_ElectricalLighting_LightingCircuit ()
      {
        return this->SimSystem_ElectricalLighting_LightingCircuit_;
      }

      void SimModel::
      SimSystem_ElectricalLighting_LightingCircuit (const SimSystem_ElectricalLighting_LightingCircuit_sequence& s)
      {
        this->SimSystem_ElectricalLighting_LightingCircuit_ = s;
      }

      const SimModel::SimSystem_ElectricalPower_FullSystem_sequence& SimModel::
      SimSystem_ElectricalPower_FullSystem () const
      {
        return this->SimSystem_ElectricalPower_FullSystem_;
      }

      SimModel::SimSystem_ElectricalPower_FullSystem_sequence& SimModel::
      SimSystem_ElectricalPower_FullSystem ()
      {
        return this->SimSystem_ElectricalPower_FullSystem_;
      }

      void SimModel::
      SimSystem_ElectricalPower_FullSystem (const SimSystem_ElectricalPower_FullSystem_sequence& s)
      {
        this->SimSystem_ElectricalPower_FullSystem_ = s;
      }

      const SimModel::SimSystem_ElectroMechanical_PV_SolarThermal_sequence& SimModel::
      SimSystem_ElectroMechanical_PV_SolarThermal () const
      {
        return this->SimSystem_ElectroMechanical_PV_SolarThermal_;
      }

      SimModel::SimSystem_ElectroMechanical_PV_SolarThermal_sequence& SimModel::
      SimSystem_ElectroMechanical_PV_SolarThermal ()
      {
        return this->SimSystem_ElectroMechanical_PV_SolarThermal_;
      }

      void SimModel::
      SimSystem_ElectroMechanical_PV_SolarThermal (const SimSystem_ElectroMechanical_PV_SolarThermal_sequence& s)
      {
        this->SimSystem_ElectroMechanical_PV_SolarThermal_ = s;
      }

      const SimModel::SimSystem_Hvac_SystemsContainer_sequence& SimModel::
      SimSystem_Hvac_SystemsContainer () const
      {
        return this->SimSystem_Hvac_SystemsContainer_;
      }

      SimModel::SimSystem_Hvac_SystemsContainer_sequence& SimModel::
      SimSystem_Hvac_SystemsContainer ()
      {
        return this->SimSystem_Hvac_SystemsContainer_;
      }

      void SimModel::
      SimSystem_Hvac_SystemsContainer (const SimSystem_Hvac_SystemsContainer_sequence& s)
      {
        this->SimSystem_Hvac_SystemsContainer_ = s;
      }

      const SimModel::SimSystem_HvacAir_AirBranch_sequence& SimModel::
      SimSystem_HvacAir_AirBranch () const
      {
        return this->SimSystem_HvacAir_AirBranch_;
      }

      SimModel::SimSystem_HvacAir_AirBranch_sequence& SimModel::
      SimSystem_HvacAir_AirBranch ()
      {
        return this->SimSystem_HvacAir_AirBranch_;
      }

      void SimModel::
      SimSystem_HvacAir_AirBranch (const SimSystem_HvacAir_AirBranch_sequence& s)
      {
        this->SimSystem_HvacAir_AirBranch_ = s;
      }

      const SimModel::SimSystem_HvacAir_Control_sequence& SimModel::
      SimSystem_HvacAir_Control () const
      {
        return this->SimSystem_HvacAir_Control_;
      }

      SimModel::SimSystem_HvacAir_Control_sequence& SimModel::
      SimSystem_HvacAir_Control ()
      {
        return this->SimSystem_HvacAir_Control_;
      }

      void SimModel::
      SimSystem_HvacAir_Control (const SimSystem_HvacAir_Control_sequence& s)
      {
        this->SimSystem_HvacAir_Control_ = s;
      }

      const SimModel::SimSystem_HvacAir_ControlDemand_sequence& SimModel::
      SimSystem_HvacAir_ControlDemand () const
      {
        return this->SimSystem_HvacAir_ControlDemand_;
      }

      SimModel::SimSystem_HvacAir_ControlDemand_sequence& SimModel::
      SimSystem_HvacAir_ControlDemand ()
      {
        return this->SimSystem_HvacAir_ControlDemand_;
      }

      void SimModel::
      SimSystem_HvacAir_ControlDemand (const SimSystem_HvacAir_ControlDemand_sequence& s)
      {
        this->SimSystem_HvacAir_ControlDemand_ = s;
      }

      const SimModel::SimSystem_HvacAir_ControlSupply_sequence& SimModel::
      SimSystem_HvacAir_ControlSupply () const
      {
        return this->SimSystem_HvacAir_ControlSupply_;
      }

      SimModel::SimSystem_HvacAir_ControlSupply_sequence& SimModel::
      SimSystem_HvacAir_ControlSupply ()
      {
        return this->SimSystem_HvacAir_ControlSupply_;
      }

      void SimModel::
      SimSystem_HvacAir_ControlSupply (const SimSystem_HvacAir_ControlSupply_sequence& s)
      {
        this->SimSystem_HvacAir_ControlSupply_ = s;
      }

      const SimModel::SimSystem_HvacAir_Demand_sequence& SimModel::
      SimSystem_HvacAir_Demand () const
      {
        return this->SimSystem_HvacAir_Demand_;
      }

      SimModel::SimSystem_HvacAir_Demand_sequence& SimModel::
      SimSystem_HvacAir_Demand ()
      {
        return this->SimSystem_HvacAir_Demand_;
      }

      void SimModel::
      SimSystem_HvacAir_Demand (const SimSystem_HvacAir_Demand_sequence& s)
      {
        this->SimSystem_HvacAir_Demand_ = s;
      }

      const SimModel::SimSystem_HvacAir_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacAir_DemandSideReturnPath () const
      {
        return this->SimSystem_HvacAir_DemandSideReturnPath_;
      }

      SimModel::SimSystem_HvacAir_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacAir_DemandSideReturnPath ()
      {
        return this->SimSystem_HvacAir_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacAir_DemandSideReturnPath (const SimSystem_HvacAir_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_HvacAir_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacAir_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacAir_DemandSideSupplyPath () const
      {
        return this->SimSystem_HvacAir_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_HvacAir_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacAir_DemandSideSupplyPath ()
      {
        return this->SimSystem_HvacAir_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacAir_DemandSideSupplyPath (const SimSystem_HvacAir_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacAir_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacAir_DemandSideZoneHvac_sequence& SimModel::
      SimSystem_HvacAir_DemandSideZoneHvac () const
      {
        return this->SimSystem_HvacAir_DemandSideZoneHvac_;
      }

      SimModel::SimSystem_HvacAir_DemandSideZoneHvac_sequence& SimModel::
      SimSystem_HvacAir_DemandSideZoneHvac ()
      {
        return this->SimSystem_HvacAir_DemandSideZoneHvac_;
      }

      void SimModel::
      SimSystem_HvacAir_DemandSideZoneHvac (const SimSystem_HvacAir_DemandSideZoneHvac_sequence& s)
      {
        this->SimSystem_HvacAir_DemandSideZoneHvac_ = s;
      }

      const SimModel::SimSystem_HvacAir_FullSystem_sequence& SimModel::
      SimSystem_HvacAir_FullSystem () const
      {
        return this->SimSystem_HvacAir_FullSystem_;
      }

      SimModel::SimSystem_HvacAir_FullSystem_sequence& SimModel::
      SimSystem_HvacAir_FullSystem ()
      {
        return this->SimSystem_HvacAir_FullSystem_;
      }

      void SimModel::
      SimSystem_HvacAir_FullSystem (const SimSystem_HvacAir_FullSystem_sequence& s)
      {
        this->SimSystem_HvacAir_FullSystem_ = s;
      }

      const SimModel::SimSystem_HvacAir_FullSystemDual_sequence& SimModel::
      SimSystem_HvacAir_FullSystemDual () const
      {
        return this->SimSystem_HvacAir_FullSystemDual_;
      }

      SimModel::SimSystem_HvacAir_FullSystemDual_sequence& SimModel::
      SimSystem_HvacAir_FullSystemDual ()
      {
        return this->SimSystem_HvacAir_FullSystemDual_;
      }

      void SimModel::
      SimSystem_HvacAir_FullSystemDual (const SimSystem_HvacAir_FullSystemDual_sequence& s)
      {
        this->SimSystem_HvacAir_FullSystemDual_ = s;
      }

      const SimModel::SimSystem_HvacAir_FullSystemTriple_sequence& SimModel::
      SimSystem_HvacAir_FullSystemTriple () const
      {
        return this->SimSystem_HvacAir_FullSystemTriple_;
      }

      SimModel::SimSystem_HvacAir_FullSystemTriple_sequence& SimModel::
      SimSystem_HvacAir_FullSystemTriple ()
      {
        return this->SimSystem_HvacAir_FullSystemTriple_;
      }

      void SimModel::
      SimSystem_HvacAir_FullSystemTriple (const SimSystem_HvacAir_FullSystemTriple_sequence& s)
      {
        this->SimSystem_HvacAir_FullSystemTriple_ = s;
      }

      const SimModel::SimSystem_HvacAir_OutdoorAir_sequence& SimModel::
      SimSystem_HvacAir_OutdoorAir () const
      {
        return this->SimSystem_HvacAir_OutdoorAir_;
      }

      SimModel::SimSystem_HvacAir_OutdoorAir_sequence& SimModel::
      SimSystem_HvacAir_OutdoorAir ()
      {
        return this->SimSystem_HvacAir_OutdoorAir_;
      }

      void SimModel::
      SimSystem_HvacAir_OutdoorAir (const SimSystem_HvacAir_OutdoorAir_sequence& s)
      {
        this->SimSystem_HvacAir_OutdoorAir_ = s;
      }

      const SimModel::SimSystem_HvacAir_OutdoorAirExhaust_sequence& SimModel::
      SimSystem_HvacAir_OutdoorAirExhaust () const
      {
        return this->SimSystem_HvacAir_OutdoorAirExhaust_;
      }

      SimModel::SimSystem_HvacAir_OutdoorAirExhaust_sequence& SimModel::
      SimSystem_HvacAir_OutdoorAirExhaust ()
      {
        return this->SimSystem_HvacAir_OutdoorAirExhaust_;
      }

      void SimModel::
      SimSystem_HvacAir_OutdoorAirExhaust (const SimSystem_HvacAir_OutdoorAirExhaust_sequence& s)
      {
        this->SimSystem_HvacAir_OutdoorAirExhaust_ = s;
      }

      const SimModel::SimSystem_HvacAir_OutdoorAirSupply_sequence& SimModel::
      SimSystem_HvacAir_OutdoorAirSupply () const
      {
        return this->SimSystem_HvacAir_OutdoorAirSupply_;
      }

      SimModel::SimSystem_HvacAir_OutdoorAirSupply_sequence& SimModel::
      SimSystem_HvacAir_OutdoorAirSupply ()
      {
        return this->SimSystem_HvacAir_OutdoorAirSupply_;
      }

      void SimModel::
      SimSystem_HvacAir_OutdoorAirSupply (const SimSystem_HvacAir_OutdoorAirSupply_sequence& s)
      {
        this->SimSystem_HvacAir_OutdoorAirSupply_ = s;
      }

      const SimModel::SimSystem_HvacAir_Supply_sequence& SimModel::
      SimSystem_HvacAir_Supply () const
      {
        return this->SimSystem_HvacAir_Supply_;
      }

      SimModel::SimSystem_HvacAir_Supply_sequence& SimModel::
      SimSystem_HvacAir_Supply ()
      {
        return this->SimSystem_HvacAir_Supply_;
      }

      void SimModel::
      SimSystem_HvacAir_Supply (const SimSystem_HvacAir_Supply_sequence& s)
      {
        this->SimSystem_HvacAir_Supply_ = s;
      }

      const SimModel::SimSystem_HvacAir_SupplySideReturnPath_sequence& SimModel::
      SimSystem_HvacAir_SupplySideReturnPath () const
      {
        return this->SimSystem_HvacAir_SupplySideReturnPath_;
      }

      SimModel::SimSystem_HvacAir_SupplySideReturnPath_sequence& SimModel::
      SimSystem_HvacAir_SupplySideReturnPath ()
      {
        return this->SimSystem_HvacAir_SupplySideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacAir_SupplySideReturnPath (const SimSystem_HvacAir_SupplySideReturnPath_sequence& s)
      {
        this->SimSystem_HvacAir_SupplySideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacAir_SupplySideSupplyPath_sequence& SimModel::
      SimSystem_HvacAir_SupplySideSupplyPath () const
      {
        return this->SimSystem_HvacAir_SupplySideSupplyPath_;
      }

      SimModel::SimSystem_HvacAir_SupplySideSupplyPath_sequence& SimModel::
      SimSystem_HvacAir_SupplySideSupplyPath ()
      {
        return this->SimSystem_HvacAir_SupplySideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacAir_SupplySideSupplyPath (const SimSystem_HvacAir_SupplySideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacAir_SupplySideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_Control_sequence& SimModel::
      SimSystem_HvacChilledWater_Control () const
      {
        return this->SimSystem_HvacChilledWater_Control_;
      }

      SimModel::SimSystem_HvacChilledWater_Control_sequence& SimModel::
      SimSystem_HvacChilledWater_Control ()
      {
        return this->SimSystem_HvacChilledWater_Control_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_Control (const SimSystem_HvacChilledWater_Control_sequence& s)
      {
        this->SimSystem_HvacChilledWater_Control_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_ControlDemand_sequence& SimModel::
      SimSystem_HvacChilledWater_ControlDemand () const
      {
        return this->SimSystem_HvacChilledWater_ControlDemand_;
      }

      SimModel::SimSystem_HvacChilledWater_ControlDemand_sequence& SimModel::
      SimSystem_HvacChilledWater_ControlDemand ()
      {
        return this->SimSystem_HvacChilledWater_ControlDemand_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_ControlDemand (const SimSystem_HvacChilledWater_ControlDemand_sequence& s)
      {
        this->SimSystem_HvacChilledWater_ControlDemand_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_ControlSupply_sequence& SimModel::
      SimSystem_HvacChilledWater_ControlSupply () const
      {
        return this->SimSystem_HvacChilledWater_ControlSupply_;
      }

      SimModel::SimSystem_HvacChilledWater_ControlSupply_sequence& SimModel::
      SimSystem_HvacChilledWater_ControlSupply ()
      {
        return this->SimSystem_HvacChilledWater_ControlSupply_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_ControlSupply (const SimSystem_HvacChilledWater_ControlSupply_sequence& s)
      {
        this->SimSystem_HvacChilledWater_ControlSupply_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_Demand_sequence& SimModel::
      SimSystem_HvacChilledWater_Demand () const
      {
        return this->SimSystem_HvacChilledWater_Demand_;
      }

      SimModel::SimSystem_HvacChilledWater_Demand_sequence& SimModel::
      SimSystem_HvacChilledWater_Demand ()
      {
        return this->SimSystem_HvacChilledWater_Demand_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_Demand (const SimSystem_HvacChilledWater_Demand_sequence& s)
      {
        this->SimSystem_HvacChilledWater_Demand_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacChilledWater_DemandSideDemandComponents () const
      {
        return this->SimSystem_HvacChilledWater_DemandSideDemandComponents_;
      }

      SimModel::SimSystem_HvacChilledWater_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacChilledWater_DemandSideDemandComponents ()
      {
        return this->SimSystem_HvacChilledWater_DemandSideDemandComponents_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_DemandSideDemandComponents (const SimSystem_HvacChilledWater_DemandSideDemandComponents_sequence& s)
      {
        this->SimSystem_HvacChilledWater_DemandSideDemandComponents_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacChilledWater_DemandSideReturnPath () const
      {
        return this->SimSystem_HvacChilledWater_DemandSideReturnPath_;
      }

      SimModel::SimSystem_HvacChilledWater_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacChilledWater_DemandSideReturnPath ()
      {
        return this->SimSystem_HvacChilledWater_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_DemandSideReturnPath (const SimSystem_HvacChilledWater_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_HvacChilledWater_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacChilledWater_DemandSideSupplyPath () const
      {
        return this->SimSystem_HvacChilledWater_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_HvacChilledWater_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacChilledWater_DemandSideSupplyPath ()
      {
        return this->SimSystem_HvacChilledWater_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_DemandSideSupplyPath (const SimSystem_HvacChilledWater_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacChilledWater_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_FullSystem_sequence& SimModel::
      SimSystem_HvacChilledWater_FullSystem () const
      {
        return this->SimSystem_HvacChilledWater_FullSystem_;
      }

      SimModel::SimSystem_HvacChilledWater_FullSystem_sequence& SimModel::
      SimSystem_HvacChilledWater_FullSystem ()
      {
        return this->SimSystem_HvacChilledWater_FullSystem_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_FullSystem (const SimSystem_HvacChilledWater_FullSystem_sequence& s)
      {
        this->SimSystem_HvacChilledWater_FullSystem_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_Supply_sequence& SimModel::
      SimSystem_HvacChilledWater_Supply () const
      {
        return this->SimSystem_HvacChilledWater_Supply_;
      }

      SimModel::SimSystem_HvacChilledWater_Supply_sequence& SimModel::
      SimSystem_HvacChilledWater_Supply ()
      {
        return this->SimSystem_HvacChilledWater_Supply_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_Supply (const SimSystem_HvacChilledWater_Supply_sequence& s)
      {
        this->SimSystem_HvacChilledWater_Supply_ = s;
      }

      const SimModel::SimSystem_HvacChilledWater_WaterBranch_sequence& SimModel::
      SimSystem_HvacChilledWater_WaterBranch () const
      {
        return this->SimSystem_HvacChilledWater_WaterBranch_;
      }

      SimModel::SimSystem_HvacChilledWater_WaterBranch_sequence& SimModel::
      SimSystem_HvacChilledWater_WaterBranch ()
      {
        return this->SimSystem_HvacChilledWater_WaterBranch_;
      }

      void SimModel::
      SimSystem_HvacChilledWater_WaterBranch (const SimSystem_HvacChilledWater_WaterBranch_sequence& s)
      {
        this->SimSystem_HvacChilledWater_WaterBranch_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_CondenserBranch_sequence& SimModel::
      SimSystem_HvacCondenser_CondenserBranch () const
      {
        return this->SimSystem_HvacCondenser_CondenserBranch_;
      }

      SimModel::SimSystem_HvacCondenser_CondenserBranch_sequence& SimModel::
      SimSystem_HvacCondenser_CondenserBranch ()
      {
        return this->SimSystem_HvacCondenser_CondenserBranch_;
      }

      void SimModel::
      SimSystem_HvacCondenser_CondenserBranch (const SimSystem_HvacCondenser_CondenserBranch_sequence& s)
      {
        this->SimSystem_HvacCondenser_CondenserBranch_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_Control_sequence& SimModel::
      SimSystem_HvacCondenser_Control () const
      {
        return this->SimSystem_HvacCondenser_Control_;
      }

      SimModel::SimSystem_HvacCondenser_Control_sequence& SimModel::
      SimSystem_HvacCondenser_Control ()
      {
        return this->SimSystem_HvacCondenser_Control_;
      }

      void SimModel::
      SimSystem_HvacCondenser_Control (const SimSystem_HvacCondenser_Control_sequence& s)
      {
        this->SimSystem_HvacCondenser_Control_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_ControlDemand_sequence& SimModel::
      SimSystem_HvacCondenser_ControlDemand () const
      {
        return this->SimSystem_HvacCondenser_ControlDemand_;
      }

      SimModel::SimSystem_HvacCondenser_ControlDemand_sequence& SimModel::
      SimSystem_HvacCondenser_ControlDemand ()
      {
        return this->SimSystem_HvacCondenser_ControlDemand_;
      }

      void SimModel::
      SimSystem_HvacCondenser_ControlDemand (const SimSystem_HvacCondenser_ControlDemand_sequence& s)
      {
        this->SimSystem_HvacCondenser_ControlDemand_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_ControlSupply_sequence& SimModel::
      SimSystem_HvacCondenser_ControlSupply () const
      {
        return this->SimSystem_HvacCondenser_ControlSupply_;
      }

      SimModel::SimSystem_HvacCondenser_ControlSupply_sequence& SimModel::
      SimSystem_HvacCondenser_ControlSupply ()
      {
        return this->SimSystem_HvacCondenser_ControlSupply_;
      }

      void SimModel::
      SimSystem_HvacCondenser_ControlSupply (const SimSystem_HvacCondenser_ControlSupply_sequence& s)
      {
        this->SimSystem_HvacCondenser_ControlSupply_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_Demand_sequence& SimModel::
      SimSystem_HvacCondenser_Demand () const
      {
        return this->SimSystem_HvacCondenser_Demand_;
      }

      SimModel::SimSystem_HvacCondenser_Demand_sequence& SimModel::
      SimSystem_HvacCondenser_Demand ()
      {
        return this->SimSystem_HvacCondenser_Demand_;
      }

      void SimModel::
      SimSystem_HvacCondenser_Demand (const SimSystem_HvacCondenser_Demand_sequence& s)
      {
        this->SimSystem_HvacCondenser_Demand_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacCondenser_DemandSideDemandComponents () const
      {
        return this->SimSystem_HvacCondenser_DemandSideDemandComponents_;
      }

      SimModel::SimSystem_HvacCondenser_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacCondenser_DemandSideDemandComponents ()
      {
        return this->SimSystem_HvacCondenser_DemandSideDemandComponents_;
      }

      void SimModel::
      SimSystem_HvacCondenser_DemandSideDemandComponents (const SimSystem_HvacCondenser_DemandSideDemandComponents_sequence& s)
      {
        this->SimSystem_HvacCondenser_DemandSideDemandComponents_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacCondenser_DemandSideReturnPath () const
      {
        return this->SimSystem_HvacCondenser_DemandSideReturnPath_;
      }

      SimModel::SimSystem_HvacCondenser_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacCondenser_DemandSideReturnPath ()
      {
        return this->SimSystem_HvacCondenser_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacCondenser_DemandSideReturnPath (const SimSystem_HvacCondenser_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_HvacCondenser_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacCondenser_DemandSideSupplyPath () const
      {
        return this->SimSystem_HvacCondenser_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_HvacCondenser_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacCondenser_DemandSideSupplyPath ()
      {
        return this->SimSystem_HvacCondenser_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacCondenser_DemandSideSupplyPath (const SimSystem_HvacCondenser_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacCondenser_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_FullSystem_sequence& SimModel::
      SimSystem_HvacCondenser_FullSystem () const
      {
        return this->SimSystem_HvacCondenser_FullSystem_;
      }

      SimModel::SimSystem_HvacCondenser_FullSystem_sequence& SimModel::
      SimSystem_HvacCondenser_FullSystem ()
      {
        return this->SimSystem_HvacCondenser_FullSystem_;
      }

      void SimModel::
      SimSystem_HvacCondenser_FullSystem (const SimSystem_HvacCondenser_FullSystem_sequence& s)
      {
        this->SimSystem_HvacCondenser_FullSystem_ = s;
      }

      const SimModel::SimSystem_HvacCondenser_Supply_sequence& SimModel::
      SimSystem_HvacCondenser_Supply () const
      {
        return this->SimSystem_HvacCondenser_Supply_;
      }

      SimModel::SimSystem_HvacCondenser_Supply_sequence& SimModel::
      SimSystem_HvacCondenser_Supply ()
      {
        return this->SimSystem_HvacCondenser_Supply_;
      }

      void SimModel::
      SimSystem_HvacCondenser_Supply (const SimSystem_HvacCondenser_Supply_sequence& s)
      {
        this->SimSystem_HvacCondenser_Supply_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_Control_sequence& SimModel::
      SimSystem_HvacHotWater_Control () const
      {
        return this->SimSystem_HvacHotWater_Control_;
      }

      SimModel::SimSystem_HvacHotWater_Control_sequence& SimModel::
      SimSystem_HvacHotWater_Control ()
      {
        return this->SimSystem_HvacHotWater_Control_;
      }

      void SimModel::
      SimSystem_HvacHotWater_Control (const SimSystem_HvacHotWater_Control_sequence& s)
      {
        this->SimSystem_HvacHotWater_Control_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_ControlDemand_sequence& SimModel::
      SimSystem_HvacHotWater_ControlDemand () const
      {
        return this->SimSystem_HvacHotWater_ControlDemand_;
      }

      SimModel::SimSystem_HvacHotWater_ControlDemand_sequence& SimModel::
      SimSystem_HvacHotWater_ControlDemand ()
      {
        return this->SimSystem_HvacHotWater_ControlDemand_;
      }

      void SimModel::
      SimSystem_HvacHotWater_ControlDemand (const SimSystem_HvacHotWater_ControlDemand_sequence& s)
      {
        this->SimSystem_HvacHotWater_ControlDemand_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_ControlSupply_sequence& SimModel::
      SimSystem_HvacHotWater_ControlSupply () const
      {
        return this->SimSystem_HvacHotWater_ControlSupply_;
      }

      SimModel::SimSystem_HvacHotWater_ControlSupply_sequence& SimModel::
      SimSystem_HvacHotWater_ControlSupply ()
      {
        return this->SimSystem_HvacHotWater_ControlSupply_;
      }

      void SimModel::
      SimSystem_HvacHotWater_ControlSupply (const SimSystem_HvacHotWater_ControlSupply_sequence& s)
      {
        this->SimSystem_HvacHotWater_ControlSupply_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_Demand_sequence& SimModel::
      SimSystem_HvacHotWater_Demand () const
      {
        return this->SimSystem_HvacHotWater_Demand_;
      }

      SimModel::SimSystem_HvacHotWater_Demand_sequence& SimModel::
      SimSystem_HvacHotWater_Demand ()
      {
        return this->SimSystem_HvacHotWater_Demand_;
      }

      void SimModel::
      SimSystem_HvacHotWater_Demand (const SimSystem_HvacHotWater_Demand_sequence& s)
      {
        this->SimSystem_HvacHotWater_Demand_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacHotWater_DemandSideDemandComponents () const
      {
        return this->SimSystem_HvacHotWater_DemandSideDemandComponents_;
      }

      SimModel::SimSystem_HvacHotWater_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacHotWater_DemandSideDemandComponents ()
      {
        return this->SimSystem_HvacHotWater_DemandSideDemandComponents_;
      }

      void SimModel::
      SimSystem_HvacHotWater_DemandSideDemandComponents (const SimSystem_HvacHotWater_DemandSideDemandComponents_sequence& s)
      {
        this->SimSystem_HvacHotWater_DemandSideDemandComponents_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacHotWater_DemandSideReturnPath () const
      {
        return this->SimSystem_HvacHotWater_DemandSideReturnPath_;
      }

      SimModel::SimSystem_HvacHotWater_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacHotWater_DemandSideReturnPath ()
      {
        return this->SimSystem_HvacHotWater_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacHotWater_DemandSideReturnPath (const SimSystem_HvacHotWater_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_HvacHotWater_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacHotWater_DemandSideSupplyPath () const
      {
        return this->SimSystem_HvacHotWater_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_HvacHotWater_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacHotWater_DemandSideSupplyPath ()
      {
        return this->SimSystem_HvacHotWater_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacHotWater_DemandSideSupplyPath (const SimSystem_HvacHotWater_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacHotWater_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_FullSystem_sequence& SimModel::
      SimSystem_HvacHotWater_FullSystem () const
      {
        return this->SimSystem_HvacHotWater_FullSystem_;
      }

      SimModel::SimSystem_HvacHotWater_FullSystem_sequence& SimModel::
      SimSystem_HvacHotWater_FullSystem ()
      {
        return this->SimSystem_HvacHotWater_FullSystem_;
      }

      void SimModel::
      SimSystem_HvacHotWater_FullSystem (const SimSystem_HvacHotWater_FullSystem_sequence& s)
      {
        this->SimSystem_HvacHotWater_FullSystem_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_Supply_sequence& SimModel::
      SimSystem_HvacHotWater_Supply () const
      {
        return this->SimSystem_HvacHotWater_Supply_;
      }

      SimModel::SimSystem_HvacHotWater_Supply_sequence& SimModel::
      SimSystem_HvacHotWater_Supply ()
      {
        return this->SimSystem_HvacHotWater_Supply_;
      }

      void SimModel::
      SimSystem_HvacHotWater_Supply (const SimSystem_HvacHotWater_Supply_sequence& s)
      {
        this->SimSystem_HvacHotWater_Supply_ = s;
      }

      const SimModel::SimSystem_HvacHotWater_WaterBranch_sequence& SimModel::
      SimSystem_HvacHotWater_WaterBranch () const
      {
        return this->SimSystem_HvacHotWater_WaterBranch_;
      }

      SimModel::SimSystem_HvacHotWater_WaterBranch_sequence& SimModel::
      SimSystem_HvacHotWater_WaterBranch ()
      {
        return this->SimSystem_HvacHotWater_WaterBranch_;
      }

      void SimModel::
      SimSystem_HvacHotWater_WaterBranch (const SimSystem_HvacHotWater_WaterBranch_sequence& s)
      {
        this->SimSystem_HvacHotWater_WaterBranch_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_Control_sequence& SimModel::
      SimSystem_HvacMixedWater_Control () const
      {
        return this->SimSystem_HvacMixedWater_Control_;
      }

      SimModel::SimSystem_HvacMixedWater_Control_sequence& SimModel::
      SimSystem_HvacMixedWater_Control ()
      {
        return this->SimSystem_HvacMixedWater_Control_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_Control (const SimSystem_HvacMixedWater_Control_sequence& s)
      {
        this->SimSystem_HvacMixedWater_Control_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_ControlDemand_sequence& SimModel::
      SimSystem_HvacMixedWater_ControlDemand () const
      {
        return this->SimSystem_HvacMixedWater_ControlDemand_;
      }

      SimModel::SimSystem_HvacMixedWater_ControlDemand_sequence& SimModel::
      SimSystem_HvacMixedWater_ControlDemand ()
      {
        return this->SimSystem_HvacMixedWater_ControlDemand_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_ControlDemand (const SimSystem_HvacMixedWater_ControlDemand_sequence& s)
      {
        this->SimSystem_HvacMixedWater_ControlDemand_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_ControlSupply_sequence& SimModel::
      SimSystem_HvacMixedWater_ControlSupply () const
      {
        return this->SimSystem_HvacMixedWater_ControlSupply_;
      }

      SimModel::SimSystem_HvacMixedWater_ControlSupply_sequence& SimModel::
      SimSystem_HvacMixedWater_ControlSupply ()
      {
        return this->SimSystem_HvacMixedWater_ControlSupply_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_ControlSupply (const SimSystem_HvacMixedWater_ControlSupply_sequence& s)
      {
        this->SimSystem_HvacMixedWater_ControlSupply_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_Demand_sequence& SimModel::
      SimSystem_HvacMixedWater_Demand () const
      {
        return this->SimSystem_HvacMixedWater_Demand_;
      }

      SimModel::SimSystem_HvacMixedWater_Demand_sequence& SimModel::
      SimSystem_HvacMixedWater_Demand ()
      {
        return this->SimSystem_HvacMixedWater_Demand_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_Demand (const SimSystem_HvacMixedWater_Demand_sequence& s)
      {
        this->SimSystem_HvacMixedWater_Demand_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacMixedWater_DemandSideDemandComponents () const
      {
        return this->SimSystem_HvacMixedWater_DemandSideDemandComponents_;
      }

      SimModel::SimSystem_HvacMixedWater_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacMixedWater_DemandSideDemandComponents ()
      {
        return this->SimSystem_HvacMixedWater_DemandSideDemandComponents_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_DemandSideDemandComponents (const SimSystem_HvacMixedWater_DemandSideDemandComponents_sequence& s)
      {
        this->SimSystem_HvacMixedWater_DemandSideDemandComponents_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacMixedWater_DemandSideReturnPath () const
      {
        return this->SimSystem_HvacMixedWater_DemandSideReturnPath_;
      }

      SimModel::SimSystem_HvacMixedWater_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacMixedWater_DemandSideReturnPath ()
      {
        return this->SimSystem_HvacMixedWater_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_DemandSideReturnPath (const SimSystem_HvacMixedWater_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_HvacMixedWater_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacMixedWater_DemandSideSupplyPath () const
      {
        return this->SimSystem_HvacMixedWater_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_HvacMixedWater_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacMixedWater_DemandSideSupplyPath ()
      {
        return this->SimSystem_HvacMixedWater_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_DemandSideSupplyPath (const SimSystem_HvacMixedWater_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacMixedWater_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_FullSystem_sequence& SimModel::
      SimSystem_HvacMixedWater_FullSystem () const
      {
        return this->SimSystem_HvacMixedWater_FullSystem_;
      }

      SimModel::SimSystem_HvacMixedWater_FullSystem_sequence& SimModel::
      SimSystem_HvacMixedWater_FullSystem ()
      {
        return this->SimSystem_HvacMixedWater_FullSystem_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_FullSystem (const SimSystem_HvacMixedWater_FullSystem_sequence& s)
      {
        this->SimSystem_HvacMixedWater_FullSystem_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_Supply_sequence& SimModel::
      SimSystem_HvacMixedWater_Supply () const
      {
        return this->SimSystem_HvacMixedWater_Supply_;
      }

      SimModel::SimSystem_HvacMixedWater_Supply_sequence& SimModel::
      SimSystem_HvacMixedWater_Supply ()
      {
        return this->SimSystem_HvacMixedWater_Supply_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_Supply (const SimSystem_HvacMixedWater_Supply_sequence& s)
      {
        this->SimSystem_HvacMixedWater_Supply_ = s;
      }

      const SimModel::SimSystem_HvacMixedWater_WaterBranch_sequence& SimModel::
      SimSystem_HvacMixedWater_WaterBranch () const
      {
        return this->SimSystem_HvacMixedWater_WaterBranch_;
      }

      SimModel::SimSystem_HvacMixedWater_WaterBranch_sequence& SimModel::
      SimSystem_HvacMixedWater_WaterBranch ()
      {
        return this->SimSystem_HvacMixedWater_WaterBranch_;
      }

      void SimModel::
      SimSystem_HvacMixedWater_WaterBranch (const SimSystem_HvacMixedWater_WaterBranch_sequence& s)
      {
        this->SimSystem_HvacMixedWater_WaterBranch_ = s;
      }

      const SimModel::SimSystem_HvacSteam_Control_sequence& SimModel::
      SimSystem_HvacSteam_Control () const
      {
        return this->SimSystem_HvacSteam_Control_;
      }

      SimModel::SimSystem_HvacSteam_Control_sequence& SimModel::
      SimSystem_HvacSteam_Control ()
      {
        return this->SimSystem_HvacSteam_Control_;
      }

      void SimModel::
      SimSystem_HvacSteam_Control (const SimSystem_HvacSteam_Control_sequence& s)
      {
        this->SimSystem_HvacSteam_Control_ = s;
      }

      const SimModel::SimSystem_HvacSteam_ControlDemand_sequence& SimModel::
      SimSystem_HvacSteam_ControlDemand () const
      {
        return this->SimSystem_HvacSteam_ControlDemand_;
      }

      SimModel::SimSystem_HvacSteam_ControlDemand_sequence& SimModel::
      SimSystem_HvacSteam_ControlDemand ()
      {
        return this->SimSystem_HvacSteam_ControlDemand_;
      }

      void SimModel::
      SimSystem_HvacSteam_ControlDemand (const SimSystem_HvacSteam_ControlDemand_sequence& s)
      {
        this->SimSystem_HvacSteam_ControlDemand_ = s;
      }

      const SimModel::SimSystem_HvacSteam_ControlSupply_sequence& SimModel::
      SimSystem_HvacSteam_ControlSupply () const
      {
        return this->SimSystem_HvacSteam_ControlSupply_;
      }

      SimModel::SimSystem_HvacSteam_ControlSupply_sequence& SimModel::
      SimSystem_HvacSteam_ControlSupply ()
      {
        return this->SimSystem_HvacSteam_ControlSupply_;
      }

      void SimModel::
      SimSystem_HvacSteam_ControlSupply (const SimSystem_HvacSteam_ControlSupply_sequence& s)
      {
        this->SimSystem_HvacSteam_ControlSupply_ = s;
      }

      const SimModel::SimSystem_HvacSteam_Demand_sequence& SimModel::
      SimSystem_HvacSteam_Demand () const
      {
        return this->SimSystem_HvacSteam_Demand_;
      }

      SimModel::SimSystem_HvacSteam_Demand_sequence& SimModel::
      SimSystem_HvacSteam_Demand ()
      {
        return this->SimSystem_HvacSteam_Demand_;
      }

      void SimModel::
      SimSystem_HvacSteam_Demand (const SimSystem_HvacSteam_Demand_sequence& s)
      {
        this->SimSystem_HvacSteam_Demand_ = s;
      }

      const SimModel::SimSystem_HvacSteam_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacSteam_DemandSideDemandComponents () const
      {
        return this->SimSystem_HvacSteam_DemandSideDemandComponents_;
      }

      SimModel::SimSystem_HvacSteam_DemandSideDemandComponents_sequence& SimModel::
      SimSystem_HvacSteam_DemandSideDemandComponents ()
      {
        return this->SimSystem_HvacSteam_DemandSideDemandComponents_;
      }

      void SimModel::
      SimSystem_HvacSteam_DemandSideDemandComponents (const SimSystem_HvacSteam_DemandSideDemandComponents_sequence& s)
      {
        this->SimSystem_HvacSteam_DemandSideDemandComponents_ = s;
      }

      const SimModel::SimSystem_HvacSteam_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacSteam_DemandSideReturnPath () const
      {
        return this->SimSystem_HvacSteam_DemandSideReturnPath_;
      }

      SimModel::SimSystem_HvacSteam_DemandSideReturnPath_sequence& SimModel::
      SimSystem_HvacSteam_DemandSideReturnPath ()
      {
        return this->SimSystem_HvacSteam_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_HvacSteam_DemandSideReturnPath (const SimSystem_HvacSteam_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_HvacSteam_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_HvacSteam_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacSteam_DemandSideSupplyPath () const
      {
        return this->SimSystem_HvacSteam_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_HvacSteam_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_HvacSteam_DemandSideSupplyPath ()
      {
        return this->SimSystem_HvacSteam_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_HvacSteam_DemandSideSupplyPath (const SimSystem_HvacSteam_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_HvacSteam_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_HvacSteam_FullSystem_sequence& SimModel::
      SimSystem_HvacSteam_FullSystem () const
      {
        return this->SimSystem_HvacSteam_FullSystem_;
      }

      SimModel::SimSystem_HvacSteam_FullSystem_sequence& SimModel::
      SimSystem_HvacSteam_FullSystem ()
      {
        return this->SimSystem_HvacSteam_FullSystem_;
      }

      void SimModel::
      SimSystem_HvacSteam_FullSystem (const SimSystem_HvacSteam_FullSystem_sequence& s)
      {
        this->SimSystem_HvacSteam_FullSystem_ = s;
      }

      const SimModel::SimSystem_HvacSteam_SteamBranch_sequence& SimModel::
      SimSystem_HvacSteam_SteamBranch () const
      {
        return this->SimSystem_HvacSteam_SteamBranch_;
      }

      SimModel::SimSystem_HvacSteam_SteamBranch_sequence& SimModel::
      SimSystem_HvacSteam_SteamBranch ()
      {
        return this->SimSystem_HvacSteam_SteamBranch_;
      }

      void SimModel::
      SimSystem_HvacSteam_SteamBranch (const SimSystem_HvacSteam_SteamBranch_sequence& s)
      {
        this->SimSystem_HvacSteam_SteamBranch_ = s;
      }

      const SimModel::SimSystem_HvacSteam_Supply_sequence& SimModel::
      SimSystem_HvacSteam_Supply () const
      {
        return this->SimSystem_HvacSteam_Supply_;
      }

      SimModel::SimSystem_HvacSteam_Supply_sequence& SimModel::
      SimSystem_HvacSteam_Supply ()
      {
        return this->SimSystem_HvacSteam_Supply_;
      }

      void SimModel::
      SimSystem_HvacSteam_Supply (const SimSystem_HvacSteam_Supply_sequence& s)
      {
        this->SimSystem_HvacSteam_Supply_ = s;
      }

      const SimModel::SimSystem_Mechanical_SystemsContainer_sequence& SimModel::
      SimSystem_Mechanical_SystemsContainer () const
      {
        return this->SimSystem_Mechanical_SystemsContainer_;
      }

      SimModel::SimSystem_Mechanical_SystemsContainer_sequence& SimModel::
      SimSystem_Mechanical_SystemsContainer ()
      {
        return this->SimSystem_Mechanical_SystemsContainer_;
      }

      void SimModel::
      SimSystem_Mechanical_SystemsContainer (const SimSystem_Mechanical_SystemsContainer_sequence& s)
      {
        this->SimSystem_Mechanical_SystemsContainer_ = s;
      }

      const SimModel::SimSystem_Plumbing_ColdWater_sequence& SimModel::
      SimSystem_Plumbing_ColdWater () const
      {
        return this->SimSystem_Plumbing_ColdWater_;
      }

      SimModel::SimSystem_Plumbing_ColdWater_sequence& SimModel::
      SimSystem_Plumbing_ColdWater ()
      {
        return this->SimSystem_Plumbing_ColdWater_;
      }

      void SimModel::
      SimSystem_Plumbing_ColdWater (const SimSystem_Plumbing_ColdWater_sequence& s)
      {
        this->SimSystem_Plumbing_ColdWater_ = s;
      }

      const SimModel::SimSystem_Plumbing_GrayWater_sequence& SimModel::
      SimSystem_Plumbing_GrayWater () const
      {
        return this->SimSystem_Plumbing_GrayWater_;
      }

      SimModel::SimSystem_Plumbing_GrayWater_sequence& SimModel::
      SimSystem_Plumbing_GrayWater ()
      {
        return this->SimSystem_Plumbing_GrayWater_;
      }

      void SimModel::
      SimSystem_Plumbing_GrayWater (const SimSystem_Plumbing_GrayWater_sequence& s)
      {
        this->SimSystem_Plumbing_GrayWater_ = s;
      }

      const SimModel::SimSystem_Plumbing_HotWater_sequence& SimModel::
      SimSystem_Plumbing_HotWater () const
      {
        return this->SimSystem_Plumbing_HotWater_;
      }

      SimModel::SimSystem_Plumbing_HotWater_sequence& SimModel::
      SimSystem_Plumbing_HotWater ()
      {
        return this->SimSystem_Plumbing_HotWater_;
      }

      void SimModel::
      SimSystem_Plumbing_HotWater (const SimSystem_Plumbing_HotWater_sequence& s)
      {
        this->SimSystem_Plumbing_HotWater_ = s;
      }

      const SimModel::SimSystem_Plumbing_PotableWater_sequence& SimModel::
      SimSystem_Plumbing_PotableWater () const
      {
        return this->SimSystem_Plumbing_PotableWater_;
      }

      SimModel::SimSystem_Plumbing_PotableWater_sequence& SimModel::
      SimSystem_Plumbing_PotableWater ()
      {
        return this->SimSystem_Plumbing_PotableWater_;
      }

      void SimModel::
      SimSystem_Plumbing_PotableWater (const SimSystem_Plumbing_PotableWater_sequence& s)
      {
        this->SimSystem_Plumbing_PotableWater_ = s;
      }

      const SimModel::SimSystem_Plumbing_SystemsContainer_sequence& SimModel::
      SimSystem_Plumbing_SystemsContainer () const
      {
        return this->SimSystem_Plumbing_SystemsContainer_;
      }

      SimModel::SimSystem_Plumbing_SystemsContainer_sequence& SimModel::
      SimSystem_Plumbing_SystemsContainer ()
      {
        return this->SimSystem_Plumbing_SystemsContainer_;
      }

      void SimModel::
      SimSystem_Plumbing_SystemsContainer (const SimSystem_Plumbing_SystemsContainer_sequence& s)
      {
        this->SimSystem_Plumbing_SystemsContainer_ = s;
      }

      const SimModel::SimSystem_Plumbing_UndergroundPipingCircuit_sequence& SimModel::
      SimSystem_Plumbing_UndergroundPipingCircuit () const
      {
        return this->SimSystem_Plumbing_UndergroundPipingCircuit_;
      }

      SimModel::SimSystem_Plumbing_UndergroundPipingCircuit_sequence& SimModel::
      SimSystem_Plumbing_UndergroundPipingCircuit ()
      {
        return this->SimSystem_Plumbing_UndergroundPipingCircuit_;
      }

      void SimModel::
      SimSystem_Plumbing_UndergroundPipingCircuit (const SimSystem_Plumbing_UndergroundPipingCircuit_sequence& s)
      {
        this->SimSystem_Plumbing_UndergroundPipingCircuit_ = s;
      }

      const SimModel::SimSystem_Plumbing_WasteWater_sequence& SimModel::
      SimSystem_Plumbing_WasteWater () const
      {
        return this->SimSystem_Plumbing_WasteWater_;
      }

      SimModel::SimSystem_Plumbing_WasteWater_sequence& SimModel::
      SimSystem_Plumbing_WasteWater ()
      {
        return this->SimSystem_Plumbing_WasteWater_;
      }

      void SimModel::
      SimSystem_Plumbing_WasteWater (const SimSystem_Plumbing_WasteWater_sequence& s)
      {
        this->SimSystem_Plumbing_WasteWater_ = s;
      }

      const SimModel::SimSystem_Plumbing_WaterUseSystem_sequence& SimModel::
      SimSystem_Plumbing_WaterUseSystem () const
      {
        return this->SimSystem_Plumbing_WaterUseSystem_;
      }

      SimModel::SimSystem_Plumbing_WaterUseSystem_sequence& SimModel::
      SimSystem_Plumbing_WaterUseSystem ()
      {
        return this->SimSystem_Plumbing_WaterUseSystem_;
      }

      void SimModel::
      SimSystem_Plumbing_WaterUseSystem (const SimSystem_Plumbing_WaterUseSystem_sequence& s)
      {
        this->SimSystem_Plumbing_WaterUseSystem_ = s;
      }

      const SimModel::SimSystem_Plumbing_WaterUseWell_sequence& SimModel::
      SimSystem_Plumbing_WaterUseWell () const
      {
        return this->SimSystem_Plumbing_WaterUseWell_;
      }

      SimModel::SimSystem_Plumbing_WaterUseWell_sequence& SimModel::
      SimSystem_Plumbing_WaterUseWell ()
      {
        return this->SimSystem_Plumbing_WaterUseWell_;
      }

      void SimModel::
      SimSystem_Plumbing_WaterUseWell (const SimSystem_Plumbing_WaterUseWell_sequence& s)
      {
        this->SimSystem_Plumbing_WaterUseWell_ = s;
      }

      const SimModel::SimSystem_RefrigerationPrimary_Control_sequence& SimModel::
      SimSystem_RefrigerationPrimary_Control () const
      {
        return this->SimSystem_RefrigerationPrimary_Control_;
      }

      SimModel::SimSystem_RefrigerationPrimary_Control_sequence& SimModel::
      SimSystem_RefrigerationPrimary_Control ()
      {
        return this->SimSystem_RefrigerationPrimary_Control_;
      }

      void SimModel::
      SimSystem_RefrigerationPrimary_Control (const SimSystem_RefrigerationPrimary_Control_sequence& s)
      {
        this->SimSystem_RefrigerationPrimary_Control_ = s;
      }

      const SimModel::SimSystem_RefrigerationPrimary_Demand_sequence& SimModel::
      SimSystem_RefrigerationPrimary_Demand () const
      {
        return this->SimSystem_RefrigerationPrimary_Demand_;
      }

      SimModel::SimSystem_RefrigerationPrimary_Demand_sequence& SimModel::
      SimSystem_RefrigerationPrimary_Demand ()
      {
        return this->SimSystem_RefrigerationPrimary_Demand_;
      }

      void SimModel::
      SimSystem_RefrigerationPrimary_Demand (const SimSystem_RefrigerationPrimary_Demand_sequence& s)
      {
        this->SimSystem_RefrigerationPrimary_Demand_ = s;
      }

      const SimModel::SimSystem_RefrigerationPrimary_FullSystem_sequence& SimModel::
      SimSystem_RefrigerationPrimary_FullSystem () const
      {
        return this->SimSystem_RefrigerationPrimary_FullSystem_;
      }

      SimModel::SimSystem_RefrigerationPrimary_FullSystem_sequence& SimModel::
      SimSystem_RefrigerationPrimary_FullSystem ()
      {
        return this->SimSystem_RefrigerationPrimary_FullSystem_;
      }

      void SimModel::
      SimSystem_RefrigerationPrimary_FullSystem (const SimSystem_RefrigerationPrimary_FullSystem_sequence& s)
      {
        this->SimSystem_RefrigerationPrimary_FullSystem_ = s;
      }

      const SimModel::SimSystem_RefrigerationPrimary_Supply_sequence& SimModel::
      SimSystem_RefrigerationPrimary_Supply () const
      {
        return this->SimSystem_RefrigerationPrimary_Supply_;
      }

      SimModel::SimSystem_RefrigerationPrimary_Supply_sequence& SimModel::
      SimSystem_RefrigerationPrimary_Supply ()
      {
        return this->SimSystem_RefrigerationPrimary_Supply_;
      }

      void SimModel::
      SimSystem_RefrigerationPrimary_Supply (const SimSystem_RefrigerationPrimary_Supply_sequence& s)
      {
        this->SimSystem_RefrigerationPrimary_Supply_ = s;
      }

      const SimModel::SimSystem_RefrigerationSecondary_Control_sequence& SimModel::
      SimSystem_RefrigerationSecondary_Control () const
      {
        return this->SimSystem_RefrigerationSecondary_Control_;
      }

      SimModel::SimSystem_RefrigerationSecondary_Control_sequence& SimModel::
      SimSystem_RefrigerationSecondary_Control ()
      {
        return this->SimSystem_RefrigerationSecondary_Control_;
      }

      void SimModel::
      SimSystem_RefrigerationSecondary_Control (const SimSystem_RefrigerationSecondary_Control_sequence& s)
      {
        this->SimSystem_RefrigerationSecondary_Control_ = s;
      }

      const SimModel::SimSystem_RefrigerationSecondary_Demand_sequence& SimModel::
      SimSystem_RefrigerationSecondary_Demand () const
      {
        return this->SimSystem_RefrigerationSecondary_Demand_;
      }

      SimModel::SimSystem_RefrigerationSecondary_Demand_sequence& SimModel::
      SimSystem_RefrigerationSecondary_Demand ()
      {
        return this->SimSystem_RefrigerationSecondary_Demand_;
      }

      void SimModel::
      SimSystem_RefrigerationSecondary_Demand (const SimSystem_RefrigerationSecondary_Demand_sequence& s)
      {
        this->SimSystem_RefrigerationSecondary_Demand_ = s;
      }

      const SimModel::SimSystem_RefrigerationSecondary_FullSystem_sequence& SimModel::
      SimSystem_RefrigerationSecondary_FullSystem () const
      {
        return this->SimSystem_RefrigerationSecondary_FullSystem_;
      }

      SimModel::SimSystem_RefrigerationSecondary_FullSystem_sequence& SimModel::
      SimSystem_RefrigerationSecondary_FullSystem ()
      {
        return this->SimSystem_RefrigerationSecondary_FullSystem_;
      }

      void SimModel::
      SimSystem_RefrigerationSecondary_FullSystem (const SimSystem_RefrigerationSecondary_FullSystem_sequence& s)
      {
        this->SimSystem_RefrigerationSecondary_FullSystem_ = s;
      }

      const SimModel::SimSystem_RefrigerationSecondary_Supply_sequence& SimModel::
      SimSystem_RefrigerationSecondary_Supply () const
      {
        return this->SimSystem_RefrigerationSecondary_Supply_;
      }

      SimModel::SimSystem_RefrigerationSecondary_Supply_sequence& SimModel::
      SimSystem_RefrigerationSecondary_Supply ()
      {
        return this->SimSystem_RefrigerationSecondary_Supply_;
      }

      void SimModel::
      SimSystem_RefrigerationSecondary_Supply (const SimSystem_RefrigerationSecondary_Supply_sequence& s)
      {
        this->SimSystem_RefrigerationSecondary_Supply_ = s;
      }

      const SimModel::SimSystem_RefrigerationTranscritical_Control_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_Control () const
      {
        return this->SimSystem_RefrigerationTranscritical_Control_;
      }

      SimModel::SimSystem_RefrigerationTranscritical_Control_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_Control ()
      {
        return this->SimSystem_RefrigerationTranscritical_Control_;
      }

      void SimModel::
      SimSystem_RefrigerationTranscritical_Control (const SimSystem_RefrigerationTranscritical_Control_sequence& s)
      {
        this->SimSystem_RefrigerationTranscritical_Control_ = s;
      }

      const SimModel::SimSystem_RefrigerationTranscritical_Demand_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_Demand () const
      {
        return this->SimSystem_RefrigerationTranscritical_Demand_;
      }

      SimModel::SimSystem_RefrigerationTranscritical_Demand_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_Demand ()
      {
        return this->SimSystem_RefrigerationTranscritical_Demand_;
      }

      void SimModel::
      SimSystem_RefrigerationTranscritical_Demand (const SimSystem_RefrigerationTranscritical_Demand_sequence& s)
      {
        this->SimSystem_RefrigerationTranscritical_Demand_ = s;
      }

      const SimModel::SimSystem_RefrigerationTranscritical_FullSystem_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_FullSystem () const
      {
        return this->SimSystem_RefrigerationTranscritical_FullSystem_;
      }

      SimModel::SimSystem_RefrigerationTranscritical_FullSystem_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_FullSystem ()
      {
        return this->SimSystem_RefrigerationTranscritical_FullSystem_;
      }

      void SimModel::
      SimSystem_RefrigerationTranscritical_FullSystem (const SimSystem_RefrigerationTranscritical_FullSystem_sequence& s)
      {
        this->SimSystem_RefrigerationTranscritical_FullSystem_ = s;
      }

      const SimModel::SimSystem_RefrigerationTranscritical_Supply_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_Supply () const
      {
        return this->SimSystem_RefrigerationTranscritical_Supply_;
      }

      SimModel::SimSystem_RefrigerationTranscritical_Supply_sequence& SimModel::
      SimSystem_RefrigerationTranscritical_Supply ()
      {
        return this->SimSystem_RefrigerationTranscritical_Supply_;
      }

      void SimModel::
      SimSystem_RefrigerationTranscritical_Supply (const SimSystem_RefrigerationTranscritical_Supply_sequence& s)
      {
        this->SimSystem_RefrigerationTranscritical_Supply_ = s;
      }

      const SimModel::SimSystem_ServiceHotWater_Control_sequence& SimModel::
      SimSystem_ServiceHotWater_Control () const
      {
        return this->SimSystem_ServiceHotWater_Control_;
      }

      SimModel::SimSystem_ServiceHotWater_Control_sequence& SimModel::
      SimSystem_ServiceHotWater_Control ()
      {
        return this->SimSystem_ServiceHotWater_Control_;
      }

      void SimModel::
      SimSystem_ServiceHotWater_Control (const SimSystem_ServiceHotWater_Control_sequence& s)
      {
        this->SimSystem_ServiceHotWater_Control_ = s;
      }

      const SimModel::SimSystem_ServiceHotWater_Demand_sequence& SimModel::
      SimSystem_ServiceHotWater_Demand () const
      {
        return this->SimSystem_ServiceHotWater_Demand_;
      }

      SimModel::SimSystem_ServiceHotWater_Demand_sequence& SimModel::
      SimSystem_ServiceHotWater_Demand ()
      {
        return this->SimSystem_ServiceHotWater_Demand_;
      }

      void SimModel::
      SimSystem_ServiceHotWater_Demand (const SimSystem_ServiceHotWater_Demand_sequence& s)
      {
        this->SimSystem_ServiceHotWater_Demand_ = s;
      }

      const SimModel::SimSystem_ServiceHotWater_FullSystem_sequence& SimModel::
      SimSystem_ServiceHotWater_FullSystem () const
      {
        return this->SimSystem_ServiceHotWater_FullSystem_;
      }

      SimModel::SimSystem_ServiceHotWater_FullSystem_sequence& SimModel::
      SimSystem_ServiceHotWater_FullSystem ()
      {
        return this->SimSystem_ServiceHotWater_FullSystem_;
      }

      void SimModel::
      SimSystem_ServiceHotWater_FullSystem (const SimSystem_ServiceHotWater_FullSystem_sequence& s)
      {
        this->SimSystem_ServiceHotWater_FullSystem_ = s;
      }

      const SimModel::SimSystem_ServiceHotWater_Supply_sequence& SimModel::
      SimSystem_ServiceHotWater_Supply () const
      {
        return this->SimSystem_ServiceHotWater_Supply_;
      }

      SimModel::SimSystem_ServiceHotWater_Supply_sequence& SimModel::
      SimSystem_ServiceHotWater_Supply ()
      {
        return this->SimSystem_ServiceHotWater_Supply_;
      }

      void SimModel::
      SimSystem_ServiceHotWater_Supply (const SimSystem_ServiceHotWater_Supply_sequence& s)
      {
        this->SimSystem_ServiceHotWater_Supply_ = s;
      }

      const SimModel::SimSystem_ServiceHotWater_WaterBranch_sequence& SimModel::
      SimSystem_ServiceHotWater_WaterBranch () const
      {
        return this->SimSystem_ServiceHotWater_WaterBranch_;
      }

      SimModel::SimSystem_ServiceHotWater_WaterBranch_sequence& SimModel::
      SimSystem_ServiceHotWater_WaterBranch ()
      {
        return this->SimSystem_ServiceHotWater_WaterBranch_;
      }

      void SimModel::
      SimSystem_ServiceHotWater_WaterBranch (const SimSystem_ServiceHotWater_WaterBranch_sequence& s)
      {
        this->SimSystem_ServiceHotWater_WaterBranch_ = s;
      }

      const SimModel::SimSystem_SitePowerDemand_ElectricityConsuming_sequence& SimModel::
      SimSystem_SitePowerDemand_ElectricityConsuming () const
      {
        return this->SimSystem_SitePowerDemand_ElectricityConsuming_;
      }

      SimModel::SimSystem_SitePowerDemand_ElectricityConsuming_sequence& SimModel::
      SimSystem_SitePowerDemand_ElectricityConsuming ()
      {
        return this->SimSystem_SitePowerDemand_ElectricityConsuming_;
      }

      void SimModel::
      SimSystem_SitePowerDemand_ElectricityConsuming (const SimSystem_SitePowerDemand_ElectricityConsuming_sequence& s)
      {
        this->SimSystem_SitePowerDemand_ElectricityConsuming_ = s;
      }

      const SimModel::SimSystem_SitePowerDemand_FuelConsuming_sequence& SimModel::
      SimSystem_SitePowerDemand_FuelConsuming () const
      {
        return this->SimSystem_SitePowerDemand_FuelConsuming_;
      }

      SimModel::SimSystem_SitePowerDemand_FuelConsuming_sequence& SimModel::
      SimSystem_SitePowerDemand_FuelConsuming ()
      {
        return this->SimSystem_SitePowerDemand_FuelConsuming_;
      }

      void SimModel::
      SimSystem_SitePowerDemand_FuelConsuming (const SimSystem_SitePowerDemand_FuelConsuming_sequence& s)
      {
        this->SimSystem_SitePowerDemand_FuelConsuming_ = s;
      }

      const SimModel::SimSystem_SitePowerDemand_WaterConsuming_sequence& SimModel::
      SimSystem_SitePowerDemand_WaterConsuming () const
      {
        return this->SimSystem_SitePowerDemand_WaterConsuming_;
      }

      SimModel::SimSystem_SitePowerDemand_WaterConsuming_sequence& SimModel::
      SimSystem_SitePowerDemand_WaterConsuming ()
      {
        return this->SimSystem_SitePowerDemand_WaterConsuming_;
      }

      void SimModel::
      SimSystem_SitePowerDemand_WaterConsuming (const SimSystem_SitePowerDemand_WaterConsuming_sequence& s)
      {
        this->SimSystem_SitePowerDemand_WaterConsuming_ = s;
      }

      const SimModel::SimSystem_SitePowerGeneration_Other_sequence& SimModel::
      SimSystem_SitePowerGeneration_Other () const
      {
        return this->SimSystem_SitePowerGeneration_Other_;
      }

      SimModel::SimSystem_SitePowerGeneration_Other_sequence& SimModel::
      SimSystem_SitePowerGeneration_Other ()
      {
        return this->SimSystem_SitePowerGeneration_Other_;
      }

      void SimModel::
      SimSystem_SitePowerGeneration_Other (const SimSystem_SitePowerGeneration_Other_sequence& s)
      {
        this->SimSystem_SitePowerGeneration_Other_ = s;
      }

      const SimModel::SimSystem_SitePowerGeneration_Photovoltaic_sequence& SimModel::
      SimSystem_SitePowerGeneration_Photovoltaic () const
      {
        return this->SimSystem_SitePowerGeneration_Photovoltaic_;
      }

      SimModel::SimSystem_SitePowerGeneration_Photovoltaic_sequence& SimModel::
      SimSystem_SitePowerGeneration_Photovoltaic ()
      {
        return this->SimSystem_SitePowerGeneration_Photovoltaic_;
      }

      void SimModel::
      SimSystem_SitePowerGeneration_Photovoltaic (const SimSystem_SitePowerGeneration_Photovoltaic_sequence& s)
      {
        this->SimSystem_SitePowerGeneration_Photovoltaic_ = s;
      }

      const SimModel::SimSystem_SitePowerGeneration_WindTurbine_sequence& SimModel::
      SimSystem_SitePowerGeneration_WindTurbine () const
      {
        return this->SimSystem_SitePowerGeneration_WindTurbine_;
      }

      SimModel::SimSystem_SitePowerGeneration_WindTurbine_sequence& SimModel::
      SimSystem_SitePowerGeneration_WindTurbine ()
      {
        return this->SimSystem_SitePowerGeneration_WindTurbine_;
      }

      void SimModel::
      SimSystem_SitePowerGeneration_WindTurbine (const SimSystem_SitePowerGeneration_WindTurbine_sequence& s)
      {
        this->SimSystem_SitePowerGeneration_WindTurbine_ = s;
      }

      const SimModel::SimSystem_Transport_Elevator_sequence& SimModel::
      SimSystem_Transport_Elevator () const
      {
        return this->SimSystem_Transport_Elevator_;
      }

      SimModel::SimSystem_Transport_Elevator_sequence& SimModel::
      SimSystem_Transport_Elevator ()
      {
        return this->SimSystem_Transport_Elevator_;
      }

      void SimModel::
      SimSystem_Transport_Elevator (const SimSystem_Transport_Elevator_sequence& s)
      {
        this->SimSystem_Transport_Elevator_ = s;
      }

      const SimModel::SimSystem_Transport_Escalator_sequence& SimModel::
      SimSystem_Transport_Escalator () const
      {
        return this->SimSystem_Transport_Escalator_;
      }

      SimModel::SimSystem_Transport_Escalator_sequence& SimModel::
      SimSystem_Transport_Escalator ()
      {
        return this->SimSystem_Transport_Escalator_;
      }

      void SimModel::
      SimSystem_Transport_Escalator (const SimSystem_Transport_Escalator_sequence& s)
      {
        this->SimSystem_Transport_Escalator_ = s;
      }

      const SimModel::SimSystem_Transport_MovingWalkway_sequence& SimModel::
      SimSystem_Transport_MovingWalkway () const
      {
        return this->SimSystem_Transport_MovingWalkway_;
      }

      SimModel::SimSystem_Transport_MovingWalkway_sequence& SimModel::
      SimSystem_Transport_MovingWalkway ()
      {
        return this->SimSystem_Transport_MovingWalkway_;
      }

      void SimModel::
      SimSystem_Transport_MovingWalkway (const SimSystem_Transport_MovingWalkway_sequence& s)
      {
        this->SimSystem_Transport_MovingWalkway_ = s;
      }

      const SimModel::SimSystem_Transport_SystemsContainer_sequence& SimModel::
      SimSystem_Transport_SystemsContainer () const
      {
        return this->SimSystem_Transport_SystemsContainer_;
      }

      SimModel::SimSystem_Transport_SystemsContainer_sequence& SimModel::
      SimSystem_Transport_SystemsContainer ()
      {
        return this->SimSystem_Transport_SystemsContainer_;
      }

      void SimModel::
      SimSystem_Transport_SystemsContainer (const SimSystem_Transport_SystemsContainer_sequence& s)
      {
        this->SimSystem_Transport_SystemsContainer_ = s;
      }

      const SimModel::SimSystem_VariableRefrigerantFlow_Control_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_Control () const
      {
        return this->SimSystem_VariableRefrigerantFlow_Control_;
      }

      SimModel::SimSystem_VariableRefrigerantFlow_Control_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_Control ()
      {
        return this->SimSystem_VariableRefrigerantFlow_Control_;
      }

      void SimModel::
      SimSystem_VariableRefrigerantFlow_Control (const SimSystem_VariableRefrigerantFlow_Control_sequence& s)
      {
        this->SimSystem_VariableRefrigerantFlow_Control_ = s;
      }

      const SimModel::SimSystem_VariableRefrigerantFlow_Demand_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_Demand () const
      {
        return this->SimSystem_VariableRefrigerantFlow_Demand_;
      }

      SimModel::SimSystem_VariableRefrigerantFlow_Demand_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_Demand ()
      {
        return this->SimSystem_VariableRefrigerantFlow_Demand_;
      }

      void SimModel::
      SimSystem_VariableRefrigerantFlow_Demand (const SimSystem_VariableRefrigerantFlow_Demand_sequence& s)
      {
        this->SimSystem_VariableRefrigerantFlow_Demand_ = s;
      }

      const SimModel::SimSystem_VariableRefrigerantFlow_FullSystem_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_FullSystem () const
      {
        return this->SimSystem_VariableRefrigerantFlow_FullSystem_;
      }

      SimModel::SimSystem_VariableRefrigerantFlow_FullSystem_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_FullSystem ()
      {
        return this->SimSystem_VariableRefrigerantFlow_FullSystem_;
      }

      void SimModel::
      SimSystem_VariableRefrigerantFlow_FullSystem (const SimSystem_VariableRefrigerantFlow_FullSystem_sequence& s)
      {
        this->SimSystem_VariableRefrigerantFlow_FullSystem_ = s;
      }

      const SimModel::SimSystem_VariableRefrigerantFlow_Supply_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_Supply () const
      {
        return this->SimSystem_VariableRefrigerantFlow_Supply_;
      }

      SimModel::SimSystem_VariableRefrigerantFlow_Supply_sequence& SimModel::
      SimSystem_VariableRefrigerantFlow_Supply ()
      {
        return this->SimSystem_VariableRefrigerantFlow_Supply_;
      }

      void SimModel::
      SimSystem_VariableRefrigerantFlow_Supply (const SimSystem_VariableRefrigerantFlow_Supply_sequence& s)
      {
        this->SimSystem_VariableRefrigerantFlow_Supply_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_Control_sequence& SimModel::
      SimSystem_ZoneHvacGroup_Control () const
      {
        return this->SimSystem_ZoneHvacGroup_Control_;
      }

      SimModel::SimSystem_ZoneHvacGroup_Control_sequence& SimModel::
      SimSystem_ZoneHvacGroup_Control ()
      {
        return this->SimSystem_ZoneHvacGroup_Control_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_Control (const SimSystem_ZoneHvacGroup_Control_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_Control_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_ControlDemand_sequence& SimModel::
      SimSystem_ZoneHvacGroup_ControlDemand () const
      {
        return this->SimSystem_ZoneHvacGroup_ControlDemand_;
      }

      SimModel::SimSystem_ZoneHvacGroup_ControlDemand_sequence& SimModel::
      SimSystem_ZoneHvacGroup_ControlDemand ()
      {
        return this->SimSystem_ZoneHvacGroup_ControlDemand_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_ControlDemand (const SimSystem_ZoneHvacGroup_ControlDemand_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_ControlDemand_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_ControlSupply_sequence& SimModel::
      SimSystem_ZoneHvacGroup_ControlSupply () const
      {
        return this->SimSystem_ZoneHvacGroup_ControlSupply_;
      }

      SimModel::SimSystem_ZoneHvacGroup_ControlSupply_sequence& SimModel::
      SimSystem_ZoneHvacGroup_ControlSupply ()
      {
        return this->SimSystem_ZoneHvacGroup_ControlSupply_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_ControlSupply (const SimSystem_ZoneHvacGroup_ControlSupply_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_ControlSupply_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_Demand_sequence& SimModel::
      SimSystem_ZoneHvacGroup_Demand () const
      {
        return this->SimSystem_ZoneHvacGroup_Demand_;
      }

      SimModel::SimSystem_ZoneHvacGroup_Demand_sequence& SimModel::
      SimSystem_ZoneHvacGroup_Demand ()
      {
        return this->SimSystem_ZoneHvacGroup_Demand_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_Demand (const SimSystem_ZoneHvacGroup_Demand_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_Demand_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_DemandSideReturnPath_sequence& SimModel::
      SimSystem_ZoneHvacGroup_DemandSideReturnPath () const
      {
        return this->SimSystem_ZoneHvacGroup_DemandSideReturnPath_;
      }

      SimModel::SimSystem_ZoneHvacGroup_DemandSideReturnPath_sequence& SimModel::
      SimSystem_ZoneHvacGroup_DemandSideReturnPath ()
      {
        return this->SimSystem_ZoneHvacGroup_DemandSideReturnPath_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_DemandSideReturnPath (const SimSystem_ZoneHvacGroup_DemandSideReturnPath_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_DemandSideReturnPath_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_ZoneHvacGroup_DemandSideSupplyPath () const
      {
        return this->SimSystem_ZoneHvacGroup_DemandSideSupplyPath_;
      }

      SimModel::SimSystem_ZoneHvacGroup_DemandSideSupplyPath_sequence& SimModel::
      SimSystem_ZoneHvacGroup_DemandSideSupplyPath ()
      {
        return this->SimSystem_ZoneHvacGroup_DemandSideSupplyPath_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_DemandSideSupplyPath (const SimSystem_ZoneHvacGroup_DemandSideSupplyPath_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_DemandSideSupplyPath_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_DemandSideZoneHvac_sequence& SimModel::
      SimSystem_ZoneHvacGroup_DemandSideZoneHvac () const
      {
        return this->SimSystem_ZoneHvacGroup_DemandSideZoneHvac_;
      }

      SimModel::SimSystem_ZoneHvacGroup_DemandSideZoneHvac_sequence& SimModel::
      SimSystem_ZoneHvacGroup_DemandSideZoneHvac ()
      {
        return this->SimSystem_ZoneHvacGroup_DemandSideZoneHvac_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_DemandSideZoneHvac (const SimSystem_ZoneHvacGroup_DemandSideZoneHvac_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_DemandSideZoneHvac_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_FullSystem_sequence& SimModel::
      SimSystem_ZoneHvacGroup_FullSystem () const
      {
        return this->SimSystem_ZoneHvacGroup_FullSystem_;
      }

      SimModel::SimSystem_ZoneHvacGroup_FullSystem_sequence& SimModel::
      SimSystem_ZoneHvacGroup_FullSystem ()
      {
        return this->SimSystem_ZoneHvacGroup_FullSystem_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_FullSystem (const SimSystem_ZoneHvacGroup_FullSystem_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_FullSystem_ = s;
      }

      const SimModel::SimSystem_ZoneHvacGroup_Supply_sequence& SimModel::
      SimSystem_ZoneHvacGroup_Supply () const
      {
        return this->SimSystem_ZoneHvacGroup_Supply_;
      }

      SimModel::SimSystem_ZoneHvacGroup_Supply_sequence& SimModel::
      SimSystem_ZoneHvacGroup_Supply ()
      {
        return this->SimSystem_ZoneHvacGroup_Supply_;
      }

      void SimModel::
      SimSystem_ZoneHvacGroup_Supply (const SimSystem_ZoneHvacGroup_Supply_sequence& s)
      {
        this->SimSystem_ZoneHvacGroup_Supply_ = s;
      }

      const SimModel::SimSystem_ZoneShwGroup_Demand_sequence& SimModel::
      SimSystem_ZoneShwGroup_Demand () const
      {
        return this->SimSystem_ZoneShwGroup_Demand_;
      }

      SimModel::SimSystem_ZoneShwGroup_Demand_sequence& SimModel::
      SimSystem_ZoneShwGroup_Demand ()
      {
        return this->SimSystem_ZoneShwGroup_Demand_;
      }

      void SimModel::
      SimSystem_ZoneShwGroup_Demand (const SimSystem_ZoneShwGroup_Demand_sequence& s)
      {
        this->SimSystem_ZoneShwGroup_Demand_ = s;
      }

      const SimModel::SimSystem_ZoneShwGroup_FullSystem_sequence& SimModel::
      SimSystem_ZoneShwGroup_FullSystem () const
      {
        return this->SimSystem_ZoneShwGroup_FullSystem_;
      }

      SimModel::SimSystem_ZoneShwGroup_FullSystem_sequence& SimModel::
      SimSystem_ZoneShwGroup_FullSystem ()
      {
        return this->SimSystem_ZoneShwGroup_FullSystem_;
      }

      void SimModel::
      SimSystem_ZoneShwGroup_FullSystem (const SimSystem_ZoneShwGroup_FullSystem_sequence& s)
      {
        this->SimSystem_ZoneShwGroup_FullSystem_ = s;
      }

      const SimModel::SimSystem_ZoneShwGroup_Supply_sequence& SimModel::
      SimSystem_ZoneShwGroup_Supply () const
      {
        return this->SimSystem_ZoneShwGroup_Supply_;
      }

      SimModel::SimSystem_ZoneShwGroup_Supply_sequence& SimModel::
      SimSystem_ZoneShwGroup_Supply ()
      {
        return this->SimSystem_ZoneShwGroup_Supply_;
      }

      void SimModel::
      SimSystem_ZoneShwGroup_Supply (const SimSystem_ZoneShwGroup_Supply_sequence& s)
      {
        this->SimSystem_ZoneShwGroup_Supply_ = s;
      }

      const SimModel::SimTemplateConstructions_Constructions_Default_sequence& SimModel::
      SimTemplateConstructions_Constructions_Default () const
      {
        return this->SimTemplateConstructions_Constructions_Default_;
      }

      SimModel::SimTemplateConstructions_Constructions_Default_sequence& SimModel::
      SimTemplateConstructions_Constructions_Default ()
      {
        return this->SimTemplateConstructions_Constructions_Default_;
      }

      void SimModel::
      SimTemplateConstructions_Constructions_Default (const SimTemplateConstructions_Constructions_Default_sequence& s)
      {
        this->SimTemplateConstructions_Constructions_Default_ = s;
      }

      const SimModel::SimTemplateDaylighting_Daylighting_Default_sequence& SimModel::
      SimTemplateDaylighting_Daylighting_Default () const
      {
        return this->SimTemplateDaylighting_Daylighting_Default_;
      }

      SimModel::SimTemplateDaylighting_Daylighting_Default_sequence& SimModel::
      SimTemplateDaylighting_Daylighting_Default ()
      {
        return this->SimTemplateDaylighting_Daylighting_Default_;
      }

      void SimModel::
      SimTemplateDaylighting_Daylighting_Default (const SimTemplateDaylighting_Daylighting_Default_sequence& s)
      {
        this->SimTemplateDaylighting_Daylighting_Default_ = s;
      }

      const SimModel::SimTemplateDaylighting_Daylighting_Skylights_sequence& SimModel::
      SimTemplateDaylighting_Daylighting_Skylights () const
      {
        return this->SimTemplateDaylighting_Daylighting_Skylights_;
      }

      SimModel::SimTemplateDaylighting_Daylighting_Skylights_sequence& SimModel::
      SimTemplateDaylighting_Daylighting_Skylights ()
      {
        return this->SimTemplateDaylighting_Daylighting_Skylights_;
      }

      void SimModel::
      SimTemplateDaylighting_Daylighting_Skylights (const SimTemplateDaylighting_Daylighting_Skylights_sequence& s)
      {
        this->SimTemplateDaylighting_Daylighting_Skylights_ = s;
      }

      const SimModel::SimTemplateDaylighting_Daylighting_Windows_sequence& SimModel::
      SimTemplateDaylighting_Daylighting_Windows () const
      {
        return this->SimTemplateDaylighting_Daylighting_Windows_;
      }

      SimModel::SimTemplateDaylighting_Daylighting_Windows_sequence& SimModel::
      SimTemplateDaylighting_Daylighting_Windows ()
      {
        return this->SimTemplateDaylighting_Daylighting_Windows_;
      }

      void SimModel::
      SimTemplateDaylighting_Daylighting_Windows (const SimTemplateDaylighting_Daylighting_Windows_sequence& s)
      {
        this->SimTemplateDaylighting_Daylighting_Windows_ = s;
      }

      const SimModel::SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_sequence& SimModel::
      SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default () const
      {
        return this->SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_;
      }

      SimModel::SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_sequence& SimModel::
      SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default ()
      {
        return this->SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_;
      }

      void SimModel::
      SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default (const SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_sequence& s)
      {
        this->SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_ = s;
      }

      const SimModel::SimTemplateInteriorLighting_InteriorLighting_Default_sequence& SimModel::
      SimTemplateInteriorLighting_InteriorLighting_Default () const
      {
        return this->SimTemplateInteriorLighting_InteriorLighting_Default_;
      }

      SimModel::SimTemplateInteriorLighting_InteriorLighting_Default_sequence& SimModel::
      SimTemplateInteriorLighting_InteriorLighting_Default ()
      {
        return this->SimTemplateInteriorLighting_InteriorLighting_Default_;
      }

      void SimModel::
      SimTemplateInteriorLighting_InteriorLighting_Default (const SimTemplateInteriorLighting_InteriorLighting_Default_sequence& s)
      {
        this->SimTemplateInteriorLighting_InteriorLighting_Default_ = s;
      }

      const SimModel::SimTemplateLocation_Location_Default_sequence& SimModel::
      SimTemplateLocation_Location_Default () const
      {
        return this->SimTemplateLocation_Location_Default_;
      }

      SimModel::SimTemplateLocation_Location_Default_sequence& SimModel::
      SimTemplateLocation_Location_Default ()
      {
        return this->SimTemplateLocation_Location_Default_;
      }

      void SimModel::
      SimTemplateLocation_Location_Default (const SimTemplateLocation_Location_Default_sequence& s)
      {
        this->SimTemplateLocation_Location_Default_ = s;
      }

      const SimModel::SimTemplateNaturalVentilation_NaturalVentilation_Default_sequence& SimModel::
      SimTemplateNaturalVentilation_NaturalVentilation_Default () const
      {
        return this->SimTemplateNaturalVentilation_NaturalVentilation_Default_;
      }

      SimModel::SimTemplateNaturalVentilation_NaturalVentilation_Default_sequence& SimModel::
      SimTemplateNaturalVentilation_NaturalVentilation_Default ()
      {
        return this->SimTemplateNaturalVentilation_NaturalVentilation_Default_;
      }

      void SimModel::
      SimTemplateNaturalVentilation_NaturalVentilation_Default (const SimTemplateNaturalVentilation_NaturalVentilation_Default_sequence& s)
      {
        this->SimTemplateNaturalVentilation_NaturalVentilation_Default_ = s;
      }

      const SimModel::SimTemplateOutputFormatSet_OutputFormatSet_Default_sequence& SimModel::
      SimTemplateOutputFormatSet_OutputFormatSet_Default () const
      {
        return this->SimTemplateOutputFormatSet_OutputFormatSet_Default_;
      }

      SimModel::SimTemplateOutputFormatSet_OutputFormatSet_Default_sequence& SimModel::
      SimTemplateOutputFormatSet_OutputFormatSet_Default ()
      {
        return this->SimTemplateOutputFormatSet_OutputFormatSet_Default_;
      }

      void SimModel::
      SimTemplateOutputFormatSet_OutputFormatSet_Default (const SimTemplateOutputFormatSet_OutputFormatSet_Default_sequence& s)
      {
        this->SimTemplateOutputFormatSet_OutputFormatSet_Default_ = s;
      }

      const SimModel::SimTemplateOutputRequestSet_OutputRequestSet_Default_sequence& SimModel::
      SimTemplateOutputRequestSet_OutputRequestSet_Default () const
      {
        return this->SimTemplateOutputRequestSet_OutputRequestSet_Default_;
      }

      SimModel::SimTemplateOutputRequestSet_OutputRequestSet_Default_sequence& SimModel::
      SimTemplateOutputRequestSet_OutputRequestSet_Default ()
      {
        return this->SimTemplateOutputRequestSet_OutputRequestSet_Default_;
      }

      void SimModel::
      SimTemplateOutputRequestSet_OutputRequestSet_Default (const SimTemplateOutputRequestSet_OutputRequestSet_Default_sequence& s)
      {
        this->SimTemplateOutputRequestSet_OutputRequestSet_Default_ = s;
      }

      const SimModel::SimTemplateSimulationParameters_SimulationParameters_Default_sequence& SimModel::
      SimTemplateSimulationParameters_SimulationParameters_Default () const
      {
        return this->SimTemplateSimulationParameters_SimulationParameters_Default_;
      }

      SimModel::SimTemplateSimulationParameters_SimulationParameters_Default_sequence& SimModel::
      SimTemplateSimulationParameters_SimulationParameters_Default ()
      {
        return this->SimTemplateSimulationParameters_SimulationParameters_Default_;
      }

      void SimModel::
      SimTemplateSimulationParameters_SimulationParameters_Default (const SimTemplateSimulationParameters_SimulationParameters_Default_sequence& s)
      {
        this->SimTemplateSimulationParameters_SimulationParameters_Default_ = s;
      }

      const SimModel::SimTemplateZoneConditions_ZoneConditions_Default_sequence& SimModel::
      SimTemplateZoneConditions_ZoneConditions_Default () const
      {
        return this->SimTemplateZoneConditions_ZoneConditions_Default_;
      }

      SimModel::SimTemplateZoneConditions_ZoneConditions_Default_sequence& SimModel::
      SimTemplateZoneConditions_ZoneConditions_Default ()
      {
        return this->SimTemplateZoneConditions_ZoneConditions_Default_;
      }

      void SimModel::
      SimTemplateZoneConditions_ZoneConditions_Default (const SimTemplateZoneConditions_ZoneConditions_Default_sequence& s)
      {
        this->SimTemplateZoneConditions_ZoneConditions_Default_ = s;
      }

      const SimModel::SimTemplateZoneLoads_ZoneLoads_Default_sequence& SimModel::
      SimTemplateZoneLoads_ZoneLoads_Default () const
      {
        return this->SimTemplateZoneLoads_ZoneLoads_Default_;
      }

      SimModel::SimTemplateZoneLoads_ZoneLoads_Default_sequence& SimModel::
      SimTemplateZoneLoads_ZoneLoads_Default ()
      {
        return this->SimTemplateZoneLoads_ZoneLoads_Default_;
      }

      void SimModel::
      SimTemplateZoneLoads_ZoneLoads_Default (const SimTemplateZoneLoads_ZoneLoads_Default_sequence& s)
      {
        this->SimTemplateZoneLoads_ZoneLoads_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Calendar_Configuration_sequence& SimModel::
      SimTimeSeriesSchedule_Calendar_Configuration () const
      {
        return this->SimTimeSeriesSchedule_Calendar_Configuration_;
      }

      SimModel::SimTimeSeriesSchedule_Calendar_Configuration_sequence& SimModel::
      SimTimeSeriesSchedule_Calendar_Configuration ()
      {
        return this->SimTimeSeriesSchedule_Calendar_Configuration_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Calendar_Configuration (const SimTimeSeriesSchedule_Calendar_Configuration_sequence& s)
      {
        this->SimTimeSeriesSchedule_Calendar_Configuration_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Calendar_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Calendar_Default () const
      {
        return this->SimTimeSeriesSchedule_Calendar_Default_;
      }

      SimModel::SimTimeSeriesSchedule_Calendar_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Calendar_Default ()
      {
        return this->SimTimeSeriesSchedule_Calendar_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Calendar_Default (const SimTimeSeriesSchedule_Calendar_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_Calendar_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Calendar_SpecialDays_sequence& SimModel::
      SimTimeSeriesSchedule_Calendar_SpecialDays () const
      {
        return this->SimTimeSeriesSchedule_Calendar_SpecialDays_;
      }

      SimModel::SimTimeSeriesSchedule_Calendar_SpecialDays_sequence& SimModel::
      SimTimeSeriesSchedule_Calendar_SpecialDays ()
      {
        return this->SimTimeSeriesSchedule_Calendar_SpecialDays_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Calendar_SpecialDays (const SimTimeSeriesSchedule_Calendar_SpecialDays_sequence& s)
      {
        this->SimTimeSeriesSchedule_Calendar_SpecialDays_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Compact_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Compact_Default () const
      {
        return this->SimTimeSeriesSchedule_Compact_Default_;
      }

      SimModel::SimTimeSeriesSchedule_Compact_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Compact_Default ()
      {
        return this->SimTimeSeriesSchedule_Compact_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Compact_Default (const SimTimeSeriesSchedule_Compact_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_Compact_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Constant_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Constant_Default () const
      {
        return this->SimTimeSeriesSchedule_Constant_Default_;
      }

      SimModel::SimTimeSeriesSchedule_Constant_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Constant_Default ()
      {
        return this->SimTimeSeriesSchedule_Constant_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Constant_Default (const SimTimeSeriesSchedule_Constant_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_Constant_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Day_Hourly_sequence& SimModel::
      SimTimeSeriesSchedule_Day_Hourly () const
      {
        return this->SimTimeSeriesSchedule_Day_Hourly_;
      }

      SimModel::SimTimeSeriesSchedule_Day_Hourly_sequence& SimModel::
      SimTimeSeriesSchedule_Day_Hourly ()
      {
        return this->SimTimeSeriesSchedule_Day_Hourly_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Day_Hourly (const SimTimeSeriesSchedule_Day_Hourly_sequence& s)
      {
        this->SimTimeSeriesSchedule_Day_Hourly_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Day_Interval_sequence& SimModel::
      SimTimeSeriesSchedule_Day_Interval () const
      {
        return this->SimTimeSeriesSchedule_Day_Interval_;
      }

      SimModel::SimTimeSeriesSchedule_Day_Interval_sequence& SimModel::
      SimTimeSeriesSchedule_Day_Interval ()
      {
        return this->SimTimeSeriesSchedule_Day_Interval_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Day_Interval (const SimTimeSeriesSchedule_Day_Interval_sequence& s)
      {
        this->SimTimeSeriesSchedule_Day_Interval_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Day_List_sequence& SimModel::
      SimTimeSeriesSchedule_Day_List () const
      {
        return this->SimTimeSeriesSchedule_Day_List_;
      }

      SimModel::SimTimeSeriesSchedule_Day_List_sequence& SimModel::
      SimTimeSeriesSchedule_Day_List ()
      {
        return this->SimTimeSeriesSchedule_Day_List_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Day_List (const SimTimeSeriesSchedule_Day_List_sequence& s)
      {
        this->SimTimeSeriesSchedule_Day_List_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_File_Default_sequence& SimModel::
      SimTimeSeriesSchedule_File_Default () const
      {
        return this->SimTimeSeriesSchedule_File_Default_;
      }

      SimModel::SimTimeSeriesSchedule_File_Default_sequence& SimModel::
      SimTimeSeriesSchedule_File_Default ()
      {
        return this->SimTimeSeriesSchedule_File_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_File_Default (const SimTimeSeriesSchedule_File_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_File_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Limits_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Limits_Default () const
      {
        return this->SimTimeSeriesSchedule_Limits_Default_;
      }

      SimModel::SimTimeSeriesSchedule_Limits_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Limits_Default ()
      {
        return this->SimTimeSeriesSchedule_Limits_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Limits_Default (const SimTimeSeriesSchedule_Limits_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_Limits_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_TimeSeries_Default_sequence& SimModel::
      SimTimeSeriesSchedule_TimeSeries_Default () const
      {
        return this->SimTimeSeriesSchedule_TimeSeries_Default_;
      }

      SimModel::SimTimeSeriesSchedule_TimeSeries_Default_sequence& SimModel::
      SimTimeSeriesSchedule_TimeSeries_Default ()
      {
        return this->SimTimeSeriesSchedule_TimeSeries_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_TimeSeries_Default (const SimTimeSeriesSchedule_TimeSeries_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_TimeSeries_Default_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Week_Compact_sequence& SimModel::
      SimTimeSeriesSchedule_Week_Compact () const
      {
        return this->SimTimeSeriesSchedule_Week_Compact_;
      }

      SimModel::SimTimeSeriesSchedule_Week_Compact_sequence& SimModel::
      SimTimeSeriesSchedule_Week_Compact ()
      {
        return this->SimTimeSeriesSchedule_Week_Compact_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Week_Compact (const SimTimeSeriesSchedule_Week_Compact_sequence& s)
      {
        this->SimTimeSeriesSchedule_Week_Compact_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Week_Daily_sequence& SimModel::
      SimTimeSeriesSchedule_Week_Daily () const
      {
        return this->SimTimeSeriesSchedule_Week_Daily_;
      }

      SimModel::SimTimeSeriesSchedule_Week_Daily_sequence& SimModel::
      SimTimeSeriesSchedule_Week_Daily ()
      {
        return this->SimTimeSeriesSchedule_Week_Daily_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Week_Daily (const SimTimeSeriesSchedule_Week_Daily_sequence& s)
      {
        this->SimTimeSeriesSchedule_Week_Daily_ = s;
      }

      const SimModel::SimTimeSeriesSchedule_Year_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Year_Default () const
      {
        return this->SimTimeSeriesSchedule_Year_Default_;
      }

      SimModel::SimTimeSeriesSchedule_Year_Default_sequence& SimModel::
      SimTimeSeriesSchedule_Year_Default ()
      {
        return this->SimTimeSeriesSchedule_Year_Default_;
      }

      void SimModel::
      SimTimeSeriesSchedule_Year_Default (const SimTimeSeriesSchedule_Year_Default_sequence& s)
      {
        this->SimTimeSeriesSchedule_Year_Default_ = s;
      }

      const SimModel::SimTimeSeriesValue_TimeSeries_Irregular_sequence& SimModel::
      SimTimeSeriesValue_TimeSeries_Irregular () const
      {
        return this->SimTimeSeriesValue_TimeSeries_Irregular_;
      }

      SimModel::SimTimeSeriesValue_TimeSeries_Irregular_sequence& SimModel::
      SimTimeSeriesValue_TimeSeries_Irregular ()
      {
        return this->SimTimeSeriesValue_TimeSeries_Irregular_;
      }

      void SimModel::
      SimTimeSeriesValue_TimeSeries_Irregular (const SimTimeSeriesValue_TimeSeries_Irregular_sequence& s)
      {
        this->SimTimeSeriesValue_TimeSeries_Irregular_ = s;
      }

      const SimModel::SimTimeSeriesValue_TimeSeries_Regular_sequence& SimModel::
      SimTimeSeriesValue_TimeSeries_Regular () const
      {
        return this->SimTimeSeriesValue_TimeSeries_Regular_;
      }

      SimModel::SimTimeSeriesValue_TimeSeries_Regular_sequence& SimModel::
      SimTimeSeriesValue_TimeSeries_Regular ()
      {
        return this->SimTimeSeriesValue_TimeSeries_Regular_;
      }

      void SimModel::
      SimTimeSeriesValue_TimeSeries_Regular (const SimTimeSeriesValue_TimeSeries_Regular_sequence& s)
      {
        this->SimTimeSeriesValue_TimeSeries_Regular_ = s;
      }

      const SimModel::SimToplogicalRepresentation_TopologicalRepresentation_Default_sequence& SimModel::
      SimToplogicalRepresentation_TopologicalRepresentation_Default () const
      {
        return this->SimToplogicalRepresentation_TopologicalRepresentation_Default_;
      }

      SimModel::SimToplogicalRepresentation_TopologicalRepresentation_Default_sequence& SimModel::
      SimToplogicalRepresentation_TopologicalRepresentation_Default ()
      {
        return this->SimToplogicalRepresentation_TopologicalRepresentation_Default_;
      }

      void SimModel::
      SimToplogicalRepresentation_TopologicalRepresentation_Default (const SimToplogicalRepresentation_TopologicalRepresentation_Default_sequence& s)
      {
        this->SimToplogicalRepresentation_TopologicalRepresentation_Default_ = s;
      }

      const SimModel::SimTransportSysAssembly_TransportSysAssembly_Default_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Default () const
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_Default_;
      }

      SimModel::SimTransportSysAssembly_TransportSysAssembly_Default_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Default ()
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_Default_;
      }

      void SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Default (const SimTransportSysAssembly_TransportSysAssembly_Default_sequence& s)
      {
        this->SimTransportSysAssembly_TransportSysAssembly_Default_ = s;
      }

      const SimModel::SimTransportSysAssembly_TransportSysAssembly_Elevator_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Elevator () const
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_Elevator_;
      }

      SimModel::SimTransportSysAssembly_TransportSysAssembly_Elevator_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Elevator ()
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_Elevator_;
      }

      void SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Elevator (const SimTransportSysAssembly_TransportSysAssembly_Elevator_sequence& s)
      {
        this->SimTransportSysAssembly_TransportSysAssembly_Elevator_ = s;
      }

      const SimModel::SimTransportSysAssembly_TransportSysAssembly_Escalator_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Escalator () const
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_Escalator_;
      }

      SimModel::SimTransportSysAssembly_TransportSysAssembly_Escalator_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Escalator ()
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_Escalator_;
      }

      void SimModel::
      SimTransportSysAssembly_TransportSysAssembly_Escalator (const SimTransportSysAssembly_TransportSysAssembly_Escalator_sequence& s)
      {
        this->SimTransportSysAssembly_TransportSysAssembly_Escalator_ = s;
      }

      const SimModel::SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_MovingWalkway () const
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_;
      }

      SimModel::SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_sequence& SimModel::
      SimTransportSysAssembly_TransportSysAssembly_MovingWalkway ()
      {
        return this->SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_;
      }

      void SimModel::
      SimTransportSysAssembly_TransportSysAssembly_MovingWalkway (const SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_sequence& s)
      {
        this->SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_ = s;
      }

      const SimModel::SimValidationResultsAir_AirLoop_Default_sequence& SimModel::
      SimValidationResultsAir_AirLoop_Default () const
      {
        return this->SimValidationResultsAir_AirLoop_Default_;
      }

      SimModel::SimValidationResultsAir_AirLoop_Default_sequence& SimModel::
      SimValidationResultsAir_AirLoop_Default ()
      {
        return this->SimValidationResultsAir_AirLoop_Default_;
      }

      void SimModel::
      SimValidationResultsAir_AirLoop_Default (const SimValidationResultsAir_AirLoop_Default_sequence& s)
      {
        this->SimValidationResultsAir_AirLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsBldg_Building_Default_sequence& SimModel::
      SimValidationResultsBldg_Building_Default () const
      {
        return this->SimValidationResultsBldg_Building_Default_;
      }

      SimModel::SimValidationResultsBldg_Building_Default_sequence& SimModel::
      SimValidationResultsBldg_Building_Default ()
      {
        return this->SimValidationResultsBldg_Building_Default_;
      }

      void SimModel::
      SimValidationResultsBldg_Building_Default (const SimValidationResultsBldg_Building_Default_sequence& s)
      {
        this->SimValidationResultsBldg_Building_Default_ = s;
      }

      const SimModel::SimValidationResultsRefrig_RFGLoop_Default_sequence& SimModel::
      SimValidationResultsRefrig_RFGLoop_Default () const
      {
        return this->SimValidationResultsRefrig_RFGLoop_Default_;
      }

      SimModel::SimValidationResultsRefrig_RFGLoop_Default_sequence& SimModel::
      SimValidationResultsRefrig_RFGLoop_Default ()
      {
        return this->SimValidationResultsRefrig_RFGLoop_Default_;
      }

      void SimModel::
      SimValidationResultsRefrig_RFGLoop_Default (const SimValidationResultsRefrig_RFGLoop_Default_sequence& s)
      {
        this->SimValidationResultsRefrig_RFGLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsVRF_VRFLoop_Default_sequence& SimModel::
      SimValidationResultsVRF_VRFLoop_Default () const
      {
        return this->SimValidationResultsVRF_VRFLoop_Default_;
      }

      SimModel::SimValidationResultsVRF_VRFLoop_Default_sequence& SimModel::
      SimValidationResultsVRF_VRFLoop_Default ()
      {
        return this->SimValidationResultsVRF_VRFLoop_Default_;
      }

      void SimModel::
      SimValidationResultsVRF_VRFLoop_Default (const SimValidationResultsVRF_VRFLoop_Default_sequence& s)
      {
        this->SimValidationResultsVRF_VRFLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsWater_CHWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_CHWLoop_Default () const
      {
        return this->SimValidationResultsWater_CHWLoop_Default_;
      }

      SimModel::SimValidationResultsWater_CHWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_CHWLoop_Default ()
      {
        return this->SimValidationResultsWater_CHWLoop_Default_;
      }

      void SimModel::
      SimValidationResultsWater_CHWLoop_Default (const SimValidationResultsWater_CHWLoop_Default_sequence& s)
      {
        this->SimValidationResultsWater_CHWLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsWater_CWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_CWLoop_Default () const
      {
        return this->SimValidationResultsWater_CWLoop_Default_;
      }

      SimModel::SimValidationResultsWater_CWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_CWLoop_Default ()
      {
        return this->SimValidationResultsWater_CWLoop_Default_;
      }

      void SimModel::
      SimValidationResultsWater_CWLoop_Default (const SimValidationResultsWater_CWLoop_Default_sequence& s)
      {
        this->SimValidationResultsWater_CWLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsWater_HWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_HWLoop_Default () const
      {
        return this->SimValidationResultsWater_HWLoop_Default_;
      }

      SimModel::SimValidationResultsWater_HWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_HWLoop_Default ()
      {
        return this->SimValidationResultsWater_HWLoop_Default_;
      }

      void SimModel::
      SimValidationResultsWater_HWLoop_Default (const SimValidationResultsWater_HWLoop_Default_sequence& s)
      {
        this->SimValidationResultsWater_HWLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsWater_MxWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_MxWLoop_Default () const
      {
        return this->SimValidationResultsWater_MxWLoop_Default_;
      }

      SimModel::SimValidationResultsWater_MxWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_MxWLoop_Default ()
      {
        return this->SimValidationResultsWater_MxWLoop_Default_;
      }

      void SimModel::
      SimValidationResultsWater_MxWLoop_Default (const SimValidationResultsWater_MxWLoop_Default_sequence& s)
      {
        this->SimValidationResultsWater_MxWLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsWater_SHWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_SHWLoop_Default () const
      {
        return this->SimValidationResultsWater_SHWLoop_Default_;
      }

      SimModel::SimValidationResultsWater_SHWLoop_Default_sequence& SimModel::
      SimValidationResultsWater_SHWLoop_Default ()
      {
        return this->SimValidationResultsWater_SHWLoop_Default_;
      }

      void SimModel::
      SimValidationResultsWater_SHWLoop_Default (const SimValidationResultsWater_SHWLoop_Default_sequence& s)
      {
        this->SimValidationResultsWater_SHWLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsWater_STMLoop_Default_sequence& SimModel::
      SimValidationResultsWater_STMLoop_Default () const
      {
        return this->SimValidationResultsWater_STMLoop_Default_;
      }

      SimModel::SimValidationResultsWater_STMLoop_Default_sequence& SimModel::
      SimValidationResultsWater_STMLoop_Default ()
      {
        return this->SimValidationResultsWater_STMLoop_Default_;
      }

      void SimModel::
      SimValidationResultsWater_STMLoop_Default (const SimValidationResultsWater_STMLoop_Default_sequence& s)
      {
        this->SimValidationResultsWater_STMLoop_Default_ = s;
      }

      const SimModel::SimValidationResultsZoneHvac_ZoneHvac_Default_sequence& SimModel::
      SimValidationResultsZoneHvac_ZoneHvac_Default () const
      {
        return this->SimValidationResultsZoneHvac_ZoneHvac_Default_;
      }

      SimModel::SimValidationResultsZoneHvac_ZoneHvac_Default_sequence& SimModel::
      SimValidationResultsZoneHvac_ZoneHvac_Default ()
      {
        return this->SimValidationResultsZoneHvac_ZoneHvac_Default_;
      }

      void SimModel::
      SimValidationResultsZoneHvac_ZoneHvac_Default (const SimValidationResultsZoneHvac_ZoneHvac_Default_sequence& s)
      {
        this->SimValidationResultsZoneHvac_ZoneHvac_Default_ = s;
      }

      const SimModel::SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower () const
      {
        return this->SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_;
      }

      SimModel::SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower ()
      {
        return this->SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_;
      }

      void SimModel::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower (const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_sequence& s)
      {
        this->SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_ = s;
      }

      const SimModel::SimVentilationAssembly_VentilationAssembly_EarthTube_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_EarthTube () const
      {
        return this->SimVentilationAssembly_VentilationAssembly_EarthTube_;
      }

      SimModel::SimVentilationAssembly_VentilationAssembly_EarthTube_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_EarthTube ()
      {
        return this->SimVentilationAssembly_VentilationAssembly_EarthTube_;
      }

      void SimModel::
      SimVentilationAssembly_VentilationAssembly_EarthTube (const SimVentilationAssembly_VentilationAssembly_EarthTube_sequence& s)
      {
        this->SimVentilationAssembly_VentilationAssembly_EarthTube_ = s;
      }

      const SimModel::SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity () const
      {
        return this->SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_;
      }

      SimModel::SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity ()
      {
        return this->SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_;
      }

      void SimModel::
      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity (const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_sequence& s)
      {
        this->SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_ = s;
      }

      const SimModel::SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_RefrigerationDoor () const
      {
        return this->SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_;
      }

      SimModel::SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_RefrigerationDoor ()
      {
        return this->SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_;
      }

      void SimModel::
      SimVentilationAssembly_VentilationAssembly_RefrigerationDoor (const SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_sequence& s)
      {
        this->SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_ = s;
      }

      const SimModel::SimVentilationAssembly_VentilationAssembly_ThermalChimney_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_ThermalChimney () const
      {
        return this->SimVentilationAssembly_VentilationAssembly_ThermalChimney_;
      }

      SimModel::SimVentilationAssembly_VentilationAssembly_ThermalChimney_sequence& SimModel::
      SimVentilationAssembly_VentilationAssembly_ThermalChimney ()
      {
        return this->SimVentilationAssembly_VentilationAssembly_ThermalChimney_;
      }

      void SimModel::
      SimVentilationAssembly_VentilationAssembly_ThermalChimney (const SimVentilationAssembly_VentilationAssembly_ThermalChimney_sequence& s)
      {
        this->SimVentilationAssembly_VentilationAssembly_ThermalChimney_ = s;
      }

      const SimModel::SimVertex_Vertex_Point_sequence& SimModel::
      SimVertex_Vertex_Point () const
      {
        return this->SimVertex_Vertex_Point_;
      }

      SimModel::SimVertex_Vertex_Point_sequence& SimModel::
      SimVertex_Vertex_Point ()
      {
        return this->SimVertex_Vertex_Point_;
      }

      void SimModel::
      SimVertex_Vertex_Point (const SimVertex_Vertex_Point_sequence& s)
      {
        this->SimVertex_Vertex_Point_ = s;
      }

      const SimModel::SimVirtualElement_Default_Default_sequence& SimModel::
      SimVirtualElement_Default_Default () const
      {
        return this->SimVirtualElement_Default_Default_;
      }

      SimModel::SimVirtualElement_Default_Default_sequence& SimModel::
      SimVirtualElement_Default_Default ()
      {
        return this->SimVirtualElement_Default_Default_;
      }

      void SimModel::
      SimVirtualElement_Default_Default (const SimVirtualElement_Default_Default_sequence& s)
      {
        this->SimVirtualElement_Default_Default_ = s;
      }

      const SimModel::SimVirtualElement_Slab_Ceiling_sequence& SimModel::
      SimVirtualElement_Slab_Ceiling () const
      {
        return this->SimVirtualElement_Slab_Ceiling_;
      }

      SimModel::SimVirtualElement_Slab_Ceiling_sequence& SimModel::
      SimVirtualElement_Slab_Ceiling ()
      {
        return this->SimVirtualElement_Slab_Ceiling_;
      }

      void SimModel::
      SimVirtualElement_Slab_Ceiling (const SimVirtualElement_Slab_Ceiling_sequence& s)
      {
        this->SimVirtualElement_Slab_Ceiling_ = s;
      }

      const SimModel::SimVirtualElement_Slab_Default_sequence& SimModel::
      SimVirtualElement_Slab_Default () const
      {
        return this->SimVirtualElement_Slab_Default_;
      }

      SimModel::SimVirtualElement_Slab_Default_sequence& SimModel::
      SimVirtualElement_Slab_Default ()
      {
        return this->SimVirtualElement_Slab_Default_;
      }

      void SimModel::
      SimVirtualElement_Slab_Default (const SimVirtualElement_Slab_Default_sequence& s)
      {
        this->SimVirtualElement_Slab_Default_ = s;
      }

      const SimModel::SimVirtualElement_Slab_Floor_sequence& SimModel::
      SimVirtualElement_Slab_Floor () const
      {
        return this->SimVirtualElement_Slab_Floor_;
      }

      SimModel::SimVirtualElement_Slab_Floor_sequence& SimModel::
      SimVirtualElement_Slab_Floor ()
      {
        return this->SimVirtualElement_Slab_Floor_;
      }

      void SimModel::
      SimVirtualElement_Slab_Floor (const SimVirtualElement_Slab_Floor_sequence& s)
      {
        this->SimVirtualElement_Slab_Floor_ = s;
      }

      const SimModel::SimVirtualElement_Slab_OpeningFiller_sequence& SimModel::
      SimVirtualElement_Slab_OpeningFiller () const
      {
        return this->SimVirtualElement_Slab_OpeningFiller_;
      }

      SimModel::SimVirtualElement_Slab_OpeningFiller_sequence& SimModel::
      SimVirtualElement_Slab_OpeningFiller ()
      {
        return this->SimVirtualElement_Slab_OpeningFiller_;
      }

      void SimModel::
      SimVirtualElement_Slab_OpeningFiller (const SimVirtualElement_Slab_OpeningFiller_sequence& s)
      {
        this->SimVirtualElement_Slab_OpeningFiller_ = s;
      }

      const SimModel::SimVirtualElement_Wall_Default_sequence& SimModel::
      SimVirtualElement_Wall_Default () const
      {
        return this->SimVirtualElement_Wall_Default_;
      }

      SimModel::SimVirtualElement_Wall_Default_sequence& SimModel::
      SimVirtualElement_Wall_Default ()
      {
        return this->SimVirtualElement_Wall_Default_;
      }

      void SimModel::
      SimVirtualElement_Wall_Default (const SimVirtualElement_Wall_Default_sequence& s)
      {
        this->SimVirtualElement_Wall_Default_ = s;
      }

      const SimModel::SimVirtualElement_Wall_OpeningFiller_sequence& SimModel::
      SimVirtualElement_Wall_OpeningFiller () const
      {
        return this->SimVirtualElement_Wall_OpeningFiller_;
      }

      SimModel::SimVirtualElement_Wall_OpeningFiller_sequence& SimModel::
      SimVirtualElement_Wall_OpeningFiller ()
      {
        return this->SimVirtualElement_Wall_OpeningFiller_;
      }

      void SimModel::
      SimVirtualElement_Wall_OpeningFiller (const SimVirtualElement_Wall_OpeningFiller_sequence& s)
      {
        this->SimVirtualElement_Wall_OpeningFiller_ = s;
      }

      const SimModel::SimVirtualGridIntersection_VirtualGridIntersection_Default_sequence& SimModel::
      SimVirtualGridIntersection_VirtualGridIntersection_Default () const
      {
        return this->SimVirtualGridIntersection_VirtualGridIntersection_Default_;
      }

      SimModel::SimVirtualGridIntersection_VirtualGridIntersection_Default_sequence& SimModel::
      SimVirtualGridIntersection_VirtualGridIntersection_Default ()
      {
        return this->SimVirtualGridIntersection_VirtualGridIntersection_Default_;
      }

      void SimModel::
      SimVirtualGridIntersection_VirtualGridIntersection_Default (const SimVirtualGridIntersection_VirtualGridIntersection_Default_sequence& s)
      {
        this->SimVirtualGridIntersection_VirtualGridIntersection_Default_ = s;
      }

      const SimModel::SimWall_OtherSideCoefficients_Default_sequence& SimModel::
      SimWall_OtherSideCoefficients_Default () const
      {
        return this->SimWall_OtherSideCoefficients_Default_;
      }

      SimModel::SimWall_OtherSideCoefficients_Default_sequence& SimModel::
      SimWall_OtherSideCoefficients_Default ()
      {
        return this->SimWall_OtherSideCoefficients_Default_;
      }

      void SimModel::
      SimWall_OtherSideCoefficients_Default (const SimWall_OtherSideCoefficients_Default_sequence& s)
      {
        this->SimWall_OtherSideCoefficients_Default_ = s;
      }

      const SimModel::SimWall_OtherSideCoefficients_Detailed_sequence& SimModel::
      SimWall_OtherSideCoefficients_Detailed () const
      {
        return this->SimWall_OtherSideCoefficients_Detailed_;
      }

      SimModel::SimWall_OtherSideCoefficients_Detailed_sequence& SimModel::
      SimWall_OtherSideCoefficients_Detailed ()
      {
        return this->SimWall_OtherSideCoefficients_Detailed_;
      }

      void SimModel::
      SimWall_OtherSideCoefficients_Detailed (const SimWall_OtherSideCoefficients_Detailed_sequence& s)
      {
        this->SimWall_OtherSideCoefficients_Detailed_ = s;
      }

      const SimModel::SimWall_OtherSideCoefficients_DetailedFloor_sequence& SimModel::
      SimWall_OtherSideCoefficients_DetailedFloor () const
      {
        return this->SimWall_OtherSideCoefficients_DetailedFloor_;
      }

      SimModel::SimWall_OtherSideCoefficients_DetailedFloor_sequence& SimModel::
      SimWall_OtherSideCoefficients_DetailedFloor ()
      {
        return this->SimWall_OtherSideCoefficients_DetailedFloor_;
      }

      void SimModel::
      SimWall_OtherSideCoefficients_DetailedFloor (const SimWall_OtherSideCoefficients_DetailedFloor_sequence& s)
      {
        this->SimWall_OtherSideCoefficients_DetailedFloor_ = s;
      }

      const SimModel::SimWall_OtherSideCoefficients_DetailedRoofCeiling_sequence& SimModel::
      SimWall_OtherSideCoefficients_DetailedRoofCeiling () const
      {
        return this->SimWall_OtherSideCoefficients_DetailedRoofCeiling_;
      }

      SimModel::SimWall_OtherSideCoefficients_DetailedRoofCeiling_sequence& SimModel::
      SimWall_OtherSideCoefficients_DetailedRoofCeiling ()
      {
        return this->SimWall_OtherSideCoefficients_DetailedRoofCeiling_;
      }

      void SimModel::
      SimWall_OtherSideCoefficients_DetailedRoofCeiling (const SimWall_OtherSideCoefficients_DetailedRoofCeiling_sequence& s)
      {
        this->SimWall_OtherSideCoefficients_DetailedRoofCeiling_ = s;
      }

      const SimModel::SimWall_OtherSideConditionsModel_Default_sequence& SimModel::
      SimWall_OtherSideConditionsModel_Default () const
      {
        return this->SimWall_OtherSideConditionsModel_Default_;
      }

      SimModel::SimWall_OtherSideConditionsModel_Default_sequence& SimModel::
      SimWall_OtherSideConditionsModel_Default ()
      {
        return this->SimWall_OtherSideConditionsModel_Default_;
      }

      void SimModel::
      SimWall_OtherSideConditionsModel_Default (const SimWall_OtherSideConditionsModel_Default_sequence& s)
      {
        this->SimWall_OtherSideConditionsModel_Default_ = s;
      }

      const SimModel::SimWall_OtherSideConditionsModel_Detailed_sequence& SimModel::
      SimWall_OtherSideConditionsModel_Detailed () const
      {
        return this->SimWall_OtherSideConditionsModel_Detailed_;
      }

      SimModel::SimWall_OtherSideConditionsModel_Detailed_sequence& SimModel::
      SimWall_OtherSideConditionsModel_Detailed ()
      {
        return this->SimWall_OtherSideConditionsModel_Detailed_;
      }

      void SimModel::
      SimWall_OtherSideConditionsModel_Detailed (const SimWall_OtherSideConditionsModel_Detailed_sequence& s)
      {
        this->SimWall_OtherSideConditionsModel_Detailed_ = s;
      }

      const SimModel::SimWall_OtherSideConditionsModel_DetailedFloor_sequence& SimModel::
      SimWall_OtherSideConditionsModel_DetailedFloor () const
      {
        return this->SimWall_OtherSideConditionsModel_DetailedFloor_;
      }

      SimModel::SimWall_OtherSideConditionsModel_DetailedFloor_sequence& SimModel::
      SimWall_OtherSideConditionsModel_DetailedFloor ()
      {
        return this->SimWall_OtherSideConditionsModel_DetailedFloor_;
      }

      void SimModel::
      SimWall_OtherSideConditionsModel_DetailedFloor (const SimWall_OtherSideConditionsModel_DetailedFloor_sequence& s)
      {
        this->SimWall_OtherSideConditionsModel_DetailedFloor_ = s;
      }

      const SimModel::SimWall_OtherSideConditionsModel_DetailedRoofCeiling_sequence& SimModel::
      SimWall_OtherSideConditionsModel_DetailedRoofCeiling () const
      {
        return this->SimWall_OtherSideConditionsModel_DetailedRoofCeiling_;
      }

      SimModel::SimWall_OtherSideConditionsModel_DetailedRoofCeiling_sequence& SimModel::
      SimWall_OtherSideConditionsModel_DetailedRoofCeiling ()
      {
        return this->SimWall_OtherSideConditionsModel_DetailedRoofCeiling_;
      }

      void SimModel::
      SimWall_OtherSideConditionsModel_DetailedRoofCeiling (const SimWall_OtherSideConditionsModel_DetailedRoofCeiling_sequence& s)
      {
        this->SimWall_OtherSideConditionsModel_DetailedRoofCeiling_ = s;
      }

      const SimModel::SimWall_Wall_Adiabatic_sequence& SimModel::
      SimWall_Wall_Adiabatic () const
      {
        return this->SimWall_Wall_Adiabatic_;
      }

      SimModel::SimWall_Wall_Adiabatic_sequence& SimModel::
      SimWall_Wall_Adiabatic ()
      {
        return this->SimWall_Wall_Adiabatic_;
      }

      void SimModel::
      SimWall_Wall_Adiabatic (const SimWall_Wall_Adiabatic_sequence& s)
      {
        this->SimWall_Wall_Adiabatic_ = s;
      }

      const SimModel::SimWall_Wall_Default_sequence& SimModel::
      SimWall_Wall_Default () const
      {
        return this->SimWall_Wall_Default_;
      }

      SimModel::SimWall_Wall_Default_sequence& SimModel::
      SimWall_Wall_Default ()
      {
        return this->SimWall_Wall_Default_;
      }

      void SimModel::
      SimWall_Wall_Default (const SimWall_Wall_Default_sequence& s)
      {
        this->SimWall_Wall_Default_ = s;
      }

      const SimModel::SimWall_Wall_ExteriorAboveGrade_sequence& SimModel::
      SimWall_Wall_ExteriorAboveGrade () const
      {
        return this->SimWall_Wall_ExteriorAboveGrade_;
      }

      SimModel::SimWall_Wall_ExteriorAboveGrade_sequence& SimModel::
      SimWall_Wall_ExteriorAboveGrade ()
      {
        return this->SimWall_Wall_ExteriorAboveGrade_;
      }

      void SimModel::
      SimWall_Wall_ExteriorAboveGrade (const SimWall_Wall_ExteriorAboveGrade_sequence& s)
      {
        this->SimWall_Wall_ExteriorAboveGrade_ = s;
      }

      const SimModel::SimWall_Wall_ExteriorAboveGradeDetailed_sequence& SimModel::
      SimWall_Wall_ExteriorAboveGradeDetailed () const
      {
        return this->SimWall_Wall_ExteriorAboveGradeDetailed_;
      }

      SimModel::SimWall_Wall_ExteriorAboveGradeDetailed_sequence& SimModel::
      SimWall_Wall_ExteriorAboveGradeDetailed ()
      {
        return this->SimWall_Wall_ExteriorAboveGradeDetailed_;
      }

      void SimModel::
      SimWall_Wall_ExteriorAboveGradeDetailed (const SimWall_Wall_ExteriorAboveGradeDetailed_sequence& s)
      {
        this->SimWall_Wall_ExteriorAboveGradeDetailed_ = s;
      }

      const SimModel::SimWall_Wall_ExteriorAboveGradeStandard_sequence& SimModel::
      SimWall_Wall_ExteriorAboveGradeStandard () const
      {
        return this->SimWall_Wall_ExteriorAboveGradeStandard_;
      }

      SimModel::SimWall_Wall_ExteriorAboveGradeStandard_sequence& SimModel::
      SimWall_Wall_ExteriorAboveGradeStandard ()
      {
        return this->SimWall_Wall_ExteriorAboveGradeStandard_;
      }

      void SimModel::
      SimWall_Wall_ExteriorAboveGradeStandard (const SimWall_Wall_ExteriorAboveGradeStandard_sequence& s)
      {
        this->SimWall_Wall_ExteriorAboveGradeStandard_ = s;
      }

      const SimModel::SimWall_Wall_ExteriorBelowGrade_sequence& SimModel::
      SimWall_Wall_ExteriorBelowGrade () const
      {
        return this->SimWall_Wall_ExteriorBelowGrade_;
      }

      SimModel::SimWall_Wall_ExteriorBelowGrade_sequence& SimModel::
      SimWall_Wall_ExteriorBelowGrade ()
      {
        return this->SimWall_Wall_ExteriorBelowGrade_;
      }

      void SimModel::
      SimWall_Wall_ExteriorBelowGrade (const SimWall_Wall_ExteriorBelowGrade_sequence& s)
      {
        this->SimWall_Wall_ExteriorBelowGrade_ = s;
      }

      const SimModel::SimWall_Wall_ExteriorBelowGradeDetailed_sequence& SimModel::
      SimWall_Wall_ExteriorBelowGradeDetailed () const
      {
        return this->SimWall_Wall_ExteriorBelowGradeDetailed_;
      }

      SimModel::SimWall_Wall_ExteriorBelowGradeDetailed_sequence& SimModel::
      SimWall_Wall_ExteriorBelowGradeDetailed ()
      {
        return this->SimWall_Wall_ExteriorBelowGradeDetailed_;
      }

      void SimModel::
      SimWall_Wall_ExteriorBelowGradeDetailed (const SimWall_Wall_ExteriorBelowGradeDetailed_sequence& s)
      {
        this->SimWall_Wall_ExteriorBelowGradeDetailed_ = s;
      }

      const SimModel::SimWall_Wall_ExteriorBelowGradeStandard_sequence& SimModel::
      SimWall_Wall_ExteriorBelowGradeStandard () const
      {
        return this->SimWall_Wall_ExteriorBelowGradeStandard_;
      }

      SimModel::SimWall_Wall_ExteriorBelowGradeStandard_sequence& SimModel::
      SimWall_Wall_ExteriorBelowGradeStandard ()
      {
        return this->SimWall_Wall_ExteriorBelowGradeStandard_;
      }

      void SimModel::
      SimWall_Wall_ExteriorBelowGradeStandard (const SimWall_Wall_ExteriorBelowGradeStandard_sequence& s)
      {
        this->SimWall_Wall_ExteriorBelowGradeStandard_ = s;
      }

      const SimModel::SimWall_Wall_Interior_sequence& SimModel::
      SimWall_Wall_Interior () const
      {
        return this->SimWall_Wall_Interior_;
      }

      SimModel::SimWall_Wall_Interior_sequence& SimModel::
      SimWall_Wall_Interior ()
      {
        return this->SimWall_Wall_Interior_;
      }

      void SimModel::
      SimWall_Wall_Interior (const SimWall_Wall_Interior_sequence& s)
      {
        this->SimWall_Wall_Interior_ = s;
      }

      const SimModel::SimWall_Wall_InteriorDetailed_sequence& SimModel::
      SimWall_Wall_InteriorDetailed () const
      {
        return this->SimWall_Wall_InteriorDetailed_;
      }

      SimModel::SimWall_Wall_InteriorDetailed_sequence& SimModel::
      SimWall_Wall_InteriorDetailed ()
      {
        return this->SimWall_Wall_InteriorDetailed_;
      }

      void SimModel::
      SimWall_Wall_InteriorDetailed (const SimWall_Wall_InteriorDetailed_sequence& s)
      {
        this->SimWall_Wall_InteriorDetailed_ = s;
      }

      const SimModel::SimWall_Wall_InteriorStandard_sequence& SimModel::
      SimWall_Wall_InteriorStandard () const
      {
        return this->SimWall_Wall_InteriorStandard_;
      }

      SimModel::SimWall_Wall_InteriorStandard_sequence& SimModel::
      SimWall_Wall_InteriorStandard ()
      {
        return this->SimWall_Wall_InteriorStandard_;
      }

      void SimModel::
      SimWall_Wall_InteriorStandard (const SimWall_Wall_InteriorStandard_sequence& s)
      {
        this->SimWall_Wall_InteriorStandard_ = s;
      }

      const SimModel::SimWall_Wall_OpeningFiller_sequence& SimModel::
      SimWall_Wall_OpeningFiller () const
      {
        return this->SimWall_Wall_OpeningFiller_;
      }

      SimModel::SimWall_Wall_OpeningFiller_sequence& SimModel::
      SimWall_Wall_OpeningFiller ()
      {
        return this->SimWall_Wall_OpeningFiller_;
      }

      void SimModel::
      SimWall_Wall_OpeningFiller (const SimWall_Wall_OpeningFiller_sequence& s)
      {
        this->SimWall_Wall_OpeningFiller_ = s;
      }

      const SimModel::SimWallParams_Wall_Default_sequence& SimModel::
      SimWallParams_Wall_Default () const
      {
        return this->SimWallParams_Wall_Default_;
      }

      SimModel::SimWallParams_Wall_Default_sequence& SimModel::
      SimWallParams_Wall_Default ()
      {
        return this->SimWallParams_Wall_Default_;
      }

      void SimModel::
      SimWallParams_Wall_Default (const SimWallParams_Wall_Default_sequence& s)
      {
        this->SimWallParams_Wall_Default_ = s;
      }

      const SimModel::SimWallType_Wall_Default_sequence& SimModel::
      SimWallType_Wall_Default () const
      {
        return this->SimWallType_Wall_Default_;
      }

      SimModel::SimWallType_Wall_Default_sequence& SimModel::
      SimWallType_Wall_Default ()
      {
        return this->SimWallType_Wall_Default_;
      }

      void SimModel::
      SimWallType_Wall_Default (const SimWallType_Wall_Default_sequence& s)
      {
        this->SimWallType_Wall_Default_ = s;
      }

      const SimModel::SimWindow_ComplexFenestration_ThermoChromic_sequence& SimModel::
      SimWindow_ComplexFenestration_ThermoChromic () const
      {
        return this->SimWindow_ComplexFenestration_ThermoChromic_;
      }

      SimModel::SimWindow_ComplexFenestration_ThermoChromic_sequence& SimModel::
      SimWindow_ComplexFenestration_ThermoChromic ()
      {
        return this->SimWindow_ComplexFenestration_ThermoChromic_;
      }

      void SimModel::
      SimWindow_ComplexFenestration_ThermoChromic (const SimWindow_ComplexFenestration_ThermoChromic_sequence& s)
      {
        this->SimWindow_ComplexFenestration_ThermoChromic_ = s;
      }

      const SimModel::SimWindow_Skylight_Exterior_sequence& SimModel::
      SimWindow_Skylight_Exterior () const
      {
        return this->SimWindow_Skylight_Exterior_;
      }

      SimModel::SimWindow_Skylight_Exterior_sequence& SimModel::
      SimWindow_Skylight_Exterior ()
      {
        return this->SimWindow_Skylight_Exterior_;
      }

      void SimModel::
      SimWindow_Skylight_Exterior (const SimWindow_Skylight_Exterior_sequence& s)
      {
        this->SimWindow_Skylight_Exterior_ = s;
      }

      const SimModel::SimWindow_Skylight_ExteriorDetailed_sequence& SimModel::
      SimWindow_Skylight_ExteriorDetailed () const
      {
        return this->SimWindow_Skylight_ExteriorDetailed_;
      }

      SimModel::SimWindow_Skylight_ExteriorDetailed_sequence& SimModel::
      SimWindow_Skylight_ExteriorDetailed ()
      {
        return this->SimWindow_Skylight_ExteriorDetailed_;
      }

      void SimModel::
      SimWindow_Skylight_ExteriorDetailed (const SimWindow_Skylight_ExteriorDetailed_sequence& s)
      {
        this->SimWindow_Skylight_ExteriorDetailed_ = s;
      }

      const SimModel::SimWindow_Window_Default_sequence& SimModel::
      SimWindow_Window_Default () const
      {
        return this->SimWindow_Window_Default_;
      }

      SimModel::SimWindow_Window_Default_sequence& SimModel::
      SimWindow_Window_Default ()
      {
        return this->SimWindow_Window_Default_;
      }

      void SimModel::
      SimWindow_Window_Default (const SimWindow_Window_Default_sequence& s)
      {
        this->SimWindow_Window_Default_ = s;
      }

      const SimModel::SimWindow_Window_Exterior_sequence& SimModel::
      SimWindow_Window_Exterior () const
      {
        return this->SimWindow_Window_Exterior_;
      }

      SimModel::SimWindow_Window_Exterior_sequence& SimModel::
      SimWindow_Window_Exterior ()
      {
        return this->SimWindow_Window_Exterior_;
      }

      void SimModel::
      SimWindow_Window_Exterior (const SimWindow_Window_Exterior_sequence& s)
      {
        this->SimWindow_Window_Exterior_ = s;
      }

      const SimModel::SimWindow_Window_ExteriorDetailed_sequence& SimModel::
      SimWindow_Window_ExteriorDetailed () const
      {
        return this->SimWindow_Window_ExteriorDetailed_;
      }

      SimModel::SimWindow_Window_ExteriorDetailed_sequence& SimModel::
      SimWindow_Window_ExteriorDetailed ()
      {
        return this->SimWindow_Window_ExteriorDetailed_;
      }

      void SimModel::
      SimWindow_Window_ExteriorDetailed (const SimWindow_Window_ExteriorDetailed_sequence& s)
      {
        this->SimWindow_Window_ExteriorDetailed_ = s;
      }

      const SimModel::SimWindow_Window_Interior_sequence& SimModel::
      SimWindow_Window_Interior () const
      {
        return this->SimWindow_Window_Interior_;
      }

      SimModel::SimWindow_Window_Interior_sequence& SimModel::
      SimWindow_Window_Interior ()
      {
        return this->SimWindow_Window_Interior_;
      }

      void SimModel::
      SimWindow_Window_Interior (const SimWindow_Window_Interior_sequence& s)
      {
        this->SimWindow_Window_Interior_ = s;
      }

      const SimModel::SimWindowArrayParams_WindowArray_Default_sequence& SimModel::
      SimWindowArrayParams_WindowArray_Default () const
      {
        return this->SimWindowArrayParams_WindowArray_Default_;
      }

      SimModel::SimWindowArrayParams_WindowArray_Default_sequence& SimModel::
      SimWindowArrayParams_WindowArray_Default ()
      {
        return this->SimWindowArrayParams_WindowArray_Default_;
      }

      void SimModel::
      SimWindowArrayParams_WindowArray_Default (const SimWindowArrayParams_WindowArray_Default_sequence& s)
      {
        this->SimWindowArrayParams_WindowArray_Default_ = s;
      }

      const SimModel::SimWindowLiningProps_WindowLiningProps_Default_sequence& SimModel::
      SimWindowLiningProps_WindowLiningProps_Default () const
      {
        return this->SimWindowLiningProps_WindowLiningProps_Default_;
      }

      SimModel::SimWindowLiningProps_WindowLiningProps_Default_sequence& SimModel::
      SimWindowLiningProps_WindowLiningProps_Default ()
      {
        return this->SimWindowLiningProps_WindowLiningProps_Default_;
      }

      void SimModel::
      SimWindowLiningProps_WindowLiningProps_Default (const SimWindowLiningProps_WindowLiningProps_Default_sequence& s)
      {
        this->SimWindowLiningProps_WindowLiningProps_Default_ = s;
      }

      const SimModel::SimWindowPanelProps_WindowPanelProps_Default_sequence& SimModel::
      SimWindowPanelProps_WindowPanelProps_Default () const
      {
        return this->SimWindowPanelProps_WindowPanelProps_Default_;
      }

      SimModel::SimWindowPanelProps_WindowPanelProps_Default_sequence& SimModel::
      SimWindowPanelProps_WindowPanelProps_Default ()
      {
        return this->SimWindowPanelProps_WindowPanelProps_Default_;
      }

      void SimModel::
      SimWindowPanelProps_WindowPanelProps_Default (const SimWindowPanelProps_WindowPanelProps_Default_sequence& s)
      {
        this->SimWindowPanelProps_WindowPanelProps_Default_ = s;
      }

      const SimModel::SimWindowParams_Window_Default_sequence& SimModel::
      SimWindowParams_Window_Default () const
      {
        return this->SimWindowParams_Window_Default_;
      }

      SimModel::SimWindowParams_Window_Default_sequence& SimModel::
      SimWindowParams_Window_Default ()
      {
        return this->SimWindowParams_Window_Default_;
      }

      void SimModel::
      SimWindowParams_Window_Default (const SimWindowParams_Window_Default_sequence& s)
      {
        this->SimWindowParams_Window_Default_ = s;
      }

      const SimModel::SimWindowType_Window_Default_sequence& SimModel::
      SimWindowType_Window_Default () const
      {
        return this->SimWindowType_Window_Default_;
      }

      SimModel::SimWindowType_Window_Default_sequence& SimModel::
      SimWindowType_Window_Default ()
      {
        return this->SimWindowType_Window_Default_;
      }

      void SimModel::
      SimWindowType_Window_Default (const SimWindowType_Window_Default_sequence& s)
      {
        this->SimWindowType_Window_Default_ = s;
      }

      const SimModel::SimModelVersion_optional& SimModel::
      SimModelVersion () const
      {
        return this->SimModelVersion_;
      }

      SimModel::SimModelVersion_optional& SimModel::
      SimModelVersion ()
      {
        return this->SimModelVersion_;
      }

      void SimModel::
      SimModelVersion (const SimModelVersion_type& x)
      {
        this->SimModelVersion_.set (x);
      }

      void SimModel::
      SimModelVersion (const SimModelVersion_optional& x)
      {
        this->SimModelVersion_ = x;
      }

      void SimModel::
      SimModelVersion (::std::auto_ptr< SimModelVersion_type > x)
      {
        this->SimModelVersion_.set (x);
      }

      const SimModel::SimModelSchemaVersion_optional& SimModel::
      SimModelSchemaVersion () const
      {
        return this->SimModelSchemaVersion_;
      }

      SimModel::SimModelSchemaVersion_optional& SimModel::
      SimModelSchemaVersion ()
      {
        return this->SimModelSchemaVersion_;
      }

      void SimModel::
      SimModelSchemaVersion (const SimModelSchemaVersion_type& x)
      {
        this->SimModelSchemaVersion_.set (x);
      }

      void SimModel::
      SimModelSchemaVersion (const SimModelSchemaVersion_optional& x)
      {
        this->SimModelSchemaVersion_ = x;
      }

      void SimModel::
      SimModelSchemaVersion (::std::auto_ptr< SimModelSchemaVersion_type > x)
      {
        this->SimModelSchemaVersion_.set (x);
      }

      const SimModel::SimModelUnitsVersion_optional& SimModel::
      SimModelUnitsVersion () const
      {
        return this->SimModelUnitsVersion_;
      }

      SimModel::SimModelUnitsVersion_optional& SimModel::
      SimModelUnitsVersion ()
      {
        return this->SimModelUnitsVersion_;
      }

      void SimModel::
      SimModelUnitsVersion (const SimModelUnitsVersion_type& x)
      {
        this->SimModelUnitsVersion_.set (x);
      }

      void SimModel::
      SimModelUnitsVersion (const SimModelUnitsVersion_optional& x)
      {
        this->SimModelUnitsVersion_ = x;
      }

      void SimModel::
      SimModelUnitsVersion (::std::auto_ptr< SimModelUnitsVersion_type > x)
      {
        this->SimModelUnitsVersion_.set (x);
      }

      const SimModel::SimModelUnitDefaultsVersion_optional& SimModel::
      SimModelUnitDefaultsVersion () const
      {
        return this->SimModelUnitDefaultsVersion_;
      }

      SimModel::SimModelUnitDefaultsVersion_optional& SimModel::
      SimModelUnitDefaultsVersion ()
      {
        return this->SimModelUnitDefaultsVersion_;
      }

      void SimModel::
      SimModelUnitDefaultsVersion (const SimModelUnitDefaultsVersion_type& x)
      {
        this->SimModelUnitDefaultsVersion_.set (x);
      }

      void SimModel::
      SimModelUnitDefaultsVersion (const SimModelUnitDefaultsVersion_optional& x)
      {
        this->SimModelUnitDefaultsVersion_ = x;
      }

      void SimModel::
      SimModelUnitDefaultsVersion (::std::auto_ptr< SimModelUnitDefaultsVersion_type > x)
      {
        this->SimModelUnitDefaultsVersion_.set (x);
      }

      const SimModel::SimModelSchemaIDKey_optional& SimModel::
      SimModelSchemaIDKey () const
      {
        return this->SimModelSchemaIDKey_;
      }

      SimModel::SimModelSchemaIDKey_optional& SimModel::
      SimModelSchemaIDKey ()
      {
        return this->SimModelSchemaIDKey_;
      }

      void SimModel::
      SimModelSchemaIDKey (const SimModelSchemaIDKey_type& x)
      {
        this->SimModelSchemaIDKey_.set (x);
      }

      void SimModel::
      SimModelSchemaIDKey (const SimModelSchemaIDKey_optional& x)
      {
        this->SimModelSchemaIDKey_ = x;
      }

      void SimModel::
      SimModelSchemaIDKey (::std::auto_ptr< SimModelSchemaIDKey_type > x)
      {
        this->SimModelSchemaIDKey_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace Model
    {
      // SimModel
      //

      SimModel::
      SimModel ()
      : ::xml_schema::type (),
        SimActor_Actor_Default_ (this),
        SimActor_Actor_SpaceOccupant_ (this),
        SimActuator_DamperActuator_Default_ (this),
        SimActuator_Default_Default_ (this),
        SimActuator_ElectricalRotor_Default_ (this),
        SimActuator_ValveActuator_Default_ (this),
        SimActuator_VirtualActuator_EmsActuator_ (this),
        SimAddress_Postal_Default_ (this),
        SimAddress_Telecom_Default_ (this),
        SimAdjacentSiteParams_AdjacentSite_Default_ (this),
        SimAnalyticalRepresentation_AnalyticalRepresentation_Default_ (this),
        SimAppLanguageDefault_AppLanguageDefault_Default_ (this),
        SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_ (this),
        SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_ (this),
        SimAppLibraryDefault_AppLibraryDefault_UserLibrary_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_ (this),
        SimAppObjNameDefault_BldgComponentGroup_HvacComponent_ (this),
        SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_ (this),
        SimAppObjNameDefault_DistributionSystem_Default_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacAirLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_ServiceHotWater_ (this),
        SimAppObjNameDefault_DistributionSystem_SitePowerDemand_ (this),
        SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_ (this),
        SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_ (this),
        SimAppObjNameDefault_OtherSystem_Default_ (this),
        SimAppObjNameDefault_SiteContext_AdjacentSite_ (this),
        SimAppObjNameDefault_SiteContext_SolarObstruction_ (this),
        SimAppObjNameDefault_Space_CeilingPlenum_ (this),
        SimAppObjNameDefault_Space_FloorPlenum_ (this),
        SimAppObjNameDefault_Space_Space_ (this),
        SimAppObjNameDefault_SpatialContainer_Building_ (this),
        SimAppObjNameDefault_SpatialContainer_BuildingStory_ (this),
        SimAppObjNameDefault_SpatialContainer_Project_ (this),
        SimAppObjNameDefault_SpatialContainer_Site_ (this),
        SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_ (this),
        SimAppObjNameDefault_SpatialZone_FloorPlenumZone_ (this),
        SimAppObjNameDefault_SpatialZone_PlenumZone_ (this),
        SimAppObjNameDefault_SpatialZone_ThermalZone_ (this),
        SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_ (this),
        SimAppPreferences_AppPreferences_AutoSave_ (this),
        SimAppPreferences_AppPreferences_AutoSaveInterval_ (this),
        SimAppPreferences_AppPreferences_EPlusInstalPath_ (this),
        SimAppPreferences_AppPreferences_EPlusInstalVersion_ (this),
        SimAppPreferences_AppPreferences_MinMonthlyChargeType_ (this),
        SimAppPreferences_AppPreferences_MonthlyChargeType_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_ (this),
        SimAppUnitDefault_AppUnitDefault_DatabaseDefault_ (this),
        SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_ (this),
        SimArbitraryProfileDef_ArbitraryProfile_Closed_ (this),
        SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_ (this),
        SimArbitraryProfileDef_ArbitraryProfile_Open_ (this),
        SimArrayParams_ArrayParams_Default_ (this),
        SimArrayParams_BldgElementArray_Beam_ (this),
        SimArrayParams_BldgElementArray_Column_ (this),
        SimArrayParams_BldgElementArray_Default_ (this),
        SimArrayParams_DoorArray_Default_ (this),
        SimArrayParams_PanelArrayParams_Default_ (this),
        SimArrayParams_SolarShadeArray_Default_ (this),
        SimArrayParams_WindowArray_Default_ (this),
        SimBeam_Default_Default_ (this),
        SimBeamParams_Beam_Default_ (this),
        SimBeamType_Beam_Default_ (this),
        SimBldgElementArrayParams_BldgElementArray_Beam_ (this),
        SimBldgElementArrayParams_BldgElementArray_Column_ (this),
        SimBldgElementArrayParams_BldgElementArray_Default_ (this),
        SimBldgElementType_BldgElementProxy_Default_ (this),
        SimBldgElementType_Default_Default_ (this),
        SimBldgElementType_ElectricalTerminal_Default_ (this),
        SimBldgElementType_HumanTransport_Default_ (this),
        SimBldgElementType_PlumbingFixture_Default_ (this),
        SimBldgElementType_Railing_Default_ (this),
        SimBldgElementType_Ramp_Default_ (this),
        SimBldgElementType_RampFlight_Default_ (this),
        SimBldgElementType_Stair_Default_ (this),
        SimBldgElementType_StairFlight_Default_ (this),
        SimBldgElementType_VirtualElement_Default_ (this),
        SimBldgParams_Building_Default_ (this),
        SimBldgSiteParams_BuildingSite_Default_ (this),
        SimBldgStoryParams_BuildingStory_Default_ (this),
        SimBldgStoryType_BuildingStory_Default_ (this),
        SimBuilding_AdjacentBuilding_Default_ (this),
        SimBuilding_Building_Default_ (this),
        SimBuildingElementProxy_Default_Default_ (this),
        SimBuildingElementProxy_SiteContextElement_BuildingShading_ (this),
        SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_ (this),
        SimBuildingElementProxy_SiteContextElement_Default_ (this),
        SimBuildingElementProxy_SiteContextElement_GroundPlane_ (this),
        SimBuildingElementProxy_SiteContextElement_SiteShading_ (this),
        SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_ (this),
        SimBuildingElementProxy_ThermalMass_Default_ (this),
        SimBuildingStory_BuildingStory_Default_ (this),
        SimBuildingType_Building_Default_ (this),
        SimCalendarDate_Default_Default_ (this),
        SimCartesianTransformOperator_2D_NonUniform_ (this),
        SimCartesianTransformOperator_2D_Uniform_ (this),
        SimCartesianTransformOperator_3D_NonUniform_ (this),
        SimCartesianTransformOperator_3D_Uniform_ (this),
        SimClassification_ClassificationReference_BuildingElementClassification_ (this),
        SimClassification_ClassificationReference_ConstructionEntityByFunction_ (this),
        SimClassification_ClassificationReference_Default_ (this),
        SimClassification_ClassificationReference_OrganizationalBillingID_ (this),
        SimClassification_ClassificationReference_OrganizationalID_ (this),
        SimClassification_ClassificationReference_SpaceByFunction_ (this),
        SimClassification_ClassificationReference_SpaceCategoryBoma_ (this),
        SimClassification_ClassificationReference_SpaceCategoryOwner_ (this),
        SimClassification_ClassificationReference_SpaceTypeOwner_ (this),
        SimClassification_ClassificationReference_SpatialZoneEnergyType_ (this),
        SimClassification_ClassificationReference_SpatialZoneSecurityLevel_ (this),
        SimClassification_ClassificationReference_SpatialZoneType_ (this),
        SimClassification_ClassificationReference_SubOrganizationalID_ (this),
        SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_ (this),
        SimClassification_ClassificationSystem_Default_ (this),
        SimClassification_ClassificationSystem_MasterFormat_ (this),
        SimClassification_ClassificationSystem_OmniClass_ (this),
        SimClassification_ClassificationSystem_OwnerOrganizationalClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_ (this),
        SimClassification_ClassificationSystem_OwnerZoneTypeClassification_ (this),
        SimClassification_ClassificationSystem_Uniformat_ (this),
        SimColumn_Embedded_Default_ (this),
        SimColumn_Freestanding_Default_ (this),
        SimColumnParams_Column_Default_ (this),
        SimColumnType_Column_Default_ (this),
        SimComplexProperty_ComplexProp_Default_ (this),
        SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_ (this),
        SimCompositeProfileDef_CompositeProfile_Default_ (this),
        SimConnectCurveGeom_Curve_Default_ (this),
        SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_ (this),
        SimConnectedFaceSet_ConnectedFaceSet_Default_ (this),
        SimConnectedFaceSet_ConnectedFaceSet_OpenShell_ (this),
        SimConnection_AirFlow_CrossSystem_ (this),
        SimConnection_AirFlow_Default_ (this),
        SimConnection_AirFlow_Linkage_ (this),
        SimConnection_AirFlowNetwork_Default_ (this),
        SimConnection_ChilledWaterFlow_CrossSystem_ (this),
        SimConnection_ChilledWaterFlow_Default_ (this),
        SimConnection_CondenserFlow_CrossSystem_ (this),
        SimConnection_CondenserFlow_Default_ (this),
        SimConnection_Default_Default_ (this),
        SimConnection_DigitalControl_Default_ (this),
        SimConnection_Docking_Default_ (this),
        SimConnection_ElectricalPowerFlow_Default_ (this),
        SimConnection_HotWaterFlow_CrossSystem_ (this),
        SimConnection_HotWaterFlow_Default_ (this),
        SimConnection_MixedWaterFlow_CrossSystem_ (this),
        SimConnection_MixedWaterFlow_Default_ (this),
        SimConnection_RefrigerantFlow_Default_ (this),
        SimConnection_ServiceHotWaterFlow_CrossSystem_ (this),
        SimConnection_ServiceHotWaterFlow_Default_ (this),
        SimConnection_SteamFlow_CrossSystem_ (this),
        SimConnection_SteamFlow_Default_ (this),
        SimConnection_VarRefrigerantFlow_Default_ (this),
        SimConnection_ZoneAirFlow_Default_ (this),
        SimConnection_ZoneAirFlow_ZoneCrossMixing_ (this),
        SimConnection_ZoneAirFlow_ZoneMixing_ (this),
        SimConnectPointGeom_Point_Default_ (this),
        SimConnectPortGeom_Port_Default_ (this),
        SimConnectSurfaceGeom_Surface_Default_ (this),
        SimController_AvailabilityManager_AirLoop_ (this),
        SimController_AvailabilityManager_PlantLoop_ (this),
        SimController_Daylighting_DELight_ (this),
        SimController_Daylighting_Skylights_ (this),
        SimController_Daylighting_Standard_ (this),
        SimController_Daylighting_Windows_ (this),
        SimController_Default_Default_ (this),
        SimController_DemandManager_AirLoop_ (this),
        SimController_LightingControl_Continuous_ (this),
        SimController_LightingControl_ContinuousOff_ (this),
        SimController_LightingControl_MotionSensor_ (this),
        SimController_LightingControl_On_Off_ (this),
        SimController_LightingControl_Stepped_ (this),
        SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_ (this),
        SimController_OperationManager_CondenserLoop_ (this),
        SimController_OperationManager_PlantLoop_ (this),
        SimController_OutdoorAir_EconomizerControl_ (this),
        SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_ (this),
        SimController_OutdoorAir_OutdoorAirPreconditioningController_ (this),
        SimController_Programmable_Default_ (this),
        SimController_ShadingControl_Heating_CoolingLoads_ (this),
        SimController_ShadingControl_On_Off_ (this),
        SimController_ShadingControl_WindowTemp_Solar_ (this),
        SimController_SupplyAir_Humidity_ (this),
        SimController_SupplyAir_Temperature_ (this),
        SimController_SupplyWater_Temperature_ (this),
        SimController_ThermalStorage_ThermalEnergyStorageTank_ (this),
        SimController_Ventilation_ContaminantControl_ (this),
        SimController_WaterCoil_Default_ (this),
        SimController_ZoneControlHumidity_Humidistat_ (this),
        SimController_ZoneControlHumidity_Humidistat1Zone_ (this),
        SimController_ZoneControlTemperature_Thermostat_ (this),
        SimController_ZoneControlTemperature_Thermostat1Zone_ (this),
        SimController_ZoneControlTemperature_ThermostatStagedDual_ (this),
        SimController_ZoneControlTemperature_ThermostatThermalComfort_ (this),
        SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_ (this),
        SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_ (this),
        SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_ (this),
        SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_ (this),
        SimControlScheme_AvailabilityManagerScheme_HybridVentilation_ (this),
        SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_ (this),
        SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_ (this),
        SimControlScheme_AvailabilityManagerScheme_NightCycle_ (this),
        SimControlScheme_AvailabilityManagerScheme_NightVentilation_ (this),
        SimControlScheme_AvailabilityManagerScheme_OptimumStart_ (this),
        SimControlScheme_AvailabilityManagerScheme_Scheduled_ (this),
        SimControlScheme_AvailabilityManagerScheme_ScheduledOff_ (this),
        SimControlScheme_AvailabilityManagerScheme_ScheduledOn_ (this),
        SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_ (this),
        SimControlScheme_ControlAndSequencingScheme_CoolingLoad_ (this),
        SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_ (this),
        SimControlScheme_ControlAndSequencingScheme_HeatingLoad_ (this),
        SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_ (this),
        SimControlScheme_ControlAndSequencingScheme_Uncontrolled_ (this),
        SimControlScheme_ControlAndSequencingScheme_UserDefined_ (this),
        SimControlScheme_DemandManagerScheme_ElectricEquipment_ (this),
        SimControlScheme_DemandManagerScheme_ExteriorLights_ (this),
        SimControlScheme_DemandManagerScheme_Lights_ (this),
        SimControlScheme_DemandManagerScheme_Thermostats_ (this),
        SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_ (this),
        SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_ (this),
        SimControlScheme_EnergyManagementScheme_GlobalVairable_ (this),
        SimControlScheme_EnergyManagementScheme_InternalVariable_ (this),
        SimControlScheme_EnergyManagementScheme_OutputVariable_ (this),
        SimControlScheme_EnergyManagementScheme_Program_ (this),
        SimControlScheme_EnergyManagementScheme_ProgramCallingManager_ (this),
        SimControlScheme_EnergyManagementScheme_Subroutine_ (this),
        SimControlScheme_EnergyManagementScheme_TrendVariable_ (this),
        SimControlScheme_ExternalInterfaceExport_FromVariable_ (this),
        SimControlScheme_ExternalInterfaceExport_ToActuator_ (this),
        SimControlScheme_ExternalInterfaceExport_ToSchedule_ (this),
        SimControlScheme_ExternalInterfaceExport_ToVariable_ (this),
        SimControlScheme_ExternalInterfaceImport_Default_ (this),
        SimControlScheme_ExternalInterfaceImport_FromVariable_ (this),
        SimControlScheme_ExternalInterfaceImport_ToActuator_ (this),
        SimControlScheme_ExternalInterfaceImport_ToSchedule_ (this),
        SimControlScheme_ExternalInterfaceImport_ToVariable_ (this),
        SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_ (this),
        SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_ (this),
        SimControlScheme_OperatingScheme_UncontrolledOperationScheme_ (this),
        SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_ (this),
        SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_ (this),
        SimControlScheme_SetpointManagerScheme_ColdestZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_DuctStaticPressure_ (this),
        SimControlScheme_SetpointManagerScheme_EnteringReset_ (this),
        SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_ (this),
        SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_ (this),
        SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_ (this),
        SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_ (this),
        SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_MixedAir_ (this),
        SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_ (this),
        SimControlScheme_SetpointManagerScheme_OutdoorAirReset_ (this),
        SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_ (this),
        SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_ (this),
        SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_ (this),
        SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_ (this),
        SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Heating_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_ (this),
        SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_ (this),
        SimControlScheme_SetpointManagerScheme_WarmestZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_ (this),
        SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_ (this),
        SimControlScheme_SetpointScheme_DualSetpoint_ (this),
        SimControlScheme_SetpointScheme_SingleCooling_ (this),
        SimControlScheme_SetpointScheme_SingleHeating_ (this),
        SimControlScheme_SetpointScheme_SingleHeatingOrCooling_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_ (this),
        SimCost_ComponentCost_Adjustments_ (this),
        SimCost_ComponentCost_LineItem_ (this),
        SimCost_ComponentCost_Reference_ (this),
        SimCost_Default_Default_ (this),
        SimCost_LifeCycleCost_NonrecurringCost_ (this),
        SimCost_LifeCycleCost_Parameters_ (this),
        SimCost_LifeCycleCost_RecurringCosts_ (this),
        SimCost_LifeCycleCost_UseAdjustment_ (this),
        SimCost_LifeCycleCost_UsePriceEscalation_ (this),
        SimCost_UtilityCost_ChargeBlock_ (this),
        SimCost_UtilityCost_ChargeSimple_ (this),
        SimCost_UtilityCost_CostRatchet_ (this),
        SimCost_UtilityCost_CostVariable_ (this),
        SimCost_UtilityCost_Qualify_ (this),
        SimCost_UtilityCost_Tariff_ (this),
        SimCurtainWall_CurtainWall_Default_ (this),
        SimCurtainWallParams_CurtainWall_Default_ (this),
        SimCurtainWallType_CurtainWall_Default_ (this),
        SimCurveStyle_CurveStyle_Default_ (this),
        SimCurveStyle_CurveStyle_Font_ (this),
        SimCurveStyle_CurveStyle_FontAndScaling_ (this),
        SimCurveStyle_CurveStyle_FontPattern_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightShelf_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightTube_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightWell_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_ (this),
        SimDerivedUnitType_DerivedUnit_Default_ (this),
        SimDistributionPort_AirFlowPort_Air_In_ (this),
        SimDistributionPort_AirFlowPort_Air_InOrOut_ (this),
        SimDistributionPort_AirFlowPort_Air_Out_ (this),
        SimDistributionPort_AirFlowPort_Default_ (this),
        SimDistributionPort_AirFlowPort_ExhaustAir_Out_ (this),
        SimDistributionPort_AirFlowPort_OutdoorAir_In_ (this),
        SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Default_ (this),
        SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Water_In_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_In_ (this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_ (this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_ (this),
        SimDistributionPort_CondenserFlowPort_Default_ (this),
        SimDistributionPort_DigitalControl_AirLoop_Default_ (this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_CWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_HWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_Default_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_STMLoop_Default_ (this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_Default_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControlPort_Default_ (this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControlPort_DigitalVirtual_ (this),
        SimDistributionPort_DistributionPort_Default_ (this),
        SimDistributionPort_ElectricalFlowPort_Default_ (this),
        SimDistributionPort_ElectricalFlowPort_Electrical_In_ (this),
        SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_ (this),
        SimDistributionPort_ElectricalFlowPort_Electrical_Out_ (this),
        SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_ (this),
        SimDistributionPort_HotWaterFlowPort_Default_ (this),
        SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_ (this),
        SimDistributionPort_HotWaterFlowPort_Water_In_ (this),
        SimDistributionPort_HotWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_HotWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_ (this),
        SimDistributionPort_MixedWaterFlowPort_Default_ (this),
        SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_ (this),
        SimDistributionPort_MixedWaterFlowPort_Water_In_ (this),
        SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_MixedWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_RefrigerationFlowPort_Default_ (this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_ (this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_ (this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Default_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_In_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_SteamFlowPort_Default_ (this),
        SimDistributionPort_SteamFlowPort_Steam_In_ (this),
        SimDistributionPort_SteamFlowPort_Steam_InOrOut_ (this),
        SimDistributionPort_SteamFlowPort_Steam_Out_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_Default_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_In_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_ (this),
        SimDistributionPort_ZoneAirFlowPort_Air_In_ (this),
        SimDistributionPort_ZoneAirFlowPort_Air_Out_ (this),
        SimDoor_Default_Default_ (this),
        SimDoor_GlazedDoor_Exterior_ (this),
        SimDoor_GlazedDoor_ExteriorDetailed_ (this),
        SimDoor_GlazedDoor_Interior_ (this),
        SimDoor_OpaqueDoor_Exterior_ (this),
        SimDoor_OpaqueDoor_ExteriorDetailed_ (this),
        SimDoor_OpaqueDoor_Interior_ (this),
        SimDoorArrayParams_DoorArray_Default_ (this),
        SimDoorLiningProps_DoorLiningProps_Default_ (this),
        SimDoorPanelProps_DoorPanelProps_Default_ (this),
        SimDoorParams_Door_Default_ (this),
        SimDoorType_Door_Default_ (this),
        SimDwgXrefParams_DwgXref_Default_ (this),
        SimEdge_Edge_EdgeCurve_ (this),
        SimEdge_Edge_OrientedEdge_ (this),
        SimEdge_Edge_Subedge_ (this),
        SimElementQuantity_ElementQuantity_Default_ (this),
        SimExtendedMaterialProps_ExtendedMatlProps_Default_ (this),
        SimExternalReference_Default_Default_ (this),
        SimExternalReference_DocumentReference_Default_ (this),
        SimExternalReference_ExternalReference_Default_ (this),
        SimExternalReference_LibraryReference_Default_ (this),
        SimExternalReference_PropertyReference_Default_ (this),
        SimFace_Face_Default_ (this),
        SimFace_Face_FaceSurface_ (this),
        SimFaceBound_FaceBound_Default_ (this),
        SimFaceBound_FaceBound_FaceOuterBound_ (this),
        SimFeatureAirFlowNetwork_Default_Default_ (this),
        SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_ (this),
        SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_ (this),
        SimFeatureAirFlowNetwork_Opening_Default_ (this),
        SimFeatureAirFlowNetwork_Opening_Detailed_ (this),
        SimFeatureAirFlowNetwork_Opening_Horizontal_ (this),
        SimFeatureAirFlowNetwork_Opening_Simple_ (this),
        SimFeatureAirFlowNetwork_Surface_Default_ (this),
        SimFeatureAirFlowNetwork_SurfaceCrack_Default_ (this),
        SimFeatureAirFlowNetwork_Zone_Default_ (this),
        SimFeatureElementAddition_ProjectionElement_Default_ (this),
        SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_ (this),
        SimFeatureElementSubtraction_EdgeFeature_Default_ (this),
        SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_ (this),
        SimFeatureElementSubtraction_SlotFeature_Default_ (this),
        SimFeatureElementSubtraction_Void_Opening_ (this),
        SimFlowCompoundEqmt_DistrictSupply_Cooling_ (this),
        SimFlowCompoundEqmt_DistrictSupply_Heating_ (this),
        SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_ (this),
        SimFlowCompoundEqmt_PurchasedSupply_Cooling_ (this),
        SimFlowCompoundEqmt_PurchasedSupply_Heating_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_ (this),
        SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_ (this),
        SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_ (this),
        SimFlowController_Damper_Default_ (this),
        SimFlowController_Damper_Exhaust_ (this),
        SimFlowController_Damper_FaceBypass_ (this),
        SimFlowController_Damper_MixedAir_ (this),
        SimFlowController_Damper_OutsideAir_ (this),
        SimFlowController_Damper_Recirculation_ (this),
        SimFlowController_Damper_Relief_ (this),
        SimFlowController_Default_Default_ (this),
        SimFlowController_ElectricalSwitch_On_Off_ (this),
        SimFlowController_ElectricalSwitch_Variable_ (this),
        SimFlowController_Valve_Default_ (this),
        SimFlowController_Valve_EMSValve_ (this),
        SimFlowController_Valve_NonReturnValve_ (this),
        SimFlowController_Valve_TemperingValve_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Electric_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Water_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_ (this),
        SimFlowEnergyTransfer_Dehumidifier_Default_ (this),
        SimFlowEnergyTransfer_Dehumidifier_NoFans_ (this),
        SimFlowEnergyTransfer_Economizer_AirToAir_ (this),
        SimFlowEnergyTransfer_Electrical_Transformer_ (this),
        SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_ (this),
        SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_ (this),
        SimFlowEnergyTransfer_ElectricalInverter_Simple_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_ (this),
        SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_ (this),
        SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_ (this),
        SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_ (this),
        SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_ (this),
        SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_ (this),
        SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_ (this),
        SimFlowEnergyTransfer_HeatExEarthToWater_Surface_ (this),
        SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_ (this),
        SimFlowEnergyTransfer_HeatExWaterToWater_Pond_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_ (this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_ (this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_ (this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_ (this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_ (this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_ (this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_ (this),
        SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_ (this),
        SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_ (this),
        SimFlowEnergyTransfer_Humidifier_ElectricSteam_ (this),
        SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_ (this),
        SimFlowEnergyTransfer_RadiantDevice_Beam_ (this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_ (this),
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_ (this),
        SimFlowEnergyTransfer_RadiantDevice_HighTemp_ (this),
        SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_ (this),
        SimFlowEnergyTransfer_RadiantDevice_Slab_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_Mixed_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_Stratified_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_ (this),
        SimFlowFitting_Default_Default_ (this),
        SimFlowFitting_Difusser_Default_ (this),
        SimFlowFitting_Electrical_Transformer_ (this),
        SimFlowFitting_FlowElementProxy_Default_ (this),
        SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_ (this),
        SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_ (this),
        SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_ (this),
        SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_ (this),
        SimFlowFitting_Mixer_AirMixer_ (this),
        SimFlowFitting_Mixer_AirMixerOutdoor_ (this),
        SimFlowFitting_Mixer_AirMixerZoneReturn_ (this),
        SimFlowFitting_Mixer_CondenserMixer_ (this),
        SimFlowFitting_Mixer_DemandProxyMixer_ (this),
        SimFlowFitting_Mixer_DemandProxyMixerAir_ (this),
        SimFlowFitting_Mixer_DemandProxyMixerWater_ (this),
        SimFlowFitting_Mixer_SteamMixer_ (this),
        SimFlowFitting_Mixer_WaterMixer_ (this),
        SimFlowFitting_Splitter_AirSplitter_ (this),
        SimFlowFitting_Splitter_AirSplitterZoneSupply_ (this),
        SimFlowFitting_Splitter_CondenserSplitter_ (this),
        SimFlowFitting_Splitter_DemandProxySplitter_ (this),
        SimFlowFitting_Splitter_DemandProxySplitterAir_ (this),
        SimFlowFitting_Splitter_DemandProxySplitterWater_ (this),
        SimFlowFitting_Splitter_SteamSplitter_ (this),
        SimFlowFitting_Splitter_WaterSplitter_ (this),
        SimFlowMover_Default_Default_ (this),
        SimFlowMover_Fan_NightVentilation_ (this),
        SimFlowMover_Fan_Relief_ (this),
        SimFlowMover_Fan_ZoneExhaust_ (this),
        SimFlowMover_Pump_ConstantSpeedReturn_ (this),
        SimFlowMover_Pump_ConstantSpeedSupply_ (this),
        SimFlowMover_Pump_UserDefined_ (this),
        SimFlowMover_Pump_VariableSpeedReturn_ (this),
        SimFlowMover_Pump_VariableSpeedSupply_ (this),
        SimFlowMover_Pump_VarSpeedCondensateReturn_ (this),
        SimFlowMover_Pump_VarSpeedCondensateSupply_ (this),
        SimFlowMover_PumpSet_ConstantSpeed2_ (this),
        SimFlowMover_PumpSet_ConstantSpeed3_ (this),
        SimFlowMover_PumpSet_VariableSpeed2_ (this),
        SimFlowMover_PumpSet_VariableSpeed3_ (this),
        SimFlowMover_ReturnFan_ComponentModel_ (this),
        SimFlowMover_ReturnFan_ConstantVolume_ (this),
        SimFlowMover_ReturnFan_OnOff_ (this),
        SimFlowMover_ReturnFan_VariableVolume_ (this),
        SimFlowMover_SupplyFan_ComponentModel_ (this),
        SimFlowMover_SupplyFan_ConstantVolume_ (this),
        SimFlowMover_SupplyFan_OnOff_ (this),
        SimFlowMover_SupplyFan_VariableVolume_ (this),
        SimFlowPlant_Boiler_BoilerHotWater_ (this),
        SimFlowPlant_Boiler_BoilerSteam_ (this),
        SimFlowPlant_Boiler_UserDefined_ (this),
        SimFlowPlant_Chiller_Absorption_ (this),
        SimFlowPlant_Chiller_AbsorptionIndirect_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_ (this),
        SimFlowPlant_Chiller_UserDefined_ (this),
        SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_ (this),
        SimFlowPlant_ChillerHeater_AbsorptionDirectFired_ (this),
        SimFlowPlant_ChillerHeater_PerformanceElectricEIR_ (this),
        SimFlowPlant_CoolingTower_SingleSpeed_ (this),
        SimFlowPlant_CoolingTower_TwoSpeed_ (this),
        SimFlowPlant_CoolingTower_UserDefined_ (this),
        SimFlowPlant_CoolingTower_VariableSpeed_ (this),
        SimFlowPlant_CoolingTower_VariableSpeed_Merkel_ (this),
        SimFlowPlant_ElectricalGenerator_CombustionTurbine_ (this),
        SimFlowPlant_ElectricalGenerator_DefaultGenerator_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCell_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellInverter_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_ (this),
        SimFlowPlant_ElectricalGenerator_FuelEquipment_ (this),
        SimFlowPlant_ElectricalGenerator_FuelSupply_ (this),
        SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_ (this),
        SimFlowPlant_ElectricalGenerator_MicroCHP_ (this),
        SimFlowPlant_ElectricalGenerator_MicroTurbine_ (this),
        SimFlowPlant_ElectricalGenerator_Photovoltaic_ (this),
        SimFlowPlant_ElectricalGenerator_WindTurbine_ (this),
        SimFlowPlant_HeatAndPower_Default_ (this),
        SimFlowPlant_HeatExWaterToWater_Pond_ (this),
        SimFlowPlant_HeatPump_AirToAir_ (this),
        SimFlowPlant_HeatPump_AirToAir_MultiSpeed_ (this),
        SimFlowPlant_HeatPump_CentralSystem_ (this),
        SimFlowPlant_HeatPump_GroundSource_ (this),
        SimFlowPlant_HeatPump_WaterToAir_ (this),
        SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_ (this),
        SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_ (this),
        SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_ (this),
        SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_ (this),
        SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_ (this),
        SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_ (this),
        SimFlowPlant_SolarDevice_SolarPhotoVoltaic_ (this),
        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_ (this),
        SimFlowPlant_SolarDevice_SolarThermalAir_ (this),
        SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_ (this),
        SimFlowPlant_SolarDevice_SolarThermalWater_ (this),
        SimFlowSegment_Default_Default_ (this),
        SimFlowSegment_Duct_AirFlowNetworkDistribution_ (this),
        SimFlowSegment_Duct_Default_ (this),
        SimFlowSegment_Filter_Bag_ (this),
        SimFlowSegment_Filter_Default_ (this),
        SimFlowSegment_Filter_Electrostatic_ (this),
        SimFlowSegment_Filter_HEPA_ (this),
        SimFlowSegment_Filter_Panel_ (this),
        SimFlowSegment_Grill_Return_ (this),
        SimFlowSegment_Grill_Supply_ (this),
        SimFlowSegment_Louver_Default_ (this),
        SimFlowSegment_Louver_Exhaust_ (this),
        SimFlowSegment_Louver_Intake_ (this),
        SimFlowSegment_Louver_Safety_ (this),
        SimFlowSegment_Louver_Ventilation_ (this),
        SimFlowSegment_Pipe_Adiabatic_ (this),
        SimFlowSegment_Pipe_Adiabatic_Steam_ (this),
        SimFlowSegment_Pipe_Indoor_ (this),
        SimFlowSegment_Pipe_Outdoor_ (this),
        SimFlowSegment_Pipe_Underground_ (this),
        SimFlowSegment_Pipe_UndergroundPipeCircuit_ (this),
        SimFlowSegment_Pipe_UndergroundPipeSegment_ (this),
        SimFlowSegment_Plenum_DedicatedReturn_ (this),
        SimFlowSegment_Plenum_DedicatedSupply_ (this),
        SimFlowSegment_Plenum_SharedReturn_ (this),
        SimFlowSegment_Plenum_SharedSupply_ (this),
        SimFlowSegment_VirtualComponent_ConstantPressureDrop_ (this),
        SimFlowSegment_VirtualComponent_Leak_ (this),
        SimFlowSegment_VirtualComponent_LeakageRatio_ (this),
        SimFlowSegment_Wire_Default_ (this),
        SimFlowStorage_ElectricalStorage_BatteryBank_ (this),
        SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_ (this),
        SimFlowStorage_WaterStorage_CleanWater_ (this),
        SimFlowStorage_WaterStorage_GrayWater_ (this),
        SimFlowStorage_WaterStorage_RainWater_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_ (this),
        SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_ (this),
        SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_ (this),
        SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_ (this),
        SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_ (this),
        SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_ (this),
        SimFlowTerminal_AirTerminal_InletSideMixer_ (this),
        SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_ (this),
        SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_ (this),
        SimFlowTerminal_AirTerminal_SingleDuctUserDefined_ (this),
        SimFlowTerminal_AirTerminal_SupplySideMixer_ (this),
        SimFlowTerminal_AirTerminal_Uncontrolled_ (this),
        SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_NoReheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_Reheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_ (this),
        SimFlowTerminal_Default_Default_ (this),
        SimFlowTerminal_ElectricalTerminalExterior_Default_ (this),
        SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_ (this),
        SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_ (this),
        SimFlowTerminal_ElectricalTerminalInterior_Default_ (this),
        SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_ (this),
        SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_ (this),
        SimFlowTerminal_PlumbingTerminal_DishWasher_ (this),
        SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_ (this),
        SimFlowTerminal_PlumbingTerminal_PlumbingFixture_ (this),
        SimFlowTerminal_PlumbingTerminal_Shower_ (this),
        SimFlowTerminal_PlumbingTerminal_Sink_ (this),
        SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_ (this),
        SimFlowTerminal_PlumbingTerminal_Toilet_ (this),
        SimFlowTerminal_PlumbingTerminal_Urinal_ (this),
        SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_ (this),
        SimFluid_Concentration_Default_ (this),
        SimFluid_Default_Default_ (this),
        SimFluid_GlycolConcentration_Default_ (this),
        SimFluid_Name_Default_ (this),
        SimFluid_Saturated_Default_ (this),
        SimFluid_SuperHeated_Default_ (this),
        SimFluid_Temperatures_Default_ (this),
        SimFrameAndDividerProps_FrameAndDivider_Default_ (this),
        SimFurnishingElement_Default_Default_ (this),
        SimFurnishingElementType_Furnishing_Default_ (this),
        SimFurnishingElementType_Furniture_Default_ (this),
        SimFurnitureType_Furniture_Default_ (this),
        SimGeomBooleanResult_BooleanClippingResult_Default_ (this),
        SimGeomBooleanResult_BooleanResult_Default_ (this),
        SimGeomBoundingBox_BoundingBox_Default_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_Block_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_ (this),
        SimGeomCurve_2DCompositeCurve_Default_ (this),
        SimGeomCurve_BoundedCurve_Default_ (this),
        SimGeomCurve_Circle_Default_ (this),
        SimGeomCurve_CompositeCurve_Default_ (this),
        SimGeomCurve_CompositeCurveSegment_Default_ (this),
        SimGeomCurve_Ellipse_Default_ (this),
        SimGeomCurve_Line_Default_ (this),
        SimGeomCurve_OffsetCurve2D_Default_ (this),
        SimGeomCurve_OffsetCurve3D_Default_ (this),
        SimGeomCurve_Polyline_Default_ (this),
        SimGeomCurve_TrimmedCurve_Default_ (this),
        SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_ (this),
        SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_ (this),
        SimGeomPoint_Point_CartesianPoint_ (this),
        SimGeomPoint_Point_PointOnCurve_ (this),
        SimGeomPoint_Point_PointOnSurface_ (this),
        SimGeomSet_GeometricCurveSet_Default_ (this),
        SimGeomSet_GeometricSet_Default_ (this),
        SimGeomSolidModel_CSGSolid_Default_ (this),
        SimGeomSolidModel_FacetedBrep_Default_ (this),
        SimGeomSolidModel_FacetedBrepWithVoids_Default_ (this),
        SimGeomSolidModel_ManifoldSolidBrep_Default_ (this),
        SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_ (this),
        SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_ (this),
        SimGeomSolidModel_SweptDiskSolid_Default_ (this),
        SimGeomSurface_BoundedSurface_CurveBoundedPlane_ (this),
        SimGeomSurface_BoundedSurface_Default_ (this),
        SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_ (this),
        SimGeomSurface_Default_Default_ (this),
        SimGeomSurface_ElementarySurface_Default_ (this),
        SimGeomSurface_ElementarySurface_Plane_ (this),
        SimGeomSurface_SweptSurface_Default_ (this),
        SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_ (this),
        SimGeomSurface_SweptSurface_SurfaceOfRevolution_ (this),
        SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_ (this),
        SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_ (this),
        SimGeomVector_Vector_Default_ (this),
        SimGeomVector_Vector_Direction_ (this),
        SimGlazingPanelParams_GlazingPanel_Glazing_ (this),
        SimGridAxis_GridAxis_Default_ (this),
        SimGridPlacement_GridPlacement_Default_ (this),
        SimGroundHeatTransferBasement_BasementTransferModel_Default_ (this),
        SimGroundHeatTransferSlab_SlabTransferModel_Default_ (this),
        SimGroup_BldgCompGroup_AirTerminal_ (this),
        SimGroup_BldgCompGroup_Coil_ (this),
        SimGroup_BldgCompGroup_Default_ (this),
        SimGroup_BldgCompGroup_Sensor_ (this),
        SimGroup_BldgCompGroup_ZoneController_ (this),
        SimGroup_BldgCompGroup_ZoneEquipment_ (this),
        SimGroup_BldgElementGroup_Default_ (this),
        SimGroup_BuildingGroup_Default_ (this),
        SimGroup_ConnectorList_AirConnections_ (this),
        SimGroup_ConnectorList_ChilledWaterConnections_ (this),
        SimGroup_ConnectorList_CondenserConnections_ (this),
        SimGroup_ConnectorList_ControllerConnections_ (this),
        SimGroup_ConnectorList_HotWaterConnections_ (this),
        SimGroup_ConnectorList_ServiceHotWaterConnections_ (this),
        SimGroup_ConnectorList_SimConnections_ (this),
        SimGroup_ConnectorList_SteamConnections_ (this),
        SimGroup_ControllerList_Default_ (this),
        SimGroup_DefaultGroup_Default_ (this),
        SimGroup_DefaultList_Default_ (this),
        SimGroup_EquipmentList_CondenserEquipment_ (this),
        SimGroup_EquipmentList_ElectricalLoadCenter_ (this),
        SimGroup_EquipmentList_OutdoorAirSystem_ (this),
        SimGroup_EquipmentList_OutdoorAirUnit_ (this),
        SimGroup_EquipmentList_PlantEquipment_ (this),
        SimGroup_EquipmentList_RefrigerationCompressor_ (this),
        SimGroup_EquipmentList_RefrigerationEquipment_ (this),
        SimGroup_EquipmentList_RefrigerationLoadTransfer_ (this),
        SimGroup_EquipmentList_ServiceHotWater_ (this),
        SimGroup_EquipmentList_ZoneHvac_ (this),
        SimGroup_HvacDemandGroup_AirSystem_ (this),
        SimGroup_HvacDemandGroup_RefrigerationSystem_ (this),
        SimGroup_HvacDemandGroup_WaterSystem_ (this),
        SimGroup_MaterialList_Default_ (this),
        SimGroup_NodeList_Default_ (this),
        SimGroup_NodeList_OutdoorAir_ (this),
        SimGroup_OutputRequestList_Daylighting_ (this),
        SimGroup_OutputRequestList_Environmental_ (this),
        SimGroup_OutputRequestList_Fuel_ (this),
        SimGroup_OutputRequestList_Geometry_ (this),
        SimGroup_OutputRequestList_Meters_ (this),
        SimGroup_OutputRequestList_Reports_ (this),
        SimGroup_OutputRequestList_Variables_ (this),
        SimGroup_Refrigeration_ChillerSet_ (this),
        SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_ (this),
        SimGroup_SchemeList_AirTempControlScheme_ (this),
        SimGroup_SchemeList_CondenserOperatingScheme_ (this),
        SimGroup_SchemeList_DemandManagerScheme_ (this),
        SimGroup_SchemeList_MultiZoneHumidityScheme_ (this),
        SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_ (this),
        SimGroup_SchemeList_PlantOperatingScheme_ (this),
        SimGroup_SchemeList_SingleZoneHumidityScheme_ (this),
        SimGroup_SchemeList_WaterTempControlScheme_ (this),
        SimGroup_SpatialZoneGroup_Daylighting_ (this),
        SimGroup_SpatialZoneGroup_Lighting_ (this),
        SimGroup_SpatialZoneGroup_NaturalVentilation_ (this),
        SimGroup_SpatialZoneGroup_PlenumZoneGroup_ (this),
        SimGroup_SpatialZoneGroup_ServiceHotWater_ (this),
        SimGroup_SpatialZoneGroup_ZoneGroup_ (this),
        SimGroup_SpatialZoneGroup_ZoneHvacGroup_ (this),
        SimGroup_SurfaceGroup_Default_ (this),
        SimGroup_SurfaceGroup_LowTempRadiant_ (this),
        SimGroup_SurfaceGroup_VentilatedSlab_ (this),
        SimGroup_TemplateOutputRequestList_Daylighting_ (this),
        SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_ (this),
        SimGroup_TemplateOutputRequestList_Geometry_ (this),
        SimGroup_TemplateOutputRequestList_Meters_ (this),
        SimGroup_TemplateOutputRequestList_Reports_ (this),
        SimGroup_TemplateOutputRequestList_Variables_ (this),
        SimGroup_VrfList_VrfTerminals_ (this),
        SimHeatTransAlgProps_HeatTransferAlgProps_Default_ (this),
        SimInfiltrationOrVentilation_Default_Default_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_Default_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_ (this),
        SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_ (this),
        SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_ (this),
        SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_ (this),
        SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_ (this),
        SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_ (this),
        SimInternalLoad_ComfortViewFactorAngles_Default_ (this),
        SimInternalLoad_Default_Default_ (this),
        SimInternalLoad_Equipment_Electric_ (this),
        SimInternalLoad_Equipment_Electric_Elevators_ (this),
        SimInternalLoad_Equipment_Electric_Escalators_ (this),
        SimInternalLoad_Equipment_Electric_Process_ (this),
        SimInternalLoad_Equipment_Gas_ (this),
        SimInternalLoad_Equipment_Gas_Process_ (this),
        SimInternalLoad_Equipment_HotWater_ (this),
        SimInternalLoad_Equipment_Other_ (this),
        SimInternalLoad_Equipment_Steam_ (this),
        SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_ (this),
        SimInternalLoad_Lights_Default_ (this),
        SimInternalLoad_People_Default_ (this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_ (this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_ (this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_ (this),
        SimIrregularTimeSeries_Irregular_Default_ (this),
        SimIrregularTimeSeriesValue_TimeSeries_Irregular_ (this),
        SimLightingFixtureType_LightingFixture_Default_ (this),
        SimList_ConnectorList_AirConnections_ (this),
        SimList_ConnectorList_ChilledWaterConnections_ (this),
        SimList_ConnectorList_CondenserConnections_ (this),
        SimList_ConnectorList_ControllerConnections_ (this),
        SimList_ConnectorList_HotWaterConnections_ (this),
        SimList_ConnectorList_ServiceHotWaterConnections_ (this),
        SimList_ConnectorList_SimConnections_ (this),
        SimList_ConnectorList_SteamConnections_ (this),
        SimList_ControllerList_Default_ (this),
        SimList_DefaultList_Default_ (this),
        SimList_EquipmentList_CondenserEquipment_ (this),
        SimList_EquipmentList_ElectricalLoadCenter_ (this),
        SimList_EquipmentList_OutdoorAirSystem_ (this),
        SimList_EquipmentList_OutdoorAirUnit_ (this),
        SimList_EquipmentList_PlantEquipment_ (this),
        SimList_EquipmentList_RefrigerationCompressor_ (this),
        SimList_EquipmentList_RefrigerationEquipment_ (this),
        SimList_EquipmentList_RefrigerationLoadTransfer_ (this),
        SimList_EquipmentList_ServiceHotWater_ (this),
        SimList_EquipmentList_ZoneHvac_ (this),
        SimList_MaterialList_Default_ (this),
        SimList_NodeList_Default_ (this),
        SimList_NodeList_OutdoorAir_ (this),
        SimList_OutputRequestList_Daylighting_ (this),
        SimList_OutputRequestList_Environmental_ (this),
        SimList_OutputRequestList_Fuel_ (this),
        SimList_OutputRequestList_Geometry_ (this),
        SimList_OutputRequestList_Meters_ (this),
        SimList_OutputRequestList_Reports_ (this),
        SimList_OutputRequestList_Variables_ (this),
        SimList_Refrigeration_ChillerSet_ (this),
        SimList_SchemeList_AirLoopAvailabilityMgrScheme_ (this),
        SimList_SchemeList_AirTempControlScheme_ (this),
        SimList_SchemeList_CondenserOperatingScheme_ (this),
        SimList_SchemeList_DemandManagerScheme_ (this),
        SimList_SchemeList_MultiZoneHumidityScheme_ (this),
        SimList_SchemeList_PlantLoopAvailabilityMgrScheme_ (this),
        SimList_SchemeList_PlantOperatingScheme_ (this),
        SimList_SchemeList_SingleZoneHumidityScheme_ (this),
        SimList_SchemeList_WaterTempControlScheme_ (this),
        SimList_TemplateOutputRequestList_Daylighting_ (this),
        SimList_TemplateOutputRequestList_FuelAndEnvironmental_ (this),
        SimList_TemplateOutputRequestList_Geometry_ (this),
        SimList_TemplateOutputRequestList_Meters_ (this),
        SimList_TemplateOutputRequestList_Reports_ (this),
        SimList_TemplateOutputRequestList_Variables_ (this),
        SimList_VrfList_VrfTerminals_ (this),
        SimLocalPlacement_LocalPlacement_AbsolutePlacement_ (this),
        SimLocalPlacement_LocalPlacement_RelativePlacement_ (this),
        SimLocationAndWeather_DesignDay_Default_ (this),
        SimLocationAndWeather_Location_Default_ (this),
        SimLocationAndWeather_WeatherFile_ConditionType_ (this),
        SimLocationAndWeather_WeatherFile_Days_ (this),
        SimLocationAndWeather_WeatherFile_WeatherStation_ (this),
        SimLocationAndWeather_WeatherProperty_SkyTemperature_ (this),
        SimLoop_Loop_EdgeLoop_ (this),
        SimLoop_Loop_PolyLoop_ (this),
        SimLoop_Loop_VertexLoop_ (this),
        SimMappedRepresentationItem_Default_Default_ (this),
        SimMaterial_Default_Default_ (this),
        SimMaterial_EquivGlazingMaterial_Blind_ (this),
        SimMaterial_EquivGlazingMaterial_Drape_ (this),
        SimMaterial_EquivGlazingMaterial_Gap_ (this),
        SimMaterial_EquivGlazingMaterial_Glazing_ (this),
        SimMaterial_EquivGlazingMaterial_Screen_ (this),
        SimMaterial_EquivGlazingMaterial_Shade_ (this),
        SimMaterial_GlazingMaterial_Blind_ (this),
        SimMaterial_GlazingMaterial_ComplexShade_ (this),
        SimMaterial_GlazingMaterial_Gap_ (this),
        SimMaterial_GlazingMaterial_Gas_ (this),
        SimMaterial_GlazingMaterial_GasMixture_ (this),
        SimMaterial_GlazingMaterial_Glazing_ (this),
        SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_ (this),
        SimMaterial_GlazingMaterial_Screen_ (this),
        SimMaterial_GlazingMaterial_Shade_ (this),
        SimMaterial_GlazingMaterial_SimpleGlazingSystem_ (this),
        SimMaterial_GlazingMaterial_Thermochromic_ (this),
        SimMaterial_OpaqueMaterial_AirGap_ (this),
        SimMaterial_OpaqueMaterial_Composite_ (this),
        SimMaterial_OpaqueMaterial_Default_ (this),
        SimMaterial_OpaqueMaterial_InfraredTransparent_ (this),
        SimMaterial_OpaqueMaterial_Insulation_ (this),
        SimMaterial_OpaqueMaterial_InsulationMovable_ (this),
        SimMaterial_OpaqueMaterial_NoMass_ (this),
        SimMaterial_OpaqueMaterial_Vegetation_ (this),
        SimMaterial_VirtualBoundary_Default_ (this),
        SimMaterialLayer_EquivGlazingLayer_Default_ (this),
        SimMaterialLayer_GlazingMaterialLayer_Default_ (this),
        SimMaterialLayer_OpaqueMaterialLayer_Default_ (this),
        SimMaterialLayer_VirtualBoundaryLayer_Default_ (this),
        SimMaterialLayerSet_Default_Default_ (this),
        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_ (this),
        SimMaterialLayerSet_GlazingLayerSet_CurtainWall_ (this),
        SimMaterialLayerSet_GlazingLayerSet_Default_ (this),
        SimMaterialLayerSet_GlazingLayerSet_GlassDoor_ (this),
        SimMaterialLayerSet_GlazingLayerSet_Window_ (this),
        SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_ (this),
        SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Ceiling_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Default_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Door_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Floor_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_InternalSource_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Landing_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Roof_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Wall_ (this),
        SimMeasureType_AreaMeasure_Default_ (this),
        SimMeasureType_CountMeasure_AirChangesPerhour_ (this),
        SimMeasureType_CountMeasure_Count_ (this),
        SimMeasureType_Default_Default_ (this),
        SimMeasureType_EnergyMeasure_Default_ (this),
        SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_ (this),
        SimMeasureType_EnergyMeasure_WattsPerPerson_ (this),
        SimMeasureType_LengthMeasure_Default_ (this),
        SimMeasureType_MassMeasure_Default_ (this),
        SimMeasureType_MonetaryMeasure_Default_ (this),
        SimMeasureType_PersonsPerAreaMeasure_Default_ (this),
        SimMeasureType_RatioMeasure_Default_ (this),
        SimMeasureType_RatioMeasure_PositiveRatioMeasure_ (this),
        SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_ (this),
        SimMeasureType_RotationalAngleMeasure_Degrees_ (this),
        SimMeasureType_ThermodynamicTemperatureMeasure_Default_ (this),
        SimMeasureType_VolumeMeasure_Default_ (this),
        SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_ (this),
        SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_ (this),
        SimMember_Default_Default_ (this),
        SimMemberParams_Member_Default_ (this),
        SimMemberProfileProperties_Beam_Default_ (this),
        SimMemberProfileProperties_Column_Default_ (this),
        SimMemberProfileProperties_Default_Default_ (this),
        SimModelRepresentationContext_GeometricRepresentationContext_Default_ (this),
        SimModelRepresentationContext_GeometricRepresentationSubContext_Default_ (this),
        SimModelRepresentationContext_RepresentationContext_Default_ (this),
        SimNode_AirflowNetworkNode_AirDistributionNode_ (this),
        SimNode_AirflowNetworkNode_ExternalNode_ (this),
        SimNode_AirflowNetworkNode_ZoneNode_ (this),
        SimNode_AirFlowPort_Air_In_ (this),
        SimNode_AirFlowPort_Air_InOrOut_ (this),
        SimNode_AirFlowPort_Air_Out_ (this),
        SimNode_AirFlowPort_Default_ (this),
        SimNode_AirFlowPort_ExhaustAir_Out_ (this),
        SimNode_AirFlowPort_OutdoorAir_In_ (this),
        SimNode_ChilledWaterFlowPort_CondensedWaterOut_ (this),
        SimNode_ChilledWaterFlowPort_Default_ (this),
        SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_ (this),
        SimNode_ChilledWaterFlowPort_Water_In_ (this),
        SimNode_ChilledWaterFlowPort_Water_InOrOut_ (this),
        SimNode_ChilledWaterFlowPort_Water_Out_ (this),
        SimNode_CondenserFlowPort_CondenserFlow_In_ (this),
        SimNode_CondenserFlowPort_CondenserFlow_InOrOut_ (this),
        SimNode_CondenserFlowPort_CondenserFlow_Out_ (this),
        SimNode_CondenserFlowPort_Default_ (this),
        SimNode_DaylightingReferencePoint_Default_ (this),
        SimNode_DigitalControl_AirLoop_Default_ (this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_CHWLoop_Default_ (this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_CWLoop_Default_ (this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_HWLoop_Default_ (this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_MxWLoop_Default_ (this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_RFGLoop_Default_ (this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_SHWLoop_Default_ (this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_STMLoop_Default_ (this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_VRFLoop_Default_ (this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControlPort_Default_ (this),
        SimNode_DigitalControlPort_DigitalSignal_In_ (this),
        SimNode_DigitalControlPort_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControlPort_DigitalSignal_Out_ (this),
        SimNode_DigitalControlPort_DigitalVirtual_ (this),
        SimNode_DistributionPort_Default_ (this),
        SimNode_Docking_Default_ (this),
        SimNode_Docking_ThermalZone_ (this),
        SimNode_ElectricalFlowPort_Default_ (this),
        SimNode_ElectricalFlowPort_Electrical_In_ (this),
        SimNode_ElectricalFlowPort_Electrical_InOrOut_ (this),
        SimNode_ElectricalFlowPort_Electrical_Out_ (this),
        SimNode_HotWaterFlowPort_CondensedWaterOut_ (this),
        SimNode_HotWaterFlowPort_Default_ (this),
        SimNode_HotWaterFlowPort_EvaporativeWaterIn_ (this),
        SimNode_HotWaterFlowPort_Water_In_ (this),
        SimNode_HotWaterFlowPort_Water_InOrOut_ (this),
        SimNode_HotWaterFlowPort_Water_Out_ (this),
        SimNode_MixedWaterFlowPort_CondensedWaterOut_ (this),
        SimNode_MixedWaterFlowPort_Default_ (this),
        SimNode_MixedWaterFlowPort_EvaporativeWaterIn_ (this),
        SimNode_MixedWaterFlowPort_Water_In_ (this),
        SimNode_MixedWaterFlowPort_Water_InOrOut_ (this),
        SimNode_MixedWaterFlowPort_Water_Out_ (this),
        SimNode_Node_Default_ (this),
        SimNode_Node_OutdoorAir_ (this),
        SimNode_Port_Default_ (this),
        SimNode_RefrigerationFlowPort_Default_ (this),
        SimNode_RefrigerationFlowPort_Refrigeration_In_ (this),
        SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_ (this),
        SimNode_RefrigerationFlowPort_Refrigeration_Out_ (this),
        SimNode_ServiceHotWaterFlowPort_Default_ (this),
        SimNode_ServiceHotWaterFlowPort_Water_In_ (this),
        SimNode_ServiceHotWaterFlowPort_Water_InOrOut_ (this),
        SimNode_ServiceHotWaterFlowPort_Water_Out_ (this),
        SimNode_SetpointNode_Default_ (this),
        SimNode_SteamFlowPort_Default_ (this),
        SimNode_SteamFlowPort_Steam_In_ (this),
        SimNode_SteamFlowPort_Steam_InOrOut_ (this),
        SimNode_SteamFlowPort_Steam_Out_ (this),
        SimNode_VarRefrigerantFlowPort_Default_ (this),
        SimNode_VarRefrigerantFlowPort_VRF_In_ (this),
        SimNode_VarRefrigerantFlowPort_VRF_InOrOut_ (this),
        SimNode_VarRefrigerantFlowPort_VRF_Out_ (this),
        SimNode_ZoneAirFlowPort_Air_In_ (this),
        SimNode_ZoneAirFlowPort_Air_Out_ (this),
        SimNode_ZoneAirNode_Default_ (this),
        SimObjectOutputRequestSet_Default_Default_ (this),
        SimOpeningType_Opening_Default_ (this),
        SimOrganization_Organization_Default_ (this),
        SimOwnerHistory_Default_Default_ (this),
        SimPanel_Default_Default_ (this),
        SimPanelArrayParams_PanelArrayParams_Default_ (this),
        SimPanelArrayParams_SolarShadeArray_Default_ (this),
        SimPanelParams_GlazingPanel_Glazing_ (this),
        SimPanelParams_PanelParams_Default_ (this),
        SimPanelParams_ShadePanel_SolarShading_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_C_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Circle_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Ellipse_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_I_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_L_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Rectangle_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_T_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_U_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_ (this),
        SimPerformanceCurve_Mathematical_Bicubic_ (this),
        SimPerformanceCurve_Mathematical_Biquadratic_ (this),
        SimPerformanceCurve_Mathematical_Cubic_ (this),
        SimPerformanceCurve_Mathematical_DoubleExponentialDecay_ (this),
        SimPerformanceCurve_Mathematical_Exponent_ (this),
        SimPerformanceCurve_Mathematical_ExponentialDecay_ (this),
        SimPerformanceCurve_Mathematical_ExponentialSkewNormal_ (this),
        SimPerformanceCurve_Mathematical_FanPressureRise_ (this),
        SimPerformanceCurve_Mathematical_Linear_ (this),
        SimPerformanceCurve_Mathematical_QuadLinear_ (this),
        SimPerformanceCurve_Mathematical_Quadratic_ (this),
        SimPerformanceCurve_Mathematical_QuadraticLinear_ (this),
        SimPerformanceCurve_Mathematical_Quartic_ (this),
        SimPerformanceCurve_Mathematical_RectangularHyperbola1_ (this),
        SimPerformanceCurve_Mathematical_RectangularHyperbola2_ (this),
        SimPerformanceCurve_Mathematical_Sigmoid_ (this),
        SimPerformanceCurve_Mathematical_TriQuadratic_ (this),
        SimPerformanceCurve_Relational_PressureDrop_ (this),
        SimPerformanceTable_Variable_MultiLookup_ (this),
        SimPerformanceTable_Variable_OneIndependent_ (this),
        SimPerformanceTable_Variable_TwoIndependent_ (this),
        SimPerson_Person_Default_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Architect_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Default_ (this),
        SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_ (this),
        SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Engineer_ (this),
        SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Owner_ (this),
        SimPlacement_Axis1Placement_Default_ (this),
        SimPlacement_Axis2Placement2D_Default_ (this),
        SimPlacement_Axis2Placement3D_Default_ (this),
        SimPort_AirFlowPort_Air_In_ (this),
        SimPort_AirFlowPort_Air_InOrOut_ (this),
        SimPort_AirFlowPort_Air_Out_ (this),
        SimPort_AirFlowPort_Default_ (this),
        SimPort_AirFlowPort_ExhaustAir_Out_ (this),
        SimPort_AirFlowPort_OutdoorAir_In_ (this),
        SimPort_ChilledWaterFlowPort_CondensedWaterOut_ (this),
        SimPort_ChilledWaterFlowPort_Default_ (this),
        SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_ (this),
        SimPort_ChilledWaterFlowPort_Water_In_ (this),
        SimPort_ChilledWaterFlowPort_Water_InOrOut_ (this),
        SimPort_ChilledWaterFlowPort_Water_Out_ (this),
        SimPort_CondenserFlowPort_CondenserFlow_In_ (this),
        SimPort_CondenserFlowPort_CondenserFlow_InOrOut_ (this),
        SimPort_CondenserFlowPort_CondenserFlow_Out_ (this),
        SimPort_CondenserFlowPort_Default_ (this),
        SimPort_DigitalControl_AirLoop_Default_ (this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_CHWLoop_Default_ (this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_CWLoop_Default_ (this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_HWLoop_Default_ (this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_MxWLoop_Default_ (this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_RFGLoop_Default_ (this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_SHWLoop_Default_ (this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_STMLoop_Default_ (this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_VRFLoop_Default_ (this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControlPort_Default_ (this),
        SimPort_DigitalControlPort_DigitalSignal_In_ (this),
        SimPort_DigitalControlPort_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControlPort_DigitalSignal_Out_ (this),
        SimPort_DigitalControlPort_DigitalVirtual_ (this),
        SimPort_DistributionPort_Default_ (this),
        SimPort_Docking_Default_ (this),
        SimPort_Docking_ThermalZone_ (this),
        SimPort_ElectricalFlowPort_Default_ (this),
        SimPort_ElectricalFlowPort_Electrical_In_ (this),
        SimPort_ElectricalFlowPort_Electrical_InOrOut_ (this),
        SimPort_ElectricalFlowPort_Electrical_Out_ (this),
        SimPort_HotWaterFlowPort_CondensedWaterOut_ (this),
        SimPort_HotWaterFlowPort_Default_ (this),
        SimPort_HotWaterFlowPort_EvaporativeWaterIn_ (this),
        SimPort_HotWaterFlowPort_Water_In_ (this),
        SimPort_HotWaterFlowPort_Water_InOrOut_ (this),
        SimPort_HotWaterFlowPort_Water_Out_ (this),
        SimPort_MixedWaterFlowPort_CondensedWaterOut_ (this),
        SimPort_MixedWaterFlowPort_Default_ (this),
        SimPort_MixedWaterFlowPort_EvaporativeWaterIn_ (this),
        SimPort_MixedWaterFlowPort_Water_In_ (this),
        SimPort_MixedWaterFlowPort_Water_InOrOut_ (this),
        SimPort_MixedWaterFlowPort_Water_Out_ (this),
        SimPort_Port_Default_ (this),
        SimPort_RefrigerationFlowPort_Default_ (this),
        SimPort_RefrigerationFlowPort_Refrigeration_In_ (this),
        SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_ (this),
        SimPort_RefrigerationFlowPort_Refrigeration_Out_ (this),
        SimPort_ServiceHotWaterFlowPort_Default_ (this),
        SimPort_ServiceHotWaterFlowPort_Water_In_ (this),
        SimPort_ServiceHotWaterFlowPort_Water_InOrOut_ (this),
        SimPort_ServiceHotWaterFlowPort_Water_Out_ (this),
        SimPort_SteamFlowPort_Default_ (this),
        SimPort_SteamFlowPort_Steam_In_ (this),
        SimPort_SteamFlowPort_Steam_InOrOut_ (this),
        SimPort_SteamFlowPort_Steam_Out_ (this),
        SimPort_VarRefrigerantFlowPort_Default_ (this),
        SimPort_VarRefrigerantFlowPort_VRF_In_ (this),
        SimPort_VarRefrigerantFlowPort_VRF_InOrOut_ (this),
        SimPort_VarRefrigerantFlowPort_VRF_Out_ (this),
        SimPort_ZoneAirFlowPort_Air_In_ (this),
        SimPort_ZoneAirFlowPort_Air_Out_ (this),
        SimPresentationLayerAssignment_Default_Default_ (this),
        SimProfileParams_Member_Default_ (this),
        SimProfileParams_ProfileParams_Default_ (this),
        SimProject_Project_Backpack_ (this),
        SimProject_Project_DesignAlternative_ (this),
        SimProject_Project_SBD_View_ (this),
        SimProject_Project_T24_View_ (this),
        SimPropertyListValue_SimpleProp_ListValue_ (this),
        SimPropertySet_PropertySet_Default_ (this),
        SimPropertySingleValue_SimpleProp_SingleValue_ (this),
        SimRailing_Default_Default_ (this),
        SimRailing_GuardRailing_Default_ (this),
        SimRailing_HandRailing_Default_ (this),
        SimRailingParams_Railing_Default_ (this),
        SimRamp_Ramp_Default_ (this),
        SimRampFlight_Default_Default_ (this),
        SimRampFlightParams_RampFlight_Default_ (this),
        SimRampParams_Ramp_Default_ (this),
        SimRefrigerationSystemElement_Compressor_Default_ (this),
        SimRefrigerationSystemElement_Condenser_AirCooled_ (this),
        SimRefrigerationSystemElement_Condenser_Cascade_ (this),
        SimRefrigerationSystemElement_Condenser_EvaporativeCooled_ (this),
        SimRefrigerationSystemElement_Condenser_WaterCooled_ (this),
        SimRefrigerationSystemElement_Default_Default_ (this),
        SimRefrigerationSystemElement_GasCooler_AirCooled_ (this),
        SimRefrigerationSystemElement_PackagedCompressorRack_Default_ (this),
        SimRefrigerationSystemElement_RefrigeratedCase_Default_ (this),
        SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_ (this),
        SimRefrigerationSystemElement_Subcooler_Default_ (this),
        SimRefrigerationSystemElement_WalkInCooler_Default_ (this),
        SimRegularTimeSeries_Regular_Default_ (this),
        SimRepresentationMap_RepresentationMap_Default_ (this),
        SimResourceConsumption_ExteriorConsumption_Default_ (this),
        SimResourceConsumption_ExteriorConsumption_Electricity_ (this),
        SimResourceConsumption_ExteriorConsumption_Fuel_ (this),
        SimResourceConsumption_ExteriorConsumption_NaturalGas_ (this),
        SimResourceConsumption_ExteriorConsumption_Water_ (this),
        SimResourceConsumption_InteriorConsumption_Default_ (this),
        SimResultsGuide_ResultsGuide_CustomTemplate_ (this),
        SimResultsGuide_ResultsGuide_Default_ (this),
        SimResultsGuide_ResultsGuide_PackageTemplate_ (this),
        SimResultsTextInfo_ResultsTextInfo_Default_ (this),
        SimResultsVariables_ResultsVariables_Default_ (this),
        SimResultsView_ResultsView_Default_ (this),
        SimResultsViewSet_ResultsViewSet_Default_ (this),
        SimRoof_Roof_Default_ (this),
        SimSensor_AirVelocitySensor_Default_ (this),
        SimSensor_Default_Default_ (this),
        SimSensor_FireSensor_Default_ (this),
        SimSensor_GasSensor_CO2Sensor_ (this),
        SimSensor_GasSensor_SmokeSensor_ (this),
        SimSensor_HeatSensor_Default_ (this),
        SimSensor_LuxSensor_Default_ (this),
        SimSensor_Meter_AirFlowRateMeter_ (this),
        SimSensor_Meter_FluidFlowRateMeter_ (this),
        SimSensor_Meter_HvacZoneWaterUseMeter_ (this),
        SimSensor_MovementSensor_Default_ (this),
        SimSensor_PressureSensor_Default_ (this),
        SimSensor_RelativeHumidity_Type1_ (this),
        SimSensor_RelativeHumidity_Type2_ (this),
        SimSensor_SolarRadiation_Default_ (this),
        SimSensor_SoundSensor_Default_ (this),
        SimSensor_TemperatureSensor_DryBulb_ (this),
        SimSensor_TemperatureSensor_Fluid_ (this),
        SimSensor_TemperatureSensor_Radiant_ (this),
        SimSensor_TemperatureSensor_WetBulb_ (this),
        SimSensor_VirtualSensor_EmsSensor_ (this),
        SimShapeRepresentation_ShapeRepresentation_Default_ (this),
        SimSimpleProperty_SimpleProp_Default_ (this),
        SimSimpleProperty_SimpleProp_ListValue_ (this),
        SimSimpleProperty_SimpleProp_SingleValue_ (this),
        SimSimulationConfiguration_SimulationConfiguration_Default_ (this),
        SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_ (this),
        SimSimulationConfiguration_StandardsConfiguration_LEED_ (this),
        SimSimulationConfiguration_StandardsConfiguration_SBDH_ (this),
        SimSimulationConfiguration_StandardsConfiguration_T24_ (this),
        SimSimulationOutputFormat_ControlReportingTolerances_Default_ (this),
        SimSimulationOutputFormat_ControlSizingStyle_Default_ (this),
        SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_ (this),
        SimSimulationOutputFormat_ControlTableStyle_Default_ (this),
        SimSimulationOutputFormat_Default_Default_ (this),
        SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_ (this),
        SimSimulationOutputRequest_Daylighting_DaylightFactors_ (this),
        SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_ (this),
        SimSimulationOutputRequest_Default_Default_ (this),
        SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_ (this),
        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_ (this),
        SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_ (this),
        SimSimulationOutputRequest_General_ReportReqDebuggingData_ (this),
        SimSimulationOutputRequest_General_ReportReqDiagnostics_ (this),
        SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_ (this),
        SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_ (this),
        SimSimulationOutputRequest_General_ReportReqSchedules_ (this),
        SimSimulationOutputRequest_General_ReportReqSQLite_ (this),
        SimSimulationOutputRequest_General_ReportReqVariableDictionary_ (this),
        SimSimulationOutputRequest_Geometry_ReportReqConstructions_ (this),
        SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_ (this),
        SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_ (this),
        SimSimulationOutputRequest_Meters_EnergyEndUseCategory_ (this),
        SimSimulationOutputRequest_Meters_MeterCumulative_ (this),
        SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_ (this),
        SimSimulationOutputRequest_Meters_MeterFileOnly_ (this),
        SimSimulationOutputRequest_Meters_VarReqMeter_ (this),
        SimSimulationOutputRequest_Meters_VarReqMeterCustom_ (this),
        SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_ (this),
        SimSimulationOutputRequest_StandardReports_TableMonthly_ (this),
        SimSimulationOutputRequest_StandardReports_TableSummaryReports_ (this),
        SimSimulationOutputRequest_StandardReports_TableTimeBins_ (this),
        SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_ (this),
        SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_ (this),
        SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_ (this),
        SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_ (this),
        SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_ (this),
        SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_ (this),
        SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_ (this),
        SimSimulationParameters_ConvectionCoefficients_Default_ (this),
        SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_ (this),
        SimSimulationParameters_FluidProperties_Concentration_ (this),
        SimSimulationParameters_FluidProperties_GlycolConcentrations_ (this),
        SimSimulationParameters_FluidProperties_Names_ (this),
        SimSimulationParameters_FluidProperties_Saturated_ (this),
        SimSimulationParameters_FluidProperties_SuperHeated_ (this),
        SimSimulationParameters_FluidProperties_Temperatures_ (this),
        SimSimulationParameters_GroundHeatTransfer_Default_ (this),
        SimSimulationParameters_HvacDesign_AirLoopSizing_ (this),
        SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_ (this),
        SimSimulationParameters_HvacDesign_Sizing_ (this),
        SimSimulationParameters_HvacDesign_WaterLoopSizing_ (this),
        SimSimulationParameters_HvacDesign_ZoneAIrDistribution_ (this),
        SimSimulationParameters_HvacDesign_ZoneSizing_ (this),
        SimSimulationParameters_Parametric_FileNameSuffix_ (this),
        SimSimulationParameters_Parametric_Logic_ (this),
        SimSimulationParameters_Parametric_RunControl_ (this),
        SimSimulationParameters_Parametric_SetValueForRun_ (this),
        SimSimulationParameters_SimulationControl_DaylightSavingTime_ (this),
        SimSimulationParameters_SimulationControl_Default_ (this),
        SimSimulationParameters_SimulationControl_RunPeriod_ (this),
        SimSimulationParameters_SimulationControl_RunPeriodCustomRange_ (this),
        SimSimulationParameters_SimulationControl_SpecialDays_ (this),
        SimSimulationParameters_SiteWindPressure_WindDirections_ (this),
        SimSimulationParameters_SiteWindPressure_WindPressureValues_ (this),
        SimSimulationParameters_SurfaceProperties_Default_ (this),
        SimSimulationParameters_SurfaceProperties_VaporCoefficients_ (this),
        SimSimulationRun_EPlusSimulation_Default_ (this),
        SimSimulationRun_StandardsRun_ASHRAE90_1_ (this),
        SimSimulationRun_StandardsRun_LEED_ (this),
        SimSimulationRun_StandardsRun_SBDH_ (this),
        SimSimulationRun_StandardsRun_T24_ (this),
        SimSite_AdjacentSite_Default_ (this),
        SimSite_BuildingSite_Default_ (this),
        SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_ (this),
        SimSiteAssembly_SiteAssembly_ExteriorLighting_ (this),
        SimSiteAssembly_SiteAssembly_ExteriorSignage_ (this),
        SimSiteAssembly_SiteAssembly_Fuel_ (this),
        SimSiteAssembly_SiteAssembly_FuelCell_ (this),
        SimSiteAssembly_SiteAssembly_SolarHotWater_ (this),
        SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_ (this),
        SimSiteAssembly_SiteAssembly_Water_ (this),
        SimSiteAssembly_SiteAssembly_WindTurbine_ (this),
        SimSIUnitType_SiUnit_Default_ (this),
        SimSlab_Ceiling_InterzoneCeiling_ (this),
        SimSlab_Ceiling_InterzoneCeilingAdiabatic_ (this),
        SimSlab_Ceiling_InterzoneCeilingDetailed_ (this),
        SimSlab_Default_Default_ (this),
        SimSlab_Floor_Adiabatic_ (this),
        SimSlab_Floor_FloorOverAir_ (this),
        SimSlab_Floor_FloorOverAirDetailed_ (this),
        SimSlab_Floor_FloorOverEarth_ (this),
        SimSlab_Floor_FloorOverEarthDetailed_ (this),
        SimSlab_Floor_InterzoneFloor_ (this),
        SimSlab_Floor_InterzoneFloorDetailed_ (this),
        SimSlab_Floor_RaisedFloor_ (this),
        SimSlab_Landing_Default_ (this),
        SimSlab_OtherSideCoefficients_Default_ (this),
        SimSlab_OtherSideCoefficients_Detailed_ (this),
        SimSlab_OtherSideCoefficients_DetailedFloor_ (this),
        SimSlab_OtherSideCoefficients_DetailedRoofCeiling_ (this),
        SimSlab_OtherSideConditionsModel_Default_ (this),
        SimSlab_OtherSideConditionsModel_Detailed_ (this),
        SimSlab_OtherSideConditionsModel_DetailedFloor_ (this),
        SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_ (this),
        SimSlab_RoofSlab_RoofUnderAir_ (this),
        SimSlab_RoofSlab_RoofUnderAirDetailed_ (this),
        SimSlab_RoofSlab_RoofUnderEarth_ (this),
        SimSlab_RoofSlab_RoofUnderEarthDetailed_ (this),
        SimSlabParams_Slab_Ceiling_ (this),
        SimSlabParams_Slab_Floor_ (this),
        SimSlabParams_Slab_Landing_ (this),
        SimSlabParams_Slab_Roof_ (this),
        SimSlabType_Slab_Ceiling_ (this),
        SimSlabType_Slab_Default_ (this),
        SimSlabType_Slab_Floor_ (this),
        SimSlabType_Slab_Landing_ (this),
        SimSlabType_Slab_Roof_ (this),
        SimSoftwareApplication_Default_Default_ (this),
        SimSolarObsParams_SolarObstruction_Default_ (this),
        SimSolarShade_Default_Default_ (this),
        SimSolarShade_Fin_Default_ (this),
        SimSolarShade_Fin_Projection_ (this),
        SimSolarShade_Overhang_Continuous_ (this),
        SimSolarShade_Overhang_Default_ (this),
        SimSolarShade_Overhang_Projection_ (this),
        SimSolarShade_ZoneDetailed_Default_ (this),
        SimSolarShadeArrayParams_SolarShadeArray_Default_ (this),
        SimSolarShadePanelParams_ShadePanel_SolarShading_ (this),
        SimSolarShadeType_SolarShade_Default_ (this),
        SimSolarShadeType_SolarShade_LeftFin_ (this),
        SimSolarShadeType_SolarShade_Overhang_ (this),
        SimSolarShadeType_SolarShade_RightFin_ (this),
        SimSpace_Occupied_Default_ (this),
        SimSpace_Unoccupied_CeilingPlenum_ (this),
        SimSpace_Unoccupied_CeilingVoid_ (this),
        SimSpace_Unoccupied_Default_ (this),
        SimSpace_Unoccupied_FloorPlenum_ (this),
        SimSpace_Unoccupied_FloorVoid_ (this),
        SimSpace_Unoccupied_Plenum_ (this),
        SimSpaceBoundary_Ceiling_InterzoneCeiling_ (this),
        SimSpaceBoundary_Door_GlazedDoor_ (this),
        SimSpaceBoundary_Door_OpaqueDoor_ (this),
        SimSpaceBoundary_FirstLevel_Default_ (this),
        SimSpaceBoundary_Floor_FloorOverAir_ (this),
        SimSpaceBoundary_Floor_FloorOverEarth_ (this),
        SimSpaceBoundary_Floor_InterzoneFloor_ (this),
        SimSpaceBoundary_RoofSlab_RoofUnderAir_ (this),
        SimSpaceBoundary_SecondLevel_Default_ (this),
        SimSpaceBoundary_SecondLevel_SubTypeA_ (this),
        SimSpaceBoundary_SecondLevel_SubTypeB_ (this),
        SimSpaceBoundary_SecondLevel_SubTypeC_ (this),
        SimSpaceBoundary_Skylight_Default_ (this),
        SimSpaceBoundary_Wall_ExteriorAboveGrade_ (this),
        SimSpaceBoundary_Wall_ExteriorBelowGrade_ (this),
        SimSpaceBoundary_Wall_Interior_ (this),
        SimSpaceBoundary_Window_Exterior_ (this),
        SimSpaceOccupant_Actor_SpaceOccupant_ (this),
        SimSpaceParams_Space_Default_ (this),
        SimSpaceType_Space_Default_ (this),
        SimSpatialZone_OutdoorAir_Default_ (this),
        SimSpatialZone_Plenum_CeilingPlenum_ (this),
        SimSpatialZone_Plenum_Default_ (this),
        SimSpatialZone_Plenum_FloorPlenum_ (this),
        SimSpatialZone_SecurityZone_Public_ (this),
        SimSpatialZone_SecurityZone_Security_ (this),
        SimSpatialZone_SecurityZone_StaffOnly_ (this),
        SimSpatialZone_ThermalZone_AboveCeilingVoid_ (this),
        SimSpatialZone_ThermalZone_BelowFloorVoid_ (this),
        SimSpatialZone_ThermalZone_Default_ (this),
        SimSpatialZone_ThermalZone_TemplateForZoneGroup_ (this),
        SimStair_Stair_Default_ (this),
        SimStairFlight_Default_Default_ (this),
        SimStairFlightParams_StairFlight_Default_ (this),
        SimStairParams_Stair_Default_ (this),
        SimSystem_AirFlowNetwork_Default_ (this),
        SimSystem_Electrical_SystemsContainer_ (this),
        SimSystem_ElectricalLighting_FullSystem_ (this),
        SimSystem_ElectricalLighting_LightingCircuit_ (this),
        SimSystem_ElectricalPower_FullSystem_ (this),
        SimSystem_ElectroMechanical_PV_SolarThermal_ (this),
        SimSystem_Hvac_SystemsContainer_ (this),
        SimSystem_HvacAir_AirBranch_ (this),
        SimSystem_HvacAir_Control_ (this),
        SimSystem_HvacAir_ControlDemand_ (this),
        SimSystem_HvacAir_ControlSupply_ (this),
        SimSystem_HvacAir_Demand_ (this),
        SimSystem_HvacAir_DemandSideReturnPath_ (this),
        SimSystem_HvacAir_DemandSideSupplyPath_ (this),
        SimSystem_HvacAir_DemandSideZoneHvac_ (this),
        SimSystem_HvacAir_FullSystem_ (this),
        SimSystem_HvacAir_FullSystemDual_ (this),
        SimSystem_HvacAir_FullSystemTriple_ (this),
        SimSystem_HvacAir_OutdoorAir_ (this),
        SimSystem_HvacAir_OutdoorAirExhaust_ (this),
        SimSystem_HvacAir_OutdoorAirSupply_ (this),
        SimSystem_HvacAir_Supply_ (this),
        SimSystem_HvacAir_SupplySideReturnPath_ (this),
        SimSystem_HvacAir_SupplySideSupplyPath_ (this),
        SimSystem_HvacChilledWater_Control_ (this),
        SimSystem_HvacChilledWater_ControlDemand_ (this),
        SimSystem_HvacChilledWater_ControlSupply_ (this),
        SimSystem_HvacChilledWater_Demand_ (this),
        SimSystem_HvacChilledWater_DemandSideDemandComponents_ (this),
        SimSystem_HvacChilledWater_DemandSideReturnPath_ (this),
        SimSystem_HvacChilledWater_DemandSideSupplyPath_ (this),
        SimSystem_HvacChilledWater_FullSystem_ (this),
        SimSystem_HvacChilledWater_Supply_ (this),
        SimSystem_HvacChilledWater_WaterBranch_ (this),
        SimSystem_HvacCondenser_CondenserBranch_ (this),
        SimSystem_HvacCondenser_Control_ (this),
        SimSystem_HvacCondenser_ControlDemand_ (this),
        SimSystem_HvacCondenser_ControlSupply_ (this),
        SimSystem_HvacCondenser_Demand_ (this),
        SimSystem_HvacCondenser_DemandSideDemandComponents_ (this),
        SimSystem_HvacCondenser_DemandSideReturnPath_ (this),
        SimSystem_HvacCondenser_DemandSideSupplyPath_ (this),
        SimSystem_HvacCondenser_FullSystem_ (this),
        SimSystem_HvacCondenser_Supply_ (this),
        SimSystem_HvacHotWater_Control_ (this),
        SimSystem_HvacHotWater_ControlDemand_ (this),
        SimSystem_HvacHotWater_ControlSupply_ (this),
        SimSystem_HvacHotWater_Demand_ (this),
        SimSystem_HvacHotWater_DemandSideDemandComponents_ (this),
        SimSystem_HvacHotWater_DemandSideReturnPath_ (this),
        SimSystem_HvacHotWater_DemandSideSupplyPath_ (this),
        SimSystem_HvacHotWater_FullSystem_ (this),
        SimSystem_HvacHotWater_Supply_ (this),
        SimSystem_HvacHotWater_WaterBranch_ (this),
        SimSystem_HvacMixedWater_Control_ (this),
        SimSystem_HvacMixedWater_ControlDemand_ (this),
        SimSystem_HvacMixedWater_ControlSupply_ (this),
        SimSystem_HvacMixedWater_Demand_ (this),
        SimSystem_HvacMixedWater_DemandSideDemandComponents_ (this),
        SimSystem_HvacMixedWater_DemandSideReturnPath_ (this),
        SimSystem_HvacMixedWater_DemandSideSupplyPath_ (this),
        SimSystem_HvacMixedWater_FullSystem_ (this),
        SimSystem_HvacMixedWater_Supply_ (this),
        SimSystem_HvacMixedWater_WaterBranch_ (this),
        SimSystem_HvacSteam_Control_ (this),
        SimSystem_HvacSteam_ControlDemand_ (this),
        SimSystem_HvacSteam_ControlSupply_ (this),
        SimSystem_HvacSteam_Demand_ (this),
        SimSystem_HvacSteam_DemandSideDemandComponents_ (this),
        SimSystem_HvacSteam_DemandSideReturnPath_ (this),
        SimSystem_HvacSteam_DemandSideSupplyPath_ (this),
        SimSystem_HvacSteam_FullSystem_ (this),
        SimSystem_HvacSteam_SteamBranch_ (this),
        SimSystem_HvacSteam_Supply_ (this),
        SimSystem_Mechanical_SystemsContainer_ (this),
        SimSystem_Plumbing_ColdWater_ (this),
        SimSystem_Plumbing_GrayWater_ (this),
        SimSystem_Plumbing_HotWater_ (this),
        SimSystem_Plumbing_PotableWater_ (this),
        SimSystem_Plumbing_SystemsContainer_ (this),
        SimSystem_Plumbing_UndergroundPipingCircuit_ (this),
        SimSystem_Plumbing_WasteWater_ (this),
        SimSystem_Plumbing_WaterUseSystem_ (this),
        SimSystem_Plumbing_WaterUseWell_ (this),
        SimSystem_RefrigerationPrimary_Control_ (this),
        SimSystem_RefrigerationPrimary_Demand_ (this),
        SimSystem_RefrigerationPrimary_FullSystem_ (this),
        SimSystem_RefrigerationPrimary_Supply_ (this),
        SimSystem_RefrigerationSecondary_Control_ (this),
        SimSystem_RefrigerationSecondary_Demand_ (this),
        SimSystem_RefrigerationSecondary_FullSystem_ (this),
        SimSystem_RefrigerationSecondary_Supply_ (this),
        SimSystem_RefrigerationTranscritical_Control_ (this),
        SimSystem_RefrigerationTranscritical_Demand_ (this),
        SimSystem_RefrigerationTranscritical_FullSystem_ (this),
        SimSystem_RefrigerationTranscritical_Supply_ (this),
        SimSystem_ServiceHotWater_Control_ (this),
        SimSystem_ServiceHotWater_Demand_ (this),
        SimSystem_ServiceHotWater_FullSystem_ (this),
        SimSystem_ServiceHotWater_Supply_ (this),
        SimSystem_ServiceHotWater_WaterBranch_ (this),
        SimSystem_SitePowerDemand_ElectricityConsuming_ (this),
        SimSystem_SitePowerDemand_FuelConsuming_ (this),
        SimSystem_SitePowerDemand_WaterConsuming_ (this),
        SimSystem_SitePowerGeneration_Other_ (this),
        SimSystem_SitePowerGeneration_Photovoltaic_ (this),
        SimSystem_SitePowerGeneration_WindTurbine_ (this),
        SimSystem_Transport_Elevator_ (this),
        SimSystem_Transport_Escalator_ (this),
        SimSystem_Transport_MovingWalkway_ (this),
        SimSystem_Transport_SystemsContainer_ (this),
        SimSystem_VariableRefrigerantFlow_Control_ (this),
        SimSystem_VariableRefrigerantFlow_Demand_ (this),
        SimSystem_VariableRefrigerantFlow_FullSystem_ (this),
        SimSystem_VariableRefrigerantFlow_Supply_ (this),
        SimSystem_ZoneHvacGroup_Control_ (this),
        SimSystem_ZoneHvacGroup_ControlDemand_ (this),
        SimSystem_ZoneHvacGroup_ControlSupply_ (this),
        SimSystem_ZoneHvacGroup_Demand_ (this),
        SimSystem_ZoneHvacGroup_DemandSideReturnPath_ (this),
        SimSystem_ZoneHvacGroup_DemandSideSupplyPath_ (this),
        SimSystem_ZoneHvacGroup_DemandSideZoneHvac_ (this),
        SimSystem_ZoneHvacGroup_FullSystem_ (this),
        SimSystem_ZoneHvacGroup_Supply_ (this),
        SimSystem_ZoneShwGroup_Demand_ (this),
        SimSystem_ZoneShwGroup_FullSystem_ (this),
        SimSystem_ZoneShwGroup_Supply_ (this),
        SimTemplateConstructions_Constructions_Default_ (this),
        SimTemplateDaylighting_Daylighting_Default_ (this),
        SimTemplateDaylighting_Daylighting_Skylights_ (this),
        SimTemplateDaylighting_Daylighting_Windows_ (this),
        SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_ (this),
        SimTemplateInteriorLighting_InteriorLighting_Default_ (this),
        SimTemplateLocation_Location_Default_ (this),
        SimTemplateNaturalVentilation_NaturalVentilation_Default_ (this),
        SimTemplateOutputFormatSet_OutputFormatSet_Default_ (this),
        SimTemplateOutputRequestSet_OutputRequestSet_Default_ (this),
        SimTemplateSimulationParameters_SimulationParameters_Default_ (this),
        SimTemplateZoneConditions_ZoneConditions_Default_ (this),
        SimTemplateZoneLoads_ZoneLoads_Default_ (this),
        SimTimeSeriesSchedule_Calendar_Configuration_ (this),
        SimTimeSeriesSchedule_Calendar_Default_ (this),
        SimTimeSeriesSchedule_Calendar_SpecialDays_ (this),
        SimTimeSeriesSchedule_Compact_Default_ (this),
        SimTimeSeriesSchedule_Constant_Default_ (this),
        SimTimeSeriesSchedule_Day_Hourly_ (this),
        SimTimeSeriesSchedule_Day_Interval_ (this),
        SimTimeSeriesSchedule_Day_List_ (this),
        SimTimeSeriesSchedule_File_Default_ (this),
        SimTimeSeriesSchedule_Limits_Default_ (this),
        SimTimeSeriesSchedule_TimeSeries_Default_ (this),
        SimTimeSeriesSchedule_Week_Compact_ (this),
        SimTimeSeriesSchedule_Week_Daily_ (this),
        SimTimeSeriesSchedule_Year_Default_ (this),
        SimTimeSeriesValue_TimeSeries_Irregular_ (this),
        SimTimeSeriesValue_TimeSeries_Regular_ (this),
        SimToplogicalRepresentation_TopologicalRepresentation_Default_ (this),
        SimTransportSysAssembly_TransportSysAssembly_Default_ (this),
        SimTransportSysAssembly_TransportSysAssembly_Elevator_ (this),
        SimTransportSysAssembly_TransportSysAssembly_Escalator_ (this),
        SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_ (this),
        SimValidationResultsAir_AirLoop_Default_ (this),
        SimValidationResultsBldg_Building_Default_ (this),
        SimValidationResultsRefrig_RFGLoop_Default_ (this),
        SimValidationResultsVRF_VRFLoop_Default_ (this),
        SimValidationResultsWater_CHWLoop_Default_ (this),
        SimValidationResultsWater_CWLoop_Default_ (this),
        SimValidationResultsWater_HWLoop_Default_ (this),
        SimValidationResultsWater_MxWLoop_Default_ (this),
        SimValidationResultsWater_SHWLoop_Default_ (this),
        SimValidationResultsWater_STMLoop_Default_ (this),
        SimValidationResultsZoneHvac_ZoneHvac_Default_ (this),
        SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_ (this),
        SimVentilationAssembly_VentilationAssembly_EarthTube_ (this),
        SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_ (this),
        SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_ (this),
        SimVentilationAssembly_VentilationAssembly_ThermalChimney_ (this),
        SimVertex_Vertex_Point_ (this),
        SimVirtualElement_Default_Default_ (this),
        SimVirtualElement_Slab_Ceiling_ (this),
        SimVirtualElement_Slab_Default_ (this),
        SimVirtualElement_Slab_Floor_ (this),
        SimVirtualElement_Slab_OpeningFiller_ (this),
        SimVirtualElement_Wall_Default_ (this),
        SimVirtualElement_Wall_OpeningFiller_ (this),
        SimVirtualGridIntersection_VirtualGridIntersection_Default_ (this),
        SimWall_OtherSideCoefficients_Default_ (this),
        SimWall_OtherSideCoefficients_Detailed_ (this),
        SimWall_OtherSideCoefficients_DetailedFloor_ (this),
        SimWall_OtherSideCoefficients_DetailedRoofCeiling_ (this),
        SimWall_OtherSideConditionsModel_Default_ (this),
        SimWall_OtherSideConditionsModel_Detailed_ (this),
        SimWall_OtherSideConditionsModel_DetailedFloor_ (this),
        SimWall_OtherSideConditionsModel_DetailedRoofCeiling_ (this),
        SimWall_Wall_Adiabatic_ (this),
        SimWall_Wall_Default_ (this),
        SimWall_Wall_ExteriorAboveGrade_ (this),
        SimWall_Wall_ExteriorAboveGradeDetailed_ (this),
        SimWall_Wall_ExteriorAboveGradeStandard_ (this),
        SimWall_Wall_ExteriorBelowGrade_ (this),
        SimWall_Wall_ExteriorBelowGradeDetailed_ (this),
        SimWall_Wall_ExteriorBelowGradeStandard_ (this),
        SimWall_Wall_Interior_ (this),
        SimWall_Wall_InteriorDetailed_ (this),
        SimWall_Wall_InteriorStandard_ (this),
        SimWall_Wall_OpeningFiller_ (this),
        SimWallParams_Wall_Default_ (this),
        SimWallType_Wall_Default_ (this),
        SimWindow_ComplexFenestration_ThermoChromic_ (this),
        SimWindow_Skylight_Exterior_ (this),
        SimWindow_Skylight_ExteriorDetailed_ (this),
        SimWindow_Window_Default_ (this),
        SimWindow_Window_Exterior_ (this),
        SimWindow_Window_ExteriorDetailed_ (this),
        SimWindow_Window_Interior_ (this),
        SimWindowArrayParams_WindowArray_Default_ (this),
        SimWindowLiningProps_WindowLiningProps_Default_ (this),
        SimWindowPanelProps_WindowPanelProps_Default_ (this),
        SimWindowParams_Window_Default_ (this),
        SimWindowType_Window_Default_ (this),
        SimModelVersion_ (this),
        SimModelSchemaVersion_ (this),
        SimModelUnitsVersion_ (this),
        SimModelUnitDefaultsVersion_ (this),
        SimModelSchemaIDKey_ (this)
      {
      }

      SimModel::
      SimModel (const SimModel& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        SimActor_Actor_Default_ (x.SimActor_Actor_Default_, f, this),
        SimActor_Actor_SpaceOccupant_ (x.SimActor_Actor_SpaceOccupant_, f, this),
        SimActuator_DamperActuator_Default_ (x.SimActuator_DamperActuator_Default_, f, this),
        SimActuator_Default_Default_ (x.SimActuator_Default_Default_, f, this),
        SimActuator_ElectricalRotor_Default_ (x.SimActuator_ElectricalRotor_Default_, f, this),
        SimActuator_ValveActuator_Default_ (x.SimActuator_ValveActuator_Default_, f, this),
        SimActuator_VirtualActuator_EmsActuator_ (x.SimActuator_VirtualActuator_EmsActuator_, f, this),
        SimAddress_Postal_Default_ (x.SimAddress_Postal_Default_, f, this),
        SimAddress_Telecom_Default_ (x.SimAddress_Telecom_Default_, f, this),
        SimAdjacentSiteParams_AdjacentSite_Default_ (x.SimAdjacentSiteParams_AdjacentSite_Default_, f, this),
        SimAnalyticalRepresentation_AnalyticalRepresentation_Default_ (x.SimAnalyticalRepresentation_AnalyticalRepresentation_Default_, f, this),
        SimAppLanguageDefault_AppLanguageDefault_Default_ (x.SimAppLanguageDefault_AppLanguageDefault_Default_, f, this),
        SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_ (x.SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_, f, this),
        SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_ (x.SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_, f, this),
        SimAppLibraryDefault_AppLibraryDefault_UserLibrary_ (x.SimAppLibraryDefault_AppLibraryDefault_UserLibrary_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_, f, this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_ (x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_, f, this),
        SimAppObjNameDefault_BldgComponentGroup_HvacComponent_ (x.SimAppObjNameDefault_BldgComponentGroup_HvacComponent_, f, this),
        SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_ (x.SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_, f, this),
        SimAppObjNameDefault_DistributionSystem_Default_ (x.SimAppObjNameDefault_DistributionSystem_Default_, f, this),
        SimAppObjNameDefault_DistributionSystem_HvacAirLoop_ (x.SimAppObjNameDefault_DistributionSystem_HvacAirLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_ (x.SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_ (x.SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_ (x.SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_ (x.SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_ (x.SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_ (x.SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_, f, this),
        SimAppObjNameDefault_DistributionSystem_ServiceHotWater_ (x.SimAppObjNameDefault_DistributionSystem_ServiceHotWater_, f, this),
        SimAppObjNameDefault_DistributionSystem_SitePowerDemand_ (x.SimAppObjNameDefault_DistributionSystem_SitePowerDemand_, f, this),
        SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_ (x.SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_, f, this),
        SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_ (x.SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_, f, this),
        SimAppObjNameDefault_OtherSystem_Default_ (x.SimAppObjNameDefault_OtherSystem_Default_, f, this),
        SimAppObjNameDefault_SiteContext_AdjacentSite_ (x.SimAppObjNameDefault_SiteContext_AdjacentSite_, f, this),
        SimAppObjNameDefault_SiteContext_SolarObstruction_ (x.SimAppObjNameDefault_SiteContext_SolarObstruction_, f, this),
        SimAppObjNameDefault_Space_CeilingPlenum_ (x.SimAppObjNameDefault_Space_CeilingPlenum_, f, this),
        SimAppObjNameDefault_Space_FloorPlenum_ (x.SimAppObjNameDefault_Space_FloorPlenum_, f, this),
        SimAppObjNameDefault_Space_Space_ (x.SimAppObjNameDefault_Space_Space_, f, this),
        SimAppObjNameDefault_SpatialContainer_Building_ (x.SimAppObjNameDefault_SpatialContainer_Building_, f, this),
        SimAppObjNameDefault_SpatialContainer_BuildingStory_ (x.SimAppObjNameDefault_SpatialContainer_BuildingStory_, f, this),
        SimAppObjNameDefault_SpatialContainer_Project_ (x.SimAppObjNameDefault_SpatialContainer_Project_, f, this),
        SimAppObjNameDefault_SpatialContainer_Site_ (x.SimAppObjNameDefault_SpatialContainer_Site_, f, this),
        SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_ (x.SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_, f, this),
        SimAppObjNameDefault_SpatialZone_FloorPlenumZone_ (x.SimAppObjNameDefault_SpatialZone_FloorPlenumZone_, f, this),
        SimAppObjNameDefault_SpatialZone_PlenumZone_ (x.SimAppObjNameDefault_SpatialZone_PlenumZone_, f, this),
        SimAppObjNameDefault_SpatialZone_ThermalZone_ (x.SimAppObjNameDefault_SpatialZone_ThermalZone_, f, this),
        SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_ (x.SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_, f, this),
        SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_ (x.SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_, f, this),
        SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_ (x.SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_, f, this),
        SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_ (x.SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_, f, this),
        SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_ (x.SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_, f, this),
        SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_ (x.SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_, f, this),
        SimAppPreferences_AppPreferences_AutoSave_ (x.SimAppPreferences_AppPreferences_AutoSave_, f, this),
        SimAppPreferences_AppPreferences_AutoSaveInterval_ (x.SimAppPreferences_AppPreferences_AutoSaveInterval_, f, this),
        SimAppPreferences_AppPreferences_EPlusInstalPath_ (x.SimAppPreferences_AppPreferences_EPlusInstalPath_, f, this),
        SimAppPreferences_AppPreferences_EPlusInstalVersion_ (x.SimAppPreferences_AppPreferences_EPlusInstalVersion_, f, this),
        SimAppPreferences_AppPreferences_MinMonthlyChargeType_ (x.SimAppPreferences_AppPreferences_MinMonthlyChargeType_, f, this),
        SimAppPreferences_AppPreferences_MonthlyChargeType_ (x.SimAppPreferences_AppPreferences_MonthlyChargeType_, f, this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_ (x.SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_, f, this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_ (x.SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_, f, this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_ (x.SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_, f, this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_ (x.SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_, f, this),
        SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_ (x.SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_, f, this),
        SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_ (x.SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_, f, this),
        SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_ (x.SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_, f, this),
        SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_ (x.SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_, f, this),
        SimAppUnitDefault_AppUnitDefault_DatabaseDefault_ (x.SimAppUnitDefault_AppUnitDefault_DatabaseDefault_, f, this),
        SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_ (x.SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_, f, this),
        SimArbitraryProfileDef_ArbitraryProfile_Closed_ (x.SimArbitraryProfileDef_ArbitraryProfile_Closed_, f, this),
        SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_ (x.SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_, f, this),
        SimArbitraryProfileDef_ArbitraryProfile_Open_ (x.SimArbitraryProfileDef_ArbitraryProfile_Open_, f, this),
        SimArrayParams_ArrayParams_Default_ (x.SimArrayParams_ArrayParams_Default_, f, this),
        SimArrayParams_BldgElementArray_Beam_ (x.SimArrayParams_BldgElementArray_Beam_, f, this),
        SimArrayParams_BldgElementArray_Column_ (x.SimArrayParams_BldgElementArray_Column_, f, this),
        SimArrayParams_BldgElementArray_Default_ (x.SimArrayParams_BldgElementArray_Default_, f, this),
        SimArrayParams_DoorArray_Default_ (x.SimArrayParams_DoorArray_Default_, f, this),
        SimArrayParams_PanelArrayParams_Default_ (x.SimArrayParams_PanelArrayParams_Default_, f, this),
        SimArrayParams_SolarShadeArray_Default_ (x.SimArrayParams_SolarShadeArray_Default_, f, this),
        SimArrayParams_WindowArray_Default_ (x.SimArrayParams_WindowArray_Default_, f, this),
        SimBeam_Default_Default_ (x.SimBeam_Default_Default_, f, this),
        SimBeamParams_Beam_Default_ (x.SimBeamParams_Beam_Default_, f, this),
        SimBeamType_Beam_Default_ (x.SimBeamType_Beam_Default_, f, this),
        SimBldgElementArrayParams_BldgElementArray_Beam_ (x.SimBldgElementArrayParams_BldgElementArray_Beam_, f, this),
        SimBldgElementArrayParams_BldgElementArray_Column_ (x.SimBldgElementArrayParams_BldgElementArray_Column_, f, this),
        SimBldgElementArrayParams_BldgElementArray_Default_ (x.SimBldgElementArrayParams_BldgElementArray_Default_, f, this),
        SimBldgElementType_BldgElementProxy_Default_ (x.SimBldgElementType_BldgElementProxy_Default_, f, this),
        SimBldgElementType_Default_Default_ (x.SimBldgElementType_Default_Default_, f, this),
        SimBldgElementType_ElectricalTerminal_Default_ (x.SimBldgElementType_ElectricalTerminal_Default_, f, this),
        SimBldgElementType_HumanTransport_Default_ (x.SimBldgElementType_HumanTransport_Default_, f, this),
        SimBldgElementType_PlumbingFixture_Default_ (x.SimBldgElementType_PlumbingFixture_Default_, f, this),
        SimBldgElementType_Railing_Default_ (x.SimBldgElementType_Railing_Default_, f, this),
        SimBldgElementType_Ramp_Default_ (x.SimBldgElementType_Ramp_Default_, f, this),
        SimBldgElementType_RampFlight_Default_ (x.SimBldgElementType_RampFlight_Default_, f, this),
        SimBldgElementType_Stair_Default_ (x.SimBldgElementType_Stair_Default_, f, this),
        SimBldgElementType_StairFlight_Default_ (x.SimBldgElementType_StairFlight_Default_, f, this),
        SimBldgElementType_VirtualElement_Default_ (x.SimBldgElementType_VirtualElement_Default_, f, this),
        SimBldgParams_Building_Default_ (x.SimBldgParams_Building_Default_, f, this),
        SimBldgSiteParams_BuildingSite_Default_ (x.SimBldgSiteParams_BuildingSite_Default_, f, this),
        SimBldgStoryParams_BuildingStory_Default_ (x.SimBldgStoryParams_BuildingStory_Default_, f, this),
        SimBldgStoryType_BuildingStory_Default_ (x.SimBldgStoryType_BuildingStory_Default_, f, this),
        SimBuilding_AdjacentBuilding_Default_ (x.SimBuilding_AdjacentBuilding_Default_, f, this),
        SimBuilding_Building_Default_ (x.SimBuilding_Building_Default_, f, this),
        SimBuildingElementProxy_Default_Default_ (x.SimBuildingElementProxy_Default_Default_, f, this),
        SimBuildingElementProxy_SiteContextElement_BuildingShading_ (x.SimBuildingElementProxy_SiteContextElement_BuildingShading_, f, this),
        SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_ (x.SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_, f, this),
        SimBuildingElementProxy_SiteContextElement_Default_ (x.SimBuildingElementProxy_SiteContextElement_Default_, f, this),
        SimBuildingElementProxy_SiteContextElement_GroundPlane_ (x.SimBuildingElementProxy_SiteContextElement_GroundPlane_, f, this),
        SimBuildingElementProxy_SiteContextElement_SiteShading_ (x.SimBuildingElementProxy_SiteContextElement_SiteShading_, f, this),
        SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_ (x.SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_, f, this),
        SimBuildingElementProxy_ThermalMass_Default_ (x.SimBuildingElementProxy_ThermalMass_Default_, f, this),
        SimBuildingStory_BuildingStory_Default_ (x.SimBuildingStory_BuildingStory_Default_, f, this),
        SimBuildingType_Building_Default_ (x.SimBuildingType_Building_Default_, f, this),
        SimCalendarDate_Default_Default_ (x.SimCalendarDate_Default_Default_, f, this),
        SimCartesianTransformOperator_2D_NonUniform_ (x.SimCartesianTransformOperator_2D_NonUniform_, f, this),
        SimCartesianTransformOperator_2D_Uniform_ (x.SimCartesianTransformOperator_2D_Uniform_, f, this),
        SimCartesianTransformOperator_3D_NonUniform_ (x.SimCartesianTransformOperator_3D_NonUniform_, f, this),
        SimCartesianTransformOperator_3D_Uniform_ (x.SimCartesianTransformOperator_3D_Uniform_, f, this),
        SimClassification_ClassificationReference_BuildingElementClassification_ (x.SimClassification_ClassificationReference_BuildingElementClassification_, f, this),
        SimClassification_ClassificationReference_ConstructionEntityByFunction_ (x.SimClassification_ClassificationReference_ConstructionEntityByFunction_, f, this),
        SimClassification_ClassificationReference_Default_ (x.SimClassification_ClassificationReference_Default_, f, this),
        SimClassification_ClassificationReference_OrganizationalBillingID_ (x.SimClassification_ClassificationReference_OrganizationalBillingID_, f, this),
        SimClassification_ClassificationReference_OrganizationalID_ (x.SimClassification_ClassificationReference_OrganizationalID_, f, this),
        SimClassification_ClassificationReference_SpaceByFunction_ (x.SimClassification_ClassificationReference_SpaceByFunction_, f, this),
        SimClassification_ClassificationReference_SpaceCategoryBoma_ (x.SimClassification_ClassificationReference_SpaceCategoryBoma_, f, this),
        SimClassification_ClassificationReference_SpaceCategoryOwner_ (x.SimClassification_ClassificationReference_SpaceCategoryOwner_, f, this),
        SimClassification_ClassificationReference_SpaceTypeOwner_ (x.SimClassification_ClassificationReference_SpaceTypeOwner_, f, this),
        SimClassification_ClassificationReference_SpatialZoneEnergyType_ (x.SimClassification_ClassificationReference_SpatialZoneEnergyType_, f, this),
        SimClassification_ClassificationReference_SpatialZoneSecurityLevel_ (x.SimClassification_ClassificationReference_SpatialZoneSecurityLevel_, f, this),
        SimClassification_ClassificationReference_SpatialZoneType_ (x.SimClassification_ClassificationReference_SpatialZoneType_, f, this),
        SimClassification_ClassificationReference_SubOrganizationalID_ (x.SimClassification_ClassificationReference_SubOrganizationalID_, f, this),
        SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_ (x.SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_, f, this),
        SimClassification_ClassificationSystem_Default_ (x.SimClassification_ClassificationSystem_Default_, f, this),
        SimClassification_ClassificationSystem_MasterFormat_ (x.SimClassification_ClassificationSystem_MasterFormat_, f, this),
        SimClassification_ClassificationSystem_OmniClass_ (x.SimClassification_ClassificationSystem_OmniClass_, f, this),
        SimClassification_ClassificationSystem_OwnerOrganizationalClassification_ (x.SimClassification_ClassificationSystem_OwnerOrganizationalClassification_, f, this),
        SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_ (x.SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_, f, this),
        SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_ (x.SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_, f, this),
        SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_ (x.SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_, f, this),
        SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_ (x.SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_, f, this),
        SimClassification_ClassificationSystem_OwnerZoneTypeClassification_ (x.SimClassification_ClassificationSystem_OwnerZoneTypeClassification_, f, this),
        SimClassification_ClassificationSystem_Uniformat_ (x.SimClassification_ClassificationSystem_Uniformat_, f, this),
        SimColumn_Embedded_Default_ (x.SimColumn_Embedded_Default_, f, this),
        SimColumn_Freestanding_Default_ (x.SimColumn_Freestanding_Default_, f, this),
        SimColumnParams_Column_Default_ (x.SimColumnParams_Column_Default_, f, this),
        SimColumnType_Column_Default_ (x.SimColumnType_Column_Default_, f, this),
        SimComplexProperty_ComplexProp_Default_ (x.SimComplexProperty_ComplexProp_Default_, f, this),
        SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_ (x.SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_, f, this),
        SimCompositeProfileDef_CompositeProfile_Default_ (x.SimCompositeProfileDef_CompositeProfile_Default_, f, this),
        SimConnectCurveGeom_Curve_Default_ (x.SimConnectCurveGeom_Curve_Default_, f, this),
        SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_ (x.SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_, f, this),
        SimConnectedFaceSet_ConnectedFaceSet_Default_ (x.SimConnectedFaceSet_ConnectedFaceSet_Default_, f, this),
        SimConnectedFaceSet_ConnectedFaceSet_OpenShell_ (x.SimConnectedFaceSet_ConnectedFaceSet_OpenShell_, f, this),
        SimConnection_AirFlow_CrossSystem_ (x.SimConnection_AirFlow_CrossSystem_, f, this),
        SimConnection_AirFlow_Default_ (x.SimConnection_AirFlow_Default_, f, this),
        SimConnection_AirFlow_Linkage_ (x.SimConnection_AirFlow_Linkage_, f, this),
        SimConnection_AirFlowNetwork_Default_ (x.SimConnection_AirFlowNetwork_Default_, f, this),
        SimConnection_ChilledWaterFlow_CrossSystem_ (x.SimConnection_ChilledWaterFlow_CrossSystem_, f, this),
        SimConnection_ChilledWaterFlow_Default_ (x.SimConnection_ChilledWaterFlow_Default_, f, this),
        SimConnection_CondenserFlow_CrossSystem_ (x.SimConnection_CondenserFlow_CrossSystem_, f, this),
        SimConnection_CondenserFlow_Default_ (x.SimConnection_CondenserFlow_Default_, f, this),
        SimConnection_Default_Default_ (x.SimConnection_Default_Default_, f, this),
        SimConnection_DigitalControl_Default_ (x.SimConnection_DigitalControl_Default_, f, this),
        SimConnection_Docking_Default_ (x.SimConnection_Docking_Default_, f, this),
        SimConnection_ElectricalPowerFlow_Default_ (x.SimConnection_ElectricalPowerFlow_Default_, f, this),
        SimConnection_HotWaterFlow_CrossSystem_ (x.SimConnection_HotWaterFlow_CrossSystem_, f, this),
        SimConnection_HotWaterFlow_Default_ (x.SimConnection_HotWaterFlow_Default_, f, this),
        SimConnection_MixedWaterFlow_CrossSystem_ (x.SimConnection_MixedWaterFlow_CrossSystem_, f, this),
        SimConnection_MixedWaterFlow_Default_ (x.SimConnection_MixedWaterFlow_Default_, f, this),
        SimConnection_RefrigerantFlow_Default_ (x.SimConnection_RefrigerantFlow_Default_, f, this),
        SimConnection_ServiceHotWaterFlow_CrossSystem_ (x.SimConnection_ServiceHotWaterFlow_CrossSystem_, f, this),
        SimConnection_ServiceHotWaterFlow_Default_ (x.SimConnection_ServiceHotWaterFlow_Default_, f, this),
        SimConnection_SteamFlow_CrossSystem_ (x.SimConnection_SteamFlow_CrossSystem_, f, this),
        SimConnection_SteamFlow_Default_ (x.SimConnection_SteamFlow_Default_, f, this),
        SimConnection_VarRefrigerantFlow_Default_ (x.SimConnection_VarRefrigerantFlow_Default_, f, this),
        SimConnection_ZoneAirFlow_Default_ (x.SimConnection_ZoneAirFlow_Default_, f, this),
        SimConnection_ZoneAirFlow_ZoneCrossMixing_ (x.SimConnection_ZoneAirFlow_ZoneCrossMixing_, f, this),
        SimConnection_ZoneAirFlow_ZoneMixing_ (x.SimConnection_ZoneAirFlow_ZoneMixing_, f, this),
        SimConnectPointGeom_Point_Default_ (x.SimConnectPointGeom_Point_Default_, f, this),
        SimConnectPortGeom_Port_Default_ (x.SimConnectPortGeom_Port_Default_, f, this),
        SimConnectSurfaceGeom_Surface_Default_ (x.SimConnectSurfaceGeom_Surface_Default_, f, this),
        SimController_AvailabilityManager_AirLoop_ (x.SimController_AvailabilityManager_AirLoop_, f, this),
        SimController_AvailabilityManager_PlantLoop_ (x.SimController_AvailabilityManager_PlantLoop_, f, this),
        SimController_Daylighting_DELight_ (x.SimController_Daylighting_DELight_, f, this),
        SimController_Daylighting_Skylights_ (x.SimController_Daylighting_Skylights_, f, this),
        SimController_Daylighting_Standard_ (x.SimController_Daylighting_Standard_, f, this),
        SimController_Daylighting_Windows_ (x.SimController_Daylighting_Windows_, f, this),
        SimController_Default_Default_ (x.SimController_Default_Default_, f, this),
        SimController_DemandManager_AirLoop_ (x.SimController_DemandManager_AirLoop_, f, this),
        SimController_LightingControl_Continuous_ (x.SimController_LightingControl_Continuous_, f, this),
        SimController_LightingControl_ContinuousOff_ (x.SimController_LightingControl_ContinuousOff_, f, this),
        SimController_LightingControl_MotionSensor_ (x.SimController_LightingControl_MotionSensor_, f, this),
        SimController_LightingControl_On_Off_ (x.SimController_LightingControl_On_Off_, f, this),
        SimController_LightingControl_Stepped_ (x.SimController_LightingControl_Stepped_, f, this),
        SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_ (x.SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_, f, this),
        SimController_OperationManager_CondenserLoop_ (x.SimController_OperationManager_CondenserLoop_, f, this),
        SimController_OperationManager_PlantLoop_ (x.SimController_OperationManager_PlantLoop_, f, this),
        SimController_OutdoorAir_EconomizerControl_ (x.SimController_OutdoorAir_EconomizerControl_, f, this),
        SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_ (x.SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_, f, this),
        SimController_OutdoorAir_OutdoorAirPreconditioningController_ (x.SimController_OutdoorAir_OutdoorAirPreconditioningController_, f, this),
        SimController_Programmable_Default_ (x.SimController_Programmable_Default_, f, this),
        SimController_ShadingControl_Heating_CoolingLoads_ (x.SimController_ShadingControl_Heating_CoolingLoads_, f, this),
        SimController_ShadingControl_On_Off_ (x.SimController_ShadingControl_On_Off_, f, this),
        SimController_ShadingControl_WindowTemp_Solar_ (x.SimController_ShadingControl_WindowTemp_Solar_, f, this),
        SimController_SupplyAir_Humidity_ (x.SimController_SupplyAir_Humidity_, f, this),
        SimController_SupplyAir_Temperature_ (x.SimController_SupplyAir_Temperature_, f, this),
        SimController_SupplyWater_Temperature_ (x.SimController_SupplyWater_Temperature_, f, this),
        SimController_ThermalStorage_ThermalEnergyStorageTank_ (x.SimController_ThermalStorage_ThermalEnergyStorageTank_, f, this),
        SimController_Ventilation_ContaminantControl_ (x.SimController_Ventilation_ContaminantControl_, f, this),
        SimController_WaterCoil_Default_ (x.SimController_WaterCoil_Default_, f, this),
        SimController_ZoneControlHumidity_Humidistat_ (x.SimController_ZoneControlHumidity_Humidistat_, f, this),
        SimController_ZoneControlHumidity_Humidistat1Zone_ (x.SimController_ZoneControlHumidity_Humidistat1Zone_, f, this),
        SimController_ZoneControlTemperature_Thermostat_ (x.SimController_ZoneControlTemperature_Thermostat_, f, this),
        SimController_ZoneControlTemperature_Thermostat1Zone_ (x.SimController_ZoneControlTemperature_Thermostat1Zone_, f, this),
        SimController_ZoneControlTemperature_ThermostatStagedDual_ (x.SimController_ZoneControlTemperature_ThermostatStagedDual_, f, this),
        SimController_ZoneControlTemperature_ThermostatThermalComfort_ (x.SimController_ZoneControlTemperature_ThermostatThermalComfort_, f, this),
        SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_ (x.SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_, f, this),
        SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_ (x.SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_, f, this),
        SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_ (x.SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_, f, this),
        SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_ (x.SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_, f, this),
        SimControlScheme_AvailabilityManagerScheme_HybridVentilation_ (x.SimControlScheme_AvailabilityManagerScheme_HybridVentilation_, f, this),
        SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_ (x.SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_, f, this),
        SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_ (x.SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_, f, this),
        SimControlScheme_AvailabilityManagerScheme_NightCycle_ (x.SimControlScheme_AvailabilityManagerScheme_NightCycle_, f, this),
        SimControlScheme_AvailabilityManagerScheme_NightVentilation_ (x.SimControlScheme_AvailabilityManagerScheme_NightVentilation_, f, this),
        SimControlScheme_AvailabilityManagerScheme_OptimumStart_ (x.SimControlScheme_AvailabilityManagerScheme_OptimumStart_, f, this),
        SimControlScheme_AvailabilityManagerScheme_Scheduled_ (x.SimControlScheme_AvailabilityManagerScheme_Scheduled_, f, this),
        SimControlScheme_AvailabilityManagerScheme_ScheduledOff_ (x.SimControlScheme_AvailabilityManagerScheme_ScheduledOff_, f, this),
        SimControlScheme_AvailabilityManagerScheme_ScheduledOn_ (x.SimControlScheme_AvailabilityManagerScheme_ScheduledOn_, f, this),
        SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_ (x.SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_, f, this),
        SimControlScheme_ControlAndSequencingScheme_CoolingLoad_ (x.SimControlScheme_ControlAndSequencingScheme_CoolingLoad_, f, this),
        SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_ (x.SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_, f, this),
        SimControlScheme_ControlAndSequencingScheme_HeatingLoad_ (x.SimControlScheme_ControlAndSequencingScheme_HeatingLoad_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_ (x.SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_ (x.SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_ (x.SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_ (x.SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_ (x.SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_ (x.SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_, f, this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_ (x.SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_, f, this),
        SimControlScheme_ControlAndSequencingScheme_Uncontrolled_ (x.SimControlScheme_ControlAndSequencingScheme_Uncontrolled_, f, this),
        SimControlScheme_ControlAndSequencingScheme_UserDefined_ (x.SimControlScheme_ControlAndSequencingScheme_UserDefined_, f, this),
        SimControlScheme_DemandManagerScheme_ElectricEquipment_ (x.SimControlScheme_DemandManagerScheme_ElectricEquipment_, f, this),
        SimControlScheme_DemandManagerScheme_ExteriorLights_ (x.SimControlScheme_DemandManagerScheme_ExteriorLights_, f, this),
        SimControlScheme_DemandManagerScheme_Lights_ (x.SimControlScheme_DemandManagerScheme_Lights_, f, this),
        SimControlScheme_DemandManagerScheme_Thermostats_ (x.SimControlScheme_DemandManagerScheme_Thermostats_, f, this),
        SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_ (x.SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_, f, this),
        SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_ (x.SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_, f, this),
        SimControlScheme_EnergyManagementScheme_GlobalVairable_ (x.SimControlScheme_EnergyManagementScheme_GlobalVairable_, f, this),
        SimControlScheme_EnergyManagementScheme_InternalVariable_ (x.SimControlScheme_EnergyManagementScheme_InternalVariable_, f, this),
        SimControlScheme_EnergyManagementScheme_OutputVariable_ (x.SimControlScheme_EnergyManagementScheme_OutputVariable_, f, this),
        SimControlScheme_EnergyManagementScheme_Program_ (x.SimControlScheme_EnergyManagementScheme_Program_, f, this),
        SimControlScheme_EnergyManagementScheme_ProgramCallingManager_ (x.SimControlScheme_EnergyManagementScheme_ProgramCallingManager_, f, this),
        SimControlScheme_EnergyManagementScheme_Subroutine_ (x.SimControlScheme_EnergyManagementScheme_Subroutine_, f, this),
        SimControlScheme_EnergyManagementScheme_TrendVariable_ (x.SimControlScheme_EnergyManagementScheme_TrendVariable_, f, this),
        SimControlScheme_ExternalInterfaceExport_FromVariable_ (x.SimControlScheme_ExternalInterfaceExport_FromVariable_, f, this),
        SimControlScheme_ExternalInterfaceExport_ToActuator_ (x.SimControlScheme_ExternalInterfaceExport_ToActuator_, f, this),
        SimControlScheme_ExternalInterfaceExport_ToSchedule_ (x.SimControlScheme_ExternalInterfaceExport_ToSchedule_, f, this),
        SimControlScheme_ExternalInterfaceExport_ToVariable_ (x.SimControlScheme_ExternalInterfaceExport_ToVariable_, f, this),
        SimControlScheme_ExternalInterfaceImport_Default_ (x.SimControlScheme_ExternalInterfaceImport_Default_, f, this),
        SimControlScheme_ExternalInterfaceImport_FromVariable_ (x.SimControlScheme_ExternalInterfaceImport_FromVariable_, f, this),
        SimControlScheme_ExternalInterfaceImport_ToActuator_ (x.SimControlScheme_ExternalInterfaceImport_ToActuator_, f, this),
        SimControlScheme_ExternalInterfaceImport_ToSchedule_ (x.SimControlScheme_ExternalInterfaceImport_ToSchedule_, f, this),
        SimControlScheme_ExternalInterfaceImport_ToVariable_ (x.SimControlScheme_ExternalInterfaceImport_ToVariable_, f, this),
        SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_ (x.SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_ (x.SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_ (x.SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_, f, this),
        SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_ (x.SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_, f, this),
        SimControlScheme_OperatingScheme_UncontrolledOperationScheme_ (x.SimControlScheme_OperatingScheme_UncontrolledOperationScheme_, f, this),
        SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_ (x.SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_, f, this),
        SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_ (x.SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_, f, this),
        SimControlScheme_SetpointManagerScheme_ColdestZoneReset_ (x.SimControlScheme_SetpointManagerScheme_ColdestZoneReset_, f, this),
        SimControlScheme_SetpointManagerScheme_DuctStaticPressure_ (x.SimControlScheme_SetpointManagerScheme_DuctStaticPressure_, f, this),
        SimControlScheme_SetpointManagerScheme_EnteringReset_ (x.SimControlScheme_SetpointManagerScheme_EnteringReset_, f, this),
        SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_ (x.SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_, f, this),
        SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_ (x.SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_, f, this),
        SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_ (x.SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_, f, this),
        SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_ (x.SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_, f, this),
        SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_ (x.SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_, f, this),
        SimControlScheme_SetpointManagerScheme_MixedAir_ (x.SimControlScheme_SetpointManagerScheme_MixedAir_, f, this),
        SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_ (x.SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_, f, this),
        SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_ (x.SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_, f, this),
        SimControlScheme_SetpointManagerScheme_OutdoorAirReset_ (x.SimControlScheme_SetpointManagerScheme_OutdoorAirReset_, f, this),
        SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_ (x.SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_, f, this),
        SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_ (x.SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_, f, this),
        SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_ (x.SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_, f, this),
        SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_ (x.SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_, f, this),
        SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_ (x.SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Heating_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_Heating_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_, f, this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_ (x.SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_, f, this),
        SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_ (x.SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_, f, this),
        SimControlScheme_SetpointManagerScheme_WarmestZoneReset_ (x.SimControlScheme_SetpointManagerScheme_WarmestZoneReset_, f, this),
        SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_ (x.SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_, f, this),
        SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_ (x.SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_, f, this),
        SimControlScheme_SetpointScheme_DualSetpoint_ (x.SimControlScheme_SetpointScheme_DualSetpoint_, f, this),
        SimControlScheme_SetpointScheme_SingleCooling_ (x.SimControlScheme_SetpointScheme_SingleCooling_, f, this),
        SimControlScheme_SetpointScheme_SingleHeating_ (x.SimControlScheme_SetpointScheme_SingleHeating_, f, this),
        SimControlScheme_SetpointScheme_SingleHeatingOrCooling_ (x.SimControlScheme_SetpointScheme_SingleHeatingOrCooling_, f, this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_ (x.SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_, f, this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_ (x.SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_, f, this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_ (x.SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_, f, this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_ (x.SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_, f, this),
        SimCost_ComponentCost_Adjustments_ (x.SimCost_ComponentCost_Adjustments_, f, this),
        SimCost_ComponentCost_LineItem_ (x.SimCost_ComponentCost_LineItem_, f, this),
        SimCost_ComponentCost_Reference_ (x.SimCost_ComponentCost_Reference_, f, this),
        SimCost_Default_Default_ (x.SimCost_Default_Default_, f, this),
        SimCost_LifeCycleCost_NonrecurringCost_ (x.SimCost_LifeCycleCost_NonrecurringCost_, f, this),
        SimCost_LifeCycleCost_Parameters_ (x.SimCost_LifeCycleCost_Parameters_, f, this),
        SimCost_LifeCycleCost_RecurringCosts_ (x.SimCost_LifeCycleCost_RecurringCosts_, f, this),
        SimCost_LifeCycleCost_UseAdjustment_ (x.SimCost_LifeCycleCost_UseAdjustment_, f, this),
        SimCost_LifeCycleCost_UsePriceEscalation_ (x.SimCost_LifeCycleCost_UsePriceEscalation_, f, this),
        SimCost_UtilityCost_ChargeBlock_ (x.SimCost_UtilityCost_ChargeBlock_, f, this),
        SimCost_UtilityCost_ChargeSimple_ (x.SimCost_UtilityCost_ChargeSimple_, f, this),
        SimCost_UtilityCost_CostRatchet_ (x.SimCost_UtilityCost_CostRatchet_, f, this),
        SimCost_UtilityCost_CostVariable_ (x.SimCost_UtilityCost_CostVariable_, f, this),
        SimCost_UtilityCost_Qualify_ (x.SimCost_UtilityCost_Qualify_, f, this),
        SimCost_UtilityCost_Tariff_ (x.SimCost_UtilityCost_Tariff_, f, this),
        SimCurtainWall_CurtainWall_Default_ (x.SimCurtainWall_CurtainWall_Default_, f, this),
        SimCurtainWallParams_CurtainWall_Default_ (x.SimCurtainWallParams_CurtainWall_Default_, f, this),
        SimCurtainWallType_CurtainWall_Default_ (x.SimCurtainWallType_CurtainWall_Default_, f, this),
        SimCurveStyle_CurveStyle_Default_ (x.SimCurveStyle_CurveStyle_Default_, f, this),
        SimCurveStyle_CurveStyle_Font_ (x.SimCurveStyle_CurveStyle_Font_, f, this),
        SimCurveStyle_CurveStyle_FontAndScaling_ (x.SimCurveStyle_CurveStyle_FontAndScaling_, f, this),
        SimCurveStyle_CurveStyle_FontPattern_ (x.SimCurveStyle_CurveStyle_FontPattern_, f, this),
        SimDaylightingAssembly_DaylightingAssembly_LightShelf_ (x.SimDaylightingAssembly_DaylightingAssembly_LightShelf_, f, this),
        SimDaylightingAssembly_DaylightingAssembly_LightTube_ (x.SimDaylightingAssembly_DaylightingAssembly_LightTube_, f, this),
        SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_ (x.SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_, f, this),
        SimDaylightingAssembly_DaylightingAssembly_LightWell_ (x.SimDaylightingAssembly_DaylightingAssembly_LightWell_, f, this),
        SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_ (x.SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_, f, this),
        SimDerivedUnitType_DerivedUnit_Default_ (x.SimDerivedUnitType_DerivedUnit_Default_, f, this),
        SimDistributionPort_AirFlowPort_Air_In_ (x.SimDistributionPort_AirFlowPort_Air_In_, f, this),
        SimDistributionPort_AirFlowPort_Air_InOrOut_ (x.SimDistributionPort_AirFlowPort_Air_InOrOut_, f, this),
        SimDistributionPort_AirFlowPort_Air_Out_ (x.SimDistributionPort_AirFlowPort_Air_Out_, f, this),
        SimDistributionPort_AirFlowPort_Default_ (x.SimDistributionPort_AirFlowPort_Default_, f, this),
        SimDistributionPort_AirFlowPort_ExhaustAir_Out_ (x.SimDistributionPort_AirFlowPort_ExhaustAir_Out_, f, this),
        SimDistributionPort_AirFlowPort_OutdoorAir_In_ (x.SimDistributionPort_AirFlowPort_OutdoorAir_In_, f, this),
        SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_ (x.SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_, f, this),
        SimDistributionPort_ChilledWaterFlowPort_Default_ (x.SimDistributionPort_ChilledWaterFlowPort_Default_, f, this),
        SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_ (x.SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimDistributionPort_ChilledWaterFlowPort_Water_In_ (x.SimDistributionPort_ChilledWaterFlowPort_Water_In_, f, this),
        SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_ (x.SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_, f, this),
        SimDistributionPort_ChilledWaterFlowPort_Water_Out_ (x.SimDistributionPort_ChilledWaterFlowPort_Water_Out_, f, this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_In_ (x.SimDistributionPort_CondenserFlowPort_CondenserFlow_In_, f, this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_ (x.SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_, f, this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_ (x.SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_, f, this),
        SimDistributionPort_CondenserFlowPort_Default_ (x.SimDistributionPort_CondenserFlowPort_Default_, f, this),
        SimDistributionPort_DigitalControl_AirLoop_Default_ (x.SimDistributionPort_DigitalControl_AirLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_CHWLoop_Default_ (x.SimDistributionPort_DigitalControl_CHWLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_CWLoop_Default_ (x.SimDistributionPort_DigitalControl_CWLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_HWLoop_Default_ (x.SimDistributionPort_DigitalControl_HWLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_MxWLoop_Default_ (x.SimDistributionPort_DigitalControl_MxWLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_RFGLoop_Default_ (x.SimDistributionPort_DigitalControl_RFGLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_SHWLoop_Default_ (x.SimDistributionPort_DigitalControl_SHWLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_STMLoop_Default_ (x.SimDistributionPort_DigitalControl_STMLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControl_VRFLoop_Default_ (x.SimDistributionPort_DigitalControl_VRFLoop_Default_, f, this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_ (x.SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControlPort_Default_ (x.SimDistributionPort_DigitalControlPort_Default_, f, this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_In_ (x.SimDistributionPort_DigitalControlPort_DigitalSignal_In_, f, this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_ (x.SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_, f, this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_Out_ (x.SimDistributionPort_DigitalControlPort_DigitalSignal_Out_, f, this),
        SimDistributionPort_DigitalControlPort_DigitalVirtual_ (x.SimDistributionPort_DigitalControlPort_DigitalVirtual_, f, this),
        SimDistributionPort_DistributionPort_Default_ (x.SimDistributionPort_DistributionPort_Default_, f, this),
        SimDistributionPort_ElectricalFlowPort_Default_ (x.SimDistributionPort_ElectricalFlowPort_Default_, f, this),
        SimDistributionPort_ElectricalFlowPort_Electrical_In_ (x.SimDistributionPort_ElectricalFlowPort_Electrical_In_, f, this),
        SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_ (x.SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_, f, this),
        SimDistributionPort_ElectricalFlowPort_Electrical_Out_ (x.SimDistributionPort_ElectricalFlowPort_Electrical_Out_, f, this),
        SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_ (x.SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_, f, this),
        SimDistributionPort_HotWaterFlowPort_Default_ (x.SimDistributionPort_HotWaterFlowPort_Default_, f, this),
        SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_ (x.SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimDistributionPort_HotWaterFlowPort_Water_In_ (x.SimDistributionPort_HotWaterFlowPort_Water_In_, f, this),
        SimDistributionPort_HotWaterFlowPort_Water_InOrOut_ (x.SimDistributionPort_HotWaterFlowPort_Water_InOrOut_, f, this),
        SimDistributionPort_HotWaterFlowPort_Water_Out_ (x.SimDistributionPort_HotWaterFlowPort_Water_Out_, f, this),
        SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_ (x.SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_, f, this),
        SimDistributionPort_MixedWaterFlowPort_Default_ (x.SimDistributionPort_MixedWaterFlowPort_Default_, f, this),
        SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_ (x.SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimDistributionPort_MixedWaterFlowPort_Water_In_ (x.SimDistributionPort_MixedWaterFlowPort_Water_In_, f, this),
        SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_ (x.SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_, f, this),
        SimDistributionPort_MixedWaterFlowPort_Water_Out_ (x.SimDistributionPort_MixedWaterFlowPort_Water_Out_, f, this),
        SimDistributionPort_RefrigerationFlowPort_Default_ (x.SimDistributionPort_RefrigerationFlowPort_Default_, f, this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_ (x.SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_, f, this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_ (x.SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_, f, this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_ (x.SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_, f, this),
        SimDistributionPort_ServiceHotWaterFlowPort_Default_ (x.SimDistributionPort_ServiceHotWaterFlowPort_Default_, f, this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_In_ (x.SimDistributionPort_ServiceHotWaterFlowPort_Water_In_, f, this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_ (x.SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_, f, this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_ (x.SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_, f, this),
        SimDistributionPort_SteamFlowPort_Default_ (x.SimDistributionPort_SteamFlowPort_Default_, f, this),
        SimDistributionPort_SteamFlowPort_Steam_In_ (x.SimDistributionPort_SteamFlowPort_Steam_In_, f, this),
        SimDistributionPort_SteamFlowPort_Steam_InOrOut_ (x.SimDistributionPort_SteamFlowPort_Steam_InOrOut_, f, this),
        SimDistributionPort_SteamFlowPort_Steam_Out_ (x.SimDistributionPort_SteamFlowPort_Steam_Out_, f, this),
        SimDistributionPort_VarRefrigerantFlowPort_Default_ (x.SimDistributionPort_VarRefrigerantFlowPort_Default_, f, this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_In_ (x.SimDistributionPort_VarRefrigerantFlowPort_VRF_In_, f, this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_ (x.SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_, f, this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_ (x.SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_, f, this),
        SimDistributionPort_ZoneAirFlowPort_Air_In_ (x.SimDistributionPort_ZoneAirFlowPort_Air_In_, f, this),
        SimDistributionPort_ZoneAirFlowPort_Air_Out_ (x.SimDistributionPort_ZoneAirFlowPort_Air_Out_, f, this),
        SimDoor_Default_Default_ (x.SimDoor_Default_Default_, f, this),
        SimDoor_GlazedDoor_Exterior_ (x.SimDoor_GlazedDoor_Exterior_, f, this),
        SimDoor_GlazedDoor_ExteriorDetailed_ (x.SimDoor_GlazedDoor_ExteriorDetailed_, f, this),
        SimDoor_GlazedDoor_Interior_ (x.SimDoor_GlazedDoor_Interior_, f, this),
        SimDoor_OpaqueDoor_Exterior_ (x.SimDoor_OpaqueDoor_Exterior_, f, this),
        SimDoor_OpaqueDoor_ExteriorDetailed_ (x.SimDoor_OpaqueDoor_ExteriorDetailed_, f, this),
        SimDoor_OpaqueDoor_Interior_ (x.SimDoor_OpaqueDoor_Interior_, f, this),
        SimDoorArrayParams_DoorArray_Default_ (x.SimDoorArrayParams_DoorArray_Default_, f, this),
        SimDoorLiningProps_DoorLiningProps_Default_ (x.SimDoorLiningProps_DoorLiningProps_Default_, f, this),
        SimDoorPanelProps_DoorPanelProps_Default_ (x.SimDoorPanelProps_DoorPanelProps_Default_, f, this),
        SimDoorParams_Door_Default_ (x.SimDoorParams_Door_Default_, f, this),
        SimDoorType_Door_Default_ (x.SimDoorType_Door_Default_, f, this),
        SimDwgXrefParams_DwgXref_Default_ (x.SimDwgXrefParams_DwgXref_Default_, f, this),
        SimEdge_Edge_EdgeCurve_ (x.SimEdge_Edge_EdgeCurve_, f, this),
        SimEdge_Edge_OrientedEdge_ (x.SimEdge_Edge_OrientedEdge_, f, this),
        SimEdge_Edge_Subedge_ (x.SimEdge_Edge_Subedge_, f, this),
        SimElementQuantity_ElementQuantity_Default_ (x.SimElementQuantity_ElementQuantity_Default_, f, this),
        SimExtendedMaterialProps_ExtendedMatlProps_Default_ (x.SimExtendedMaterialProps_ExtendedMatlProps_Default_, f, this),
        SimExternalReference_Default_Default_ (x.SimExternalReference_Default_Default_, f, this),
        SimExternalReference_DocumentReference_Default_ (x.SimExternalReference_DocumentReference_Default_, f, this),
        SimExternalReference_ExternalReference_Default_ (x.SimExternalReference_ExternalReference_Default_, f, this),
        SimExternalReference_LibraryReference_Default_ (x.SimExternalReference_LibraryReference_Default_, f, this),
        SimExternalReference_PropertyReference_Default_ (x.SimExternalReference_PropertyReference_Default_, f, this),
        SimFace_Face_Default_ (x.SimFace_Face_Default_, f, this),
        SimFace_Face_FaceSurface_ (x.SimFace_Face_FaceSurface_, f, this),
        SimFaceBound_FaceBound_Default_ (x.SimFaceBound_FaceBound_Default_, f, this),
        SimFaceBound_FaceBound_FaceOuterBound_ (x.SimFaceBound_FaceBound_FaceOuterBound_, f, this),
        SimFeatureAirFlowNetwork_Default_Default_ (x.SimFeatureAirFlowNetwork_Default_Default_, f, this),
        SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_ (x.SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_, f, this),
        SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_ (x.SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_, f, this),
        SimFeatureAirFlowNetwork_Opening_Default_ (x.SimFeatureAirFlowNetwork_Opening_Default_, f, this),
        SimFeatureAirFlowNetwork_Opening_Detailed_ (x.SimFeatureAirFlowNetwork_Opening_Detailed_, f, this),
        SimFeatureAirFlowNetwork_Opening_Horizontal_ (x.SimFeatureAirFlowNetwork_Opening_Horizontal_, f, this),
        SimFeatureAirFlowNetwork_Opening_Simple_ (x.SimFeatureAirFlowNetwork_Opening_Simple_, f, this),
        SimFeatureAirFlowNetwork_Surface_Default_ (x.SimFeatureAirFlowNetwork_Surface_Default_, f, this),
        SimFeatureAirFlowNetwork_SurfaceCrack_Default_ (x.SimFeatureAirFlowNetwork_SurfaceCrack_Default_, f, this),
        SimFeatureAirFlowNetwork_Zone_Default_ (x.SimFeatureAirFlowNetwork_Zone_Default_, f, this),
        SimFeatureElementAddition_ProjectionElement_Default_ (x.SimFeatureElementAddition_ProjectionElement_Default_, f, this),
        SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_ (x.SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_, f, this),
        SimFeatureElementSubtraction_EdgeFeature_Default_ (x.SimFeatureElementSubtraction_EdgeFeature_Default_, f, this),
        SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_ (x.SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_, f, this),
        SimFeatureElementSubtraction_SlotFeature_Default_ (x.SimFeatureElementSubtraction_SlotFeature_Default_, f, this),
        SimFeatureElementSubtraction_Void_Opening_ (x.SimFeatureElementSubtraction_Void_Opening_, f, this),
        SimFlowCompoundEqmt_DistrictSupply_Cooling_ (x.SimFlowCompoundEqmt_DistrictSupply_Cooling_, f, this),
        SimFlowCompoundEqmt_DistrictSupply_Heating_ (x.SimFlowCompoundEqmt_DistrictSupply_Heating_, f, this),
        SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_ (x.SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_, f, this),
        SimFlowCompoundEqmt_PurchasedSupply_Cooling_ (x.SimFlowCompoundEqmt_PurchasedSupply_Cooling_, f, this),
        SimFlowCompoundEqmt_PurchasedSupply_Heating_ (x.SimFlowCompoundEqmt_PurchasedSupply_Heating_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_, f, this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_ (x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_, f, this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_ (x.SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_, f, this),
        SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_ (x.SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_, f, this),
        SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_ (x.SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_, f, this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_ (x.SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_, f, this),
        SimFlowController_Damper_Default_ (x.SimFlowController_Damper_Default_, f, this),
        SimFlowController_Damper_Exhaust_ (x.SimFlowController_Damper_Exhaust_, f, this),
        SimFlowController_Damper_FaceBypass_ (x.SimFlowController_Damper_FaceBypass_, f, this),
        SimFlowController_Damper_MixedAir_ (x.SimFlowController_Damper_MixedAir_, f, this),
        SimFlowController_Damper_OutsideAir_ (x.SimFlowController_Damper_OutsideAir_, f, this),
        SimFlowController_Damper_Recirculation_ (x.SimFlowController_Damper_Recirculation_, f, this),
        SimFlowController_Damper_Relief_ (x.SimFlowController_Damper_Relief_, f, this),
        SimFlowController_Default_Default_ (x.SimFlowController_Default_Default_, f, this),
        SimFlowController_ElectricalSwitch_On_Off_ (x.SimFlowController_ElectricalSwitch_On_Off_, f, this),
        SimFlowController_ElectricalSwitch_Variable_ (x.SimFlowController_ElectricalSwitch_Variable_, f, this),
        SimFlowController_Valve_Default_ (x.SimFlowController_Valve_Default_, f, this),
        SimFlowController_Valve_EMSValve_ (x.SimFlowController_Valve_EMSValve_, f, this),
        SimFlowController_Valve_NonReturnValve_ (x.SimFlowController_Valve_NonReturnValve_, f, this),
        SimFlowController_Valve_TemperingValve_ (x.SimFlowController_Valve_TemperingValve_, f, this),
        SimFlowEnergyTransfer_ConvectiveHeater_Electric_ (x.SimFlowEnergyTransfer_ConvectiveHeater_Electric_, f, this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_ (x.SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_, f, this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_ (x.SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_, f, this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_ (x.SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_, f, this),
        SimFlowEnergyTransfer_ConvectiveHeater_Water_ (x.SimFlowEnergyTransfer_ConvectiveHeater_Water_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_, f, this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_ (x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_, f, this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_ (x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_, f, this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_ (x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_, f, this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_ (x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_, f, this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_ (x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_, f, this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ (x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_, f, this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_ (x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_, f, this),
        SimFlowEnergyTransfer_Dehumidifier_Default_ (x.SimFlowEnergyTransfer_Dehumidifier_Default_, f, this),
        SimFlowEnergyTransfer_Dehumidifier_NoFans_ (x.SimFlowEnergyTransfer_Dehumidifier_NoFans_, f, this),
        SimFlowEnergyTransfer_Economizer_AirToAir_ (x.SimFlowEnergyTransfer_Economizer_AirToAir_, f, this),
        SimFlowEnergyTransfer_Electrical_Transformer_ (x.SimFlowEnergyTransfer_Electrical_Transformer_, f, this),
        SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_ (x.SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_, f, this),
        SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_ (x.SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_, f, this),
        SimFlowEnergyTransfer_ElectricalInverter_Simple_ (x.SimFlowEnergyTransfer_ElectricalInverter_Simple_, f, this),
        SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_ (x.SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_, f, this),
        SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_ (x.SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_, f, this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_ (x.SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_, f, this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_ (x.SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_, f, this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_ (x.SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_, f, this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_ (x.SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_ (x.SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_ (x.SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_ (x.SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_ (x.SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_ (x.SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_ (x.SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_, f, this),
        SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_ (x.SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_, f, this),
        SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_ (x.SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_, f, this),
        SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_ (x.SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_, f, this),
        SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_ (x.SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_, f, this),
        SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_ (x.SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_, f, this),
        SimFlowEnergyTransfer_HeatExEarthToWater_Surface_ (x.SimFlowEnergyTransfer_HeatExEarthToWater_Surface_, f, this),
        SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_ (x.SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_, f, this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_ (x.SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_, f, this),
        SimFlowEnergyTransfer_HeatExWaterToWater_Pond_ (x.SimFlowEnergyTransfer_HeatExWaterToWater_Pond_, f, this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_ (x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_, f, this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_ (x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_, f, this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_ (x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_, f, this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_ (x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_, f, this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_ (x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_, f, this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_ (x.SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_, f, this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_ (x.SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_, f, this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_ (x.SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_, f, this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_ (x.SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_, f, this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_ (x.SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_, f, this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_ (x.SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_, f, this),
        SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_ (x.SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_, f, this),
        SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_ (x.SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_, f, this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_ (x.SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_, f, this),
        SimFlowEnergyTransfer_Humidifier_ElectricSteam_ (x.SimFlowEnergyTransfer_Humidifier_ElectricSteam_, f, this),
        SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_ (x.SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_Beam_ (x.SimFlowEnergyTransfer_RadiantDevice_Beam_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_ (x.SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_ (x.SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_ (x.SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_ (x.SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_ (x.SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_ (x.SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_HighTemp_ (x.SimFlowEnergyTransfer_RadiantDevice_HighTemp_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_ (x.SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_, f, this),
        SimFlowEnergyTransfer_RadiantDevice_Slab_ (x.SimFlowEnergyTransfer_RadiantDevice_Slab_, f, this),
        SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_ (x.SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_, f, this),
        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_ (x.SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_, f, this),
        SimFlowEnergyTransferStorage_HotWaterTank_Mixed_ (x.SimFlowEnergyTransferStorage_HotWaterTank_Mixed_, f, this),
        SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_ (x.SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_, f, this),
        SimFlowEnergyTransferStorage_HotWaterTank_Stratified_ (x.SimFlowEnergyTransferStorage_HotWaterTank_Stratified_, f, this),
        SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_ (x.SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_, f, this),
        SimFlowFitting_Default_Default_ (x.SimFlowFitting_Default_Default_, f, this),
        SimFlowFitting_Difusser_Default_ (x.SimFlowFitting_Difusser_Default_, f, this),
        SimFlowFitting_Electrical_Transformer_ (x.SimFlowFitting_Electrical_Transformer_, f, this),
        SimFlowFitting_FlowElementProxy_Default_ (x.SimFlowFitting_FlowElementProxy_Default_, f, this),
        SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_ (x.SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_, f, this),
        SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_ (x.SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_, f, this),
        SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_ (x.SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_, f, this),
        SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_ (x.SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_, f, this),
        SimFlowFitting_Mixer_AirMixer_ (x.SimFlowFitting_Mixer_AirMixer_, f, this),
        SimFlowFitting_Mixer_AirMixerOutdoor_ (x.SimFlowFitting_Mixer_AirMixerOutdoor_, f, this),
        SimFlowFitting_Mixer_AirMixerZoneReturn_ (x.SimFlowFitting_Mixer_AirMixerZoneReturn_, f, this),
        SimFlowFitting_Mixer_CondenserMixer_ (x.SimFlowFitting_Mixer_CondenserMixer_, f, this),
        SimFlowFitting_Mixer_DemandProxyMixer_ (x.SimFlowFitting_Mixer_DemandProxyMixer_, f, this),
        SimFlowFitting_Mixer_DemandProxyMixerAir_ (x.SimFlowFitting_Mixer_DemandProxyMixerAir_, f, this),
        SimFlowFitting_Mixer_DemandProxyMixerWater_ (x.SimFlowFitting_Mixer_DemandProxyMixerWater_, f, this),
        SimFlowFitting_Mixer_SteamMixer_ (x.SimFlowFitting_Mixer_SteamMixer_, f, this),
        SimFlowFitting_Mixer_WaterMixer_ (x.SimFlowFitting_Mixer_WaterMixer_, f, this),
        SimFlowFitting_Splitter_AirSplitter_ (x.SimFlowFitting_Splitter_AirSplitter_, f, this),
        SimFlowFitting_Splitter_AirSplitterZoneSupply_ (x.SimFlowFitting_Splitter_AirSplitterZoneSupply_, f, this),
        SimFlowFitting_Splitter_CondenserSplitter_ (x.SimFlowFitting_Splitter_CondenserSplitter_, f, this),
        SimFlowFitting_Splitter_DemandProxySplitter_ (x.SimFlowFitting_Splitter_DemandProxySplitter_, f, this),
        SimFlowFitting_Splitter_DemandProxySplitterAir_ (x.SimFlowFitting_Splitter_DemandProxySplitterAir_, f, this),
        SimFlowFitting_Splitter_DemandProxySplitterWater_ (x.SimFlowFitting_Splitter_DemandProxySplitterWater_, f, this),
        SimFlowFitting_Splitter_SteamSplitter_ (x.SimFlowFitting_Splitter_SteamSplitter_, f, this),
        SimFlowFitting_Splitter_WaterSplitter_ (x.SimFlowFitting_Splitter_WaterSplitter_, f, this),
        SimFlowMover_Default_Default_ (x.SimFlowMover_Default_Default_, f, this),
        SimFlowMover_Fan_NightVentilation_ (x.SimFlowMover_Fan_NightVentilation_, f, this),
        SimFlowMover_Fan_Relief_ (x.SimFlowMover_Fan_Relief_, f, this),
        SimFlowMover_Fan_ZoneExhaust_ (x.SimFlowMover_Fan_ZoneExhaust_, f, this),
        SimFlowMover_Pump_ConstantSpeedReturn_ (x.SimFlowMover_Pump_ConstantSpeedReturn_, f, this),
        SimFlowMover_Pump_ConstantSpeedSupply_ (x.SimFlowMover_Pump_ConstantSpeedSupply_, f, this),
        SimFlowMover_Pump_UserDefined_ (x.SimFlowMover_Pump_UserDefined_, f, this),
        SimFlowMover_Pump_VariableSpeedReturn_ (x.SimFlowMover_Pump_VariableSpeedReturn_, f, this),
        SimFlowMover_Pump_VariableSpeedSupply_ (x.SimFlowMover_Pump_VariableSpeedSupply_, f, this),
        SimFlowMover_Pump_VarSpeedCondensateReturn_ (x.SimFlowMover_Pump_VarSpeedCondensateReturn_, f, this),
        SimFlowMover_Pump_VarSpeedCondensateSupply_ (x.SimFlowMover_Pump_VarSpeedCondensateSupply_, f, this),
        SimFlowMover_PumpSet_ConstantSpeed2_ (x.SimFlowMover_PumpSet_ConstantSpeed2_, f, this),
        SimFlowMover_PumpSet_ConstantSpeed3_ (x.SimFlowMover_PumpSet_ConstantSpeed3_, f, this),
        SimFlowMover_PumpSet_VariableSpeed2_ (x.SimFlowMover_PumpSet_VariableSpeed2_, f, this),
        SimFlowMover_PumpSet_VariableSpeed3_ (x.SimFlowMover_PumpSet_VariableSpeed3_, f, this),
        SimFlowMover_ReturnFan_ComponentModel_ (x.SimFlowMover_ReturnFan_ComponentModel_, f, this),
        SimFlowMover_ReturnFan_ConstantVolume_ (x.SimFlowMover_ReturnFan_ConstantVolume_, f, this),
        SimFlowMover_ReturnFan_OnOff_ (x.SimFlowMover_ReturnFan_OnOff_, f, this),
        SimFlowMover_ReturnFan_VariableVolume_ (x.SimFlowMover_ReturnFan_VariableVolume_, f, this),
        SimFlowMover_SupplyFan_ComponentModel_ (x.SimFlowMover_SupplyFan_ComponentModel_, f, this),
        SimFlowMover_SupplyFan_ConstantVolume_ (x.SimFlowMover_SupplyFan_ConstantVolume_, f, this),
        SimFlowMover_SupplyFan_OnOff_ (x.SimFlowMover_SupplyFan_OnOff_, f, this),
        SimFlowMover_SupplyFan_VariableVolume_ (x.SimFlowMover_SupplyFan_VariableVolume_, f, this),
        SimFlowPlant_Boiler_BoilerHotWater_ (x.SimFlowPlant_Boiler_BoilerHotWater_, f, this),
        SimFlowPlant_Boiler_BoilerSteam_ (x.SimFlowPlant_Boiler_BoilerSteam_, f, this),
        SimFlowPlant_Boiler_UserDefined_ (x.SimFlowPlant_Boiler_UserDefined_, f, this),
        SimFlowPlant_Chiller_Absorption_ (x.SimFlowPlant_Chiller_Absorption_, f, this),
        SimFlowPlant_Chiller_AbsorptionIndirect_ (x.SimFlowPlant_Chiller_AbsorptionIndirect_, f, this),
        SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_ (x.SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_, f, this),
        SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_ (x.SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_, f, this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ (x.SimFlowPlant_Chiller_ChillerVaporCompressionElectric_, f, this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_ (x.SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_, f, this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_ (x.SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_, f, this),
        SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_ (x.SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_, f, this),
        SimFlowPlant_Chiller_UserDefined_ (x.SimFlowPlant_Chiller_UserDefined_, f, this),
        SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_ (x.SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_, f, this),
        SimFlowPlant_ChillerHeater_AbsorptionDirectFired_ (x.SimFlowPlant_ChillerHeater_AbsorptionDirectFired_, f, this),
        SimFlowPlant_ChillerHeater_PerformanceElectricEIR_ (x.SimFlowPlant_ChillerHeater_PerformanceElectricEIR_, f, this),
        SimFlowPlant_CoolingTower_SingleSpeed_ (x.SimFlowPlant_CoolingTower_SingleSpeed_, f, this),
        SimFlowPlant_CoolingTower_TwoSpeed_ (x.SimFlowPlant_CoolingTower_TwoSpeed_, f, this),
        SimFlowPlant_CoolingTower_UserDefined_ (x.SimFlowPlant_CoolingTower_UserDefined_, f, this),
        SimFlowPlant_CoolingTower_VariableSpeed_ (x.SimFlowPlant_CoolingTower_VariableSpeed_, f, this),
        SimFlowPlant_CoolingTower_VariableSpeed_Merkel_ (x.SimFlowPlant_CoolingTower_VariableSpeed_Merkel_, f, this),
        SimFlowPlant_ElectricalGenerator_CombustionTurbine_ (x.SimFlowPlant_ElectricalGenerator_CombustionTurbine_, f, this),
        SimFlowPlant_ElectricalGenerator_DefaultGenerator_ (x.SimFlowPlant_ElectricalGenerator_DefaultGenerator_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCell_ (x.SimFlowPlant_ElectricalGenerator_FuelCell_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_ (x.SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_ (x.SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_ (x.SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_ (x.SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellInverter_ (x.SimFlowPlant_ElectricalGenerator_FuelCellInverter_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_ (x.SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_ (x.SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_ (x.SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelEquipment_ (x.SimFlowPlant_ElectricalGenerator_FuelEquipment_, f, this),
        SimFlowPlant_ElectricalGenerator_FuelSupply_ (x.SimFlowPlant_ElectricalGenerator_FuelSupply_, f, this),
        SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_ (x.SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_, f, this),
        SimFlowPlant_ElectricalGenerator_MicroCHP_ (x.SimFlowPlant_ElectricalGenerator_MicroCHP_, f, this),
        SimFlowPlant_ElectricalGenerator_MicroTurbine_ (x.SimFlowPlant_ElectricalGenerator_MicroTurbine_, f, this),
        SimFlowPlant_ElectricalGenerator_Photovoltaic_ (x.SimFlowPlant_ElectricalGenerator_Photovoltaic_, f, this),
        SimFlowPlant_ElectricalGenerator_WindTurbine_ (x.SimFlowPlant_ElectricalGenerator_WindTurbine_, f, this),
        SimFlowPlant_HeatAndPower_Default_ (x.SimFlowPlant_HeatAndPower_Default_, f, this),
        SimFlowPlant_HeatExWaterToWater_Pond_ (x.SimFlowPlant_HeatExWaterToWater_Pond_, f, this),
        SimFlowPlant_HeatPump_AirToAir_ (x.SimFlowPlant_HeatPump_AirToAir_, f, this),
        SimFlowPlant_HeatPump_AirToAir_MultiSpeed_ (x.SimFlowPlant_HeatPump_AirToAir_MultiSpeed_, f, this),
        SimFlowPlant_HeatPump_CentralSystem_ (x.SimFlowPlant_HeatPump_CentralSystem_, f, this),
        SimFlowPlant_HeatPump_GroundSource_ (x.SimFlowPlant_HeatPump_GroundSource_, f, this),
        SimFlowPlant_HeatPump_WaterToAir_ (x.SimFlowPlant_HeatPump_WaterToAir_, f, this),
        SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_ (x.SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_, f, this),
        SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_ (x.SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_, f, this),
        SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_ (x.SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_, f, this),
        SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_ (x.SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_, f, this),
        SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_ (x.SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_, f, this),
        SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_ (x.SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_, f, this),
        SimFlowPlant_SolarDevice_SolarPhotoVoltaic_ (x.SimFlowPlant_SolarDevice_SolarPhotoVoltaic_, f, this),
        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_ (x.SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_, f, this),
        SimFlowPlant_SolarDevice_SolarThermalAir_ (x.SimFlowPlant_SolarDevice_SolarThermalAir_, f, this),
        SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_ (x.SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_, f, this),
        SimFlowPlant_SolarDevice_SolarThermalWater_ (x.SimFlowPlant_SolarDevice_SolarThermalWater_, f, this),
        SimFlowSegment_Default_Default_ (x.SimFlowSegment_Default_Default_, f, this),
        SimFlowSegment_Duct_AirFlowNetworkDistribution_ (x.SimFlowSegment_Duct_AirFlowNetworkDistribution_, f, this),
        SimFlowSegment_Duct_Default_ (x.SimFlowSegment_Duct_Default_, f, this),
        SimFlowSegment_Filter_Bag_ (x.SimFlowSegment_Filter_Bag_, f, this),
        SimFlowSegment_Filter_Default_ (x.SimFlowSegment_Filter_Default_, f, this),
        SimFlowSegment_Filter_Electrostatic_ (x.SimFlowSegment_Filter_Electrostatic_, f, this),
        SimFlowSegment_Filter_HEPA_ (x.SimFlowSegment_Filter_HEPA_, f, this),
        SimFlowSegment_Filter_Panel_ (x.SimFlowSegment_Filter_Panel_, f, this),
        SimFlowSegment_Grill_Return_ (x.SimFlowSegment_Grill_Return_, f, this),
        SimFlowSegment_Grill_Supply_ (x.SimFlowSegment_Grill_Supply_, f, this),
        SimFlowSegment_Louver_Default_ (x.SimFlowSegment_Louver_Default_, f, this),
        SimFlowSegment_Louver_Exhaust_ (x.SimFlowSegment_Louver_Exhaust_, f, this),
        SimFlowSegment_Louver_Intake_ (x.SimFlowSegment_Louver_Intake_, f, this),
        SimFlowSegment_Louver_Safety_ (x.SimFlowSegment_Louver_Safety_, f, this),
        SimFlowSegment_Louver_Ventilation_ (x.SimFlowSegment_Louver_Ventilation_, f, this),
        SimFlowSegment_Pipe_Adiabatic_ (x.SimFlowSegment_Pipe_Adiabatic_, f, this),
        SimFlowSegment_Pipe_Adiabatic_Steam_ (x.SimFlowSegment_Pipe_Adiabatic_Steam_, f, this),
        SimFlowSegment_Pipe_Indoor_ (x.SimFlowSegment_Pipe_Indoor_, f, this),
        SimFlowSegment_Pipe_Outdoor_ (x.SimFlowSegment_Pipe_Outdoor_, f, this),
        SimFlowSegment_Pipe_Underground_ (x.SimFlowSegment_Pipe_Underground_, f, this),
        SimFlowSegment_Pipe_UndergroundPipeCircuit_ (x.SimFlowSegment_Pipe_UndergroundPipeCircuit_, f, this),
        SimFlowSegment_Pipe_UndergroundPipeSegment_ (x.SimFlowSegment_Pipe_UndergroundPipeSegment_, f, this),
        SimFlowSegment_Plenum_DedicatedReturn_ (x.SimFlowSegment_Plenum_DedicatedReturn_, f, this),
        SimFlowSegment_Plenum_DedicatedSupply_ (x.SimFlowSegment_Plenum_DedicatedSupply_, f, this),
        SimFlowSegment_Plenum_SharedReturn_ (x.SimFlowSegment_Plenum_SharedReturn_, f, this),
        SimFlowSegment_Plenum_SharedSupply_ (x.SimFlowSegment_Plenum_SharedSupply_, f, this),
        SimFlowSegment_VirtualComponent_ConstantPressureDrop_ (x.SimFlowSegment_VirtualComponent_ConstantPressureDrop_, f, this),
        SimFlowSegment_VirtualComponent_Leak_ (x.SimFlowSegment_VirtualComponent_Leak_, f, this),
        SimFlowSegment_VirtualComponent_LeakageRatio_ (x.SimFlowSegment_VirtualComponent_LeakageRatio_, f, this),
        SimFlowSegment_Wire_Default_ (x.SimFlowSegment_Wire_Default_, f, this),
        SimFlowStorage_ElectricalStorage_BatteryBank_ (x.SimFlowStorage_ElectricalStorage_BatteryBank_, f, this),
        SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_ (x.SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_, f, this),
        SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_ (x.SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_, f, this),
        SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_ (x.SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_, f, this),
        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_ (x.SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_, f, this),
        SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_ (x.SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_, f, this),
        SimFlowStorage_WaterStorage_CleanWater_ (x.SimFlowStorage_WaterStorage_CleanWater_, f, this),
        SimFlowStorage_WaterStorage_GrayWater_ (x.SimFlowStorage_WaterStorage_GrayWater_, f, this),
        SimFlowStorage_WaterStorage_RainWater_ (x.SimFlowStorage_WaterStorage_RainWater_, f, this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_ (x.SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_, f, this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_ (x.SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_, f, this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_ (x.SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_, f, this),
        SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_ (x.SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_, f, this),
        SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_ (x.SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_, f, this),
        SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_ (x.SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_, f, this),
        SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_ (x.SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_, f, this),
        SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_ (x.SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_, f, this),
        SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_ (x.SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_, f, this),
        SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_ (x.SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_, f, this),
        SimFlowTerminal_AirTerminal_InletSideMixer_ (x.SimFlowTerminal_AirTerminal_InletSideMixer_, f, this),
        SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_ (x.SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_, f, this),
        SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_ (x.SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_, f, this),
        SimFlowTerminal_AirTerminal_SingleDuctUserDefined_ (x.SimFlowTerminal_AirTerminal_SingleDuctUserDefined_, f, this),
        SimFlowTerminal_AirTerminal_SupplySideMixer_ (x.SimFlowTerminal_AirTerminal_SupplySideMixer_, f, this),
        SimFlowTerminal_AirTerminal_Uncontrolled_ (x.SimFlowTerminal_AirTerminal_Uncontrolled_, f, this),
        SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_ (x.SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_, f, this),
        SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_ (x.SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_, f, this),
        SimFlowTerminal_AirTerminal_VAV_NoReheat_ (x.SimFlowTerminal_AirTerminal_VAV_NoReheat_, f, this),
        SimFlowTerminal_AirTerminal_VAV_Reheat_ (x.SimFlowTerminal_AirTerminal_VAV_Reheat_, f, this),
        SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_ (x.SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_, f, this),
        SimFlowTerminal_Default_Default_ (x.SimFlowTerminal_Default_Default_, f, this),
        SimFlowTerminal_ElectricalTerminalExterior_Default_ (x.SimFlowTerminal_ElectricalTerminalExterior_Default_, f, this),
        SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_ (x.SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_, f, this),
        SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_ (x.SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_, f, this),
        SimFlowTerminal_ElectricalTerminalInterior_Default_ (x.SimFlowTerminal_ElectricalTerminalInterior_Default_, f, this),
        SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_ (x.SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_, f, this),
        SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_ (x.SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_, f, this),
        SimFlowTerminal_PlumbingTerminal_DishWasher_ (x.SimFlowTerminal_PlumbingTerminal_DishWasher_, f, this),
        SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_ (x.SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_, f, this),
        SimFlowTerminal_PlumbingTerminal_PlumbingFixture_ (x.SimFlowTerminal_PlumbingTerminal_PlumbingFixture_, f, this),
        SimFlowTerminal_PlumbingTerminal_Shower_ (x.SimFlowTerminal_PlumbingTerminal_Shower_, f, this),
        SimFlowTerminal_PlumbingTerminal_Sink_ (x.SimFlowTerminal_PlumbingTerminal_Sink_, f, this),
        SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_ (x.SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_, f, this),
        SimFlowTerminal_PlumbingTerminal_Toilet_ (x.SimFlowTerminal_PlumbingTerminal_Toilet_, f, this),
        SimFlowTerminal_PlumbingTerminal_Urinal_ (x.SimFlowTerminal_PlumbingTerminal_Urinal_, f, this),
        SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_ (x.SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_, f, this),
        SimFluid_Concentration_Default_ (x.SimFluid_Concentration_Default_, f, this),
        SimFluid_Default_Default_ (x.SimFluid_Default_Default_, f, this),
        SimFluid_GlycolConcentration_Default_ (x.SimFluid_GlycolConcentration_Default_, f, this),
        SimFluid_Name_Default_ (x.SimFluid_Name_Default_, f, this),
        SimFluid_Saturated_Default_ (x.SimFluid_Saturated_Default_, f, this),
        SimFluid_SuperHeated_Default_ (x.SimFluid_SuperHeated_Default_, f, this),
        SimFluid_Temperatures_Default_ (x.SimFluid_Temperatures_Default_, f, this),
        SimFrameAndDividerProps_FrameAndDivider_Default_ (x.SimFrameAndDividerProps_FrameAndDivider_Default_, f, this),
        SimFurnishingElement_Default_Default_ (x.SimFurnishingElement_Default_Default_, f, this),
        SimFurnishingElementType_Furnishing_Default_ (x.SimFurnishingElementType_Furnishing_Default_, f, this),
        SimFurnishingElementType_Furniture_Default_ (x.SimFurnishingElementType_Furniture_Default_, f, this),
        SimFurnitureType_Furniture_Default_ (x.SimFurnitureType_Furniture_Default_, f, this),
        SimGeomBooleanResult_BooleanClippingResult_Default_ (x.SimGeomBooleanResult_BooleanClippingResult_Default_, f, this),
        SimGeomBooleanResult_BooleanResult_Default_ (x.SimGeomBooleanResult_BooleanResult_Default_, f, this),
        SimGeomBoundingBox_BoundingBox_Default_ (x.SimGeomBoundingBox_BoundingBox_Default_, f, this),
        SimGeomCsgPrimative3D_CsgPrimative3D_Block_ (x.SimGeomCsgPrimative3D_CsgPrimative3D_Block_, f, this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_ (x.SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_, f, this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_ (x.SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_, f, this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_ (x.SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_, f, this),
        SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_ (x.SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_, f, this),
        SimGeomCurve_2DCompositeCurve_Default_ (x.SimGeomCurve_2DCompositeCurve_Default_, f, this),
        SimGeomCurve_BoundedCurve_Default_ (x.SimGeomCurve_BoundedCurve_Default_, f, this),
        SimGeomCurve_Circle_Default_ (x.SimGeomCurve_Circle_Default_, f, this),
        SimGeomCurve_CompositeCurve_Default_ (x.SimGeomCurve_CompositeCurve_Default_, f, this),
        SimGeomCurve_CompositeCurveSegment_Default_ (x.SimGeomCurve_CompositeCurveSegment_Default_, f, this),
        SimGeomCurve_Ellipse_Default_ (x.SimGeomCurve_Ellipse_Default_, f, this),
        SimGeomCurve_Line_Default_ (x.SimGeomCurve_Line_Default_, f, this),
        SimGeomCurve_OffsetCurve2D_Default_ (x.SimGeomCurve_OffsetCurve2D_Default_, f, this),
        SimGeomCurve_OffsetCurve3D_Default_ (x.SimGeomCurve_OffsetCurve3D_Default_, f, this),
        SimGeomCurve_Polyline_Default_ (x.SimGeomCurve_Polyline_Default_, f, this),
        SimGeomCurve_TrimmedCurve_Default_ (x.SimGeomCurve_TrimmedCurve_Default_, f, this),
        SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_ (x.SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_, f, this),
        SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_ (x.SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_, f, this),
        SimGeomPoint_Point_CartesianPoint_ (x.SimGeomPoint_Point_CartesianPoint_, f, this),
        SimGeomPoint_Point_PointOnCurve_ (x.SimGeomPoint_Point_PointOnCurve_, f, this),
        SimGeomPoint_Point_PointOnSurface_ (x.SimGeomPoint_Point_PointOnSurface_, f, this),
        SimGeomSet_GeometricCurveSet_Default_ (x.SimGeomSet_GeometricCurveSet_Default_, f, this),
        SimGeomSet_GeometricSet_Default_ (x.SimGeomSet_GeometricSet_Default_, f, this),
        SimGeomSolidModel_CSGSolid_Default_ (x.SimGeomSolidModel_CSGSolid_Default_, f, this),
        SimGeomSolidModel_FacetedBrep_Default_ (x.SimGeomSolidModel_FacetedBrep_Default_, f, this),
        SimGeomSolidModel_FacetedBrepWithVoids_Default_ (x.SimGeomSolidModel_FacetedBrepWithVoids_Default_, f, this),
        SimGeomSolidModel_ManifoldSolidBrep_Default_ (x.SimGeomSolidModel_ManifoldSolidBrep_Default_, f, this),
        SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_ (x.SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_, f, this),
        SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_ (x.SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_, f, this),
        SimGeomSolidModel_SweptDiskSolid_Default_ (x.SimGeomSolidModel_SweptDiskSolid_Default_, f, this),
        SimGeomSurface_BoundedSurface_CurveBoundedPlane_ (x.SimGeomSurface_BoundedSurface_CurveBoundedPlane_, f, this),
        SimGeomSurface_BoundedSurface_Default_ (x.SimGeomSurface_BoundedSurface_Default_, f, this),
        SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_ (x.SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_, f, this),
        SimGeomSurface_Default_Default_ (x.SimGeomSurface_Default_Default_, f, this),
        SimGeomSurface_ElementarySurface_Default_ (x.SimGeomSurface_ElementarySurface_Default_, f, this),
        SimGeomSurface_ElementarySurface_Plane_ (x.SimGeomSurface_ElementarySurface_Plane_, f, this),
        SimGeomSurface_SweptSurface_Default_ (x.SimGeomSurface_SweptSurface_Default_, f, this),
        SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_ (x.SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_, f, this),
        SimGeomSurface_SweptSurface_SurfaceOfRevolution_ (x.SimGeomSurface_SweptSurface_SurfaceOfRevolution_, f, this),
        SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_ (x.SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_, f, this),
        SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_ (x.SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_, f, this),
        SimGeomVector_Vector_Default_ (x.SimGeomVector_Vector_Default_, f, this),
        SimGeomVector_Vector_Direction_ (x.SimGeomVector_Vector_Direction_, f, this),
        SimGlazingPanelParams_GlazingPanel_Glazing_ (x.SimGlazingPanelParams_GlazingPanel_Glazing_, f, this),
        SimGridAxis_GridAxis_Default_ (x.SimGridAxis_GridAxis_Default_, f, this),
        SimGridPlacement_GridPlacement_Default_ (x.SimGridPlacement_GridPlacement_Default_, f, this),
        SimGroundHeatTransferBasement_BasementTransferModel_Default_ (x.SimGroundHeatTransferBasement_BasementTransferModel_Default_, f, this),
        SimGroundHeatTransferSlab_SlabTransferModel_Default_ (x.SimGroundHeatTransferSlab_SlabTransferModel_Default_, f, this),
        SimGroup_BldgCompGroup_AirTerminal_ (x.SimGroup_BldgCompGroup_AirTerminal_, f, this),
        SimGroup_BldgCompGroup_Coil_ (x.SimGroup_BldgCompGroup_Coil_, f, this),
        SimGroup_BldgCompGroup_Default_ (x.SimGroup_BldgCompGroup_Default_, f, this),
        SimGroup_BldgCompGroup_Sensor_ (x.SimGroup_BldgCompGroup_Sensor_, f, this),
        SimGroup_BldgCompGroup_ZoneController_ (x.SimGroup_BldgCompGroup_ZoneController_, f, this),
        SimGroup_BldgCompGroup_ZoneEquipment_ (x.SimGroup_BldgCompGroup_ZoneEquipment_, f, this),
        SimGroup_BldgElementGroup_Default_ (x.SimGroup_BldgElementGroup_Default_, f, this),
        SimGroup_BuildingGroup_Default_ (x.SimGroup_BuildingGroup_Default_, f, this),
        SimGroup_ConnectorList_AirConnections_ (x.SimGroup_ConnectorList_AirConnections_, f, this),
        SimGroup_ConnectorList_ChilledWaterConnections_ (x.SimGroup_ConnectorList_ChilledWaterConnections_, f, this),
        SimGroup_ConnectorList_CondenserConnections_ (x.SimGroup_ConnectorList_CondenserConnections_, f, this),
        SimGroup_ConnectorList_ControllerConnections_ (x.SimGroup_ConnectorList_ControllerConnections_, f, this),
        SimGroup_ConnectorList_HotWaterConnections_ (x.SimGroup_ConnectorList_HotWaterConnections_, f, this),
        SimGroup_ConnectorList_ServiceHotWaterConnections_ (x.SimGroup_ConnectorList_ServiceHotWaterConnections_, f, this),
        SimGroup_ConnectorList_SimConnections_ (x.SimGroup_ConnectorList_SimConnections_, f, this),
        SimGroup_ConnectorList_SteamConnections_ (x.SimGroup_ConnectorList_SteamConnections_, f, this),
        SimGroup_ControllerList_Default_ (x.SimGroup_ControllerList_Default_, f, this),
        SimGroup_DefaultGroup_Default_ (x.SimGroup_DefaultGroup_Default_, f, this),
        SimGroup_DefaultList_Default_ (x.SimGroup_DefaultList_Default_, f, this),
        SimGroup_EquipmentList_CondenserEquipment_ (x.SimGroup_EquipmentList_CondenserEquipment_, f, this),
        SimGroup_EquipmentList_ElectricalLoadCenter_ (x.SimGroup_EquipmentList_ElectricalLoadCenter_, f, this),
        SimGroup_EquipmentList_OutdoorAirSystem_ (x.SimGroup_EquipmentList_OutdoorAirSystem_, f, this),
        SimGroup_EquipmentList_OutdoorAirUnit_ (x.SimGroup_EquipmentList_OutdoorAirUnit_, f, this),
        SimGroup_EquipmentList_PlantEquipment_ (x.SimGroup_EquipmentList_PlantEquipment_, f, this),
        SimGroup_EquipmentList_RefrigerationCompressor_ (x.SimGroup_EquipmentList_RefrigerationCompressor_, f, this),
        SimGroup_EquipmentList_RefrigerationEquipment_ (x.SimGroup_EquipmentList_RefrigerationEquipment_, f, this),
        SimGroup_EquipmentList_RefrigerationLoadTransfer_ (x.SimGroup_EquipmentList_RefrigerationLoadTransfer_, f, this),
        SimGroup_EquipmentList_ServiceHotWater_ (x.SimGroup_EquipmentList_ServiceHotWater_, f, this),
        SimGroup_EquipmentList_ZoneHvac_ (x.SimGroup_EquipmentList_ZoneHvac_, f, this),
        SimGroup_HvacDemandGroup_AirSystem_ (x.SimGroup_HvacDemandGroup_AirSystem_, f, this),
        SimGroup_HvacDemandGroup_RefrigerationSystem_ (x.SimGroup_HvacDemandGroup_RefrigerationSystem_, f, this),
        SimGroup_HvacDemandGroup_WaterSystem_ (x.SimGroup_HvacDemandGroup_WaterSystem_, f, this),
        SimGroup_MaterialList_Default_ (x.SimGroup_MaterialList_Default_, f, this),
        SimGroup_NodeList_Default_ (x.SimGroup_NodeList_Default_, f, this),
        SimGroup_NodeList_OutdoorAir_ (x.SimGroup_NodeList_OutdoorAir_, f, this),
        SimGroup_OutputRequestList_Daylighting_ (x.SimGroup_OutputRequestList_Daylighting_, f, this),
        SimGroup_OutputRequestList_Environmental_ (x.SimGroup_OutputRequestList_Environmental_, f, this),
        SimGroup_OutputRequestList_Fuel_ (x.SimGroup_OutputRequestList_Fuel_, f, this),
        SimGroup_OutputRequestList_Geometry_ (x.SimGroup_OutputRequestList_Geometry_, f, this),
        SimGroup_OutputRequestList_Meters_ (x.SimGroup_OutputRequestList_Meters_, f, this),
        SimGroup_OutputRequestList_Reports_ (x.SimGroup_OutputRequestList_Reports_, f, this),
        SimGroup_OutputRequestList_Variables_ (x.SimGroup_OutputRequestList_Variables_, f, this),
        SimGroup_Refrigeration_ChillerSet_ (x.SimGroup_Refrigeration_ChillerSet_, f, this),
        SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_ (x.SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_, f, this),
        SimGroup_SchemeList_AirTempControlScheme_ (x.SimGroup_SchemeList_AirTempControlScheme_, f, this),
        SimGroup_SchemeList_CondenserOperatingScheme_ (x.SimGroup_SchemeList_CondenserOperatingScheme_, f, this),
        SimGroup_SchemeList_DemandManagerScheme_ (x.SimGroup_SchemeList_DemandManagerScheme_, f, this),
        SimGroup_SchemeList_MultiZoneHumidityScheme_ (x.SimGroup_SchemeList_MultiZoneHumidityScheme_, f, this),
        SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_ (x.SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_, f, this),
        SimGroup_SchemeList_PlantOperatingScheme_ (x.SimGroup_SchemeList_PlantOperatingScheme_, f, this),
        SimGroup_SchemeList_SingleZoneHumidityScheme_ (x.SimGroup_SchemeList_SingleZoneHumidityScheme_, f, this),
        SimGroup_SchemeList_WaterTempControlScheme_ (x.SimGroup_SchemeList_WaterTempControlScheme_, f, this),
        SimGroup_SpatialZoneGroup_Daylighting_ (x.SimGroup_SpatialZoneGroup_Daylighting_, f, this),
        SimGroup_SpatialZoneGroup_Lighting_ (x.SimGroup_SpatialZoneGroup_Lighting_, f, this),
        SimGroup_SpatialZoneGroup_NaturalVentilation_ (x.SimGroup_SpatialZoneGroup_NaturalVentilation_, f, this),
        SimGroup_SpatialZoneGroup_PlenumZoneGroup_ (x.SimGroup_SpatialZoneGroup_PlenumZoneGroup_, f, this),
        SimGroup_SpatialZoneGroup_ServiceHotWater_ (x.SimGroup_SpatialZoneGroup_ServiceHotWater_, f, this),
        SimGroup_SpatialZoneGroup_ZoneGroup_ (x.SimGroup_SpatialZoneGroup_ZoneGroup_, f, this),
        SimGroup_SpatialZoneGroup_ZoneHvacGroup_ (x.SimGroup_SpatialZoneGroup_ZoneHvacGroup_, f, this),
        SimGroup_SurfaceGroup_Default_ (x.SimGroup_SurfaceGroup_Default_, f, this),
        SimGroup_SurfaceGroup_LowTempRadiant_ (x.SimGroup_SurfaceGroup_LowTempRadiant_, f, this),
        SimGroup_SurfaceGroup_VentilatedSlab_ (x.SimGroup_SurfaceGroup_VentilatedSlab_, f, this),
        SimGroup_TemplateOutputRequestList_Daylighting_ (x.SimGroup_TemplateOutputRequestList_Daylighting_, f, this),
        SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_ (x.SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_, f, this),
        SimGroup_TemplateOutputRequestList_Geometry_ (x.SimGroup_TemplateOutputRequestList_Geometry_, f, this),
        SimGroup_TemplateOutputRequestList_Meters_ (x.SimGroup_TemplateOutputRequestList_Meters_, f, this),
        SimGroup_TemplateOutputRequestList_Reports_ (x.SimGroup_TemplateOutputRequestList_Reports_, f, this),
        SimGroup_TemplateOutputRequestList_Variables_ (x.SimGroup_TemplateOutputRequestList_Variables_, f, this),
        SimGroup_VrfList_VrfTerminals_ (x.SimGroup_VrfList_VrfTerminals_, f, this),
        SimHeatTransAlgProps_HeatTransferAlgProps_Default_ (x.SimHeatTransAlgProps_HeatTransferAlgProps_Default_, f, this),
        SimInfiltrationOrVentilation_Default_Default_ (x.SimInfiltrationOrVentilation_Default_Default_, f, this),
        SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_ (x.SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_, f, this),
        SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_ (x.SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_, f, this),
        SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_ (x.SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_, f, this),
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_ (x.SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_, f, this),
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_ (x.SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_, f, this),
        SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_ (x.SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_, f, this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_ (x.SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_, f, this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_Default_ (x.SimInfiltrationOrVentilation_RoomAirTempPattern_Default_, f, this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_ (x.SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_, f, this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_ (x.SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_, f, this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_ (x.SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_, f, this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_ (x.SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_, f, this),
        SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_ (x.SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_, f, this),
        SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_ (x.SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_, f, this),
        SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_ (x.SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_, f, this),
        SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_ (x.SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_, f, this),
        SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_ (x.SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_, f, this),
        SimInternalLoad_ComfortViewFactorAngles_Default_ (x.SimInternalLoad_ComfortViewFactorAngles_Default_, f, this),
        SimInternalLoad_Default_Default_ (x.SimInternalLoad_Default_Default_, f, this),
        SimInternalLoad_Equipment_Electric_ (x.SimInternalLoad_Equipment_Electric_, f, this),
        SimInternalLoad_Equipment_Electric_Elevators_ (x.SimInternalLoad_Equipment_Electric_Elevators_, f, this),
        SimInternalLoad_Equipment_Electric_Escalators_ (x.SimInternalLoad_Equipment_Electric_Escalators_, f, this),
        SimInternalLoad_Equipment_Electric_Process_ (x.SimInternalLoad_Equipment_Electric_Process_, f, this),
        SimInternalLoad_Equipment_Gas_ (x.SimInternalLoad_Equipment_Gas_, f, this),
        SimInternalLoad_Equipment_Gas_Process_ (x.SimInternalLoad_Equipment_Gas_Process_, f, this),
        SimInternalLoad_Equipment_HotWater_ (x.SimInternalLoad_Equipment_HotWater_, f, this),
        SimInternalLoad_Equipment_Other_ (x.SimInternalLoad_Equipment_Other_, f, this),
        SimInternalLoad_Equipment_Steam_ (x.SimInternalLoad_Equipment_Steam_, f, this),
        SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_ (x.SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_, f, this),
        SimInternalLoad_Lights_Default_ (x.SimInternalLoad_Lights_Default_, f, this),
        SimInternalLoad_People_Default_ (x.SimInternalLoad_People_Default_, f, this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_ (x.SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_, f, this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_ (x.SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_, f, this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_ (x.SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_, f, this),
        SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_ (x.SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_, f, this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_ (x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_, f, this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_ (x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_, f, this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_ (x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_, f, this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_ (x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_, f, this),
        SimIrregularTimeSeries_Irregular_Default_ (x.SimIrregularTimeSeries_Irregular_Default_, f, this),
        SimIrregularTimeSeriesValue_TimeSeries_Irregular_ (x.SimIrregularTimeSeriesValue_TimeSeries_Irregular_, f, this),
        SimLightingFixtureType_LightingFixture_Default_ (x.SimLightingFixtureType_LightingFixture_Default_, f, this),
        SimList_ConnectorList_AirConnections_ (x.SimList_ConnectorList_AirConnections_, f, this),
        SimList_ConnectorList_ChilledWaterConnections_ (x.SimList_ConnectorList_ChilledWaterConnections_, f, this),
        SimList_ConnectorList_CondenserConnections_ (x.SimList_ConnectorList_CondenserConnections_, f, this),
        SimList_ConnectorList_ControllerConnections_ (x.SimList_ConnectorList_ControllerConnections_, f, this),
        SimList_ConnectorList_HotWaterConnections_ (x.SimList_ConnectorList_HotWaterConnections_, f, this),
        SimList_ConnectorList_ServiceHotWaterConnections_ (x.SimList_ConnectorList_ServiceHotWaterConnections_, f, this),
        SimList_ConnectorList_SimConnections_ (x.SimList_ConnectorList_SimConnections_, f, this),
        SimList_ConnectorList_SteamConnections_ (x.SimList_ConnectorList_SteamConnections_, f, this),
        SimList_ControllerList_Default_ (x.SimList_ControllerList_Default_, f, this),
        SimList_DefaultList_Default_ (x.SimList_DefaultList_Default_, f, this),
        SimList_EquipmentList_CondenserEquipment_ (x.SimList_EquipmentList_CondenserEquipment_, f, this),
        SimList_EquipmentList_ElectricalLoadCenter_ (x.SimList_EquipmentList_ElectricalLoadCenter_, f, this),
        SimList_EquipmentList_OutdoorAirSystem_ (x.SimList_EquipmentList_OutdoorAirSystem_, f, this),
        SimList_EquipmentList_OutdoorAirUnit_ (x.SimList_EquipmentList_OutdoorAirUnit_, f, this),
        SimList_EquipmentList_PlantEquipment_ (x.SimList_EquipmentList_PlantEquipment_, f, this),
        SimList_EquipmentList_RefrigerationCompressor_ (x.SimList_EquipmentList_RefrigerationCompressor_, f, this),
        SimList_EquipmentList_RefrigerationEquipment_ (x.SimList_EquipmentList_RefrigerationEquipment_, f, this),
        SimList_EquipmentList_RefrigerationLoadTransfer_ (x.SimList_EquipmentList_RefrigerationLoadTransfer_, f, this),
        SimList_EquipmentList_ServiceHotWater_ (x.SimList_EquipmentList_ServiceHotWater_, f, this),
        SimList_EquipmentList_ZoneHvac_ (x.SimList_EquipmentList_ZoneHvac_, f, this),
        SimList_MaterialList_Default_ (x.SimList_MaterialList_Default_, f, this),
        SimList_NodeList_Default_ (x.SimList_NodeList_Default_, f, this),
        SimList_NodeList_OutdoorAir_ (x.SimList_NodeList_OutdoorAir_, f, this),
        SimList_OutputRequestList_Daylighting_ (x.SimList_OutputRequestList_Daylighting_, f, this),
        SimList_OutputRequestList_Environmental_ (x.SimList_OutputRequestList_Environmental_, f, this),
        SimList_OutputRequestList_Fuel_ (x.SimList_OutputRequestList_Fuel_, f, this),
        SimList_OutputRequestList_Geometry_ (x.SimList_OutputRequestList_Geometry_, f, this),
        SimList_OutputRequestList_Meters_ (x.SimList_OutputRequestList_Meters_, f, this),
        SimList_OutputRequestList_Reports_ (x.SimList_OutputRequestList_Reports_, f, this),
        SimList_OutputRequestList_Variables_ (x.SimList_OutputRequestList_Variables_, f, this),
        SimList_Refrigeration_ChillerSet_ (x.SimList_Refrigeration_ChillerSet_, f, this),
        SimList_SchemeList_AirLoopAvailabilityMgrScheme_ (x.SimList_SchemeList_AirLoopAvailabilityMgrScheme_, f, this),
        SimList_SchemeList_AirTempControlScheme_ (x.SimList_SchemeList_AirTempControlScheme_, f, this),
        SimList_SchemeList_CondenserOperatingScheme_ (x.SimList_SchemeList_CondenserOperatingScheme_, f, this),
        SimList_SchemeList_DemandManagerScheme_ (x.SimList_SchemeList_DemandManagerScheme_, f, this),
        SimList_SchemeList_MultiZoneHumidityScheme_ (x.SimList_SchemeList_MultiZoneHumidityScheme_, f, this),
        SimList_SchemeList_PlantLoopAvailabilityMgrScheme_ (x.SimList_SchemeList_PlantLoopAvailabilityMgrScheme_, f, this),
        SimList_SchemeList_PlantOperatingScheme_ (x.SimList_SchemeList_PlantOperatingScheme_, f, this),
        SimList_SchemeList_SingleZoneHumidityScheme_ (x.SimList_SchemeList_SingleZoneHumidityScheme_, f, this),
        SimList_SchemeList_WaterTempControlScheme_ (x.SimList_SchemeList_WaterTempControlScheme_, f, this),
        SimList_TemplateOutputRequestList_Daylighting_ (x.SimList_TemplateOutputRequestList_Daylighting_, f, this),
        SimList_TemplateOutputRequestList_FuelAndEnvironmental_ (x.SimList_TemplateOutputRequestList_FuelAndEnvironmental_, f, this),
        SimList_TemplateOutputRequestList_Geometry_ (x.SimList_TemplateOutputRequestList_Geometry_, f, this),
        SimList_TemplateOutputRequestList_Meters_ (x.SimList_TemplateOutputRequestList_Meters_, f, this),
        SimList_TemplateOutputRequestList_Reports_ (x.SimList_TemplateOutputRequestList_Reports_, f, this),
        SimList_TemplateOutputRequestList_Variables_ (x.SimList_TemplateOutputRequestList_Variables_, f, this),
        SimList_VrfList_VrfTerminals_ (x.SimList_VrfList_VrfTerminals_, f, this),
        SimLocalPlacement_LocalPlacement_AbsolutePlacement_ (x.SimLocalPlacement_LocalPlacement_AbsolutePlacement_, f, this),
        SimLocalPlacement_LocalPlacement_RelativePlacement_ (x.SimLocalPlacement_LocalPlacement_RelativePlacement_, f, this),
        SimLocationAndWeather_DesignDay_Default_ (x.SimLocationAndWeather_DesignDay_Default_, f, this),
        SimLocationAndWeather_Location_Default_ (x.SimLocationAndWeather_Location_Default_, f, this),
        SimLocationAndWeather_WeatherFile_ConditionType_ (x.SimLocationAndWeather_WeatherFile_ConditionType_, f, this),
        SimLocationAndWeather_WeatherFile_Days_ (x.SimLocationAndWeather_WeatherFile_Days_, f, this),
        SimLocationAndWeather_WeatherFile_WeatherStation_ (x.SimLocationAndWeather_WeatherFile_WeatherStation_, f, this),
        SimLocationAndWeather_WeatherProperty_SkyTemperature_ (x.SimLocationAndWeather_WeatherProperty_SkyTemperature_, f, this),
        SimLoop_Loop_EdgeLoop_ (x.SimLoop_Loop_EdgeLoop_, f, this),
        SimLoop_Loop_PolyLoop_ (x.SimLoop_Loop_PolyLoop_, f, this),
        SimLoop_Loop_VertexLoop_ (x.SimLoop_Loop_VertexLoop_, f, this),
        SimMappedRepresentationItem_Default_Default_ (x.SimMappedRepresentationItem_Default_Default_, f, this),
        SimMaterial_Default_Default_ (x.SimMaterial_Default_Default_, f, this),
        SimMaterial_EquivGlazingMaterial_Blind_ (x.SimMaterial_EquivGlazingMaterial_Blind_, f, this),
        SimMaterial_EquivGlazingMaterial_Drape_ (x.SimMaterial_EquivGlazingMaterial_Drape_, f, this),
        SimMaterial_EquivGlazingMaterial_Gap_ (x.SimMaterial_EquivGlazingMaterial_Gap_, f, this),
        SimMaterial_EquivGlazingMaterial_Glazing_ (x.SimMaterial_EquivGlazingMaterial_Glazing_, f, this),
        SimMaterial_EquivGlazingMaterial_Screen_ (x.SimMaterial_EquivGlazingMaterial_Screen_, f, this),
        SimMaterial_EquivGlazingMaterial_Shade_ (x.SimMaterial_EquivGlazingMaterial_Shade_, f, this),
        SimMaterial_GlazingMaterial_Blind_ (x.SimMaterial_GlazingMaterial_Blind_, f, this),
        SimMaterial_GlazingMaterial_ComplexShade_ (x.SimMaterial_GlazingMaterial_ComplexShade_, f, this),
        SimMaterial_GlazingMaterial_Gap_ (x.SimMaterial_GlazingMaterial_Gap_, f, this),
        SimMaterial_GlazingMaterial_Gas_ (x.SimMaterial_GlazingMaterial_Gas_, f, this),
        SimMaterial_GlazingMaterial_GasMixture_ (x.SimMaterial_GlazingMaterial_GasMixture_, f, this),
        SimMaterial_GlazingMaterial_Glazing_ (x.SimMaterial_GlazingMaterial_Glazing_, f, this),
        SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_ (x.SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_, f, this),
        SimMaterial_GlazingMaterial_Screen_ (x.SimMaterial_GlazingMaterial_Screen_, f, this),
        SimMaterial_GlazingMaterial_Shade_ (x.SimMaterial_GlazingMaterial_Shade_, f, this),
        SimMaterial_GlazingMaterial_SimpleGlazingSystem_ (x.SimMaterial_GlazingMaterial_SimpleGlazingSystem_, f, this),
        SimMaterial_GlazingMaterial_Thermochromic_ (x.SimMaterial_GlazingMaterial_Thermochromic_, f, this),
        SimMaterial_OpaqueMaterial_AirGap_ (x.SimMaterial_OpaqueMaterial_AirGap_, f, this),
        SimMaterial_OpaqueMaterial_Composite_ (x.SimMaterial_OpaqueMaterial_Composite_, f, this),
        SimMaterial_OpaqueMaterial_Default_ (x.SimMaterial_OpaqueMaterial_Default_, f, this),
        SimMaterial_OpaqueMaterial_InfraredTransparent_ (x.SimMaterial_OpaqueMaterial_InfraredTransparent_, f, this),
        SimMaterial_OpaqueMaterial_Insulation_ (x.SimMaterial_OpaqueMaterial_Insulation_, f, this),
        SimMaterial_OpaqueMaterial_InsulationMovable_ (x.SimMaterial_OpaqueMaterial_InsulationMovable_, f, this),
        SimMaterial_OpaqueMaterial_NoMass_ (x.SimMaterial_OpaqueMaterial_NoMass_, f, this),
        SimMaterial_OpaqueMaterial_Vegetation_ (x.SimMaterial_OpaqueMaterial_Vegetation_, f, this),
        SimMaterial_VirtualBoundary_Default_ (x.SimMaterial_VirtualBoundary_Default_, f, this),
        SimMaterialLayer_EquivGlazingLayer_Default_ (x.SimMaterialLayer_EquivGlazingLayer_Default_, f, this),
        SimMaterialLayer_GlazingMaterialLayer_Default_ (x.SimMaterialLayer_GlazingMaterialLayer_Default_, f, this),
        SimMaterialLayer_OpaqueMaterialLayer_Default_ (x.SimMaterialLayer_OpaqueMaterialLayer_Default_, f, this),
        SimMaterialLayer_VirtualBoundaryLayer_Default_ (x.SimMaterialLayer_VirtualBoundaryLayer_Default_, f, this),
        SimMaterialLayerSet_Default_Default_ (x.SimMaterialLayerSet_Default_Default_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_ (x.SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_CurtainWall_ (x.SimMaterialLayerSet_GlazingLayerSet_CurtainWall_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_Default_ (x.SimMaterialLayerSet_GlazingLayerSet_Default_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_GlassDoor_ (x.SimMaterialLayerSet_GlazingLayerSet_GlassDoor_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_Window_ (x.SimMaterialLayerSet_GlazingLayerSet_Window_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_ (x.SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_, f, this),
        SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_ (x.SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Ceiling_ (x.SimMaterialLayerSet_OpaqueLayerSet_Ceiling_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_ (x.SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Default_ (x.SimMaterialLayerSet_OpaqueLayerSet_Default_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Door_ (x.SimMaterialLayerSet_OpaqueLayerSet_Door_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_ (x.SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Floor_ (x.SimMaterialLayerSet_OpaqueLayerSet_Floor_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_InternalSource_ (x.SimMaterialLayerSet_OpaqueLayerSet_InternalSource_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Landing_ (x.SimMaterialLayerSet_OpaqueLayerSet_Landing_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Roof_ (x.SimMaterialLayerSet_OpaqueLayerSet_Roof_, f, this),
        SimMaterialLayerSet_OpaqueLayerSet_Wall_ (x.SimMaterialLayerSet_OpaqueLayerSet_Wall_, f, this),
        SimMeasureType_AreaMeasure_Default_ (x.SimMeasureType_AreaMeasure_Default_, f, this),
        SimMeasureType_CountMeasure_AirChangesPerhour_ (x.SimMeasureType_CountMeasure_AirChangesPerhour_, f, this),
        SimMeasureType_CountMeasure_Count_ (x.SimMeasureType_CountMeasure_Count_, f, this),
        SimMeasureType_Default_Default_ (x.SimMeasureType_Default_Default_, f, this),
        SimMeasureType_EnergyMeasure_Default_ (x.SimMeasureType_EnergyMeasure_Default_, f, this),
        SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_ (x.SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_, f, this),
        SimMeasureType_EnergyMeasure_WattsPerPerson_ (x.SimMeasureType_EnergyMeasure_WattsPerPerson_, f, this),
        SimMeasureType_LengthMeasure_Default_ (x.SimMeasureType_LengthMeasure_Default_, f, this),
        SimMeasureType_MassMeasure_Default_ (x.SimMeasureType_MassMeasure_Default_, f, this),
        SimMeasureType_MonetaryMeasure_Default_ (x.SimMeasureType_MonetaryMeasure_Default_, f, this),
        SimMeasureType_PersonsPerAreaMeasure_Default_ (x.SimMeasureType_PersonsPerAreaMeasure_Default_, f, this),
        SimMeasureType_RatioMeasure_Default_ (x.SimMeasureType_RatioMeasure_Default_, f, this),
        SimMeasureType_RatioMeasure_PositiveRatioMeasure_ (x.SimMeasureType_RatioMeasure_PositiveRatioMeasure_, f, this),
        SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_ (x.SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_, f, this),
        SimMeasureType_RotationalAngleMeasure_Degrees_ (x.SimMeasureType_RotationalAngleMeasure_Degrees_, f, this),
        SimMeasureType_ThermodynamicTemperatureMeasure_Default_ (x.SimMeasureType_ThermodynamicTemperatureMeasure_Default_, f, this),
        SimMeasureType_VolumeMeasure_Default_ (x.SimMeasureType_VolumeMeasure_Default_, f, this),
        SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_ (x.SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_, f, this),
        SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_ (x.SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_, f, this),
        SimMember_Default_Default_ (x.SimMember_Default_Default_, f, this),
        SimMemberParams_Member_Default_ (x.SimMemberParams_Member_Default_, f, this),
        SimMemberProfileProperties_Beam_Default_ (x.SimMemberProfileProperties_Beam_Default_, f, this),
        SimMemberProfileProperties_Column_Default_ (x.SimMemberProfileProperties_Column_Default_, f, this),
        SimMemberProfileProperties_Default_Default_ (x.SimMemberProfileProperties_Default_Default_, f, this),
        SimModelRepresentationContext_GeometricRepresentationContext_Default_ (x.SimModelRepresentationContext_GeometricRepresentationContext_Default_, f, this),
        SimModelRepresentationContext_GeometricRepresentationSubContext_Default_ (x.SimModelRepresentationContext_GeometricRepresentationSubContext_Default_, f, this),
        SimModelRepresentationContext_RepresentationContext_Default_ (x.SimModelRepresentationContext_RepresentationContext_Default_, f, this),
        SimNode_AirflowNetworkNode_AirDistributionNode_ (x.SimNode_AirflowNetworkNode_AirDistributionNode_, f, this),
        SimNode_AirflowNetworkNode_ExternalNode_ (x.SimNode_AirflowNetworkNode_ExternalNode_, f, this),
        SimNode_AirflowNetworkNode_ZoneNode_ (x.SimNode_AirflowNetworkNode_ZoneNode_, f, this),
        SimNode_AirFlowPort_Air_In_ (x.SimNode_AirFlowPort_Air_In_, f, this),
        SimNode_AirFlowPort_Air_InOrOut_ (x.SimNode_AirFlowPort_Air_InOrOut_, f, this),
        SimNode_AirFlowPort_Air_Out_ (x.SimNode_AirFlowPort_Air_Out_, f, this),
        SimNode_AirFlowPort_Default_ (x.SimNode_AirFlowPort_Default_, f, this),
        SimNode_AirFlowPort_ExhaustAir_Out_ (x.SimNode_AirFlowPort_ExhaustAir_Out_, f, this),
        SimNode_AirFlowPort_OutdoorAir_In_ (x.SimNode_AirFlowPort_OutdoorAir_In_, f, this),
        SimNode_ChilledWaterFlowPort_CondensedWaterOut_ (x.SimNode_ChilledWaterFlowPort_CondensedWaterOut_, f, this),
        SimNode_ChilledWaterFlowPort_Default_ (x.SimNode_ChilledWaterFlowPort_Default_, f, this),
        SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_ (x.SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimNode_ChilledWaterFlowPort_Water_In_ (x.SimNode_ChilledWaterFlowPort_Water_In_, f, this),
        SimNode_ChilledWaterFlowPort_Water_InOrOut_ (x.SimNode_ChilledWaterFlowPort_Water_InOrOut_, f, this),
        SimNode_ChilledWaterFlowPort_Water_Out_ (x.SimNode_ChilledWaterFlowPort_Water_Out_, f, this),
        SimNode_CondenserFlowPort_CondenserFlow_In_ (x.SimNode_CondenserFlowPort_CondenserFlow_In_, f, this),
        SimNode_CondenserFlowPort_CondenserFlow_InOrOut_ (x.SimNode_CondenserFlowPort_CondenserFlow_InOrOut_, f, this),
        SimNode_CondenserFlowPort_CondenserFlow_Out_ (x.SimNode_CondenserFlowPort_CondenserFlow_Out_, f, this),
        SimNode_CondenserFlowPort_Default_ (x.SimNode_CondenserFlowPort_Default_, f, this),
        SimNode_DaylightingReferencePoint_Default_ (x.SimNode_DaylightingReferencePoint_Default_, f, this),
        SimNode_DigitalControl_AirLoop_Default_ (x.SimNode_DigitalControl_AirLoop_Default_, f, this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_AirLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_AirLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_CHWLoop_Default_ (x.SimNode_DigitalControl_CHWLoop_Default_, f, this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_CHWLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_CWLoop_Default_ (x.SimNode_DigitalControl_CWLoop_Default_, f, this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_CWLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_CWLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_HWLoop_Default_ (x.SimNode_DigitalControl_HWLoop_Default_, f, this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_HWLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_HWLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_MxWLoop_Default_ (x.SimNode_DigitalControl_MxWLoop_Default_, f, this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_MxWLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_RFGLoop_Default_ (x.SimNode_DigitalControl_RFGLoop_Default_, f, this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_RFGLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_SHWLoop_Default_ (x.SimNode_DigitalControl_SHWLoop_Default_, f, this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_SHWLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_STMLoop_Default_ (x.SimNode_DigitalControl_STMLoop_Default_, f, this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_STMLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_STMLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControl_VRFLoop_Default_ (x.SimNode_DigitalControl_VRFLoop_Default_, f, this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_In_ (x.SimNode_DigitalControl_VRFLoop_DigitalSignal_In_, f, this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (x.SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_ (x.SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_, f, this),
        SimNode_DigitalControlPort_Default_ (x.SimNode_DigitalControlPort_Default_, f, this),
        SimNode_DigitalControlPort_DigitalSignal_In_ (x.SimNode_DigitalControlPort_DigitalSignal_In_, f, this),
        SimNode_DigitalControlPort_DigitalSignal_InOrOut_ (x.SimNode_DigitalControlPort_DigitalSignal_InOrOut_, f, this),
        SimNode_DigitalControlPort_DigitalSignal_Out_ (x.SimNode_DigitalControlPort_DigitalSignal_Out_, f, this),
        SimNode_DigitalControlPort_DigitalVirtual_ (x.SimNode_DigitalControlPort_DigitalVirtual_, f, this),
        SimNode_DistributionPort_Default_ (x.SimNode_DistributionPort_Default_, f, this),
        SimNode_Docking_Default_ (x.SimNode_Docking_Default_, f, this),
        SimNode_Docking_ThermalZone_ (x.SimNode_Docking_ThermalZone_, f, this),
        SimNode_ElectricalFlowPort_Default_ (x.SimNode_ElectricalFlowPort_Default_, f, this),
        SimNode_ElectricalFlowPort_Electrical_In_ (x.SimNode_ElectricalFlowPort_Electrical_In_, f, this),
        SimNode_ElectricalFlowPort_Electrical_InOrOut_ (x.SimNode_ElectricalFlowPort_Electrical_InOrOut_, f, this),
        SimNode_ElectricalFlowPort_Electrical_Out_ (x.SimNode_ElectricalFlowPort_Electrical_Out_, f, this),
        SimNode_HotWaterFlowPort_CondensedWaterOut_ (x.SimNode_HotWaterFlowPort_CondensedWaterOut_, f, this),
        SimNode_HotWaterFlowPort_Default_ (x.SimNode_HotWaterFlowPort_Default_, f, this),
        SimNode_HotWaterFlowPort_EvaporativeWaterIn_ (x.SimNode_HotWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimNode_HotWaterFlowPort_Water_In_ (x.SimNode_HotWaterFlowPort_Water_In_, f, this),
        SimNode_HotWaterFlowPort_Water_InOrOut_ (x.SimNode_HotWaterFlowPort_Water_InOrOut_, f, this),
        SimNode_HotWaterFlowPort_Water_Out_ (x.SimNode_HotWaterFlowPort_Water_Out_, f, this),
        SimNode_MixedWaterFlowPort_CondensedWaterOut_ (x.SimNode_MixedWaterFlowPort_CondensedWaterOut_, f, this),
        SimNode_MixedWaterFlowPort_Default_ (x.SimNode_MixedWaterFlowPort_Default_, f, this),
        SimNode_MixedWaterFlowPort_EvaporativeWaterIn_ (x.SimNode_MixedWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimNode_MixedWaterFlowPort_Water_In_ (x.SimNode_MixedWaterFlowPort_Water_In_, f, this),
        SimNode_MixedWaterFlowPort_Water_InOrOut_ (x.SimNode_MixedWaterFlowPort_Water_InOrOut_, f, this),
        SimNode_MixedWaterFlowPort_Water_Out_ (x.SimNode_MixedWaterFlowPort_Water_Out_, f, this),
        SimNode_Node_Default_ (x.SimNode_Node_Default_, f, this),
        SimNode_Node_OutdoorAir_ (x.SimNode_Node_OutdoorAir_, f, this),
        SimNode_Port_Default_ (x.SimNode_Port_Default_, f, this),
        SimNode_RefrigerationFlowPort_Default_ (x.SimNode_RefrigerationFlowPort_Default_, f, this),
        SimNode_RefrigerationFlowPort_Refrigeration_In_ (x.SimNode_RefrigerationFlowPort_Refrigeration_In_, f, this),
        SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_ (x.SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_, f, this),
        SimNode_RefrigerationFlowPort_Refrigeration_Out_ (x.SimNode_RefrigerationFlowPort_Refrigeration_Out_, f, this),
        SimNode_ServiceHotWaterFlowPort_Default_ (x.SimNode_ServiceHotWaterFlowPort_Default_, f, this),
        SimNode_ServiceHotWaterFlowPort_Water_In_ (x.SimNode_ServiceHotWaterFlowPort_Water_In_, f, this),
        SimNode_ServiceHotWaterFlowPort_Water_InOrOut_ (x.SimNode_ServiceHotWaterFlowPort_Water_InOrOut_, f, this),
        SimNode_ServiceHotWaterFlowPort_Water_Out_ (x.SimNode_ServiceHotWaterFlowPort_Water_Out_, f, this),
        SimNode_SetpointNode_Default_ (x.SimNode_SetpointNode_Default_, f, this),
        SimNode_SteamFlowPort_Default_ (x.SimNode_SteamFlowPort_Default_, f, this),
        SimNode_SteamFlowPort_Steam_In_ (x.SimNode_SteamFlowPort_Steam_In_, f, this),
        SimNode_SteamFlowPort_Steam_InOrOut_ (x.SimNode_SteamFlowPort_Steam_InOrOut_, f, this),
        SimNode_SteamFlowPort_Steam_Out_ (x.SimNode_SteamFlowPort_Steam_Out_, f, this),
        SimNode_VarRefrigerantFlowPort_Default_ (x.SimNode_VarRefrigerantFlowPort_Default_, f, this),
        SimNode_VarRefrigerantFlowPort_VRF_In_ (x.SimNode_VarRefrigerantFlowPort_VRF_In_, f, this),
        SimNode_VarRefrigerantFlowPort_VRF_InOrOut_ (x.SimNode_VarRefrigerantFlowPort_VRF_InOrOut_, f, this),
        SimNode_VarRefrigerantFlowPort_VRF_Out_ (x.SimNode_VarRefrigerantFlowPort_VRF_Out_, f, this),
        SimNode_ZoneAirFlowPort_Air_In_ (x.SimNode_ZoneAirFlowPort_Air_In_, f, this),
        SimNode_ZoneAirFlowPort_Air_Out_ (x.SimNode_ZoneAirFlowPort_Air_Out_, f, this),
        SimNode_ZoneAirNode_Default_ (x.SimNode_ZoneAirNode_Default_, f, this),
        SimObjectOutputRequestSet_Default_Default_ (x.SimObjectOutputRequestSet_Default_Default_, f, this),
        SimOpeningType_Opening_Default_ (x.SimOpeningType_Opening_Default_, f, this),
        SimOrganization_Organization_Default_ (x.SimOrganization_Organization_Default_, f, this),
        SimOwnerHistory_Default_Default_ (x.SimOwnerHistory_Default_Default_, f, this),
        SimPanel_Default_Default_ (x.SimPanel_Default_Default_, f, this),
        SimPanelArrayParams_PanelArrayParams_Default_ (x.SimPanelArrayParams_PanelArrayParams_Default_, f, this),
        SimPanelArrayParams_SolarShadeArray_Default_ (x.SimPanelArrayParams_SolarShadeArray_Default_, f, this),
        SimPanelParams_GlazingPanel_Glazing_ (x.SimPanelParams_GlazingPanel_Glazing_, f, this),
        SimPanelParams_PanelParams_Default_ (x.SimPanelParams_PanelParams_Default_, f, this),
        SimPanelParams_ShadePanel_SolarShading_ (x.SimPanelParams_ShadePanel_SolarShading_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_C_Shape_ (x.SimParameterizedProfileDef_ParameterizedProfile_C_Shape_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_Circle_ (x.SimParameterizedProfileDef_ParameterizedProfile_Circle_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_Ellipse_ (x.SimParameterizedProfileDef_ParameterizedProfile_Ellipse_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_ (x.SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_I_Shape_ (x.SimParameterizedProfileDef_ParameterizedProfile_I_Shape_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_L_Shape_ (x.SimParameterizedProfileDef_ParameterizedProfile_L_Shape_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_Rectangle_ (x.SimParameterizedProfileDef_ParameterizedProfile_Rectangle_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_T_Shape_ (x.SimParameterizedProfileDef_ParameterizedProfile_T_Shape_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_U_Shape_ (x.SimParameterizedProfileDef_ParameterizedProfile_U_Shape_, f, this),
        SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_ (x.SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_, f, this),
        SimPerformanceCurve_Mathematical_Bicubic_ (x.SimPerformanceCurve_Mathematical_Bicubic_, f, this),
        SimPerformanceCurve_Mathematical_Biquadratic_ (x.SimPerformanceCurve_Mathematical_Biquadratic_, f, this),
        SimPerformanceCurve_Mathematical_Cubic_ (x.SimPerformanceCurve_Mathematical_Cubic_, f, this),
        SimPerformanceCurve_Mathematical_DoubleExponentialDecay_ (x.SimPerformanceCurve_Mathematical_DoubleExponentialDecay_, f, this),
        SimPerformanceCurve_Mathematical_Exponent_ (x.SimPerformanceCurve_Mathematical_Exponent_, f, this),
        SimPerformanceCurve_Mathematical_ExponentialDecay_ (x.SimPerformanceCurve_Mathematical_ExponentialDecay_, f, this),
        SimPerformanceCurve_Mathematical_ExponentialSkewNormal_ (x.SimPerformanceCurve_Mathematical_ExponentialSkewNormal_, f, this),
        SimPerformanceCurve_Mathematical_FanPressureRise_ (x.SimPerformanceCurve_Mathematical_FanPressureRise_, f, this),
        SimPerformanceCurve_Mathematical_Linear_ (x.SimPerformanceCurve_Mathematical_Linear_, f, this),
        SimPerformanceCurve_Mathematical_QuadLinear_ (x.SimPerformanceCurve_Mathematical_QuadLinear_, f, this),
        SimPerformanceCurve_Mathematical_Quadratic_ (x.SimPerformanceCurve_Mathematical_Quadratic_, f, this),
        SimPerformanceCurve_Mathematical_QuadraticLinear_ (x.SimPerformanceCurve_Mathematical_QuadraticLinear_, f, this),
        SimPerformanceCurve_Mathematical_Quartic_ (x.SimPerformanceCurve_Mathematical_Quartic_, f, this),
        SimPerformanceCurve_Mathematical_RectangularHyperbola1_ (x.SimPerformanceCurve_Mathematical_RectangularHyperbola1_, f, this),
        SimPerformanceCurve_Mathematical_RectangularHyperbola2_ (x.SimPerformanceCurve_Mathematical_RectangularHyperbola2_, f, this),
        SimPerformanceCurve_Mathematical_Sigmoid_ (x.SimPerformanceCurve_Mathematical_Sigmoid_, f, this),
        SimPerformanceCurve_Mathematical_TriQuadratic_ (x.SimPerformanceCurve_Mathematical_TriQuadratic_, f, this),
        SimPerformanceCurve_Relational_PressureDrop_ (x.SimPerformanceCurve_Relational_PressureDrop_, f, this),
        SimPerformanceTable_Variable_MultiLookup_ (x.SimPerformanceTable_Variable_MultiLookup_, f, this),
        SimPerformanceTable_Variable_OneIndependent_ (x.SimPerformanceTable_Variable_OneIndependent_, f, this),
        SimPerformanceTable_Variable_TwoIndependent_ (x.SimPerformanceTable_Variable_TwoIndependent_, f, this),
        SimPerson_Person_Default_ (x.SimPerson_Person_Default_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_Architect_ (x.SimPersonAndOrganization_PersonAndOrganization_Architect_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_Default_ (x.SimPersonAndOrganization_PersonAndOrganization_Default_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_ (x.SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_ (x.SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_Engineer_ (x.SimPersonAndOrganization_PersonAndOrganization_Engineer_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_ (x.SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_, f, this),
        SimPersonAndOrganization_PersonAndOrganization_Owner_ (x.SimPersonAndOrganization_PersonAndOrganization_Owner_, f, this),
        SimPlacement_Axis1Placement_Default_ (x.SimPlacement_Axis1Placement_Default_, f, this),
        SimPlacement_Axis2Placement2D_Default_ (x.SimPlacement_Axis2Placement2D_Default_, f, this),
        SimPlacement_Axis2Placement3D_Default_ (x.SimPlacement_Axis2Placement3D_Default_, f, this),
        SimPort_AirFlowPort_Air_In_ (x.SimPort_AirFlowPort_Air_In_, f, this),
        SimPort_AirFlowPort_Air_InOrOut_ (x.SimPort_AirFlowPort_Air_InOrOut_, f, this),
        SimPort_AirFlowPort_Air_Out_ (x.SimPort_AirFlowPort_Air_Out_, f, this),
        SimPort_AirFlowPort_Default_ (x.SimPort_AirFlowPort_Default_, f, this),
        SimPort_AirFlowPort_ExhaustAir_Out_ (x.SimPort_AirFlowPort_ExhaustAir_Out_, f, this),
        SimPort_AirFlowPort_OutdoorAir_In_ (x.SimPort_AirFlowPort_OutdoorAir_In_, f, this),
        SimPort_ChilledWaterFlowPort_CondensedWaterOut_ (x.SimPort_ChilledWaterFlowPort_CondensedWaterOut_, f, this),
        SimPort_ChilledWaterFlowPort_Default_ (x.SimPort_ChilledWaterFlowPort_Default_, f, this),
        SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_ (x.SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimPort_ChilledWaterFlowPort_Water_In_ (x.SimPort_ChilledWaterFlowPort_Water_In_, f, this),
        SimPort_ChilledWaterFlowPort_Water_InOrOut_ (x.SimPort_ChilledWaterFlowPort_Water_InOrOut_, f, this),
        SimPort_ChilledWaterFlowPort_Water_Out_ (x.SimPort_ChilledWaterFlowPort_Water_Out_, f, this),
        SimPort_CondenserFlowPort_CondenserFlow_In_ (x.SimPort_CondenserFlowPort_CondenserFlow_In_, f, this),
        SimPort_CondenserFlowPort_CondenserFlow_InOrOut_ (x.SimPort_CondenserFlowPort_CondenserFlow_InOrOut_, f, this),
        SimPort_CondenserFlowPort_CondenserFlow_Out_ (x.SimPort_CondenserFlowPort_CondenserFlow_Out_, f, this),
        SimPort_CondenserFlowPort_Default_ (x.SimPort_CondenserFlowPort_Default_, f, this),
        SimPort_DigitalControl_AirLoop_Default_ (x.SimPort_DigitalControl_AirLoop_Default_, f, this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_AirLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_AirLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_CHWLoop_Default_ (x.SimPort_DigitalControl_CHWLoop_Default_, f, this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_CHWLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_CWLoop_Default_ (x.SimPort_DigitalControl_CWLoop_Default_, f, this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_CWLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_CWLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_HWLoop_Default_ (x.SimPort_DigitalControl_HWLoop_Default_, f, this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_HWLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_HWLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_MxWLoop_Default_ (x.SimPort_DigitalControl_MxWLoop_Default_, f, this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_MxWLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_RFGLoop_Default_ (x.SimPort_DigitalControl_RFGLoop_Default_, f, this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_RFGLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_SHWLoop_Default_ (x.SimPort_DigitalControl_SHWLoop_Default_, f, this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_SHWLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_STMLoop_Default_ (x.SimPort_DigitalControl_STMLoop_Default_, f, this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_STMLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_STMLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControl_VRFLoop_Default_ (x.SimPort_DigitalControl_VRFLoop_Default_, f, this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_In_ (x.SimPort_DigitalControl_VRFLoop_DigitalSignal_In_, f, this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (x.SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_ (x.SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_, f, this),
        SimPort_DigitalControlPort_Default_ (x.SimPort_DigitalControlPort_Default_, f, this),
        SimPort_DigitalControlPort_DigitalSignal_In_ (x.SimPort_DigitalControlPort_DigitalSignal_In_, f, this),
        SimPort_DigitalControlPort_DigitalSignal_InOrOut_ (x.SimPort_DigitalControlPort_DigitalSignal_InOrOut_, f, this),
        SimPort_DigitalControlPort_DigitalSignal_Out_ (x.SimPort_DigitalControlPort_DigitalSignal_Out_, f, this),
        SimPort_DigitalControlPort_DigitalVirtual_ (x.SimPort_DigitalControlPort_DigitalVirtual_, f, this),
        SimPort_DistributionPort_Default_ (x.SimPort_DistributionPort_Default_, f, this),
        SimPort_Docking_Default_ (x.SimPort_Docking_Default_, f, this),
        SimPort_Docking_ThermalZone_ (x.SimPort_Docking_ThermalZone_, f, this),
        SimPort_ElectricalFlowPort_Default_ (x.SimPort_ElectricalFlowPort_Default_, f, this),
        SimPort_ElectricalFlowPort_Electrical_In_ (x.SimPort_ElectricalFlowPort_Electrical_In_, f, this),
        SimPort_ElectricalFlowPort_Electrical_InOrOut_ (x.SimPort_ElectricalFlowPort_Electrical_InOrOut_, f, this),
        SimPort_ElectricalFlowPort_Electrical_Out_ (x.SimPort_ElectricalFlowPort_Electrical_Out_, f, this),
        SimPort_HotWaterFlowPort_CondensedWaterOut_ (x.SimPort_HotWaterFlowPort_CondensedWaterOut_, f, this),
        SimPort_HotWaterFlowPort_Default_ (x.SimPort_HotWaterFlowPort_Default_, f, this),
        SimPort_HotWaterFlowPort_EvaporativeWaterIn_ (x.SimPort_HotWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimPort_HotWaterFlowPort_Water_In_ (x.SimPort_HotWaterFlowPort_Water_In_, f, this),
        SimPort_HotWaterFlowPort_Water_InOrOut_ (x.SimPort_HotWaterFlowPort_Water_InOrOut_, f, this),
        SimPort_HotWaterFlowPort_Water_Out_ (x.SimPort_HotWaterFlowPort_Water_Out_, f, this),
        SimPort_MixedWaterFlowPort_CondensedWaterOut_ (x.SimPort_MixedWaterFlowPort_CondensedWaterOut_, f, this),
        SimPort_MixedWaterFlowPort_Default_ (x.SimPort_MixedWaterFlowPort_Default_, f, this),
        SimPort_MixedWaterFlowPort_EvaporativeWaterIn_ (x.SimPort_MixedWaterFlowPort_EvaporativeWaterIn_, f, this),
        SimPort_MixedWaterFlowPort_Water_In_ (x.SimPort_MixedWaterFlowPort_Water_In_, f, this),
        SimPort_MixedWaterFlowPort_Water_InOrOut_ (x.SimPort_MixedWaterFlowPort_Water_InOrOut_, f, this),
        SimPort_MixedWaterFlowPort_Water_Out_ (x.SimPort_MixedWaterFlowPort_Water_Out_, f, this),
        SimPort_Port_Default_ (x.SimPort_Port_Default_, f, this),
        SimPort_RefrigerationFlowPort_Default_ (x.SimPort_RefrigerationFlowPort_Default_, f, this),
        SimPort_RefrigerationFlowPort_Refrigeration_In_ (x.SimPort_RefrigerationFlowPort_Refrigeration_In_, f, this),
        SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_ (x.SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_, f, this),
        SimPort_RefrigerationFlowPort_Refrigeration_Out_ (x.SimPort_RefrigerationFlowPort_Refrigeration_Out_, f, this),
        SimPort_ServiceHotWaterFlowPort_Default_ (x.SimPort_ServiceHotWaterFlowPort_Default_, f, this),
        SimPort_ServiceHotWaterFlowPort_Water_In_ (x.SimPort_ServiceHotWaterFlowPort_Water_In_, f, this),
        SimPort_ServiceHotWaterFlowPort_Water_InOrOut_ (x.SimPort_ServiceHotWaterFlowPort_Water_InOrOut_, f, this),
        SimPort_ServiceHotWaterFlowPort_Water_Out_ (x.SimPort_ServiceHotWaterFlowPort_Water_Out_, f, this),
        SimPort_SteamFlowPort_Default_ (x.SimPort_SteamFlowPort_Default_, f, this),
        SimPort_SteamFlowPort_Steam_In_ (x.SimPort_SteamFlowPort_Steam_In_, f, this),
        SimPort_SteamFlowPort_Steam_InOrOut_ (x.SimPort_SteamFlowPort_Steam_InOrOut_, f, this),
        SimPort_SteamFlowPort_Steam_Out_ (x.SimPort_SteamFlowPort_Steam_Out_, f, this),
        SimPort_VarRefrigerantFlowPort_Default_ (x.SimPort_VarRefrigerantFlowPort_Default_, f, this),
        SimPort_VarRefrigerantFlowPort_VRF_In_ (x.SimPort_VarRefrigerantFlowPort_VRF_In_, f, this),
        SimPort_VarRefrigerantFlowPort_VRF_InOrOut_ (x.SimPort_VarRefrigerantFlowPort_VRF_InOrOut_, f, this),
        SimPort_VarRefrigerantFlowPort_VRF_Out_ (x.SimPort_VarRefrigerantFlowPort_VRF_Out_, f, this),
        SimPort_ZoneAirFlowPort_Air_In_ (x.SimPort_ZoneAirFlowPort_Air_In_, f, this),
        SimPort_ZoneAirFlowPort_Air_Out_ (x.SimPort_ZoneAirFlowPort_Air_Out_, f, this),
        SimPresentationLayerAssignment_Default_Default_ (x.SimPresentationLayerAssignment_Default_Default_, f, this),
        SimProfileParams_Member_Default_ (x.SimProfileParams_Member_Default_, f, this),
        SimProfileParams_ProfileParams_Default_ (x.SimProfileParams_ProfileParams_Default_, f, this),
        SimProject_Project_Backpack_ (x.SimProject_Project_Backpack_, f, this),
        SimProject_Project_DesignAlternative_ (x.SimProject_Project_DesignAlternative_, f, this),
        SimProject_Project_SBD_View_ (x.SimProject_Project_SBD_View_, f, this),
        SimProject_Project_T24_View_ (x.SimProject_Project_T24_View_, f, this),
        SimPropertyListValue_SimpleProp_ListValue_ (x.SimPropertyListValue_SimpleProp_ListValue_, f, this),
        SimPropertySet_PropertySet_Default_ (x.SimPropertySet_PropertySet_Default_, f, this),
        SimPropertySingleValue_SimpleProp_SingleValue_ (x.SimPropertySingleValue_SimpleProp_SingleValue_, f, this),
        SimRailing_Default_Default_ (x.SimRailing_Default_Default_, f, this),
        SimRailing_GuardRailing_Default_ (x.SimRailing_GuardRailing_Default_, f, this),
        SimRailing_HandRailing_Default_ (x.SimRailing_HandRailing_Default_, f, this),
        SimRailingParams_Railing_Default_ (x.SimRailingParams_Railing_Default_, f, this),
        SimRamp_Ramp_Default_ (x.SimRamp_Ramp_Default_, f, this),
        SimRampFlight_Default_Default_ (x.SimRampFlight_Default_Default_, f, this),
        SimRampFlightParams_RampFlight_Default_ (x.SimRampFlightParams_RampFlight_Default_, f, this),
        SimRampParams_Ramp_Default_ (x.SimRampParams_Ramp_Default_, f, this),
        SimRefrigerationSystemElement_Compressor_Default_ (x.SimRefrigerationSystemElement_Compressor_Default_, f, this),
        SimRefrigerationSystemElement_Condenser_AirCooled_ (x.SimRefrigerationSystemElement_Condenser_AirCooled_, f, this),
        SimRefrigerationSystemElement_Condenser_Cascade_ (x.SimRefrigerationSystemElement_Condenser_Cascade_, f, this),
        SimRefrigerationSystemElement_Condenser_EvaporativeCooled_ (x.SimRefrigerationSystemElement_Condenser_EvaporativeCooled_, f, this),
        SimRefrigerationSystemElement_Condenser_WaterCooled_ (x.SimRefrigerationSystemElement_Condenser_WaterCooled_, f, this),
        SimRefrigerationSystemElement_Default_Default_ (x.SimRefrigerationSystemElement_Default_Default_, f, this),
        SimRefrigerationSystemElement_GasCooler_AirCooled_ (x.SimRefrigerationSystemElement_GasCooler_AirCooled_, f, this),
        SimRefrigerationSystemElement_PackagedCompressorRack_Default_ (x.SimRefrigerationSystemElement_PackagedCompressorRack_Default_, f, this),
        SimRefrigerationSystemElement_RefrigeratedCase_Default_ (x.SimRefrigerationSystemElement_RefrigeratedCase_Default_, f, this),
        SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_ (x.SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_, f, this),
        SimRefrigerationSystemElement_Subcooler_Default_ (x.SimRefrigerationSystemElement_Subcooler_Default_, f, this),
        SimRefrigerationSystemElement_WalkInCooler_Default_ (x.SimRefrigerationSystemElement_WalkInCooler_Default_, f, this),
        SimRegularTimeSeries_Regular_Default_ (x.SimRegularTimeSeries_Regular_Default_, f, this),
        SimRepresentationMap_RepresentationMap_Default_ (x.SimRepresentationMap_RepresentationMap_Default_, f, this),
        SimResourceConsumption_ExteriorConsumption_Default_ (x.SimResourceConsumption_ExteriorConsumption_Default_, f, this),
        SimResourceConsumption_ExteriorConsumption_Electricity_ (x.SimResourceConsumption_ExteriorConsumption_Electricity_, f, this),
        SimResourceConsumption_ExteriorConsumption_Fuel_ (x.SimResourceConsumption_ExteriorConsumption_Fuel_, f, this),
        SimResourceConsumption_ExteriorConsumption_NaturalGas_ (x.SimResourceConsumption_ExteriorConsumption_NaturalGas_, f, this),
        SimResourceConsumption_ExteriorConsumption_Water_ (x.SimResourceConsumption_ExteriorConsumption_Water_, f, this),
        SimResourceConsumption_InteriorConsumption_Default_ (x.SimResourceConsumption_InteriorConsumption_Default_, f, this),
        SimResultsGuide_ResultsGuide_CustomTemplate_ (x.SimResultsGuide_ResultsGuide_CustomTemplate_, f, this),
        SimResultsGuide_ResultsGuide_Default_ (x.SimResultsGuide_ResultsGuide_Default_, f, this),
        SimResultsGuide_ResultsGuide_PackageTemplate_ (x.SimResultsGuide_ResultsGuide_PackageTemplate_, f, this),
        SimResultsTextInfo_ResultsTextInfo_Default_ (x.SimResultsTextInfo_ResultsTextInfo_Default_, f, this),
        SimResultsVariables_ResultsVariables_Default_ (x.SimResultsVariables_ResultsVariables_Default_, f, this),
        SimResultsView_ResultsView_Default_ (x.SimResultsView_ResultsView_Default_, f, this),
        SimResultsViewSet_ResultsViewSet_Default_ (x.SimResultsViewSet_ResultsViewSet_Default_, f, this),
        SimRoof_Roof_Default_ (x.SimRoof_Roof_Default_, f, this),
        SimSensor_AirVelocitySensor_Default_ (x.SimSensor_AirVelocitySensor_Default_, f, this),
        SimSensor_Default_Default_ (x.SimSensor_Default_Default_, f, this),
        SimSensor_FireSensor_Default_ (x.SimSensor_FireSensor_Default_, f, this),
        SimSensor_GasSensor_CO2Sensor_ (x.SimSensor_GasSensor_CO2Sensor_, f, this),
        SimSensor_GasSensor_SmokeSensor_ (x.SimSensor_GasSensor_SmokeSensor_, f, this),
        SimSensor_HeatSensor_Default_ (x.SimSensor_HeatSensor_Default_, f, this),
        SimSensor_LuxSensor_Default_ (x.SimSensor_LuxSensor_Default_, f, this),
        SimSensor_Meter_AirFlowRateMeter_ (x.SimSensor_Meter_AirFlowRateMeter_, f, this),
        SimSensor_Meter_FluidFlowRateMeter_ (x.SimSensor_Meter_FluidFlowRateMeter_, f, this),
        SimSensor_Meter_HvacZoneWaterUseMeter_ (x.SimSensor_Meter_HvacZoneWaterUseMeter_, f, this),
        SimSensor_MovementSensor_Default_ (x.SimSensor_MovementSensor_Default_, f, this),
        SimSensor_PressureSensor_Default_ (x.SimSensor_PressureSensor_Default_, f, this),
        SimSensor_RelativeHumidity_Type1_ (x.SimSensor_RelativeHumidity_Type1_, f, this),
        SimSensor_RelativeHumidity_Type2_ (x.SimSensor_RelativeHumidity_Type2_, f, this),
        SimSensor_SolarRadiation_Default_ (x.SimSensor_SolarRadiation_Default_, f, this),
        SimSensor_SoundSensor_Default_ (x.SimSensor_SoundSensor_Default_, f, this),
        SimSensor_TemperatureSensor_DryBulb_ (x.SimSensor_TemperatureSensor_DryBulb_, f, this),
        SimSensor_TemperatureSensor_Fluid_ (x.SimSensor_TemperatureSensor_Fluid_, f, this),
        SimSensor_TemperatureSensor_Radiant_ (x.SimSensor_TemperatureSensor_Radiant_, f, this),
        SimSensor_TemperatureSensor_WetBulb_ (x.SimSensor_TemperatureSensor_WetBulb_, f, this),
        SimSensor_VirtualSensor_EmsSensor_ (x.SimSensor_VirtualSensor_EmsSensor_, f, this),
        SimShapeRepresentation_ShapeRepresentation_Default_ (x.SimShapeRepresentation_ShapeRepresentation_Default_, f, this),
        SimSimpleProperty_SimpleProp_Default_ (x.SimSimpleProperty_SimpleProp_Default_, f, this),
        SimSimpleProperty_SimpleProp_ListValue_ (x.SimSimpleProperty_SimpleProp_ListValue_, f, this),
        SimSimpleProperty_SimpleProp_SingleValue_ (x.SimSimpleProperty_SimpleProp_SingleValue_, f, this),
        SimSimulationConfiguration_SimulationConfiguration_Default_ (x.SimSimulationConfiguration_SimulationConfiguration_Default_, f, this),
        SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_ (x.SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_, f, this),
        SimSimulationConfiguration_StandardsConfiguration_LEED_ (x.SimSimulationConfiguration_StandardsConfiguration_LEED_, f, this),
        SimSimulationConfiguration_StandardsConfiguration_SBDH_ (x.SimSimulationConfiguration_StandardsConfiguration_SBDH_, f, this),
        SimSimulationConfiguration_StandardsConfiguration_T24_ (x.SimSimulationConfiguration_StandardsConfiguration_T24_, f, this),
        SimSimulationOutputFormat_ControlReportingTolerances_Default_ (x.SimSimulationOutputFormat_ControlReportingTolerances_Default_, f, this),
        SimSimulationOutputFormat_ControlSizingStyle_Default_ (x.SimSimulationOutputFormat_ControlSizingStyle_Default_, f, this),
        SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_ (x.SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_, f, this),
        SimSimulationOutputFormat_ControlTableStyle_Default_ (x.SimSimulationOutputFormat_ControlTableStyle_Default_, f, this),
        SimSimulationOutputFormat_Default_Default_ (x.SimSimulationOutputFormat_Default_Default_, f, this),
        SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_ (x.SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_, f, this),
        SimSimulationOutputRequest_Daylighting_DaylightFactors_ (x.SimSimulationOutputRequest_Daylighting_DaylightFactors_, f, this),
        SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_ (x.SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_, f, this),
        SimSimulationOutputRequest_Default_Default_ (x.SimSimulationOutputRequest_Default_Default_, f, this),
        SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_ (x.SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_, f, this),
        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_ (x.SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_, f, this),
        SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_ (x.SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_, f, this),
        SimSimulationOutputRequest_General_ReportReqDebuggingData_ (x.SimSimulationOutputRequest_General_ReportReqDebuggingData_, f, this),
        SimSimulationOutputRequest_General_ReportReqDiagnostics_ (x.SimSimulationOutputRequest_General_ReportReqDiagnostics_, f, this),
        SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_ (x.SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_, f, this),
        SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_ (x.SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_, f, this),
        SimSimulationOutputRequest_General_ReportReqSchedules_ (x.SimSimulationOutputRequest_General_ReportReqSchedules_, f, this),
        SimSimulationOutputRequest_General_ReportReqSQLite_ (x.SimSimulationOutputRequest_General_ReportReqSQLite_, f, this),
        SimSimulationOutputRequest_General_ReportReqVariableDictionary_ (x.SimSimulationOutputRequest_General_ReportReqVariableDictionary_, f, this),
        SimSimulationOutputRequest_Geometry_ReportReqConstructions_ (x.SimSimulationOutputRequest_Geometry_ReportReqConstructions_, f, this),
        SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_ (x.SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_, f, this),
        SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_ (x.SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_, f, this),
        SimSimulationOutputRequest_Meters_EnergyEndUseCategory_ (x.SimSimulationOutputRequest_Meters_EnergyEndUseCategory_, f, this),
        SimSimulationOutputRequest_Meters_MeterCumulative_ (x.SimSimulationOutputRequest_Meters_MeterCumulative_, f, this),
        SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_ (x.SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_, f, this),
        SimSimulationOutputRequest_Meters_MeterFileOnly_ (x.SimSimulationOutputRequest_Meters_MeterFileOnly_, f, this),
        SimSimulationOutputRequest_Meters_VarReqMeter_ (x.SimSimulationOutputRequest_Meters_VarReqMeter_, f, this),
        SimSimulationOutputRequest_Meters_VarReqMeterCustom_ (x.SimSimulationOutputRequest_Meters_VarReqMeterCustom_, f, this),
        SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_ (x.SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_, f, this),
        SimSimulationOutputRequest_StandardReports_TableMonthly_ (x.SimSimulationOutputRequest_StandardReports_TableMonthly_, f, this),
        SimSimulationOutputRequest_StandardReports_TableSummaryReports_ (x.SimSimulationOutputRequest_StandardReports_TableSummaryReports_, f, this),
        SimSimulationOutputRequest_StandardReports_TableTimeBins_ (x.SimSimulationOutputRequest_StandardReports_TableTimeBins_, f, this),
        SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_ (x.SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_, f, this),
        SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_ (x.SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_, f, this),
        SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_ (x.SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_, f, this),
        SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_ (x.SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_, f, this),
        SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_ (x.SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_, f, this),
        SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_ (x.SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_, f, this),
        SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_ (x.SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_, f, this),
        SimSimulationParameters_ConvectionCoefficients_Default_ (x.SimSimulationParameters_ConvectionCoefficients_Default_, f, this),
        SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_ (x.SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_, f, this),
        SimSimulationParameters_FluidProperties_Concentration_ (x.SimSimulationParameters_FluidProperties_Concentration_, f, this),
        SimSimulationParameters_FluidProperties_GlycolConcentrations_ (x.SimSimulationParameters_FluidProperties_GlycolConcentrations_, f, this),
        SimSimulationParameters_FluidProperties_Names_ (x.SimSimulationParameters_FluidProperties_Names_, f, this),
        SimSimulationParameters_FluidProperties_Saturated_ (x.SimSimulationParameters_FluidProperties_Saturated_, f, this),
        SimSimulationParameters_FluidProperties_SuperHeated_ (x.SimSimulationParameters_FluidProperties_SuperHeated_, f, this),
        SimSimulationParameters_FluidProperties_Temperatures_ (x.SimSimulationParameters_FluidProperties_Temperatures_, f, this),
        SimSimulationParameters_GroundHeatTransfer_Default_ (x.SimSimulationParameters_GroundHeatTransfer_Default_, f, this),
        SimSimulationParameters_HvacDesign_AirLoopSizing_ (x.SimSimulationParameters_HvacDesign_AirLoopSizing_, f, this),
        SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_ (x.SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_, f, this),
        SimSimulationParameters_HvacDesign_Sizing_ (x.SimSimulationParameters_HvacDesign_Sizing_, f, this),
        SimSimulationParameters_HvacDesign_WaterLoopSizing_ (x.SimSimulationParameters_HvacDesign_WaterLoopSizing_, f, this),
        SimSimulationParameters_HvacDesign_ZoneAIrDistribution_ (x.SimSimulationParameters_HvacDesign_ZoneAIrDistribution_, f, this),
        SimSimulationParameters_HvacDesign_ZoneSizing_ (x.SimSimulationParameters_HvacDesign_ZoneSizing_, f, this),
        SimSimulationParameters_Parametric_FileNameSuffix_ (x.SimSimulationParameters_Parametric_FileNameSuffix_, f, this),
        SimSimulationParameters_Parametric_Logic_ (x.SimSimulationParameters_Parametric_Logic_, f, this),
        SimSimulationParameters_Parametric_RunControl_ (x.SimSimulationParameters_Parametric_RunControl_, f, this),
        SimSimulationParameters_Parametric_SetValueForRun_ (x.SimSimulationParameters_Parametric_SetValueForRun_, f, this),
        SimSimulationParameters_SimulationControl_DaylightSavingTime_ (x.SimSimulationParameters_SimulationControl_DaylightSavingTime_, f, this),
        SimSimulationParameters_SimulationControl_Default_ (x.SimSimulationParameters_SimulationControl_Default_, f, this),
        SimSimulationParameters_SimulationControl_RunPeriod_ (x.SimSimulationParameters_SimulationControl_RunPeriod_, f, this),
        SimSimulationParameters_SimulationControl_RunPeriodCustomRange_ (x.SimSimulationParameters_SimulationControl_RunPeriodCustomRange_, f, this),
        SimSimulationParameters_SimulationControl_SpecialDays_ (x.SimSimulationParameters_SimulationControl_SpecialDays_, f, this),
        SimSimulationParameters_SiteWindPressure_WindDirections_ (x.SimSimulationParameters_SiteWindPressure_WindDirections_, f, this),
        SimSimulationParameters_SiteWindPressure_WindPressureValues_ (x.SimSimulationParameters_SiteWindPressure_WindPressureValues_, f, this),
        SimSimulationParameters_SurfaceProperties_Default_ (x.SimSimulationParameters_SurfaceProperties_Default_, f, this),
        SimSimulationParameters_SurfaceProperties_VaporCoefficients_ (x.SimSimulationParameters_SurfaceProperties_VaporCoefficients_, f, this),
        SimSimulationRun_EPlusSimulation_Default_ (x.SimSimulationRun_EPlusSimulation_Default_, f, this),
        SimSimulationRun_StandardsRun_ASHRAE90_1_ (x.SimSimulationRun_StandardsRun_ASHRAE90_1_, f, this),
        SimSimulationRun_StandardsRun_LEED_ (x.SimSimulationRun_StandardsRun_LEED_, f, this),
        SimSimulationRun_StandardsRun_SBDH_ (x.SimSimulationRun_StandardsRun_SBDH_, f, this),
        SimSimulationRun_StandardsRun_T24_ (x.SimSimulationRun_StandardsRun_T24_, f, this),
        SimSite_AdjacentSite_Default_ (x.SimSite_AdjacentSite_Default_, f, this),
        SimSite_BuildingSite_Default_ (x.SimSite_BuildingSite_Default_, f, this),
        SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_ (x.SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_, f, this),
        SimSiteAssembly_SiteAssembly_ExteriorLighting_ (x.SimSiteAssembly_SiteAssembly_ExteriorLighting_, f, this),
        SimSiteAssembly_SiteAssembly_ExteriorSignage_ (x.SimSiteAssembly_SiteAssembly_ExteriorSignage_, f, this),
        SimSiteAssembly_SiteAssembly_Fuel_ (x.SimSiteAssembly_SiteAssembly_Fuel_, f, this),
        SimSiteAssembly_SiteAssembly_FuelCell_ (x.SimSiteAssembly_SiteAssembly_FuelCell_, f, this),
        SimSiteAssembly_SiteAssembly_SolarHotWater_ (x.SimSiteAssembly_SiteAssembly_SolarHotWater_, f, this),
        SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_ (x.SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_, f, this),
        SimSiteAssembly_SiteAssembly_Water_ (x.SimSiteAssembly_SiteAssembly_Water_, f, this),
        SimSiteAssembly_SiteAssembly_WindTurbine_ (x.SimSiteAssembly_SiteAssembly_WindTurbine_, f, this),
        SimSIUnitType_SiUnit_Default_ (x.SimSIUnitType_SiUnit_Default_, f, this),
        SimSlab_Ceiling_InterzoneCeiling_ (x.SimSlab_Ceiling_InterzoneCeiling_, f, this),
        SimSlab_Ceiling_InterzoneCeilingAdiabatic_ (x.SimSlab_Ceiling_InterzoneCeilingAdiabatic_, f, this),
        SimSlab_Ceiling_InterzoneCeilingDetailed_ (x.SimSlab_Ceiling_InterzoneCeilingDetailed_, f, this),
        SimSlab_Default_Default_ (x.SimSlab_Default_Default_, f, this),
        SimSlab_Floor_Adiabatic_ (x.SimSlab_Floor_Adiabatic_, f, this),
        SimSlab_Floor_FloorOverAir_ (x.SimSlab_Floor_FloorOverAir_, f, this),
        SimSlab_Floor_FloorOverAirDetailed_ (x.SimSlab_Floor_FloorOverAirDetailed_, f, this),
        SimSlab_Floor_FloorOverEarth_ (x.SimSlab_Floor_FloorOverEarth_, f, this),
        SimSlab_Floor_FloorOverEarthDetailed_ (x.SimSlab_Floor_FloorOverEarthDetailed_, f, this),
        SimSlab_Floor_InterzoneFloor_ (x.SimSlab_Floor_InterzoneFloor_, f, this),
        SimSlab_Floor_InterzoneFloorDetailed_ (x.SimSlab_Floor_InterzoneFloorDetailed_, f, this),
        SimSlab_Floor_RaisedFloor_ (x.SimSlab_Floor_RaisedFloor_, f, this),
        SimSlab_Landing_Default_ (x.SimSlab_Landing_Default_, f, this),
        SimSlab_OtherSideCoefficients_Default_ (x.SimSlab_OtherSideCoefficients_Default_, f, this),
        SimSlab_OtherSideCoefficients_Detailed_ (x.SimSlab_OtherSideCoefficients_Detailed_, f, this),
        SimSlab_OtherSideCoefficients_DetailedFloor_ (x.SimSlab_OtherSideCoefficients_DetailedFloor_, f, this),
        SimSlab_OtherSideCoefficients_DetailedRoofCeiling_ (x.SimSlab_OtherSideCoefficients_DetailedRoofCeiling_, f, this),
        SimSlab_OtherSideConditionsModel_Default_ (x.SimSlab_OtherSideConditionsModel_Default_, f, this),
        SimSlab_OtherSideConditionsModel_Detailed_ (x.SimSlab_OtherSideConditionsModel_Detailed_, f, this),
        SimSlab_OtherSideConditionsModel_DetailedFloor_ (x.SimSlab_OtherSideConditionsModel_DetailedFloor_, f, this),
        SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_ (x.SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_, f, this),
        SimSlab_RoofSlab_RoofUnderAir_ (x.SimSlab_RoofSlab_RoofUnderAir_, f, this),
        SimSlab_RoofSlab_RoofUnderAirDetailed_ (x.SimSlab_RoofSlab_RoofUnderAirDetailed_, f, this),
        SimSlab_RoofSlab_RoofUnderEarth_ (x.SimSlab_RoofSlab_RoofUnderEarth_, f, this),
        SimSlab_RoofSlab_RoofUnderEarthDetailed_ (x.SimSlab_RoofSlab_RoofUnderEarthDetailed_, f, this),
        SimSlabParams_Slab_Ceiling_ (x.SimSlabParams_Slab_Ceiling_, f, this),
        SimSlabParams_Slab_Floor_ (x.SimSlabParams_Slab_Floor_, f, this),
        SimSlabParams_Slab_Landing_ (x.SimSlabParams_Slab_Landing_, f, this),
        SimSlabParams_Slab_Roof_ (x.SimSlabParams_Slab_Roof_, f, this),
        SimSlabType_Slab_Ceiling_ (x.SimSlabType_Slab_Ceiling_, f, this),
        SimSlabType_Slab_Default_ (x.SimSlabType_Slab_Default_, f, this),
        SimSlabType_Slab_Floor_ (x.SimSlabType_Slab_Floor_, f, this),
        SimSlabType_Slab_Landing_ (x.SimSlabType_Slab_Landing_, f, this),
        SimSlabType_Slab_Roof_ (x.SimSlabType_Slab_Roof_, f, this),
        SimSoftwareApplication_Default_Default_ (x.SimSoftwareApplication_Default_Default_, f, this),
        SimSolarObsParams_SolarObstruction_Default_ (x.SimSolarObsParams_SolarObstruction_Default_, f, this),
        SimSolarShade_Default_Default_ (x.SimSolarShade_Default_Default_, f, this),
        SimSolarShade_Fin_Default_ (x.SimSolarShade_Fin_Default_, f, this),
        SimSolarShade_Fin_Projection_ (x.SimSolarShade_Fin_Projection_, f, this),
        SimSolarShade_Overhang_Continuous_ (x.SimSolarShade_Overhang_Continuous_, f, this),
        SimSolarShade_Overhang_Default_ (x.SimSolarShade_Overhang_Default_, f, this),
        SimSolarShade_Overhang_Projection_ (x.SimSolarShade_Overhang_Projection_, f, this),
        SimSolarShade_ZoneDetailed_Default_ (x.SimSolarShade_ZoneDetailed_Default_, f, this),
        SimSolarShadeArrayParams_SolarShadeArray_Default_ (x.SimSolarShadeArrayParams_SolarShadeArray_Default_, f, this),
        SimSolarShadePanelParams_ShadePanel_SolarShading_ (x.SimSolarShadePanelParams_ShadePanel_SolarShading_, f, this),
        SimSolarShadeType_SolarShade_Default_ (x.SimSolarShadeType_SolarShade_Default_, f, this),
        SimSolarShadeType_SolarShade_LeftFin_ (x.SimSolarShadeType_SolarShade_LeftFin_, f, this),
        SimSolarShadeType_SolarShade_Overhang_ (x.SimSolarShadeType_SolarShade_Overhang_, f, this),
        SimSolarShadeType_SolarShade_RightFin_ (x.SimSolarShadeType_SolarShade_RightFin_, f, this),
        SimSpace_Occupied_Default_ (x.SimSpace_Occupied_Default_, f, this),
        SimSpace_Unoccupied_CeilingPlenum_ (x.SimSpace_Unoccupied_CeilingPlenum_, f, this),
        SimSpace_Unoccupied_CeilingVoid_ (x.SimSpace_Unoccupied_CeilingVoid_, f, this),
        SimSpace_Unoccupied_Default_ (x.SimSpace_Unoccupied_Default_, f, this),
        SimSpace_Unoccupied_FloorPlenum_ (x.SimSpace_Unoccupied_FloorPlenum_, f, this),
        SimSpace_Unoccupied_FloorVoid_ (x.SimSpace_Unoccupied_FloorVoid_, f, this),
        SimSpace_Unoccupied_Plenum_ (x.SimSpace_Unoccupied_Plenum_, f, this),
        SimSpaceBoundary_Ceiling_InterzoneCeiling_ (x.SimSpaceBoundary_Ceiling_InterzoneCeiling_, f, this),
        SimSpaceBoundary_Door_GlazedDoor_ (x.SimSpaceBoundary_Door_GlazedDoor_, f, this),
        SimSpaceBoundary_Door_OpaqueDoor_ (x.SimSpaceBoundary_Door_OpaqueDoor_, f, this),
        SimSpaceBoundary_FirstLevel_Default_ (x.SimSpaceBoundary_FirstLevel_Default_, f, this),
        SimSpaceBoundary_Floor_FloorOverAir_ (x.SimSpaceBoundary_Floor_FloorOverAir_, f, this),
        SimSpaceBoundary_Floor_FloorOverEarth_ (x.SimSpaceBoundary_Floor_FloorOverEarth_, f, this),
        SimSpaceBoundary_Floor_InterzoneFloor_ (x.SimSpaceBoundary_Floor_InterzoneFloor_, f, this),
        SimSpaceBoundary_RoofSlab_RoofUnderAir_ (x.SimSpaceBoundary_RoofSlab_RoofUnderAir_, f, this),
        SimSpaceBoundary_SecondLevel_Default_ (x.SimSpaceBoundary_SecondLevel_Default_, f, this),
        SimSpaceBoundary_SecondLevel_SubTypeA_ (x.SimSpaceBoundary_SecondLevel_SubTypeA_, f, this),
        SimSpaceBoundary_SecondLevel_SubTypeB_ (x.SimSpaceBoundary_SecondLevel_SubTypeB_, f, this),
        SimSpaceBoundary_SecondLevel_SubTypeC_ (x.SimSpaceBoundary_SecondLevel_SubTypeC_, f, this),
        SimSpaceBoundary_Skylight_Default_ (x.SimSpaceBoundary_Skylight_Default_, f, this),
        SimSpaceBoundary_Wall_ExteriorAboveGrade_ (x.SimSpaceBoundary_Wall_ExteriorAboveGrade_, f, this),
        SimSpaceBoundary_Wall_ExteriorBelowGrade_ (x.SimSpaceBoundary_Wall_ExteriorBelowGrade_, f, this),
        SimSpaceBoundary_Wall_Interior_ (x.SimSpaceBoundary_Wall_Interior_, f, this),
        SimSpaceBoundary_Window_Exterior_ (x.SimSpaceBoundary_Window_Exterior_, f, this),
        SimSpaceOccupant_Actor_SpaceOccupant_ (x.SimSpaceOccupant_Actor_SpaceOccupant_, f, this),
        SimSpaceParams_Space_Default_ (x.SimSpaceParams_Space_Default_, f, this),
        SimSpaceType_Space_Default_ (x.SimSpaceType_Space_Default_, f, this),
        SimSpatialZone_OutdoorAir_Default_ (x.SimSpatialZone_OutdoorAir_Default_, f, this),
        SimSpatialZone_Plenum_CeilingPlenum_ (x.SimSpatialZone_Plenum_CeilingPlenum_, f, this),
        SimSpatialZone_Plenum_Default_ (x.SimSpatialZone_Plenum_Default_, f, this),
        SimSpatialZone_Plenum_FloorPlenum_ (x.SimSpatialZone_Plenum_FloorPlenum_, f, this),
        SimSpatialZone_SecurityZone_Public_ (x.SimSpatialZone_SecurityZone_Public_, f, this),
        SimSpatialZone_SecurityZone_Security_ (x.SimSpatialZone_SecurityZone_Security_, f, this),
        SimSpatialZone_SecurityZone_StaffOnly_ (x.SimSpatialZone_SecurityZone_StaffOnly_, f, this),
        SimSpatialZone_ThermalZone_AboveCeilingVoid_ (x.SimSpatialZone_ThermalZone_AboveCeilingVoid_, f, this),
        SimSpatialZone_ThermalZone_BelowFloorVoid_ (x.SimSpatialZone_ThermalZone_BelowFloorVoid_, f, this),
        SimSpatialZone_ThermalZone_Default_ (x.SimSpatialZone_ThermalZone_Default_, f, this),
        SimSpatialZone_ThermalZone_TemplateForZoneGroup_ (x.SimSpatialZone_ThermalZone_TemplateForZoneGroup_, f, this),
        SimStair_Stair_Default_ (x.SimStair_Stair_Default_, f, this),
        SimStairFlight_Default_Default_ (x.SimStairFlight_Default_Default_, f, this),
        SimStairFlightParams_StairFlight_Default_ (x.SimStairFlightParams_StairFlight_Default_, f, this),
        SimStairParams_Stair_Default_ (x.SimStairParams_Stair_Default_, f, this),
        SimSystem_AirFlowNetwork_Default_ (x.SimSystem_AirFlowNetwork_Default_, f, this),
        SimSystem_Electrical_SystemsContainer_ (x.SimSystem_Electrical_SystemsContainer_, f, this),
        SimSystem_ElectricalLighting_FullSystem_ (x.SimSystem_ElectricalLighting_FullSystem_, f, this),
        SimSystem_ElectricalLighting_LightingCircuit_ (x.SimSystem_ElectricalLighting_LightingCircuit_, f, this),
        SimSystem_ElectricalPower_FullSystem_ (x.SimSystem_ElectricalPower_FullSystem_, f, this),
        SimSystem_ElectroMechanical_PV_SolarThermal_ (x.SimSystem_ElectroMechanical_PV_SolarThermal_, f, this),
        SimSystem_Hvac_SystemsContainer_ (x.SimSystem_Hvac_SystemsContainer_, f, this),
        SimSystem_HvacAir_AirBranch_ (x.SimSystem_HvacAir_AirBranch_, f, this),
        SimSystem_HvacAir_Control_ (x.SimSystem_HvacAir_Control_, f, this),
        SimSystem_HvacAir_ControlDemand_ (x.SimSystem_HvacAir_ControlDemand_, f, this),
        SimSystem_HvacAir_ControlSupply_ (x.SimSystem_HvacAir_ControlSupply_, f, this),
        SimSystem_HvacAir_Demand_ (x.SimSystem_HvacAir_Demand_, f, this),
        SimSystem_HvacAir_DemandSideReturnPath_ (x.SimSystem_HvacAir_DemandSideReturnPath_, f, this),
        SimSystem_HvacAir_DemandSideSupplyPath_ (x.SimSystem_HvacAir_DemandSideSupplyPath_, f, this),
        SimSystem_HvacAir_DemandSideZoneHvac_ (x.SimSystem_HvacAir_DemandSideZoneHvac_, f, this),
        SimSystem_HvacAir_FullSystem_ (x.SimSystem_HvacAir_FullSystem_, f, this),
        SimSystem_HvacAir_FullSystemDual_ (x.SimSystem_HvacAir_FullSystemDual_, f, this),
        SimSystem_HvacAir_FullSystemTriple_ (x.SimSystem_HvacAir_FullSystemTriple_, f, this),
        SimSystem_HvacAir_OutdoorAir_ (x.SimSystem_HvacAir_OutdoorAir_, f, this),
        SimSystem_HvacAir_OutdoorAirExhaust_ (x.SimSystem_HvacAir_OutdoorAirExhaust_, f, this),
        SimSystem_HvacAir_OutdoorAirSupply_ (x.SimSystem_HvacAir_OutdoorAirSupply_, f, this),
        SimSystem_HvacAir_Supply_ (x.SimSystem_HvacAir_Supply_, f, this),
        SimSystem_HvacAir_SupplySideReturnPath_ (x.SimSystem_HvacAir_SupplySideReturnPath_, f, this),
        SimSystem_HvacAir_SupplySideSupplyPath_ (x.SimSystem_HvacAir_SupplySideSupplyPath_, f, this),
        SimSystem_HvacChilledWater_Control_ (x.SimSystem_HvacChilledWater_Control_, f, this),
        SimSystem_HvacChilledWater_ControlDemand_ (x.SimSystem_HvacChilledWater_ControlDemand_, f, this),
        SimSystem_HvacChilledWater_ControlSupply_ (x.SimSystem_HvacChilledWater_ControlSupply_, f, this),
        SimSystem_HvacChilledWater_Demand_ (x.SimSystem_HvacChilledWater_Demand_, f, this),
        SimSystem_HvacChilledWater_DemandSideDemandComponents_ (x.SimSystem_HvacChilledWater_DemandSideDemandComponents_, f, this),
        SimSystem_HvacChilledWater_DemandSideReturnPath_ (x.SimSystem_HvacChilledWater_DemandSideReturnPath_, f, this),
        SimSystem_HvacChilledWater_DemandSideSupplyPath_ (x.SimSystem_HvacChilledWater_DemandSideSupplyPath_, f, this),
        SimSystem_HvacChilledWater_FullSystem_ (x.SimSystem_HvacChilledWater_FullSystem_, f, this),
        SimSystem_HvacChilledWater_Supply_ (x.SimSystem_HvacChilledWater_Supply_, f, this),
        SimSystem_HvacChilledWater_WaterBranch_ (x.SimSystem_HvacChilledWater_WaterBranch_, f, this),
        SimSystem_HvacCondenser_CondenserBranch_ (x.SimSystem_HvacCondenser_CondenserBranch_, f, this),
        SimSystem_HvacCondenser_Control_ (x.SimSystem_HvacCondenser_Control_, f, this),
        SimSystem_HvacCondenser_ControlDemand_ (x.SimSystem_HvacCondenser_ControlDemand_, f, this),
        SimSystem_HvacCondenser_ControlSupply_ (x.SimSystem_HvacCondenser_ControlSupply_, f, this),
        SimSystem_HvacCondenser_Demand_ (x.SimSystem_HvacCondenser_Demand_, f, this),
        SimSystem_HvacCondenser_DemandSideDemandComponents_ (x.SimSystem_HvacCondenser_DemandSideDemandComponents_, f, this),
        SimSystem_HvacCondenser_DemandSideReturnPath_ (x.SimSystem_HvacCondenser_DemandSideReturnPath_, f, this),
        SimSystem_HvacCondenser_DemandSideSupplyPath_ (x.SimSystem_HvacCondenser_DemandSideSupplyPath_, f, this),
        SimSystem_HvacCondenser_FullSystem_ (x.SimSystem_HvacCondenser_FullSystem_, f, this),
        SimSystem_HvacCondenser_Supply_ (x.SimSystem_HvacCondenser_Supply_, f, this),
        SimSystem_HvacHotWater_Control_ (x.SimSystem_HvacHotWater_Control_, f, this),
        SimSystem_HvacHotWater_ControlDemand_ (x.SimSystem_HvacHotWater_ControlDemand_, f, this),
        SimSystem_HvacHotWater_ControlSupply_ (x.SimSystem_HvacHotWater_ControlSupply_, f, this),
        SimSystem_HvacHotWater_Demand_ (x.SimSystem_HvacHotWater_Demand_, f, this),
        SimSystem_HvacHotWater_DemandSideDemandComponents_ (x.SimSystem_HvacHotWater_DemandSideDemandComponents_, f, this),
        SimSystem_HvacHotWater_DemandSideReturnPath_ (x.SimSystem_HvacHotWater_DemandSideReturnPath_, f, this),
        SimSystem_HvacHotWater_DemandSideSupplyPath_ (x.SimSystem_HvacHotWater_DemandSideSupplyPath_, f, this),
        SimSystem_HvacHotWater_FullSystem_ (x.SimSystem_HvacHotWater_FullSystem_, f, this),
        SimSystem_HvacHotWater_Supply_ (x.SimSystem_HvacHotWater_Supply_, f, this),
        SimSystem_HvacHotWater_WaterBranch_ (x.SimSystem_HvacHotWater_WaterBranch_, f, this),
        SimSystem_HvacMixedWater_Control_ (x.SimSystem_HvacMixedWater_Control_, f, this),
        SimSystem_HvacMixedWater_ControlDemand_ (x.SimSystem_HvacMixedWater_ControlDemand_, f, this),
        SimSystem_HvacMixedWater_ControlSupply_ (x.SimSystem_HvacMixedWater_ControlSupply_, f, this),
        SimSystem_HvacMixedWater_Demand_ (x.SimSystem_HvacMixedWater_Demand_, f, this),
        SimSystem_HvacMixedWater_DemandSideDemandComponents_ (x.SimSystem_HvacMixedWater_DemandSideDemandComponents_, f, this),
        SimSystem_HvacMixedWater_DemandSideReturnPath_ (x.SimSystem_HvacMixedWater_DemandSideReturnPath_, f, this),
        SimSystem_HvacMixedWater_DemandSideSupplyPath_ (x.SimSystem_HvacMixedWater_DemandSideSupplyPath_, f, this),
        SimSystem_HvacMixedWater_FullSystem_ (x.SimSystem_HvacMixedWater_FullSystem_, f, this),
        SimSystem_HvacMixedWater_Supply_ (x.SimSystem_HvacMixedWater_Supply_, f, this),
        SimSystem_HvacMixedWater_WaterBranch_ (x.SimSystem_HvacMixedWater_WaterBranch_, f, this),
        SimSystem_HvacSteam_Control_ (x.SimSystem_HvacSteam_Control_, f, this),
        SimSystem_HvacSteam_ControlDemand_ (x.SimSystem_HvacSteam_ControlDemand_, f, this),
        SimSystem_HvacSteam_ControlSupply_ (x.SimSystem_HvacSteam_ControlSupply_, f, this),
        SimSystem_HvacSteam_Demand_ (x.SimSystem_HvacSteam_Demand_, f, this),
        SimSystem_HvacSteam_DemandSideDemandComponents_ (x.SimSystem_HvacSteam_DemandSideDemandComponents_, f, this),
        SimSystem_HvacSteam_DemandSideReturnPath_ (x.SimSystem_HvacSteam_DemandSideReturnPath_, f, this),
        SimSystem_HvacSteam_DemandSideSupplyPath_ (x.SimSystem_HvacSteam_DemandSideSupplyPath_, f, this),
        SimSystem_HvacSteam_FullSystem_ (x.SimSystem_HvacSteam_FullSystem_, f, this),
        SimSystem_HvacSteam_SteamBranch_ (x.SimSystem_HvacSteam_SteamBranch_, f, this),
        SimSystem_HvacSteam_Supply_ (x.SimSystem_HvacSteam_Supply_, f, this),
        SimSystem_Mechanical_SystemsContainer_ (x.SimSystem_Mechanical_SystemsContainer_, f, this),
        SimSystem_Plumbing_ColdWater_ (x.SimSystem_Plumbing_ColdWater_, f, this),
        SimSystem_Plumbing_GrayWater_ (x.SimSystem_Plumbing_GrayWater_, f, this),
        SimSystem_Plumbing_HotWater_ (x.SimSystem_Plumbing_HotWater_, f, this),
        SimSystem_Plumbing_PotableWater_ (x.SimSystem_Plumbing_PotableWater_, f, this),
        SimSystem_Plumbing_SystemsContainer_ (x.SimSystem_Plumbing_SystemsContainer_, f, this),
        SimSystem_Plumbing_UndergroundPipingCircuit_ (x.SimSystem_Plumbing_UndergroundPipingCircuit_, f, this),
        SimSystem_Plumbing_WasteWater_ (x.SimSystem_Plumbing_WasteWater_, f, this),
        SimSystem_Plumbing_WaterUseSystem_ (x.SimSystem_Plumbing_WaterUseSystem_, f, this),
        SimSystem_Plumbing_WaterUseWell_ (x.SimSystem_Plumbing_WaterUseWell_, f, this),
        SimSystem_RefrigerationPrimary_Control_ (x.SimSystem_RefrigerationPrimary_Control_, f, this),
        SimSystem_RefrigerationPrimary_Demand_ (x.SimSystem_RefrigerationPrimary_Demand_, f, this),
        SimSystem_RefrigerationPrimary_FullSystem_ (x.SimSystem_RefrigerationPrimary_FullSystem_, f, this),
        SimSystem_RefrigerationPrimary_Supply_ (x.SimSystem_RefrigerationPrimary_Supply_, f, this),
        SimSystem_RefrigerationSecondary_Control_ (x.SimSystem_RefrigerationSecondary_Control_, f, this),
        SimSystem_RefrigerationSecondary_Demand_ (x.SimSystem_RefrigerationSecondary_Demand_, f, this),
        SimSystem_RefrigerationSecondary_FullSystem_ (x.SimSystem_RefrigerationSecondary_FullSystem_, f, this),
        SimSystem_RefrigerationSecondary_Supply_ (x.SimSystem_RefrigerationSecondary_Supply_, f, this),
        SimSystem_RefrigerationTranscritical_Control_ (x.SimSystem_RefrigerationTranscritical_Control_, f, this),
        SimSystem_RefrigerationTranscritical_Demand_ (x.SimSystem_RefrigerationTranscritical_Demand_, f, this),
        SimSystem_RefrigerationTranscritical_FullSystem_ (x.SimSystem_RefrigerationTranscritical_FullSystem_, f, this),
        SimSystem_RefrigerationTranscritical_Supply_ (x.SimSystem_RefrigerationTranscritical_Supply_, f, this),
        SimSystem_ServiceHotWater_Control_ (x.SimSystem_ServiceHotWater_Control_, f, this),
        SimSystem_ServiceHotWater_Demand_ (x.SimSystem_ServiceHotWater_Demand_, f, this),
        SimSystem_ServiceHotWater_FullSystem_ (x.SimSystem_ServiceHotWater_FullSystem_, f, this),
        SimSystem_ServiceHotWater_Supply_ (x.SimSystem_ServiceHotWater_Supply_, f, this),
        SimSystem_ServiceHotWater_WaterBranch_ (x.SimSystem_ServiceHotWater_WaterBranch_, f, this),
        SimSystem_SitePowerDemand_ElectricityConsuming_ (x.SimSystem_SitePowerDemand_ElectricityConsuming_, f, this),
        SimSystem_SitePowerDemand_FuelConsuming_ (x.SimSystem_SitePowerDemand_FuelConsuming_, f, this),
        SimSystem_SitePowerDemand_WaterConsuming_ (x.SimSystem_SitePowerDemand_WaterConsuming_, f, this),
        SimSystem_SitePowerGeneration_Other_ (x.SimSystem_SitePowerGeneration_Other_, f, this),
        SimSystem_SitePowerGeneration_Photovoltaic_ (x.SimSystem_SitePowerGeneration_Photovoltaic_, f, this),
        SimSystem_SitePowerGeneration_WindTurbine_ (x.SimSystem_SitePowerGeneration_WindTurbine_, f, this),
        SimSystem_Transport_Elevator_ (x.SimSystem_Transport_Elevator_, f, this),
        SimSystem_Transport_Escalator_ (x.SimSystem_Transport_Escalator_, f, this),
        SimSystem_Transport_MovingWalkway_ (x.SimSystem_Transport_MovingWalkway_, f, this),
        SimSystem_Transport_SystemsContainer_ (x.SimSystem_Transport_SystemsContainer_, f, this),
        SimSystem_VariableRefrigerantFlow_Control_ (x.SimSystem_VariableRefrigerantFlow_Control_, f, this),
        SimSystem_VariableRefrigerantFlow_Demand_ (x.SimSystem_VariableRefrigerantFlow_Demand_, f, this),
        SimSystem_VariableRefrigerantFlow_FullSystem_ (x.SimSystem_VariableRefrigerantFlow_FullSystem_, f, this),
        SimSystem_VariableRefrigerantFlow_Supply_ (x.SimSystem_VariableRefrigerantFlow_Supply_, f, this),
        SimSystem_ZoneHvacGroup_Control_ (x.SimSystem_ZoneHvacGroup_Control_, f, this),
        SimSystem_ZoneHvacGroup_ControlDemand_ (x.SimSystem_ZoneHvacGroup_ControlDemand_, f, this),
        SimSystem_ZoneHvacGroup_ControlSupply_ (x.SimSystem_ZoneHvacGroup_ControlSupply_, f, this),
        SimSystem_ZoneHvacGroup_Demand_ (x.SimSystem_ZoneHvacGroup_Demand_, f, this),
        SimSystem_ZoneHvacGroup_DemandSideReturnPath_ (x.SimSystem_ZoneHvacGroup_DemandSideReturnPath_, f, this),
        SimSystem_ZoneHvacGroup_DemandSideSupplyPath_ (x.SimSystem_ZoneHvacGroup_DemandSideSupplyPath_, f, this),
        SimSystem_ZoneHvacGroup_DemandSideZoneHvac_ (x.SimSystem_ZoneHvacGroup_DemandSideZoneHvac_, f, this),
        SimSystem_ZoneHvacGroup_FullSystem_ (x.SimSystem_ZoneHvacGroup_FullSystem_, f, this),
        SimSystem_ZoneHvacGroup_Supply_ (x.SimSystem_ZoneHvacGroup_Supply_, f, this),
        SimSystem_ZoneShwGroup_Demand_ (x.SimSystem_ZoneShwGroup_Demand_, f, this),
        SimSystem_ZoneShwGroup_FullSystem_ (x.SimSystem_ZoneShwGroup_FullSystem_, f, this),
        SimSystem_ZoneShwGroup_Supply_ (x.SimSystem_ZoneShwGroup_Supply_, f, this),
        SimTemplateConstructions_Constructions_Default_ (x.SimTemplateConstructions_Constructions_Default_, f, this),
        SimTemplateDaylighting_Daylighting_Default_ (x.SimTemplateDaylighting_Daylighting_Default_, f, this),
        SimTemplateDaylighting_Daylighting_Skylights_ (x.SimTemplateDaylighting_Daylighting_Skylights_, f, this),
        SimTemplateDaylighting_Daylighting_Windows_ (x.SimTemplateDaylighting_Daylighting_Windows_, f, this),
        SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_ (x.SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_, f, this),
        SimTemplateInteriorLighting_InteriorLighting_Default_ (x.SimTemplateInteriorLighting_InteriorLighting_Default_, f, this),
        SimTemplateLocation_Location_Default_ (x.SimTemplateLocation_Location_Default_, f, this),
        SimTemplateNaturalVentilation_NaturalVentilation_Default_ (x.SimTemplateNaturalVentilation_NaturalVentilation_Default_, f, this),
        SimTemplateOutputFormatSet_OutputFormatSet_Default_ (x.SimTemplateOutputFormatSet_OutputFormatSet_Default_, f, this),
        SimTemplateOutputRequestSet_OutputRequestSet_Default_ (x.SimTemplateOutputRequestSet_OutputRequestSet_Default_, f, this),
        SimTemplateSimulationParameters_SimulationParameters_Default_ (x.SimTemplateSimulationParameters_SimulationParameters_Default_, f, this),
        SimTemplateZoneConditions_ZoneConditions_Default_ (x.SimTemplateZoneConditions_ZoneConditions_Default_, f, this),
        SimTemplateZoneLoads_ZoneLoads_Default_ (x.SimTemplateZoneLoads_ZoneLoads_Default_, f, this),
        SimTimeSeriesSchedule_Calendar_Configuration_ (x.SimTimeSeriesSchedule_Calendar_Configuration_, f, this),
        SimTimeSeriesSchedule_Calendar_Default_ (x.SimTimeSeriesSchedule_Calendar_Default_, f, this),
        SimTimeSeriesSchedule_Calendar_SpecialDays_ (x.SimTimeSeriesSchedule_Calendar_SpecialDays_, f, this),
        SimTimeSeriesSchedule_Compact_Default_ (x.SimTimeSeriesSchedule_Compact_Default_, f, this),
        SimTimeSeriesSchedule_Constant_Default_ (x.SimTimeSeriesSchedule_Constant_Default_, f, this),
        SimTimeSeriesSchedule_Day_Hourly_ (x.SimTimeSeriesSchedule_Day_Hourly_, f, this),
        SimTimeSeriesSchedule_Day_Interval_ (x.SimTimeSeriesSchedule_Day_Interval_, f, this),
        SimTimeSeriesSchedule_Day_List_ (x.SimTimeSeriesSchedule_Day_List_, f, this),
        SimTimeSeriesSchedule_File_Default_ (x.SimTimeSeriesSchedule_File_Default_, f, this),
        SimTimeSeriesSchedule_Limits_Default_ (x.SimTimeSeriesSchedule_Limits_Default_, f, this),
        SimTimeSeriesSchedule_TimeSeries_Default_ (x.SimTimeSeriesSchedule_TimeSeries_Default_, f, this),
        SimTimeSeriesSchedule_Week_Compact_ (x.SimTimeSeriesSchedule_Week_Compact_, f, this),
        SimTimeSeriesSchedule_Week_Daily_ (x.SimTimeSeriesSchedule_Week_Daily_, f, this),
        SimTimeSeriesSchedule_Year_Default_ (x.SimTimeSeriesSchedule_Year_Default_, f, this),
        SimTimeSeriesValue_TimeSeries_Irregular_ (x.SimTimeSeriesValue_TimeSeries_Irregular_, f, this),
        SimTimeSeriesValue_TimeSeries_Regular_ (x.SimTimeSeriesValue_TimeSeries_Regular_, f, this),
        SimToplogicalRepresentation_TopologicalRepresentation_Default_ (x.SimToplogicalRepresentation_TopologicalRepresentation_Default_, f, this),
        SimTransportSysAssembly_TransportSysAssembly_Default_ (x.SimTransportSysAssembly_TransportSysAssembly_Default_, f, this),
        SimTransportSysAssembly_TransportSysAssembly_Elevator_ (x.SimTransportSysAssembly_TransportSysAssembly_Elevator_, f, this),
        SimTransportSysAssembly_TransportSysAssembly_Escalator_ (x.SimTransportSysAssembly_TransportSysAssembly_Escalator_, f, this),
        SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_ (x.SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_, f, this),
        SimValidationResultsAir_AirLoop_Default_ (x.SimValidationResultsAir_AirLoop_Default_, f, this),
        SimValidationResultsBldg_Building_Default_ (x.SimValidationResultsBldg_Building_Default_, f, this),
        SimValidationResultsRefrig_RFGLoop_Default_ (x.SimValidationResultsRefrig_RFGLoop_Default_, f, this),
        SimValidationResultsVRF_VRFLoop_Default_ (x.SimValidationResultsVRF_VRFLoop_Default_, f, this),
        SimValidationResultsWater_CHWLoop_Default_ (x.SimValidationResultsWater_CHWLoop_Default_, f, this),
        SimValidationResultsWater_CWLoop_Default_ (x.SimValidationResultsWater_CWLoop_Default_, f, this),
        SimValidationResultsWater_HWLoop_Default_ (x.SimValidationResultsWater_HWLoop_Default_, f, this),
        SimValidationResultsWater_MxWLoop_Default_ (x.SimValidationResultsWater_MxWLoop_Default_, f, this),
        SimValidationResultsWater_SHWLoop_Default_ (x.SimValidationResultsWater_SHWLoop_Default_, f, this),
        SimValidationResultsWater_STMLoop_Default_ (x.SimValidationResultsWater_STMLoop_Default_, f, this),
        SimValidationResultsZoneHvac_ZoneHvac_Default_ (x.SimValidationResultsZoneHvac_ZoneHvac_Default_, f, this),
        SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_ (x.SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_, f, this),
        SimVentilationAssembly_VentilationAssembly_EarthTube_ (x.SimVentilationAssembly_VentilationAssembly_EarthTube_, f, this),
        SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_ (x.SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_, f, this),
        SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_ (x.SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_, f, this),
        SimVentilationAssembly_VentilationAssembly_ThermalChimney_ (x.SimVentilationAssembly_VentilationAssembly_ThermalChimney_, f, this),
        SimVertex_Vertex_Point_ (x.SimVertex_Vertex_Point_, f, this),
        SimVirtualElement_Default_Default_ (x.SimVirtualElement_Default_Default_, f, this),
        SimVirtualElement_Slab_Ceiling_ (x.SimVirtualElement_Slab_Ceiling_, f, this),
        SimVirtualElement_Slab_Default_ (x.SimVirtualElement_Slab_Default_, f, this),
        SimVirtualElement_Slab_Floor_ (x.SimVirtualElement_Slab_Floor_, f, this),
        SimVirtualElement_Slab_OpeningFiller_ (x.SimVirtualElement_Slab_OpeningFiller_, f, this),
        SimVirtualElement_Wall_Default_ (x.SimVirtualElement_Wall_Default_, f, this),
        SimVirtualElement_Wall_OpeningFiller_ (x.SimVirtualElement_Wall_OpeningFiller_, f, this),
        SimVirtualGridIntersection_VirtualGridIntersection_Default_ (x.SimVirtualGridIntersection_VirtualGridIntersection_Default_, f, this),
        SimWall_OtherSideCoefficients_Default_ (x.SimWall_OtherSideCoefficients_Default_, f, this),
        SimWall_OtherSideCoefficients_Detailed_ (x.SimWall_OtherSideCoefficients_Detailed_, f, this),
        SimWall_OtherSideCoefficients_DetailedFloor_ (x.SimWall_OtherSideCoefficients_DetailedFloor_, f, this),
        SimWall_OtherSideCoefficients_DetailedRoofCeiling_ (x.SimWall_OtherSideCoefficients_DetailedRoofCeiling_, f, this),
        SimWall_OtherSideConditionsModel_Default_ (x.SimWall_OtherSideConditionsModel_Default_, f, this),
        SimWall_OtherSideConditionsModel_Detailed_ (x.SimWall_OtherSideConditionsModel_Detailed_, f, this),
        SimWall_OtherSideConditionsModel_DetailedFloor_ (x.SimWall_OtherSideConditionsModel_DetailedFloor_, f, this),
        SimWall_OtherSideConditionsModel_DetailedRoofCeiling_ (x.SimWall_OtherSideConditionsModel_DetailedRoofCeiling_, f, this),
        SimWall_Wall_Adiabatic_ (x.SimWall_Wall_Adiabatic_, f, this),
        SimWall_Wall_Default_ (x.SimWall_Wall_Default_, f, this),
        SimWall_Wall_ExteriorAboveGrade_ (x.SimWall_Wall_ExteriorAboveGrade_, f, this),
        SimWall_Wall_ExteriorAboveGradeDetailed_ (x.SimWall_Wall_ExteriorAboveGradeDetailed_, f, this),
        SimWall_Wall_ExteriorAboveGradeStandard_ (x.SimWall_Wall_ExteriorAboveGradeStandard_, f, this),
        SimWall_Wall_ExteriorBelowGrade_ (x.SimWall_Wall_ExteriorBelowGrade_, f, this),
        SimWall_Wall_ExteriorBelowGradeDetailed_ (x.SimWall_Wall_ExteriorBelowGradeDetailed_, f, this),
        SimWall_Wall_ExteriorBelowGradeStandard_ (x.SimWall_Wall_ExteriorBelowGradeStandard_, f, this),
        SimWall_Wall_Interior_ (x.SimWall_Wall_Interior_, f, this),
        SimWall_Wall_InteriorDetailed_ (x.SimWall_Wall_InteriorDetailed_, f, this),
        SimWall_Wall_InteriorStandard_ (x.SimWall_Wall_InteriorStandard_, f, this),
        SimWall_Wall_OpeningFiller_ (x.SimWall_Wall_OpeningFiller_, f, this),
        SimWallParams_Wall_Default_ (x.SimWallParams_Wall_Default_, f, this),
        SimWallType_Wall_Default_ (x.SimWallType_Wall_Default_, f, this),
        SimWindow_ComplexFenestration_ThermoChromic_ (x.SimWindow_ComplexFenestration_ThermoChromic_, f, this),
        SimWindow_Skylight_Exterior_ (x.SimWindow_Skylight_Exterior_, f, this),
        SimWindow_Skylight_ExteriorDetailed_ (x.SimWindow_Skylight_ExteriorDetailed_, f, this),
        SimWindow_Window_Default_ (x.SimWindow_Window_Default_, f, this),
        SimWindow_Window_Exterior_ (x.SimWindow_Window_Exterior_, f, this),
        SimWindow_Window_ExteriorDetailed_ (x.SimWindow_Window_ExteriorDetailed_, f, this),
        SimWindow_Window_Interior_ (x.SimWindow_Window_Interior_, f, this),
        SimWindowArrayParams_WindowArray_Default_ (x.SimWindowArrayParams_WindowArray_Default_, f, this),
        SimWindowLiningProps_WindowLiningProps_Default_ (x.SimWindowLiningProps_WindowLiningProps_Default_, f, this),
        SimWindowPanelProps_WindowPanelProps_Default_ (x.SimWindowPanelProps_WindowPanelProps_Default_, f, this),
        SimWindowParams_Window_Default_ (x.SimWindowParams_Window_Default_, f, this),
        SimWindowType_Window_Default_ (x.SimWindowType_Window_Default_, f, this),
        SimModelVersion_ (x.SimModelVersion_, f, this),
        SimModelSchemaVersion_ (x.SimModelSchemaVersion_, f, this),
        SimModelUnitsVersion_ (x.SimModelUnitsVersion_, f, this),
        SimModelUnitDefaultsVersion_ (x.SimModelUnitDefaultsVersion_, f, this),
        SimModelSchemaIDKey_ (x.SimModelSchemaIDKey_, f, this)
      {
      }

      SimModel::
      SimModel (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        SimActor_Actor_Default_ (this),
        SimActor_Actor_SpaceOccupant_ (this),
        SimActuator_DamperActuator_Default_ (this),
        SimActuator_Default_Default_ (this),
        SimActuator_ElectricalRotor_Default_ (this),
        SimActuator_ValveActuator_Default_ (this),
        SimActuator_VirtualActuator_EmsActuator_ (this),
        SimAddress_Postal_Default_ (this),
        SimAddress_Telecom_Default_ (this),
        SimAdjacentSiteParams_AdjacentSite_Default_ (this),
        SimAnalyticalRepresentation_AnalyticalRepresentation_Default_ (this),
        SimAppLanguageDefault_AppLanguageDefault_Default_ (this),
        SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_ (this),
        SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_ (this),
        SimAppLibraryDefault_AppLibraryDefault_UserLibrary_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_ (this),
        SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_ (this),
        SimAppObjNameDefault_BldgComponentGroup_HvacComponent_ (this),
        SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_ (this),
        SimAppObjNameDefault_DistributionSystem_Default_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacAirLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_ (this),
        SimAppObjNameDefault_DistributionSystem_ServiceHotWater_ (this),
        SimAppObjNameDefault_DistributionSystem_SitePowerDemand_ (this),
        SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_ (this),
        SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_ (this),
        SimAppObjNameDefault_OtherSystem_Default_ (this),
        SimAppObjNameDefault_SiteContext_AdjacentSite_ (this),
        SimAppObjNameDefault_SiteContext_SolarObstruction_ (this),
        SimAppObjNameDefault_Space_CeilingPlenum_ (this),
        SimAppObjNameDefault_Space_FloorPlenum_ (this),
        SimAppObjNameDefault_Space_Space_ (this),
        SimAppObjNameDefault_SpatialContainer_Building_ (this),
        SimAppObjNameDefault_SpatialContainer_BuildingStory_ (this),
        SimAppObjNameDefault_SpatialContainer_Project_ (this),
        SimAppObjNameDefault_SpatialContainer_Site_ (this),
        SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_ (this),
        SimAppObjNameDefault_SpatialZone_FloorPlenumZone_ (this),
        SimAppObjNameDefault_SpatialZone_PlenumZone_ (this),
        SimAppObjNameDefault_SpatialZone_ThermalZone_ (this),
        SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_ (this),
        SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_ (this),
        SimAppPreferences_AppPreferences_AutoSave_ (this),
        SimAppPreferences_AppPreferences_AutoSaveInterval_ (this),
        SimAppPreferences_AppPreferences_EPlusInstalPath_ (this),
        SimAppPreferences_AppPreferences_EPlusInstalVersion_ (this),
        SimAppPreferences_AppPreferences_MinMonthlyChargeType_ (this),
        SimAppPreferences_AppPreferences_MonthlyChargeType_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_ (this),
        SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_ (this),
        SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_ (this),
        SimAppUnitDefault_AppUnitDefault_DatabaseDefault_ (this),
        SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_ (this),
        SimArbitraryProfileDef_ArbitraryProfile_Closed_ (this),
        SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_ (this),
        SimArbitraryProfileDef_ArbitraryProfile_Open_ (this),
        SimArrayParams_ArrayParams_Default_ (this),
        SimArrayParams_BldgElementArray_Beam_ (this),
        SimArrayParams_BldgElementArray_Column_ (this),
        SimArrayParams_BldgElementArray_Default_ (this),
        SimArrayParams_DoorArray_Default_ (this),
        SimArrayParams_PanelArrayParams_Default_ (this),
        SimArrayParams_SolarShadeArray_Default_ (this),
        SimArrayParams_WindowArray_Default_ (this),
        SimBeam_Default_Default_ (this),
        SimBeamParams_Beam_Default_ (this),
        SimBeamType_Beam_Default_ (this),
        SimBldgElementArrayParams_BldgElementArray_Beam_ (this),
        SimBldgElementArrayParams_BldgElementArray_Column_ (this),
        SimBldgElementArrayParams_BldgElementArray_Default_ (this),
        SimBldgElementType_BldgElementProxy_Default_ (this),
        SimBldgElementType_Default_Default_ (this),
        SimBldgElementType_ElectricalTerminal_Default_ (this),
        SimBldgElementType_HumanTransport_Default_ (this),
        SimBldgElementType_PlumbingFixture_Default_ (this),
        SimBldgElementType_Railing_Default_ (this),
        SimBldgElementType_Ramp_Default_ (this),
        SimBldgElementType_RampFlight_Default_ (this),
        SimBldgElementType_Stair_Default_ (this),
        SimBldgElementType_StairFlight_Default_ (this),
        SimBldgElementType_VirtualElement_Default_ (this),
        SimBldgParams_Building_Default_ (this),
        SimBldgSiteParams_BuildingSite_Default_ (this),
        SimBldgStoryParams_BuildingStory_Default_ (this),
        SimBldgStoryType_BuildingStory_Default_ (this),
        SimBuilding_AdjacentBuilding_Default_ (this),
        SimBuilding_Building_Default_ (this),
        SimBuildingElementProxy_Default_Default_ (this),
        SimBuildingElementProxy_SiteContextElement_BuildingShading_ (this),
        SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_ (this),
        SimBuildingElementProxy_SiteContextElement_Default_ (this),
        SimBuildingElementProxy_SiteContextElement_GroundPlane_ (this),
        SimBuildingElementProxy_SiteContextElement_SiteShading_ (this),
        SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_ (this),
        SimBuildingElementProxy_ThermalMass_Default_ (this),
        SimBuildingStory_BuildingStory_Default_ (this),
        SimBuildingType_Building_Default_ (this),
        SimCalendarDate_Default_Default_ (this),
        SimCartesianTransformOperator_2D_NonUniform_ (this),
        SimCartesianTransformOperator_2D_Uniform_ (this),
        SimCartesianTransformOperator_3D_NonUniform_ (this),
        SimCartesianTransformOperator_3D_Uniform_ (this),
        SimClassification_ClassificationReference_BuildingElementClassification_ (this),
        SimClassification_ClassificationReference_ConstructionEntityByFunction_ (this),
        SimClassification_ClassificationReference_Default_ (this),
        SimClassification_ClassificationReference_OrganizationalBillingID_ (this),
        SimClassification_ClassificationReference_OrganizationalID_ (this),
        SimClassification_ClassificationReference_SpaceByFunction_ (this),
        SimClassification_ClassificationReference_SpaceCategoryBoma_ (this),
        SimClassification_ClassificationReference_SpaceCategoryOwner_ (this),
        SimClassification_ClassificationReference_SpaceTypeOwner_ (this),
        SimClassification_ClassificationReference_SpatialZoneEnergyType_ (this),
        SimClassification_ClassificationReference_SpatialZoneSecurityLevel_ (this),
        SimClassification_ClassificationReference_SpatialZoneType_ (this),
        SimClassification_ClassificationReference_SubOrganizationalID_ (this),
        SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_ (this),
        SimClassification_ClassificationSystem_Default_ (this),
        SimClassification_ClassificationSystem_MasterFormat_ (this),
        SimClassification_ClassificationSystem_OmniClass_ (this),
        SimClassification_ClassificationSystem_OwnerOrganizationalClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_ (this),
        SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_ (this),
        SimClassification_ClassificationSystem_OwnerZoneTypeClassification_ (this),
        SimClassification_ClassificationSystem_Uniformat_ (this),
        SimColumn_Embedded_Default_ (this),
        SimColumn_Freestanding_Default_ (this),
        SimColumnParams_Column_Default_ (this),
        SimColumnType_Column_Default_ (this),
        SimComplexProperty_ComplexProp_Default_ (this),
        SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_ (this),
        SimCompositeProfileDef_CompositeProfile_Default_ (this),
        SimConnectCurveGeom_Curve_Default_ (this),
        SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_ (this),
        SimConnectedFaceSet_ConnectedFaceSet_Default_ (this),
        SimConnectedFaceSet_ConnectedFaceSet_OpenShell_ (this),
        SimConnection_AirFlow_CrossSystem_ (this),
        SimConnection_AirFlow_Default_ (this),
        SimConnection_AirFlow_Linkage_ (this),
        SimConnection_AirFlowNetwork_Default_ (this),
        SimConnection_ChilledWaterFlow_CrossSystem_ (this),
        SimConnection_ChilledWaterFlow_Default_ (this),
        SimConnection_CondenserFlow_CrossSystem_ (this),
        SimConnection_CondenserFlow_Default_ (this),
        SimConnection_Default_Default_ (this),
        SimConnection_DigitalControl_Default_ (this),
        SimConnection_Docking_Default_ (this),
        SimConnection_ElectricalPowerFlow_Default_ (this),
        SimConnection_HotWaterFlow_CrossSystem_ (this),
        SimConnection_HotWaterFlow_Default_ (this),
        SimConnection_MixedWaterFlow_CrossSystem_ (this),
        SimConnection_MixedWaterFlow_Default_ (this),
        SimConnection_RefrigerantFlow_Default_ (this),
        SimConnection_ServiceHotWaterFlow_CrossSystem_ (this),
        SimConnection_ServiceHotWaterFlow_Default_ (this),
        SimConnection_SteamFlow_CrossSystem_ (this),
        SimConnection_SteamFlow_Default_ (this),
        SimConnection_VarRefrigerantFlow_Default_ (this),
        SimConnection_ZoneAirFlow_Default_ (this),
        SimConnection_ZoneAirFlow_ZoneCrossMixing_ (this),
        SimConnection_ZoneAirFlow_ZoneMixing_ (this),
        SimConnectPointGeom_Point_Default_ (this),
        SimConnectPortGeom_Port_Default_ (this),
        SimConnectSurfaceGeom_Surface_Default_ (this),
        SimController_AvailabilityManager_AirLoop_ (this),
        SimController_AvailabilityManager_PlantLoop_ (this),
        SimController_Daylighting_DELight_ (this),
        SimController_Daylighting_Skylights_ (this),
        SimController_Daylighting_Standard_ (this),
        SimController_Daylighting_Windows_ (this),
        SimController_Default_Default_ (this),
        SimController_DemandManager_AirLoop_ (this),
        SimController_LightingControl_Continuous_ (this),
        SimController_LightingControl_ContinuousOff_ (this),
        SimController_LightingControl_MotionSensor_ (this),
        SimController_LightingControl_On_Off_ (this),
        SimController_LightingControl_Stepped_ (this),
        SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_ (this),
        SimController_OperationManager_CondenserLoop_ (this),
        SimController_OperationManager_PlantLoop_ (this),
        SimController_OutdoorAir_EconomizerControl_ (this),
        SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_ (this),
        SimController_OutdoorAir_OutdoorAirPreconditioningController_ (this),
        SimController_Programmable_Default_ (this),
        SimController_ShadingControl_Heating_CoolingLoads_ (this),
        SimController_ShadingControl_On_Off_ (this),
        SimController_ShadingControl_WindowTemp_Solar_ (this),
        SimController_SupplyAir_Humidity_ (this),
        SimController_SupplyAir_Temperature_ (this),
        SimController_SupplyWater_Temperature_ (this),
        SimController_ThermalStorage_ThermalEnergyStorageTank_ (this),
        SimController_Ventilation_ContaminantControl_ (this),
        SimController_WaterCoil_Default_ (this),
        SimController_ZoneControlHumidity_Humidistat_ (this),
        SimController_ZoneControlHumidity_Humidistat1Zone_ (this),
        SimController_ZoneControlTemperature_Thermostat_ (this),
        SimController_ZoneControlTemperature_Thermostat1Zone_ (this),
        SimController_ZoneControlTemperature_ThermostatStagedDual_ (this),
        SimController_ZoneControlTemperature_ThermostatThermalComfort_ (this),
        SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_ (this),
        SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_ (this),
        SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_ (this),
        SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_ (this),
        SimControlScheme_AvailabilityManagerScheme_HybridVentilation_ (this),
        SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_ (this),
        SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_ (this),
        SimControlScheme_AvailabilityManagerScheme_NightCycle_ (this),
        SimControlScheme_AvailabilityManagerScheme_NightVentilation_ (this),
        SimControlScheme_AvailabilityManagerScheme_OptimumStart_ (this),
        SimControlScheme_AvailabilityManagerScheme_Scheduled_ (this),
        SimControlScheme_AvailabilityManagerScheme_ScheduledOff_ (this),
        SimControlScheme_AvailabilityManagerScheme_ScheduledOn_ (this),
        SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_ (this),
        SimControlScheme_ControlAndSequencingScheme_CoolingLoad_ (this),
        SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_ (this),
        SimControlScheme_ControlAndSequencingScheme_HeatingLoad_ (this),
        SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_ (this),
        SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_ (this),
        SimControlScheme_ControlAndSequencingScheme_Uncontrolled_ (this),
        SimControlScheme_ControlAndSequencingScheme_UserDefined_ (this),
        SimControlScheme_DemandManagerScheme_ElectricEquipment_ (this),
        SimControlScheme_DemandManagerScheme_ExteriorLights_ (this),
        SimControlScheme_DemandManagerScheme_Lights_ (this),
        SimControlScheme_DemandManagerScheme_Thermostats_ (this),
        SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_ (this),
        SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_ (this),
        SimControlScheme_EnergyManagementScheme_GlobalVairable_ (this),
        SimControlScheme_EnergyManagementScheme_InternalVariable_ (this),
        SimControlScheme_EnergyManagementScheme_OutputVariable_ (this),
        SimControlScheme_EnergyManagementScheme_Program_ (this),
        SimControlScheme_EnergyManagementScheme_ProgramCallingManager_ (this),
        SimControlScheme_EnergyManagementScheme_Subroutine_ (this),
        SimControlScheme_EnergyManagementScheme_TrendVariable_ (this),
        SimControlScheme_ExternalInterfaceExport_FromVariable_ (this),
        SimControlScheme_ExternalInterfaceExport_ToActuator_ (this),
        SimControlScheme_ExternalInterfaceExport_ToSchedule_ (this),
        SimControlScheme_ExternalInterfaceExport_ToVariable_ (this),
        SimControlScheme_ExternalInterfaceImport_Default_ (this),
        SimControlScheme_ExternalInterfaceImport_FromVariable_ (this),
        SimControlScheme_ExternalInterfaceImport_ToActuator_ (this),
        SimControlScheme_ExternalInterfaceImport_ToSchedule_ (this),
        SimControlScheme_ExternalInterfaceImport_ToVariable_ (this),
        SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_ (this),
        SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_ (this),
        SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_ (this),
        SimControlScheme_OperatingScheme_UncontrolledOperationScheme_ (this),
        SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_ (this),
        SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_ (this),
        SimControlScheme_SetpointManagerScheme_ColdestZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_DuctStaticPressure_ (this),
        SimControlScheme_SetpointManagerScheme_EnteringReset_ (this),
        SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_ (this),
        SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_ (this),
        SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_ (this),
        SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_ (this),
        SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_MixedAir_ (this),
        SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_ (this),
        SimControlScheme_SetpointManagerScheme_OutdoorAirReset_ (this),
        SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_ (this),
        SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_ (this),
        SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_ (this),
        SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_ (this),
        SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Heating_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_ (this),
        SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_ (this),
        SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_ (this),
        SimControlScheme_SetpointManagerScheme_WarmestZoneReset_ (this),
        SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_ (this),
        SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_ (this),
        SimControlScheme_SetpointScheme_DualSetpoint_ (this),
        SimControlScheme_SetpointScheme_SingleCooling_ (this),
        SimControlScheme_SetpointScheme_SingleHeating_ (this),
        SimControlScheme_SetpointScheme_SingleHeatingOrCooling_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_ (this),
        SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_ (this),
        SimCost_ComponentCost_Adjustments_ (this),
        SimCost_ComponentCost_LineItem_ (this),
        SimCost_ComponentCost_Reference_ (this),
        SimCost_Default_Default_ (this),
        SimCost_LifeCycleCost_NonrecurringCost_ (this),
        SimCost_LifeCycleCost_Parameters_ (this),
        SimCost_LifeCycleCost_RecurringCosts_ (this),
        SimCost_LifeCycleCost_UseAdjustment_ (this),
        SimCost_LifeCycleCost_UsePriceEscalation_ (this),
        SimCost_UtilityCost_ChargeBlock_ (this),
        SimCost_UtilityCost_ChargeSimple_ (this),
        SimCost_UtilityCost_CostRatchet_ (this),
        SimCost_UtilityCost_CostVariable_ (this),
        SimCost_UtilityCost_Qualify_ (this),
        SimCost_UtilityCost_Tariff_ (this),
        SimCurtainWall_CurtainWall_Default_ (this),
        SimCurtainWallParams_CurtainWall_Default_ (this),
        SimCurtainWallType_CurtainWall_Default_ (this),
        SimCurveStyle_CurveStyle_Default_ (this),
        SimCurveStyle_CurveStyle_Font_ (this),
        SimCurveStyle_CurveStyle_FontAndScaling_ (this),
        SimCurveStyle_CurveStyle_FontPattern_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightShelf_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightTube_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightWell_ (this),
        SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_ (this),
        SimDerivedUnitType_DerivedUnit_Default_ (this),
        SimDistributionPort_AirFlowPort_Air_In_ (this),
        SimDistributionPort_AirFlowPort_Air_InOrOut_ (this),
        SimDistributionPort_AirFlowPort_Air_Out_ (this),
        SimDistributionPort_AirFlowPort_Default_ (this),
        SimDistributionPort_AirFlowPort_ExhaustAir_Out_ (this),
        SimDistributionPort_AirFlowPort_OutdoorAir_In_ (this),
        SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Default_ (this),
        SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Water_In_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_ChilledWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_In_ (this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_ (this),
        SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_ (this),
        SimDistributionPort_CondenserFlowPort_Default_ (this),
        SimDistributionPort_DigitalControl_AirLoop_Default_ (this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_CWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_HWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_Default_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_Default_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_STMLoop_Default_ (this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_Default_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControlPort_Default_ (this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_In_ (this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_ (this),
        SimDistributionPort_DigitalControlPort_DigitalSignal_Out_ (this),
        SimDistributionPort_DigitalControlPort_DigitalVirtual_ (this),
        SimDistributionPort_DistributionPort_Default_ (this),
        SimDistributionPort_ElectricalFlowPort_Default_ (this),
        SimDistributionPort_ElectricalFlowPort_Electrical_In_ (this),
        SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_ (this),
        SimDistributionPort_ElectricalFlowPort_Electrical_Out_ (this),
        SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_ (this),
        SimDistributionPort_HotWaterFlowPort_Default_ (this),
        SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_ (this),
        SimDistributionPort_HotWaterFlowPort_Water_In_ (this),
        SimDistributionPort_HotWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_HotWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_ (this),
        SimDistributionPort_MixedWaterFlowPort_Default_ (this),
        SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_ (this),
        SimDistributionPort_MixedWaterFlowPort_Water_In_ (this),
        SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_MixedWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_RefrigerationFlowPort_Default_ (this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_ (this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_ (this),
        SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Default_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_In_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_ (this),
        SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_ (this),
        SimDistributionPort_SteamFlowPort_Default_ (this),
        SimDistributionPort_SteamFlowPort_Steam_In_ (this),
        SimDistributionPort_SteamFlowPort_Steam_InOrOut_ (this),
        SimDistributionPort_SteamFlowPort_Steam_Out_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_Default_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_In_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_ (this),
        SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_ (this),
        SimDistributionPort_ZoneAirFlowPort_Air_In_ (this),
        SimDistributionPort_ZoneAirFlowPort_Air_Out_ (this),
        SimDoor_Default_Default_ (this),
        SimDoor_GlazedDoor_Exterior_ (this),
        SimDoor_GlazedDoor_ExteriorDetailed_ (this),
        SimDoor_GlazedDoor_Interior_ (this),
        SimDoor_OpaqueDoor_Exterior_ (this),
        SimDoor_OpaqueDoor_ExteriorDetailed_ (this),
        SimDoor_OpaqueDoor_Interior_ (this),
        SimDoorArrayParams_DoorArray_Default_ (this),
        SimDoorLiningProps_DoorLiningProps_Default_ (this),
        SimDoorPanelProps_DoorPanelProps_Default_ (this),
        SimDoorParams_Door_Default_ (this),
        SimDoorType_Door_Default_ (this),
        SimDwgXrefParams_DwgXref_Default_ (this),
        SimEdge_Edge_EdgeCurve_ (this),
        SimEdge_Edge_OrientedEdge_ (this),
        SimEdge_Edge_Subedge_ (this),
        SimElementQuantity_ElementQuantity_Default_ (this),
        SimExtendedMaterialProps_ExtendedMatlProps_Default_ (this),
        SimExternalReference_Default_Default_ (this),
        SimExternalReference_DocumentReference_Default_ (this),
        SimExternalReference_ExternalReference_Default_ (this),
        SimExternalReference_LibraryReference_Default_ (this),
        SimExternalReference_PropertyReference_Default_ (this),
        SimFace_Face_Default_ (this),
        SimFace_Face_FaceSurface_ (this),
        SimFaceBound_FaceBound_Default_ (this),
        SimFaceBound_FaceBound_FaceOuterBound_ (this),
        SimFeatureAirFlowNetwork_Default_Default_ (this),
        SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_ (this),
        SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_ (this),
        SimFeatureAirFlowNetwork_Opening_Default_ (this),
        SimFeatureAirFlowNetwork_Opening_Detailed_ (this),
        SimFeatureAirFlowNetwork_Opening_Horizontal_ (this),
        SimFeatureAirFlowNetwork_Opening_Simple_ (this),
        SimFeatureAirFlowNetwork_Surface_Default_ (this),
        SimFeatureAirFlowNetwork_SurfaceCrack_Default_ (this),
        SimFeatureAirFlowNetwork_Zone_Default_ (this),
        SimFeatureElementAddition_ProjectionElement_Default_ (this),
        SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_ (this),
        SimFeatureElementSubtraction_EdgeFeature_Default_ (this),
        SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_ (this),
        SimFeatureElementSubtraction_SlotFeature_Default_ (this),
        SimFeatureElementSubtraction_Void_Opening_ (this),
        SimFlowCompoundEqmt_DistrictSupply_Cooling_ (this),
        SimFlowCompoundEqmt_DistrictSupply_Heating_ (this),
        SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_ (this),
        SimFlowCompoundEqmt_PurchasedSupply_Cooling_ (this),
        SimFlowCompoundEqmt_PurchasedSupply_Heating_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_ (this),
        SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_ (this),
        SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_ (this),
        SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_ (this),
        SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_ (this),
        SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_ (this),
        SimFlowController_Damper_Default_ (this),
        SimFlowController_Damper_Exhaust_ (this),
        SimFlowController_Damper_FaceBypass_ (this),
        SimFlowController_Damper_MixedAir_ (this),
        SimFlowController_Damper_OutsideAir_ (this),
        SimFlowController_Damper_Recirculation_ (this),
        SimFlowController_Damper_Relief_ (this),
        SimFlowController_Default_Default_ (this),
        SimFlowController_ElectricalSwitch_On_Off_ (this),
        SimFlowController_ElectricalSwitch_Variable_ (this),
        SimFlowController_Valve_Default_ (this),
        SimFlowController_Valve_EMSValve_ (this),
        SimFlowController_Valve_NonReturnValve_ (this),
        SimFlowController_Valve_TemperingValve_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Electric_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_ (this),
        SimFlowEnergyTransfer_ConvectiveHeater_Water_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_ (this),
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ (this),
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_ (this),
        SimFlowEnergyTransfer_Dehumidifier_Default_ (this),
        SimFlowEnergyTransfer_Dehumidifier_NoFans_ (this),
        SimFlowEnergyTransfer_Economizer_AirToAir_ (this),
        SimFlowEnergyTransfer_Electrical_Transformer_ (this),
        SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_ (this),
        SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_ (this),
        SimFlowEnergyTransfer_ElectricalInverter_Simple_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_ (this),
        SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_ (this),
        SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_ (this),
        SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_ (this),
        SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_ (this),
        SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_ (this),
        SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_ (this),
        SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_ (this),
        SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_ (this),
        SimFlowEnergyTransfer_HeatExEarthToWater_Surface_ (this),
        SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_ (this),
        SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_ (this),
        SimFlowEnergyTransfer_HeatExWaterToWater_Pond_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_ (this),
        SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_ (this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_ (this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_ (this),
        SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_ (this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_ (this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_ (this),
        SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_ (this),
        SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_ (this),
        SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_ (this),
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_ (this),
        SimFlowEnergyTransfer_Humidifier_ElectricSteam_ (this),
        SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_ (this),
        SimFlowEnergyTransfer_RadiantDevice_Beam_ (this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_ (this),
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_ (this),
        SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_ (this),
        SimFlowEnergyTransfer_RadiantDevice_HighTemp_ (this),
        SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_ (this),
        SimFlowEnergyTransfer_RadiantDevice_Slab_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_Mixed_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_Stratified_ (this),
        SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_ (this),
        SimFlowFitting_Default_Default_ (this),
        SimFlowFitting_Difusser_Default_ (this),
        SimFlowFitting_Electrical_Transformer_ (this),
        SimFlowFitting_FlowElementProxy_Default_ (this),
        SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_ (this),
        SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_ (this),
        SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_ (this),
        SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_ (this),
        SimFlowFitting_Mixer_AirMixer_ (this),
        SimFlowFitting_Mixer_AirMixerOutdoor_ (this),
        SimFlowFitting_Mixer_AirMixerZoneReturn_ (this),
        SimFlowFitting_Mixer_CondenserMixer_ (this),
        SimFlowFitting_Mixer_DemandProxyMixer_ (this),
        SimFlowFitting_Mixer_DemandProxyMixerAir_ (this),
        SimFlowFitting_Mixer_DemandProxyMixerWater_ (this),
        SimFlowFitting_Mixer_SteamMixer_ (this),
        SimFlowFitting_Mixer_WaterMixer_ (this),
        SimFlowFitting_Splitter_AirSplitter_ (this),
        SimFlowFitting_Splitter_AirSplitterZoneSupply_ (this),
        SimFlowFitting_Splitter_CondenserSplitter_ (this),
        SimFlowFitting_Splitter_DemandProxySplitter_ (this),
        SimFlowFitting_Splitter_DemandProxySplitterAir_ (this),
        SimFlowFitting_Splitter_DemandProxySplitterWater_ (this),
        SimFlowFitting_Splitter_SteamSplitter_ (this),
        SimFlowFitting_Splitter_WaterSplitter_ (this),
        SimFlowMover_Default_Default_ (this),
        SimFlowMover_Fan_NightVentilation_ (this),
        SimFlowMover_Fan_Relief_ (this),
        SimFlowMover_Fan_ZoneExhaust_ (this),
        SimFlowMover_Pump_ConstantSpeedReturn_ (this),
        SimFlowMover_Pump_ConstantSpeedSupply_ (this),
        SimFlowMover_Pump_UserDefined_ (this),
        SimFlowMover_Pump_VariableSpeedReturn_ (this),
        SimFlowMover_Pump_VariableSpeedSupply_ (this),
        SimFlowMover_Pump_VarSpeedCondensateReturn_ (this),
        SimFlowMover_Pump_VarSpeedCondensateSupply_ (this),
        SimFlowMover_PumpSet_ConstantSpeed2_ (this),
        SimFlowMover_PumpSet_ConstantSpeed3_ (this),
        SimFlowMover_PumpSet_VariableSpeed2_ (this),
        SimFlowMover_PumpSet_VariableSpeed3_ (this),
        SimFlowMover_ReturnFan_ComponentModel_ (this),
        SimFlowMover_ReturnFan_ConstantVolume_ (this),
        SimFlowMover_ReturnFan_OnOff_ (this),
        SimFlowMover_ReturnFan_VariableVolume_ (this),
        SimFlowMover_SupplyFan_ComponentModel_ (this),
        SimFlowMover_SupplyFan_ConstantVolume_ (this),
        SimFlowMover_SupplyFan_OnOff_ (this),
        SimFlowMover_SupplyFan_VariableVolume_ (this),
        SimFlowPlant_Boiler_BoilerHotWater_ (this),
        SimFlowPlant_Boiler_BoilerSteam_ (this),
        SimFlowPlant_Boiler_UserDefined_ (this),
        SimFlowPlant_Chiller_Absorption_ (this),
        SimFlowPlant_Chiller_AbsorptionIndirect_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_ (this),
        SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_ (this),
        SimFlowPlant_Chiller_UserDefined_ (this),
        SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_ (this),
        SimFlowPlant_ChillerHeater_AbsorptionDirectFired_ (this),
        SimFlowPlant_ChillerHeater_PerformanceElectricEIR_ (this),
        SimFlowPlant_CoolingTower_SingleSpeed_ (this),
        SimFlowPlant_CoolingTower_TwoSpeed_ (this),
        SimFlowPlant_CoolingTower_UserDefined_ (this),
        SimFlowPlant_CoolingTower_VariableSpeed_ (this),
        SimFlowPlant_CoolingTower_VariableSpeed_Merkel_ (this),
        SimFlowPlant_ElectricalGenerator_CombustionTurbine_ (this),
        SimFlowPlant_ElectricalGenerator_DefaultGenerator_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCell_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellInverter_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_ (this),
        SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_ (this),
        SimFlowPlant_ElectricalGenerator_FuelEquipment_ (this),
        SimFlowPlant_ElectricalGenerator_FuelSupply_ (this),
        SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_ (this),
        SimFlowPlant_ElectricalGenerator_MicroCHP_ (this),
        SimFlowPlant_ElectricalGenerator_MicroTurbine_ (this),
        SimFlowPlant_ElectricalGenerator_Photovoltaic_ (this),
        SimFlowPlant_ElectricalGenerator_WindTurbine_ (this),
        SimFlowPlant_HeatAndPower_Default_ (this),
        SimFlowPlant_HeatExWaterToWater_Pond_ (this),
        SimFlowPlant_HeatPump_AirToAir_ (this),
        SimFlowPlant_HeatPump_AirToAir_MultiSpeed_ (this),
        SimFlowPlant_HeatPump_CentralSystem_ (this),
        SimFlowPlant_HeatPump_GroundSource_ (this),
        SimFlowPlant_HeatPump_WaterToAir_ (this),
        SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_ (this),
        SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_ (this),
        SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_ (this),
        SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_ (this),
        SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_ (this),
        SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_ (this),
        SimFlowPlant_SolarDevice_SolarPhotoVoltaic_ (this),
        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_ (this),
        SimFlowPlant_SolarDevice_SolarThermalAir_ (this),
        SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_ (this),
        SimFlowPlant_SolarDevice_SolarThermalWater_ (this),
        SimFlowSegment_Default_Default_ (this),
        SimFlowSegment_Duct_AirFlowNetworkDistribution_ (this),
        SimFlowSegment_Duct_Default_ (this),
        SimFlowSegment_Filter_Bag_ (this),
        SimFlowSegment_Filter_Default_ (this),
        SimFlowSegment_Filter_Electrostatic_ (this),
        SimFlowSegment_Filter_HEPA_ (this),
        SimFlowSegment_Filter_Panel_ (this),
        SimFlowSegment_Grill_Return_ (this),
        SimFlowSegment_Grill_Supply_ (this),
        SimFlowSegment_Louver_Default_ (this),
        SimFlowSegment_Louver_Exhaust_ (this),
        SimFlowSegment_Louver_Intake_ (this),
        SimFlowSegment_Louver_Safety_ (this),
        SimFlowSegment_Louver_Ventilation_ (this),
        SimFlowSegment_Pipe_Adiabatic_ (this),
        SimFlowSegment_Pipe_Adiabatic_Steam_ (this),
        SimFlowSegment_Pipe_Indoor_ (this),
        SimFlowSegment_Pipe_Outdoor_ (this),
        SimFlowSegment_Pipe_Underground_ (this),
        SimFlowSegment_Pipe_UndergroundPipeCircuit_ (this),
        SimFlowSegment_Pipe_UndergroundPipeSegment_ (this),
        SimFlowSegment_Plenum_DedicatedReturn_ (this),
        SimFlowSegment_Plenum_DedicatedSupply_ (this),
        SimFlowSegment_Plenum_SharedReturn_ (this),
        SimFlowSegment_Plenum_SharedSupply_ (this),
        SimFlowSegment_VirtualComponent_ConstantPressureDrop_ (this),
        SimFlowSegment_VirtualComponent_Leak_ (this),
        SimFlowSegment_VirtualComponent_LeakageRatio_ (this),
        SimFlowSegment_Wire_Default_ (this),
        SimFlowStorage_ElectricalStorage_BatteryBank_ (this),
        SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_ (this),
        SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_ (this),
        SimFlowStorage_WaterStorage_CleanWater_ (this),
        SimFlowStorage_WaterStorage_GrayWater_ (this),
        SimFlowStorage_WaterStorage_RainWater_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_ (this),
        SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_ (this),
        SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_ (this),
        SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_ (this),
        SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_ (this),
        SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_ (this),
        SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_ (this),
        SimFlowTerminal_AirTerminal_InletSideMixer_ (this),
        SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_ (this),
        SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_ (this),
        SimFlowTerminal_AirTerminal_SingleDuctUserDefined_ (this),
        SimFlowTerminal_AirTerminal_SupplySideMixer_ (this),
        SimFlowTerminal_AirTerminal_Uncontrolled_ (this),
        SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_NoReheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_Reheat_ (this),
        SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_ (this),
        SimFlowTerminal_Default_Default_ (this),
        SimFlowTerminal_ElectricalTerminalExterior_Default_ (this),
        SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_ (this),
        SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_ (this),
        SimFlowTerminal_ElectricalTerminalInterior_Default_ (this),
        SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_ (this),
        SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_ (this),
        SimFlowTerminal_PlumbingTerminal_DishWasher_ (this),
        SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_ (this),
        SimFlowTerminal_PlumbingTerminal_PlumbingFixture_ (this),
        SimFlowTerminal_PlumbingTerminal_Shower_ (this),
        SimFlowTerminal_PlumbingTerminal_Sink_ (this),
        SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_ (this),
        SimFlowTerminal_PlumbingTerminal_Toilet_ (this),
        SimFlowTerminal_PlumbingTerminal_Urinal_ (this),
        SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_ (this),
        SimFluid_Concentration_Default_ (this),
        SimFluid_Default_Default_ (this),
        SimFluid_GlycolConcentration_Default_ (this),
        SimFluid_Name_Default_ (this),
        SimFluid_Saturated_Default_ (this),
        SimFluid_SuperHeated_Default_ (this),
        SimFluid_Temperatures_Default_ (this),
        SimFrameAndDividerProps_FrameAndDivider_Default_ (this),
        SimFurnishingElement_Default_Default_ (this),
        SimFurnishingElementType_Furnishing_Default_ (this),
        SimFurnishingElementType_Furniture_Default_ (this),
        SimFurnitureType_Furniture_Default_ (this),
        SimGeomBooleanResult_BooleanClippingResult_Default_ (this),
        SimGeomBooleanResult_BooleanResult_Default_ (this),
        SimGeomBoundingBox_BoundingBox_Default_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_Block_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_ (this),
        SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_ (this),
        SimGeomCurve_2DCompositeCurve_Default_ (this),
        SimGeomCurve_BoundedCurve_Default_ (this),
        SimGeomCurve_Circle_Default_ (this),
        SimGeomCurve_CompositeCurve_Default_ (this),
        SimGeomCurve_CompositeCurveSegment_Default_ (this),
        SimGeomCurve_Ellipse_Default_ (this),
        SimGeomCurve_Line_Default_ (this),
        SimGeomCurve_OffsetCurve2D_Default_ (this),
        SimGeomCurve_OffsetCurve3D_Default_ (this),
        SimGeomCurve_Polyline_Default_ (this),
        SimGeomCurve_TrimmedCurve_Default_ (this),
        SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_ (this),
        SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_ (this),
        SimGeomPoint_Point_CartesianPoint_ (this),
        SimGeomPoint_Point_PointOnCurve_ (this),
        SimGeomPoint_Point_PointOnSurface_ (this),
        SimGeomSet_GeometricCurveSet_Default_ (this),
        SimGeomSet_GeometricSet_Default_ (this),
        SimGeomSolidModel_CSGSolid_Default_ (this),
        SimGeomSolidModel_FacetedBrep_Default_ (this),
        SimGeomSolidModel_FacetedBrepWithVoids_Default_ (this),
        SimGeomSolidModel_ManifoldSolidBrep_Default_ (this),
        SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_ (this),
        SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_ (this),
        SimGeomSolidModel_SweptDiskSolid_Default_ (this),
        SimGeomSurface_BoundedSurface_CurveBoundedPlane_ (this),
        SimGeomSurface_BoundedSurface_Default_ (this),
        SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_ (this),
        SimGeomSurface_Default_Default_ (this),
        SimGeomSurface_ElementarySurface_Default_ (this),
        SimGeomSurface_ElementarySurface_Plane_ (this),
        SimGeomSurface_SweptSurface_Default_ (this),
        SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_ (this),
        SimGeomSurface_SweptSurface_SurfaceOfRevolution_ (this),
        SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_ (this),
        SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_ (this),
        SimGeomVector_Vector_Default_ (this),
        SimGeomVector_Vector_Direction_ (this),
        SimGlazingPanelParams_GlazingPanel_Glazing_ (this),
        SimGridAxis_GridAxis_Default_ (this),
        SimGridPlacement_GridPlacement_Default_ (this),
        SimGroundHeatTransferBasement_BasementTransferModel_Default_ (this),
        SimGroundHeatTransferSlab_SlabTransferModel_Default_ (this),
        SimGroup_BldgCompGroup_AirTerminal_ (this),
        SimGroup_BldgCompGroup_Coil_ (this),
        SimGroup_BldgCompGroup_Default_ (this),
        SimGroup_BldgCompGroup_Sensor_ (this),
        SimGroup_BldgCompGroup_ZoneController_ (this),
        SimGroup_BldgCompGroup_ZoneEquipment_ (this),
        SimGroup_BldgElementGroup_Default_ (this),
        SimGroup_BuildingGroup_Default_ (this),
        SimGroup_ConnectorList_AirConnections_ (this),
        SimGroup_ConnectorList_ChilledWaterConnections_ (this),
        SimGroup_ConnectorList_CondenserConnections_ (this),
        SimGroup_ConnectorList_ControllerConnections_ (this),
        SimGroup_ConnectorList_HotWaterConnections_ (this),
        SimGroup_ConnectorList_ServiceHotWaterConnections_ (this),
        SimGroup_ConnectorList_SimConnections_ (this),
        SimGroup_ConnectorList_SteamConnections_ (this),
        SimGroup_ControllerList_Default_ (this),
        SimGroup_DefaultGroup_Default_ (this),
        SimGroup_DefaultList_Default_ (this),
        SimGroup_EquipmentList_CondenserEquipment_ (this),
        SimGroup_EquipmentList_ElectricalLoadCenter_ (this),
        SimGroup_EquipmentList_OutdoorAirSystem_ (this),
        SimGroup_EquipmentList_OutdoorAirUnit_ (this),
        SimGroup_EquipmentList_PlantEquipment_ (this),
        SimGroup_EquipmentList_RefrigerationCompressor_ (this),
        SimGroup_EquipmentList_RefrigerationEquipment_ (this),
        SimGroup_EquipmentList_RefrigerationLoadTransfer_ (this),
        SimGroup_EquipmentList_ServiceHotWater_ (this),
        SimGroup_EquipmentList_ZoneHvac_ (this),
        SimGroup_HvacDemandGroup_AirSystem_ (this),
        SimGroup_HvacDemandGroup_RefrigerationSystem_ (this),
        SimGroup_HvacDemandGroup_WaterSystem_ (this),
        SimGroup_MaterialList_Default_ (this),
        SimGroup_NodeList_Default_ (this),
        SimGroup_NodeList_OutdoorAir_ (this),
        SimGroup_OutputRequestList_Daylighting_ (this),
        SimGroup_OutputRequestList_Environmental_ (this),
        SimGroup_OutputRequestList_Fuel_ (this),
        SimGroup_OutputRequestList_Geometry_ (this),
        SimGroup_OutputRequestList_Meters_ (this),
        SimGroup_OutputRequestList_Reports_ (this),
        SimGroup_OutputRequestList_Variables_ (this),
        SimGroup_Refrigeration_ChillerSet_ (this),
        SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_ (this),
        SimGroup_SchemeList_AirTempControlScheme_ (this),
        SimGroup_SchemeList_CondenserOperatingScheme_ (this),
        SimGroup_SchemeList_DemandManagerScheme_ (this),
        SimGroup_SchemeList_MultiZoneHumidityScheme_ (this),
        SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_ (this),
        SimGroup_SchemeList_PlantOperatingScheme_ (this),
        SimGroup_SchemeList_SingleZoneHumidityScheme_ (this),
        SimGroup_SchemeList_WaterTempControlScheme_ (this),
        SimGroup_SpatialZoneGroup_Daylighting_ (this),
        SimGroup_SpatialZoneGroup_Lighting_ (this),
        SimGroup_SpatialZoneGroup_NaturalVentilation_ (this),
        SimGroup_SpatialZoneGroup_PlenumZoneGroup_ (this),
        SimGroup_SpatialZoneGroup_ServiceHotWater_ (this),
        SimGroup_SpatialZoneGroup_ZoneGroup_ (this),
        SimGroup_SpatialZoneGroup_ZoneHvacGroup_ (this),
        SimGroup_SurfaceGroup_Default_ (this),
        SimGroup_SurfaceGroup_LowTempRadiant_ (this),
        SimGroup_SurfaceGroup_VentilatedSlab_ (this),
        SimGroup_TemplateOutputRequestList_Daylighting_ (this),
        SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_ (this),
        SimGroup_TemplateOutputRequestList_Geometry_ (this),
        SimGroup_TemplateOutputRequestList_Meters_ (this),
        SimGroup_TemplateOutputRequestList_Reports_ (this),
        SimGroup_TemplateOutputRequestList_Variables_ (this),
        SimGroup_VrfList_VrfTerminals_ (this),
        SimHeatTransAlgProps_HeatTransferAlgProps_Default_ (this),
        SimInfiltrationOrVentilation_Default_Default_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_ (this),
        SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_Default_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_ (this),
        SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_ (this),
        SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_ (this),
        SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_ (this),
        SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_ (this),
        SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_ (this),
        SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_ (this),
        SimInternalLoad_ComfortViewFactorAngles_Default_ (this),
        SimInternalLoad_Default_Default_ (this),
        SimInternalLoad_Equipment_Electric_ (this),
        SimInternalLoad_Equipment_Electric_Elevators_ (this),
        SimInternalLoad_Equipment_Electric_Escalators_ (this),
        SimInternalLoad_Equipment_Electric_Process_ (this),
        SimInternalLoad_Equipment_Gas_ (this),
        SimInternalLoad_Equipment_Gas_Process_ (this),
        SimInternalLoad_Equipment_HotWater_ (this),
        SimInternalLoad_Equipment_Other_ (this),
        SimInternalLoad_Equipment_Steam_ (this),
        SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_ (this),
        SimInternalLoad_Lights_Default_ (this),
        SimInternalLoad_People_Default_ (this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_ (this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_ (this),
        SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_ (this),
        SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_ (this),
        SimIrregularTimeSeries_Irregular_Default_ (this),
        SimIrregularTimeSeriesValue_TimeSeries_Irregular_ (this),
        SimLightingFixtureType_LightingFixture_Default_ (this),
        SimList_ConnectorList_AirConnections_ (this),
        SimList_ConnectorList_ChilledWaterConnections_ (this),
        SimList_ConnectorList_CondenserConnections_ (this),
        SimList_ConnectorList_ControllerConnections_ (this),
        SimList_ConnectorList_HotWaterConnections_ (this),
        SimList_ConnectorList_ServiceHotWaterConnections_ (this),
        SimList_ConnectorList_SimConnections_ (this),
        SimList_ConnectorList_SteamConnections_ (this),
        SimList_ControllerList_Default_ (this),
        SimList_DefaultList_Default_ (this),
        SimList_EquipmentList_CondenserEquipment_ (this),
        SimList_EquipmentList_ElectricalLoadCenter_ (this),
        SimList_EquipmentList_OutdoorAirSystem_ (this),
        SimList_EquipmentList_OutdoorAirUnit_ (this),
        SimList_EquipmentList_PlantEquipment_ (this),
        SimList_EquipmentList_RefrigerationCompressor_ (this),
        SimList_EquipmentList_RefrigerationEquipment_ (this),
        SimList_EquipmentList_RefrigerationLoadTransfer_ (this),
        SimList_EquipmentList_ServiceHotWater_ (this),
        SimList_EquipmentList_ZoneHvac_ (this),
        SimList_MaterialList_Default_ (this),
        SimList_NodeList_Default_ (this),
        SimList_NodeList_OutdoorAir_ (this),
        SimList_OutputRequestList_Daylighting_ (this),
        SimList_OutputRequestList_Environmental_ (this),
        SimList_OutputRequestList_Fuel_ (this),
        SimList_OutputRequestList_Geometry_ (this),
        SimList_OutputRequestList_Meters_ (this),
        SimList_OutputRequestList_Reports_ (this),
        SimList_OutputRequestList_Variables_ (this),
        SimList_Refrigeration_ChillerSet_ (this),
        SimList_SchemeList_AirLoopAvailabilityMgrScheme_ (this),
        SimList_SchemeList_AirTempControlScheme_ (this),
        SimList_SchemeList_CondenserOperatingScheme_ (this),
        SimList_SchemeList_DemandManagerScheme_ (this),
        SimList_SchemeList_MultiZoneHumidityScheme_ (this),
        SimList_SchemeList_PlantLoopAvailabilityMgrScheme_ (this),
        SimList_SchemeList_PlantOperatingScheme_ (this),
        SimList_SchemeList_SingleZoneHumidityScheme_ (this),
        SimList_SchemeList_WaterTempControlScheme_ (this),
        SimList_TemplateOutputRequestList_Daylighting_ (this),
        SimList_TemplateOutputRequestList_FuelAndEnvironmental_ (this),
        SimList_TemplateOutputRequestList_Geometry_ (this),
        SimList_TemplateOutputRequestList_Meters_ (this),
        SimList_TemplateOutputRequestList_Reports_ (this),
        SimList_TemplateOutputRequestList_Variables_ (this),
        SimList_VrfList_VrfTerminals_ (this),
        SimLocalPlacement_LocalPlacement_AbsolutePlacement_ (this),
        SimLocalPlacement_LocalPlacement_RelativePlacement_ (this),
        SimLocationAndWeather_DesignDay_Default_ (this),
        SimLocationAndWeather_Location_Default_ (this),
        SimLocationAndWeather_WeatherFile_ConditionType_ (this),
        SimLocationAndWeather_WeatherFile_Days_ (this),
        SimLocationAndWeather_WeatherFile_WeatherStation_ (this),
        SimLocationAndWeather_WeatherProperty_SkyTemperature_ (this),
        SimLoop_Loop_EdgeLoop_ (this),
        SimLoop_Loop_PolyLoop_ (this),
        SimLoop_Loop_VertexLoop_ (this),
        SimMappedRepresentationItem_Default_Default_ (this),
        SimMaterial_Default_Default_ (this),
        SimMaterial_EquivGlazingMaterial_Blind_ (this),
        SimMaterial_EquivGlazingMaterial_Drape_ (this),
        SimMaterial_EquivGlazingMaterial_Gap_ (this),
        SimMaterial_EquivGlazingMaterial_Glazing_ (this),
        SimMaterial_EquivGlazingMaterial_Screen_ (this),
        SimMaterial_EquivGlazingMaterial_Shade_ (this),
        SimMaterial_GlazingMaterial_Blind_ (this),
        SimMaterial_GlazingMaterial_ComplexShade_ (this),
        SimMaterial_GlazingMaterial_Gap_ (this),
        SimMaterial_GlazingMaterial_Gas_ (this),
        SimMaterial_GlazingMaterial_GasMixture_ (this),
        SimMaterial_GlazingMaterial_Glazing_ (this),
        SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_ (this),
        SimMaterial_GlazingMaterial_Screen_ (this),
        SimMaterial_GlazingMaterial_Shade_ (this),
        SimMaterial_GlazingMaterial_SimpleGlazingSystem_ (this),
        SimMaterial_GlazingMaterial_Thermochromic_ (this),
        SimMaterial_OpaqueMaterial_AirGap_ (this),
        SimMaterial_OpaqueMaterial_Composite_ (this),
        SimMaterial_OpaqueMaterial_Default_ (this),
        SimMaterial_OpaqueMaterial_InfraredTransparent_ (this),
        SimMaterial_OpaqueMaterial_Insulation_ (this),
        SimMaterial_OpaqueMaterial_InsulationMovable_ (this),
        SimMaterial_OpaqueMaterial_NoMass_ (this),
        SimMaterial_OpaqueMaterial_Vegetation_ (this),
        SimMaterial_VirtualBoundary_Default_ (this),
        SimMaterialLayer_EquivGlazingLayer_Default_ (this),
        SimMaterialLayer_GlazingMaterialLayer_Default_ (this),
        SimMaterialLayer_OpaqueMaterialLayer_Default_ (this),
        SimMaterialLayer_VirtualBoundaryLayer_Default_ (this),
        SimMaterialLayerSet_Default_Default_ (this),
        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_ (this),
        SimMaterialLayerSet_GlazingLayerSet_CurtainWall_ (this),
        SimMaterialLayerSet_GlazingLayerSet_Default_ (this),
        SimMaterialLayerSet_GlazingLayerSet_GlassDoor_ (this),
        SimMaterialLayerSet_GlazingLayerSet_Window_ (this),
        SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_ (this),
        SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Ceiling_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Default_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Door_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Floor_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_InternalSource_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Landing_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Roof_ (this),
        SimMaterialLayerSet_OpaqueLayerSet_Wall_ (this),
        SimMeasureType_AreaMeasure_Default_ (this),
        SimMeasureType_CountMeasure_AirChangesPerhour_ (this),
        SimMeasureType_CountMeasure_Count_ (this),
        SimMeasureType_Default_Default_ (this),
        SimMeasureType_EnergyMeasure_Default_ (this),
        SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_ (this),
        SimMeasureType_EnergyMeasure_WattsPerPerson_ (this),
        SimMeasureType_LengthMeasure_Default_ (this),
        SimMeasureType_MassMeasure_Default_ (this),
        SimMeasureType_MonetaryMeasure_Default_ (this),
        SimMeasureType_PersonsPerAreaMeasure_Default_ (this),
        SimMeasureType_RatioMeasure_Default_ (this),
        SimMeasureType_RatioMeasure_PositiveRatioMeasure_ (this),
        SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_ (this),
        SimMeasureType_RotationalAngleMeasure_Degrees_ (this),
        SimMeasureType_ThermodynamicTemperatureMeasure_Default_ (this),
        SimMeasureType_VolumeMeasure_Default_ (this),
        SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_ (this),
        SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_ (this),
        SimMember_Default_Default_ (this),
        SimMemberParams_Member_Default_ (this),
        SimMemberProfileProperties_Beam_Default_ (this),
        SimMemberProfileProperties_Column_Default_ (this),
        SimMemberProfileProperties_Default_Default_ (this),
        SimModelRepresentationContext_GeometricRepresentationContext_Default_ (this),
        SimModelRepresentationContext_GeometricRepresentationSubContext_Default_ (this),
        SimModelRepresentationContext_RepresentationContext_Default_ (this),
        SimNode_AirflowNetworkNode_AirDistributionNode_ (this),
        SimNode_AirflowNetworkNode_ExternalNode_ (this),
        SimNode_AirflowNetworkNode_ZoneNode_ (this),
        SimNode_AirFlowPort_Air_In_ (this),
        SimNode_AirFlowPort_Air_InOrOut_ (this),
        SimNode_AirFlowPort_Air_Out_ (this),
        SimNode_AirFlowPort_Default_ (this),
        SimNode_AirFlowPort_ExhaustAir_Out_ (this),
        SimNode_AirFlowPort_OutdoorAir_In_ (this),
        SimNode_ChilledWaterFlowPort_CondensedWaterOut_ (this),
        SimNode_ChilledWaterFlowPort_Default_ (this),
        SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_ (this),
        SimNode_ChilledWaterFlowPort_Water_In_ (this),
        SimNode_ChilledWaterFlowPort_Water_InOrOut_ (this),
        SimNode_ChilledWaterFlowPort_Water_Out_ (this),
        SimNode_CondenserFlowPort_CondenserFlow_In_ (this),
        SimNode_CondenserFlowPort_CondenserFlow_InOrOut_ (this),
        SimNode_CondenserFlowPort_CondenserFlow_Out_ (this),
        SimNode_CondenserFlowPort_Default_ (this),
        SimNode_DaylightingReferencePoint_Default_ (this),
        SimNode_DigitalControl_AirLoop_Default_ (this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_AirLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_CHWLoop_Default_ (this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_CWLoop_Default_ (this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_CWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_HWLoop_Default_ (this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_HWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_MxWLoop_Default_ (this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_RFGLoop_Default_ (this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_SHWLoop_Default_ (this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_STMLoop_Default_ (this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_STMLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControl_VRFLoop_Default_ (this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_In_ (this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_ (this),
        SimNode_DigitalControlPort_Default_ (this),
        SimNode_DigitalControlPort_DigitalSignal_In_ (this),
        SimNode_DigitalControlPort_DigitalSignal_InOrOut_ (this),
        SimNode_DigitalControlPort_DigitalSignal_Out_ (this),
        SimNode_DigitalControlPort_DigitalVirtual_ (this),
        SimNode_DistributionPort_Default_ (this),
        SimNode_Docking_Default_ (this),
        SimNode_Docking_ThermalZone_ (this),
        SimNode_ElectricalFlowPort_Default_ (this),
        SimNode_ElectricalFlowPort_Electrical_In_ (this),
        SimNode_ElectricalFlowPort_Electrical_InOrOut_ (this),
        SimNode_ElectricalFlowPort_Electrical_Out_ (this),
        SimNode_HotWaterFlowPort_CondensedWaterOut_ (this),
        SimNode_HotWaterFlowPort_Default_ (this),
        SimNode_HotWaterFlowPort_EvaporativeWaterIn_ (this),
        SimNode_HotWaterFlowPort_Water_In_ (this),
        SimNode_HotWaterFlowPort_Water_InOrOut_ (this),
        SimNode_HotWaterFlowPort_Water_Out_ (this),
        SimNode_MixedWaterFlowPort_CondensedWaterOut_ (this),
        SimNode_MixedWaterFlowPort_Default_ (this),
        SimNode_MixedWaterFlowPort_EvaporativeWaterIn_ (this),
        SimNode_MixedWaterFlowPort_Water_In_ (this),
        SimNode_MixedWaterFlowPort_Water_InOrOut_ (this),
        SimNode_MixedWaterFlowPort_Water_Out_ (this),
        SimNode_Node_Default_ (this),
        SimNode_Node_OutdoorAir_ (this),
        SimNode_Port_Default_ (this),
        SimNode_RefrigerationFlowPort_Default_ (this),
        SimNode_RefrigerationFlowPort_Refrigeration_In_ (this),
        SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_ (this),
        SimNode_RefrigerationFlowPort_Refrigeration_Out_ (this),
        SimNode_ServiceHotWaterFlowPort_Default_ (this),
        SimNode_ServiceHotWaterFlowPort_Water_In_ (this),
        SimNode_ServiceHotWaterFlowPort_Water_InOrOut_ (this),
        SimNode_ServiceHotWaterFlowPort_Water_Out_ (this),
        SimNode_SetpointNode_Default_ (this),
        SimNode_SteamFlowPort_Default_ (this),
        SimNode_SteamFlowPort_Steam_In_ (this),
        SimNode_SteamFlowPort_Steam_InOrOut_ (this),
        SimNode_SteamFlowPort_Steam_Out_ (this),
        SimNode_VarRefrigerantFlowPort_Default_ (this),
        SimNode_VarRefrigerantFlowPort_VRF_In_ (this),
        SimNode_VarRefrigerantFlowPort_VRF_InOrOut_ (this),
        SimNode_VarRefrigerantFlowPort_VRF_Out_ (this),
        SimNode_ZoneAirFlowPort_Air_In_ (this),
        SimNode_ZoneAirFlowPort_Air_Out_ (this),
        SimNode_ZoneAirNode_Default_ (this),
        SimObjectOutputRequestSet_Default_Default_ (this),
        SimOpeningType_Opening_Default_ (this),
        SimOrganization_Organization_Default_ (this),
        SimOwnerHistory_Default_Default_ (this),
        SimPanel_Default_Default_ (this),
        SimPanelArrayParams_PanelArrayParams_Default_ (this),
        SimPanelArrayParams_SolarShadeArray_Default_ (this),
        SimPanelParams_GlazingPanel_Glazing_ (this),
        SimPanelParams_PanelParams_Default_ (this),
        SimPanelParams_ShadePanel_SolarShading_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_C_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Circle_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Ellipse_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_I_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_L_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Rectangle_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_T_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_U_Shape_ (this),
        SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_ (this),
        SimPerformanceCurve_Mathematical_Bicubic_ (this),
        SimPerformanceCurve_Mathematical_Biquadratic_ (this),
        SimPerformanceCurve_Mathematical_Cubic_ (this),
        SimPerformanceCurve_Mathematical_DoubleExponentialDecay_ (this),
        SimPerformanceCurve_Mathematical_Exponent_ (this),
        SimPerformanceCurve_Mathematical_ExponentialDecay_ (this),
        SimPerformanceCurve_Mathematical_ExponentialSkewNormal_ (this),
        SimPerformanceCurve_Mathematical_FanPressureRise_ (this),
        SimPerformanceCurve_Mathematical_Linear_ (this),
        SimPerformanceCurve_Mathematical_QuadLinear_ (this),
        SimPerformanceCurve_Mathematical_Quadratic_ (this),
        SimPerformanceCurve_Mathematical_QuadraticLinear_ (this),
        SimPerformanceCurve_Mathematical_Quartic_ (this),
        SimPerformanceCurve_Mathematical_RectangularHyperbola1_ (this),
        SimPerformanceCurve_Mathematical_RectangularHyperbola2_ (this),
        SimPerformanceCurve_Mathematical_Sigmoid_ (this),
        SimPerformanceCurve_Mathematical_TriQuadratic_ (this),
        SimPerformanceCurve_Relational_PressureDrop_ (this),
        SimPerformanceTable_Variable_MultiLookup_ (this),
        SimPerformanceTable_Variable_OneIndependent_ (this),
        SimPerformanceTable_Variable_TwoIndependent_ (this),
        SimPerson_Person_Default_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Architect_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Default_ (this),
        SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_ (this),
        SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Engineer_ (this),
        SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_ (this),
        SimPersonAndOrganization_PersonAndOrganization_Owner_ (this),
        SimPlacement_Axis1Placement_Default_ (this),
        SimPlacement_Axis2Placement2D_Default_ (this),
        SimPlacement_Axis2Placement3D_Default_ (this),
        SimPort_AirFlowPort_Air_In_ (this),
        SimPort_AirFlowPort_Air_InOrOut_ (this),
        SimPort_AirFlowPort_Air_Out_ (this),
        SimPort_AirFlowPort_Default_ (this),
        SimPort_AirFlowPort_ExhaustAir_Out_ (this),
        SimPort_AirFlowPort_OutdoorAir_In_ (this),
        SimPort_ChilledWaterFlowPort_CondensedWaterOut_ (this),
        SimPort_ChilledWaterFlowPort_Default_ (this),
        SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_ (this),
        SimPort_ChilledWaterFlowPort_Water_In_ (this),
        SimPort_ChilledWaterFlowPort_Water_InOrOut_ (this),
        SimPort_ChilledWaterFlowPort_Water_Out_ (this),
        SimPort_CondenserFlowPort_CondenserFlow_In_ (this),
        SimPort_CondenserFlowPort_CondenserFlow_InOrOut_ (this),
        SimPort_CondenserFlowPort_CondenserFlow_Out_ (this),
        SimPort_CondenserFlowPort_Default_ (this),
        SimPort_DigitalControl_AirLoop_Default_ (this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_AirLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_CHWLoop_Default_ (this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_CWLoop_Default_ (this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_CWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_HWLoop_Default_ (this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_HWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_MxWLoop_Default_ (this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_RFGLoop_Default_ (this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_SHWLoop_Default_ (this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_STMLoop_Default_ (this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_STMLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControl_VRFLoop_Default_ (this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_In_ (this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_ (this),
        SimPort_DigitalControlPort_Default_ (this),
        SimPort_DigitalControlPort_DigitalSignal_In_ (this),
        SimPort_DigitalControlPort_DigitalSignal_InOrOut_ (this),
        SimPort_DigitalControlPort_DigitalSignal_Out_ (this),
        SimPort_DigitalControlPort_DigitalVirtual_ (this),
        SimPort_DistributionPort_Default_ (this),
        SimPort_Docking_Default_ (this),
        SimPort_Docking_ThermalZone_ (this),
        SimPort_ElectricalFlowPort_Default_ (this),
        SimPort_ElectricalFlowPort_Electrical_In_ (this),
        SimPort_ElectricalFlowPort_Electrical_InOrOut_ (this),
        SimPort_ElectricalFlowPort_Electrical_Out_ (this),
        SimPort_HotWaterFlowPort_CondensedWaterOut_ (this),
        SimPort_HotWaterFlowPort_Default_ (this),
        SimPort_HotWaterFlowPort_EvaporativeWaterIn_ (this),
        SimPort_HotWaterFlowPort_Water_In_ (this),
        SimPort_HotWaterFlowPort_Water_InOrOut_ (this),
        SimPort_HotWaterFlowPort_Water_Out_ (this),
        SimPort_MixedWaterFlowPort_CondensedWaterOut_ (this),
        SimPort_MixedWaterFlowPort_Default_ (this),
        SimPort_MixedWaterFlowPort_EvaporativeWaterIn_ (this),
        SimPort_MixedWaterFlowPort_Water_In_ (this),
        SimPort_MixedWaterFlowPort_Water_InOrOut_ (this),
        SimPort_MixedWaterFlowPort_Water_Out_ (this),
        SimPort_Port_Default_ (this),
        SimPort_RefrigerationFlowPort_Default_ (this),
        SimPort_RefrigerationFlowPort_Refrigeration_In_ (this),
        SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_ (this),
        SimPort_RefrigerationFlowPort_Refrigeration_Out_ (this),
        SimPort_ServiceHotWaterFlowPort_Default_ (this),
        SimPort_ServiceHotWaterFlowPort_Water_In_ (this),
        SimPort_ServiceHotWaterFlowPort_Water_InOrOut_ (this),
        SimPort_ServiceHotWaterFlowPort_Water_Out_ (this),
        SimPort_SteamFlowPort_Default_ (this),
        SimPort_SteamFlowPort_Steam_In_ (this),
        SimPort_SteamFlowPort_Steam_InOrOut_ (this),
        SimPort_SteamFlowPort_Steam_Out_ (this),
        SimPort_VarRefrigerantFlowPort_Default_ (this),
        SimPort_VarRefrigerantFlowPort_VRF_In_ (this),
        SimPort_VarRefrigerantFlowPort_VRF_InOrOut_ (this),
        SimPort_VarRefrigerantFlowPort_VRF_Out_ (this),
        SimPort_ZoneAirFlowPort_Air_In_ (this),
        SimPort_ZoneAirFlowPort_Air_Out_ (this),
        SimPresentationLayerAssignment_Default_Default_ (this),
        SimProfileParams_Member_Default_ (this),
        SimProfileParams_ProfileParams_Default_ (this),
        SimProject_Project_Backpack_ (this),
        SimProject_Project_DesignAlternative_ (this),
        SimProject_Project_SBD_View_ (this),
        SimProject_Project_T24_View_ (this),
        SimPropertyListValue_SimpleProp_ListValue_ (this),
        SimPropertySet_PropertySet_Default_ (this),
        SimPropertySingleValue_SimpleProp_SingleValue_ (this),
        SimRailing_Default_Default_ (this),
        SimRailing_GuardRailing_Default_ (this),
        SimRailing_HandRailing_Default_ (this),
        SimRailingParams_Railing_Default_ (this),
        SimRamp_Ramp_Default_ (this),
        SimRampFlight_Default_Default_ (this),
        SimRampFlightParams_RampFlight_Default_ (this),
        SimRampParams_Ramp_Default_ (this),
        SimRefrigerationSystemElement_Compressor_Default_ (this),
        SimRefrigerationSystemElement_Condenser_AirCooled_ (this),
        SimRefrigerationSystemElement_Condenser_Cascade_ (this),
        SimRefrigerationSystemElement_Condenser_EvaporativeCooled_ (this),
        SimRefrigerationSystemElement_Condenser_WaterCooled_ (this),
        SimRefrigerationSystemElement_Default_Default_ (this),
        SimRefrigerationSystemElement_GasCooler_AirCooled_ (this),
        SimRefrigerationSystemElement_PackagedCompressorRack_Default_ (this),
        SimRefrigerationSystemElement_RefrigeratedCase_Default_ (this),
        SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_ (this),
        SimRefrigerationSystemElement_Subcooler_Default_ (this),
        SimRefrigerationSystemElement_WalkInCooler_Default_ (this),
        SimRegularTimeSeries_Regular_Default_ (this),
        SimRepresentationMap_RepresentationMap_Default_ (this),
        SimResourceConsumption_ExteriorConsumption_Default_ (this),
        SimResourceConsumption_ExteriorConsumption_Electricity_ (this),
        SimResourceConsumption_ExteriorConsumption_Fuel_ (this),
        SimResourceConsumption_ExteriorConsumption_NaturalGas_ (this),
        SimResourceConsumption_ExteriorConsumption_Water_ (this),
        SimResourceConsumption_InteriorConsumption_Default_ (this),
        SimResultsGuide_ResultsGuide_CustomTemplate_ (this),
        SimResultsGuide_ResultsGuide_Default_ (this),
        SimResultsGuide_ResultsGuide_PackageTemplate_ (this),
        SimResultsTextInfo_ResultsTextInfo_Default_ (this),
        SimResultsVariables_ResultsVariables_Default_ (this),
        SimResultsView_ResultsView_Default_ (this),
        SimResultsViewSet_ResultsViewSet_Default_ (this),
        SimRoof_Roof_Default_ (this),
        SimSensor_AirVelocitySensor_Default_ (this),
        SimSensor_Default_Default_ (this),
        SimSensor_FireSensor_Default_ (this),
        SimSensor_GasSensor_CO2Sensor_ (this),
        SimSensor_GasSensor_SmokeSensor_ (this),
        SimSensor_HeatSensor_Default_ (this),
        SimSensor_LuxSensor_Default_ (this),
        SimSensor_Meter_AirFlowRateMeter_ (this),
        SimSensor_Meter_FluidFlowRateMeter_ (this),
        SimSensor_Meter_HvacZoneWaterUseMeter_ (this),
        SimSensor_MovementSensor_Default_ (this),
        SimSensor_PressureSensor_Default_ (this),
        SimSensor_RelativeHumidity_Type1_ (this),
        SimSensor_RelativeHumidity_Type2_ (this),
        SimSensor_SolarRadiation_Default_ (this),
        SimSensor_SoundSensor_Default_ (this),
        SimSensor_TemperatureSensor_DryBulb_ (this),
        SimSensor_TemperatureSensor_Fluid_ (this),
        SimSensor_TemperatureSensor_Radiant_ (this),
        SimSensor_TemperatureSensor_WetBulb_ (this),
        SimSensor_VirtualSensor_EmsSensor_ (this),
        SimShapeRepresentation_ShapeRepresentation_Default_ (this),
        SimSimpleProperty_SimpleProp_Default_ (this),
        SimSimpleProperty_SimpleProp_ListValue_ (this),
        SimSimpleProperty_SimpleProp_SingleValue_ (this),
        SimSimulationConfiguration_SimulationConfiguration_Default_ (this),
        SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_ (this),
        SimSimulationConfiguration_StandardsConfiguration_LEED_ (this),
        SimSimulationConfiguration_StandardsConfiguration_SBDH_ (this),
        SimSimulationConfiguration_StandardsConfiguration_T24_ (this),
        SimSimulationOutputFormat_ControlReportingTolerances_Default_ (this),
        SimSimulationOutputFormat_ControlSizingStyle_Default_ (this),
        SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_ (this),
        SimSimulationOutputFormat_ControlTableStyle_Default_ (this),
        SimSimulationOutputFormat_Default_Default_ (this),
        SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_ (this),
        SimSimulationOutputRequest_Daylighting_DaylightFactors_ (this),
        SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_ (this),
        SimSimulationOutputRequest_Default_Default_ (this),
        SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_ (this),
        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_ (this),
        SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_ (this),
        SimSimulationOutputRequest_General_ReportReqDebuggingData_ (this),
        SimSimulationOutputRequest_General_ReportReqDiagnostics_ (this),
        SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_ (this),
        SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_ (this),
        SimSimulationOutputRequest_General_ReportReqSchedules_ (this),
        SimSimulationOutputRequest_General_ReportReqSQLite_ (this),
        SimSimulationOutputRequest_General_ReportReqVariableDictionary_ (this),
        SimSimulationOutputRequest_Geometry_ReportReqConstructions_ (this),
        SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_ (this),
        SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_ (this),
        SimSimulationOutputRequest_Meters_EnergyEndUseCategory_ (this),
        SimSimulationOutputRequest_Meters_MeterCumulative_ (this),
        SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_ (this),
        SimSimulationOutputRequest_Meters_MeterFileOnly_ (this),
        SimSimulationOutputRequest_Meters_VarReqMeter_ (this),
        SimSimulationOutputRequest_Meters_VarReqMeterCustom_ (this),
        SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_ (this),
        SimSimulationOutputRequest_StandardReports_TableMonthly_ (this),
        SimSimulationOutputRequest_StandardReports_TableSummaryReports_ (this),
        SimSimulationOutputRequest_StandardReports_TableTimeBins_ (this),
        SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_ (this),
        SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_ (this),
        SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_ (this),
        SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_ (this),
        SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_ (this),
        SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_ (this),
        SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_ (this),
        SimSimulationParameters_ConvectionCoefficients_Default_ (this),
        SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_ (this),
        SimSimulationParameters_FluidProperties_Concentration_ (this),
        SimSimulationParameters_FluidProperties_GlycolConcentrations_ (this),
        SimSimulationParameters_FluidProperties_Names_ (this),
        SimSimulationParameters_FluidProperties_Saturated_ (this),
        SimSimulationParameters_FluidProperties_SuperHeated_ (this),
        SimSimulationParameters_FluidProperties_Temperatures_ (this),
        SimSimulationParameters_GroundHeatTransfer_Default_ (this),
        SimSimulationParameters_HvacDesign_AirLoopSizing_ (this),
        SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_ (this),
        SimSimulationParameters_HvacDesign_Sizing_ (this),
        SimSimulationParameters_HvacDesign_WaterLoopSizing_ (this),
        SimSimulationParameters_HvacDesign_ZoneAIrDistribution_ (this),
        SimSimulationParameters_HvacDesign_ZoneSizing_ (this),
        SimSimulationParameters_Parametric_FileNameSuffix_ (this),
        SimSimulationParameters_Parametric_Logic_ (this),
        SimSimulationParameters_Parametric_RunControl_ (this),
        SimSimulationParameters_Parametric_SetValueForRun_ (this),
        SimSimulationParameters_SimulationControl_DaylightSavingTime_ (this),
        SimSimulationParameters_SimulationControl_Default_ (this),
        SimSimulationParameters_SimulationControl_RunPeriod_ (this),
        SimSimulationParameters_SimulationControl_RunPeriodCustomRange_ (this),
        SimSimulationParameters_SimulationControl_SpecialDays_ (this),
        SimSimulationParameters_SiteWindPressure_WindDirections_ (this),
        SimSimulationParameters_SiteWindPressure_WindPressureValues_ (this),
        SimSimulationParameters_SurfaceProperties_Default_ (this),
        SimSimulationParameters_SurfaceProperties_VaporCoefficients_ (this),
        SimSimulationRun_EPlusSimulation_Default_ (this),
        SimSimulationRun_StandardsRun_ASHRAE90_1_ (this),
        SimSimulationRun_StandardsRun_LEED_ (this),
        SimSimulationRun_StandardsRun_SBDH_ (this),
        SimSimulationRun_StandardsRun_T24_ (this),
        SimSite_AdjacentSite_Default_ (this),
        SimSite_BuildingSite_Default_ (this),
        SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_ (this),
        SimSiteAssembly_SiteAssembly_ExteriorLighting_ (this),
        SimSiteAssembly_SiteAssembly_ExteriorSignage_ (this),
        SimSiteAssembly_SiteAssembly_Fuel_ (this),
        SimSiteAssembly_SiteAssembly_FuelCell_ (this),
        SimSiteAssembly_SiteAssembly_SolarHotWater_ (this),
        SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_ (this),
        SimSiteAssembly_SiteAssembly_Water_ (this),
        SimSiteAssembly_SiteAssembly_WindTurbine_ (this),
        SimSIUnitType_SiUnit_Default_ (this),
        SimSlab_Ceiling_InterzoneCeiling_ (this),
        SimSlab_Ceiling_InterzoneCeilingAdiabatic_ (this),
        SimSlab_Ceiling_InterzoneCeilingDetailed_ (this),
        SimSlab_Default_Default_ (this),
        SimSlab_Floor_Adiabatic_ (this),
        SimSlab_Floor_FloorOverAir_ (this),
        SimSlab_Floor_FloorOverAirDetailed_ (this),
        SimSlab_Floor_FloorOverEarth_ (this),
        SimSlab_Floor_FloorOverEarthDetailed_ (this),
        SimSlab_Floor_InterzoneFloor_ (this),
        SimSlab_Floor_InterzoneFloorDetailed_ (this),
        SimSlab_Floor_RaisedFloor_ (this),
        SimSlab_Landing_Default_ (this),
        SimSlab_OtherSideCoefficients_Default_ (this),
        SimSlab_OtherSideCoefficients_Detailed_ (this),
        SimSlab_OtherSideCoefficients_DetailedFloor_ (this),
        SimSlab_OtherSideCoefficients_DetailedRoofCeiling_ (this),
        SimSlab_OtherSideConditionsModel_Default_ (this),
        SimSlab_OtherSideConditionsModel_Detailed_ (this),
        SimSlab_OtherSideConditionsModel_DetailedFloor_ (this),
        SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_ (this),
        SimSlab_RoofSlab_RoofUnderAir_ (this),
        SimSlab_RoofSlab_RoofUnderAirDetailed_ (this),
        SimSlab_RoofSlab_RoofUnderEarth_ (this),
        SimSlab_RoofSlab_RoofUnderEarthDetailed_ (this),
        SimSlabParams_Slab_Ceiling_ (this),
        SimSlabParams_Slab_Floor_ (this),
        SimSlabParams_Slab_Landing_ (this),
        SimSlabParams_Slab_Roof_ (this),
        SimSlabType_Slab_Ceiling_ (this),
        SimSlabType_Slab_Default_ (this),
        SimSlabType_Slab_Floor_ (this),
        SimSlabType_Slab_Landing_ (this),
        SimSlabType_Slab_Roof_ (this),
        SimSoftwareApplication_Default_Default_ (this),
        SimSolarObsParams_SolarObstruction_Default_ (this),
        SimSolarShade_Default_Default_ (this),
        SimSolarShade_Fin_Default_ (this),
        SimSolarShade_Fin_Projection_ (this),
        SimSolarShade_Overhang_Continuous_ (this),
        SimSolarShade_Overhang_Default_ (this),
        SimSolarShade_Overhang_Projection_ (this),
        SimSolarShade_ZoneDetailed_Default_ (this),
        SimSolarShadeArrayParams_SolarShadeArray_Default_ (this),
        SimSolarShadePanelParams_ShadePanel_SolarShading_ (this),
        SimSolarShadeType_SolarShade_Default_ (this),
        SimSolarShadeType_SolarShade_LeftFin_ (this),
        SimSolarShadeType_SolarShade_Overhang_ (this),
        SimSolarShadeType_SolarShade_RightFin_ (this),
        SimSpace_Occupied_Default_ (this),
        SimSpace_Unoccupied_CeilingPlenum_ (this),
        SimSpace_Unoccupied_CeilingVoid_ (this),
        SimSpace_Unoccupied_Default_ (this),
        SimSpace_Unoccupied_FloorPlenum_ (this),
        SimSpace_Unoccupied_FloorVoid_ (this),
        SimSpace_Unoccupied_Plenum_ (this),
        SimSpaceBoundary_Ceiling_InterzoneCeiling_ (this),
        SimSpaceBoundary_Door_GlazedDoor_ (this),
        SimSpaceBoundary_Door_OpaqueDoor_ (this),
        SimSpaceBoundary_FirstLevel_Default_ (this),
        SimSpaceBoundary_Floor_FloorOverAir_ (this),
        SimSpaceBoundary_Floor_FloorOverEarth_ (this),
        SimSpaceBoundary_Floor_InterzoneFloor_ (this),
        SimSpaceBoundary_RoofSlab_RoofUnderAir_ (this),
        SimSpaceBoundary_SecondLevel_Default_ (this),
        SimSpaceBoundary_SecondLevel_SubTypeA_ (this),
        SimSpaceBoundary_SecondLevel_SubTypeB_ (this),
        SimSpaceBoundary_SecondLevel_SubTypeC_ (this),
        SimSpaceBoundary_Skylight_Default_ (this),
        SimSpaceBoundary_Wall_ExteriorAboveGrade_ (this),
        SimSpaceBoundary_Wall_ExteriorBelowGrade_ (this),
        SimSpaceBoundary_Wall_Interior_ (this),
        SimSpaceBoundary_Window_Exterior_ (this),
        SimSpaceOccupant_Actor_SpaceOccupant_ (this),
        SimSpaceParams_Space_Default_ (this),
        SimSpaceType_Space_Default_ (this),
        SimSpatialZone_OutdoorAir_Default_ (this),
        SimSpatialZone_Plenum_CeilingPlenum_ (this),
        SimSpatialZone_Plenum_Default_ (this),
        SimSpatialZone_Plenum_FloorPlenum_ (this),
        SimSpatialZone_SecurityZone_Public_ (this),
        SimSpatialZone_SecurityZone_Security_ (this),
        SimSpatialZone_SecurityZone_StaffOnly_ (this),
        SimSpatialZone_ThermalZone_AboveCeilingVoid_ (this),
        SimSpatialZone_ThermalZone_BelowFloorVoid_ (this),
        SimSpatialZone_ThermalZone_Default_ (this),
        SimSpatialZone_ThermalZone_TemplateForZoneGroup_ (this),
        SimStair_Stair_Default_ (this),
        SimStairFlight_Default_Default_ (this),
        SimStairFlightParams_StairFlight_Default_ (this),
        SimStairParams_Stair_Default_ (this),
        SimSystem_AirFlowNetwork_Default_ (this),
        SimSystem_Electrical_SystemsContainer_ (this),
        SimSystem_ElectricalLighting_FullSystem_ (this),
        SimSystem_ElectricalLighting_LightingCircuit_ (this),
        SimSystem_ElectricalPower_FullSystem_ (this),
        SimSystem_ElectroMechanical_PV_SolarThermal_ (this),
        SimSystem_Hvac_SystemsContainer_ (this),
        SimSystem_HvacAir_AirBranch_ (this),
        SimSystem_HvacAir_Control_ (this),
        SimSystem_HvacAir_ControlDemand_ (this),
        SimSystem_HvacAir_ControlSupply_ (this),
        SimSystem_HvacAir_Demand_ (this),
        SimSystem_HvacAir_DemandSideReturnPath_ (this),
        SimSystem_HvacAir_DemandSideSupplyPath_ (this),
        SimSystem_HvacAir_DemandSideZoneHvac_ (this),
        SimSystem_HvacAir_FullSystem_ (this),
        SimSystem_HvacAir_FullSystemDual_ (this),
        SimSystem_HvacAir_FullSystemTriple_ (this),
        SimSystem_HvacAir_OutdoorAir_ (this),
        SimSystem_HvacAir_OutdoorAirExhaust_ (this),
        SimSystem_HvacAir_OutdoorAirSupply_ (this),
        SimSystem_HvacAir_Supply_ (this),
        SimSystem_HvacAir_SupplySideReturnPath_ (this),
        SimSystem_HvacAir_SupplySideSupplyPath_ (this),
        SimSystem_HvacChilledWater_Control_ (this),
        SimSystem_HvacChilledWater_ControlDemand_ (this),
        SimSystem_HvacChilledWater_ControlSupply_ (this),
        SimSystem_HvacChilledWater_Demand_ (this),
        SimSystem_HvacChilledWater_DemandSideDemandComponents_ (this),
        SimSystem_HvacChilledWater_DemandSideReturnPath_ (this),
        SimSystem_HvacChilledWater_DemandSideSupplyPath_ (this),
        SimSystem_HvacChilledWater_FullSystem_ (this),
        SimSystem_HvacChilledWater_Supply_ (this),
        SimSystem_HvacChilledWater_WaterBranch_ (this),
        SimSystem_HvacCondenser_CondenserBranch_ (this),
        SimSystem_HvacCondenser_Control_ (this),
        SimSystem_HvacCondenser_ControlDemand_ (this),
        SimSystem_HvacCondenser_ControlSupply_ (this),
        SimSystem_HvacCondenser_Demand_ (this),
        SimSystem_HvacCondenser_DemandSideDemandComponents_ (this),
        SimSystem_HvacCondenser_DemandSideReturnPath_ (this),
        SimSystem_HvacCondenser_DemandSideSupplyPath_ (this),
        SimSystem_HvacCondenser_FullSystem_ (this),
        SimSystem_HvacCondenser_Supply_ (this),
        SimSystem_HvacHotWater_Control_ (this),
        SimSystem_HvacHotWater_ControlDemand_ (this),
        SimSystem_HvacHotWater_ControlSupply_ (this),
        SimSystem_HvacHotWater_Demand_ (this),
        SimSystem_HvacHotWater_DemandSideDemandComponents_ (this),
        SimSystem_HvacHotWater_DemandSideReturnPath_ (this),
        SimSystem_HvacHotWater_DemandSideSupplyPath_ (this),
        SimSystem_HvacHotWater_FullSystem_ (this),
        SimSystem_HvacHotWater_Supply_ (this),
        SimSystem_HvacHotWater_WaterBranch_ (this),
        SimSystem_HvacMixedWater_Control_ (this),
        SimSystem_HvacMixedWater_ControlDemand_ (this),
        SimSystem_HvacMixedWater_ControlSupply_ (this),
        SimSystem_HvacMixedWater_Demand_ (this),
        SimSystem_HvacMixedWater_DemandSideDemandComponents_ (this),
        SimSystem_HvacMixedWater_DemandSideReturnPath_ (this),
        SimSystem_HvacMixedWater_DemandSideSupplyPath_ (this),
        SimSystem_HvacMixedWater_FullSystem_ (this),
        SimSystem_HvacMixedWater_Supply_ (this),
        SimSystem_HvacMixedWater_WaterBranch_ (this),
        SimSystem_HvacSteam_Control_ (this),
        SimSystem_HvacSteam_ControlDemand_ (this),
        SimSystem_HvacSteam_ControlSupply_ (this),
        SimSystem_HvacSteam_Demand_ (this),
        SimSystem_HvacSteam_DemandSideDemandComponents_ (this),
        SimSystem_HvacSteam_DemandSideReturnPath_ (this),
        SimSystem_HvacSteam_DemandSideSupplyPath_ (this),
        SimSystem_HvacSteam_FullSystem_ (this),
        SimSystem_HvacSteam_SteamBranch_ (this),
        SimSystem_HvacSteam_Supply_ (this),
        SimSystem_Mechanical_SystemsContainer_ (this),
        SimSystem_Plumbing_ColdWater_ (this),
        SimSystem_Plumbing_GrayWater_ (this),
        SimSystem_Plumbing_HotWater_ (this),
        SimSystem_Plumbing_PotableWater_ (this),
        SimSystem_Plumbing_SystemsContainer_ (this),
        SimSystem_Plumbing_UndergroundPipingCircuit_ (this),
        SimSystem_Plumbing_WasteWater_ (this),
        SimSystem_Plumbing_WaterUseSystem_ (this),
        SimSystem_Plumbing_WaterUseWell_ (this),
        SimSystem_RefrigerationPrimary_Control_ (this),
        SimSystem_RefrigerationPrimary_Demand_ (this),
        SimSystem_RefrigerationPrimary_FullSystem_ (this),
        SimSystem_RefrigerationPrimary_Supply_ (this),
        SimSystem_RefrigerationSecondary_Control_ (this),
        SimSystem_RefrigerationSecondary_Demand_ (this),
        SimSystem_RefrigerationSecondary_FullSystem_ (this),
        SimSystem_RefrigerationSecondary_Supply_ (this),
        SimSystem_RefrigerationTranscritical_Control_ (this),
        SimSystem_RefrigerationTranscritical_Demand_ (this),
        SimSystem_RefrigerationTranscritical_FullSystem_ (this),
        SimSystem_RefrigerationTranscritical_Supply_ (this),
        SimSystem_ServiceHotWater_Control_ (this),
        SimSystem_ServiceHotWater_Demand_ (this),
        SimSystem_ServiceHotWater_FullSystem_ (this),
        SimSystem_ServiceHotWater_Supply_ (this),
        SimSystem_ServiceHotWater_WaterBranch_ (this),
        SimSystem_SitePowerDemand_ElectricityConsuming_ (this),
        SimSystem_SitePowerDemand_FuelConsuming_ (this),
        SimSystem_SitePowerDemand_WaterConsuming_ (this),
        SimSystem_SitePowerGeneration_Other_ (this),
        SimSystem_SitePowerGeneration_Photovoltaic_ (this),
        SimSystem_SitePowerGeneration_WindTurbine_ (this),
        SimSystem_Transport_Elevator_ (this),
        SimSystem_Transport_Escalator_ (this),
        SimSystem_Transport_MovingWalkway_ (this),
        SimSystem_Transport_SystemsContainer_ (this),
        SimSystem_VariableRefrigerantFlow_Control_ (this),
        SimSystem_VariableRefrigerantFlow_Demand_ (this),
        SimSystem_VariableRefrigerantFlow_FullSystem_ (this),
        SimSystem_VariableRefrigerantFlow_Supply_ (this),
        SimSystem_ZoneHvacGroup_Control_ (this),
        SimSystem_ZoneHvacGroup_ControlDemand_ (this),
        SimSystem_ZoneHvacGroup_ControlSupply_ (this),
        SimSystem_ZoneHvacGroup_Demand_ (this),
        SimSystem_ZoneHvacGroup_DemandSideReturnPath_ (this),
        SimSystem_ZoneHvacGroup_DemandSideSupplyPath_ (this),
        SimSystem_ZoneHvacGroup_DemandSideZoneHvac_ (this),
        SimSystem_ZoneHvacGroup_FullSystem_ (this),
        SimSystem_ZoneHvacGroup_Supply_ (this),
        SimSystem_ZoneShwGroup_Demand_ (this),
        SimSystem_ZoneShwGroup_FullSystem_ (this),
        SimSystem_ZoneShwGroup_Supply_ (this),
        SimTemplateConstructions_Constructions_Default_ (this),
        SimTemplateDaylighting_Daylighting_Default_ (this),
        SimTemplateDaylighting_Daylighting_Skylights_ (this),
        SimTemplateDaylighting_Daylighting_Windows_ (this),
        SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_ (this),
        SimTemplateInteriorLighting_InteriorLighting_Default_ (this),
        SimTemplateLocation_Location_Default_ (this),
        SimTemplateNaturalVentilation_NaturalVentilation_Default_ (this),
        SimTemplateOutputFormatSet_OutputFormatSet_Default_ (this),
        SimTemplateOutputRequestSet_OutputRequestSet_Default_ (this),
        SimTemplateSimulationParameters_SimulationParameters_Default_ (this),
        SimTemplateZoneConditions_ZoneConditions_Default_ (this),
        SimTemplateZoneLoads_ZoneLoads_Default_ (this),
        SimTimeSeriesSchedule_Calendar_Configuration_ (this),
        SimTimeSeriesSchedule_Calendar_Default_ (this),
        SimTimeSeriesSchedule_Calendar_SpecialDays_ (this),
        SimTimeSeriesSchedule_Compact_Default_ (this),
        SimTimeSeriesSchedule_Constant_Default_ (this),
        SimTimeSeriesSchedule_Day_Hourly_ (this),
        SimTimeSeriesSchedule_Day_Interval_ (this),
        SimTimeSeriesSchedule_Day_List_ (this),
        SimTimeSeriesSchedule_File_Default_ (this),
        SimTimeSeriesSchedule_Limits_Default_ (this),
        SimTimeSeriesSchedule_TimeSeries_Default_ (this),
        SimTimeSeriesSchedule_Week_Compact_ (this),
        SimTimeSeriesSchedule_Week_Daily_ (this),
        SimTimeSeriesSchedule_Year_Default_ (this),
        SimTimeSeriesValue_TimeSeries_Irregular_ (this),
        SimTimeSeriesValue_TimeSeries_Regular_ (this),
        SimToplogicalRepresentation_TopologicalRepresentation_Default_ (this),
        SimTransportSysAssembly_TransportSysAssembly_Default_ (this),
        SimTransportSysAssembly_TransportSysAssembly_Elevator_ (this),
        SimTransportSysAssembly_TransportSysAssembly_Escalator_ (this),
        SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_ (this),
        SimValidationResultsAir_AirLoop_Default_ (this),
        SimValidationResultsBldg_Building_Default_ (this),
        SimValidationResultsRefrig_RFGLoop_Default_ (this),
        SimValidationResultsVRF_VRFLoop_Default_ (this),
        SimValidationResultsWater_CHWLoop_Default_ (this),
        SimValidationResultsWater_CWLoop_Default_ (this),
        SimValidationResultsWater_HWLoop_Default_ (this),
        SimValidationResultsWater_MxWLoop_Default_ (this),
        SimValidationResultsWater_SHWLoop_Default_ (this),
        SimValidationResultsWater_STMLoop_Default_ (this),
        SimValidationResultsZoneHvac_ZoneHvac_Default_ (this),
        SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_ (this),
        SimVentilationAssembly_VentilationAssembly_EarthTube_ (this),
        SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_ (this),
        SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_ (this),
        SimVentilationAssembly_VentilationAssembly_ThermalChimney_ (this),
        SimVertex_Vertex_Point_ (this),
        SimVirtualElement_Default_Default_ (this),
        SimVirtualElement_Slab_Ceiling_ (this),
        SimVirtualElement_Slab_Default_ (this),
        SimVirtualElement_Slab_Floor_ (this),
        SimVirtualElement_Slab_OpeningFiller_ (this),
        SimVirtualElement_Wall_Default_ (this),
        SimVirtualElement_Wall_OpeningFiller_ (this),
        SimVirtualGridIntersection_VirtualGridIntersection_Default_ (this),
        SimWall_OtherSideCoefficients_Default_ (this),
        SimWall_OtherSideCoefficients_Detailed_ (this),
        SimWall_OtherSideCoefficients_DetailedFloor_ (this),
        SimWall_OtherSideCoefficients_DetailedRoofCeiling_ (this),
        SimWall_OtherSideConditionsModel_Default_ (this),
        SimWall_OtherSideConditionsModel_Detailed_ (this),
        SimWall_OtherSideConditionsModel_DetailedFloor_ (this),
        SimWall_OtherSideConditionsModel_DetailedRoofCeiling_ (this),
        SimWall_Wall_Adiabatic_ (this),
        SimWall_Wall_Default_ (this),
        SimWall_Wall_ExteriorAboveGrade_ (this),
        SimWall_Wall_ExteriorAboveGradeDetailed_ (this),
        SimWall_Wall_ExteriorAboveGradeStandard_ (this),
        SimWall_Wall_ExteriorBelowGrade_ (this),
        SimWall_Wall_ExteriorBelowGradeDetailed_ (this),
        SimWall_Wall_ExteriorBelowGradeStandard_ (this),
        SimWall_Wall_Interior_ (this),
        SimWall_Wall_InteriorDetailed_ (this),
        SimWall_Wall_InteriorStandard_ (this),
        SimWall_Wall_OpeningFiller_ (this),
        SimWallParams_Wall_Default_ (this),
        SimWallType_Wall_Default_ (this),
        SimWindow_ComplexFenestration_ThermoChromic_ (this),
        SimWindow_Skylight_Exterior_ (this),
        SimWindow_Skylight_ExteriorDetailed_ (this),
        SimWindow_Window_Default_ (this),
        SimWindow_Window_Exterior_ (this),
        SimWindow_Window_ExteriorDetailed_ (this),
        SimWindow_Window_Interior_ (this),
        SimWindowArrayParams_WindowArray_Default_ (this),
        SimWindowLiningProps_WindowLiningProps_Default_ (this),
        SimWindowPanelProps_WindowPanelProps_Default_ (this),
        SimWindowParams_Window_Default_ (this),
        SimWindowType_Window_Default_ (this),
        SimModelVersion_ (this),
        SimModelSchemaVersion_ (this),
        SimModelUnitsVersion_ (this),
        SimModelUnitDefaultsVersion_ (this),
        SimModelSchemaIDKey_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimModel::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimActor_Actor_Default
          //
          if (n.name () == "SimActor_Actor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActor_Actor_Default_type > r (
              SimActor_Actor_Default_traits::create (i, f, this));

            this->SimActor_Actor_Default_.push_back (r);
            continue;
          }

          // SimActor_Actor_SpaceOccupant
          //
          if (n.name () == "SimActor_Actor_SpaceOccupant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActor_Actor_SpaceOccupant_type > r (
              SimActor_Actor_SpaceOccupant_traits::create (i, f, this));

            this->SimActor_Actor_SpaceOccupant_.push_back (r);
            continue;
          }

          // SimActuator_DamperActuator_Default
          //
          if (n.name () == "SimActuator_DamperActuator_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActuator_DamperActuator_Default_type > r (
              SimActuator_DamperActuator_Default_traits::create (i, f, this));

            this->SimActuator_DamperActuator_Default_.push_back (r);
            continue;
          }

          // SimActuator_Default_Default
          //
          if (n.name () == "SimActuator_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActuator_Default_Default_type > r (
              SimActuator_Default_Default_traits::create (i, f, this));

            this->SimActuator_Default_Default_.push_back (r);
            continue;
          }

          // SimActuator_ElectricalRotor_Default
          //
          if (n.name () == "SimActuator_ElectricalRotor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActuator_ElectricalRotor_Default_type > r (
              SimActuator_ElectricalRotor_Default_traits::create (i, f, this));

            this->SimActuator_ElectricalRotor_Default_.push_back (r);
            continue;
          }

          // SimActuator_ValveActuator_Default
          //
          if (n.name () == "SimActuator_ValveActuator_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActuator_ValveActuator_Default_type > r (
              SimActuator_ValveActuator_Default_traits::create (i, f, this));

            this->SimActuator_ValveActuator_Default_.push_back (r);
            continue;
          }

          // SimActuator_VirtualActuator_EmsActuator
          //
          if (n.name () == "SimActuator_VirtualActuator_EmsActuator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimActuator_VirtualActuator_EmsActuator_type > r (
              SimActuator_VirtualActuator_EmsActuator_traits::create (i, f, this));

            this->SimActuator_VirtualActuator_EmsActuator_.push_back (r);
            continue;
          }

          // SimAddress_Postal_Default
          //
          if (n.name () == "SimAddress_Postal_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAddress_Postal_Default_type > r (
              SimAddress_Postal_Default_traits::create (i, f, this));

            this->SimAddress_Postal_Default_.push_back (r);
            continue;
          }

          // SimAddress_Telecom_Default
          //
          if (n.name () == "SimAddress_Telecom_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAddress_Telecom_Default_type > r (
              SimAddress_Telecom_Default_traits::create (i, f, this));

            this->SimAddress_Telecom_Default_.push_back (r);
            continue;
          }

          // SimAdjacentSiteParams_AdjacentSite_Default
          //
          if (n.name () == "SimAdjacentSiteParams_AdjacentSite_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAdjacentSiteParams_AdjacentSite_Default_type > r (
              SimAdjacentSiteParams_AdjacentSite_Default_traits::create (i, f, this));

            this->SimAdjacentSiteParams_AdjacentSite_Default_.push_back (r);
            continue;
          }

          // SimAnalyticalRepresentation_AnalyticalRepresentation_Default
          //
          if (n.name () == "SimAnalyticalRepresentation_AnalyticalRepresentation_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAnalyticalRepresentation_AnalyticalRepresentation_Default_type > r (
              SimAnalyticalRepresentation_AnalyticalRepresentation_Default_traits::create (i, f, this));

            this->SimAnalyticalRepresentation_AnalyticalRepresentation_Default_.push_back (r);
            continue;
          }

          // SimAppLanguageDefault_AppLanguageDefault_Default
          //
          if (n.name () == "SimAppLanguageDefault_AppLanguageDefault_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppLanguageDefault_AppLanguageDefault_Default_type > r (
              SimAppLanguageDefault_AppLanguageDefault_Default_traits::create (i, f, this));

            this->SimAppLanguageDefault_AppLanguageDefault_Default_.push_back (r);
            continue;
          }

          // SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary
          //
          if (n.name () == "SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_type > r (
              SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_traits::create (i, f, this));

            this->SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_.push_back (r);
            continue;
          }

          // SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary
          //
          if (n.name () == "SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_type > r (
              SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_traits::create (i, f, this));

            this->SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_.push_back (r);
            continue;
          }

          // SimAppLibraryDefault_AppLibraryDefault_UserLibrary
          //
          if (n.name () == "SimAppLibraryDefault_AppLibraryDefault_UserLibrary" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppLibraryDefault_AppLibraryDefault_UserLibrary_type > r (
              SimAppLibraryDefault_AppLibraryDefault_UserLibrary_traits::create (i, f, this));

            this->SimAppLibraryDefault_AppLibraryDefault_UserLibrary_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_.push_back (r);
            continue;
          }

          // SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site
          //
          if (n.name () == "SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_type > r (
              SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_traits::create (i, f, this));

            this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_BldgComponentGroup_HvacComponent
          //
          if (n.name () == "SimAppObjNameDefault_BldgComponentGroup_HvacComponent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_BldgComponentGroup_HvacComponent_type > r (
              SimAppObjNameDefault_BldgComponentGroup_HvacComponent_traits::create (i, f, this));

            this->SimAppObjNameDefault_BldgComponentGroup_HvacComponent_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup
          //
          if (n.name () == "SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_type > r (
              SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_Default
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_Default_type > r (
              SimAppObjNameDefault_DistributionSystem_Default_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_Default_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_HvacAirLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_HvacAirLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_HvacAirLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_HvacAirLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_HvacAirLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_HvacSteamLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_HvacSteamLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_MixedWaterLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_MixedWaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_RefrigerationLoop
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_RefrigerationLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_type > r (
              SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_ServiceHotWater
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_ServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_ServiceHotWater_type > r (
              SimAppObjNameDefault_DistributionSystem_ServiceHotWater_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_ServiceHotWater_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_SitePowerDemand
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_SitePowerDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_SitePowerDemand_type > r (
              SimAppObjNameDefault_DistributionSystem_SitePowerDemand_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_SitePowerDemand_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_SitePowerGeneration
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_SitePowerGeneration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_type > r (
              SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow
          //
          if (n.name () == "SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_type > r (
              SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_traits::create (i, f, this));

            this->SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_OtherSystem_Default
          //
          if (n.name () == "SimAppObjNameDefault_OtherSystem_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_OtherSystem_Default_type > r (
              SimAppObjNameDefault_OtherSystem_Default_traits::create (i, f, this));

            this->SimAppObjNameDefault_OtherSystem_Default_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SiteContext_AdjacentSite
          //
          if (n.name () == "SimAppObjNameDefault_SiteContext_AdjacentSite" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SiteContext_AdjacentSite_type > r (
              SimAppObjNameDefault_SiteContext_AdjacentSite_traits::create (i, f, this));

            this->SimAppObjNameDefault_SiteContext_AdjacentSite_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SiteContext_SolarObstruction
          //
          if (n.name () == "SimAppObjNameDefault_SiteContext_SolarObstruction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SiteContext_SolarObstruction_type > r (
              SimAppObjNameDefault_SiteContext_SolarObstruction_traits::create (i, f, this));

            this->SimAppObjNameDefault_SiteContext_SolarObstruction_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_Space_CeilingPlenum
          //
          if (n.name () == "SimAppObjNameDefault_Space_CeilingPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_Space_CeilingPlenum_type > r (
              SimAppObjNameDefault_Space_CeilingPlenum_traits::create (i, f, this));

            this->SimAppObjNameDefault_Space_CeilingPlenum_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_Space_FloorPlenum
          //
          if (n.name () == "SimAppObjNameDefault_Space_FloorPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_Space_FloorPlenum_type > r (
              SimAppObjNameDefault_Space_FloorPlenum_traits::create (i, f, this));

            this->SimAppObjNameDefault_Space_FloorPlenum_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_Space_Space
          //
          if (n.name () == "SimAppObjNameDefault_Space_Space" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_Space_Space_type > r (
              SimAppObjNameDefault_Space_Space_traits::create (i, f, this));

            this->SimAppObjNameDefault_Space_Space_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialContainer_Building
          //
          if (n.name () == "SimAppObjNameDefault_SpatialContainer_Building" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialContainer_Building_type > r (
              SimAppObjNameDefault_SpatialContainer_Building_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialContainer_Building_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialContainer_BuildingStory
          //
          if (n.name () == "SimAppObjNameDefault_SpatialContainer_BuildingStory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialContainer_BuildingStory_type > r (
              SimAppObjNameDefault_SpatialContainer_BuildingStory_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialContainer_BuildingStory_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialContainer_Project
          //
          if (n.name () == "SimAppObjNameDefault_SpatialContainer_Project" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialContainer_Project_type > r (
              SimAppObjNameDefault_SpatialContainer_Project_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialContainer_Project_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialContainer_Site
          //
          if (n.name () == "SimAppObjNameDefault_SpatialContainer_Site" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialContainer_Site_type > r (
              SimAppObjNameDefault_SpatialContainer_Site_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialContainer_Site_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialZone_CeilingPlenumZone
          //
          if (n.name () == "SimAppObjNameDefault_SpatialZone_CeilingPlenumZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_type > r (
              SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialZone_FloorPlenumZone
          //
          if (n.name () == "SimAppObjNameDefault_SpatialZone_FloorPlenumZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialZone_FloorPlenumZone_type > r (
              SimAppObjNameDefault_SpatialZone_FloorPlenumZone_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialZone_FloorPlenumZone_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialZone_PlenumZone
          //
          if (n.name () == "SimAppObjNameDefault_SpatialZone_PlenumZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialZone_PlenumZone_type > r (
              SimAppObjNameDefault_SpatialZone_PlenumZone_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialZone_PlenumZone_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_SpatialZone_ThermalZone
          //
          if (n.name () == "SimAppObjNameDefault_SpatialZone_ThermalZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_SpatialZone_ThermalZone_type > r (
              SimAppObjNameDefault_SpatialZone_ThermalZone_traits::create (i, f, this));

            this->SimAppObjNameDefault_SpatialZone_ThermalZone_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup
          //
          if (n.name () == "SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_type > r (
              SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup
          //
          if (n.name () == "SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_type > r (
              SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup
          //
          if (n.name () == "SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_type > r (
              SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup
          //
          if (n.name () == "SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_type > r (
              SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup
          //
          if (n.name () == "SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_type > r (
              SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_.push_back (r);
            continue;
          }

          // SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup
          //
          if (n.name () == "SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_type > r (
              SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_traits::create (i, f, this));

            this->SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_.push_back (r);
            continue;
          }

          // SimAppPreferences_AppPreferences_AutoSave
          //
          if (n.name () == "SimAppPreferences_AppPreferences_AutoSave" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppPreferences_AppPreferences_AutoSave_type > r (
              SimAppPreferences_AppPreferences_AutoSave_traits::create (i, f, this));

            this->SimAppPreferences_AppPreferences_AutoSave_.push_back (r);
            continue;
          }

          // SimAppPreferences_AppPreferences_AutoSaveInterval
          //
          if (n.name () == "SimAppPreferences_AppPreferences_AutoSaveInterval" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppPreferences_AppPreferences_AutoSaveInterval_type > r (
              SimAppPreferences_AppPreferences_AutoSaveInterval_traits::create (i, f, this));

            this->SimAppPreferences_AppPreferences_AutoSaveInterval_.push_back (r);
            continue;
          }

          // SimAppPreferences_AppPreferences_EPlusInstalPath
          //
          if (n.name () == "SimAppPreferences_AppPreferences_EPlusInstalPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppPreferences_AppPreferences_EPlusInstalPath_type > r (
              SimAppPreferences_AppPreferences_EPlusInstalPath_traits::create (i, f, this));

            this->SimAppPreferences_AppPreferences_EPlusInstalPath_.push_back (r);
            continue;
          }

          // SimAppPreferences_AppPreferences_EPlusInstalVersion
          //
          if (n.name () == "SimAppPreferences_AppPreferences_EPlusInstalVersion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppPreferences_AppPreferences_EPlusInstalVersion_type > r (
              SimAppPreferences_AppPreferences_EPlusInstalVersion_traits::create (i, f, this));

            this->SimAppPreferences_AppPreferences_EPlusInstalVersion_.push_back (r);
            continue;
          }

          // SimAppPreferences_AppPreferences_MinMonthlyChargeType
          //
          if (n.name () == "SimAppPreferences_AppPreferences_MinMonthlyChargeType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppPreferences_AppPreferences_MinMonthlyChargeType_type > r (
              SimAppPreferences_AppPreferences_MinMonthlyChargeType_traits::create (i, f, this));

            this->SimAppPreferences_AppPreferences_MinMonthlyChargeType_.push_back (r);
            continue;
          }

          // SimAppPreferences_AppPreferences_MonthlyChargeType
          //
          if (n.name () == "SimAppPreferences_AppPreferences_MonthlyChargeType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppPreferences_AppPreferences_MonthlyChargeType_type > r (
              SimAppPreferences_AppPreferences_MonthlyChargeType_traits::create (i, f, this));

            this->SimAppPreferences_AppPreferences_MonthlyChargeType_.push_back (r);
            continue;
          }

          // SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam
          //
          if (n.name () == "SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_type > r (
              SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_traits::create (i, f, this));

            this->SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_.push_back (r);
            continue;
          }

          // SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions
          //
          if (n.name () == "SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_type > r (
              SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_traits::create (i, f, this));

            this->SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_.push_back (r);
            continue;
          }

          // SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis
          //
          if (n.name () == "SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_type > r (
              SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_traits::create (i, f, this));

            this->SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_.push_back (r);
            continue;
          }

          // SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData
          //
          if (n.name () == "SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_type > r (
              SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_traits::create (i, f, this));

            this->SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_.push_back (r);
            continue;
          }

          // SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam
          //
          if (n.name () == "SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_type > r (
              SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_traits::create (i, f, this));

            this->SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_.push_back (r);
            continue;
          }

          // SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions
          //
          if (n.name () == "SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_type > r (
              SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_traits::create (i, f, this));

            this->SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_.push_back (r);
            continue;
          }

          // SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis
          //
          if (n.name () == "SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_type > r (
              SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_traits::create (i, f, this));

            this->SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_.push_back (r);
            continue;
          }

          // SimAppStdT24Defaults_AppStdT24Defaults_ProjectData
          //
          if (n.name () == "SimAppStdT24Defaults_AppStdT24Defaults_ProjectData" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_type > r (
              SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_traits::create (i, f, this));

            this->SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_.push_back (r);
            continue;
          }

          // SimAppUnitDefault_AppUnitDefault_DatabaseDefault
          //
          if (n.name () == "SimAppUnitDefault_AppUnitDefault_DatabaseDefault" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppUnitDefault_AppUnitDefault_DatabaseDefault_type > r (
              SimAppUnitDefault_AppUnitDefault_DatabaseDefault_traits::create (i, f, this));

            this->SimAppUnitDefault_AppUnitDefault_DatabaseDefault_.push_back (r);
            continue;
          }

          // SimAppUnitDefault_AppUnitDefault_UserDisplayPreference
          //
          if (n.name () == "SimAppUnitDefault_AppUnitDefault_UserDisplayPreference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_type > r (
              SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_traits::create (i, f, this));

            this->SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_.push_back (r);
            continue;
          }

          // SimArbitraryProfileDef_ArbitraryProfile_Closed
          //
          if (n.name () == "SimArbitraryProfileDef_ArbitraryProfile_Closed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArbitraryProfileDef_ArbitraryProfile_Closed_type > r (
              SimArbitraryProfileDef_ArbitraryProfile_Closed_traits::create (i, f, this));

            this->SimArbitraryProfileDef_ArbitraryProfile_Closed_.push_back (r);
            continue;
          }

          // SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids
          //
          if (n.name () == "SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_type > r (
              SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_traits::create (i, f, this));

            this->SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_.push_back (r);
            continue;
          }

          // SimArbitraryProfileDef_ArbitraryProfile_Open
          //
          if (n.name () == "SimArbitraryProfileDef_ArbitraryProfile_Open" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArbitraryProfileDef_ArbitraryProfile_Open_type > r (
              SimArbitraryProfileDef_ArbitraryProfile_Open_traits::create (i, f, this));

            this->SimArbitraryProfileDef_ArbitraryProfile_Open_.push_back (r);
            continue;
          }

          // SimArrayParams_ArrayParams_Default
          //
          if (n.name () == "SimArrayParams_ArrayParams_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_ArrayParams_Default_type > r (
              SimArrayParams_ArrayParams_Default_traits::create (i, f, this));

            this->SimArrayParams_ArrayParams_Default_.push_back (r);
            continue;
          }

          // SimArrayParams_BldgElementArray_Beam
          //
          if (n.name () == "SimArrayParams_BldgElementArray_Beam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_BldgElementArray_Beam_type > r (
              SimArrayParams_BldgElementArray_Beam_traits::create (i, f, this));

            this->SimArrayParams_BldgElementArray_Beam_.push_back (r);
            continue;
          }

          // SimArrayParams_BldgElementArray_Column
          //
          if (n.name () == "SimArrayParams_BldgElementArray_Column" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_BldgElementArray_Column_type > r (
              SimArrayParams_BldgElementArray_Column_traits::create (i, f, this));

            this->SimArrayParams_BldgElementArray_Column_.push_back (r);
            continue;
          }

          // SimArrayParams_BldgElementArray_Default
          //
          if (n.name () == "SimArrayParams_BldgElementArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_BldgElementArray_Default_type > r (
              SimArrayParams_BldgElementArray_Default_traits::create (i, f, this));

            this->SimArrayParams_BldgElementArray_Default_.push_back (r);
            continue;
          }

          // SimArrayParams_DoorArray_Default
          //
          if (n.name () == "SimArrayParams_DoorArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_DoorArray_Default_type > r (
              SimArrayParams_DoorArray_Default_traits::create (i, f, this));

            this->SimArrayParams_DoorArray_Default_.push_back (r);
            continue;
          }

          // SimArrayParams_PanelArrayParams_Default
          //
          if (n.name () == "SimArrayParams_PanelArrayParams_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_PanelArrayParams_Default_type > r (
              SimArrayParams_PanelArrayParams_Default_traits::create (i, f, this));

            this->SimArrayParams_PanelArrayParams_Default_.push_back (r);
            continue;
          }

          // SimArrayParams_SolarShadeArray_Default
          //
          if (n.name () == "SimArrayParams_SolarShadeArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_SolarShadeArray_Default_type > r (
              SimArrayParams_SolarShadeArray_Default_traits::create (i, f, this));

            this->SimArrayParams_SolarShadeArray_Default_.push_back (r);
            continue;
          }

          // SimArrayParams_WindowArray_Default
          //
          if (n.name () == "SimArrayParams_WindowArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimArrayParams_WindowArray_Default_type > r (
              SimArrayParams_WindowArray_Default_traits::create (i, f, this));

            this->SimArrayParams_WindowArray_Default_.push_back (r);
            continue;
          }

          // SimBeam_Default_Default
          //
          if (n.name () == "SimBeam_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBeam_Default_Default_type > r (
              SimBeam_Default_Default_traits::create (i, f, this));

            this->SimBeam_Default_Default_.push_back (r);
            continue;
          }

          // SimBeamParams_Beam_Default
          //
          if (n.name () == "SimBeamParams_Beam_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBeamParams_Beam_Default_type > r (
              SimBeamParams_Beam_Default_traits::create (i, f, this));

            this->SimBeamParams_Beam_Default_.push_back (r);
            continue;
          }

          // SimBeamType_Beam_Default
          //
          if (n.name () == "SimBeamType_Beam_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBeamType_Beam_Default_type > r (
              SimBeamType_Beam_Default_traits::create (i, f, this));

            this->SimBeamType_Beam_Default_.push_back (r);
            continue;
          }

          // SimBldgElementArrayParams_BldgElementArray_Beam
          //
          if (n.name () == "SimBldgElementArrayParams_BldgElementArray_Beam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementArrayParams_BldgElementArray_Beam_type > r (
              SimBldgElementArrayParams_BldgElementArray_Beam_traits::create (i, f, this));

            this->SimBldgElementArrayParams_BldgElementArray_Beam_.push_back (r);
            continue;
          }

          // SimBldgElementArrayParams_BldgElementArray_Column
          //
          if (n.name () == "SimBldgElementArrayParams_BldgElementArray_Column" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementArrayParams_BldgElementArray_Column_type > r (
              SimBldgElementArrayParams_BldgElementArray_Column_traits::create (i, f, this));

            this->SimBldgElementArrayParams_BldgElementArray_Column_.push_back (r);
            continue;
          }

          // SimBldgElementArrayParams_BldgElementArray_Default
          //
          if (n.name () == "SimBldgElementArrayParams_BldgElementArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementArrayParams_BldgElementArray_Default_type > r (
              SimBldgElementArrayParams_BldgElementArray_Default_traits::create (i, f, this));

            this->SimBldgElementArrayParams_BldgElementArray_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_BldgElementProxy_Default
          //
          if (n.name () == "SimBldgElementType_BldgElementProxy_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_BldgElementProxy_Default_type > r (
              SimBldgElementType_BldgElementProxy_Default_traits::create (i, f, this));

            this->SimBldgElementType_BldgElementProxy_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_Default_Default
          //
          if (n.name () == "SimBldgElementType_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_Default_Default_type > r (
              SimBldgElementType_Default_Default_traits::create (i, f, this));

            this->SimBldgElementType_Default_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_ElectricalTerminal_Default
          //
          if (n.name () == "SimBldgElementType_ElectricalTerminal_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_ElectricalTerminal_Default_type > r (
              SimBldgElementType_ElectricalTerminal_Default_traits::create (i, f, this));

            this->SimBldgElementType_ElectricalTerminal_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_HumanTransport_Default
          //
          if (n.name () == "SimBldgElementType_HumanTransport_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_HumanTransport_Default_type > r (
              SimBldgElementType_HumanTransport_Default_traits::create (i, f, this));

            this->SimBldgElementType_HumanTransport_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_PlumbingFixture_Default
          //
          if (n.name () == "SimBldgElementType_PlumbingFixture_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_PlumbingFixture_Default_type > r (
              SimBldgElementType_PlumbingFixture_Default_traits::create (i, f, this));

            this->SimBldgElementType_PlumbingFixture_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_Railing_Default
          //
          if (n.name () == "SimBldgElementType_Railing_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_Railing_Default_type > r (
              SimBldgElementType_Railing_Default_traits::create (i, f, this));

            this->SimBldgElementType_Railing_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_Ramp_Default
          //
          if (n.name () == "SimBldgElementType_Ramp_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_Ramp_Default_type > r (
              SimBldgElementType_Ramp_Default_traits::create (i, f, this));

            this->SimBldgElementType_Ramp_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_RampFlight_Default
          //
          if (n.name () == "SimBldgElementType_RampFlight_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_RampFlight_Default_type > r (
              SimBldgElementType_RampFlight_Default_traits::create (i, f, this));

            this->SimBldgElementType_RampFlight_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_Stair_Default
          //
          if (n.name () == "SimBldgElementType_Stair_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_Stair_Default_type > r (
              SimBldgElementType_Stair_Default_traits::create (i, f, this));

            this->SimBldgElementType_Stair_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_StairFlight_Default
          //
          if (n.name () == "SimBldgElementType_StairFlight_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_StairFlight_Default_type > r (
              SimBldgElementType_StairFlight_Default_traits::create (i, f, this));

            this->SimBldgElementType_StairFlight_Default_.push_back (r);
            continue;
          }

          // SimBldgElementType_VirtualElement_Default
          //
          if (n.name () == "SimBldgElementType_VirtualElement_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgElementType_VirtualElement_Default_type > r (
              SimBldgElementType_VirtualElement_Default_traits::create (i, f, this));

            this->SimBldgElementType_VirtualElement_Default_.push_back (r);
            continue;
          }

          // SimBldgParams_Building_Default
          //
          if (n.name () == "SimBldgParams_Building_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgParams_Building_Default_type > r (
              SimBldgParams_Building_Default_traits::create (i, f, this));

            this->SimBldgParams_Building_Default_.push_back (r);
            continue;
          }

          // SimBldgSiteParams_BuildingSite_Default
          //
          if (n.name () == "SimBldgSiteParams_BuildingSite_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgSiteParams_BuildingSite_Default_type > r (
              SimBldgSiteParams_BuildingSite_Default_traits::create (i, f, this));

            this->SimBldgSiteParams_BuildingSite_Default_.push_back (r);
            continue;
          }

          // SimBldgStoryParams_BuildingStory_Default
          //
          if (n.name () == "SimBldgStoryParams_BuildingStory_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgStoryParams_BuildingStory_Default_type > r (
              SimBldgStoryParams_BuildingStory_Default_traits::create (i, f, this));

            this->SimBldgStoryParams_BuildingStory_Default_.push_back (r);
            continue;
          }

          // SimBldgStoryType_BuildingStory_Default
          //
          if (n.name () == "SimBldgStoryType_BuildingStory_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBldgStoryType_BuildingStory_Default_type > r (
              SimBldgStoryType_BuildingStory_Default_traits::create (i, f, this));

            this->SimBldgStoryType_BuildingStory_Default_.push_back (r);
            continue;
          }

          // SimBuilding_AdjacentBuilding_Default
          //
          if (n.name () == "SimBuilding_AdjacentBuilding_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuilding_AdjacentBuilding_Default_type > r (
              SimBuilding_AdjacentBuilding_Default_traits::create (i, f, this));

            this->SimBuilding_AdjacentBuilding_Default_.push_back (r);
            continue;
          }

          // SimBuilding_Building_Default
          //
          if (n.name () == "SimBuilding_Building_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuilding_Building_Default_type > r (
              SimBuilding_Building_Default_traits::create (i, f, this));

            this->SimBuilding_Building_Default_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_Default_Default
          //
          if (n.name () == "SimBuildingElementProxy_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_Default_Default_type > r (
              SimBuildingElementProxy_Default_Default_traits::create (i, f, this));

            this->SimBuildingElementProxy_Default_Default_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_SiteContextElement_BuildingShading
          //
          if (n.name () == "SimBuildingElementProxy_SiteContextElement_BuildingShading" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_SiteContextElement_BuildingShading_type > r (
              SimBuildingElementProxy_SiteContextElement_BuildingShading_traits::create (i, f, this));

            this->SimBuildingElementProxy_SiteContextElement_BuildingShading_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed
          //
          if (n.name () == "SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_type > r (
              SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_traits::create (i, f, this));

            this->SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_SiteContextElement_Default
          //
          if (n.name () == "SimBuildingElementProxy_SiteContextElement_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_SiteContextElement_Default_type > r (
              SimBuildingElementProxy_SiteContextElement_Default_traits::create (i, f, this));

            this->SimBuildingElementProxy_SiteContextElement_Default_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_SiteContextElement_GroundPlane
          //
          if (n.name () == "SimBuildingElementProxy_SiteContextElement_GroundPlane" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_SiteContextElement_GroundPlane_type > r (
              SimBuildingElementProxy_SiteContextElement_GroundPlane_traits::create (i, f, this));

            this->SimBuildingElementProxy_SiteContextElement_GroundPlane_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_SiteContextElement_SiteShading
          //
          if (n.name () == "SimBuildingElementProxy_SiteContextElement_SiteShading" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_SiteContextElement_SiteShading_type > r (
              SimBuildingElementProxy_SiteContextElement_SiteShading_traits::create (i, f, this));

            this->SimBuildingElementProxy_SiteContextElement_SiteShading_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed
          //
          if (n.name () == "SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_type > r (
              SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_traits::create (i, f, this));

            this->SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_.push_back (r);
            continue;
          }

          // SimBuildingElementProxy_ThermalMass_Default
          //
          if (n.name () == "SimBuildingElementProxy_ThermalMass_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingElementProxy_ThermalMass_Default_type > r (
              SimBuildingElementProxy_ThermalMass_Default_traits::create (i, f, this));

            this->SimBuildingElementProxy_ThermalMass_Default_.push_back (r);
            continue;
          }

          // SimBuildingStory_BuildingStory_Default
          //
          if (n.name () == "SimBuildingStory_BuildingStory_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingStory_BuildingStory_Default_type > r (
              SimBuildingStory_BuildingStory_Default_traits::create (i, f, this));

            this->SimBuildingStory_BuildingStory_Default_.push_back (r);
            continue;
          }

          // SimBuildingType_Building_Default
          //
          if (n.name () == "SimBuildingType_Building_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimBuildingType_Building_Default_type > r (
              SimBuildingType_Building_Default_traits::create (i, f, this));

            this->SimBuildingType_Building_Default_.push_back (r);
            continue;
          }

          // SimCalendarDate_Default_Default
          //
          if (n.name () == "SimCalendarDate_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCalendarDate_Default_Default_type > r (
              SimCalendarDate_Default_Default_traits::create (i, f, this));

            this->SimCalendarDate_Default_Default_.push_back (r);
            continue;
          }

          // SimCartesianTransformOperator_2D_NonUniform
          //
          if (n.name () == "SimCartesianTransformOperator_2D_NonUniform" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCartesianTransformOperator_2D_NonUniform_type > r (
              SimCartesianTransformOperator_2D_NonUniform_traits::create (i, f, this));

            this->SimCartesianTransformOperator_2D_NonUniform_.push_back (r);
            continue;
          }

          // SimCartesianTransformOperator_2D_Uniform
          //
          if (n.name () == "SimCartesianTransformOperator_2D_Uniform" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCartesianTransformOperator_2D_Uniform_type > r (
              SimCartesianTransformOperator_2D_Uniform_traits::create (i, f, this));

            this->SimCartesianTransformOperator_2D_Uniform_.push_back (r);
            continue;
          }

          // SimCartesianTransformOperator_3D_NonUniform
          //
          if (n.name () == "SimCartesianTransformOperator_3D_NonUniform" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCartesianTransformOperator_3D_NonUniform_type > r (
              SimCartesianTransformOperator_3D_NonUniform_traits::create (i, f, this));

            this->SimCartesianTransformOperator_3D_NonUniform_.push_back (r);
            continue;
          }

          // SimCartesianTransformOperator_3D_Uniform
          //
          if (n.name () == "SimCartesianTransformOperator_3D_Uniform" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCartesianTransformOperator_3D_Uniform_type > r (
              SimCartesianTransformOperator_3D_Uniform_traits::create (i, f, this));

            this->SimCartesianTransformOperator_3D_Uniform_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_BuildingElementClassification
          //
          if (n.name () == "SimClassification_ClassificationReference_BuildingElementClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_BuildingElementClassification_type > r (
              SimClassification_ClassificationReference_BuildingElementClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_BuildingElementClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_ConstructionEntityByFunction
          //
          if (n.name () == "SimClassification_ClassificationReference_ConstructionEntityByFunction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_ConstructionEntityByFunction_type > r (
              SimClassification_ClassificationReference_ConstructionEntityByFunction_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_ConstructionEntityByFunction_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_Default
          //
          if (n.name () == "SimClassification_ClassificationReference_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_Default_type > r (
              SimClassification_ClassificationReference_Default_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_Default_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_OrganizationalBillingID
          //
          if (n.name () == "SimClassification_ClassificationReference_OrganizationalBillingID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_OrganizationalBillingID_type > r (
              SimClassification_ClassificationReference_OrganizationalBillingID_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_OrganizationalBillingID_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_OrganizationalID
          //
          if (n.name () == "SimClassification_ClassificationReference_OrganizationalID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_OrganizationalID_type > r (
              SimClassification_ClassificationReference_OrganizationalID_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_OrganizationalID_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpaceByFunction
          //
          if (n.name () == "SimClassification_ClassificationReference_SpaceByFunction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpaceByFunction_type > r (
              SimClassification_ClassificationReference_SpaceByFunction_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpaceByFunction_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpaceCategoryBoma
          //
          if (n.name () == "SimClassification_ClassificationReference_SpaceCategoryBoma" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpaceCategoryBoma_type > r (
              SimClassification_ClassificationReference_SpaceCategoryBoma_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpaceCategoryBoma_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpaceCategoryOwner
          //
          if (n.name () == "SimClassification_ClassificationReference_SpaceCategoryOwner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpaceCategoryOwner_type > r (
              SimClassification_ClassificationReference_SpaceCategoryOwner_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpaceCategoryOwner_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpaceTypeOwner
          //
          if (n.name () == "SimClassification_ClassificationReference_SpaceTypeOwner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpaceTypeOwner_type > r (
              SimClassification_ClassificationReference_SpaceTypeOwner_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpaceTypeOwner_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpatialZoneEnergyType
          //
          if (n.name () == "SimClassification_ClassificationReference_SpatialZoneEnergyType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpatialZoneEnergyType_type > r (
              SimClassification_ClassificationReference_SpatialZoneEnergyType_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpatialZoneEnergyType_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpatialZoneSecurityLevel
          //
          if (n.name () == "SimClassification_ClassificationReference_SpatialZoneSecurityLevel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpatialZoneSecurityLevel_type > r (
              SimClassification_ClassificationReference_SpatialZoneSecurityLevel_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpatialZoneSecurityLevel_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SpatialZoneType
          //
          if (n.name () == "SimClassification_ClassificationReference_SpatialZoneType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SpatialZoneType_type > r (
              SimClassification_ClassificationReference_SpatialZoneType_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SpatialZoneType_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationReference_SubOrganizationalID
          //
          if (n.name () == "SimClassification_ClassificationReference_SubOrganizationalID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationReference_SubOrganizationalID_type > r (
              SimClassification_ClassificationReference_SubOrganizationalID_traits::create (i, f, this));

            this->SimClassification_ClassificationReference_SubOrganizationalID_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_BomaSpaceCategoryClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_BomaSpaceCategoryClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_type > r (
              SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_Default
          //
          if (n.name () == "SimClassification_ClassificationSystem_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_Default_type > r (
              SimClassification_ClassificationSystem_Default_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_Default_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_MasterFormat
          //
          if (n.name () == "SimClassification_ClassificationSystem_MasterFormat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_MasterFormat_type > r (
              SimClassification_ClassificationSystem_MasterFormat_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_MasterFormat_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OmniClass
          //
          if (n.name () == "SimClassification_ClassificationSystem_OmniClass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OmniClass_type > r (
              SimClassification_ClassificationSystem_OmniClass_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OmniClass_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OwnerOrganizationalClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_OwnerOrganizationalClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OwnerOrganizationalClassification_type > r (
              SimClassification_ClassificationSystem_OwnerOrganizationalClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OwnerOrganizationalClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OwnerSecurityLevelClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_OwnerSecurityLevelClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_type > r (
              SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_type > r (
              SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_type > r (
              SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OwnerSpaceTypeClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_OwnerSpaceTypeClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_type > r (
              SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_OwnerZoneTypeClassification
          //
          if (n.name () == "SimClassification_ClassificationSystem_OwnerZoneTypeClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_OwnerZoneTypeClassification_type > r (
              SimClassification_ClassificationSystem_OwnerZoneTypeClassification_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_OwnerZoneTypeClassification_.push_back (r);
            continue;
          }

          // SimClassification_ClassificationSystem_Uniformat
          //
          if (n.name () == "SimClassification_ClassificationSystem_Uniformat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimClassification_ClassificationSystem_Uniformat_type > r (
              SimClassification_ClassificationSystem_Uniformat_traits::create (i, f, this));

            this->SimClassification_ClassificationSystem_Uniformat_.push_back (r);
            continue;
          }

          // SimColumn_Embedded_Default
          //
          if (n.name () == "SimColumn_Embedded_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimColumn_Embedded_Default_type > r (
              SimColumn_Embedded_Default_traits::create (i, f, this));

            this->SimColumn_Embedded_Default_.push_back (r);
            continue;
          }

          // SimColumn_Freestanding_Default
          //
          if (n.name () == "SimColumn_Freestanding_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimColumn_Freestanding_Default_type > r (
              SimColumn_Freestanding_Default_traits::create (i, f, this));

            this->SimColumn_Freestanding_Default_.push_back (r);
            continue;
          }

          // SimColumnParams_Column_Default
          //
          if (n.name () == "SimColumnParams_Column_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimColumnParams_Column_Default_type > r (
              SimColumnParams_Column_Default_traits::create (i, f, this));

            this->SimColumnParams_Column_Default_.push_back (r);
            continue;
          }

          // SimColumnType_Column_Default
          //
          if (n.name () == "SimColumnType_Column_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimColumnType_Column_Default_type > r (
              SimColumnType_Column_Default_traits::create (i, f, this));

            this->SimColumnType_Column_Default_.push_back (r);
            continue;
          }

          // SimComplexProperty_ComplexProp_Default
          //
          if (n.name () == "SimComplexProperty_ComplexProp_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimComplexProperty_ComplexProp_Default_type > r (
              SimComplexProperty_ComplexProp_Default_traits::create (i, f, this));

            this->SimComplexProperty_ComplexProp_Default_.push_back (r);
            continue;
          }

          // SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default
          //
          if (n.name () == "SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_type > r (
              SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_traits::create (i, f, this));

            this->SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_.push_back (r);
            continue;
          }

          // SimCompositeProfileDef_CompositeProfile_Default
          //
          if (n.name () == "SimCompositeProfileDef_CompositeProfile_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCompositeProfileDef_CompositeProfile_Default_type > r (
              SimCompositeProfileDef_CompositeProfile_Default_traits::create (i, f, this));

            this->SimCompositeProfileDef_CompositeProfile_Default_.push_back (r);
            continue;
          }

          // SimConnectCurveGeom_Curve_Default
          //
          if (n.name () == "SimConnectCurveGeom_Curve_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectCurveGeom_Curve_Default_type > r (
              SimConnectCurveGeom_Curve_Default_traits::create (i, f, this));

            this->SimConnectCurveGeom_Curve_Default_.push_back (r);
            continue;
          }

          // SimConnectedFaceSet_ConnectedFaceSet_ClosedShell
          //
          if (n.name () == "SimConnectedFaceSet_ConnectedFaceSet_ClosedShell" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_type > r (
              SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_traits::create (i, f, this));

            this->SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_.push_back (r);
            continue;
          }

          // SimConnectedFaceSet_ConnectedFaceSet_Default
          //
          if (n.name () == "SimConnectedFaceSet_ConnectedFaceSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectedFaceSet_ConnectedFaceSet_Default_type > r (
              SimConnectedFaceSet_ConnectedFaceSet_Default_traits::create (i, f, this));

            this->SimConnectedFaceSet_ConnectedFaceSet_Default_.push_back (r);
            continue;
          }

          // SimConnectedFaceSet_ConnectedFaceSet_OpenShell
          //
          if (n.name () == "SimConnectedFaceSet_ConnectedFaceSet_OpenShell" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectedFaceSet_ConnectedFaceSet_OpenShell_type > r (
              SimConnectedFaceSet_ConnectedFaceSet_OpenShell_traits::create (i, f, this));

            this->SimConnectedFaceSet_ConnectedFaceSet_OpenShell_.push_back (r);
            continue;
          }

          // SimConnection_AirFlow_CrossSystem
          //
          if (n.name () == "SimConnection_AirFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_AirFlow_CrossSystem_type > r (
              SimConnection_AirFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_AirFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_AirFlow_Default
          //
          if (n.name () == "SimConnection_AirFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_AirFlow_Default_type > r (
              SimConnection_AirFlow_Default_traits::create (i, f, this));

            this->SimConnection_AirFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_AirFlow_Linkage
          //
          if (n.name () == "SimConnection_AirFlow_Linkage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_AirFlow_Linkage_type > r (
              SimConnection_AirFlow_Linkage_traits::create (i, f, this));

            this->SimConnection_AirFlow_Linkage_.push_back (r);
            continue;
          }

          // SimConnection_AirFlowNetwork_Default
          //
          if (n.name () == "SimConnection_AirFlowNetwork_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_AirFlowNetwork_Default_type > r (
              SimConnection_AirFlowNetwork_Default_traits::create (i, f, this));

            this->SimConnection_AirFlowNetwork_Default_.push_back (r);
            continue;
          }

          // SimConnection_ChilledWaterFlow_CrossSystem
          //
          if (n.name () == "SimConnection_ChilledWaterFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ChilledWaterFlow_CrossSystem_type > r (
              SimConnection_ChilledWaterFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_ChilledWaterFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_ChilledWaterFlow_Default
          //
          if (n.name () == "SimConnection_ChilledWaterFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ChilledWaterFlow_Default_type > r (
              SimConnection_ChilledWaterFlow_Default_traits::create (i, f, this));

            this->SimConnection_ChilledWaterFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_CondenserFlow_CrossSystem
          //
          if (n.name () == "SimConnection_CondenserFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_CondenserFlow_CrossSystem_type > r (
              SimConnection_CondenserFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_CondenserFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_CondenserFlow_Default
          //
          if (n.name () == "SimConnection_CondenserFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_CondenserFlow_Default_type > r (
              SimConnection_CondenserFlow_Default_traits::create (i, f, this));

            this->SimConnection_CondenserFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_Default_Default
          //
          if (n.name () == "SimConnection_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_Default_Default_type > r (
              SimConnection_Default_Default_traits::create (i, f, this));

            this->SimConnection_Default_Default_.push_back (r);
            continue;
          }

          // SimConnection_DigitalControl_Default
          //
          if (n.name () == "SimConnection_DigitalControl_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_DigitalControl_Default_type > r (
              SimConnection_DigitalControl_Default_traits::create (i, f, this));

            this->SimConnection_DigitalControl_Default_.push_back (r);
            continue;
          }

          // SimConnection_Docking_Default
          //
          if (n.name () == "SimConnection_Docking_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_Docking_Default_type > r (
              SimConnection_Docking_Default_traits::create (i, f, this));

            this->SimConnection_Docking_Default_.push_back (r);
            continue;
          }

          // SimConnection_ElectricalPowerFlow_Default
          //
          if (n.name () == "SimConnection_ElectricalPowerFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ElectricalPowerFlow_Default_type > r (
              SimConnection_ElectricalPowerFlow_Default_traits::create (i, f, this));

            this->SimConnection_ElectricalPowerFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_HotWaterFlow_CrossSystem
          //
          if (n.name () == "SimConnection_HotWaterFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_HotWaterFlow_CrossSystem_type > r (
              SimConnection_HotWaterFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_HotWaterFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_HotWaterFlow_Default
          //
          if (n.name () == "SimConnection_HotWaterFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_HotWaterFlow_Default_type > r (
              SimConnection_HotWaterFlow_Default_traits::create (i, f, this));

            this->SimConnection_HotWaterFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_MixedWaterFlow_CrossSystem
          //
          if (n.name () == "SimConnection_MixedWaterFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_MixedWaterFlow_CrossSystem_type > r (
              SimConnection_MixedWaterFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_MixedWaterFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_MixedWaterFlow_Default
          //
          if (n.name () == "SimConnection_MixedWaterFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_MixedWaterFlow_Default_type > r (
              SimConnection_MixedWaterFlow_Default_traits::create (i, f, this));

            this->SimConnection_MixedWaterFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_RefrigerantFlow_Default
          //
          if (n.name () == "SimConnection_RefrigerantFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_RefrigerantFlow_Default_type > r (
              SimConnection_RefrigerantFlow_Default_traits::create (i, f, this));

            this->SimConnection_RefrigerantFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_ServiceHotWaterFlow_CrossSystem
          //
          if (n.name () == "SimConnection_ServiceHotWaterFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ServiceHotWaterFlow_CrossSystem_type > r (
              SimConnection_ServiceHotWaterFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_ServiceHotWaterFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_ServiceHotWaterFlow_Default
          //
          if (n.name () == "SimConnection_ServiceHotWaterFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ServiceHotWaterFlow_Default_type > r (
              SimConnection_ServiceHotWaterFlow_Default_traits::create (i, f, this));

            this->SimConnection_ServiceHotWaterFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_SteamFlow_CrossSystem
          //
          if (n.name () == "SimConnection_SteamFlow_CrossSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_SteamFlow_CrossSystem_type > r (
              SimConnection_SteamFlow_CrossSystem_traits::create (i, f, this));

            this->SimConnection_SteamFlow_CrossSystem_.push_back (r);
            continue;
          }

          // SimConnection_SteamFlow_Default
          //
          if (n.name () == "SimConnection_SteamFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_SteamFlow_Default_type > r (
              SimConnection_SteamFlow_Default_traits::create (i, f, this));

            this->SimConnection_SteamFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_VarRefrigerantFlow_Default
          //
          if (n.name () == "SimConnection_VarRefrigerantFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_VarRefrigerantFlow_Default_type > r (
              SimConnection_VarRefrigerantFlow_Default_traits::create (i, f, this));

            this->SimConnection_VarRefrigerantFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_ZoneAirFlow_Default
          //
          if (n.name () == "SimConnection_ZoneAirFlow_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ZoneAirFlow_Default_type > r (
              SimConnection_ZoneAirFlow_Default_traits::create (i, f, this));

            this->SimConnection_ZoneAirFlow_Default_.push_back (r);
            continue;
          }

          // SimConnection_ZoneAirFlow_ZoneCrossMixing
          //
          if (n.name () == "SimConnection_ZoneAirFlow_ZoneCrossMixing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ZoneAirFlow_ZoneCrossMixing_type > r (
              SimConnection_ZoneAirFlow_ZoneCrossMixing_traits::create (i, f, this));

            this->SimConnection_ZoneAirFlow_ZoneCrossMixing_.push_back (r);
            continue;
          }

          // SimConnection_ZoneAirFlow_ZoneMixing
          //
          if (n.name () == "SimConnection_ZoneAirFlow_ZoneMixing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnection_ZoneAirFlow_ZoneMixing_type > r (
              SimConnection_ZoneAirFlow_ZoneMixing_traits::create (i, f, this));

            this->SimConnection_ZoneAirFlow_ZoneMixing_.push_back (r);
            continue;
          }

          // SimConnectPointGeom_Point_Default
          //
          if (n.name () == "SimConnectPointGeom_Point_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectPointGeom_Point_Default_type > r (
              SimConnectPointGeom_Point_Default_traits::create (i, f, this));

            this->SimConnectPointGeom_Point_Default_.push_back (r);
            continue;
          }

          // SimConnectPortGeom_Port_Default
          //
          if (n.name () == "SimConnectPortGeom_Port_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectPortGeom_Port_Default_type > r (
              SimConnectPortGeom_Port_Default_traits::create (i, f, this));

            this->SimConnectPortGeom_Port_Default_.push_back (r);
            continue;
          }

          // SimConnectSurfaceGeom_Surface_Default
          //
          if (n.name () == "SimConnectSurfaceGeom_Surface_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimConnectSurfaceGeom_Surface_Default_type > r (
              SimConnectSurfaceGeom_Surface_Default_traits::create (i, f, this));

            this->SimConnectSurfaceGeom_Surface_Default_.push_back (r);
            continue;
          }

          // SimController_AvailabilityManager_AirLoop
          //
          if (n.name () == "SimController_AvailabilityManager_AirLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_AvailabilityManager_AirLoop_type > r (
              SimController_AvailabilityManager_AirLoop_traits::create (i, f, this));

            this->SimController_AvailabilityManager_AirLoop_.push_back (r);
            continue;
          }

          // SimController_AvailabilityManager_PlantLoop
          //
          if (n.name () == "SimController_AvailabilityManager_PlantLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_AvailabilityManager_PlantLoop_type > r (
              SimController_AvailabilityManager_PlantLoop_traits::create (i, f, this));

            this->SimController_AvailabilityManager_PlantLoop_.push_back (r);
            continue;
          }

          // SimController_Daylighting_DELight
          //
          if (n.name () == "SimController_Daylighting_DELight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Daylighting_DELight_type > r (
              SimController_Daylighting_DELight_traits::create (i, f, this));

            this->SimController_Daylighting_DELight_.push_back (r);
            continue;
          }

          // SimController_Daylighting_Skylights
          //
          if (n.name () == "SimController_Daylighting_Skylights" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Daylighting_Skylights_type > r (
              SimController_Daylighting_Skylights_traits::create (i, f, this));

            this->SimController_Daylighting_Skylights_.push_back (r);
            continue;
          }

          // SimController_Daylighting_Standard
          //
          if (n.name () == "SimController_Daylighting_Standard" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Daylighting_Standard_type > r (
              SimController_Daylighting_Standard_traits::create (i, f, this));

            this->SimController_Daylighting_Standard_.push_back (r);
            continue;
          }

          // SimController_Daylighting_Windows
          //
          if (n.name () == "SimController_Daylighting_Windows" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Daylighting_Windows_type > r (
              SimController_Daylighting_Windows_traits::create (i, f, this));

            this->SimController_Daylighting_Windows_.push_back (r);
            continue;
          }

          // SimController_Default_Default
          //
          if (n.name () == "SimController_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Default_Default_type > r (
              SimController_Default_Default_traits::create (i, f, this));

            this->SimController_Default_Default_.push_back (r);
            continue;
          }

          // SimController_DemandManager_AirLoop
          //
          if (n.name () == "SimController_DemandManager_AirLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_DemandManager_AirLoop_type > r (
              SimController_DemandManager_AirLoop_traits::create (i, f, this));

            this->SimController_DemandManager_AirLoop_.push_back (r);
            continue;
          }

          // SimController_LightingControl_Continuous
          //
          if (n.name () == "SimController_LightingControl_Continuous" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_LightingControl_Continuous_type > r (
              SimController_LightingControl_Continuous_traits::create (i, f, this));

            this->SimController_LightingControl_Continuous_.push_back (r);
            continue;
          }

          // SimController_LightingControl_ContinuousOff
          //
          if (n.name () == "SimController_LightingControl_ContinuousOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_LightingControl_ContinuousOff_type > r (
              SimController_LightingControl_ContinuousOff_traits::create (i, f, this));

            this->SimController_LightingControl_ContinuousOff_.push_back (r);
            continue;
          }

          // SimController_LightingControl_MotionSensor
          //
          if (n.name () == "SimController_LightingControl_MotionSensor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_LightingControl_MotionSensor_type > r (
              SimController_LightingControl_MotionSensor_traits::create (i, f, this));

            this->SimController_LightingControl_MotionSensor_.push_back (r);
            continue;
          }

          // SimController_LightingControl_On_Off
          //
          if (n.name () == "SimController_LightingControl_On_Off" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_LightingControl_On_Off_type > r (
              SimController_LightingControl_On_Off_traits::create (i, f, this));

            this->SimController_LightingControl_On_Off_.push_back (r);
            continue;
          }

          // SimController_LightingControl_Stepped
          //
          if (n.name () == "SimController_LightingControl_Stepped" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_LightingControl_Stepped_type > r (
              SimController_LightingControl_Stepped_traits::create (i, f, this));

            this->SimController_LightingControl_Stepped_.push_back (r);
            continue;
          }

          // SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation
          //
          if (n.name () == "SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_type > r (
              SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_traits::create (i, f, this));

            this->SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_.push_back (r);
            continue;
          }

          // SimController_OperationManager_CondenserLoop
          //
          if (n.name () == "SimController_OperationManager_CondenserLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_OperationManager_CondenserLoop_type > r (
              SimController_OperationManager_CondenserLoop_traits::create (i, f, this));

            this->SimController_OperationManager_CondenserLoop_.push_back (r);
            continue;
          }

          // SimController_OperationManager_PlantLoop
          //
          if (n.name () == "SimController_OperationManager_PlantLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_OperationManager_PlantLoop_type > r (
              SimController_OperationManager_PlantLoop_traits::create (i, f, this));

            this->SimController_OperationManager_PlantLoop_.push_back (r);
            continue;
          }

          // SimController_OutdoorAir_EconomizerControl
          //
          if (n.name () == "SimController_OutdoorAir_EconomizerControl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_OutdoorAir_EconomizerControl_type > r (
              SimController_OutdoorAir_EconomizerControl_traits::create (i, f, this));

            this->SimController_OutdoorAir_EconomizerControl_.push_back (r);
            continue;
          }

          // SimController_OutdoorAir_EconomizerWithDemandControlledVentilation
          //
          if (n.name () == "SimController_OutdoorAir_EconomizerWithDemandControlledVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_type > r (
              SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_traits::create (i, f, this));

            this->SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_.push_back (r);
            continue;
          }

          // SimController_OutdoorAir_OutdoorAirPreconditioningController
          //
          if (n.name () == "SimController_OutdoorAir_OutdoorAirPreconditioningController" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_OutdoorAir_OutdoorAirPreconditioningController_type > r (
              SimController_OutdoorAir_OutdoorAirPreconditioningController_traits::create (i, f, this));

            this->SimController_OutdoorAir_OutdoorAirPreconditioningController_.push_back (r);
            continue;
          }

          // SimController_Programmable_Default
          //
          if (n.name () == "SimController_Programmable_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Programmable_Default_type > r (
              SimController_Programmable_Default_traits::create (i, f, this));

            this->SimController_Programmable_Default_.push_back (r);
            continue;
          }

          // SimController_ShadingControl_Heating_CoolingLoads
          //
          if (n.name () == "SimController_ShadingControl_Heating_CoolingLoads" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ShadingControl_Heating_CoolingLoads_type > r (
              SimController_ShadingControl_Heating_CoolingLoads_traits::create (i, f, this));

            this->SimController_ShadingControl_Heating_CoolingLoads_.push_back (r);
            continue;
          }

          // SimController_ShadingControl_On_Off
          //
          if (n.name () == "SimController_ShadingControl_On_Off" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ShadingControl_On_Off_type > r (
              SimController_ShadingControl_On_Off_traits::create (i, f, this));

            this->SimController_ShadingControl_On_Off_.push_back (r);
            continue;
          }

          // SimController_ShadingControl_WindowTemp_Solar
          //
          if (n.name () == "SimController_ShadingControl_WindowTemp_Solar" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ShadingControl_WindowTemp_Solar_type > r (
              SimController_ShadingControl_WindowTemp_Solar_traits::create (i, f, this));

            this->SimController_ShadingControl_WindowTemp_Solar_.push_back (r);
            continue;
          }

          // SimController_SupplyAir_Humidity
          //
          if (n.name () == "SimController_SupplyAir_Humidity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_SupplyAir_Humidity_type > r (
              SimController_SupplyAir_Humidity_traits::create (i, f, this));

            this->SimController_SupplyAir_Humidity_.push_back (r);
            continue;
          }

          // SimController_SupplyAir_Temperature
          //
          if (n.name () == "SimController_SupplyAir_Temperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_SupplyAir_Temperature_type > r (
              SimController_SupplyAir_Temperature_traits::create (i, f, this));

            this->SimController_SupplyAir_Temperature_.push_back (r);
            continue;
          }

          // SimController_SupplyWater_Temperature
          //
          if (n.name () == "SimController_SupplyWater_Temperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_SupplyWater_Temperature_type > r (
              SimController_SupplyWater_Temperature_traits::create (i, f, this));

            this->SimController_SupplyWater_Temperature_.push_back (r);
            continue;
          }

          // SimController_ThermalStorage_ThermalEnergyStorageTank
          //
          if (n.name () == "SimController_ThermalStorage_ThermalEnergyStorageTank" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ThermalStorage_ThermalEnergyStorageTank_type > r (
              SimController_ThermalStorage_ThermalEnergyStorageTank_traits::create (i, f, this));

            this->SimController_ThermalStorage_ThermalEnergyStorageTank_.push_back (r);
            continue;
          }

          // SimController_Ventilation_ContaminantControl
          //
          if (n.name () == "SimController_Ventilation_ContaminantControl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_Ventilation_ContaminantControl_type > r (
              SimController_Ventilation_ContaminantControl_traits::create (i, f, this));

            this->SimController_Ventilation_ContaminantControl_.push_back (r);
            continue;
          }

          // SimController_WaterCoil_Default
          //
          if (n.name () == "SimController_WaterCoil_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_WaterCoil_Default_type > r (
              SimController_WaterCoil_Default_traits::create (i, f, this));

            this->SimController_WaterCoil_Default_.push_back (r);
            continue;
          }

          // SimController_ZoneControlHumidity_Humidistat
          //
          if (n.name () == "SimController_ZoneControlHumidity_Humidistat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlHumidity_Humidistat_type > r (
              SimController_ZoneControlHumidity_Humidistat_traits::create (i, f, this));

            this->SimController_ZoneControlHumidity_Humidistat_.push_back (r);
            continue;
          }

          // SimController_ZoneControlHumidity_Humidistat1Zone
          //
          if (n.name () == "SimController_ZoneControlHumidity_Humidistat1Zone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlHumidity_Humidistat1Zone_type > r (
              SimController_ZoneControlHumidity_Humidistat1Zone_traits::create (i, f, this));

            this->SimController_ZoneControlHumidity_Humidistat1Zone_.push_back (r);
            continue;
          }

          // SimController_ZoneControlTemperature_Thermostat
          //
          if (n.name () == "SimController_ZoneControlTemperature_Thermostat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlTemperature_Thermostat_type > r (
              SimController_ZoneControlTemperature_Thermostat_traits::create (i, f, this));

            this->SimController_ZoneControlTemperature_Thermostat_.push_back (r);
            continue;
          }

          // SimController_ZoneControlTemperature_Thermostat1Zone
          //
          if (n.name () == "SimController_ZoneControlTemperature_Thermostat1Zone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlTemperature_Thermostat1Zone_type > r (
              SimController_ZoneControlTemperature_Thermostat1Zone_traits::create (i, f, this));

            this->SimController_ZoneControlTemperature_Thermostat1Zone_.push_back (r);
            continue;
          }

          // SimController_ZoneControlTemperature_ThermostatStagedDual
          //
          if (n.name () == "SimController_ZoneControlTemperature_ThermostatStagedDual" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlTemperature_ThermostatStagedDual_type > r (
              SimController_ZoneControlTemperature_ThermostatStagedDual_traits::create (i, f, this));

            this->SimController_ZoneControlTemperature_ThermostatStagedDual_.push_back (r);
            continue;
          }

          // SimController_ZoneControlTemperature_ThermostatThermalComfort
          //
          if (n.name () == "SimController_ZoneControlTemperature_ThermostatThermalComfort" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlTemperature_ThermostatThermalComfort_type > r (
              SimController_ZoneControlTemperature_ThermostatThermalComfort_traits::create (i, f, this));

            this->SimController_ZoneControlTemperature_ThermostatThermalComfort_.push_back (r);
            continue;
          }

          // SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone
          //
          if (n.name () == "SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_type > r (
              SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_traits::create (i, f, this));

            this->SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_type > r (
              SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_type > r (
              SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_type > r (
              SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_HybridVentilation
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_HybridVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_HybridVentilation_type > r (
              SimControlScheme_AvailabilityManagerScheme_HybridVentilation_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_HybridVentilation_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_type > r (
              SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_type > r (
              SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_NightCycle
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_NightCycle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_NightCycle_type > r (
              SimControlScheme_AvailabilityManagerScheme_NightCycle_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_NightCycle_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_NightVentilation
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_NightVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_NightVentilation_type > r (
              SimControlScheme_AvailabilityManagerScheme_NightVentilation_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_NightVentilation_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_OptimumStart
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_OptimumStart" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_OptimumStart_type > r (
              SimControlScheme_AvailabilityManagerScheme_OptimumStart_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_OptimumStart_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_Scheduled
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_Scheduled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_Scheduled_type > r (
              SimControlScheme_AvailabilityManagerScheme_Scheduled_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_Scheduled_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_ScheduledOff
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_ScheduledOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_ScheduledOff_type > r (
              SimControlScheme_AvailabilityManagerScheme_ScheduledOff_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_ScheduledOff_.push_back (r);
            continue;
          }

          // SimControlScheme_AvailabilityManagerScheme_ScheduledOn
          //
          if (n.name () == "SimControlScheme_AvailabilityManagerScheme_ScheduledOn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_AvailabilityManagerScheme_ScheduledOn_type > r (
              SimControlScheme_AvailabilityManagerScheme_ScheduledOn_traits::create (i, f, this));

            this->SimControlScheme_AvailabilityManagerScheme_ScheduledOn_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_type > r (
              SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_CoolingLoad
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_CoolingLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_CoolingLoad_type > r (
              SimControlScheme_ControlAndSequencingScheme_CoolingLoad_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_CoolingLoad_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_type > r (
              SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_HeatingLoad
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_HeatingLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_HeatingLoad_type > r (
              SimControlScheme_ControlAndSequencingScheme_HeatingLoad_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_HeatingLoad_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_type > r (
              SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_type > r (
              SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_type > r (
              SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_type > r (
              SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_type > r (
              SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_type > r (
              SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_type > r (
              SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_Uncontrolled
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_Uncontrolled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_Uncontrolled_type > r (
              SimControlScheme_ControlAndSequencingScheme_Uncontrolled_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_Uncontrolled_.push_back (r);
            continue;
          }

          // SimControlScheme_ControlAndSequencingScheme_UserDefined
          //
          if (n.name () == "SimControlScheme_ControlAndSequencingScheme_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ControlAndSequencingScheme_UserDefined_type > r (
              SimControlScheme_ControlAndSequencingScheme_UserDefined_traits::create (i, f, this));

            this->SimControlScheme_ControlAndSequencingScheme_UserDefined_.push_back (r);
            continue;
          }

          // SimControlScheme_DemandManagerScheme_ElectricEquipment
          //
          if (n.name () == "SimControlScheme_DemandManagerScheme_ElectricEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_DemandManagerScheme_ElectricEquipment_type > r (
              SimControlScheme_DemandManagerScheme_ElectricEquipment_traits::create (i, f, this));

            this->SimControlScheme_DemandManagerScheme_ElectricEquipment_.push_back (r);
            continue;
          }

          // SimControlScheme_DemandManagerScheme_ExteriorLights
          //
          if (n.name () == "SimControlScheme_DemandManagerScheme_ExteriorLights" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_DemandManagerScheme_ExteriorLights_type > r (
              SimControlScheme_DemandManagerScheme_ExteriorLights_traits::create (i, f, this));

            this->SimControlScheme_DemandManagerScheme_ExteriorLights_.push_back (r);
            continue;
          }

          // SimControlScheme_DemandManagerScheme_Lights
          //
          if (n.name () == "SimControlScheme_DemandManagerScheme_Lights" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_DemandManagerScheme_Lights_type > r (
              SimControlScheme_DemandManagerScheme_Lights_traits::create (i, f, this));

            this->SimControlScheme_DemandManagerScheme_Lights_.push_back (r);
            continue;
          }

          // SimControlScheme_DemandManagerScheme_Thermostats
          //
          if (n.name () == "SimControlScheme_DemandManagerScheme_Thermostats" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_DemandManagerScheme_Thermostats_type > r (
              SimControlScheme_DemandManagerScheme_Thermostats_traits::create (i, f, this));

            this->SimControlScheme_DemandManagerScheme_Thermostats_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_type > r (
              SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_type > r (
              SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_GlobalVairable
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_GlobalVairable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_GlobalVairable_type > r (
              SimControlScheme_EnergyManagementScheme_GlobalVairable_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_GlobalVairable_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_InternalVariable
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_InternalVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_InternalVariable_type > r (
              SimControlScheme_EnergyManagementScheme_InternalVariable_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_InternalVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_OutputVariable
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_OutputVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_OutputVariable_type > r (
              SimControlScheme_EnergyManagementScheme_OutputVariable_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_OutputVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_Program
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_Program" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_Program_type > r (
              SimControlScheme_EnergyManagementScheme_Program_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_Program_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_ProgramCallingManager
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_ProgramCallingManager" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_ProgramCallingManager_type > r (
              SimControlScheme_EnergyManagementScheme_ProgramCallingManager_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_ProgramCallingManager_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_Subroutine
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_Subroutine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_Subroutine_type > r (
              SimControlScheme_EnergyManagementScheme_Subroutine_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_Subroutine_.push_back (r);
            continue;
          }

          // SimControlScheme_EnergyManagementScheme_TrendVariable
          //
          if (n.name () == "SimControlScheme_EnergyManagementScheme_TrendVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_EnergyManagementScheme_TrendVariable_type > r (
              SimControlScheme_EnergyManagementScheme_TrendVariable_traits::create (i, f, this));

            this->SimControlScheme_EnergyManagementScheme_TrendVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceExport_FromVariable
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceExport_FromVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceExport_FromVariable_type > r (
              SimControlScheme_ExternalInterfaceExport_FromVariable_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceExport_FromVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceExport_ToActuator
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceExport_ToActuator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceExport_ToActuator_type > r (
              SimControlScheme_ExternalInterfaceExport_ToActuator_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceExport_ToActuator_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceExport_ToSchedule
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceExport_ToSchedule" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceExport_ToSchedule_type > r (
              SimControlScheme_ExternalInterfaceExport_ToSchedule_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceExport_ToSchedule_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceExport_ToVariable
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceExport_ToVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceExport_ToVariable_type > r (
              SimControlScheme_ExternalInterfaceExport_ToVariable_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceExport_ToVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceImport_Default
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceImport_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceImport_Default_type > r (
              SimControlScheme_ExternalInterfaceImport_Default_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceImport_Default_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceImport_FromVariable
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceImport_FromVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceImport_FromVariable_type > r (
              SimControlScheme_ExternalInterfaceImport_FromVariable_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceImport_FromVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceImport_ToActuator
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceImport_ToActuator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceImport_ToActuator_type > r (
              SimControlScheme_ExternalInterfaceImport_ToActuator_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceImport_ToActuator_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceImport_ToSchedule
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceImport_ToSchedule" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceImport_ToSchedule_type > r (
              SimControlScheme_ExternalInterfaceImport_ToSchedule_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceImport_ToSchedule_.push_back (r);
            continue;
          }

          // SimControlScheme_ExternalInterfaceImport_ToVariable
          //
          if (n.name () == "SimControlScheme_ExternalInterfaceImport_ToVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_ExternalInterfaceImport_ToVariable_type > r (
              SimControlScheme_ExternalInterfaceImport_ToVariable_traits::create (i, f, this));

            this->SimControlScheme_ExternalInterfaceImport_ToVariable_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_type > r (
              SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_type > r (
              SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_type > r (
              SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint
          //
          if (n.name () == "SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_type > r (
              SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_OperatingScheme_UncontrolledOperationScheme
          //
          if (n.name () == "SimControlScheme_OperatingScheme_UncontrolledOperationScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_OperatingScheme_UncontrolledOperationScheme_type > r (
              SimControlScheme_OperatingScheme_UncontrolledOperationScheme_traits::create (i, f, this));

            this->SimControlScheme_OperatingScheme_UncontrolledOperationScheme_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_type > r (
              SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_type > r (
              SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_ColdestZoneReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_ColdestZoneReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_ColdestZoneReset_type > r (
              SimControlScheme_SetpointManagerScheme_ColdestZoneReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_ColdestZoneReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_DuctStaticPressure
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_DuctStaticPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_DuctStaticPressure_type > r (
              SimControlScheme_SetpointManagerScheme_DuctStaticPressure_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_DuctStaticPressure_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_EnteringReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_EnteringReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_EnteringReset_type > r (
              SimControlScheme_SetpointManagerScheme_EnteringReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_EnteringReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_EnteringResetIdeal
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_EnteringResetIdeal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_type > r (
              SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_FollowGroundTemperature
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_FollowGroundTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_type > r (
              SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_type > r (
              SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_type > r (
              SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_type > r (
              SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_MixedAir
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_MixedAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_MixedAir_type > r (
              SimControlScheme_SetpointManagerScheme_MixedAir_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_MixedAir_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_MostHumidZoneReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_MostHumidZoneReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_type > r (
              SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_type > r (
              SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_OutdoorAirReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_OutdoorAirReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_OutdoorAirReset_type > r (
              SimControlScheme_SetpointManagerScheme_OutdoorAirReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_OutdoorAirReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_type > r (
              SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_type > r (
              SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_ScheduledSetpoint
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_ScheduledSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_type > r (
              SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_type > r (
              SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_type > r (
              SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_Cooling
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_Cooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_Heating
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_Heating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_Heating_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_Heating_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_Heating_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_SingleZone_Reheat
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_SingleZone_Reheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_type > r (
              SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_type > r (
              SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_WarmestZoneReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_WarmestZoneReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_WarmestZoneReset_type > r (
              SimControlScheme_SetpointManagerScheme_WarmestZoneReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_WarmestZoneReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_type > r (
              SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset
          //
          if (n.name () == "SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_type > r (
              SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_traits::create (i, f, this));

            this->SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_DualSetpoint
          //
          if (n.name () == "SimControlScheme_SetpointScheme_DualSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_DualSetpoint_type > r (
              SimControlScheme_SetpointScheme_DualSetpoint_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_DualSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_SingleCooling
          //
          if (n.name () == "SimControlScheme_SetpointScheme_SingleCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_SingleCooling_type > r (
              SimControlScheme_SetpointScheme_SingleCooling_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_SingleCooling_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_SingleHeating
          //
          if (n.name () == "SimControlScheme_SetpointScheme_SingleHeating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_SingleHeating_type > r (
              SimControlScheme_SetpointScheme_SingleHeating_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_SingleHeating_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_SingleHeatingOrCooling
          //
          if (n.name () == "SimControlScheme_SetpointScheme_SingleHeatingOrCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_SingleHeatingOrCooling_type > r (
              SimControlScheme_SetpointScheme_SingleHeatingOrCooling_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_SingleHeatingOrCooling_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint
          //
          if (n.name () == "SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_type > r (
              SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling
          //
          if (n.name () == "SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_type > r (
              SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating
          //
          if (n.name () == "SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_type > r (
              SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_.push_back (r);
            continue;
          }

          // SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling
          //
          if (n.name () == "SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_type > r (
              SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_traits::create (i, f, this));

            this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_.push_back (r);
            continue;
          }

          // SimCost_ComponentCost_Adjustments
          //
          if (n.name () == "SimCost_ComponentCost_Adjustments" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_ComponentCost_Adjustments_type > r (
              SimCost_ComponentCost_Adjustments_traits::create (i, f, this));

            this->SimCost_ComponentCost_Adjustments_.push_back (r);
            continue;
          }

          // SimCost_ComponentCost_LineItem
          //
          if (n.name () == "SimCost_ComponentCost_LineItem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_ComponentCost_LineItem_type > r (
              SimCost_ComponentCost_LineItem_traits::create (i, f, this));

            this->SimCost_ComponentCost_LineItem_.push_back (r);
            continue;
          }

          // SimCost_ComponentCost_Reference
          //
          if (n.name () == "SimCost_ComponentCost_Reference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_ComponentCost_Reference_type > r (
              SimCost_ComponentCost_Reference_traits::create (i, f, this));

            this->SimCost_ComponentCost_Reference_.push_back (r);
            continue;
          }

          // SimCost_Default_Default
          //
          if (n.name () == "SimCost_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_Default_Default_type > r (
              SimCost_Default_Default_traits::create (i, f, this));

            this->SimCost_Default_Default_.push_back (r);
            continue;
          }

          // SimCost_LifeCycleCost_NonrecurringCost
          //
          if (n.name () == "SimCost_LifeCycleCost_NonrecurringCost" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_LifeCycleCost_NonrecurringCost_type > r (
              SimCost_LifeCycleCost_NonrecurringCost_traits::create (i, f, this));

            this->SimCost_LifeCycleCost_NonrecurringCost_.push_back (r);
            continue;
          }

          // SimCost_LifeCycleCost_Parameters
          //
          if (n.name () == "SimCost_LifeCycleCost_Parameters" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_LifeCycleCost_Parameters_type > r (
              SimCost_LifeCycleCost_Parameters_traits::create (i, f, this));

            this->SimCost_LifeCycleCost_Parameters_.push_back (r);
            continue;
          }

          // SimCost_LifeCycleCost_RecurringCosts
          //
          if (n.name () == "SimCost_LifeCycleCost_RecurringCosts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_LifeCycleCost_RecurringCosts_type > r (
              SimCost_LifeCycleCost_RecurringCosts_traits::create (i, f, this));

            this->SimCost_LifeCycleCost_RecurringCosts_.push_back (r);
            continue;
          }

          // SimCost_LifeCycleCost_UseAdjustment
          //
          if (n.name () == "SimCost_LifeCycleCost_UseAdjustment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_LifeCycleCost_UseAdjustment_type > r (
              SimCost_LifeCycleCost_UseAdjustment_traits::create (i, f, this));

            this->SimCost_LifeCycleCost_UseAdjustment_.push_back (r);
            continue;
          }

          // SimCost_LifeCycleCost_UsePriceEscalation
          //
          if (n.name () == "SimCost_LifeCycleCost_UsePriceEscalation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_LifeCycleCost_UsePriceEscalation_type > r (
              SimCost_LifeCycleCost_UsePriceEscalation_traits::create (i, f, this));

            this->SimCost_LifeCycleCost_UsePriceEscalation_.push_back (r);
            continue;
          }

          // SimCost_UtilityCost_ChargeBlock
          //
          if (n.name () == "SimCost_UtilityCost_ChargeBlock" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_UtilityCost_ChargeBlock_type > r (
              SimCost_UtilityCost_ChargeBlock_traits::create (i, f, this));

            this->SimCost_UtilityCost_ChargeBlock_.push_back (r);
            continue;
          }

          // SimCost_UtilityCost_ChargeSimple
          //
          if (n.name () == "SimCost_UtilityCost_ChargeSimple" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_UtilityCost_ChargeSimple_type > r (
              SimCost_UtilityCost_ChargeSimple_traits::create (i, f, this));

            this->SimCost_UtilityCost_ChargeSimple_.push_back (r);
            continue;
          }

          // SimCost_UtilityCost_CostRatchet
          //
          if (n.name () == "SimCost_UtilityCost_CostRatchet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_UtilityCost_CostRatchet_type > r (
              SimCost_UtilityCost_CostRatchet_traits::create (i, f, this));

            this->SimCost_UtilityCost_CostRatchet_.push_back (r);
            continue;
          }

          // SimCost_UtilityCost_CostVariable
          //
          if (n.name () == "SimCost_UtilityCost_CostVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_UtilityCost_CostVariable_type > r (
              SimCost_UtilityCost_CostVariable_traits::create (i, f, this));

            this->SimCost_UtilityCost_CostVariable_.push_back (r);
            continue;
          }

          // SimCost_UtilityCost_Qualify
          //
          if (n.name () == "SimCost_UtilityCost_Qualify" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_UtilityCost_Qualify_type > r (
              SimCost_UtilityCost_Qualify_traits::create (i, f, this));

            this->SimCost_UtilityCost_Qualify_.push_back (r);
            continue;
          }

          // SimCost_UtilityCost_Tariff
          //
          if (n.name () == "SimCost_UtilityCost_Tariff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCost_UtilityCost_Tariff_type > r (
              SimCost_UtilityCost_Tariff_traits::create (i, f, this));

            this->SimCost_UtilityCost_Tariff_.push_back (r);
            continue;
          }

          // SimCurtainWall_CurtainWall_Default
          //
          if (n.name () == "SimCurtainWall_CurtainWall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurtainWall_CurtainWall_Default_type > r (
              SimCurtainWall_CurtainWall_Default_traits::create (i, f, this));

            this->SimCurtainWall_CurtainWall_Default_.push_back (r);
            continue;
          }

          // SimCurtainWallParams_CurtainWall_Default
          //
          if (n.name () == "SimCurtainWallParams_CurtainWall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurtainWallParams_CurtainWall_Default_type > r (
              SimCurtainWallParams_CurtainWall_Default_traits::create (i, f, this));

            this->SimCurtainWallParams_CurtainWall_Default_.push_back (r);
            continue;
          }

          // SimCurtainWallType_CurtainWall_Default
          //
          if (n.name () == "SimCurtainWallType_CurtainWall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurtainWallType_CurtainWall_Default_type > r (
              SimCurtainWallType_CurtainWall_Default_traits::create (i, f, this));

            this->SimCurtainWallType_CurtainWall_Default_.push_back (r);
            continue;
          }

          // SimCurveStyle_CurveStyle_Default
          //
          if (n.name () == "SimCurveStyle_CurveStyle_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurveStyle_CurveStyle_Default_type > r (
              SimCurveStyle_CurveStyle_Default_traits::create (i, f, this));

            this->SimCurveStyle_CurveStyle_Default_.push_back (r);
            continue;
          }

          // SimCurveStyle_CurveStyle_Font
          //
          if (n.name () == "SimCurveStyle_CurveStyle_Font" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurveStyle_CurveStyle_Font_type > r (
              SimCurveStyle_CurveStyle_Font_traits::create (i, f, this));

            this->SimCurveStyle_CurveStyle_Font_.push_back (r);
            continue;
          }

          // SimCurveStyle_CurveStyle_FontAndScaling
          //
          if (n.name () == "SimCurveStyle_CurveStyle_FontAndScaling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurveStyle_CurveStyle_FontAndScaling_type > r (
              SimCurveStyle_CurveStyle_FontAndScaling_traits::create (i, f, this));

            this->SimCurveStyle_CurveStyle_FontAndScaling_.push_back (r);
            continue;
          }

          // SimCurveStyle_CurveStyle_FontPattern
          //
          if (n.name () == "SimCurveStyle_CurveStyle_FontPattern" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimCurveStyle_CurveStyle_FontPattern_type > r (
              SimCurveStyle_CurveStyle_FontPattern_traits::create (i, f, this));

            this->SimCurveStyle_CurveStyle_FontPattern_.push_back (r);
            continue;
          }

          // SimDaylightingAssembly_DaylightingAssembly_LightShelf
          //
          if (n.name () == "SimDaylightingAssembly_DaylightingAssembly_LightShelf" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DaylightingAssembly_LightShelf_type > r (
              SimDaylightingAssembly_DaylightingAssembly_LightShelf_traits::create (i, f, this));

            this->SimDaylightingAssembly_DaylightingAssembly_LightShelf_.push_back (r);
            continue;
          }

          // SimDaylightingAssembly_DaylightingAssembly_LightTube
          //
          if (n.name () == "SimDaylightingAssembly_DaylightingAssembly_LightTube" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DaylightingAssembly_LightTube_type > r (
              SimDaylightingAssembly_DaylightingAssembly_LightTube_traits::create (i, f, this));

            this->SimDaylightingAssembly_DaylightingAssembly_LightTube_.push_back (r);
            continue;
          }

          // SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface
          //
          if (n.name () == "SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_type > r (
              SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_traits::create (i, f, this));

            this->SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_.push_back (r);
            continue;
          }

          // SimDaylightingAssembly_DaylightingAssembly_LightWell
          //
          if (n.name () == "SimDaylightingAssembly_DaylightingAssembly_LightWell" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DaylightingAssembly_LightWell_type > r (
              SimDaylightingAssembly_DaylightingAssembly_LightWell_traits::create (i, f, this));

            this->SimDaylightingAssembly_DaylightingAssembly_LightWell_.push_back (r);
            continue;
          }

          // SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface
          //
          if (n.name () == "SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_type > r (
              SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_traits::create (i, f, this));

            this->SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_.push_back (r);
            continue;
          }

          // SimDerivedUnitType_DerivedUnit_Default
          //
          if (n.name () == "SimDerivedUnitType_DerivedUnit_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDerivedUnitType_DerivedUnit_Default_type > r (
              SimDerivedUnitType_DerivedUnit_Default_traits::create (i, f, this));

            this->SimDerivedUnitType_DerivedUnit_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_AirFlowPort_Air_In
          //
          if (n.name () == "SimDistributionPort_AirFlowPort_Air_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_AirFlowPort_Air_In_type > r (
              SimDistributionPort_AirFlowPort_Air_In_traits::create (i, f, this));

            this->SimDistributionPort_AirFlowPort_Air_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_AirFlowPort_Air_InOrOut
          //
          if (n.name () == "SimDistributionPort_AirFlowPort_Air_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_AirFlowPort_Air_InOrOut_type > r (
              SimDistributionPort_AirFlowPort_Air_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_AirFlowPort_Air_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_AirFlowPort_Air_Out
          //
          if (n.name () == "SimDistributionPort_AirFlowPort_Air_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_AirFlowPort_Air_Out_type > r (
              SimDistributionPort_AirFlowPort_Air_Out_traits::create (i, f, this));

            this->SimDistributionPort_AirFlowPort_Air_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_AirFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_AirFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_AirFlowPort_Default_type > r (
              SimDistributionPort_AirFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_AirFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_AirFlowPort_ExhaustAir_Out
          //
          if (n.name () == "SimDistributionPort_AirFlowPort_ExhaustAir_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_AirFlowPort_ExhaustAir_Out_type > r (
              SimDistributionPort_AirFlowPort_ExhaustAir_Out_traits::create (i, f, this));

            this->SimDistributionPort_AirFlowPort_ExhaustAir_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_AirFlowPort_OutdoorAir_In
          //
          if (n.name () == "SimDistributionPort_AirFlowPort_OutdoorAir_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_AirFlowPort_OutdoorAir_In_type > r (
              SimDistributionPort_AirFlowPort_OutdoorAir_In_traits::create (i, f, this));

            this->SimDistributionPort_AirFlowPort_OutdoorAir_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_type > r (
              SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_ChilledWaterFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_ChilledWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ChilledWaterFlowPort_Default_type > r (
              SimDistributionPort_ChilledWaterFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_ChilledWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_type > r (
              SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimDistributionPort_ChilledWaterFlowPort_Water_In
          //
          if (n.name () == "SimDistributionPort_ChilledWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ChilledWaterFlowPort_Water_In_type > r (
              SimDistributionPort_ChilledWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimDistributionPort_ChilledWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_type > r (
              SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_ChilledWaterFlowPort_Water_Out
          //
          if (n.name () == "SimDistributionPort_ChilledWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ChilledWaterFlowPort_Water_Out_type > r (
              SimDistributionPort_ChilledWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimDistributionPort_ChilledWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_CondenserFlowPort_CondenserFlow_In
          //
          if (n.name () == "SimDistributionPort_CondenserFlowPort_CondenserFlow_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_CondenserFlowPort_CondenserFlow_In_type > r (
              SimDistributionPort_CondenserFlowPort_CondenserFlow_In_traits::create (i, f, this));

            this->SimDistributionPort_CondenserFlowPort_CondenserFlow_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut
          //
          if (n.name () == "SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_type > r (
              SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_CondenserFlowPort_CondenserFlow_Out
          //
          if (n.name () == "SimDistributionPort_CondenserFlowPort_CondenserFlow_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_type > r (
              SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_traits::create (i, f, this));

            this->SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_CondenserFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_CondenserFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_CondenserFlowPort_Default_type > r (
              SimDistributionPort_CondenserFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_CondenserFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_AirLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_AirLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_AirLoop_Default_type > r (
              SimDistributionPort_DigitalControl_AirLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_AirLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CHWLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CHWLoop_Default_type > r (
              SimDistributionPort_DigitalControl_CHWLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CHWLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CWLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CWLoop_Default_type > r (
              SimDistributionPort_DigitalControl_CWLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CWLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_HWLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_HWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_HWLoop_Default_type > r (
              SimDistributionPort_DigitalControl_HWLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_HWLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_MxWLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_MxWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_MxWLoop_Default_type > r (
              SimDistributionPort_DigitalControl_MxWLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_MxWLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_RFGLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_RFGLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_RFGLoop_Default_type > r (
              SimDistributionPort_DigitalControl_RFGLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_RFGLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_SHWLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_SHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_SHWLoop_Default_type > r (
              SimDistributionPort_DigitalControl_SHWLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_SHWLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_STMLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_STMLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_STMLoop_Default_type > r (
              SimDistributionPort_DigitalControl_STMLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_STMLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_VRFLoop_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControl_VRFLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_VRFLoop_Default_type > r (
              SimDistributionPort_DigitalControl_VRFLoop_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_VRFLoop_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControlPort_Default
          //
          if (n.name () == "SimDistributionPort_DigitalControlPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControlPort_Default_type > r (
              SimDistributionPort_DigitalControlPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControlPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControlPort_DigitalSignal_In
          //
          if (n.name () == "SimDistributionPort_DigitalControlPort_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControlPort_DigitalSignal_In_type > r (
              SimDistributionPort_DigitalControlPort_DigitalSignal_In_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControlPort_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut
          //
          if (n.name () == "SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_type > r (
              SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControlPort_DigitalSignal_Out
          //
          if (n.name () == "SimDistributionPort_DigitalControlPort_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControlPort_DigitalSignal_Out_type > r (
              SimDistributionPort_DigitalControlPort_DigitalSignal_Out_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControlPort_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_DigitalControlPort_DigitalVirtual
          //
          if (n.name () == "SimDistributionPort_DigitalControlPort_DigitalVirtual" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DigitalControlPort_DigitalVirtual_type > r (
              SimDistributionPort_DigitalControlPort_DigitalVirtual_traits::create (i, f, this));

            this->SimDistributionPort_DigitalControlPort_DigitalVirtual_.push_back (r);
            continue;
          }

          // SimDistributionPort_DistributionPort_Default
          //
          if (n.name () == "SimDistributionPort_DistributionPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_DistributionPort_Default_type > r (
              SimDistributionPort_DistributionPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_DistributionPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_ElectricalFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_ElectricalFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ElectricalFlowPort_Default_type > r (
              SimDistributionPort_ElectricalFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_ElectricalFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_ElectricalFlowPort_Electrical_In
          //
          if (n.name () == "SimDistributionPort_ElectricalFlowPort_Electrical_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ElectricalFlowPort_Electrical_In_type > r (
              SimDistributionPort_ElectricalFlowPort_Electrical_In_traits::create (i, f, this));

            this->SimDistributionPort_ElectricalFlowPort_Electrical_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut
          //
          if (n.name () == "SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_type > r (
              SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_ElectricalFlowPort_Electrical_Out
          //
          if (n.name () == "SimDistributionPort_ElectricalFlowPort_Electrical_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ElectricalFlowPort_Electrical_Out_type > r (
              SimDistributionPort_ElectricalFlowPort_Electrical_Out_traits::create (i, f, this));

            this->SimDistributionPort_ElectricalFlowPort_Electrical_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_HotWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimDistributionPort_HotWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_type > r (
              SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_HotWaterFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_HotWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_HotWaterFlowPort_Default_type > r (
              SimDistributionPort_HotWaterFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_HotWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_type > r (
              SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimDistributionPort_HotWaterFlowPort_Water_In
          //
          if (n.name () == "SimDistributionPort_HotWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_HotWaterFlowPort_Water_In_type > r (
              SimDistributionPort_HotWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimDistributionPort_HotWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_HotWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimDistributionPort_HotWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_HotWaterFlowPort_Water_InOrOut_type > r (
              SimDistributionPort_HotWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_HotWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_HotWaterFlowPort_Water_Out
          //
          if (n.name () == "SimDistributionPort_HotWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_HotWaterFlowPort_Water_Out_type > r (
              SimDistributionPort_HotWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimDistributionPort_HotWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_type > r (
              SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_MixedWaterFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_MixedWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_MixedWaterFlowPort_Default_type > r (
              SimDistributionPort_MixedWaterFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_MixedWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_type > r (
              SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimDistributionPort_MixedWaterFlowPort_Water_In
          //
          if (n.name () == "SimDistributionPort_MixedWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_MixedWaterFlowPort_Water_In_type > r (
              SimDistributionPort_MixedWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimDistributionPort_MixedWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_MixedWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimDistributionPort_MixedWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_type > r (
              SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_MixedWaterFlowPort_Water_Out
          //
          if (n.name () == "SimDistributionPort_MixedWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_MixedWaterFlowPort_Water_Out_type > r (
              SimDistributionPort_MixedWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimDistributionPort_MixedWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_RefrigerationFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_RefrigerationFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_RefrigerationFlowPort_Default_type > r (
              SimDistributionPort_RefrigerationFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_RefrigerationFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_RefrigerationFlowPort_Refrigeration_In
          //
          if (n.name () == "SimDistributionPort_RefrigerationFlowPort_Refrigeration_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_type > r (
              SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_traits::create (i, f, this));

            this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut
          //
          if (n.name () == "SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_type > r (
              SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out
          //
          if (n.name () == "SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_type > r (
              SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_traits::create (i, f, this));

            this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_ServiceHotWaterFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_ServiceHotWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ServiceHotWaterFlowPort_Default_type > r (
              SimDistributionPort_ServiceHotWaterFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_ServiceHotWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_ServiceHotWaterFlowPort_Water_In
          //
          if (n.name () == "SimDistributionPort_ServiceHotWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ServiceHotWaterFlowPort_Water_In_type > r (
              SimDistributionPort_ServiceHotWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimDistributionPort_ServiceHotWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_type > r (
              SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_ServiceHotWaterFlowPort_Water_Out
          //
          if (n.name () == "SimDistributionPort_ServiceHotWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_type > r (
              SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_SteamFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_SteamFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_SteamFlowPort_Default_type > r (
              SimDistributionPort_SteamFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_SteamFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_SteamFlowPort_Steam_In
          //
          if (n.name () == "SimDistributionPort_SteamFlowPort_Steam_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_SteamFlowPort_Steam_In_type > r (
              SimDistributionPort_SteamFlowPort_Steam_In_traits::create (i, f, this));

            this->SimDistributionPort_SteamFlowPort_Steam_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_SteamFlowPort_Steam_InOrOut
          //
          if (n.name () == "SimDistributionPort_SteamFlowPort_Steam_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_SteamFlowPort_Steam_InOrOut_type > r (
              SimDistributionPort_SteamFlowPort_Steam_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_SteamFlowPort_Steam_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_SteamFlowPort_Steam_Out
          //
          if (n.name () == "SimDistributionPort_SteamFlowPort_Steam_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_SteamFlowPort_Steam_Out_type > r (
              SimDistributionPort_SteamFlowPort_Steam_Out_traits::create (i, f, this));

            this->SimDistributionPort_SteamFlowPort_Steam_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_VarRefrigerantFlowPort_Default
          //
          if (n.name () == "SimDistributionPort_VarRefrigerantFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_VarRefrigerantFlowPort_Default_type > r (
              SimDistributionPort_VarRefrigerantFlowPort_Default_traits::create (i, f, this));

            this->SimDistributionPort_VarRefrigerantFlowPort_Default_.push_back (r);
            continue;
          }

          // SimDistributionPort_VarRefrigerantFlowPort_VRF_In
          //
          if (n.name () == "SimDistributionPort_VarRefrigerantFlowPort_VRF_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_VarRefrigerantFlowPort_VRF_In_type > r (
              SimDistributionPort_VarRefrigerantFlowPort_VRF_In_traits::create (i, f, this));

            this->SimDistributionPort_VarRefrigerantFlowPort_VRF_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut
          //
          if (n.name () == "SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_type > r (
              SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_traits::create (i, f, this));

            this->SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_.push_back (r);
            continue;
          }

          // SimDistributionPort_VarRefrigerantFlowPort_VRF_Out
          //
          if (n.name () == "SimDistributionPort_VarRefrigerantFlowPort_VRF_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_type > r (
              SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_traits::create (i, f, this));

            this->SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_.push_back (r);
            continue;
          }

          // SimDistributionPort_ZoneAirFlowPort_Air_In
          //
          if (n.name () == "SimDistributionPort_ZoneAirFlowPort_Air_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ZoneAirFlowPort_Air_In_type > r (
              SimDistributionPort_ZoneAirFlowPort_Air_In_traits::create (i, f, this));

            this->SimDistributionPort_ZoneAirFlowPort_Air_In_.push_back (r);
            continue;
          }

          // SimDistributionPort_ZoneAirFlowPort_Air_Out
          //
          if (n.name () == "SimDistributionPort_ZoneAirFlowPort_Air_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDistributionPort_ZoneAirFlowPort_Air_Out_type > r (
              SimDistributionPort_ZoneAirFlowPort_Air_Out_traits::create (i, f, this));

            this->SimDistributionPort_ZoneAirFlowPort_Air_Out_.push_back (r);
            continue;
          }

          // SimDoor_Default_Default
          //
          if (n.name () == "SimDoor_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_Default_Default_type > r (
              SimDoor_Default_Default_traits::create (i, f, this));

            this->SimDoor_Default_Default_.push_back (r);
            continue;
          }

          // SimDoor_GlazedDoor_Exterior
          //
          if (n.name () == "SimDoor_GlazedDoor_Exterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_GlazedDoor_Exterior_type > r (
              SimDoor_GlazedDoor_Exterior_traits::create (i, f, this));

            this->SimDoor_GlazedDoor_Exterior_.push_back (r);
            continue;
          }

          // SimDoor_GlazedDoor_ExteriorDetailed
          //
          if (n.name () == "SimDoor_GlazedDoor_ExteriorDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_GlazedDoor_ExteriorDetailed_type > r (
              SimDoor_GlazedDoor_ExteriorDetailed_traits::create (i, f, this));

            this->SimDoor_GlazedDoor_ExteriorDetailed_.push_back (r);
            continue;
          }

          // SimDoor_GlazedDoor_Interior
          //
          if (n.name () == "SimDoor_GlazedDoor_Interior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_GlazedDoor_Interior_type > r (
              SimDoor_GlazedDoor_Interior_traits::create (i, f, this));

            this->SimDoor_GlazedDoor_Interior_.push_back (r);
            continue;
          }

          // SimDoor_OpaqueDoor_Exterior
          //
          if (n.name () == "SimDoor_OpaqueDoor_Exterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_OpaqueDoor_Exterior_type > r (
              SimDoor_OpaqueDoor_Exterior_traits::create (i, f, this));

            this->SimDoor_OpaqueDoor_Exterior_.push_back (r);
            continue;
          }

          // SimDoor_OpaqueDoor_ExteriorDetailed
          //
          if (n.name () == "SimDoor_OpaqueDoor_ExteriorDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_OpaqueDoor_ExteriorDetailed_type > r (
              SimDoor_OpaqueDoor_ExteriorDetailed_traits::create (i, f, this));

            this->SimDoor_OpaqueDoor_ExteriorDetailed_.push_back (r);
            continue;
          }

          // SimDoor_OpaqueDoor_Interior
          //
          if (n.name () == "SimDoor_OpaqueDoor_Interior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoor_OpaqueDoor_Interior_type > r (
              SimDoor_OpaqueDoor_Interior_traits::create (i, f, this));

            this->SimDoor_OpaqueDoor_Interior_.push_back (r);
            continue;
          }

          // SimDoorArrayParams_DoorArray_Default
          //
          if (n.name () == "SimDoorArrayParams_DoorArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoorArrayParams_DoorArray_Default_type > r (
              SimDoorArrayParams_DoorArray_Default_traits::create (i, f, this));

            this->SimDoorArrayParams_DoorArray_Default_.push_back (r);
            continue;
          }

          // SimDoorLiningProps_DoorLiningProps_Default
          //
          if (n.name () == "SimDoorLiningProps_DoorLiningProps_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoorLiningProps_DoorLiningProps_Default_type > r (
              SimDoorLiningProps_DoorLiningProps_Default_traits::create (i, f, this));

            this->SimDoorLiningProps_DoorLiningProps_Default_.push_back (r);
            continue;
          }

          // SimDoorPanelProps_DoorPanelProps_Default
          //
          if (n.name () == "SimDoorPanelProps_DoorPanelProps_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoorPanelProps_DoorPanelProps_Default_type > r (
              SimDoorPanelProps_DoorPanelProps_Default_traits::create (i, f, this));

            this->SimDoorPanelProps_DoorPanelProps_Default_.push_back (r);
            continue;
          }

          // SimDoorParams_Door_Default
          //
          if (n.name () == "SimDoorParams_Door_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoorParams_Door_Default_type > r (
              SimDoorParams_Door_Default_traits::create (i, f, this));

            this->SimDoorParams_Door_Default_.push_back (r);
            continue;
          }

          // SimDoorType_Door_Default
          //
          if (n.name () == "SimDoorType_Door_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDoorType_Door_Default_type > r (
              SimDoorType_Door_Default_traits::create (i, f, this));

            this->SimDoorType_Door_Default_.push_back (r);
            continue;
          }

          // SimDwgXrefParams_DwgXref_Default
          //
          if (n.name () == "SimDwgXrefParams_DwgXref_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimDwgXrefParams_DwgXref_Default_type > r (
              SimDwgXrefParams_DwgXref_Default_traits::create (i, f, this));

            this->SimDwgXrefParams_DwgXref_Default_.push_back (r);
            continue;
          }

          // SimEdge_Edge_EdgeCurve
          //
          if (n.name () == "SimEdge_Edge_EdgeCurve" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimEdge_Edge_EdgeCurve_type > r (
              SimEdge_Edge_EdgeCurve_traits::create (i, f, this));

            this->SimEdge_Edge_EdgeCurve_.push_back (r);
            continue;
          }

          // SimEdge_Edge_OrientedEdge
          //
          if (n.name () == "SimEdge_Edge_OrientedEdge" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimEdge_Edge_OrientedEdge_type > r (
              SimEdge_Edge_OrientedEdge_traits::create (i, f, this));

            this->SimEdge_Edge_OrientedEdge_.push_back (r);
            continue;
          }

          // SimEdge_Edge_Subedge
          //
          if (n.name () == "SimEdge_Edge_Subedge" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimEdge_Edge_Subedge_type > r (
              SimEdge_Edge_Subedge_traits::create (i, f, this));

            this->SimEdge_Edge_Subedge_.push_back (r);
            continue;
          }

          // SimElementQuantity_ElementQuantity_Default
          //
          if (n.name () == "SimElementQuantity_ElementQuantity_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimElementQuantity_ElementQuantity_Default_type > r (
              SimElementQuantity_ElementQuantity_Default_traits::create (i, f, this));

            this->SimElementQuantity_ElementQuantity_Default_.push_back (r);
            continue;
          }

          // SimExtendedMaterialProps_ExtendedMatlProps_Default
          //
          if (n.name () == "SimExtendedMaterialProps_ExtendedMatlProps_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimExtendedMaterialProps_ExtendedMatlProps_Default_type > r (
              SimExtendedMaterialProps_ExtendedMatlProps_Default_traits::create (i, f, this));

            this->SimExtendedMaterialProps_ExtendedMatlProps_Default_.push_back (r);
            continue;
          }

          // SimExternalReference_Default_Default
          //
          if (n.name () == "SimExternalReference_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimExternalReference_Default_Default_type > r (
              SimExternalReference_Default_Default_traits::create (i, f, this));

            this->SimExternalReference_Default_Default_.push_back (r);
            continue;
          }

          // SimExternalReference_DocumentReference_Default
          //
          if (n.name () == "SimExternalReference_DocumentReference_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimExternalReference_DocumentReference_Default_type > r (
              SimExternalReference_DocumentReference_Default_traits::create (i, f, this));

            this->SimExternalReference_DocumentReference_Default_.push_back (r);
            continue;
          }

          // SimExternalReference_ExternalReference_Default
          //
          if (n.name () == "SimExternalReference_ExternalReference_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimExternalReference_ExternalReference_Default_type > r (
              SimExternalReference_ExternalReference_Default_traits::create (i, f, this));

            this->SimExternalReference_ExternalReference_Default_.push_back (r);
            continue;
          }

          // SimExternalReference_LibraryReference_Default
          //
          if (n.name () == "SimExternalReference_LibraryReference_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimExternalReference_LibraryReference_Default_type > r (
              SimExternalReference_LibraryReference_Default_traits::create (i, f, this));

            this->SimExternalReference_LibraryReference_Default_.push_back (r);
            continue;
          }

          // SimExternalReference_PropertyReference_Default
          //
          if (n.name () == "SimExternalReference_PropertyReference_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimExternalReference_PropertyReference_Default_type > r (
              SimExternalReference_PropertyReference_Default_traits::create (i, f, this));

            this->SimExternalReference_PropertyReference_Default_.push_back (r);
            continue;
          }

          // SimFace_Face_Default
          //
          if (n.name () == "SimFace_Face_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFace_Face_Default_type > r (
              SimFace_Face_Default_traits::create (i, f, this));

            this->SimFace_Face_Default_.push_back (r);
            continue;
          }

          // SimFace_Face_FaceSurface
          //
          if (n.name () == "SimFace_Face_FaceSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFace_Face_FaceSurface_type > r (
              SimFace_Face_FaceSurface_traits::create (i, f, this));

            this->SimFace_Face_FaceSurface_.push_back (r);
            continue;
          }

          // SimFaceBound_FaceBound_Default
          //
          if (n.name () == "SimFaceBound_FaceBound_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFaceBound_FaceBound_Default_type > r (
              SimFaceBound_FaceBound_Default_traits::create (i, f, this));

            this->SimFaceBound_FaceBound_Default_.push_back (r);
            continue;
          }

          // SimFaceBound_FaceBound_FaceOuterBound
          //
          if (n.name () == "SimFaceBound_FaceBound_FaceOuterBound" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFaceBound_FaceBound_FaceOuterBound_type > r (
              SimFaceBound_FaceBound_FaceOuterBound_traits::create (i, f, this));

            this->SimFaceBound_FaceBound_FaceOuterBound_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Default_Default
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Default_Default_type > r (
              SimFeatureAirFlowNetwork_Default_Default_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Default_Default_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default
          //
          if (n.name () == "SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_type > r (
              SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_type > r (
              SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Opening_Default
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Opening_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Opening_Default_type > r (
              SimFeatureAirFlowNetwork_Opening_Default_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Opening_Default_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Opening_Detailed
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Opening_Detailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Opening_Detailed_type > r (
              SimFeatureAirFlowNetwork_Opening_Detailed_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Opening_Detailed_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Opening_Horizontal
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Opening_Horizontal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Opening_Horizontal_type > r (
              SimFeatureAirFlowNetwork_Opening_Horizontal_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Opening_Horizontal_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Opening_Simple
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Opening_Simple" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Opening_Simple_type > r (
              SimFeatureAirFlowNetwork_Opening_Simple_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Opening_Simple_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Surface_Default
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Surface_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Surface_Default_type > r (
              SimFeatureAirFlowNetwork_Surface_Default_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Surface_Default_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_SurfaceCrack_Default
          //
          if (n.name () == "SimFeatureAirFlowNetwork_SurfaceCrack_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_SurfaceCrack_Default_type > r (
              SimFeatureAirFlowNetwork_SurfaceCrack_Default_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_SurfaceCrack_Default_.push_back (r);
            continue;
          }

          // SimFeatureAirFlowNetwork_Zone_Default
          //
          if (n.name () == "SimFeatureAirFlowNetwork_Zone_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwork_Zone_Default_type > r (
              SimFeatureAirFlowNetwork_Zone_Default_traits::create (i, f, this));

            this->SimFeatureAirFlowNetwork_Zone_Default_.push_back (r);
            continue;
          }

          // SimFeatureElementAddition_ProjectionElement_Default
          //
          if (n.name () == "SimFeatureElementAddition_ProjectionElement_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureElementAddition_ProjectionElement_Default_type > r (
              SimFeatureElementAddition_ProjectionElement_Default_traits::create (i, f, this));

            this->SimFeatureElementAddition_ProjectionElement_Default_.push_back (r);
            continue;
          }

          // SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge
          //
          if (n.name () == "SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_type > r (
              SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_traits::create (i, f, this));

            this->SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_.push_back (r);
            continue;
          }

          // SimFeatureElementSubtraction_EdgeFeature_Default
          //
          if (n.name () == "SimFeatureElementSubtraction_EdgeFeature_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureElementSubtraction_EdgeFeature_Default_type > r (
              SimFeatureElementSubtraction_EdgeFeature_Default_traits::create (i, f, this));

            this->SimFeatureElementSubtraction_EdgeFeature_Default_.push_back (r);
            continue;
          }

          // SimFeatureElementSubtraction_EdgeFeature_RoundedEdge
          //
          if (n.name () == "SimFeatureElementSubtraction_EdgeFeature_RoundedEdge" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_type > r (
              SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_traits::create (i, f, this));

            this->SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_.push_back (r);
            continue;
          }

          // SimFeatureElementSubtraction_SlotFeature_Default
          //
          if (n.name () == "SimFeatureElementSubtraction_SlotFeature_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureElementSubtraction_SlotFeature_Default_type > r (
              SimFeatureElementSubtraction_SlotFeature_Default_traits::create (i, f, this));

            this->SimFeatureElementSubtraction_SlotFeature_Default_.push_back (r);
            continue;
          }

          // SimFeatureElementSubtraction_Void_Opening
          //
          if (n.name () == "SimFeatureElementSubtraction_Void_Opening" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFeatureElementSubtraction_Void_Opening_type > r (
              SimFeatureElementSubtraction_Void_Opening_traits::create (i, f, this));

            this->SimFeatureElementSubtraction_Void_Opening_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_DistrictSupply_Cooling
          //
          if (n.name () == "SimFlowCompoundEqmt_DistrictSupply_Cooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_DistrictSupply_Cooling_type > r (
              SimFlowCompoundEqmt_DistrictSupply_Cooling_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_DistrictSupply_Cooling_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_DistrictSupply_Heating
          //
          if (n.name () == "SimFlowCompoundEqmt_DistrictSupply_Heating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_DistrictSupply_Heating_type > r (
              SimFlowCompoundEqmt_DistrictSupply_Heating_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_DistrictSupply_Heating_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_DistrictSupply_TemperatureSource
          //
          if (n.name () == "SimFlowCompoundEqmt_DistrictSupply_TemperatureSource" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_type > r (
              SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_PurchasedSupply_Cooling
          //
          if (n.name () == "SimFlowCompoundEqmt_PurchasedSupply_Cooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_PurchasedSupply_Cooling_type > r (
              SimFlowCompoundEqmt_PurchasedSupply_Cooling_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_PurchasedSupply_Cooling_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_PurchasedSupply_Heating
          //
          if (n.name () == "SimFlowCompoundEqmt_PurchasedSupply_Heating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_PurchasedSupply_Heating_type > r (
              SimFlowCompoundEqmt_PurchasedSupply_Heating_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_PurchasedSupply_Heating_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_Default
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_type > r (
              SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate
          //
          if (n.name () == "SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_type > r (
              SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner
          //
          if (n.name () == "SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_type > r (
              SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass
          //
          if (n.name () == "SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_type > r (
              SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_.push_back (r);
            continue;
          }

          // SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop
          //
          if (n.name () == "SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_type > r (
              SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_traits::create (i, f, this));

            this->SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_Default
          //
          if (n.name () == "SimFlowController_Damper_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_Default_type > r (
              SimFlowController_Damper_Default_traits::create (i, f, this));

            this->SimFlowController_Damper_Default_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_Exhaust
          //
          if (n.name () == "SimFlowController_Damper_Exhaust" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_Exhaust_type > r (
              SimFlowController_Damper_Exhaust_traits::create (i, f, this));

            this->SimFlowController_Damper_Exhaust_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_FaceBypass
          //
          if (n.name () == "SimFlowController_Damper_FaceBypass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_FaceBypass_type > r (
              SimFlowController_Damper_FaceBypass_traits::create (i, f, this));

            this->SimFlowController_Damper_FaceBypass_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_MixedAir
          //
          if (n.name () == "SimFlowController_Damper_MixedAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_MixedAir_type > r (
              SimFlowController_Damper_MixedAir_traits::create (i, f, this));

            this->SimFlowController_Damper_MixedAir_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_OutsideAir
          //
          if (n.name () == "SimFlowController_Damper_OutsideAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_OutsideAir_type > r (
              SimFlowController_Damper_OutsideAir_traits::create (i, f, this));

            this->SimFlowController_Damper_OutsideAir_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_Recirculation
          //
          if (n.name () == "SimFlowController_Damper_Recirculation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_Recirculation_type > r (
              SimFlowController_Damper_Recirculation_traits::create (i, f, this));

            this->SimFlowController_Damper_Recirculation_.push_back (r);
            continue;
          }

          // SimFlowController_Damper_Relief
          //
          if (n.name () == "SimFlowController_Damper_Relief" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Damper_Relief_type > r (
              SimFlowController_Damper_Relief_traits::create (i, f, this));

            this->SimFlowController_Damper_Relief_.push_back (r);
            continue;
          }

          // SimFlowController_Default_Default
          //
          if (n.name () == "SimFlowController_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Default_Default_type > r (
              SimFlowController_Default_Default_traits::create (i, f, this));

            this->SimFlowController_Default_Default_.push_back (r);
            continue;
          }

          // SimFlowController_ElectricalSwitch_On_Off
          //
          if (n.name () == "SimFlowController_ElectricalSwitch_On_Off" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_ElectricalSwitch_On_Off_type > r (
              SimFlowController_ElectricalSwitch_On_Off_traits::create (i, f, this));

            this->SimFlowController_ElectricalSwitch_On_Off_.push_back (r);
            continue;
          }

          // SimFlowController_ElectricalSwitch_Variable
          //
          if (n.name () == "SimFlowController_ElectricalSwitch_Variable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_ElectricalSwitch_Variable_type > r (
              SimFlowController_ElectricalSwitch_Variable_traits::create (i, f, this));

            this->SimFlowController_ElectricalSwitch_Variable_.push_back (r);
            continue;
          }

          // SimFlowController_Valve_Default
          //
          if (n.name () == "SimFlowController_Valve_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Valve_Default_type > r (
              SimFlowController_Valve_Default_traits::create (i, f, this));

            this->SimFlowController_Valve_Default_.push_back (r);
            continue;
          }

          // SimFlowController_Valve_EMSValve
          //
          if (n.name () == "SimFlowController_Valve_EMSValve" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Valve_EMSValve_type > r (
              SimFlowController_Valve_EMSValve_traits::create (i, f, this));

            this->SimFlowController_Valve_EMSValve_.push_back (r);
            continue;
          }

          // SimFlowController_Valve_NonReturnValve
          //
          if (n.name () == "SimFlowController_Valve_NonReturnValve" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Valve_NonReturnValve_type > r (
              SimFlowController_Valve_NonReturnValve_traits::create (i, f, this));

            this->SimFlowController_Valve_NonReturnValve_.push_back (r);
            continue;
          }

          // SimFlowController_Valve_TemperingValve
          //
          if (n.name () == "SimFlowController_Valve_TemperingValve" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowController_Valve_TemperingValve_type > r (
              SimFlowController_Valve_TemperingValve_traits::create (i, f, this));

            this->SimFlowController_Valve_TemperingValve_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ConvectiveHeater_Electric
          //
          if (n.name () == "SimFlowEnergyTransfer_ConvectiveHeater_Electric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ConvectiveHeater_Electric_type > r (
              SimFlowEnergyTransfer_ConvectiveHeater_Electric_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ConvectiveHeater_Electric_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric
          //
          if (n.name () == "SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_type > r (
              SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam
          //
          if (n.name () == "SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_type > r (
              SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water
          //
          if (n.name () == "SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_type > r (
              SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ConvectiveHeater_Water
          //
          if (n.name () == "SimFlowEnergyTransfer_ConvectiveHeater_Water" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ConvectiveHeater_Water_type > r (
              SimFlowEnergyTransfer_ConvectiveHeater_Water_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ConvectiveHeater_Water_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_type > r (
              SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_type > r (
              SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_type > r (
              SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_type > r (
              SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_type > r (
              SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_type > r (
              SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined
          //
          if (n.name () == "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_type > r (
              SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_Dehumidifier_Default
          //
          if (n.name () == "SimFlowEnergyTransfer_Dehumidifier_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_Dehumidifier_Default_type > r (
              SimFlowEnergyTransfer_Dehumidifier_Default_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_Dehumidifier_Default_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_Dehumidifier_NoFans
          //
          if (n.name () == "SimFlowEnergyTransfer_Dehumidifier_NoFans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_Dehumidifier_NoFans_type > r (
              SimFlowEnergyTransfer_Dehumidifier_NoFans_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_Dehumidifier_NoFans_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_Economizer_AirToAir
          //
          if (n.name () == "SimFlowEnergyTransfer_Economizer_AirToAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_Economizer_AirToAir_type > r (
              SimFlowEnergyTransfer_Economizer_AirToAir_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_Economizer_AirToAir_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_Electrical_Transformer
          //
          if (n.name () == "SimFlowEnergyTransfer_Electrical_Transformer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_Electrical_Transformer_type > r (
              SimFlowEnergyTransfer_Electrical_Transformer_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_Electrical_Transformer_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower
          //
          if (n.name () == "SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_type > r (
              SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ElectricalInverter_LookUpTable
          //
          if (n.name () == "SimFlowEnergyTransfer_ElectricalInverter_LookUpTable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_type > r (
              SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_ElectricalInverter_Simple
          //
          if (n.name () == "SimFlowEnergyTransfer_ElectricalInverter_Simple" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_ElectricalInverter_Simple_type > r (
              SimFlowEnergyTransfer_ElectricalInverter_Simple_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_ElectricalInverter_Simple_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad
          //
          if (n.name () == "SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_type > r (
              SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial
          //
          if (n.name () == "SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_type > r (
              SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad
          //
          if (n.name () == "SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_type > r (
              SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial
          //
          if (n.name () == "SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_type > r (
              SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil
          //
          if (n.name () == "SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_type > r (
              SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_type > r (
              SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_type > r (
              SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_type > r (
              SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_type > r (
              SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_type > r (
              SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_type > r (
              SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_type > r (
              SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW
          //
          if (n.name () == "SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_type > r (
              SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_type > r (
              SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_type > r (
              SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_type > r (
              SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_type > r (
              SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExEarthToWater_Surface
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExEarthToWater_Surface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExEarthToWater_Surface_type > r (
              SimFlowEnergyTransfer_HeatExEarthToWater_Surface_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExEarthToWater_Surface_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExEarthToWater_Vertical
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExEarthToWater_Vertical" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_type > r (
              SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_type > r (
              SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatExWaterToWater_Pond
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatExWaterToWater_Pond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatExWaterToWater_Pond_type > r (
              SimFlowEnergyTransfer_HeatExWaterToWater_Pond_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatExWaterToWater_Pond_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_type > r (
              SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_type > r (
              SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_type > r (
              SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_type > r (
              SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_type > r (
              SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_type > r (
              SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_type > r (
              SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_type > r (
              SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_type > r (
              SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_type > r (
              SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_type > r (
              SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_type > r (
              SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_type > r (
              SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater
          //
          if (n.name () == "SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_type > r (
              SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_Humidifier_ElectricSteam
          //
          if (n.name () == "SimFlowEnergyTransfer_Humidifier_ElectricSteam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_Humidifier_ElectricSteam_type > r (
              SimFlowEnergyTransfer_Humidifier_ElectricSteam_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_Humidifier_ElectricSteam_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground
          //
          if (n.name () == "SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_type > r (
              SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_Beam
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_Beam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_Beam_type > r (
              SimFlowEnergyTransfer_RadiantDevice_Beam_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_Beam_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_type > r (
              SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_type > r (
              SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_type > r (
              SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_type > r (
              SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_type > r (
              SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_type > r (
              SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_HighTemp
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_HighTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_HighTemp_type > r (
              SimFlowEnergyTransfer_RadiantDevice_HighTemp_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_HighTemp_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_type > r (
              SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransfer_RadiantDevice_Slab
          //
          if (n.name () == "SimFlowEnergyTransfer_RadiantDevice_Slab" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransfer_RadiantDevice_Slab_type > r (
              SimFlowEnergyTransfer_RadiantDevice_Slab_traits::create (i, f, this));

            this->SimFlowEnergyTransfer_RadiantDevice_Slab_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater
          //
          if (n.name () == "SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_type > r (
              SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_traits::create (i, f, this));

            this->SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransferStorage_HotWaterTank_HeatPump
          //
          if (n.name () == "SimFlowEnergyTransferStorage_HotWaterTank_HeatPump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_type > r (
              SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_traits::create (i, f, this));

            this->SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransferStorage_HotWaterTank_Mixed
          //
          if (n.name () == "SimFlowEnergyTransferStorage_HotWaterTank_Mixed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransferStorage_HotWaterTank_Mixed_type > r (
              SimFlowEnergyTransferStorage_HotWaterTank_Mixed_traits::create (i, f, this));

            this->SimFlowEnergyTransferStorage_HotWaterTank_Mixed_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransferStorage_HotWaterTank_MixedTank
          //
          if (n.name () == "SimFlowEnergyTransferStorage_HotWaterTank_MixedTank" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_type > r (
              SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_traits::create (i, f, this));

            this->SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransferStorage_HotWaterTank_Stratified
          //
          if (n.name () == "SimFlowEnergyTransferStorage_HotWaterTank_Stratified" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransferStorage_HotWaterTank_Stratified_type > r (
              SimFlowEnergyTransferStorage_HotWaterTank_Stratified_traits::create (i, f, this));

            this->SimFlowEnergyTransferStorage_HotWaterTank_Stratified_.push_back (r);
            continue;
          }

          // SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank
          //
          if (n.name () == "SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_type > r (
              SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_traits::create (i, f, this));

            this->SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_.push_back (r);
            continue;
          }

          // SimFlowFitting_Default_Default
          //
          if (n.name () == "SimFlowFitting_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Default_Default_type > r (
              SimFlowFitting_Default_Default_traits::create (i, f, this));

            this->SimFlowFitting_Default_Default_.push_back (r);
            continue;
          }

          // SimFlowFitting_Difusser_Default
          //
          if (n.name () == "SimFlowFitting_Difusser_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Difusser_Default_type > r (
              SimFlowFitting_Difusser_Default_traits::create (i, f, this));

            this->SimFlowFitting_Difusser_Default_.push_back (r);
            continue;
          }

          // SimFlowFitting_Electrical_Transformer
          //
          if (n.name () == "SimFlowFitting_Electrical_Transformer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Electrical_Transformer_type > r (
              SimFlowFitting_Electrical_Transformer_traits::create (i, f, this));

            this->SimFlowFitting_Electrical_Transformer_.push_back (r);
            continue;
          }

          // SimFlowFitting_FlowElementProxy_Default
          //
          if (n.name () == "SimFlowFitting_FlowElementProxy_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_FlowElementProxy_Default_type > r (
              SimFlowFitting_FlowElementProxy_Default_traits::create (i, f, this));

            this->SimFlowFitting_FlowElementProxy_Default_.push_back (r);
            continue;
          }

          // SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop
          //
          if (n.name () == "SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_type > r (
              SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_traits::create (i, f, this));

            this->SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_.push_back (r);
            continue;
          }

          // SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop
          //
          if (n.name () == "SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_type > r (
              SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_traits::create (i, f, this));

            this->SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_.push_back (r);
            continue;
          }

          // SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop
          //
          if (n.name () == "SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_type > r (
              SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_traits::create (i, f, this));

            this->SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_.push_back (r);
            continue;
          }

          // SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop
          //
          if (n.name () == "SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_type > r (
              SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_traits::create (i, f, this));

            this->SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_AirMixer
          //
          if (n.name () == "SimFlowFitting_Mixer_AirMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_AirMixer_type > r (
              SimFlowFitting_Mixer_AirMixer_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_AirMixer_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_AirMixerOutdoor
          //
          if (n.name () == "SimFlowFitting_Mixer_AirMixerOutdoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_AirMixerOutdoor_type > r (
              SimFlowFitting_Mixer_AirMixerOutdoor_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_AirMixerOutdoor_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_AirMixerZoneReturn
          //
          if (n.name () == "SimFlowFitting_Mixer_AirMixerZoneReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_AirMixerZoneReturn_type > r (
              SimFlowFitting_Mixer_AirMixerZoneReturn_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_AirMixerZoneReturn_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_CondenserMixer
          //
          if (n.name () == "SimFlowFitting_Mixer_CondenserMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_CondenserMixer_type > r (
              SimFlowFitting_Mixer_CondenserMixer_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_CondenserMixer_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_DemandProxyMixer
          //
          if (n.name () == "SimFlowFitting_Mixer_DemandProxyMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_DemandProxyMixer_type > r (
              SimFlowFitting_Mixer_DemandProxyMixer_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_DemandProxyMixer_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_DemandProxyMixerAir
          //
          if (n.name () == "SimFlowFitting_Mixer_DemandProxyMixerAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_DemandProxyMixerAir_type > r (
              SimFlowFitting_Mixer_DemandProxyMixerAir_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_DemandProxyMixerAir_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_DemandProxyMixerWater
          //
          if (n.name () == "SimFlowFitting_Mixer_DemandProxyMixerWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_DemandProxyMixerWater_type > r (
              SimFlowFitting_Mixer_DemandProxyMixerWater_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_DemandProxyMixerWater_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_SteamMixer
          //
          if (n.name () == "SimFlowFitting_Mixer_SteamMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_SteamMixer_type > r (
              SimFlowFitting_Mixer_SteamMixer_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_SteamMixer_.push_back (r);
            continue;
          }

          // SimFlowFitting_Mixer_WaterMixer
          //
          if (n.name () == "SimFlowFitting_Mixer_WaterMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Mixer_WaterMixer_type > r (
              SimFlowFitting_Mixer_WaterMixer_traits::create (i, f, this));

            this->SimFlowFitting_Mixer_WaterMixer_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_AirSplitter
          //
          if (n.name () == "SimFlowFitting_Splitter_AirSplitter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_AirSplitter_type > r (
              SimFlowFitting_Splitter_AirSplitter_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_AirSplitter_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_AirSplitterZoneSupply
          //
          if (n.name () == "SimFlowFitting_Splitter_AirSplitterZoneSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_AirSplitterZoneSupply_type > r (
              SimFlowFitting_Splitter_AirSplitterZoneSupply_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_AirSplitterZoneSupply_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_CondenserSplitter
          //
          if (n.name () == "SimFlowFitting_Splitter_CondenserSplitter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_CondenserSplitter_type > r (
              SimFlowFitting_Splitter_CondenserSplitter_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_CondenserSplitter_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_DemandProxySplitter
          //
          if (n.name () == "SimFlowFitting_Splitter_DemandProxySplitter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_DemandProxySplitter_type > r (
              SimFlowFitting_Splitter_DemandProxySplitter_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_DemandProxySplitter_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_DemandProxySplitterAir
          //
          if (n.name () == "SimFlowFitting_Splitter_DemandProxySplitterAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_DemandProxySplitterAir_type > r (
              SimFlowFitting_Splitter_DemandProxySplitterAir_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_DemandProxySplitterAir_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_DemandProxySplitterWater
          //
          if (n.name () == "SimFlowFitting_Splitter_DemandProxySplitterWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_DemandProxySplitterWater_type > r (
              SimFlowFitting_Splitter_DemandProxySplitterWater_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_DemandProxySplitterWater_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_SteamSplitter
          //
          if (n.name () == "SimFlowFitting_Splitter_SteamSplitter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_SteamSplitter_type > r (
              SimFlowFitting_Splitter_SteamSplitter_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_SteamSplitter_.push_back (r);
            continue;
          }

          // SimFlowFitting_Splitter_WaterSplitter
          //
          if (n.name () == "SimFlowFitting_Splitter_WaterSplitter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowFitting_Splitter_WaterSplitter_type > r (
              SimFlowFitting_Splitter_WaterSplitter_traits::create (i, f, this));

            this->SimFlowFitting_Splitter_WaterSplitter_.push_back (r);
            continue;
          }

          // SimFlowMover_Default_Default
          //
          if (n.name () == "SimFlowMover_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Default_Default_type > r (
              SimFlowMover_Default_Default_traits::create (i, f, this));

            this->SimFlowMover_Default_Default_.push_back (r);
            continue;
          }

          // SimFlowMover_Fan_NightVentilation
          //
          if (n.name () == "SimFlowMover_Fan_NightVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Fan_NightVentilation_type > r (
              SimFlowMover_Fan_NightVentilation_traits::create (i, f, this));

            this->SimFlowMover_Fan_NightVentilation_.push_back (r);
            continue;
          }

          // SimFlowMover_Fan_Relief
          //
          if (n.name () == "SimFlowMover_Fan_Relief" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Fan_Relief_type > r (
              SimFlowMover_Fan_Relief_traits::create (i, f, this));

            this->SimFlowMover_Fan_Relief_.push_back (r);
            continue;
          }

          // SimFlowMover_Fan_ZoneExhaust
          //
          if (n.name () == "SimFlowMover_Fan_ZoneExhaust" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Fan_ZoneExhaust_type > r (
              SimFlowMover_Fan_ZoneExhaust_traits::create (i, f, this));

            this->SimFlowMover_Fan_ZoneExhaust_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_ConstantSpeedReturn
          //
          if (n.name () == "SimFlowMover_Pump_ConstantSpeedReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_ConstantSpeedReturn_type > r (
              SimFlowMover_Pump_ConstantSpeedReturn_traits::create (i, f, this));

            this->SimFlowMover_Pump_ConstantSpeedReturn_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_ConstantSpeedSupply
          //
          if (n.name () == "SimFlowMover_Pump_ConstantSpeedSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_ConstantSpeedSupply_type > r (
              SimFlowMover_Pump_ConstantSpeedSupply_traits::create (i, f, this));

            this->SimFlowMover_Pump_ConstantSpeedSupply_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_UserDefined
          //
          if (n.name () == "SimFlowMover_Pump_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_UserDefined_type > r (
              SimFlowMover_Pump_UserDefined_traits::create (i, f, this));

            this->SimFlowMover_Pump_UserDefined_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_VariableSpeedReturn
          //
          if (n.name () == "SimFlowMover_Pump_VariableSpeedReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_VariableSpeedReturn_type > r (
              SimFlowMover_Pump_VariableSpeedReturn_traits::create (i, f, this));

            this->SimFlowMover_Pump_VariableSpeedReturn_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_VariableSpeedSupply
          //
          if (n.name () == "SimFlowMover_Pump_VariableSpeedSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_VariableSpeedSupply_type > r (
              SimFlowMover_Pump_VariableSpeedSupply_traits::create (i, f, this));

            this->SimFlowMover_Pump_VariableSpeedSupply_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_VarSpeedCondensateReturn
          //
          if (n.name () == "SimFlowMover_Pump_VarSpeedCondensateReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_VarSpeedCondensateReturn_type > r (
              SimFlowMover_Pump_VarSpeedCondensateReturn_traits::create (i, f, this));

            this->SimFlowMover_Pump_VarSpeedCondensateReturn_.push_back (r);
            continue;
          }

          // SimFlowMover_Pump_VarSpeedCondensateSupply
          //
          if (n.name () == "SimFlowMover_Pump_VarSpeedCondensateSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_Pump_VarSpeedCondensateSupply_type > r (
              SimFlowMover_Pump_VarSpeedCondensateSupply_traits::create (i, f, this));

            this->SimFlowMover_Pump_VarSpeedCondensateSupply_.push_back (r);
            continue;
          }

          // SimFlowMover_PumpSet_ConstantSpeed2
          //
          if (n.name () == "SimFlowMover_PumpSet_ConstantSpeed2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_PumpSet_ConstantSpeed2_type > r (
              SimFlowMover_PumpSet_ConstantSpeed2_traits::create (i, f, this));

            this->SimFlowMover_PumpSet_ConstantSpeed2_.push_back (r);
            continue;
          }

          // SimFlowMover_PumpSet_ConstantSpeed3
          //
          if (n.name () == "SimFlowMover_PumpSet_ConstantSpeed3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_PumpSet_ConstantSpeed3_type > r (
              SimFlowMover_PumpSet_ConstantSpeed3_traits::create (i, f, this));

            this->SimFlowMover_PumpSet_ConstantSpeed3_.push_back (r);
            continue;
          }

          // SimFlowMover_PumpSet_VariableSpeed2
          //
          if (n.name () == "SimFlowMover_PumpSet_VariableSpeed2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_PumpSet_VariableSpeed2_type > r (
              SimFlowMover_PumpSet_VariableSpeed2_traits::create (i, f, this));

            this->SimFlowMover_PumpSet_VariableSpeed2_.push_back (r);
            continue;
          }

          // SimFlowMover_PumpSet_VariableSpeed3
          //
          if (n.name () == "SimFlowMover_PumpSet_VariableSpeed3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_PumpSet_VariableSpeed3_type > r (
              SimFlowMover_PumpSet_VariableSpeed3_traits::create (i, f, this));

            this->SimFlowMover_PumpSet_VariableSpeed3_.push_back (r);
            continue;
          }

          // SimFlowMover_ReturnFan_ComponentModel
          //
          if (n.name () == "SimFlowMover_ReturnFan_ComponentModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_ReturnFan_ComponentModel_type > r (
              SimFlowMover_ReturnFan_ComponentModel_traits::create (i, f, this));

            this->SimFlowMover_ReturnFan_ComponentModel_.push_back (r);
            continue;
          }

          // SimFlowMover_ReturnFan_ConstantVolume
          //
          if (n.name () == "SimFlowMover_ReturnFan_ConstantVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_ReturnFan_ConstantVolume_type > r (
              SimFlowMover_ReturnFan_ConstantVolume_traits::create (i, f, this));

            this->SimFlowMover_ReturnFan_ConstantVolume_.push_back (r);
            continue;
          }

          // SimFlowMover_ReturnFan_OnOff
          //
          if (n.name () == "SimFlowMover_ReturnFan_OnOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_ReturnFan_OnOff_type > r (
              SimFlowMover_ReturnFan_OnOff_traits::create (i, f, this));

            this->SimFlowMover_ReturnFan_OnOff_.push_back (r);
            continue;
          }

          // SimFlowMover_ReturnFan_VariableVolume
          //
          if (n.name () == "SimFlowMover_ReturnFan_VariableVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_ReturnFan_VariableVolume_type > r (
              SimFlowMover_ReturnFan_VariableVolume_traits::create (i, f, this));

            this->SimFlowMover_ReturnFan_VariableVolume_.push_back (r);
            continue;
          }

          // SimFlowMover_SupplyFan_ComponentModel
          //
          if (n.name () == "SimFlowMover_SupplyFan_ComponentModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_SupplyFan_ComponentModel_type > r (
              SimFlowMover_SupplyFan_ComponentModel_traits::create (i, f, this));

            this->SimFlowMover_SupplyFan_ComponentModel_.push_back (r);
            continue;
          }

          // SimFlowMover_SupplyFan_ConstantVolume
          //
          if (n.name () == "SimFlowMover_SupplyFan_ConstantVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_SupplyFan_ConstantVolume_type > r (
              SimFlowMover_SupplyFan_ConstantVolume_traits::create (i, f, this));

            this->SimFlowMover_SupplyFan_ConstantVolume_.push_back (r);
            continue;
          }

          // SimFlowMover_SupplyFan_OnOff
          //
          if (n.name () == "SimFlowMover_SupplyFan_OnOff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_SupplyFan_OnOff_type > r (
              SimFlowMover_SupplyFan_OnOff_traits::create (i, f, this));

            this->SimFlowMover_SupplyFan_OnOff_.push_back (r);
            continue;
          }

          // SimFlowMover_SupplyFan_VariableVolume
          //
          if (n.name () == "SimFlowMover_SupplyFan_VariableVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowMover_SupplyFan_VariableVolume_type > r (
              SimFlowMover_SupplyFan_VariableVolume_traits::create (i, f, this));

            this->SimFlowMover_SupplyFan_VariableVolume_.push_back (r);
            continue;
          }

          // SimFlowPlant_Boiler_BoilerHotWater
          //
          if (n.name () == "SimFlowPlant_Boiler_BoilerHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Boiler_BoilerHotWater_type > r (
              SimFlowPlant_Boiler_BoilerHotWater_traits::create (i, f, this));

            this->SimFlowPlant_Boiler_BoilerHotWater_.push_back (r);
            continue;
          }

          // SimFlowPlant_Boiler_BoilerSteam
          //
          if (n.name () == "SimFlowPlant_Boiler_BoilerSteam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Boiler_BoilerSteam_type > r (
              SimFlowPlant_Boiler_BoilerSteam_traits::create (i, f, this));

            this->SimFlowPlant_Boiler_BoilerSteam_.push_back (r);
            continue;
          }

          // SimFlowPlant_Boiler_UserDefined
          //
          if (n.name () == "SimFlowPlant_Boiler_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Boiler_UserDefined_type > r (
              SimFlowPlant_Boiler_UserDefined_traits::create (i, f, this));

            this->SimFlowPlant_Boiler_UserDefined_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_Absorption
          //
          if (n.name () == "SimFlowPlant_Chiller_Absorption" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_Absorption_type > r (
              SimFlowPlant_Chiller_Absorption_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_Absorption_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_AbsorptionIndirect
          //
          if (n.name () == "SimFlowPlant_Chiller_AbsorptionIndirect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_AbsorptionIndirect_type > r (
              SimFlowPlant_Chiller_AbsorptionIndirect_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_AbsorptionIndirect_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine
          //
          if (n.name () == "SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_type > r (
              SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP
          //
          if (n.name () == "SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_type > r (
              SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_ChillerVaporCompressionElectric
          //
          if (n.name () == "SimFlowPlant_Chiller_ChillerVaporCompressionElectric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_ChillerVaporCompressionElectric_type > r (
              SimFlowPlant_Chiller_ChillerVaporCompressionElectric_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR
          //
          if (n.name () == "SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_type > r (
              SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR
          //
          if (n.name () == "SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_type > r (
              SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven
          //
          if (n.name () == "SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_type > r (
              SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_.push_back (r);
            continue;
          }

          // SimFlowPlant_Chiller_UserDefined
          //
          if (n.name () == "SimFlowPlant_Chiller_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_Chiller_UserDefined_type > r (
              SimFlowPlant_Chiller_UserDefined_traits::create (i, f, this));

            this->SimFlowPlant_Chiller_UserDefined_.push_back (r);
            continue;
          }

          // SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect
          //
          if (n.name () == "SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_type > r (
              SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_traits::create (i, f, this));

            this->SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_.push_back (r);
            continue;
          }

          // SimFlowPlant_ChillerHeater_AbsorptionDirectFired
          //
          if (n.name () == "SimFlowPlant_ChillerHeater_AbsorptionDirectFired" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ChillerHeater_AbsorptionDirectFired_type > r (
              SimFlowPlant_ChillerHeater_AbsorptionDirectFired_traits::create (i, f, this));

            this->SimFlowPlant_ChillerHeater_AbsorptionDirectFired_.push_back (r);
            continue;
          }

          // SimFlowPlant_ChillerHeater_PerformanceElectricEIR
          //
          if (n.name () == "SimFlowPlant_ChillerHeater_PerformanceElectricEIR" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ChillerHeater_PerformanceElectricEIR_type > r (
              SimFlowPlant_ChillerHeater_PerformanceElectricEIR_traits::create (i, f, this));

            this->SimFlowPlant_ChillerHeater_PerformanceElectricEIR_.push_back (r);
            continue;
          }

          // SimFlowPlant_CoolingTower_SingleSpeed
          //
          if (n.name () == "SimFlowPlant_CoolingTower_SingleSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingTower_SingleSpeed_type > r (
              SimFlowPlant_CoolingTower_SingleSpeed_traits::create (i, f, this));

            this->SimFlowPlant_CoolingTower_SingleSpeed_.push_back (r);
            continue;
          }

          // SimFlowPlant_CoolingTower_TwoSpeed
          //
          if (n.name () == "SimFlowPlant_CoolingTower_TwoSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingTower_TwoSpeed_type > r (
              SimFlowPlant_CoolingTower_TwoSpeed_traits::create (i, f, this));

            this->SimFlowPlant_CoolingTower_TwoSpeed_.push_back (r);
            continue;
          }

          // SimFlowPlant_CoolingTower_UserDefined
          //
          if (n.name () == "SimFlowPlant_CoolingTower_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingTower_UserDefined_type > r (
              SimFlowPlant_CoolingTower_UserDefined_traits::create (i, f, this));

            this->SimFlowPlant_CoolingTower_UserDefined_.push_back (r);
            continue;
          }

          // SimFlowPlant_CoolingTower_VariableSpeed
          //
          if (n.name () == "SimFlowPlant_CoolingTower_VariableSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingTower_VariableSpeed_type > r (
              SimFlowPlant_CoolingTower_VariableSpeed_traits::create (i, f, this));

            this->SimFlowPlant_CoolingTower_VariableSpeed_.push_back (r);
            continue;
          }

          // SimFlowPlant_CoolingTower_VariableSpeed_Merkel
          //
          if (n.name () == "SimFlowPlant_CoolingTower_VariableSpeed_Merkel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingTower_VariableSpeed_Merkel_type > r (
              SimFlowPlant_CoolingTower_VariableSpeed_Merkel_traits::create (i, f, this));

            this->SimFlowPlant_CoolingTower_VariableSpeed_Merkel_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_CombustionTurbine
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_CombustionTurbine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_CombustionTurbine_type > r (
              SimFlowPlant_ElectricalGenerator_CombustionTurbine_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_CombustionTurbine_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_DefaultGenerator
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_DefaultGenerator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_DefaultGenerator_type > r (
              SimFlowPlant_ElectricalGenerator_DefaultGenerator_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_DefaultGenerator_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCell
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCell" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCell_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCell_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCell_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellAirSupply
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellAirSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellInverter
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellInverter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellInverter_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellInverter_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellInverter_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellPowerModule
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellPowerModule" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellStackCooler
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellStackCooler" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_type > r (
              SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelEquipment
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelEquipment_type > r (
              SimFlowPlant_ElectricalGenerator_FuelEquipment_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelEquipment_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_FuelSupply
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_FuelSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_FuelSupply_type > r (
              SimFlowPlant_ElectricalGenerator_FuelSupply_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_FuelSupply_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_InternalCombustionEngine
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_InternalCombustionEngine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_type > r (
              SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_MicroCHP
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_MicroCHP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_MicroCHP_type > r (
              SimFlowPlant_ElectricalGenerator_MicroCHP_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_MicroCHP_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_MicroTurbine
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_MicroTurbine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_MicroTurbine_type > r (
              SimFlowPlant_ElectricalGenerator_MicroTurbine_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_MicroTurbine_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_Photovoltaic
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_Photovoltaic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_Photovoltaic_type > r (
              SimFlowPlant_ElectricalGenerator_Photovoltaic_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_Photovoltaic_.push_back (r);
            continue;
          }

          // SimFlowPlant_ElectricalGenerator_WindTurbine
          //
          if (n.name () == "SimFlowPlant_ElectricalGenerator_WindTurbine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_ElectricalGenerator_WindTurbine_type > r (
              SimFlowPlant_ElectricalGenerator_WindTurbine_traits::create (i, f, this));

            this->SimFlowPlant_ElectricalGenerator_WindTurbine_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatAndPower_Default
          //
          if (n.name () == "SimFlowPlant_HeatAndPower_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatAndPower_Default_type > r (
              SimFlowPlant_HeatAndPower_Default_traits::create (i, f, this));

            this->SimFlowPlant_HeatAndPower_Default_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatExWaterToWater_Pond
          //
          if (n.name () == "SimFlowPlant_HeatExWaterToWater_Pond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatExWaterToWater_Pond_type > r (
              SimFlowPlant_HeatExWaterToWater_Pond_traits::create (i, f, this));

            this->SimFlowPlant_HeatExWaterToWater_Pond_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_AirToAir
          //
          if (n.name () == "SimFlowPlant_HeatPump_AirToAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_AirToAir_type > r (
              SimFlowPlant_HeatPump_AirToAir_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_AirToAir_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_AirToAir_MultiSpeed
          //
          if (n.name () == "SimFlowPlant_HeatPump_AirToAir_MultiSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_AirToAir_MultiSpeed_type > r (
              SimFlowPlant_HeatPump_AirToAir_MultiSpeed_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_AirToAir_MultiSpeed_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_CentralSystem
          //
          if (n.name () == "SimFlowPlant_HeatPump_CentralSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_CentralSystem_type > r (
              SimFlowPlant_HeatPump_CentralSystem_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_CentralSystem_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_GroundSource
          //
          if (n.name () == "SimFlowPlant_HeatPump_GroundSource" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_GroundSource_type > r (
              SimFlowPlant_HeatPump_GroundSource_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_GroundSource_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_WaterToAir
          //
          if (n.name () == "SimFlowPlant_HeatPump_WaterToAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_WaterToAir_type > r (
              SimFlowPlant_HeatPump_WaterToAir_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_WaterToAir_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling
          //
          if (n.name () == "SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_type > r (
              SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating
          //
          if (n.name () == "SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_type > r (
              SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling
          //
          if (n.name () == "SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_type > r (
              SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_.push_back (r);
            continue;
          }

          // SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating
          //
          if (n.name () == "SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_type > r (
              SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_traits::create (i, f, this));

            this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_type > r (
              SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_type > r (
              SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarPhotoVoltaic
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarPhotoVoltaic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarPhotoVoltaic_type > r (
              SimFlowPlant_SolarDevice_SolarPhotoVoltaic_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarPhotoVoltaic_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_type > r (
              SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarThermalAir
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarThermalAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarThermalAir_type > r (
              SimFlowPlant_SolarDevice_SolarThermalAir_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarThermalAir_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_type > r (
              SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_.push_back (r);
            continue;
          }

          // SimFlowPlant_SolarDevice_SolarThermalWater
          //
          if (n.name () == "SimFlowPlant_SolarDevice_SolarThermalWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowPlant_SolarDevice_SolarThermalWater_type > r (
              SimFlowPlant_SolarDevice_SolarThermalWater_traits::create (i, f, this));

            this->SimFlowPlant_SolarDevice_SolarThermalWater_.push_back (r);
            continue;
          }

          // SimFlowSegment_Default_Default
          //
          if (n.name () == "SimFlowSegment_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Default_Default_type > r (
              SimFlowSegment_Default_Default_traits::create (i, f, this));

            this->SimFlowSegment_Default_Default_.push_back (r);
            continue;
          }

          // SimFlowSegment_Duct_AirFlowNetworkDistribution
          //
          if (n.name () == "SimFlowSegment_Duct_AirFlowNetworkDistribution" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Duct_AirFlowNetworkDistribution_type > r (
              SimFlowSegment_Duct_AirFlowNetworkDistribution_traits::create (i, f, this));

            this->SimFlowSegment_Duct_AirFlowNetworkDistribution_.push_back (r);
            continue;
          }

          // SimFlowSegment_Duct_Default
          //
          if (n.name () == "SimFlowSegment_Duct_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Duct_Default_type > r (
              SimFlowSegment_Duct_Default_traits::create (i, f, this));

            this->SimFlowSegment_Duct_Default_.push_back (r);
            continue;
          }

          // SimFlowSegment_Filter_Bag
          //
          if (n.name () == "SimFlowSegment_Filter_Bag" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Filter_Bag_type > r (
              SimFlowSegment_Filter_Bag_traits::create (i, f, this));

            this->SimFlowSegment_Filter_Bag_.push_back (r);
            continue;
          }

          // SimFlowSegment_Filter_Default
          //
          if (n.name () == "SimFlowSegment_Filter_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Filter_Default_type > r (
              SimFlowSegment_Filter_Default_traits::create (i, f, this));

            this->SimFlowSegment_Filter_Default_.push_back (r);
            continue;
          }

          // SimFlowSegment_Filter_Electrostatic
          //
          if (n.name () == "SimFlowSegment_Filter_Electrostatic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Filter_Electrostatic_type > r (
              SimFlowSegment_Filter_Electrostatic_traits::create (i, f, this));

            this->SimFlowSegment_Filter_Electrostatic_.push_back (r);
            continue;
          }

          // SimFlowSegment_Filter_HEPA
          //
          if (n.name () == "SimFlowSegment_Filter_HEPA" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Filter_HEPA_type > r (
              SimFlowSegment_Filter_HEPA_traits::create (i, f, this));

            this->SimFlowSegment_Filter_HEPA_.push_back (r);
            continue;
          }

          // SimFlowSegment_Filter_Panel
          //
          if (n.name () == "SimFlowSegment_Filter_Panel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Filter_Panel_type > r (
              SimFlowSegment_Filter_Panel_traits::create (i, f, this));

            this->SimFlowSegment_Filter_Panel_.push_back (r);
            continue;
          }

          // SimFlowSegment_Grill_Return
          //
          if (n.name () == "SimFlowSegment_Grill_Return" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Grill_Return_type > r (
              SimFlowSegment_Grill_Return_traits::create (i, f, this));

            this->SimFlowSegment_Grill_Return_.push_back (r);
            continue;
          }

          // SimFlowSegment_Grill_Supply
          //
          if (n.name () == "SimFlowSegment_Grill_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Grill_Supply_type > r (
              SimFlowSegment_Grill_Supply_traits::create (i, f, this));

            this->SimFlowSegment_Grill_Supply_.push_back (r);
            continue;
          }

          // SimFlowSegment_Louver_Default
          //
          if (n.name () == "SimFlowSegment_Louver_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Louver_Default_type > r (
              SimFlowSegment_Louver_Default_traits::create (i, f, this));

            this->SimFlowSegment_Louver_Default_.push_back (r);
            continue;
          }

          // SimFlowSegment_Louver_Exhaust
          //
          if (n.name () == "SimFlowSegment_Louver_Exhaust" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Louver_Exhaust_type > r (
              SimFlowSegment_Louver_Exhaust_traits::create (i, f, this));

            this->SimFlowSegment_Louver_Exhaust_.push_back (r);
            continue;
          }

          // SimFlowSegment_Louver_Intake
          //
          if (n.name () == "SimFlowSegment_Louver_Intake" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Louver_Intake_type > r (
              SimFlowSegment_Louver_Intake_traits::create (i, f, this));

            this->SimFlowSegment_Louver_Intake_.push_back (r);
            continue;
          }

          // SimFlowSegment_Louver_Safety
          //
          if (n.name () == "SimFlowSegment_Louver_Safety" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Louver_Safety_type > r (
              SimFlowSegment_Louver_Safety_traits::create (i, f, this));

            this->SimFlowSegment_Louver_Safety_.push_back (r);
            continue;
          }

          // SimFlowSegment_Louver_Ventilation
          //
          if (n.name () == "SimFlowSegment_Louver_Ventilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Louver_Ventilation_type > r (
              SimFlowSegment_Louver_Ventilation_traits::create (i, f, this));

            this->SimFlowSegment_Louver_Ventilation_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_Adiabatic
          //
          if (n.name () == "SimFlowSegment_Pipe_Adiabatic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_Adiabatic_type > r (
              SimFlowSegment_Pipe_Adiabatic_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_Adiabatic_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_Adiabatic_Steam
          //
          if (n.name () == "SimFlowSegment_Pipe_Adiabatic_Steam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_Adiabatic_Steam_type > r (
              SimFlowSegment_Pipe_Adiabatic_Steam_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_Adiabatic_Steam_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_Indoor
          //
          if (n.name () == "SimFlowSegment_Pipe_Indoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_Indoor_type > r (
              SimFlowSegment_Pipe_Indoor_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_Indoor_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_Outdoor
          //
          if (n.name () == "SimFlowSegment_Pipe_Outdoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_Outdoor_type > r (
              SimFlowSegment_Pipe_Outdoor_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_Outdoor_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_Underground
          //
          if (n.name () == "SimFlowSegment_Pipe_Underground" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_Underground_type > r (
              SimFlowSegment_Pipe_Underground_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_Underground_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_UndergroundPipeCircuit
          //
          if (n.name () == "SimFlowSegment_Pipe_UndergroundPipeCircuit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_UndergroundPipeCircuit_type > r (
              SimFlowSegment_Pipe_UndergroundPipeCircuit_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_UndergroundPipeCircuit_.push_back (r);
            continue;
          }

          // SimFlowSegment_Pipe_UndergroundPipeSegment
          //
          if (n.name () == "SimFlowSegment_Pipe_UndergroundPipeSegment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Pipe_UndergroundPipeSegment_type > r (
              SimFlowSegment_Pipe_UndergroundPipeSegment_traits::create (i, f, this));

            this->SimFlowSegment_Pipe_UndergroundPipeSegment_.push_back (r);
            continue;
          }

          // SimFlowSegment_Plenum_DedicatedReturn
          //
          if (n.name () == "SimFlowSegment_Plenum_DedicatedReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Plenum_DedicatedReturn_type > r (
              SimFlowSegment_Plenum_DedicatedReturn_traits::create (i, f, this));

            this->SimFlowSegment_Plenum_DedicatedReturn_.push_back (r);
            continue;
          }

          // SimFlowSegment_Plenum_DedicatedSupply
          //
          if (n.name () == "SimFlowSegment_Plenum_DedicatedSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Plenum_DedicatedSupply_type > r (
              SimFlowSegment_Plenum_DedicatedSupply_traits::create (i, f, this));

            this->SimFlowSegment_Plenum_DedicatedSupply_.push_back (r);
            continue;
          }

          // SimFlowSegment_Plenum_SharedReturn
          //
          if (n.name () == "SimFlowSegment_Plenum_SharedReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Plenum_SharedReturn_type > r (
              SimFlowSegment_Plenum_SharedReturn_traits::create (i, f, this));

            this->SimFlowSegment_Plenum_SharedReturn_.push_back (r);
            continue;
          }

          // SimFlowSegment_Plenum_SharedSupply
          //
          if (n.name () == "SimFlowSegment_Plenum_SharedSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Plenum_SharedSupply_type > r (
              SimFlowSegment_Plenum_SharedSupply_traits::create (i, f, this));

            this->SimFlowSegment_Plenum_SharedSupply_.push_back (r);
            continue;
          }

          // SimFlowSegment_VirtualComponent_ConstantPressureDrop
          //
          if (n.name () == "SimFlowSegment_VirtualComponent_ConstantPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_VirtualComponent_ConstantPressureDrop_type > r (
              SimFlowSegment_VirtualComponent_ConstantPressureDrop_traits::create (i, f, this));

            this->SimFlowSegment_VirtualComponent_ConstantPressureDrop_.push_back (r);
            continue;
          }

          // SimFlowSegment_VirtualComponent_Leak
          //
          if (n.name () == "SimFlowSegment_VirtualComponent_Leak" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_VirtualComponent_Leak_type > r (
              SimFlowSegment_VirtualComponent_Leak_traits::create (i, f, this));

            this->SimFlowSegment_VirtualComponent_Leak_.push_back (r);
            continue;
          }

          // SimFlowSegment_VirtualComponent_LeakageRatio
          //
          if (n.name () == "SimFlowSegment_VirtualComponent_LeakageRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_VirtualComponent_LeakageRatio_type > r (
              SimFlowSegment_VirtualComponent_LeakageRatio_traits::create (i, f, this));

            this->SimFlowSegment_VirtualComponent_LeakageRatio_.push_back (r);
            continue;
          }

          // SimFlowSegment_Wire_Default
          //
          if (n.name () == "SimFlowSegment_Wire_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowSegment_Wire_Default_type > r (
              SimFlowSegment_Wire_Default_traits::create (i, f, this));

            this->SimFlowSegment_Wire_Default_.push_back (r);
            continue;
          }

          // SimFlowStorage_ElectricalStorage_BatteryBank
          //
          if (n.name () == "SimFlowStorage_ElectricalStorage_BatteryBank" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_ElectricalStorage_BatteryBank_type > r (
              SimFlowStorage_ElectricalStorage_BatteryBank_traits::create (i, f, this));

            this->SimFlowStorage_ElectricalStorage_BatteryBank_.push_back (r);
            continue;
          }

          // SimFlowStorage_ElectricalStorage_DefaultElectricalStorage
          //
          if (n.name () == "SimFlowStorage_ElectricalStorage_DefaultElectricalStorage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_type > r (
              SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_traits::create (i, f, this));

            this->SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_.push_back (r);
            continue;
          }

          // SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed
          //
          if (n.name () == "SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_type > r (
              SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_traits::create (i, f, this));

            this->SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_.push_back (r);
            continue;
          }

          // SimFlowStorage_ThermalStorage_ThermalStorageIceSimple
          //
          if (n.name () == "SimFlowStorage_ThermalStorage_ThermalStorageIceSimple" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_type > r (
              SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_traits::create (i, f, this));

            this->SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_.push_back (r);
            continue;
          }

          // SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed
          //
          if (n.name () == "SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_type > r (
              SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_traits::create (i, f, this));

            this->SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_.push_back (r);
            continue;
          }

          // SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified
          //
          if (n.name () == "SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_type > r (
              SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_traits::create (i, f, this));

            this->SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_.push_back (r);
            continue;
          }

          // SimFlowStorage_WaterStorage_CleanWater
          //
          if (n.name () == "SimFlowStorage_WaterStorage_CleanWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_WaterStorage_CleanWater_type > r (
              SimFlowStorage_WaterStorage_CleanWater_traits::create (i, f, this));

            this->SimFlowStorage_WaterStorage_CleanWater_.push_back (r);
            continue;
          }

          // SimFlowStorage_WaterStorage_GrayWater
          //
          if (n.name () == "SimFlowStorage_WaterStorage_GrayWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_WaterStorage_GrayWater_type > r (
              SimFlowStorage_WaterStorage_GrayWater_traits::create (i, f, this));

            this->SimFlowStorage_WaterStorage_GrayWater_.push_back (r);
            continue;
          }

          // SimFlowStorage_WaterStorage_RainWater
          //
          if (n.name () == "SimFlowStorage_WaterStorage_RainWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowStorage_WaterStorage_RainWater_type > r (
              SimFlowStorage_WaterStorage_RainWater_traits::create (i, f, this));

            this->SimFlowStorage_WaterStorage_RainWater_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_type > r (
              SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_type > r (
              SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_type > r (
              SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_type > r (
              SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_type > r (
              SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_type > r (
              SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_type > r (
              SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_type > r (
              SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_type > r (
              SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_ConstantVolume_Reheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_ConstantVolume_Reheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_type > r (
              SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_InletSideMixer
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_InletSideMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_InletSideMixer_type > r (
              SimFlowTerminal_AirTerminal_InletSideMixer_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_InletSideMixer_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_ParallelPIU_Reheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_ParallelPIU_Reheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_type > r (
              SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_SeriesPIU_Reheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_SeriesPIU_Reheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_type > r (
              SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_SingleDuctUserDefined
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_SingleDuctUserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_SingleDuctUserDefined_type > r (
              SimFlowTerminal_AirTerminal_SingleDuctUserDefined_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_SingleDuctUserDefined_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_SupplySideMixer
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_SupplySideMixer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_SupplySideMixer_type > r (
              SimFlowTerminal_AirTerminal_SupplySideMixer_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_SupplySideMixer_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_Uncontrolled
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_Uncontrolled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_Uncontrolled_type > r (
              SimFlowTerminal_AirTerminal_Uncontrolled_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_Uncontrolled_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_type > r (
              SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_type > r (
              SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_VAV_NoReheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_VAV_NoReheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_VAV_NoReheat_type > r (
              SimFlowTerminal_AirTerminal_VAV_NoReheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_VAV_NoReheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_VAV_Reheat
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_VAV_Reheat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_VAV_Reheat_type > r (
              SimFlowTerminal_AirTerminal_VAV_Reheat_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_VAV_Reheat_.push_back (r);
            continue;
          }

          // SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan
          //
          if (n.name () == "SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_type > r (
              SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_traits::create (i, f, this));

            this->SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_.push_back (r);
            continue;
          }

          // SimFlowTerminal_Default_Default
          //
          if (n.name () == "SimFlowTerminal_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_Default_Default_type > r (
              SimFlowTerminal_Default_Default_traits::create (i, f, this));

            this->SimFlowTerminal_Default_Default_.push_back (r);
            continue;
          }

          // SimFlowTerminal_ElectricalTerminalExterior_Default
          //
          if (n.name () == "SimFlowTerminal_ElectricalTerminalExterior_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_ElectricalTerminalExterior_Default_type > r (
              SimFlowTerminal_ElectricalTerminalExterior_Default_traits::create (i, f, this));

            this->SimFlowTerminal_ElectricalTerminalExterior_Default_.push_back (r);
            continue;
          }

          // SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet
          //
          if (n.name () == "SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_type > r (
              SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_traits::create (i, f, this));

            this->SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_.push_back (r);
            continue;
          }

          // SimFlowTerminal_ElectricalTerminalExterior_LightingFixture
          //
          if (n.name () == "SimFlowTerminal_ElectricalTerminalExterior_LightingFixture" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_type > r (
              SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_traits::create (i, f, this));

            this->SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_.push_back (r);
            continue;
          }

          // SimFlowTerminal_ElectricalTerminalInterior_Default
          //
          if (n.name () == "SimFlowTerminal_ElectricalTerminalInterior_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_ElectricalTerminalInterior_Default_type > r (
              SimFlowTerminal_ElectricalTerminalInterior_Default_traits::create (i, f, this));

            this->SimFlowTerminal_ElectricalTerminalInterior_Default_.push_back (r);
            continue;
          }

          // SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet
          //
          if (n.name () == "SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_type > r (
              SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_traits::create (i, f, this));

            this->SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_.push_back (r);
            continue;
          }

          // SimFlowTerminal_ElectricalTerminalInterior_LightingFixture
          //
          if (n.name () == "SimFlowTerminal_ElectricalTerminalInterior_LightingFixture" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_type > r (
              SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_traits::create (i, f, this));

            this->SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_DishWasher
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_DishWasher" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_DishWasher_type > r (
              SimFlowTerminal_PlumbingTerminal_DishWasher_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_DishWasher_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_type > r (
              SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_PlumbingFixture
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_PlumbingFixture" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_PlumbingFixture_type > r (
              SimFlowTerminal_PlumbingTerminal_PlumbingFixture_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_PlumbingFixture_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_Shower
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_Shower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_Shower_type > r (
              SimFlowTerminal_PlumbingTerminal_Shower_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_Shower_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_Sink
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_Sink" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_Sink_type > r (
              SimFlowTerminal_PlumbingTerminal_Sink_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_Sink_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_type > r (
              SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_Toilet
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_Toilet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_Toilet_type > r (
              SimFlowTerminal_PlumbingTerminal_Toilet_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_Toilet_.push_back (r);
            continue;
          }

          // SimFlowTerminal_PlumbingTerminal_Urinal
          //
          if (n.name () == "SimFlowTerminal_PlumbingTerminal_Urinal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_PlumbingTerminal_Urinal_type > r (
              SimFlowTerminal_PlumbingTerminal_Urinal_traits::create (i, f, this));

            this->SimFlowTerminal_PlumbingTerminal_Urinal_.push_back (r);
            continue;
          }

          // SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow
          //
          if (n.name () == "SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_type > r (
              SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_traits::create (i, f, this));

            this->SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_.push_back (r);
            continue;
          }

          // SimFluid_Concentration_Default
          //
          if (n.name () == "SimFluid_Concentration_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_Concentration_Default_type > r (
              SimFluid_Concentration_Default_traits::create (i, f, this));

            this->SimFluid_Concentration_Default_.push_back (r);
            continue;
          }

          // SimFluid_Default_Default
          //
          if (n.name () == "SimFluid_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_Default_Default_type > r (
              SimFluid_Default_Default_traits::create (i, f, this));

            this->SimFluid_Default_Default_.push_back (r);
            continue;
          }

          // SimFluid_GlycolConcentration_Default
          //
          if (n.name () == "SimFluid_GlycolConcentration_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_GlycolConcentration_Default_type > r (
              SimFluid_GlycolConcentration_Default_traits::create (i, f, this));

            this->SimFluid_GlycolConcentration_Default_.push_back (r);
            continue;
          }

          // SimFluid_Name_Default
          //
          if (n.name () == "SimFluid_Name_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_Name_Default_type > r (
              SimFluid_Name_Default_traits::create (i, f, this));

            this->SimFluid_Name_Default_.push_back (r);
            continue;
          }

          // SimFluid_Saturated_Default
          //
          if (n.name () == "SimFluid_Saturated_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_Saturated_Default_type > r (
              SimFluid_Saturated_Default_traits::create (i, f, this));

            this->SimFluid_Saturated_Default_.push_back (r);
            continue;
          }

          // SimFluid_SuperHeated_Default
          //
          if (n.name () == "SimFluid_SuperHeated_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_SuperHeated_Default_type > r (
              SimFluid_SuperHeated_Default_traits::create (i, f, this));

            this->SimFluid_SuperHeated_Default_.push_back (r);
            continue;
          }

          // SimFluid_Temperatures_Default
          //
          if (n.name () == "SimFluid_Temperatures_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFluid_Temperatures_Default_type > r (
              SimFluid_Temperatures_Default_traits::create (i, f, this));

            this->SimFluid_Temperatures_Default_.push_back (r);
            continue;
          }

          // SimFrameAndDividerProps_FrameAndDivider_Default
          //
          if (n.name () == "SimFrameAndDividerProps_FrameAndDivider_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFrameAndDividerProps_FrameAndDivider_Default_type > r (
              SimFrameAndDividerProps_FrameAndDivider_Default_traits::create (i, f, this));

            this->SimFrameAndDividerProps_FrameAndDivider_Default_.push_back (r);
            continue;
          }

          // SimFurnishingElement_Default_Default
          //
          if (n.name () == "SimFurnishingElement_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFurnishingElement_Default_Default_type > r (
              SimFurnishingElement_Default_Default_traits::create (i, f, this));

            this->SimFurnishingElement_Default_Default_.push_back (r);
            continue;
          }

          // SimFurnishingElementType_Furnishing_Default
          //
          if (n.name () == "SimFurnishingElementType_Furnishing_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFurnishingElementType_Furnishing_Default_type > r (
              SimFurnishingElementType_Furnishing_Default_traits::create (i, f, this));

            this->SimFurnishingElementType_Furnishing_Default_.push_back (r);
            continue;
          }

          // SimFurnishingElementType_Furniture_Default
          //
          if (n.name () == "SimFurnishingElementType_Furniture_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFurnishingElementType_Furniture_Default_type > r (
              SimFurnishingElementType_Furniture_Default_traits::create (i, f, this));

            this->SimFurnishingElementType_Furniture_Default_.push_back (r);
            continue;
          }

          // SimFurnitureType_Furniture_Default
          //
          if (n.name () == "SimFurnitureType_Furniture_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimFurnitureType_Furniture_Default_type > r (
              SimFurnitureType_Furniture_Default_traits::create (i, f, this));

            this->SimFurnitureType_Furniture_Default_.push_back (r);
            continue;
          }

          // SimGeomBooleanResult_BooleanClippingResult_Default
          //
          if (n.name () == "SimGeomBooleanResult_BooleanClippingResult_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomBooleanResult_BooleanClippingResult_Default_type > r (
              SimGeomBooleanResult_BooleanClippingResult_Default_traits::create (i, f, this));

            this->SimGeomBooleanResult_BooleanClippingResult_Default_.push_back (r);
            continue;
          }

          // SimGeomBooleanResult_BooleanResult_Default
          //
          if (n.name () == "SimGeomBooleanResult_BooleanResult_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomBooleanResult_BooleanResult_Default_type > r (
              SimGeomBooleanResult_BooleanResult_Default_traits::create (i, f, this));

            this->SimGeomBooleanResult_BooleanResult_Default_.push_back (r);
            continue;
          }

          // SimGeomBoundingBox_BoundingBox_Default
          //
          if (n.name () == "SimGeomBoundingBox_BoundingBox_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomBoundingBox_BoundingBox_Default_type > r (
              SimGeomBoundingBox_BoundingBox_Default_traits::create (i, f, this));

            this->SimGeomBoundingBox_BoundingBox_Default_.push_back (r);
            continue;
          }

          // SimGeomCsgPrimative3D_CsgPrimative3D_Block
          //
          if (n.name () == "SimGeomCsgPrimative3D_CsgPrimative3D_Block" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCsgPrimative3D_CsgPrimative3D_Block_type > r (
              SimGeomCsgPrimative3D_CsgPrimative3D_Block_traits::create (i, f, this));

            this->SimGeomCsgPrimative3D_CsgPrimative3D_Block_.push_back (r);
            continue;
          }

          // SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid
          //
          if (n.name () == "SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_type > r (
              SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_traits::create (i, f, this));

            this->SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_.push_back (r);
            continue;
          }

          // SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone
          //
          if (n.name () == "SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_type > r (
              SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_traits::create (i, f, this));

            this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_.push_back (r);
            continue;
          }

          // SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder
          //
          if (n.name () == "SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_type > r (
              SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_traits::create (i, f, this));

            this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_.push_back (r);
            continue;
          }

          // SimGeomCsgPrimative3D_CsgPrimative3D_Sphere
          //
          if (n.name () == "SimGeomCsgPrimative3D_CsgPrimative3D_Sphere" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_type > r (
              SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_traits::create (i, f, this));

            this->SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_.push_back (r);
            continue;
          }

          // SimGeomCurve_2DCompositeCurve_Default
          //
          if (n.name () == "SimGeomCurve_2DCompositeCurve_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_2DCompositeCurve_Default_type > r (
              SimGeomCurve_2DCompositeCurve_Default_traits::create (i, f, this));

            this->SimGeomCurve_2DCompositeCurve_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_BoundedCurve_Default
          //
          if (n.name () == "SimGeomCurve_BoundedCurve_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_BoundedCurve_Default_type > r (
              SimGeomCurve_BoundedCurve_Default_traits::create (i, f, this));

            this->SimGeomCurve_BoundedCurve_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_Circle_Default
          //
          if (n.name () == "SimGeomCurve_Circle_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_Circle_Default_type > r (
              SimGeomCurve_Circle_Default_traits::create (i, f, this));

            this->SimGeomCurve_Circle_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_CompositeCurve_Default
          //
          if (n.name () == "SimGeomCurve_CompositeCurve_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_CompositeCurve_Default_type > r (
              SimGeomCurve_CompositeCurve_Default_traits::create (i, f, this));

            this->SimGeomCurve_CompositeCurve_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_CompositeCurveSegment_Default
          //
          if (n.name () == "SimGeomCurve_CompositeCurveSegment_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_CompositeCurveSegment_Default_type > r (
              SimGeomCurve_CompositeCurveSegment_Default_traits::create (i, f, this));

            this->SimGeomCurve_CompositeCurveSegment_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_Ellipse_Default
          //
          if (n.name () == "SimGeomCurve_Ellipse_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_Ellipse_Default_type > r (
              SimGeomCurve_Ellipse_Default_traits::create (i, f, this));

            this->SimGeomCurve_Ellipse_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_Line_Default
          //
          if (n.name () == "SimGeomCurve_Line_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_Line_Default_type > r (
              SimGeomCurve_Line_Default_traits::create (i, f, this));

            this->SimGeomCurve_Line_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_OffsetCurve2D_Default
          //
          if (n.name () == "SimGeomCurve_OffsetCurve2D_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_OffsetCurve2D_Default_type > r (
              SimGeomCurve_OffsetCurve2D_Default_traits::create (i, f, this));

            this->SimGeomCurve_OffsetCurve2D_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_OffsetCurve3D_Default
          //
          if (n.name () == "SimGeomCurve_OffsetCurve3D_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_OffsetCurve3D_Default_type > r (
              SimGeomCurve_OffsetCurve3D_Default_traits::create (i, f, this));

            this->SimGeomCurve_OffsetCurve3D_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_Polyline_Default
          //
          if (n.name () == "SimGeomCurve_Polyline_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_Polyline_Default_type > r (
              SimGeomCurve_Polyline_Default_traits::create (i, f, this));

            this->SimGeomCurve_Polyline_Default_.push_back (r);
            continue;
          }

          // SimGeomCurve_TrimmedCurve_Default
          //
          if (n.name () == "SimGeomCurve_TrimmedCurve_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomCurve_TrimmedCurve_Default_type > r (
              SimGeomCurve_TrimmedCurve_Default_traits::create (i, f, this));

            this->SimGeomCurve_TrimmedCurve_Default_.push_back (r);
            continue;
          }

          // SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace
          //
          if (n.name () == "SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_type > r (
              SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_traits::create (i, f, this));

            this->SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_.push_back (r);
            continue;
          }

          // SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace
          //
          if (n.name () == "SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_type > r (
              SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_traits::create (i, f, this));

            this->SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_.push_back (r);
            continue;
          }

          // SimGeomPoint_Point_CartesianPoint
          //
          if (n.name () == "SimGeomPoint_Point_CartesianPoint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomPoint_Point_CartesianPoint_type > r (
              SimGeomPoint_Point_CartesianPoint_traits::create (i, f, this));

            this->SimGeomPoint_Point_CartesianPoint_.push_back (r);
            continue;
          }

          // SimGeomPoint_Point_PointOnCurve
          //
          if (n.name () == "SimGeomPoint_Point_PointOnCurve" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomPoint_Point_PointOnCurve_type > r (
              SimGeomPoint_Point_PointOnCurve_traits::create (i, f, this));

            this->SimGeomPoint_Point_PointOnCurve_.push_back (r);
            continue;
          }

          // SimGeomPoint_Point_PointOnSurface
          //
          if (n.name () == "SimGeomPoint_Point_PointOnSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomPoint_Point_PointOnSurface_type > r (
              SimGeomPoint_Point_PointOnSurface_traits::create (i, f, this));

            this->SimGeomPoint_Point_PointOnSurface_.push_back (r);
            continue;
          }

          // SimGeomSet_GeometricCurveSet_Default
          //
          if (n.name () == "SimGeomSet_GeometricCurveSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSet_GeometricCurveSet_Default_type > r (
              SimGeomSet_GeometricCurveSet_Default_traits::create (i, f, this));

            this->SimGeomSet_GeometricCurveSet_Default_.push_back (r);
            continue;
          }

          // SimGeomSet_GeometricSet_Default
          //
          if (n.name () == "SimGeomSet_GeometricSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSet_GeometricSet_Default_type > r (
              SimGeomSet_GeometricSet_Default_traits::create (i, f, this));

            this->SimGeomSet_GeometricSet_Default_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_CSGSolid_Default
          //
          if (n.name () == "SimGeomSolidModel_CSGSolid_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_CSGSolid_Default_type > r (
              SimGeomSolidModel_CSGSolid_Default_traits::create (i, f, this));

            this->SimGeomSolidModel_CSGSolid_Default_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_FacetedBrep_Default
          //
          if (n.name () == "SimGeomSolidModel_FacetedBrep_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_FacetedBrep_Default_type > r (
              SimGeomSolidModel_FacetedBrep_Default_traits::create (i, f, this));

            this->SimGeomSolidModel_FacetedBrep_Default_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_FacetedBrepWithVoids_Default
          //
          if (n.name () == "SimGeomSolidModel_FacetedBrepWithVoids_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_FacetedBrepWithVoids_Default_type > r (
              SimGeomSolidModel_FacetedBrepWithVoids_Default_traits::create (i, f, this));

            this->SimGeomSolidModel_FacetedBrepWithVoids_Default_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_ManifoldSolidBrep_Default
          //
          if (n.name () == "SimGeomSolidModel_ManifoldSolidBrep_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_ManifoldSolidBrep_Default_type > r (
              SimGeomSolidModel_ManifoldSolidBrep_Default_traits::create (i, f, this));

            this->SimGeomSolidModel_ManifoldSolidBrep_Default_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid
          //
          if (n.name () == "SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_type > r (
              SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_traits::create (i, f, this));

            this->SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid
          //
          if (n.name () == "SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_type > r (
              SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_traits::create (i, f, this));

            this->SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_.push_back (r);
            continue;
          }

          // SimGeomSolidModel_SweptDiskSolid_Default
          //
          if (n.name () == "SimGeomSolidModel_SweptDiskSolid_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSolidModel_SweptDiskSolid_Default_type > r (
              SimGeomSolidModel_SweptDiskSolid_Default_traits::create (i, f, this));

            this->SimGeomSolidModel_SweptDiskSolid_Default_.push_back (r);
            continue;
          }

          // SimGeomSurface_BoundedSurface_CurveBoundedPlane
          //
          if (n.name () == "SimGeomSurface_BoundedSurface_CurveBoundedPlane" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_BoundedSurface_CurveBoundedPlane_type > r (
              SimGeomSurface_BoundedSurface_CurveBoundedPlane_traits::create (i, f, this));

            this->SimGeomSurface_BoundedSurface_CurveBoundedPlane_.push_back (r);
            continue;
          }

          // SimGeomSurface_BoundedSurface_Default
          //
          if (n.name () == "SimGeomSurface_BoundedSurface_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_BoundedSurface_Default_type > r (
              SimGeomSurface_BoundedSurface_Default_traits::create (i, f, this));

            this->SimGeomSurface_BoundedSurface_Default_.push_back (r);
            continue;
          }

          // SimGeomSurface_BoundedSurface_RectangularTrimmedSurface
          //
          if (n.name () == "SimGeomSurface_BoundedSurface_RectangularTrimmedSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_type > r (
              SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_traits::create (i, f, this));

            this->SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_.push_back (r);
            continue;
          }

          // SimGeomSurface_Default_Default
          //
          if (n.name () == "SimGeomSurface_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_Default_Default_type > r (
              SimGeomSurface_Default_Default_traits::create (i, f, this));

            this->SimGeomSurface_Default_Default_.push_back (r);
            continue;
          }

          // SimGeomSurface_ElementarySurface_Default
          //
          if (n.name () == "SimGeomSurface_ElementarySurface_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_ElementarySurface_Default_type > r (
              SimGeomSurface_ElementarySurface_Default_traits::create (i, f, this));

            this->SimGeomSurface_ElementarySurface_Default_.push_back (r);
            continue;
          }

          // SimGeomSurface_ElementarySurface_Plane
          //
          if (n.name () == "SimGeomSurface_ElementarySurface_Plane" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_ElementarySurface_Plane_type > r (
              SimGeomSurface_ElementarySurface_Plane_traits::create (i, f, this));

            this->SimGeomSurface_ElementarySurface_Plane_.push_back (r);
            continue;
          }

          // SimGeomSurface_SweptSurface_Default
          //
          if (n.name () == "SimGeomSurface_SweptSurface_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_SweptSurface_Default_type > r (
              SimGeomSurface_SweptSurface_Default_traits::create (i, f, this));

            this->SimGeomSurface_SweptSurface_Default_.push_back (r);
            continue;
          }

          // SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion
          //
          if (n.name () == "SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_type > r (
              SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_traits::create (i, f, this));

            this->SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_.push_back (r);
            continue;
          }

          // SimGeomSurface_SweptSurface_SurfaceOfRevolution
          //
          if (n.name () == "SimGeomSurface_SweptSurface_SurfaceOfRevolution" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurface_SweptSurface_SurfaceOfRevolution_type > r (
              SimGeomSurface_SweptSurface_SurfaceOfRevolution_traits::create (i, f, this));

            this->SimGeomSurface_SweptSurface_SurfaceOfRevolution_.push_back (r);
            continue;
          }

          // SimGeomSurfaceModel_FaceBasedSurfaceModel_Default
          //
          if (n.name () == "SimGeomSurfaceModel_FaceBasedSurfaceModel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_type > r (
              SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_traits::create (i, f, this));

            this->SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_.push_back (r);
            continue;
          }

          // SimGeomSurfaceModel_ShellBasedSurfaceModel_Default
          //
          if (n.name () == "SimGeomSurfaceModel_ShellBasedSurfaceModel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_type > r (
              SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_traits::create (i, f, this));

            this->SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_.push_back (r);
            continue;
          }

          // SimGeomVector_Vector_Default
          //
          if (n.name () == "SimGeomVector_Vector_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomVector_Vector_Default_type > r (
              SimGeomVector_Vector_Default_traits::create (i, f, this));

            this->SimGeomVector_Vector_Default_.push_back (r);
            continue;
          }

          // SimGeomVector_Vector_Direction
          //
          if (n.name () == "SimGeomVector_Vector_Direction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGeomVector_Vector_Direction_type > r (
              SimGeomVector_Vector_Direction_traits::create (i, f, this));

            this->SimGeomVector_Vector_Direction_.push_back (r);
            continue;
          }

          // SimGlazingPanelParams_GlazingPanel_Glazing
          //
          if (n.name () == "SimGlazingPanelParams_GlazingPanel_Glazing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGlazingPanelParams_GlazingPanel_Glazing_type > r (
              SimGlazingPanelParams_GlazingPanel_Glazing_traits::create (i, f, this));

            this->SimGlazingPanelParams_GlazingPanel_Glazing_.push_back (r);
            continue;
          }

          // SimGridAxis_GridAxis_Default
          //
          if (n.name () == "SimGridAxis_GridAxis_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGridAxis_GridAxis_Default_type > r (
              SimGridAxis_GridAxis_Default_traits::create (i, f, this));

            this->SimGridAxis_GridAxis_Default_.push_back (r);
            continue;
          }

          // SimGridPlacement_GridPlacement_Default
          //
          if (n.name () == "SimGridPlacement_GridPlacement_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGridPlacement_GridPlacement_Default_type > r (
              SimGridPlacement_GridPlacement_Default_traits::create (i, f, this));

            this->SimGridPlacement_GridPlacement_Default_.push_back (r);
            continue;
          }

          // SimGroundHeatTransferBasement_BasementTransferModel_Default
          //
          if (n.name () == "SimGroundHeatTransferBasement_BasementTransferModel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroundHeatTransferBasement_BasementTransferModel_Default_type > r (
              SimGroundHeatTransferBasement_BasementTransferModel_Default_traits::create (i, f, this));

            this->SimGroundHeatTransferBasement_BasementTransferModel_Default_.push_back (r);
            continue;
          }

          // SimGroundHeatTransferSlab_SlabTransferModel_Default
          //
          if (n.name () == "SimGroundHeatTransferSlab_SlabTransferModel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroundHeatTransferSlab_SlabTransferModel_Default_type > r (
              SimGroundHeatTransferSlab_SlabTransferModel_Default_traits::create (i, f, this));

            this->SimGroundHeatTransferSlab_SlabTransferModel_Default_.push_back (r);
            continue;
          }

          // SimGroup_BldgCompGroup_AirTerminal
          //
          if (n.name () == "SimGroup_BldgCompGroup_AirTerminal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgCompGroup_AirTerminal_type > r (
              SimGroup_BldgCompGroup_AirTerminal_traits::create (i, f, this));

            this->SimGroup_BldgCompGroup_AirTerminal_.push_back (r);
            continue;
          }

          // SimGroup_BldgCompGroup_Coil
          //
          if (n.name () == "SimGroup_BldgCompGroup_Coil" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgCompGroup_Coil_type > r (
              SimGroup_BldgCompGroup_Coil_traits::create (i, f, this));

            this->SimGroup_BldgCompGroup_Coil_.push_back (r);
            continue;
          }

          // SimGroup_BldgCompGroup_Default
          //
          if (n.name () == "SimGroup_BldgCompGroup_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgCompGroup_Default_type > r (
              SimGroup_BldgCompGroup_Default_traits::create (i, f, this));

            this->SimGroup_BldgCompGroup_Default_.push_back (r);
            continue;
          }

          // SimGroup_BldgCompGroup_Sensor
          //
          if (n.name () == "SimGroup_BldgCompGroup_Sensor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgCompGroup_Sensor_type > r (
              SimGroup_BldgCompGroup_Sensor_traits::create (i, f, this));

            this->SimGroup_BldgCompGroup_Sensor_.push_back (r);
            continue;
          }

          // SimGroup_BldgCompGroup_ZoneController
          //
          if (n.name () == "SimGroup_BldgCompGroup_ZoneController" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgCompGroup_ZoneController_type > r (
              SimGroup_BldgCompGroup_ZoneController_traits::create (i, f, this));

            this->SimGroup_BldgCompGroup_ZoneController_.push_back (r);
            continue;
          }

          // SimGroup_BldgCompGroup_ZoneEquipment
          //
          if (n.name () == "SimGroup_BldgCompGroup_ZoneEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgCompGroup_ZoneEquipment_type > r (
              SimGroup_BldgCompGroup_ZoneEquipment_traits::create (i, f, this));

            this->SimGroup_BldgCompGroup_ZoneEquipment_.push_back (r);
            continue;
          }

          // SimGroup_BldgElementGroup_Default
          //
          if (n.name () == "SimGroup_BldgElementGroup_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BldgElementGroup_Default_type > r (
              SimGroup_BldgElementGroup_Default_traits::create (i, f, this));

            this->SimGroup_BldgElementGroup_Default_.push_back (r);
            continue;
          }

          // SimGroup_BuildingGroup_Default
          //
          if (n.name () == "SimGroup_BuildingGroup_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_BuildingGroup_Default_type > r (
              SimGroup_BuildingGroup_Default_traits::create (i, f, this));

            this->SimGroup_BuildingGroup_Default_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_AirConnections
          //
          if (n.name () == "SimGroup_ConnectorList_AirConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_AirConnections_type > r (
              SimGroup_ConnectorList_AirConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_AirConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_ChilledWaterConnections
          //
          if (n.name () == "SimGroup_ConnectorList_ChilledWaterConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_ChilledWaterConnections_type > r (
              SimGroup_ConnectorList_ChilledWaterConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_ChilledWaterConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_CondenserConnections
          //
          if (n.name () == "SimGroup_ConnectorList_CondenserConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_CondenserConnections_type > r (
              SimGroup_ConnectorList_CondenserConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_CondenserConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_ControllerConnections
          //
          if (n.name () == "SimGroup_ConnectorList_ControllerConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_ControllerConnections_type > r (
              SimGroup_ConnectorList_ControllerConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_ControllerConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_HotWaterConnections
          //
          if (n.name () == "SimGroup_ConnectorList_HotWaterConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_HotWaterConnections_type > r (
              SimGroup_ConnectorList_HotWaterConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_HotWaterConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_ServiceHotWaterConnections
          //
          if (n.name () == "SimGroup_ConnectorList_ServiceHotWaterConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_ServiceHotWaterConnections_type > r (
              SimGroup_ConnectorList_ServiceHotWaterConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_ServiceHotWaterConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_SimConnections
          //
          if (n.name () == "SimGroup_ConnectorList_SimConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_SimConnections_type > r (
              SimGroup_ConnectorList_SimConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_SimConnections_.push_back (r);
            continue;
          }

          // SimGroup_ConnectorList_SteamConnections
          //
          if (n.name () == "SimGroup_ConnectorList_SteamConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ConnectorList_SteamConnections_type > r (
              SimGroup_ConnectorList_SteamConnections_traits::create (i, f, this));

            this->SimGroup_ConnectorList_SteamConnections_.push_back (r);
            continue;
          }

          // SimGroup_ControllerList_Default
          //
          if (n.name () == "SimGroup_ControllerList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_ControllerList_Default_type > r (
              SimGroup_ControllerList_Default_traits::create (i, f, this));

            this->SimGroup_ControllerList_Default_.push_back (r);
            continue;
          }

          // SimGroup_DefaultGroup_Default
          //
          if (n.name () == "SimGroup_DefaultGroup_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_DefaultGroup_Default_type > r (
              SimGroup_DefaultGroup_Default_traits::create (i, f, this));

            this->SimGroup_DefaultGroup_Default_.push_back (r);
            continue;
          }

          // SimGroup_DefaultList_Default
          //
          if (n.name () == "SimGroup_DefaultList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_DefaultList_Default_type > r (
              SimGroup_DefaultList_Default_traits::create (i, f, this));

            this->SimGroup_DefaultList_Default_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_CondenserEquipment
          //
          if (n.name () == "SimGroup_EquipmentList_CondenserEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_CondenserEquipment_type > r (
              SimGroup_EquipmentList_CondenserEquipment_traits::create (i, f, this));

            this->SimGroup_EquipmentList_CondenserEquipment_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_ElectricalLoadCenter
          //
          if (n.name () == "SimGroup_EquipmentList_ElectricalLoadCenter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_ElectricalLoadCenter_type > r (
              SimGroup_EquipmentList_ElectricalLoadCenter_traits::create (i, f, this));

            this->SimGroup_EquipmentList_ElectricalLoadCenter_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_OutdoorAirSystem
          //
          if (n.name () == "SimGroup_EquipmentList_OutdoorAirSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_OutdoorAirSystem_type > r (
              SimGroup_EquipmentList_OutdoorAirSystem_traits::create (i, f, this));

            this->SimGroup_EquipmentList_OutdoorAirSystem_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_OutdoorAirUnit
          //
          if (n.name () == "SimGroup_EquipmentList_OutdoorAirUnit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_OutdoorAirUnit_type > r (
              SimGroup_EquipmentList_OutdoorAirUnit_traits::create (i, f, this));

            this->SimGroup_EquipmentList_OutdoorAirUnit_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_PlantEquipment
          //
          if (n.name () == "SimGroup_EquipmentList_PlantEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_PlantEquipment_type > r (
              SimGroup_EquipmentList_PlantEquipment_traits::create (i, f, this));

            this->SimGroup_EquipmentList_PlantEquipment_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_RefrigerationCompressor
          //
          if (n.name () == "SimGroup_EquipmentList_RefrigerationCompressor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_RefrigerationCompressor_type > r (
              SimGroup_EquipmentList_RefrigerationCompressor_traits::create (i, f, this));

            this->SimGroup_EquipmentList_RefrigerationCompressor_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_RefrigerationEquipment
          //
          if (n.name () == "SimGroup_EquipmentList_RefrigerationEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_RefrigerationEquipment_type > r (
              SimGroup_EquipmentList_RefrigerationEquipment_traits::create (i, f, this));

            this->SimGroup_EquipmentList_RefrigerationEquipment_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_RefrigerationLoadTransfer
          //
          if (n.name () == "SimGroup_EquipmentList_RefrigerationLoadTransfer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_RefrigerationLoadTransfer_type > r (
              SimGroup_EquipmentList_RefrigerationLoadTransfer_traits::create (i, f, this));

            this->SimGroup_EquipmentList_RefrigerationLoadTransfer_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_ServiceHotWater
          //
          if (n.name () == "SimGroup_EquipmentList_ServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_ServiceHotWater_type > r (
              SimGroup_EquipmentList_ServiceHotWater_traits::create (i, f, this));

            this->SimGroup_EquipmentList_ServiceHotWater_.push_back (r);
            continue;
          }

          // SimGroup_EquipmentList_ZoneHvac
          //
          if (n.name () == "SimGroup_EquipmentList_ZoneHvac" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_EquipmentList_ZoneHvac_type > r (
              SimGroup_EquipmentList_ZoneHvac_traits::create (i, f, this));

            this->SimGroup_EquipmentList_ZoneHvac_.push_back (r);
            continue;
          }

          // SimGroup_HvacDemandGroup_AirSystem
          //
          if (n.name () == "SimGroup_HvacDemandGroup_AirSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_HvacDemandGroup_AirSystem_type > r (
              SimGroup_HvacDemandGroup_AirSystem_traits::create (i, f, this));

            this->SimGroup_HvacDemandGroup_AirSystem_.push_back (r);
            continue;
          }

          // SimGroup_HvacDemandGroup_RefrigerationSystem
          //
          if (n.name () == "SimGroup_HvacDemandGroup_RefrigerationSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_HvacDemandGroup_RefrigerationSystem_type > r (
              SimGroup_HvacDemandGroup_RefrigerationSystem_traits::create (i, f, this));

            this->SimGroup_HvacDemandGroup_RefrigerationSystem_.push_back (r);
            continue;
          }

          // SimGroup_HvacDemandGroup_WaterSystem
          //
          if (n.name () == "SimGroup_HvacDemandGroup_WaterSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_HvacDemandGroup_WaterSystem_type > r (
              SimGroup_HvacDemandGroup_WaterSystem_traits::create (i, f, this));

            this->SimGroup_HvacDemandGroup_WaterSystem_.push_back (r);
            continue;
          }

          // SimGroup_MaterialList_Default
          //
          if (n.name () == "SimGroup_MaterialList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_MaterialList_Default_type > r (
              SimGroup_MaterialList_Default_traits::create (i, f, this));

            this->SimGroup_MaterialList_Default_.push_back (r);
            continue;
          }

          // SimGroup_NodeList_Default
          //
          if (n.name () == "SimGroup_NodeList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_NodeList_Default_type > r (
              SimGroup_NodeList_Default_traits::create (i, f, this));

            this->SimGroup_NodeList_Default_.push_back (r);
            continue;
          }

          // SimGroup_NodeList_OutdoorAir
          //
          if (n.name () == "SimGroup_NodeList_OutdoorAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_NodeList_OutdoorAir_type > r (
              SimGroup_NodeList_OutdoorAir_traits::create (i, f, this));

            this->SimGroup_NodeList_OutdoorAir_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Daylighting
          //
          if (n.name () == "SimGroup_OutputRequestList_Daylighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Daylighting_type > r (
              SimGroup_OutputRequestList_Daylighting_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Daylighting_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Environmental
          //
          if (n.name () == "SimGroup_OutputRequestList_Environmental" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Environmental_type > r (
              SimGroup_OutputRequestList_Environmental_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Environmental_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Fuel
          //
          if (n.name () == "SimGroup_OutputRequestList_Fuel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Fuel_type > r (
              SimGroup_OutputRequestList_Fuel_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Fuel_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Geometry
          //
          if (n.name () == "SimGroup_OutputRequestList_Geometry" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Geometry_type > r (
              SimGroup_OutputRequestList_Geometry_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Geometry_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Meters
          //
          if (n.name () == "SimGroup_OutputRequestList_Meters" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Meters_type > r (
              SimGroup_OutputRequestList_Meters_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Meters_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Reports
          //
          if (n.name () == "SimGroup_OutputRequestList_Reports" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Reports_type > r (
              SimGroup_OutputRequestList_Reports_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Reports_.push_back (r);
            continue;
          }

          // SimGroup_OutputRequestList_Variables
          //
          if (n.name () == "SimGroup_OutputRequestList_Variables" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_OutputRequestList_Variables_type > r (
              SimGroup_OutputRequestList_Variables_traits::create (i, f, this));

            this->SimGroup_OutputRequestList_Variables_.push_back (r);
            continue;
          }

          // SimGroup_Refrigeration_ChillerSet
          //
          if (n.name () == "SimGroup_Refrigeration_ChillerSet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_Refrigeration_ChillerSet_type > r (
              SimGroup_Refrigeration_ChillerSet_traits::create (i, f, this));

            this->SimGroup_Refrigeration_ChillerSet_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_AirLoopAvailabilityMgrScheme
          //
          if (n.name () == "SimGroup_SchemeList_AirLoopAvailabilityMgrScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_type > r (
              SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_AirTempControlScheme
          //
          if (n.name () == "SimGroup_SchemeList_AirTempControlScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_AirTempControlScheme_type > r (
              SimGroup_SchemeList_AirTempControlScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_AirTempControlScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_CondenserOperatingScheme
          //
          if (n.name () == "SimGroup_SchemeList_CondenserOperatingScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_CondenserOperatingScheme_type > r (
              SimGroup_SchemeList_CondenserOperatingScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_CondenserOperatingScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_DemandManagerScheme
          //
          if (n.name () == "SimGroup_SchemeList_DemandManagerScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_DemandManagerScheme_type > r (
              SimGroup_SchemeList_DemandManagerScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_DemandManagerScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_MultiZoneHumidityScheme
          //
          if (n.name () == "SimGroup_SchemeList_MultiZoneHumidityScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_MultiZoneHumidityScheme_type > r (
              SimGroup_SchemeList_MultiZoneHumidityScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_MultiZoneHumidityScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme
          //
          if (n.name () == "SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_type > r (
              SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_PlantOperatingScheme
          //
          if (n.name () == "SimGroup_SchemeList_PlantOperatingScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_PlantOperatingScheme_type > r (
              SimGroup_SchemeList_PlantOperatingScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_PlantOperatingScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_SingleZoneHumidityScheme
          //
          if (n.name () == "SimGroup_SchemeList_SingleZoneHumidityScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_SingleZoneHumidityScheme_type > r (
              SimGroup_SchemeList_SingleZoneHumidityScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_SingleZoneHumidityScheme_.push_back (r);
            continue;
          }

          // SimGroup_SchemeList_WaterTempControlScheme
          //
          if (n.name () == "SimGroup_SchemeList_WaterTempControlScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SchemeList_WaterTempControlScheme_type > r (
              SimGroup_SchemeList_WaterTempControlScheme_traits::create (i, f, this));

            this->SimGroup_SchemeList_WaterTempControlScheme_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_Daylighting
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_Daylighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_Daylighting_type > r (
              SimGroup_SpatialZoneGroup_Daylighting_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_Daylighting_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_Lighting
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_Lighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_Lighting_type > r (
              SimGroup_SpatialZoneGroup_Lighting_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_Lighting_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_NaturalVentilation
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_NaturalVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_NaturalVentilation_type > r (
              SimGroup_SpatialZoneGroup_NaturalVentilation_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_NaturalVentilation_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_PlenumZoneGroup
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_PlenumZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_PlenumZoneGroup_type > r (
              SimGroup_SpatialZoneGroup_PlenumZoneGroup_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_PlenumZoneGroup_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_ServiceHotWater
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_ServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_ServiceHotWater_type > r (
              SimGroup_SpatialZoneGroup_ServiceHotWater_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_ServiceHotWater_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_ZoneGroup
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_ZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_ZoneGroup_type > r (
              SimGroup_SpatialZoneGroup_ZoneGroup_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_ZoneGroup_.push_back (r);
            continue;
          }

          // SimGroup_SpatialZoneGroup_ZoneHvacGroup
          //
          if (n.name () == "SimGroup_SpatialZoneGroup_ZoneHvacGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SpatialZoneGroup_ZoneHvacGroup_type > r (
              SimGroup_SpatialZoneGroup_ZoneHvacGroup_traits::create (i, f, this));

            this->SimGroup_SpatialZoneGroup_ZoneHvacGroup_.push_back (r);
            continue;
          }

          // SimGroup_SurfaceGroup_Default
          //
          if (n.name () == "SimGroup_SurfaceGroup_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SurfaceGroup_Default_type > r (
              SimGroup_SurfaceGroup_Default_traits::create (i, f, this));

            this->SimGroup_SurfaceGroup_Default_.push_back (r);
            continue;
          }

          // SimGroup_SurfaceGroup_LowTempRadiant
          //
          if (n.name () == "SimGroup_SurfaceGroup_LowTempRadiant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SurfaceGroup_LowTempRadiant_type > r (
              SimGroup_SurfaceGroup_LowTempRadiant_traits::create (i, f, this));

            this->SimGroup_SurfaceGroup_LowTempRadiant_.push_back (r);
            continue;
          }

          // SimGroup_SurfaceGroup_VentilatedSlab
          //
          if (n.name () == "SimGroup_SurfaceGroup_VentilatedSlab" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_SurfaceGroup_VentilatedSlab_type > r (
              SimGroup_SurfaceGroup_VentilatedSlab_traits::create (i, f, this));

            this->SimGroup_SurfaceGroup_VentilatedSlab_.push_back (r);
            continue;
          }

          // SimGroup_TemplateOutputRequestList_Daylighting
          //
          if (n.name () == "SimGroup_TemplateOutputRequestList_Daylighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_TemplateOutputRequestList_Daylighting_type > r (
              SimGroup_TemplateOutputRequestList_Daylighting_traits::create (i, f, this));

            this->SimGroup_TemplateOutputRequestList_Daylighting_.push_back (r);
            continue;
          }

          // SimGroup_TemplateOutputRequestList_FuelAndEnvironmental
          //
          if (n.name () == "SimGroup_TemplateOutputRequestList_FuelAndEnvironmental" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_type > r (
              SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_traits::create (i, f, this));

            this->SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_.push_back (r);
            continue;
          }

          // SimGroup_TemplateOutputRequestList_Geometry
          //
          if (n.name () == "SimGroup_TemplateOutputRequestList_Geometry" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_TemplateOutputRequestList_Geometry_type > r (
              SimGroup_TemplateOutputRequestList_Geometry_traits::create (i, f, this));

            this->SimGroup_TemplateOutputRequestList_Geometry_.push_back (r);
            continue;
          }

          // SimGroup_TemplateOutputRequestList_Meters
          //
          if (n.name () == "SimGroup_TemplateOutputRequestList_Meters" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_TemplateOutputRequestList_Meters_type > r (
              SimGroup_TemplateOutputRequestList_Meters_traits::create (i, f, this));

            this->SimGroup_TemplateOutputRequestList_Meters_.push_back (r);
            continue;
          }

          // SimGroup_TemplateOutputRequestList_Reports
          //
          if (n.name () == "SimGroup_TemplateOutputRequestList_Reports" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_TemplateOutputRequestList_Reports_type > r (
              SimGroup_TemplateOutputRequestList_Reports_traits::create (i, f, this));

            this->SimGroup_TemplateOutputRequestList_Reports_.push_back (r);
            continue;
          }

          // SimGroup_TemplateOutputRequestList_Variables
          //
          if (n.name () == "SimGroup_TemplateOutputRequestList_Variables" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_TemplateOutputRequestList_Variables_type > r (
              SimGroup_TemplateOutputRequestList_Variables_traits::create (i, f, this));

            this->SimGroup_TemplateOutputRequestList_Variables_.push_back (r);
            continue;
          }

          // SimGroup_VrfList_VrfTerminals
          //
          if (n.name () == "SimGroup_VrfList_VrfTerminals" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimGroup_VrfList_VrfTerminals_type > r (
              SimGroup_VrfList_VrfTerminals_traits::create (i, f, this));

            this->SimGroup_VrfList_VrfTerminals_.push_back (r);
            continue;
          }

          // SimHeatTransAlgProps_HeatTransferAlgProps_Default
          //
          if (n.name () == "SimHeatTransAlgProps_HeatTransferAlgProps_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimHeatTransAlgProps_HeatTransferAlgProps_Default_type > r (
              SimHeatTransAlgProps_HeatTransferAlgProps_Default_traits::create (i, f, this));

            this->SimHeatTransAlgProps_HeatTransferAlgProps_Default_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_Default_Default
          //
          if (n.name () == "SimInfiltrationOrVentilation_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_Default_Default_type > r (
              SimInfiltrationOrVentilation_Default_Default_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_Default_Default_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_type > r (
              SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_type > r (
              SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_type > r (
              SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_type > r (
              SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_type > r (
              SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirSettings_UserDefined
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirSettings_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_type > r (
              SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_type > r (
              SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirTempPattern_Default
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirTempPattern_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirTempPattern_Default_type > r (
              SimInfiltrationOrVentilation_RoomAirTempPattern_Default_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirTempPattern_Default_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_type > r (
              SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_type > r (
              SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_type > r (
              SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined
          //
          if (n.name () == "SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_type > r (
              SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate
          //
          if (n.name () == "SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_type > r (
              SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea
          //
          if (n.name () == "SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_type > r (
              SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient
          //
          if (n.name () == "SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_type > r (
              SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate
          //
          if (n.name () == "SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_type > r (
              SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_.push_back (r);
            continue;
          }

          // SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea
          //
          if (n.name () == "SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_type > r (
              SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_traits::create (i, f, this));

            this->SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_.push_back (r);
            continue;
          }

          // SimInternalLoad_ComfortViewFactorAngles_Default
          //
          if (n.name () == "SimInternalLoad_ComfortViewFactorAngles_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_ComfortViewFactorAngles_Default_type > r (
              SimInternalLoad_ComfortViewFactorAngles_Default_traits::create (i, f, this));

            this->SimInternalLoad_ComfortViewFactorAngles_Default_.push_back (r);
            continue;
          }

          // SimInternalLoad_Default_Default
          //
          if (n.name () == "SimInternalLoad_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Default_Default_type > r (
              SimInternalLoad_Default_Default_traits::create (i, f, this));

            this->SimInternalLoad_Default_Default_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Electric
          //
          if (n.name () == "SimInternalLoad_Equipment_Electric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Electric_type > r (
              SimInternalLoad_Equipment_Electric_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Electric_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Electric_Elevators
          //
          if (n.name () == "SimInternalLoad_Equipment_Electric_Elevators" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Electric_Elevators_type > r (
              SimInternalLoad_Equipment_Electric_Elevators_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Electric_Elevators_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Electric_Escalators
          //
          if (n.name () == "SimInternalLoad_Equipment_Electric_Escalators" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Electric_Escalators_type > r (
              SimInternalLoad_Equipment_Electric_Escalators_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Electric_Escalators_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Electric_Process
          //
          if (n.name () == "SimInternalLoad_Equipment_Electric_Process" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Electric_Process_type > r (
              SimInternalLoad_Equipment_Electric_Process_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Electric_Process_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Gas
          //
          if (n.name () == "SimInternalLoad_Equipment_Gas" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Gas_type > r (
              SimInternalLoad_Equipment_Gas_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Gas_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Gas_Process
          //
          if (n.name () == "SimInternalLoad_Equipment_Gas_Process" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Gas_Process_type > r (
              SimInternalLoad_Equipment_Gas_Process_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Gas_Process_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_HotWater
          //
          if (n.name () == "SimInternalLoad_Equipment_HotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_HotWater_type > r (
              SimInternalLoad_Equipment_HotWater_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_HotWater_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Other
          //
          if (n.name () == "SimInternalLoad_Equipment_Other" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Other_type > r (
              SimInternalLoad_Equipment_Other_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Other_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_Steam
          //
          if (n.name () == "SimInternalLoad_Equipment_Steam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_Steam_type > r (
              SimInternalLoad_Equipment_Steam_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_Steam_.push_back (r);
            continue;
          }

          // SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled
          //
          if (n.name () == "SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_type > r (
              SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_traits::create (i, f, this));

            this->SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_.push_back (r);
            continue;
          }

          // SimInternalLoad_Lights_Default
          //
          if (n.name () == "SimInternalLoad_Lights_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_Lights_Default_type > r (
              SimInternalLoad_Lights_Default_traits::create (i, f, this));

            this->SimInternalLoad_Lights_Default_.push_back (r);
            continue;
          }

          // SimInternalLoad_People_Default
          //
          if (n.name () == "SimInternalLoad_People_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_People_Default_type > r (
              SimInternalLoad_People_Default_traits::create (i, f, this));

            this->SimInternalLoad_People_Default_.push_back (r);
            continue;
          }

          // SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion
          //
          if (n.name () == "SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_type > r (
              SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_traits::create (i, f, this));

            this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_.push_back (r);
            continue;
          }

          // SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink
          //
          if (n.name () == "SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_type > r (
              SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_traits::create (i, f, this));

            this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_.push_back (r);
            continue;
          }

          // SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven
          //
          if (n.name () == "SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_type > r (
              SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_traits::create (i, f, this));

            this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_.push_back (r);
            continue;
          }

          // SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide
          //
          if (n.name () == "SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_type > r (
              SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_traits::create (i, f, this));

            this->SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_.push_back (r);
            continue;
          }

          // SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant
          //
          if (n.name () == "SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_type > r (
              SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_traits::create (i, f, this));

            this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_.push_back (r);
            continue;
          }

          // SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel
          //
          if (n.name () == "SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_type > r (
              SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_traits::create (i, f, this));

            this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_.push_back (r);
            continue;
          }

          // SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource
          //
          if (n.name () == "SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_type > r (
              SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_traits::create (i, f, this));

            this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_.push_back (r);
            continue;
          }

          // SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink
          //
          if (n.name () == "SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_type > r (
              SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_traits::create (i, f, this));

            this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_.push_back (r);
            continue;
          }

          // SimIrregularTimeSeries_Irregular_Default
          //
          if (n.name () == "SimIrregularTimeSeries_Irregular_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimIrregularTimeSeries_Irregular_Default_type > r (
              SimIrregularTimeSeries_Irregular_Default_traits::create (i, f, this));

            this->SimIrregularTimeSeries_Irregular_Default_.push_back (r);
            continue;
          }

          // SimIrregularTimeSeriesValue_TimeSeries_Irregular
          //
          if (n.name () == "SimIrregularTimeSeriesValue_TimeSeries_Irregular" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimIrregularTimeSeriesValue_TimeSeries_Irregular_type > r (
              SimIrregularTimeSeriesValue_TimeSeries_Irregular_traits::create (i, f, this));

            this->SimIrregularTimeSeriesValue_TimeSeries_Irregular_.push_back (r);
            continue;
          }

          // SimLightingFixtureType_LightingFixture_Default
          //
          if (n.name () == "SimLightingFixtureType_LightingFixture_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLightingFixtureType_LightingFixture_Default_type > r (
              SimLightingFixtureType_LightingFixture_Default_traits::create (i, f, this));

            this->SimLightingFixtureType_LightingFixture_Default_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_AirConnections
          //
          if (n.name () == "SimList_ConnectorList_AirConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_AirConnections_type > r (
              SimList_ConnectorList_AirConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_AirConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_ChilledWaterConnections
          //
          if (n.name () == "SimList_ConnectorList_ChilledWaterConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_ChilledWaterConnections_type > r (
              SimList_ConnectorList_ChilledWaterConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_ChilledWaterConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_CondenserConnections
          //
          if (n.name () == "SimList_ConnectorList_CondenserConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_CondenserConnections_type > r (
              SimList_ConnectorList_CondenserConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_CondenserConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_ControllerConnections
          //
          if (n.name () == "SimList_ConnectorList_ControllerConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_ControllerConnections_type > r (
              SimList_ConnectorList_ControllerConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_ControllerConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_HotWaterConnections
          //
          if (n.name () == "SimList_ConnectorList_HotWaterConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_HotWaterConnections_type > r (
              SimList_ConnectorList_HotWaterConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_HotWaterConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_ServiceHotWaterConnections
          //
          if (n.name () == "SimList_ConnectorList_ServiceHotWaterConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_ServiceHotWaterConnections_type > r (
              SimList_ConnectorList_ServiceHotWaterConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_ServiceHotWaterConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_SimConnections
          //
          if (n.name () == "SimList_ConnectorList_SimConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_SimConnections_type > r (
              SimList_ConnectorList_SimConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_SimConnections_.push_back (r);
            continue;
          }

          // SimList_ConnectorList_SteamConnections
          //
          if (n.name () == "SimList_ConnectorList_SteamConnections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ConnectorList_SteamConnections_type > r (
              SimList_ConnectorList_SteamConnections_traits::create (i, f, this));

            this->SimList_ConnectorList_SteamConnections_.push_back (r);
            continue;
          }

          // SimList_ControllerList_Default
          //
          if (n.name () == "SimList_ControllerList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_ControllerList_Default_type > r (
              SimList_ControllerList_Default_traits::create (i, f, this));

            this->SimList_ControllerList_Default_.push_back (r);
            continue;
          }

          // SimList_DefaultList_Default
          //
          if (n.name () == "SimList_DefaultList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_DefaultList_Default_type > r (
              SimList_DefaultList_Default_traits::create (i, f, this));

            this->SimList_DefaultList_Default_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_CondenserEquipment
          //
          if (n.name () == "SimList_EquipmentList_CondenserEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_CondenserEquipment_type > r (
              SimList_EquipmentList_CondenserEquipment_traits::create (i, f, this));

            this->SimList_EquipmentList_CondenserEquipment_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_ElectricalLoadCenter
          //
          if (n.name () == "SimList_EquipmentList_ElectricalLoadCenter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_ElectricalLoadCenter_type > r (
              SimList_EquipmentList_ElectricalLoadCenter_traits::create (i, f, this));

            this->SimList_EquipmentList_ElectricalLoadCenter_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_OutdoorAirSystem
          //
          if (n.name () == "SimList_EquipmentList_OutdoorAirSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_OutdoorAirSystem_type > r (
              SimList_EquipmentList_OutdoorAirSystem_traits::create (i, f, this));

            this->SimList_EquipmentList_OutdoorAirSystem_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_OutdoorAirUnit
          //
          if (n.name () == "SimList_EquipmentList_OutdoorAirUnit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_OutdoorAirUnit_type > r (
              SimList_EquipmentList_OutdoorAirUnit_traits::create (i, f, this));

            this->SimList_EquipmentList_OutdoorAirUnit_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_PlantEquipment
          //
          if (n.name () == "SimList_EquipmentList_PlantEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_PlantEquipment_type > r (
              SimList_EquipmentList_PlantEquipment_traits::create (i, f, this));

            this->SimList_EquipmentList_PlantEquipment_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_RefrigerationCompressor
          //
          if (n.name () == "SimList_EquipmentList_RefrigerationCompressor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_RefrigerationCompressor_type > r (
              SimList_EquipmentList_RefrigerationCompressor_traits::create (i, f, this));

            this->SimList_EquipmentList_RefrigerationCompressor_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_RefrigerationEquipment
          //
          if (n.name () == "SimList_EquipmentList_RefrigerationEquipment" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_RefrigerationEquipment_type > r (
              SimList_EquipmentList_RefrigerationEquipment_traits::create (i, f, this));

            this->SimList_EquipmentList_RefrigerationEquipment_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_RefrigerationLoadTransfer
          //
          if (n.name () == "SimList_EquipmentList_RefrigerationLoadTransfer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_RefrigerationLoadTransfer_type > r (
              SimList_EquipmentList_RefrigerationLoadTransfer_traits::create (i, f, this));

            this->SimList_EquipmentList_RefrigerationLoadTransfer_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_ServiceHotWater
          //
          if (n.name () == "SimList_EquipmentList_ServiceHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_ServiceHotWater_type > r (
              SimList_EquipmentList_ServiceHotWater_traits::create (i, f, this));

            this->SimList_EquipmentList_ServiceHotWater_.push_back (r);
            continue;
          }

          // SimList_EquipmentList_ZoneHvac
          //
          if (n.name () == "SimList_EquipmentList_ZoneHvac" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_EquipmentList_ZoneHvac_type > r (
              SimList_EquipmentList_ZoneHvac_traits::create (i, f, this));

            this->SimList_EquipmentList_ZoneHvac_.push_back (r);
            continue;
          }

          // SimList_MaterialList_Default
          //
          if (n.name () == "SimList_MaterialList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_MaterialList_Default_type > r (
              SimList_MaterialList_Default_traits::create (i, f, this));

            this->SimList_MaterialList_Default_.push_back (r);
            continue;
          }

          // SimList_NodeList_Default
          //
          if (n.name () == "SimList_NodeList_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_NodeList_Default_type > r (
              SimList_NodeList_Default_traits::create (i, f, this));

            this->SimList_NodeList_Default_.push_back (r);
            continue;
          }

          // SimList_NodeList_OutdoorAir
          //
          if (n.name () == "SimList_NodeList_OutdoorAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_NodeList_OutdoorAir_type > r (
              SimList_NodeList_OutdoorAir_traits::create (i, f, this));

            this->SimList_NodeList_OutdoorAir_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Daylighting
          //
          if (n.name () == "SimList_OutputRequestList_Daylighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Daylighting_type > r (
              SimList_OutputRequestList_Daylighting_traits::create (i, f, this));

            this->SimList_OutputRequestList_Daylighting_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Environmental
          //
          if (n.name () == "SimList_OutputRequestList_Environmental" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Environmental_type > r (
              SimList_OutputRequestList_Environmental_traits::create (i, f, this));

            this->SimList_OutputRequestList_Environmental_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Fuel
          //
          if (n.name () == "SimList_OutputRequestList_Fuel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Fuel_type > r (
              SimList_OutputRequestList_Fuel_traits::create (i, f, this));

            this->SimList_OutputRequestList_Fuel_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Geometry
          //
          if (n.name () == "SimList_OutputRequestList_Geometry" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Geometry_type > r (
              SimList_OutputRequestList_Geometry_traits::create (i, f, this));

            this->SimList_OutputRequestList_Geometry_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Meters
          //
          if (n.name () == "SimList_OutputRequestList_Meters" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Meters_type > r (
              SimList_OutputRequestList_Meters_traits::create (i, f, this));

            this->SimList_OutputRequestList_Meters_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Reports
          //
          if (n.name () == "SimList_OutputRequestList_Reports" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Reports_type > r (
              SimList_OutputRequestList_Reports_traits::create (i, f, this));

            this->SimList_OutputRequestList_Reports_.push_back (r);
            continue;
          }

          // SimList_OutputRequestList_Variables
          //
          if (n.name () == "SimList_OutputRequestList_Variables" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_OutputRequestList_Variables_type > r (
              SimList_OutputRequestList_Variables_traits::create (i, f, this));

            this->SimList_OutputRequestList_Variables_.push_back (r);
            continue;
          }

          // SimList_Refrigeration_ChillerSet
          //
          if (n.name () == "SimList_Refrigeration_ChillerSet" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_Refrigeration_ChillerSet_type > r (
              SimList_Refrigeration_ChillerSet_traits::create (i, f, this));

            this->SimList_Refrigeration_ChillerSet_.push_back (r);
            continue;
          }

          // SimList_SchemeList_AirLoopAvailabilityMgrScheme
          //
          if (n.name () == "SimList_SchemeList_AirLoopAvailabilityMgrScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_AirLoopAvailabilityMgrScheme_type > r (
              SimList_SchemeList_AirLoopAvailabilityMgrScheme_traits::create (i, f, this));

            this->SimList_SchemeList_AirLoopAvailabilityMgrScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_AirTempControlScheme
          //
          if (n.name () == "SimList_SchemeList_AirTempControlScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_AirTempControlScheme_type > r (
              SimList_SchemeList_AirTempControlScheme_traits::create (i, f, this));

            this->SimList_SchemeList_AirTempControlScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_CondenserOperatingScheme
          //
          if (n.name () == "SimList_SchemeList_CondenserOperatingScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_CondenserOperatingScheme_type > r (
              SimList_SchemeList_CondenserOperatingScheme_traits::create (i, f, this));

            this->SimList_SchemeList_CondenserOperatingScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_DemandManagerScheme
          //
          if (n.name () == "SimList_SchemeList_DemandManagerScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_DemandManagerScheme_type > r (
              SimList_SchemeList_DemandManagerScheme_traits::create (i, f, this));

            this->SimList_SchemeList_DemandManagerScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_MultiZoneHumidityScheme
          //
          if (n.name () == "SimList_SchemeList_MultiZoneHumidityScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_MultiZoneHumidityScheme_type > r (
              SimList_SchemeList_MultiZoneHumidityScheme_traits::create (i, f, this));

            this->SimList_SchemeList_MultiZoneHumidityScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_PlantLoopAvailabilityMgrScheme
          //
          if (n.name () == "SimList_SchemeList_PlantLoopAvailabilityMgrScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_PlantLoopAvailabilityMgrScheme_type > r (
              SimList_SchemeList_PlantLoopAvailabilityMgrScheme_traits::create (i, f, this));

            this->SimList_SchemeList_PlantLoopAvailabilityMgrScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_PlantOperatingScheme
          //
          if (n.name () == "SimList_SchemeList_PlantOperatingScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_PlantOperatingScheme_type > r (
              SimList_SchemeList_PlantOperatingScheme_traits::create (i, f, this));

            this->SimList_SchemeList_PlantOperatingScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_SingleZoneHumidityScheme
          //
          if (n.name () == "SimList_SchemeList_SingleZoneHumidityScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_SingleZoneHumidityScheme_type > r (
              SimList_SchemeList_SingleZoneHumidityScheme_traits::create (i, f, this));

            this->SimList_SchemeList_SingleZoneHumidityScheme_.push_back (r);
            continue;
          }

          // SimList_SchemeList_WaterTempControlScheme
          //
          if (n.name () == "SimList_SchemeList_WaterTempControlScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_SchemeList_WaterTempControlScheme_type > r (
              SimList_SchemeList_WaterTempControlScheme_traits::create (i, f, this));

            this->SimList_SchemeList_WaterTempControlScheme_.push_back (r);
            continue;
          }

          // SimList_TemplateOutputRequestList_Daylighting
          //
          if (n.name () == "SimList_TemplateOutputRequestList_Daylighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_TemplateOutputRequestList_Daylighting_type > r (
              SimList_TemplateOutputRequestList_Daylighting_traits::create (i, f, this));

            this->SimList_TemplateOutputRequestList_Daylighting_.push_back (r);
            continue;
          }

          // SimList_TemplateOutputRequestList_FuelAndEnvironmental
          //
          if (n.name () == "SimList_TemplateOutputRequestList_FuelAndEnvironmental" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_TemplateOutputRequestList_FuelAndEnvironmental_type > r (
              SimList_TemplateOutputRequestList_FuelAndEnvironmental_traits::create (i, f, this));

            this->SimList_TemplateOutputRequestList_FuelAndEnvironmental_.push_back (r);
            continue;
          }

          // SimList_TemplateOutputRequestList_Geometry
          //
          if (n.name () == "SimList_TemplateOutputRequestList_Geometry" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_TemplateOutputRequestList_Geometry_type > r (
              SimList_TemplateOutputRequestList_Geometry_traits::create (i, f, this));

            this->SimList_TemplateOutputRequestList_Geometry_.push_back (r);
            continue;
          }

          // SimList_TemplateOutputRequestList_Meters
          //
          if (n.name () == "SimList_TemplateOutputRequestList_Meters" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_TemplateOutputRequestList_Meters_type > r (
              SimList_TemplateOutputRequestList_Meters_traits::create (i, f, this));

            this->SimList_TemplateOutputRequestList_Meters_.push_back (r);
            continue;
          }

          // SimList_TemplateOutputRequestList_Reports
          //
          if (n.name () == "SimList_TemplateOutputRequestList_Reports" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_TemplateOutputRequestList_Reports_type > r (
              SimList_TemplateOutputRequestList_Reports_traits::create (i, f, this));

            this->SimList_TemplateOutputRequestList_Reports_.push_back (r);
            continue;
          }

          // SimList_TemplateOutputRequestList_Variables
          //
          if (n.name () == "SimList_TemplateOutputRequestList_Variables" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_TemplateOutputRequestList_Variables_type > r (
              SimList_TemplateOutputRequestList_Variables_traits::create (i, f, this));

            this->SimList_TemplateOutputRequestList_Variables_.push_back (r);
            continue;
          }

          // SimList_VrfList_VrfTerminals
          //
          if (n.name () == "SimList_VrfList_VrfTerminals" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimList_VrfList_VrfTerminals_type > r (
              SimList_VrfList_VrfTerminals_traits::create (i, f, this));

            this->SimList_VrfList_VrfTerminals_.push_back (r);
            continue;
          }

          // SimLocalPlacement_LocalPlacement_AbsolutePlacement
          //
          if (n.name () == "SimLocalPlacement_LocalPlacement_AbsolutePlacement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocalPlacement_LocalPlacement_AbsolutePlacement_type > r (
              SimLocalPlacement_LocalPlacement_AbsolutePlacement_traits::create (i, f, this));

            this->SimLocalPlacement_LocalPlacement_AbsolutePlacement_.push_back (r);
            continue;
          }

          // SimLocalPlacement_LocalPlacement_RelativePlacement
          //
          if (n.name () == "SimLocalPlacement_LocalPlacement_RelativePlacement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocalPlacement_LocalPlacement_RelativePlacement_type > r (
              SimLocalPlacement_LocalPlacement_RelativePlacement_traits::create (i, f, this));

            this->SimLocalPlacement_LocalPlacement_RelativePlacement_.push_back (r);
            continue;
          }

          // SimLocationAndWeather_DesignDay_Default
          //
          if (n.name () == "SimLocationAndWeather_DesignDay_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocationAndWeather_DesignDay_Default_type > r (
              SimLocationAndWeather_DesignDay_Default_traits::create (i, f, this));

            this->SimLocationAndWeather_DesignDay_Default_.push_back (r);
            continue;
          }

          // SimLocationAndWeather_Location_Default
          //
          if (n.name () == "SimLocationAndWeather_Location_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocationAndWeather_Location_Default_type > r (
              SimLocationAndWeather_Location_Default_traits::create (i, f, this));

            this->SimLocationAndWeather_Location_Default_.push_back (r);
            continue;
          }

          // SimLocationAndWeather_WeatherFile_ConditionType
          //
          if (n.name () == "SimLocationAndWeather_WeatherFile_ConditionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocationAndWeather_WeatherFile_ConditionType_type > r (
              SimLocationAndWeather_WeatherFile_ConditionType_traits::create (i, f, this));

            this->SimLocationAndWeather_WeatherFile_ConditionType_.push_back (r);
            continue;
          }

          // SimLocationAndWeather_WeatherFile_Days
          //
          if (n.name () == "SimLocationAndWeather_WeatherFile_Days" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocationAndWeather_WeatherFile_Days_type > r (
              SimLocationAndWeather_WeatherFile_Days_traits::create (i, f, this));

            this->SimLocationAndWeather_WeatherFile_Days_.push_back (r);
            continue;
          }

          // SimLocationAndWeather_WeatherFile_WeatherStation
          //
          if (n.name () == "SimLocationAndWeather_WeatherFile_WeatherStation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocationAndWeather_WeatherFile_WeatherStation_type > r (
              SimLocationAndWeather_WeatherFile_WeatherStation_traits::create (i, f, this));

            this->SimLocationAndWeather_WeatherFile_WeatherStation_.push_back (r);
            continue;
          }

          // SimLocationAndWeather_WeatherProperty_SkyTemperature
          //
          if (n.name () == "SimLocationAndWeather_WeatherProperty_SkyTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLocationAndWeather_WeatherProperty_SkyTemperature_type > r (
              SimLocationAndWeather_WeatherProperty_SkyTemperature_traits::create (i, f, this));

            this->SimLocationAndWeather_WeatherProperty_SkyTemperature_.push_back (r);
            continue;
          }

          // SimLoop_Loop_EdgeLoop
          //
          if (n.name () == "SimLoop_Loop_EdgeLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLoop_Loop_EdgeLoop_type > r (
              SimLoop_Loop_EdgeLoop_traits::create (i, f, this));

            this->SimLoop_Loop_EdgeLoop_.push_back (r);
            continue;
          }

          // SimLoop_Loop_PolyLoop
          //
          if (n.name () == "SimLoop_Loop_PolyLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLoop_Loop_PolyLoop_type > r (
              SimLoop_Loop_PolyLoop_traits::create (i, f, this));

            this->SimLoop_Loop_PolyLoop_.push_back (r);
            continue;
          }

          // SimLoop_Loop_VertexLoop
          //
          if (n.name () == "SimLoop_Loop_VertexLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimLoop_Loop_VertexLoop_type > r (
              SimLoop_Loop_VertexLoop_traits::create (i, f, this));

            this->SimLoop_Loop_VertexLoop_.push_back (r);
            continue;
          }

          // SimMappedRepresentationItem_Default_Default
          //
          if (n.name () == "SimMappedRepresentationItem_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMappedRepresentationItem_Default_Default_type > r (
              SimMappedRepresentationItem_Default_Default_traits::create (i, f, this));

            this->SimMappedRepresentationItem_Default_Default_.push_back (r);
            continue;
          }

          // SimMaterial_Default_Default
          //
          if (n.name () == "SimMaterial_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_Default_Default_type > r (
              SimMaterial_Default_Default_traits::create (i, f, this));

            this->SimMaterial_Default_Default_.push_back (r);
            continue;
          }

          // SimMaterial_EquivGlazingMaterial_Blind
          //
          if (n.name () == "SimMaterial_EquivGlazingMaterial_Blind" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_EquivGlazingMaterial_Blind_type > r (
              SimMaterial_EquivGlazingMaterial_Blind_traits::create (i, f, this));

            this->SimMaterial_EquivGlazingMaterial_Blind_.push_back (r);
            continue;
          }

          // SimMaterial_EquivGlazingMaterial_Drape
          //
          if (n.name () == "SimMaterial_EquivGlazingMaterial_Drape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_EquivGlazingMaterial_Drape_type > r (
              SimMaterial_EquivGlazingMaterial_Drape_traits::create (i, f, this));

            this->SimMaterial_EquivGlazingMaterial_Drape_.push_back (r);
            continue;
          }

          // SimMaterial_EquivGlazingMaterial_Gap
          //
          if (n.name () == "SimMaterial_EquivGlazingMaterial_Gap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_EquivGlazingMaterial_Gap_type > r (
              SimMaterial_EquivGlazingMaterial_Gap_traits::create (i, f, this));

            this->SimMaterial_EquivGlazingMaterial_Gap_.push_back (r);
            continue;
          }

          // SimMaterial_EquivGlazingMaterial_Glazing
          //
          if (n.name () == "SimMaterial_EquivGlazingMaterial_Glazing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_EquivGlazingMaterial_Glazing_type > r (
              SimMaterial_EquivGlazingMaterial_Glazing_traits::create (i, f, this));

            this->SimMaterial_EquivGlazingMaterial_Glazing_.push_back (r);
            continue;
          }

          // SimMaterial_EquivGlazingMaterial_Screen
          //
          if (n.name () == "SimMaterial_EquivGlazingMaterial_Screen" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_EquivGlazingMaterial_Screen_type > r (
              SimMaterial_EquivGlazingMaterial_Screen_traits::create (i, f, this));

            this->SimMaterial_EquivGlazingMaterial_Screen_.push_back (r);
            continue;
          }

          // SimMaterial_EquivGlazingMaterial_Shade
          //
          if (n.name () == "SimMaterial_EquivGlazingMaterial_Shade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_EquivGlazingMaterial_Shade_type > r (
              SimMaterial_EquivGlazingMaterial_Shade_traits::create (i, f, this));

            this->SimMaterial_EquivGlazingMaterial_Shade_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Blind
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Blind" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Blind_type > r (
              SimMaterial_GlazingMaterial_Blind_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Blind_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_ComplexShade
          //
          if (n.name () == "SimMaterial_GlazingMaterial_ComplexShade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_ComplexShade_type > r (
              SimMaterial_GlazingMaterial_ComplexShade_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_ComplexShade_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Gap
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Gap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Gap_type > r (
              SimMaterial_GlazingMaterial_Gap_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Gap_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Gas
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Gas" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Gas_type > r (
              SimMaterial_GlazingMaterial_Gas_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Gas_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_GasMixture
          //
          if (n.name () == "SimMaterial_GlazingMaterial_GasMixture" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_GasMixture_type > r (
              SimMaterial_GlazingMaterial_GasMixture_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_GasMixture_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Glazing
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Glazing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Glazing_type > r (
              SimMaterial_GlazingMaterial_Glazing_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Glazing_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod
          //
          if (n.name () == "SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_type > r (
              SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Screen
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Screen" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Screen_type > r (
              SimMaterial_GlazingMaterial_Screen_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Screen_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Shade
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Shade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Shade_type > r (
              SimMaterial_GlazingMaterial_Shade_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Shade_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_SimpleGlazingSystem
          //
          if (n.name () == "SimMaterial_GlazingMaterial_SimpleGlazingSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_SimpleGlazingSystem_type > r (
              SimMaterial_GlazingMaterial_SimpleGlazingSystem_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_SimpleGlazingSystem_.push_back (r);
            continue;
          }

          // SimMaterial_GlazingMaterial_Thermochromic
          //
          if (n.name () == "SimMaterial_GlazingMaterial_Thermochromic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_GlazingMaterial_Thermochromic_type > r (
              SimMaterial_GlazingMaterial_Thermochromic_traits::create (i, f, this));

            this->SimMaterial_GlazingMaterial_Thermochromic_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_AirGap
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_AirGap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_AirGap_type > r (
              SimMaterial_OpaqueMaterial_AirGap_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_AirGap_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_Composite
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_Composite" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_Composite_type > r (
              SimMaterial_OpaqueMaterial_Composite_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_Composite_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_Default
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_Default_type > r (
              SimMaterial_OpaqueMaterial_Default_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_Default_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_InfraredTransparent
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_InfraredTransparent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_InfraredTransparent_type > r (
              SimMaterial_OpaqueMaterial_InfraredTransparent_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_InfraredTransparent_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_Insulation
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_Insulation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_Insulation_type > r (
              SimMaterial_OpaqueMaterial_Insulation_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_Insulation_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_InsulationMovable
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_InsulationMovable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_InsulationMovable_type > r (
              SimMaterial_OpaqueMaterial_InsulationMovable_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_InsulationMovable_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_NoMass
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_NoMass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_NoMass_type > r (
              SimMaterial_OpaqueMaterial_NoMass_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_NoMass_.push_back (r);
            continue;
          }

          // SimMaterial_OpaqueMaterial_Vegetation
          //
          if (n.name () == "SimMaterial_OpaqueMaterial_Vegetation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_OpaqueMaterial_Vegetation_type > r (
              SimMaterial_OpaqueMaterial_Vegetation_traits::create (i, f, this));

            this->SimMaterial_OpaqueMaterial_Vegetation_.push_back (r);
            continue;
          }

          // SimMaterial_VirtualBoundary_Default
          //
          if (n.name () == "SimMaterial_VirtualBoundary_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterial_VirtualBoundary_Default_type > r (
              SimMaterial_VirtualBoundary_Default_traits::create (i, f, this));

            this->SimMaterial_VirtualBoundary_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayer_EquivGlazingLayer_Default
          //
          if (n.name () == "SimMaterialLayer_EquivGlazingLayer_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayer_EquivGlazingLayer_Default_type > r (
              SimMaterialLayer_EquivGlazingLayer_Default_traits::create (i, f, this));

            this->SimMaterialLayer_EquivGlazingLayer_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayer_GlazingMaterialLayer_Default
          //
          if (n.name () == "SimMaterialLayer_GlazingMaterialLayer_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayer_GlazingMaterialLayer_Default_type > r (
              SimMaterialLayer_GlazingMaterialLayer_Default_traits::create (i, f, this));

            this->SimMaterialLayer_GlazingMaterialLayer_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayer_OpaqueMaterialLayer_Default
          //
          if (n.name () == "SimMaterialLayer_OpaqueMaterialLayer_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayer_OpaqueMaterialLayer_Default_type > r (
              SimMaterialLayer_OpaqueMaterialLayer_Default_traits::create (i, f, this));

            this->SimMaterialLayer_OpaqueMaterialLayer_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayer_VirtualBoundaryLayer_Default
          //
          if (n.name () == "SimMaterialLayer_VirtualBoundaryLayer_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayer_VirtualBoundaryLayer_Default_type > r (
              SimMaterialLayer_VirtualBoundaryLayer_Default_traits::create (i, f, this));

            this->SimMaterialLayer_VirtualBoundaryLayer_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_Default_Default
          //
          if (n.name () == "SimMaterialLayerSet_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_Default_Default_type > r (
              SimMaterialLayerSet_Default_Default_traits::create (i, f, this));

            this->SimMaterialLayerSet_Default_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_type > r (
              SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_CurtainWall
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_CurtainWall" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_CurtainWall_type > r (
              SimMaterialLayerSet_GlazingLayerSet_CurtainWall_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_CurtainWall_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_Default
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_Default_type > r (
              SimMaterialLayerSet_GlazingLayerSet_Default_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_GlassDoor
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_GlassDoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_GlassDoor_type > r (
              SimMaterialLayerSet_GlazingLayerSet_GlassDoor_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_GlassDoor_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_Window
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_Window" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_Window_type > r (
              SimMaterialLayerSet_GlazingLayerSet_Window_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_Window_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_WindowDataFile
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_WindowDataFile" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_type > r (
              SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer
          //
          if (n.name () == "SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_type > r (
              SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_traits::create (i, f, this));

            this->SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Ceiling
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Ceiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Ceiling_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Ceiling_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Ceiling_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Default
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Default_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Default_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Default_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Door
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Door" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Door_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Door_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Door_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Floor
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Floor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Floor_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Floor_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Floor_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_InternalSource
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_InternalSource" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_InternalSource_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_InternalSource_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_InternalSource_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Landing
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Landing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Landing_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Landing_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Landing_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Roof
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Roof" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Roof_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Roof_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Roof_.push_back (r);
            continue;
          }

          // SimMaterialLayerSet_OpaqueLayerSet_Wall
          //
          if (n.name () == "SimMaterialLayerSet_OpaqueLayerSet_Wall" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMaterialLayerSet_OpaqueLayerSet_Wall_type > r (
              SimMaterialLayerSet_OpaqueLayerSet_Wall_traits::create (i, f, this));

            this->SimMaterialLayerSet_OpaqueLayerSet_Wall_.push_back (r);
            continue;
          }

          // SimMeasureType_AreaMeasure_Default
          //
          if (n.name () == "SimMeasureType_AreaMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_AreaMeasure_Default_type > r (
              SimMeasureType_AreaMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_AreaMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_CountMeasure_AirChangesPerhour
          //
          if (n.name () == "SimMeasureType_CountMeasure_AirChangesPerhour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_CountMeasure_AirChangesPerhour_type > r (
              SimMeasureType_CountMeasure_AirChangesPerhour_traits::create (i, f, this));

            this->SimMeasureType_CountMeasure_AirChangesPerhour_.push_back (r);
            continue;
          }

          // SimMeasureType_CountMeasure_Count
          //
          if (n.name () == "SimMeasureType_CountMeasure_Count" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_CountMeasure_Count_type > r (
              SimMeasureType_CountMeasure_Count_traits::create (i, f, this));

            this->SimMeasureType_CountMeasure_Count_.push_back (r);
            continue;
          }

          // SimMeasureType_Default_Default
          //
          if (n.name () == "SimMeasureType_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_Default_Default_type > r (
              SimMeasureType_Default_Default_traits::create (i, f, this));

            this->SimMeasureType_Default_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_EnergyMeasure_Default
          //
          if (n.name () == "SimMeasureType_EnergyMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_EnergyMeasure_Default_type > r (
              SimMeasureType_EnergyMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_EnergyMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_EnergyMeasure_WattsPerAreaMeasure
          //
          if (n.name () == "SimMeasureType_EnergyMeasure_WattsPerAreaMeasure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_type > r (
              SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_traits::create (i, f, this));

            this->SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_.push_back (r);
            continue;
          }

          // SimMeasureType_EnergyMeasure_WattsPerPerson
          //
          if (n.name () == "SimMeasureType_EnergyMeasure_WattsPerPerson" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_EnergyMeasure_WattsPerPerson_type > r (
              SimMeasureType_EnergyMeasure_WattsPerPerson_traits::create (i, f, this));

            this->SimMeasureType_EnergyMeasure_WattsPerPerson_.push_back (r);
            continue;
          }

          // SimMeasureType_LengthMeasure_Default
          //
          if (n.name () == "SimMeasureType_LengthMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_LengthMeasure_Default_type > r (
              SimMeasureType_LengthMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_LengthMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_MassMeasure_Default
          //
          if (n.name () == "SimMeasureType_MassMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_MassMeasure_Default_type > r (
              SimMeasureType_MassMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_MassMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_MonetaryMeasure_Default
          //
          if (n.name () == "SimMeasureType_MonetaryMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_MonetaryMeasure_Default_type > r (
              SimMeasureType_MonetaryMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_MonetaryMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_PersonsPerAreaMeasure_Default
          //
          if (n.name () == "SimMeasureType_PersonsPerAreaMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_PersonsPerAreaMeasure_Default_type > r (
              SimMeasureType_PersonsPerAreaMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_PersonsPerAreaMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_RatioMeasure_Default
          //
          if (n.name () == "SimMeasureType_RatioMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_RatioMeasure_Default_type > r (
              SimMeasureType_RatioMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_RatioMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_RatioMeasure_PositiveRatioMeasure
          //
          if (n.name () == "SimMeasureType_RatioMeasure_PositiveRatioMeasure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_RatioMeasure_PositiveRatioMeasure_type > r (
              SimMeasureType_RatioMeasure_PositiveRatioMeasure_traits::create (i, f, this));

            this->SimMeasureType_RatioMeasure_PositiveRatioMeasure_.push_back (r);
            continue;
          }

          // SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure
          //
          if (n.name () == "SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_type > r (
              SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_traits::create (i, f, this));

            this->SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_.push_back (r);
            continue;
          }

          // SimMeasureType_RotationalAngleMeasure_Degrees
          //
          if (n.name () == "SimMeasureType_RotationalAngleMeasure_Degrees" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_RotationalAngleMeasure_Degrees_type > r (
              SimMeasureType_RotationalAngleMeasure_Degrees_traits::create (i, f, this));

            this->SimMeasureType_RotationalAngleMeasure_Degrees_.push_back (r);
            continue;
          }

          // SimMeasureType_ThermodynamicTemperatureMeasure_Default
          //
          if (n.name () == "SimMeasureType_ThermodynamicTemperatureMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_ThermodynamicTemperatureMeasure_Default_type > r (
              SimMeasureType_ThermodynamicTemperatureMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_ThermodynamicTemperatureMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_VolumeMeasure_Default
          //
          if (n.name () == "SimMeasureType_VolumeMeasure_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_VolumeMeasure_Default_type > r (
              SimMeasureType_VolumeMeasure_Default_traits::create (i, f, this));

            this->SimMeasureType_VolumeMeasure_Default_.push_back (r);
            continue;
          }

          // SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond
          //
          if (n.name () == "SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_type > r (
              SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_traits::create (i, f, this));

            this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_.push_back (r);
            continue;
          }

          // SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson
          //
          if (n.name () == "SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_type > r (
              SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_traits::create (i, f, this));

            this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_.push_back (r);
            continue;
          }

          // SimMember_Default_Default
          //
          if (n.name () == "SimMember_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMember_Default_Default_type > r (
              SimMember_Default_Default_traits::create (i, f, this));

            this->SimMember_Default_Default_.push_back (r);
            continue;
          }

          // SimMemberParams_Member_Default
          //
          if (n.name () == "SimMemberParams_Member_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMemberParams_Member_Default_type > r (
              SimMemberParams_Member_Default_traits::create (i, f, this));

            this->SimMemberParams_Member_Default_.push_back (r);
            continue;
          }

          // SimMemberProfileProperties_Beam_Default
          //
          if (n.name () == "SimMemberProfileProperties_Beam_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMemberProfileProperties_Beam_Default_type > r (
              SimMemberProfileProperties_Beam_Default_traits::create (i, f, this));

            this->SimMemberProfileProperties_Beam_Default_.push_back (r);
            continue;
          }

          // SimMemberProfileProperties_Column_Default
          //
          if (n.name () == "SimMemberProfileProperties_Column_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMemberProfileProperties_Column_Default_type > r (
              SimMemberProfileProperties_Column_Default_traits::create (i, f, this));

            this->SimMemberProfileProperties_Column_Default_.push_back (r);
            continue;
          }

          // SimMemberProfileProperties_Default_Default
          //
          if (n.name () == "SimMemberProfileProperties_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimMemberProfileProperties_Default_Default_type > r (
              SimMemberProfileProperties_Default_Default_traits::create (i, f, this));

            this->SimMemberProfileProperties_Default_Default_.push_back (r);
            continue;
          }

          // SimModelRepresentationContext_GeometricRepresentationContext_Default
          //
          if (n.name () == "SimModelRepresentationContext_GeometricRepresentationContext_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimModelRepresentationContext_GeometricRepresentationContext_Default_type > r (
              SimModelRepresentationContext_GeometricRepresentationContext_Default_traits::create (i, f, this));

            this->SimModelRepresentationContext_GeometricRepresentationContext_Default_.push_back (r);
            continue;
          }

          // SimModelRepresentationContext_GeometricRepresentationSubContext_Default
          //
          if (n.name () == "SimModelRepresentationContext_GeometricRepresentationSubContext_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimModelRepresentationContext_GeometricRepresentationSubContext_Default_type > r (
              SimModelRepresentationContext_GeometricRepresentationSubContext_Default_traits::create (i, f, this));

            this->SimModelRepresentationContext_GeometricRepresentationSubContext_Default_.push_back (r);
            continue;
          }

          // SimModelRepresentationContext_RepresentationContext_Default
          //
          if (n.name () == "SimModelRepresentationContext_RepresentationContext_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimModelRepresentationContext_RepresentationContext_Default_type > r (
              SimModelRepresentationContext_RepresentationContext_Default_traits::create (i, f, this));

            this->SimModelRepresentationContext_RepresentationContext_Default_.push_back (r);
            continue;
          }

          // SimNode_AirflowNetworkNode_AirDistributionNode
          //
          if (n.name () == "SimNode_AirflowNetworkNode_AirDistributionNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirflowNetworkNode_AirDistributionNode_type > r (
              SimNode_AirflowNetworkNode_AirDistributionNode_traits::create (i, f, this));

            this->SimNode_AirflowNetworkNode_AirDistributionNode_.push_back (r);
            continue;
          }

          // SimNode_AirflowNetworkNode_ExternalNode
          //
          if (n.name () == "SimNode_AirflowNetworkNode_ExternalNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirflowNetworkNode_ExternalNode_type > r (
              SimNode_AirflowNetworkNode_ExternalNode_traits::create (i, f, this));

            this->SimNode_AirflowNetworkNode_ExternalNode_.push_back (r);
            continue;
          }

          // SimNode_AirflowNetworkNode_ZoneNode
          //
          if (n.name () == "SimNode_AirflowNetworkNode_ZoneNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirflowNetworkNode_ZoneNode_type > r (
              SimNode_AirflowNetworkNode_ZoneNode_traits::create (i, f, this));

            this->SimNode_AirflowNetworkNode_ZoneNode_.push_back (r);
            continue;
          }

          // SimNode_AirFlowPort_Air_In
          //
          if (n.name () == "SimNode_AirFlowPort_Air_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirFlowPort_Air_In_type > r (
              SimNode_AirFlowPort_Air_In_traits::create (i, f, this));

            this->SimNode_AirFlowPort_Air_In_.push_back (r);
            continue;
          }

          // SimNode_AirFlowPort_Air_InOrOut
          //
          if (n.name () == "SimNode_AirFlowPort_Air_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirFlowPort_Air_InOrOut_type > r (
              SimNode_AirFlowPort_Air_InOrOut_traits::create (i, f, this));

            this->SimNode_AirFlowPort_Air_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_AirFlowPort_Air_Out
          //
          if (n.name () == "SimNode_AirFlowPort_Air_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirFlowPort_Air_Out_type > r (
              SimNode_AirFlowPort_Air_Out_traits::create (i, f, this));

            this->SimNode_AirFlowPort_Air_Out_.push_back (r);
            continue;
          }

          // SimNode_AirFlowPort_Default
          //
          if (n.name () == "SimNode_AirFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirFlowPort_Default_type > r (
              SimNode_AirFlowPort_Default_traits::create (i, f, this));

            this->SimNode_AirFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_AirFlowPort_ExhaustAir_Out
          //
          if (n.name () == "SimNode_AirFlowPort_ExhaustAir_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirFlowPort_ExhaustAir_Out_type > r (
              SimNode_AirFlowPort_ExhaustAir_Out_traits::create (i, f, this));

            this->SimNode_AirFlowPort_ExhaustAir_Out_.push_back (r);
            continue;
          }

          // SimNode_AirFlowPort_OutdoorAir_In
          //
          if (n.name () == "SimNode_AirFlowPort_OutdoorAir_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_AirFlowPort_OutdoorAir_In_type > r (
              SimNode_AirFlowPort_OutdoorAir_In_traits::create (i, f, this));

            this->SimNode_AirFlowPort_OutdoorAir_In_.push_back (r);
            continue;
          }

          // SimNode_ChilledWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimNode_ChilledWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ChilledWaterFlowPort_CondensedWaterOut_type > r (
              SimNode_ChilledWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimNode_ChilledWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimNode_ChilledWaterFlowPort_Default
          //
          if (n.name () == "SimNode_ChilledWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ChilledWaterFlowPort_Default_type > r (
              SimNode_ChilledWaterFlowPort_Default_traits::create (i, f, this));

            this->SimNode_ChilledWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_ChilledWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimNode_ChilledWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_type > r (
              SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimNode_ChilledWaterFlowPort_Water_In
          //
          if (n.name () == "SimNode_ChilledWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ChilledWaterFlowPort_Water_In_type > r (
              SimNode_ChilledWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimNode_ChilledWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimNode_ChilledWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimNode_ChilledWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ChilledWaterFlowPort_Water_InOrOut_type > r (
              SimNode_ChilledWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimNode_ChilledWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_ChilledWaterFlowPort_Water_Out
          //
          if (n.name () == "SimNode_ChilledWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ChilledWaterFlowPort_Water_Out_type > r (
              SimNode_ChilledWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimNode_ChilledWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimNode_CondenserFlowPort_CondenserFlow_In
          //
          if (n.name () == "SimNode_CondenserFlowPort_CondenserFlow_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_CondenserFlowPort_CondenserFlow_In_type > r (
              SimNode_CondenserFlowPort_CondenserFlow_In_traits::create (i, f, this));

            this->SimNode_CondenserFlowPort_CondenserFlow_In_.push_back (r);
            continue;
          }

          // SimNode_CondenserFlowPort_CondenserFlow_InOrOut
          //
          if (n.name () == "SimNode_CondenserFlowPort_CondenserFlow_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_CondenserFlowPort_CondenserFlow_InOrOut_type > r (
              SimNode_CondenserFlowPort_CondenserFlow_InOrOut_traits::create (i, f, this));

            this->SimNode_CondenserFlowPort_CondenserFlow_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_CondenserFlowPort_CondenserFlow_Out
          //
          if (n.name () == "SimNode_CondenserFlowPort_CondenserFlow_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_CondenserFlowPort_CondenserFlow_Out_type > r (
              SimNode_CondenserFlowPort_CondenserFlow_Out_traits::create (i, f, this));

            this->SimNode_CondenserFlowPort_CondenserFlow_Out_.push_back (r);
            continue;
          }

          // SimNode_CondenserFlowPort_Default
          //
          if (n.name () == "SimNode_CondenserFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_CondenserFlowPort_Default_type > r (
              SimNode_CondenserFlowPort_Default_traits::create (i, f, this));

            this->SimNode_CondenserFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_DaylightingReferencePoint_Default
          //
          if (n.name () == "SimNode_DaylightingReferencePoint_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DaylightingReferencePoint_Default_type > r (
              SimNode_DaylightingReferencePoint_Default_traits::create (i, f, this));

            this->SimNode_DaylightingReferencePoint_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_AirLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_AirLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_AirLoop_Default_type > r (
              SimNode_DigitalControl_AirLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_AirLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_AirLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_AirLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_AirLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_AirLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_AirLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_AirLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_AirLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_AirLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_AirLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_AirLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CHWLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_CHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CHWLoop_Default_type > r (
              SimNode_DigitalControl_CHWLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_CHWLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CHWLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_CHWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CHWLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_CHWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_CHWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CHWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_CHWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CWLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_CWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CWLoop_Default_type > r (
              SimNode_DigitalControl_CWLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_CWLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CWLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_CWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CWLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_CWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_CWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_CWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_CWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_CWLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_CWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_CWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_HWLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_HWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_HWLoop_Default_type > r (
              SimNode_DigitalControl_HWLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_HWLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_HWLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_HWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_HWLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_HWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_HWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_HWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_HWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_HWLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_HWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_HWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_MxWLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_MxWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_MxWLoop_Default_type > r (
              SimNode_DigitalControl_MxWLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_MxWLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_MxWLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_MxWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_MxWLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_MxWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_MxWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_MxWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_MxWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_RFGLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_RFGLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_RFGLoop_Default_type > r (
              SimNode_DigitalControl_RFGLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_RFGLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_RFGLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_RFGLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_RFGLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_RFGLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_RFGLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_RFGLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_RFGLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_SHWLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_SHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_SHWLoop_Default_type > r (
              SimNode_DigitalControl_SHWLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_SHWLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_SHWLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_SHWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_SHWLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_SHWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_SHWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_SHWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_SHWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_STMLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_STMLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_STMLoop_Default_type > r (
              SimNode_DigitalControl_STMLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_STMLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_STMLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_STMLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_STMLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_STMLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_STMLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_STMLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_STMLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_STMLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_STMLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_STMLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_VRFLoop_Default
          //
          if (n.name () == "SimNode_DigitalControl_VRFLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_VRFLoop_Default_type > r (
              SimNode_DigitalControl_VRFLoop_Default_traits::create (i, f, this));

            this->SimNode_DigitalControl_VRFLoop_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_VRFLoop_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControl_VRFLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_VRFLoop_DigitalSignal_In_type > r (
              SimNode_DigitalControl_VRFLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControl_VRFLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControl_VRFLoop_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControl_VRFLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_type > r (
              SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControlPort_Default
          //
          if (n.name () == "SimNode_DigitalControlPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControlPort_Default_type > r (
              SimNode_DigitalControlPort_Default_traits::create (i, f, this));

            this->SimNode_DigitalControlPort_Default_.push_back (r);
            continue;
          }

          // SimNode_DigitalControlPort_DigitalSignal_In
          //
          if (n.name () == "SimNode_DigitalControlPort_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControlPort_DigitalSignal_In_type > r (
              SimNode_DigitalControlPort_DigitalSignal_In_traits::create (i, f, this));

            this->SimNode_DigitalControlPort_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimNode_DigitalControlPort_DigitalSignal_InOrOut
          //
          if (n.name () == "SimNode_DigitalControlPort_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControlPort_DigitalSignal_InOrOut_type > r (
              SimNode_DigitalControlPort_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimNode_DigitalControlPort_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_DigitalControlPort_DigitalSignal_Out
          //
          if (n.name () == "SimNode_DigitalControlPort_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControlPort_DigitalSignal_Out_type > r (
              SimNode_DigitalControlPort_DigitalSignal_Out_traits::create (i, f, this));

            this->SimNode_DigitalControlPort_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimNode_DigitalControlPort_DigitalVirtual
          //
          if (n.name () == "SimNode_DigitalControlPort_DigitalVirtual" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DigitalControlPort_DigitalVirtual_type > r (
              SimNode_DigitalControlPort_DigitalVirtual_traits::create (i, f, this));

            this->SimNode_DigitalControlPort_DigitalVirtual_.push_back (r);
            continue;
          }

          // SimNode_DistributionPort_Default
          //
          if (n.name () == "SimNode_DistributionPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_DistributionPort_Default_type > r (
              SimNode_DistributionPort_Default_traits::create (i, f, this));

            this->SimNode_DistributionPort_Default_.push_back (r);
            continue;
          }

          // SimNode_Docking_Default
          //
          if (n.name () == "SimNode_Docking_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_Docking_Default_type > r (
              SimNode_Docking_Default_traits::create (i, f, this));

            this->SimNode_Docking_Default_.push_back (r);
            continue;
          }

          // SimNode_Docking_ThermalZone
          //
          if (n.name () == "SimNode_Docking_ThermalZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_Docking_ThermalZone_type > r (
              SimNode_Docking_ThermalZone_traits::create (i, f, this));

            this->SimNode_Docking_ThermalZone_.push_back (r);
            continue;
          }

          // SimNode_ElectricalFlowPort_Default
          //
          if (n.name () == "SimNode_ElectricalFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ElectricalFlowPort_Default_type > r (
              SimNode_ElectricalFlowPort_Default_traits::create (i, f, this));

            this->SimNode_ElectricalFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_ElectricalFlowPort_Electrical_In
          //
          if (n.name () == "SimNode_ElectricalFlowPort_Electrical_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ElectricalFlowPort_Electrical_In_type > r (
              SimNode_ElectricalFlowPort_Electrical_In_traits::create (i, f, this));

            this->SimNode_ElectricalFlowPort_Electrical_In_.push_back (r);
            continue;
          }

          // SimNode_ElectricalFlowPort_Electrical_InOrOut
          //
          if (n.name () == "SimNode_ElectricalFlowPort_Electrical_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ElectricalFlowPort_Electrical_InOrOut_type > r (
              SimNode_ElectricalFlowPort_Electrical_InOrOut_traits::create (i, f, this));

            this->SimNode_ElectricalFlowPort_Electrical_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_ElectricalFlowPort_Electrical_Out
          //
          if (n.name () == "SimNode_ElectricalFlowPort_Electrical_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ElectricalFlowPort_Electrical_Out_type > r (
              SimNode_ElectricalFlowPort_Electrical_Out_traits::create (i, f, this));

            this->SimNode_ElectricalFlowPort_Electrical_Out_.push_back (r);
            continue;
          }

          // SimNode_HotWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimNode_HotWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_HotWaterFlowPort_CondensedWaterOut_type > r (
              SimNode_HotWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimNode_HotWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimNode_HotWaterFlowPort_Default
          //
          if (n.name () == "SimNode_HotWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_HotWaterFlowPort_Default_type > r (
              SimNode_HotWaterFlowPort_Default_traits::create (i, f, this));

            this->SimNode_HotWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_HotWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimNode_HotWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_HotWaterFlowPort_EvaporativeWaterIn_type > r (
              SimNode_HotWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimNode_HotWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimNode_HotWaterFlowPort_Water_In
          //
          if (n.name () == "SimNode_HotWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_HotWaterFlowPort_Water_In_type > r (
              SimNode_HotWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimNode_HotWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimNode_HotWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimNode_HotWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_HotWaterFlowPort_Water_InOrOut_type > r (
              SimNode_HotWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimNode_HotWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_HotWaterFlowPort_Water_Out
          //
          if (n.name () == "SimNode_HotWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_HotWaterFlowPort_Water_Out_type > r (
              SimNode_HotWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimNode_HotWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimNode_MixedWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimNode_MixedWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_MixedWaterFlowPort_CondensedWaterOut_type > r (
              SimNode_MixedWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimNode_MixedWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimNode_MixedWaterFlowPort_Default
          //
          if (n.name () == "SimNode_MixedWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_MixedWaterFlowPort_Default_type > r (
              SimNode_MixedWaterFlowPort_Default_traits::create (i, f, this));

            this->SimNode_MixedWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_MixedWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimNode_MixedWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_MixedWaterFlowPort_EvaporativeWaterIn_type > r (
              SimNode_MixedWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimNode_MixedWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimNode_MixedWaterFlowPort_Water_In
          //
          if (n.name () == "SimNode_MixedWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_MixedWaterFlowPort_Water_In_type > r (
              SimNode_MixedWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimNode_MixedWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimNode_MixedWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimNode_MixedWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_MixedWaterFlowPort_Water_InOrOut_type > r (
              SimNode_MixedWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimNode_MixedWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_MixedWaterFlowPort_Water_Out
          //
          if (n.name () == "SimNode_MixedWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_MixedWaterFlowPort_Water_Out_type > r (
              SimNode_MixedWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimNode_MixedWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimNode_Node_Default
          //
          if (n.name () == "SimNode_Node_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_Node_Default_type > r (
              SimNode_Node_Default_traits::create (i, f, this));

            this->SimNode_Node_Default_.push_back (r);
            continue;
          }

          // SimNode_Node_OutdoorAir
          //
          if (n.name () == "SimNode_Node_OutdoorAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_Node_OutdoorAir_type > r (
              SimNode_Node_OutdoorAir_traits::create (i, f, this));

            this->SimNode_Node_OutdoorAir_.push_back (r);
            continue;
          }

          // SimNode_Port_Default
          //
          if (n.name () == "SimNode_Port_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_Port_Default_type > r (
              SimNode_Port_Default_traits::create (i, f, this));

            this->SimNode_Port_Default_.push_back (r);
            continue;
          }

          // SimNode_RefrigerationFlowPort_Default
          //
          if (n.name () == "SimNode_RefrigerationFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_RefrigerationFlowPort_Default_type > r (
              SimNode_RefrigerationFlowPort_Default_traits::create (i, f, this));

            this->SimNode_RefrigerationFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_RefrigerationFlowPort_Refrigeration_In
          //
          if (n.name () == "SimNode_RefrigerationFlowPort_Refrigeration_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_RefrigerationFlowPort_Refrigeration_In_type > r (
              SimNode_RefrigerationFlowPort_Refrigeration_In_traits::create (i, f, this));

            this->SimNode_RefrigerationFlowPort_Refrigeration_In_.push_back (r);
            continue;
          }

          // SimNode_RefrigerationFlowPort_Refrigeration_InOrOut
          //
          if (n.name () == "SimNode_RefrigerationFlowPort_Refrigeration_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_type > r (
              SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_traits::create (i, f, this));

            this->SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_RefrigerationFlowPort_Refrigeration_Out
          //
          if (n.name () == "SimNode_RefrigerationFlowPort_Refrigeration_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_RefrigerationFlowPort_Refrigeration_Out_type > r (
              SimNode_RefrigerationFlowPort_Refrigeration_Out_traits::create (i, f, this));

            this->SimNode_RefrigerationFlowPort_Refrigeration_Out_.push_back (r);
            continue;
          }

          // SimNode_ServiceHotWaterFlowPort_Default
          //
          if (n.name () == "SimNode_ServiceHotWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ServiceHotWaterFlowPort_Default_type > r (
              SimNode_ServiceHotWaterFlowPort_Default_traits::create (i, f, this));

            this->SimNode_ServiceHotWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_ServiceHotWaterFlowPort_Water_In
          //
          if (n.name () == "SimNode_ServiceHotWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ServiceHotWaterFlowPort_Water_In_type > r (
              SimNode_ServiceHotWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimNode_ServiceHotWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimNode_ServiceHotWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimNode_ServiceHotWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ServiceHotWaterFlowPort_Water_InOrOut_type > r (
              SimNode_ServiceHotWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimNode_ServiceHotWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_ServiceHotWaterFlowPort_Water_Out
          //
          if (n.name () == "SimNode_ServiceHotWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ServiceHotWaterFlowPort_Water_Out_type > r (
              SimNode_ServiceHotWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimNode_ServiceHotWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimNode_SetpointNode_Default
          //
          if (n.name () == "SimNode_SetpointNode_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_SetpointNode_Default_type > r (
              SimNode_SetpointNode_Default_traits::create (i, f, this));

            this->SimNode_SetpointNode_Default_.push_back (r);
            continue;
          }

          // SimNode_SteamFlowPort_Default
          //
          if (n.name () == "SimNode_SteamFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_SteamFlowPort_Default_type > r (
              SimNode_SteamFlowPort_Default_traits::create (i, f, this));

            this->SimNode_SteamFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_SteamFlowPort_Steam_In
          //
          if (n.name () == "SimNode_SteamFlowPort_Steam_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_SteamFlowPort_Steam_In_type > r (
              SimNode_SteamFlowPort_Steam_In_traits::create (i, f, this));

            this->SimNode_SteamFlowPort_Steam_In_.push_back (r);
            continue;
          }

          // SimNode_SteamFlowPort_Steam_InOrOut
          //
          if (n.name () == "SimNode_SteamFlowPort_Steam_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_SteamFlowPort_Steam_InOrOut_type > r (
              SimNode_SteamFlowPort_Steam_InOrOut_traits::create (i, f, this));

            this->SimNode_SteamFlowPort_Steam_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_SteamFlowPort_Steam_Out
          //
          if (n.name () == "SimNode_SteamFlowPort_Steam_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_SteamFlowPort_Steam_Out_type > r (
              SimNode_SteamFlowPort_Steam_Out_traits::create (i, f, this));

            this->SimNode_SteamFlowPort_Steam_Out_.push_back (r);
            continue;
          }

          // SimNode_VarRefrigerantFlowPort_Default
          //
          if (n.name () == "SimNode_VarRefrigerantFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_VarRefrigerantFlowPort_Default_type > r (
              SimNode_VarRefrigerantFlowPort_Default_traits::create (i, f, this));

            this->SimNode_VarRefrigerantFlowPort_Default_.push_back (r);
            continue;
          }

          // SimNode_VarRefrigerantFlowPort_VRF_In
          //
          if (n.name () == "SimNode_VarRefrigerantFlowPort_VRF_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_VarRefrigerantFlowPort_VRF_In_type > r (
              SimNode_VarRefrigerantFlowPort_VRF_In_traits::create (i, f, this));

            this->SimNode_VarRefrigerantFlowPort_VRF_In_.push_back (r);
            continue;
          }

          // SimNode_VarRefrigerantFlowPort_VRF_InOrOut
          //
          if (n.name () == "SimNode_VarRefrigerantFlowPort_VRF_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_VarRefrigerantFlowPort_VRF_InOrOut_type > r (
              SimNode_VarRefrigerantFlowPort_VRF_InOrOut_traits::create (i, f, this));

            this->SimNode_VarRefrigerantFlowPort_VRF_InOrOut_.push_back (r);
            continue;
          }

          // SimNode_VarRefrigerantFlowPort_VRF_Out
          //
          if (n.name () == "SimNode_VarRefrigerantFlowPort_VRF_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_VarRefrigerantFlowPort_VRF_Out_type > r (
              SimNode_VarRefrigerantFlowPort_VRF_Out_traits::create (i, f, this));

            this->SimNode_VarRefrigerantFlowPort_VRF_Out_.push_back (r);
            continue;
          }

          // SimNode_ZoneAirFlowPort_Air_In
          //
          if (n.name () == "SimNode_ZoneAirFlowPort_Air_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ZoneAirFlowPort_Air_In_type > r (
              SimNode_ZoneAirFlowPort_Air_In_traits::create (i, f, this));

            this->SimNode_ZoneAirFlowPort_Air_In_.push_back (r);
            continue;
          }

          // SimNode_ZoneAirFlowPort_Air_Out
          //
          if (n.name () == "SimNode_ZoneAirFlowPort_Air_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ZoneAirFlowPort_Air_Out_type > r (
              SimNode_ZoneAirFlowPort_Air_Out_traits::create (i, f, this));

            this->SimNode_ZoneAirFlowPort_Air_Out_.push_back (r);
            continue;
          }

          // SimNode_ZoneAirNode_Default
          //
          if (n.name () == "SimNode_ZoneAirNode_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimNode_ZoneAirNode_Default_type > r (
              SimNode_ZoneAirNode_Default_traits::create (i, f, this));

            this->SimNode_ZoneAirNode_Default_.push_back (r);
            continue;
          }

          // SimObjectOutputRequestSet_Default_Default
          //
          if (n.name () == "SimObjectOutputRequestSet_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimObjectOutputRequestSet_Default_Default_type > r (
              SimObjectOutputRequestSet_Default_Default_traits::create (i, f, this));

            this->SimObjectOutputRequestSet_Default_Default_.push_back (r);
            continue;
          }

          // SimOpeningType_Opening_Default
          //
          if (n.name () == "SimOpeningType_Opening_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimOpeningType_Opening_Default_type > r (
              SimOpeningType_Opening_Default_traits::create (i, f, this));

            this->SimOpeningType_Opening_Default_.push_back (r);
            continue;
          }

          // SimOrganization_Organization_Default
          //
          if (n.name () == "SimOrganization_Organization_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimOrganization_Organization_Default_type > r (
              SimOrganization_Organization_Default_traits::create (i, f, this));

            this->SimOrganization_Organization_Default_.push_back (r);
            continue;
          }

          // SimOwnerHistory_Default_Default
          //
          if (n.name () == "SimOwnerHistory_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimOwnerHistory_Default_Default_type > r (
              SimOwnerHistory_Default_Default_traits::create (i, f, this));

            this->SimOwnerHistory_Default_Default_.push_back (r);
            continue;
          }

          // SimPanel_Default_Default
          //
          if (n.name () == "SimPanel_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPanel_Default_Default_type > r (
              SimPanel_Default_Default_traits::create (i, f, this));

            this->SimPanel_Default_Default_.push_back (r);
            continue;
          }

          // SimPanelArrayParams_PanelArrayParams_Default
          //
          if (n.name () == "SimPanelArrayParams_PanelArrayParams_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPanelArrayParams_PanelArrayParams_Default_type > r (
              SimPanelArrayParams_PanelArrayParams_Default_traits::create (i, f, this));

            this->SimPanelArrayParams_PanelArrayParams_Default_.push_back (r);
            continue;
          }

          // SimPanelArrayParams_SolarShadeArray_Default
          //
          if (n.name () == "SimPanelArrayParams_SolarShadeArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPanelArrayParams_SolarShadeArray_Default_type > r (
              SimPanelArrayParams_SolarShadeArray_Default_traits::create (i, f, this));

            this->SimPanelArrayParams_SolarShadeArray_Default_.push_back (r);
            continue;
          }

          // SimPanelParams_GlazingPanel_Glazing
          //
          if (n.name () == "SimPanelParams_GlazingPanel_Glazing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPanelParams_GlazingPanel_Glazing_type > r (
              SimPanelParams_GlazingPanel_Glazing_traits::create (i, f, this));

            this->SimPanelParams_GlazingPanel_Glazing_.push_back (r);
            continue;
          }

          // SimPanelParams_PanelParams_Default
          //
          if (n.name () == "SimPanelParams_PanelParams_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPanelParams_PanelParams_Default_type > r (
              SimPanelParams_PanelParams_Default_traits::create (i, f, this));

            this->SimPanelParams_PanelParams_Default_.push_back (r);
            continue;
          }

          // SimPanelParams_ShadePanel_SolarShading
          //
          if (n.name () == "SimPanelParams_ShadePanel_SolarShading" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPanelParams_ShadePanel_SolarShading_type > r (
              SimPanelParams_ShadePanel_SolarShading_traits::create (i, f, this));

            this->SimPanelParams_ShadePanel_SolarShading_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_C_Shape
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_C_Shape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_C_Shape_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_C_Shape_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_C_Shape_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_Circle
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_Circle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_Circle_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_Circle_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_Circle_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_Ellipse
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_Ellipse" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_Ellipse_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_Ellipse_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_Ellipse_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_I_Shape
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_I_Shape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_I_Shape_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_I_Shape_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_I_Shape_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_L_Shape
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_L_Shape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_L_Shape_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_L_Shape_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_L_Shape_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_Rectangle
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_Rectangle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_Rectangle_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_Rectangle_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_Rectangle_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_T_Shape
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_T_Shape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_T_Shape_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_T_Shape_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_T_Shape_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_U_Shape
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_U_Shape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_U_Shape_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_U_Shape_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_U_Shape_.push_back (r);
            continue;
          }

          // SimParameterizedProfileDef_ParameterizedProfile_Z_Shape
          //
          if (n.name () == "SimParameterizedProfileDef_ParameterizedProfile_Z_Shape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_type > r (
              SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_traits::create (i, f, this));

            this->SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Bicubic
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Bicubic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Bicubic_type > r (
              SimPerformanceCurve_Mathematical_Bicubic_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Bicubic_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Biquadratic
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Biquadratic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Biquadratic_type > r (
              SimPerformanceCurve_Mathematical_Biquadratic_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Biquadratic_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Cubic
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Cubic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Cubic_type > r (
              SimPerformanceCurve_Mathematical_Cubic_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Cubic_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_DoubleExponentialDecay
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_DoubleExponentialDecay" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_DoubleExponentialDecay_type > r (
              SimPerformanceCurve_Mathematical_DoubleExponentialDecay_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_DoubleExponentialDecay_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Exponent
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Exponent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Exponent_type > r (
              SimPerformanceCurve_Mathematical_Exponent_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Exponent_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_ExponentialDecay
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_ExponentialDecay" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_ExponentialDecay_type > r (
              SimPerformanceCurve_Mathematical_ExponentialDecay_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_ExponentialDecay_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_ExponentialSkewNormal
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_ExponentialSkewNormal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_ExponentialSkewNormal_type > r (
              SimPerformanceCurve_Mathematical_ExponentialSkewNormal_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_ExponentialSkewNormal_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_FanPressureRise
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_FanPressureRise" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_FanPressureRise_type > r (
              SimPerformanceCurve_Mathematical_FanPressureRise_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_FanPressureRise_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Linear
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Linear" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Linear_type > r (
              SimPerformanceCurve_Mathematical_Linear_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Linear_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_QuadLinear
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_QuadLinear" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_QuadLinear_type > r (
              SimPerformanceCurve_Mathematical_QuadLinear_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_QuadLinear_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Quadratic
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Quadratic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Quadratic_type > r (
              SimPerformanceCurve_Mathematical_Quadratic_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Quadratic_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_QuadraticLinear
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_QuadraticLinear" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_QuadraticLinear_type > r (
              SimPerformanceCurve_Mathematical_QuadraticLinear_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_QuadraticLinear_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Quartic
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Quartic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Quartic_type > r (
              SimPerformanceCurve_Mathematical_Quartic_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Quartic_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_RectangularHyperbola1
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_RectangularHyperbola1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_RectangularHyperbola1_type > r (
              SimPerformanceCurve_Mathematical_RectangularHyperbola1_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_RectangularHyperbola1_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_RectangularHyperbola2
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_RectangularHyperbola2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_RectangularHyperbola2_type > r (
              SimPerformanceCurve_Mathematical_RectangularHyperbola2_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_RectangularHyperbola2_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_Sigmoid
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_Sigmoid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_Sigmoid_type > r (
              SimPerformanceCurve_Mathematical_Sigmoid_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_Sigmoid_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Mathematical_TriQuadratic
          //
          if (n.name () == "SimPerformanceCurve_Mathematical_TriQuadratic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Mathematical_TriQuadratic_type > r (
              SimPerformanceCurve_Mathematical_TriQuadratic_traits::create (i, f, this));

            this->SimPerformanceCurve_Mathematical_TriQuadratic_.push_back (r);
            continue;
          }

          // SimPerformanceCurve_Relational_PressureDrop
          //
          if (n.name () == "SimPerformanceCurve_Relational_PressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceCurve_Relational_PressureDrop_type > r (
              SimPerformanceCurve_Relational_PressureDrop_traits::create (i, f, this));

            this->SimPerformanceCurve_Relational_PressureDrop_.push_back (r);
            continue;
          }

          // SimPerformanceTable_Variable_MultiLookup
          //
          if (n.name () == "SimPerformanceTable_Variable_MultiLookup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceTable_Variable_MultiLookup_type > r (
              SimPerformanceTable_Variable_MultiLookup_traits::create (i, f, this));

            this->SimPerformanceTable_Variable_MultiLookup_.push_back (r);
            continue;
          }

          // SimPerformanceTable_Variable_OneIndependent
          //
          if (n.name () == "SimPerformanceTable_Variable_OneIndependent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceTable_Variable_OneIndependent_type > r (
              SimPerformanceTable_Variable_OneIndependent_traits::create (i, f, this));

            this->SimPerformanceTable_Variable_OneIndependent_.push_back (r);
            continue;
          }

          // SimPerformanceTable_Variable_TwoIndependent
          //
          if (n.name () == "SimPerformanceTable_Variable_TwoIndependent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerformanceTable_Variable_TwoIndependent_type > r (
              SimPerformanceTable_Variable_TwoIndependent_traits::create (i, f, this));

            this->SimPerformanceTable_Variable_TwoIndependent_.push_back (r);
            continue;
          }

          // SimPerson_Person_Default
          //
          if (n.name () == "SimPerson_Person_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPerson_Person_Default_type > r (
              SimPerson_Person_Default_traits::create (i, f, this));

            this->SimPerson_Person_Default_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_Architect
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_Architect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_Architect_type > r (
              SimPersonAndOrganization_PersonAndOrganization_Architect_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_Architect_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_Default
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_Default_type > r (
              SimPersonAndOrganization_PersonAndOrganization_Default_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_Default_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_type > r (
              SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_type > r (
              SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_Engineer
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_Engineer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_Engineer_type > r (
              SimPersonAndOrganization_PersonAndOrganization_Engineer_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_Engineer_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_LightingDesigner
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_LightingDesigner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_type > r (
              SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_.push_back (r);
            continue;
          }

          // SimPersonAndOrganization_PersonAndOrganization_Owner
          //
          if (n.name () == "SimPersonAndOrganization_PersonAndOrganization_Owner" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPersonAndOrganization_PersonAndOrganization_Owner_type > r (
              SimPersonAndOrganization_PersonAndOrganization_Owner_traits::create (i, f, this));

            this->SimPersonAndOrganization_PersonAndOrganization_Owner_.push_back (r);
            continue;
          }

          // SimPlacement_Axis1Placement_Default
          //
          if (n.name () == "SimPlacement_Axis1Placement_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPlacement_Axis1Placement_Default_type > r (
              SimPlacement_Axis1Placement_Default_traits::create (i, f, this));

            this->SimPlacement_Axis1Placement_Default_.push_back (r);
            continue;
          }

          // SimPlacement_Axis2Placement2D_Default
          //
          if (n.name () == "SimPlacement_Axis2Placement2D_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPlacement_Axis2Placement2D_Default_type > r (
              SimPlacement_Axis2Placement2D_Default_traits::create (i, f, this));

            this->SimPlacement_Axis2Placement2D_Default_.push_back (r);
            continue;
          }

          // SimPlacement_Axis2Placement3D_Default
          //
          if (n.name () == "SimPlacement_Axis2Placement3D_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPlacement_Axis2Placement3D_Default_type > r (
              SimPlacement_Axis2Placement3D_Default_traits::create (i, f, this));

            this->SimPlacement_Axis2Placement3D_Default_.push_back (r);
            continue;
          }

          // SimPort_AirFlowPort_Air_In
          //
          if (n.name () == "SimPort_AirFlowPort_Air_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_AirFlowPort_Air_In_type > r (
              SimPort_AirFlowPort_Air_In_traits::create (i, f, this));

            this->SimPort_AirFlowPort_Air_In_.push_back (r);
            continue;
          }

          // SimPort_AirFlowPort_Air_InOrOut
          //
          if (n.name () == "SimPort_AirFlowPort_Air_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_AirFlowPort_Air_InOrOut_type > r (
              SimPort_AirFlowPort_Air_InOrOut_traits::create (i, f, this));

            this->SimPort_AirFlowPort_Air_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_AirFlowPort_Air_Out
          //
          if (n.name () == "SimPort_AirFlowPort_Air_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_AirFlowPort_Air_Out_type > r (
              SimPort_AirFlowPort_Air_Out_traits::create (i, f, this));

            this->SimPort_AirFlowPort_Air_Out_.push_back (r);
            continue;
          }

          // SimPort_AirFlowPort_Default
          //
          if (n.name () == "SimPort_AirFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_AirFlowPort_Default_type > r (
              SimPort_AirFlowPort_Default_traits::create (i, f, this));

            this->SimPort_AirFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_AirFlowPort_ExhaustAir_Out
          //
          if (n.name () == "SimPort_AirFlowPort_ExhaustAir_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_AirFlowPort_ExhaustAir_Out_type > r (
              SimPort_AirFlowPort_ExhaustAir_Out_traits::create (i, f, this));

            this->SimPort_AirFlowPort_ExhaustAir_Out_.push_back (r);
            continue;
          }

          // SimPort_AirFlowPort_OutdoorAir_In
          //
          if (n.name () == "SimPort_AirFlowPort_OutdoorAir_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_AirFlowPort_OutdoorAir_In_type > r (
              SimPort_AirFlowPort_OutdoorAir_In_traits::create (i, f, this));

            this->SimPort_AirFlowPort_OutdoorAir_In_.push_back (r);
            continue;
          }

          // SimPort_ChilledWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimPort_ChilledWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ChilledWaterFlowPort_CondensedWaterOut_type > r (
              SimPort_ChilledWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimPort_ChilledWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimPort_ChilledWaterFlowPort_Default
          //
          if (n.name () == "SimPort_ChilledWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ChilledWaterFlowPort_Default_type > r (
              SimPort_ChilledWaterFlowPort_Default_traits::create (i, f, this));

            this->SimPort_ChilledWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_ChilledWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimPort_ChilledWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_type > r (
              SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimPort_ChilledWaterFlowPort_Water_In
          //
          if (n.name () == "SimPort_ChilledWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ChilledWaterFlowPort_Water_In_type > r (
              SimPort_ChilledWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimPort_ChilledWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimPort_ChilledWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimPort_ChilledWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ChilledWaterFlowPort_Water_InOrOut_type > r (
              SimPort_ChilledWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimPort_ChilledWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_ChilledWaterFlowPort_Water_Out
          //
          if (n.name () == "SimPort_ChilledWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ChilledWaterFlowPort_Water_Out_type > r (
              SimPort_ChilledWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimPort_ChilledWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimPort_CondenserFlowPort_CondenserFlow_In
          //
          if (n.name () == "SimPort_CondenserFlowPort_CondenserFlow_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_CondenserFlowPort_CondenserFlow_In_type > r (
              SimPort_CondenserFlowPort_CondenserFlow_In_traits::create (i, f, this));

            this->SimPort_CondenserFlowPort_CondenserFlow_In_.push_back (r);
            continue;
          }

          // SimPort_CondenserFlowPort_CondenserFlow_InOrOut
          //
          if (n.name () == "SimPort_CondenserFlowPort_CondenserFlow_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_CondenserFlowPort_CondenserFlow_InOrOut_type > r (
              SimPort_CondenserFlowPort_CondenserFlow_InOrOut_traits::create (i, f, this));

            this->SimPort_CondenserFlowPort_CondenserFlow_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_CondenserFlowPort_CondenserFlow_Out
          //
          if (n.name () == "SimPort_CondenserFlowPort_CondenserFlow_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_CondenserFlowPort_CondenserFlow_Out_type > r (
              SimPort_CondenserFlowPort_CondenserFlow_Out_traits::create (i, f, this));

            this->SimPort_CondenserFlowPort_CondenserFlow_Out_.push_back (r);
            continue;
          }

          // SimPort_CondenserFlowPort_Default
          //
          if (n.name () == "SimPort_CondenserFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_CondenserFlowPort_Default_type > r (
              SimPort_CondenserFlowPort_Default_traits::create (i, f, this));

            this->SimPort_CondenserFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_AirLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_AirLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_AirLoop_Default_type > r (
              SimPort_DigitalControl_AirLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_AirLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_AirLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_AirLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_AirLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_AirLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_AirLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_AirLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_AirLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_AirLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_AirLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_AirLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CHWLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_CHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CHWLoop_Default_type > r (
              SimPort_DigitalControl_CHWLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_CHWLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CHWLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_CHWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CHWLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_CHWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_CHWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CHWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_CHWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CWLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_CWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CWLoop_Default_type > r (
              SimPort_DigitalControl_CWLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_CWLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CWLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_CWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CWLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_CWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_CWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_CWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_CWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_CWLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_CWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_CWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_HWLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_HWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_HWLoop_Default_type > r (
              SimPort_DigitalControl_HWLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_HWLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_HWLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_HWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_HWLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_HWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_HWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_HWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_HWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_HWLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_HWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_HWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_MxWLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_MxWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_MxWLoop_Default_type > r (
              SimPort_DigitalControl_MxWLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_MxWLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_MxWLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_MxWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_MxWLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_MxWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_MxWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_MxWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_MxWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_RFGLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_RFGLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_RFGLoop_Default_type > r (
              SimPort_DigitalControl_RFGLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_RFGLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_RFGLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_RFGLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_RFGLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_RFGLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_RFGLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_RFGLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_RFGLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_SHWLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_SHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_SHWLoop_Default_type > r (
              SimPort_DigitalControl_SHWLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_SHWLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_SHWLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_SHWLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_SHWLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_SHWLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_SHWLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_SHWLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_SHWLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_STMLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_STMLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_STMLoop_Default_type > r (
              SimPort_DigitalControl_STMLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_STMLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_STMLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_STMLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_STMLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_STMLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_STMLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_STMLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_STMLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_STMLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_STMLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_STMLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_VRFLoop_Default
          //
          if (n.name () == "SimPort_DigitalControl_VRFLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_VRFLoop_Default_type > r (
              SimPort_DigitalControl_VRFLoop_Default_traits::create (i, f, this));

            this->SimPort_DigitalControl_VRFLoop_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_VRFLoop_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControl_VRFLoop_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_VRFLoop_DigitalSignal_In_type > r (
              SimPort_DigitalControl_VRFLoop_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControl_VRFLoop_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControl_VRFLoop_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControl_VRFLoop_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_type > r (
              SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControlPort_Default
          //
          if (n.name () == "SimPort_DigitalControlPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControlPort_Default_type > r (
              SimPort_DigitalControlPort_Default_traits::create (i, f, this));

            this->SimPort_DigitalControlPort_Default_.push_back (r);
            continue;
          }

          // SimPort_DigitalControlPort_DigitalSignal_In
          //
          if (n.name () == "SimPort_DigitalControlPort_DigitalSignal_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControlPort_DigitalSignal_In_type > r (
              SimPort_DigitalControlPort_DigitalSignal_In_traits::create (i, f, this));

            this->SimPort_DigitalControlPort_DigitalSignal_In_.push_back (r);
            continue;
          }

          // SimPort_DigitalControlPort_DigitalSignal_InOrOut
          //
          if (n.name () == "SimPort_DigitalControlPort_DigitalSignal_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControlPort_DigitalSignal_InOrOut_type > r (
              SimPort_DigitalControlPort_DigitalSignal_InOrOut_traits::create (i, f, this));

            this->SimPort_DigitalControlPort_DigitalSignal_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_DigitalControlPort_DigitalSignal_Out
          //
          if (n.name () == "SimPort_DigitalControlPort_DigitalSignal_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControlPort_DigitalSignal_Out_type > r (
              SimPort_DigitalControlPort_DigitalSignal_Out_traits::create (i, f, this));

            this->SimPort_DigitalControlPort_DigitalSignal_Out_.push_back (r);
            continue;
          }

          // SimPort_DigitalControlPort_DigitalVirtual
          //
          if (n.name () == "SimPort_DigitalControlPort_DigitalVirtual" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DigitalControlPort_DigitalVirtual_type > r (
              SimPort_DigitalControlPort_DigitalVirtual_traits::create (i, f, this));

            this->SimPort_DigitalControlPort_DigitalVirtual_.push_back (r);
            continue;
          }

          // SimPort_DistributionPort_Default
          //
          if (n.name () == "SimPort_DistributionPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_DistributionPort_Default_type > r (
              SimPort_DistributionPort_Default_traits::create (i, f, this));

            this->SimPort_DistributionPort_Default_.push_back (r);
            continue;
          }

          // SimPort_Docking_Default
          //
          if (n.name () == "SimPort_Docking_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_Docking_Default_type > r (
              SimPort_Docking_Default_traits::create (i, f, this));

            this->SimPort_Docking_Default_.push_back (r);
            continue;
          }

          // SimPort_Docking_ThermalZone
          //
          if (n.name () == "SimPort_Docking_ThermalZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_Docking_ThermalZone_type > r (
              SimPort_Docking_ThermalZone_traits::create (i, f, this));

            this->SimPort_Docking_ThermalZone_.push_back (r);
            continue;
          }

          // SimPort_ElectricalFlowPort_Default
          //
          if (n.name () == "SimPort_ElectricalFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ElectricalFlowPort_Default_type > r (
              SimPort_ElectricalFlowPort_Default_traits::create (i, f, this));

            this->SimPort_ElectricalFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_ElectricalFlowPort_Electrical_In
          //
          if (n.name () == "SimPort_ElectricalFlowPort_Electrical_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ElectricalFlowPort_Electrical_In_type > r (
              SimPort_ElectricalFlowPort_Electrical_In_traits::create (i, f, this));

            this->SimPort_ElectricalFlowPort_Electrical_In_.push_back (r);
            continue;
          }

          // SimPort_ElectricalFlowPort_Electrical_InOrOut
          //
          if (n.name () == "SimPort_ElectricalFlowPort_Electrical_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ElectricalFlowPort_Electrical_InOrOut_type > r (
              SimPort_ElectricalFlowPort_Electrical_InOrOut_traits::create (i, f, this));

            this->SimPort_ElectricalFlowPort_Electrical_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_ElectricalFlowPort_Electrical_Out
          //
          if (n.name () == "SimPort_ElectricalFlowPort_Electrical_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ElectricalFlowPort_Electrical_Out_type > r (
              SimPort_ElectricalFlowPort_Electrical_Out_traits::create (i, f, this));

            this->SimPort_ElectricalFlowPort_Electrical_Out_.push_back (r);
            continue;
          }

          // SimPort_HotWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimPort_HotWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_HotWaterFlowPort_CondensedWaterOut_type > r (
              SimPort_HotWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimPort_HotWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimPort_HotWaterFlowPort_Default
          //
          if (n.name () == "SimPort_HotWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_HotWaterFlowPort_Default_type > r (
              SimPort_HotWaterFlowPort_Default_traits::create (i, f, this));

            this->SimPort_HotWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_HotWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimPort_HotWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_HotWaterFlowPort_EvaporativeWaterIn_type > r (
              SimPort_HotWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimPort_HotWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimPort_HotWaterFlowPort_Water_In
          //
          if (n.name () == "SimPort_HotWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_HotWaterFlowPort_Water_In_type > r (
              SimPort_HotWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimPort_HotWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimPort_HotWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimPort_HotWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_HotWaterFlowPort_Water_InOrOut_type > r (
              SimPort_HotWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimPort_HotWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_HotWaterFlowPort_Water_Out
          //
          if (n.name () == "SimPort_HotWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_HotWaterFlowPort_Water_Out_type > r (
              SimPort_HotWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimPort_HotWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimPort_MixedWaterFlowPort_CondensedWaterOut
          //
          if (n.name () == "SimPort_MixedWaterFlowPort_CondensedWaterOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_MixedWaterFlowPort_CondensedWaterOut_type > r (
              SimPort_MixedWaterFlowPort_CondensedWaterOut_traits::create (i, f, this));

            this->SimPort_MixedWaterFlowPort_CondensedWaterOut_.push_back (r);
            continue;
          }

          // SimPort_MixedWaterFlowPort_Default
          //
          if (n.name () == "SimPort_MixedWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_MixedWaterFlowPort_Default_type > r (
              SimPort_MixedWaterFlowPort_Default_traits::create (i, f, this));

            this->SimPort_MixedWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_MixedWaterFlowPort_EvaporativeWaterIn
          //
          if (n.name () == "SimPort_MixedWaterFlowPort_EvaporativeWaterIn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_MixedWaterFlowPort_EvaporativeWaterIn_type > r (
              SimPort_MixedWaterFlowPort_EvaporativeWaterIn_traits::create (i, f, this));

            this->SimPort_MixedWaterFlowPort_EvaporativeWaterIn_.push_back (r);
            continue;
          }

          // SimPort_MixedWaterFlowPort_Water_In
          //
          if (n.name () == "SimPort_MixedWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_MixedWaterFlowPort_Water_In_type > r (
              SimPort_MixedWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimPort_MixedWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimPort_MixedWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimPort_MixedWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_MixedWaterFlowPort_Water_InOrOut_type > r (
              SimPort_MixedWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimPort_MixedWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_MixedWaterFlowPort_Water_Out
          //
          if (n.name () == "SimPort_MixedWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_MixedWaterFlowPort_Water_Out_type > r (
              SimPort_MixedWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimPort_MixedWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimPort_Port_Default
          //
          if (n.name () == "SimPort_Port_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_Port_Default_type > r (
              SimPort_Port_Default_traits::create (i, f, this));

            this->SimPort_Port_Default_.push_back (r);
            continue;
          }

          // SimPort_RefrigerationFlowPort_Default
          //
          if (n.name () == "SimPort_RefrigerationFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_RefrigerationFlowPort_Default_type > r (
              SimPort_RefrigerationFlowPort_Default_traits::create (i, f, this));

            this->SimPort_RefrigerationFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_RefrigerationFlowPort_Refrigeration_In
          //
          if (n.name () == "SimPort_RefrigerationFlowPort_Refrigeration_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_RefrigerationFlowPort_Refrigeration_In_type > r (
              SimPort_RefrigerationFlowPort_Refrigeration_In_traits::create (i, f, this));

            this->SimPort_RefrigerationFlowPort_Refrigeration_In_.push_back (r);
            continue;
          }

          // SimPort_RefrigerationFlowPort_Refrigeration_InOrOut
          //
          if (n.name () == "SimPort_RefrigerationFlowPort_Refrigeration_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_type > r (
              SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_traits::create (i, f, this));

            this->SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_RefrigerationFlowPort_Refrigeration_Out
          //
          if (n.name () == "SimPort_RefrigerationFlowPort_Refrigeration_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_RefrigerationFlowPort_Refrigeration_Out_type > r (
              SimPort_RefrigerationFlowPort_Refrigeration_Out_traits::create (i, f, this));

            this->SimPort_RefrigerationFlowPort_Refrigeration_Out_.push_back (r);
            continue;
          }

          // SimPort_ServiceHotWaterFlowPort_Default
          //
          if (n.name () == "SimPort_ServiceHotWaterFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ServiceHotWaterFlowPort_Default_type > r (
              SimPort_ServiceHotWaterFlowPort_Default_traits::create (i, f, this));

            this->SimPort_ServiceHotWaterFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_ServiceHotWaterFlowPort_Water_In
          //
          if (n.name () == "SimPort_ServiceHotWaterFlowPort_Water_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ServiceHotWaterFlowPort_Water_In_type > r (
              SimPort_ServiceHotWaterFlowPort_Water_In_traits::create (i, f, this));

            this->SimPort_ServiceHotWaterFlowPort_Water_In_.push_back (r);
            continue;
          }

          // SimPort_ServiceHotWaterFlowPort_Water_InOrOut
          //
          if (n.name () == "SimPort_ServiceHotWaterFlowPort_Water_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ServiceHotWaterFlowPort_Water_InOrOut_type > r (
              SimPort_ServiceHotWaterFlowPort_Water_InOrOut_traits::create (i, f, this));

            this->SimPort_ServiceHotWaterFlowPort_Water_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_ServiceHotWaterFlowPort_Water_Out
          //
          if (n.name () == "SimPort_ServiceHotWaterFlowPort_Water_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ServiceHotWaterFlowPort_Water_Out_type > r (
              SimPort_ServiceHotWaterFlowPort_Water_Out_traits::create (i, f, this));

            this->SimPort_ServiceHotWaterFlowPort_Water_Out_.push_back (r);
            continue;
          }

          // SimPort_SteamFlowPort_Default
          //
          if (n.name () == "SimPort_SteamFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_SteamFlowPort_Default_type > r (
              SimPort_SteamFlowPort_Default_traits::create (i, f, this));

            this->SimPort_SteamFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_SteamFlowPort_Steam_In
          //
          if (n.name () == "SimPort_SteamFlowPort_Steam_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_SteamFlowPort_Steam_In_type > r (
              SimPort_SteamFlowPort_Steam_In_traits::create (i, f, this));

            this->SimPort_SteamFlowPort_Steam_In_.push_back (r);
            continue;
          }

          // SimPort_SteamFlowPort_Steam_InOrOut
          //
          if (n.name () == "SimPort_SteamFlowPort_Steam_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_SteamFlowPort_Steam_InOrOut_type > r (
              SimPort_SteamFlowPort_Steam_InOrOut_traits::create (i, f, this));

            this->SimPort_SteamFlowPort_Steam_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_SteamFlowPort_Steam_Out
          //
          if (n.name () == "SimPort_SteamFlowPort_Steam_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_SteamFlowPort_Steam_Out_type > r (
              SimPort_SteamFlowPort_Steam_Out_traits::create (i, f, this));

            this->SimPort_SteamFlowPort_Steam_Out_.push_back (r);
            continue;
          }

          // SimPort_VarRefrigerantFlowPort_Default
          //
          if (n.name () == "SimPort_VarRefrigerantFlowPort_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_VarRefrigerantFlowPort_Default_type > r (
              SimPort_VarRefrigerantFlowPort_Default_traits::create (i, f, this));

            this->SimPort_VarRefrigerantFlowPort_Default_.push_back (r);
            continue;
          }

          // SimPort_VarRefrigerantFlowPort_VRF_In
          //
          if (n.name () == "SimPort_VarRefrigerantFlowPort_VRF_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_VarRefrigerantFlowPort_VRF_In_type > r (
              SimPort_VarRefrigerantFlowPort_VRF_In_traits::create (i, f, this));

            this->SimPort_VarRefrigerantFlowPort_VRF_In_.push_back (r);
            continue;
          }

          // SimPort_VarRefrigerantFlowPort_VRF_InOrOut
          //
          if (n.name () == "SimPort_VarRefrigerantFlowPort_VRF_InOrOut" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_VarRefrigerantFlowPort_VRF_InOrOut_type > r (
              SimPort_VarRefrigerantFlowPort_VRF_InOrOut_traits::create (i, f, this));

            this->SimPort_VarRefrigerantFlowPort_VRF_InOrOut_.push_back (r);
            continue;
          }

          // SimPort_VarRefrigerantFlowPort_VRF_Out
          //
          if (n.name () == "SimPort_VarRefrigerantFlowPort_VRF_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_VarRefrigerantFlowPort_VRF_Out_type > r (
              SimPort_VarRefrigerantFlowPort_VRF_Out_traits::create (i, f, this));

            this->SimPort_VarRefrigerantFlowPort_VRF_Out_.push_back (r);
            continue;
          }

          // SimPort_ZoneAirFlowPort_Air_In
          //
          if (n.name () == "SimPort_ZoneAirFlowPort_Air_In" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ZoneAirFlowPort_Air_In_type > r (
              SimPort_ZoneAirFlowPort_Air_In_traits::create (i, f, this));

            this->SimPort_ZoneAirFlowPort_Air_In_.push_back (r);
            continue;
          }

          // SimPort_ZoneAirFlowPort_Air_Out
          //
          if (n.name () == "SimPort_ZoneAirFlowPort_Air_Out" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPort_ZoneAirFlowPort_Air_Out_type > r (
              SimPort_ZoneAirFlowPort_Air_Out_traits::create (i, f, this));

            this->SimPort_ZoneAirFlowPort_Air_Out_.push_back (r);
            continue;
          }

          // SimPresentationLayerAssignment_Default_Default
          //
          if (n.name () == "SimPresentationLayerAssignment_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPresentationLayerAssignment_Default_Default_type > r (
              SimPresentationLayerAssignment_Default_Default_traits::create (i, f, this));

            this->SimPresentationLayerAssignment_Default_Default_.push_back (r);
            continue;
          }

          // SimProfileParams_Member_Default
          //
          if (n.name () == "SimProfileParams_Member_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimProfileParams_Member_Default_type > r (
              SimProfileParams_Member_Default_traits::create (i, f, this));

            this->SimProfileParams_Member_Default_.push_back (r);
            continue;
          }

          // SimProfileParams_ProfileParams_Default
          //
          if (n.name () == "SimProfileParams_ProfileParams_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimProfileParams_ProfileParams_Default_type > r (
              SimProfileParams_ProfileParams_Default_traits::create (i, f, this));

            this->SimProfileParams_ProfileParams_Default_.push_back (r);
            continue;
          }

          // SimProject_Project_Backpack
          //
          if (n.name () == "SimProject_Project_Backpack" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimProject_Project_Backpack_type > r (
              SimProject_Project_Backpack_traits::create (i, f, this));

            this->SimProject_Project_Backpack_.push_back (r);
            continue;
          }

          // SimProject_Project_DesignAlternative
          //
          if (n.name () == "SimProject_Project_DesignAlternative" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimProject_Project_DesignAlternative_type > r (
              SimProject_Project_DesignAlternative_traits::create (i, f, this));

            this->SimProject_Project_DesignAlternative_.push_back (r);
            continue;
          }

          // SimProject_Project_SBD_View
          //
          if (n.name () == "SimProject_Project_SBD_View" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimProject_Project_SBD_View_type > r (
              SimProject_Project_SBD_View_traits::create (i, f, this));

            this->SimProject_Project_SBD_View_.push_back (r);
            continue;
          }

          // SimProject_Project_T24_View
          //
          if (n.name () == "SimProject_Project_T24_View" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimProject_Project_T24_View_type > r (
              SimProject_Project_T24_View_traits::create (i, f, this));

            this->SimProject_Project_T24_View_.push_back (r);
            continue;
          }

          // SimPropertyListValue_SimpleProp_ListValue
          //
          if (n.name () == "SimPropertyListValue_SimpleProp_ListValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPropertyListValue_SimpleProp_ListValue_type > r (
              SimPropertyListValue_SimpleProp_ListValue_traits::create (i, f, this));

            this->SimPropertyListValue_SimpleProp_ListValue_.push_back (r);
            continue;
          }

          // SimPropertySet_PropertySet_Default
          //
          if (n.name () == "SimPropertySet_PropertySet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPropertySet_PropertySet_Default_type > r (
              SimPropertySet_PropertySet_Default_traits::create (i, f, this));

            this->SimPropertySet_PropertySet_Default_.push_back (r);
            continue;
          }

          // SimPropertySingleValue_SimpleProp_SingleValue
          //
          if (n.name () == "SimPropertySingleValue_SimpleProp_SingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimPropertySingleValue_SimpleProp_SingleValue_type > r (
              SimPropertySingleValue_SimpleProp_SingleValue_traits::create (i, f, this));

            this->SimPropertySingleValue_SimpleProp_SingleValue_.push_back (r);
            continue;
          }

          // SimRailing_Default_Default
          //
          if (n.name () == "SimRailing_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRailing_Default_Default_type > r (
              SimRailing_Default_Default_traits::create (i, f, this));

            this->SimRailing_Default_Default_.push_back (r);
            continue;
          }

          // SimRailing_GuardRailing_Default
          //
          if (n.name () == "SimRailing_GuardRailing_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRailing_GuardRailing_Default_type > r (
              SimRailing_GuardRailing_Default_traits::create (i, f, this));

            this->SimRailing_GuardRailing_Default_.push_back (r);
            continue;
          }

          // SimRailing_HandRailing_Default
          //
          if (n.name () == "SimRailing_HandRailing_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRailing_HandRailing_Default_type > r (
              SimRailing_HandRailing_Default_traits::create (i, f, this));

            this->SimRailing_HandRailing_Default_.push_back (r);
            continue;
          }

          // SimRailingParams_Railing_Default
          //
          if (n.name () == "SimRailingParams_Railing_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRailingParams_Railing_Default_type > r (
              SimRailingParams_Railing_Default_traits::create (i, f, this));

            this->SimRailingParams_Railing_Default_.push_back (r);
            continue;
          }

          // SimRamp_Ramp_Default
          //
          if (n.name () == "SimRamp_Ramp_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRamp_Ramp_Default_type > r (
              SimRamp_Ramp_Default_traits::create (i, f, this));

            this->SimRamp_Ramp_Default_.push_back (r);
            continue;
          }

          // SimRampFlight_Default_Default
          //
          if (n.name () == "SimRampFlight_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRampFlight_Default_Default_type > r (
              SimRampFlight_Default_Default_traits::create (i, f, this));

            this->SimRampFlight_Default_Default_.push_back (r);
            continue;
          }

          // SimRampFlightParams_RampFlight_Default
          //
          if (n.name () == "SimRampFlightParams_RampFlight_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRampFlightParams_RampFlight_Default_type > r (
              SimRampFlightParams_RampFlight_Default_traits::create (i, f, this));

            this->SimRampFlightParams_RampFlight_Default_.push_back (r);
            continue;
          }

          // SimRampParams_Ramp_Default
          //
          if (n.name () == "SimRampParams_Ramp_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRampParams_Ramp_Default_type > r (
              SimRampParams_Ramp_Default_traits::create (i, f, this));

            this->SimRampParams_Ramp_Default_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Compressor_Default
          //
          if (n.name () == "SimRefrigerationSystemElement_Compressor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Compressor_Default_type > r (
              SimRefrigerationSystemElement_Compressor_Default_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Compressor_Default_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Condenser_AirCooled
          //
          if (n.name () == "SimRefrigerationSystemElement_Condenser_AirCooled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Condenser_AirCooled_type > r (
              SimRefrigerationSystemElement_Condenser_AirCooled_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Condenser_AirCooled_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Condenser_Cascade
          //
          if (n.name () == "SimRefrigerationSystemElement_Condenser_Cascade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Condenser_Cascade_type > r (
              SimRefrigerationSystemElement_Condenser_Cascade_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Condenser_Cascade_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Condenser_EvaporativeCooled
          //
          if (n.name () == "SimRefrigerationSystemElement_Condenser_EvaporativeCooled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Condenser_EvaporativeCooled_type > r (
              SimRefrigerationSystemElement_Condenser_EvaporativeCooled_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Condenser_EvaporativeCooled_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Condenser_WaterCooled
          //
          if (n.name () == "SimRefrigerationSystemElement_Condenser_WaterCooled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Condenser_WaterCooled_type > r (
              SimRefrigerationSystemElement_Condenser_WaterCooled_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Condenser_WaterCooled_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Default_Default
          //
          if (n.name () == "SimRefrigerationSystemElement_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Default_Default_type > r (
              SimRefrigerationSystemElement_Default_Default_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Default_Default_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_GasCooler_AirCooled
          //
          if (n.name () == "SimRefrigerationSystemElement_GasCooler_AirCooled" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_GasCooler_AirCooled_type > r (
              SimRefrigerationSystemElement_GasCooler_AirCooled_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_GasCooler_AirCooled_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_PackagedCompressorRack_Default
          //
          if (n.name () == "SimRefrigerationSystemElement_PackagedCompressorRack_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_PackagedCompressorRack_Default_type > r (
              SimRefrigerationSystemElement_PackagedCompressorRack_Default_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_PackagedCompressorRack_Default_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_RefrigeratedCase_Default
          //
          if (n.name () == "SimRefrigerationSystemElement_RefrigeratedCase_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_RefrigeratedCase_Default_type > r (
              SimRefrigerationSystemElement_RefrigeratedCase_Default_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_RefrigeratedCase_Default_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_RefrigerationChiller_AirChiller
          //
          if (n.name () == "SimRefrigerationSystemElement_RefrigerationChiller_AirChiller" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_type > r (
              SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_Subcooler_Default
          //
          if (n.name () == "SimRefrigerationSystemElement_Subcooler_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_Subcooler_Default_type > r (
              SimRefrigerationSystemElement_Subcooler_Default_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_Subcooler_Default_.push_back (r);
            continue;
          }

          // SimRefrigerationSystemElement_WalkInCooler_Default
          //
          if (n.name () == "SimRefrigerationSystemElement_WalkInCooler_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRefrigerationSystemElement_WalkInCooler_Default_type > r (
              SimRefrigerationSystemElement_WalkInCooler_Default_traits::create (i, f, this));

            this->SimRefrigerationSystemElement_WalkInCooler_Default_.push_back (r);
            continue;
          }

          // SimRegularTimeSeries_Regular_Default
          //
          if (n.name () == "SimRegularTimeSeries_Regular_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRegularTimeSeries_Regular_Default_type > r (
              SimRegularTimeSeries_Regular_Default_traits::create (i, f, this));

            this->SimRegularTimeSeries_Regular_Default_.push_back (r);
            continue;
          }

          // SimRepresentationMap_RepresentationMap_Default
          //
          if (n.name () == "SimRepresentationMap_RepresentationMap_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRepresentationMap_RepresentationMap_Default_type > r (
              SimRepresentationMap_RepresentationMap_Default_traits::create (i, f, this));

            this->SimRepresentationMap_RepresentationMap_Default_.push_back (r);
            continue;
          }

          // SimResourceConsumption_ExteriorConsumption_Default
          //
          if (n.name () == "SimResourceConsumption_ExteriorConsumption_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResourceConsumption_ExteriorConsumption_Default_type > r (
              SimResourceConsumption_ExteriorConsumption_Default_traits::create (i, f, this));

            this->SimResourceConsumption_ExteriorConsumption_Default_.push_back (r);
            continue;
          }

          // SimResourceConsumption_ExteriorConsumption_Electricity
          //
          if (n.name () == "SimResourceConsumption_ExteriorConsumption_Electricity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResourceConsumption_ExteriorConsumption_Electricity_type > r (
              SimResourceConsumption_ExteriorConsumption_Electricity_traits::create (i, f, this));

            this->SimResourceConsumption_ExteriorConsumption_Electricity_.push_back (r);
            continue;
          }

          // SimResourceConsumption_ExteriorConsumption_Fuel
          //
          if (n.name () == "SimResourceConsumption_ExteriorConsumption_Fuel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResourceConsumption_ExteriorConsumption_Fuel_type > r (
              SimResourceConsumption_ExteriorConsumption_Fuel_traits::create (i, f, this));

            this->SimResourceConsumption_ExteriorConsumption_Fuel_.push_back (r);
            continue;
          }

          // SimResourceConsumption_ExteriorConsumption_NaturalGas
          //
          if (n.name () == "SimResourceConsumption_ExteriorConsumption_NaturalGas" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResourceConsumption_ExteriorConsumption_NaturalGas_type > r (
              SimResourceConsumption_ExteriorConsumption_NaturalGas_traits::create (i, f, this));

            this->SimResourceConsumption_ExteriorConsumption_NaturalGas_.push_back (r);
            continue;
          }

          // SimResourceConsumption_ExteriorConsumption_Water
          //
          if (n.name () == "SimResourceConsumption_ExteriorConsumption_Water" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResourceConsumption_ExteriorConsumption_Water_type > r (
              SimResourceConsumption_ExteriorConsumption_Water_traits::create (i, f, this));

            this->SimResourceConsumption_ExteriorConsumption_Water_.push_back (r);
            continue;
          }

          // SimResourceConsumption_InteriorConsumption_Default
          //
          if (n.name () == "SimResourceConsumption_InteriorConsumption_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResourceConsumption_InteriorConsumption_Default_type > r (
              SimResourceConsumption_InteriorConsumption_Default_traits::create (i, f, this));

            this->SimResourceConsumption_InteriorConsumption_Default_.push_back (r);
            continue;
          }

          // SimResultsGuide_ResultsGuide_CustomTemplate
          //
          if (n.name () == "SimResultsGuide_ResultsGuide_CustomTemplate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsGuide_ResultsGuide_CustomTemplate_type > r (
              SimResultsGuide_ResultsGuide_CustomTemplate_traits::create (i, f, this));

            this->SimResultsGuide_ResultsGuide_CustomTemplate_.push_back (r);
            continue;
          }

          // SimResultsGuide_ResultsGuide_Default
          //
          if (n.name () == "SimResultsGuide_ResultsGuide_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsGuide_ResultsGuide_Default_type > r (
              SimResultsGuide_ResultsGuide_Default_traits::create (i, f, this));

            this->SimResultsGuide_ResultsGuide_Default_.push_back (r);
            continue;
          }

          // SimResultsGuide_ResultsGuide_PackageTemplate
          //
          if (n.name () == "SimResultsGuide_ResultsGuide_PackageTemplate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsGuide_ResultsGuide_PackageTemplate_type > r (
              SimResultsGuide_ResultsGuide_PackageTemplate_traits::create (i, f, this));

            this->SimResultsGuide_ResultsGuide_PackageTemplate_.push_back (r);
            continue;
          }

          // SimResultsTextInfo_ResultsTextInfo_Default
          //
          if (n.name () == "SimResultsTextInfo_ResultsTextInfo_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsTextInfo_ResultsTextInfo_Default_type > r (
              SimResultsTextInfo_ResultsTextInfo_Default_traits::create (i, f, this));

            this->SimResultsTextInfo_ResultsTextInfo_Default_.push_back (r);
            continue;
          }

          // SimResultsVariables_ResultsVariables_Default
          //
          if (n.name () == "SimResultsVariables_ResultsVariables_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsVariables_ResultsVariables_Default_type > r (
              SimResultsVariables_ResultsVariables_Default_traits::create (i, f, this));

            this->SimResultsVariables_ResultsVariables_Default_.push_back (r);
            continue;
          }

          // SimResultsView_ResultsView_Default
          //
          if (n.name () == "SimResultsView_ResultsView_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsView_ResultsView_Default_type > r (
              SimResultsView_ResultsView_Default_traits::create (i, f, this));

            this->SimResultsView_ResultsView_Default_.push_back (r);
            continue;
          }

          // SimResultsViewSet_ResultsViewSet_Default
          //
          if (n.name () == "SimResultsViewSet_ResultsViewSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimResultsViewSet_ResultsViewSet_Default_type > r (
              SimResultsViewSet_ResultsViewSet_Default_traits::create (i, f, this));

            this->SimResultsViewSet_ResultsViewSet_Default_.push_back (r);
            continue;
          }

          // SimRoof_Roof_Default
          //
          if (n.name () == "SimRoof_Roof_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimRoof_Roof_Default_type > r (
              SimRoof_Roof_Default_traits::create (i, f, this));

            this->SimRoof_Roof_Default_.push_back (r);
            continue;
          }

          // SimSensor_AirVelocitySensor_Default
          //
          if (n.name () == "SimSensor_AirVelocitySensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_AirVelocitySensor_Default_type > r (
              SimSensor_AirVelocitySensor_Default_traits::create (i, f, this));

            this->SimSensor_AirVelocitySensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_Default_Default
          //
          if (n.name () == "SimSensor_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_Default_Default_type > r (
              SimSensor_Default_Default_traits::create (i, f, this));

            this->SimSensor_Default_Default_.push_back (r);
            continue;
          }

          // SimSensor_FireSensor_Default
          //
          if (n.name () == "SimSensor_FireSensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_FireSensor_Default_type > r (
              SimSensor_FireSensor_Default_traits::create (i, f, this));

            this->SimSensor_FireSensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_GasSensor_CO2Sensor
          //
          if (n.name () == "SimSensor_GasSensor_CO2Sensor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_GasSensor_CO2Sensor_type > r (
              SimSensor_GasSensor_CO2Sensor_traits::create (i, f, this));

            this->SimSensor_GasSensor_CO2Sensor_.push_back (r);
            continue;
          }

          // SimSensor_GasSensor_SmokeSensor
          //
          if (n.name () == "SimSensor_GasSensor_SmokeSensor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_GasSensor_SmokeSensor_type > r (
              SimSensor_GasSensor_SmokeSensor_traits::create (i, f, this));

            this->SimSensor_GasSensor_SmokeSensor_.push_back (r);
            continue;
          }

          // SimSensor_HeatSensor_Default
          //
          if (n.name () == "SimSensor_HeatSensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_HeatSensor_Default_type > r (
              SimSensor_HeatSensor_Default_traits::create (i, f, this));

            this->SimSensor_HeatSensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_LuxSensor_Default
          //
          if (n.name () == "SimSensor_LuxSensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_LuxSensor_Default_type > r (
              SimSensor_LuxSensor_Default_traits::create (i, f, this));

            this->SimSensor_LuxSensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_Meter_AirFlowRateMeter
          //
          if (n.name () == "SimSensor_Meter_AirFlowRateMeter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_Meter_AirFlowRateMeter_type > r (
              SimSensor_Meter_AirFlowRateMeter_traits::create (i, f, this));

            this->SimSensor_Meter_AirFlowRateMeter_.push_back (r);
            continue;
          }

          // SimSensor_Meter_FluidFlowRateMeter
          //
          if (n.name () == "SimSensor_Meter_FluidFlowRateMeter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_Meter_FluidFlowRateMeter_type > r (
              SimSensor_Meter_FluidFlowRateMeter_traits::create (i, f, this));

            this->SimSensor_Meter_FluidFlowRateMeter_.push_back (r);
            continue;
          }

          // SimSensor_Meter_HvacZoneWaterUseMeter
          //
          if (n.name () == "SimSensor_Meter_HvacZoneWaterUseMeter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_Meter_HvacZoneWaterUseMeter_type > r (
              SimSensor_Meter_HvacZoneWaterUseMeter_traits::create (i, f, this));

            this->SimSensor_Meter_HvacZoneWaterUseMeter_.push_back (r);
            continue;
          }

          // SimSensor_MovementSensor_Default
          //
          if (n.name () == "SimSensor_MovementSensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_MovementSensor_Default_type > r (
              SimSensor_MovementSensor_Default_traits::create (i, f, this));

            this->SimSensor_MovementSensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_PressureSensor_Default
          //
          if (n.name () == "SimSensor_PressureSensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_PressureSensor_Default_type > r (
              SimSensor_PressureSensor_Default_traits::create (i, f, this));

            this->SimSensor_PressureSensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_RelativeHumidity_Type1
          //
          if (n.name () == "SimSensor_RelativeHumidity_Type1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_RelativeHumidity_Type1_type > r (
              SimSensor_RelativeHumidity_Type1_traits::create (i, f, this));

            this->SimSensor_RelativeHumidity_Type1_.push_back (r);
            continue;
          }

          // SimSensor_RelativeHumidity_Type2
          //
          if (n.name () == "SimSensor_RelativeHumidity_Type2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_RelativeHumidity_Type2_type > r (
              SimSensor_RelativeHumidity_Type2_traits::create (i, f, this));

            this->SimSensor_RelativeHumidity_Type2_.push_back (r);
            continue;
          }

          // SimSensor_SolarRadiation_Default
          //
          if (n.name () == "SimSensor_SolarRadiation_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_SolarRadiation_Default_type > r (
              SimSensor_SolarRadiation_Default_traits::create (i, f, this));

            this->SimSensor_SolarRadiation_Default_.push_back (r);
            continue;
          }

          // SimSensor_SoundSensor_Default
          //
          if (n.name () == "SimSensor_SoundSensor_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_SoundSensor_Default_type > r (
              SimSensor_SoundSensor_Default_traits::create (i, f, this));

            this->SimSensor_SoundSensor_Default_.push_back (r);
            continue;
          }

          // SimSensor_TemperatureSensor_DryBulb
          //
          if (n.name () == "SimSensor_TemperatureSensor_DryBulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_TemperatureSensor_DryBulb_type > r (
              SimSensor_TemperatureSensor_DryBulb_traits::create (i, f, this));

            this->SimSensor_TemperatureSensor_DryBulb_.push_back (r);
            continue;
          }

          // SimSensor_TemperatureSensor_Fluid
          //
          if (n.name () == "SimSensor_TemperatureSensor_Fluid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_TemperatureSensor_Fluid_type > r (
              SimSensor_TemperatureSensor_Fluid_traits::create (i, f, this));

            this->SimSensor_TemperatureSensor_Fluid_.push_back (r);
            continue;
          }

          // SimSensor_TemperatureSensor_Radiant
          //
          if (n.name () == "SimSensor_TemperatureSensor_Radiant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_TemperatureSensor_Radiant_type > r (
              SimSensor_TemperatureSensor_Radiant_traits::create (i, f, this));

            this->SimSensor_TemperatureSensor_Radiant_.push_back (r);
            continue;
          }

          // SimSensor_TemperatureSensor_WetBulb
          //
          if (n.name () == "SimSensor_TemperatureSensor_WetBulb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_TemperatureSensor_WetBulb_type > r (
              SimSensor_TemperatureSensor_WetBulb_traits::create (i, f, this));

            this->SimSensor_TemperatureSensor_WetBulb_.push_back (r);
            continue;
          }

          // SimSensor_VirtualSensor_EmsSensor
          //
          if (n.name () == "SimSensor_VirtualSensor_EmsSensor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSensor_VirtualSensor_EmsSensor_type > r (
              SimSensor_VirtualSensor_EmsSensor_traits::create (i, f, this));

            this->SimSensor_VirtualSensor_EmsSensor_.push_back (r);
            continue;
          }

          // SimShapeRepresentation_ShapeRepresentation_Default
          //
          if (n.name () == "SimShapeRepresentation_ShapeRepresentation_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimShapeRepresentation_ShapeRepresentation_Default_type > r (
              SimShapeRepresentation_ShapeRepresentation_Default_traits::create (i, f, this));

            this->SimShapeRepresentation_ShapeRepresentation_Default_.push_back (r);
            continue;
          }

          // SimSimpleProperty_SimpleProp_Default
          //
          if (n.name () == "SimSimpleProperty_SimpleProp_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimpleProperty_SimpleProp_Default_type > r (
              SimSimpleProperty_SimpleProp_Default_traits::create (i, f, this));

            this->SimSimpleProperty_SimpleProp_Default_.push_back (r);
            continue;
          }

          // SimSimpleProperty_SimpleProp_ListValue
          //
          if (n.name () == "SimSimpleProperty_SimpleProp_ListValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimpleProperty_SimpleProp_ListValue_type > r (
              SimSimpleProperty_SimpleProp_ListValue_traits::create (i, f, this));

            this->SimSimpleProperty_SimpleProp_ListValue_.push_back (r);
            continue;
          }

          // SimSimpleProperty_SimpleProp_SingleValue
          //
          if (n.name () == "SimSimpleProperty_SimpleProp_SingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimpleProperty_SimpleProp_SingleValue_type > r (
              SimSimpleProperty_SimpleProp_SingleValue_traits::create (i, f, this));

            this->SimSimpleProperty_SimpleProp_SingleValue_.push_back (r);
            continue;
          }

          // SimSimulationConfiguration_SimulationConfiguration_Default
          //
          if (n.name () == "SimSimulationConfiguration_SimulationConfiguration_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationConfiguration_SimulationConfiguration_Default_type > r (
              SimSimulationConfiguration_SimulationConfiguration_Default_traits::create (i, f, this));

            this->SimSimulationConfiguration_SimulationConfiguration_Default_.push_back (r);
            continue;
          }

          // SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1
          //
          if (n.name () == "SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_type > r (
              SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_traits::create (i, f, this));

            this->SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_.push_back (r);
            continue;
          }

          // SimSimulationConfiguration_StandardsConfiguration_LEED
          //
          if (n.name () == "SimSimulationConfiguration_StandardsConfiguration_LEED" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationConfiguration_StandardsConfiguration_LEED_type > r (
              SimSimulationConfiguration_StandardsConfiguration_LEED_traits::create (i, f, this));

            this->SimSimulationConfiguration_StandardsConfiguration_LEED_.push_back (r);
            continue;
          }

          // SimSimulationConfiguration_StandardsConfiguration_SBDH
          //
          if (n.name () == "SimSimulationConfiguration_StandardsConfiguration_SBDH" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationConfiguration_StandardsConfiguration_SBDH_type > r (
              SimSimulationConfiguration_StandardsConfiguration_SBDH_traits::create (i, f, this));

            this->SimSimulationConfiguration_StandardsConfiguration_SBDH_.push_back (r);
            continue;
          }

          // SimSimulationConfiguration_StandardsConfiguration_T24
          //
          if (n.name () == "SimSimulationConfiguration_StandardsConfiguration_T24" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationConfiguration_StandardsConfiguration_T24_type > r (
              SimSimulationConfiguration_StandardsConfiguration_T24_traits::create (i, f, this));

            this->SimSimulationConfiguration_StandardsConfiguration_T24_.push_back (r);
            continue;
          }

          // SimSimulationOutputFormat_ControlReportingTolerances_Default
          //
          if (n.name () == "SimSimulationOutputFormat_ControlReportingTolerances_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputFormat_ControlReportingTolerances_Default_type > r (
              SimSimulationOutputFormat_ControlReportingTolerances_Default_traits::create (i, f, this));

            this->SimSimulationOutputFormat_ControlReportingTolerances_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputFormat_ControlSizingStyle_Default
          //
          if (n.name () == "SimSimulationOutputFormat_ControlSizingStyle_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputFormat_ControlSizingStyle_Default_type > r (
              SimSimulationOutputFormat_ControlSizingStyle_Default_traits::create (i, f, this));

            this->SimSimulationOutputFormat_ControlSizingStyle_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputFormat_ControlSurfaceColorScheme_Default
          //
          if (n.name () == "SimSimulationOutputFormat_ControlSurfaceColorScheme_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_type > r (
              SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_traits::create (i, f, this));

            this->SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputFormat_ControlTableStyle_Default
          //
          if (n.name () == "SimSimulationOutputFormat_ControlTableStyle_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputFormat_ControlTableStyle_Default_type > r (
              SimSimulationOutputFormat_ControlTableStyle_Default_traits::create (i, f, this));

            this->SimSimulationOutputFormat_ControlTableStyle_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputFormat_Default_Default
          //
          if (n.name () == "SimSimulationOutputFormat_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputFormat_Default_Default_type > r (
              SimSimulationOutputFormat_Default_Default_traits::create (i, f, this));

            this->SimSimulationOutputFormat_Default_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default
          //
          if (n.name () == "SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_type > r (
              SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_traits::create (i, f, this));

            this->SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Daylighting_DaylightFactors
          //
          if (n.name () == "SimSimulationOutputRequest_Daylighting_DaylightFactors" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Daylighting_DaylightFactors_type > r (
              SimSimulationOutputRequest_Daylighting_DaylightFactors_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Daylighting_DaylightFactors_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap
          //
          if (n.name () == "SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_type > r (
              SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Default_Default
          //
          if (n.name () == "SimSimulationOutputRequest_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Default_Default_type > r (
              SimSimulationOutputRequest_Default_Default_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Default_Default_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors
          //
          if (n.name () == "SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_type > r (
              SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_traits::create (i, f, this));

            this->SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors
          //
          if (n.name () == "SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_type > r (
              SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_traits::create (i, f, this));

            this->SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors
          //
          if (n.name () == "SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_type > r (
              SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_traits::create (i, f, this));

            this->SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqDebuggingData
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqDebuggingData" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqDebuggingData_type > r (
              SimSimulationOutputRequest_General_ReportReqDebuggingData_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqDebuggingData_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqDiagnostics
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqDiagnostics" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqDiagnostics_type > r (
              SimSimulationOutputRequest_General_ReportReqDiagnostics_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqDiagnostics_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_type > r (
              SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqPreprocessorMessage
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqPreprocessorMessage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_type > r (
              SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqSchedules
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqSchedules" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqSchedules_type > r (
              SimSimulationOutputRequest_General_ReportReqSchedules_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqSchedules_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqSQLite
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqSQLite" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqSQLite_type > r (
              SimSimulationOutputRequest_General_ReportReqSQLite_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqSQLite_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_General_ReportReqVariableDictionary
          //
          if (n.name () == "SimSimulationOutputRequest_General_ReportReqVariableDictionary" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_General_ReportReqVariableDictionary_type > r (
              SimSimulationOutputRequest_General_ReportReqVariableDictionary_traits::create (i, f, this));

            this->SimSimulationOutputRequest_General_ReportReqVariableDictionary_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Geometry_ReportReqConstructions
          //
          if (n.name () == "SimSimulationOutputRequest_Geometry_ReportReqConstructions" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Geometry_ReportReqConstructions_type > r (
              SimSimulationOutputRequest_Geometry_ReportReqConstructions_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Geometry_ReportReqConstructions_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing
          //
          if (n.name () == "SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_type > r (
              SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Geometry_ReportReqSurfacesList
          //
          if (n.name () == "SimSimulationOutputRequest_Geometry_ReportReqSurfacesList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_type > r (
              SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_EnergyEndUseCategory
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_EnergyEndUseCategory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_EnergyEndUseCategory_type > r (
              SimSimulationOutputRequest_Meters_EnergyEndUseCategory_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_EnergyEndUseCategory_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_MeterCumulative
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_MeterCumulative" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_MeterCumulative_type > r (
              SimSimulationOutputRequest_Meters_MeterCumulative_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_MeterCumulative_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_type > r (
              SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_MeterFileOnly
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_MeterFileOnly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_MeterFileOnly_type > r (
              SimSimulationOutputRequest_Meters_MeterFileOnly_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_MeterFileOnly_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_VarReqMeter
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_VarReqMeter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_VarReqMeter_type > r (
              SimSimulationOutputRequest_Meters_VarReqMeter_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_VarReqMeter_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_VarReqMeterCustom
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_VarReqMeterCustom" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_VarReqMeterCustom_type > r (
              SimSimulationOutputRequest_Meters_VarReqMeterCustom_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_VarReqMeterCustom_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement
          //
          if (n.name () == "SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_type > r (
              SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_traits::create (i, f, this));

            this->SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_StandardReports_TableMonthly
          //
          if (n.name () == "SimSimulationOutputRequest_StandardReports_TableMonthly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_StandardReports_TableMonthly_type > r (
              SimSimulationOutputRequest_StandardReports_TableMonthly_traits::create (i, f, this));

            this->SimSimulationOutputRequest_StandardReports_TableMonthly_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_StandardReports_TableSummaryReports
          //
          if (n.name () == "SimSimulationOutputRequest_StandardReports_TableSummaryReports" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_StandardReports_TableSummaryReports_type > r (
              SimSimulationOutputRequest_StandardReports_TableSummaryReports_traits::create (i, f, this));

            this->SimSimulationOutputRequest_StandardReports_TableSummaryReports_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_StandardReports_TableTimeBins
          //
          if (n.name () == "SimSimulationOutputRequest_StandardReports_TableTimeBins" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_StandardReports_TableTimeBins_type > r (
              SimSimulationOutputRequest_StandardReports_TableTimeBins_traits::create (i, f, this));

            this->SimSimulationOutputRequest_StandardReports_TableTimeBins_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable
          //
          if (n.name () == "SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_type > r (
              SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_traits::create (i, f, this));

            this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable
          //
          if (n.name () == "SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_type > r (
              SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_traits::create (i, f, this));

            this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_.push_back (r);
            continue;
          }

          // SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable
          //
          if (n.name () == "SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_type > r (
              SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_traits::create (i, f, this));

            this->SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Algorithm_HeatBalanceAlgorithm
          //
          if (n.name () == "SimSimulationParameters_Algorithm_HeatBalanceAlgorithm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_type > r (
              SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_traits::create (i, f, this));

            this->SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside
          //
          if (n.name () == "SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_type > r (
              SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_traits::create (i, f, this));

            this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside
          //
          if (n.name () == "SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_type > r (
              SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_traits::create (i, f, this));

            this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm
          //
          if (n.name () == "SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_type > r (
              SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_traits::create (i, f, this));

            this->SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_.push_back (r);
            continue;
          }

          // SimSimulationParameters_ConvectionCoefficients_Default
          //
          if (n.name () == "SimSimulationParameters_ConvectionCoefficients_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_ConvectionCoefficients_Default_type > r (
              SimSimulationParameters_ConvectionCoefficients_Default_traits::create (i, f, this));

            this->SimSimulationParameters_ConvectionCoefficients_Default_.push_back (r);
            continue;
          }

          // SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces
          //
          if (n.name () == "SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_type > r (
              SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_traits::create (i, f, this));

            this->SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_.push_back (r);
            continue;
          }

          // SimSimulationParameters_FluidProperties_Concentration
          //
          if (n.name () == "SimSimulationParameters_FluidProperties_Concentration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_FluidProperties_Concentration_type > r (
              SimSimulationParameters_FluidProperties_Concentration_traits::create (i, f, this));

            this->SimSimulationParameters_FluidProperties_Concentration_.push_back (r);
            continue;
          }

          // SimSimulationParameters_FluidProperties_GlycolConcentrations
          //
          if (n.name () == "SimSimulationParameters_FluidProperties_GlycolConcentrations" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_FluidProperties_GlycolConcentrations_type > r (
              SimSimulationParameters_FluidProperties_GlycolConcentrations_traits::create (i, f, this));

            this->SimSimulationParameters_FluidProperties_GlycolConcentrations_.push_back (r);
            continue;
          }

          // SimSimulationParameters_FluidProperties_Names
          //
          if (n.name () == "SimSimulationParameters_FluidProperties_Names" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_FluidProperties_Names_type > r (
              SimSimulationParameters_FluidProperties_Names_traits::create (i, f, this));

            this->SimSimulationParameters_FluidProperties_Names_.push_back (r);
            continue;
          }

          // SimSimulationParameters_FluidProperties_Saturated
          //
          if (n.name () == "SimSimulationParameters_FluidProperties_Saturated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_FluidProperties_Saturated_type > r (
              SimSimulationParameters_FluidProperties_Saturated_traits::create (i, f, this));

            this->SimSimulationParameters_FluidProperties_Saturated_.push_back (r);
            continue;
          }

          // SimSimulationParameters_FluidProperties_SuperHeated
          //
          if (n.name () == "SimSimulationParameters_FluidProperties_SuperHeated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_FluidProperties_SuperHeated_type > r (
              SimSimulationParameters_FluidProperties_SuperHeated_traits::create (i, f, this));

            this->SimSimulationParameters_FluidProperties_SuperHeated_.push_back (r);
            continue;
          }

          // SimSimulationParameters_FluidProperties_Temperatures
          //
          if (n.name () == "SimSimulationParameters_FluidProperties_Temperatures" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_FluidProperties_Temperatures_type > r (
              SimSimulationParameters_FluidProperties_Temperatures_traits::create (i, f, this));

            this->SimSimulationParameters_FluidProperties_Temperatures_.push_back (r);
            continue;
          }

          // SimSimulationParameters_GroundHeatTransfer_Default
          //
          if (n.name () == "SimSimulationParameters_GroundHeatTransfer_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_GroundHeatTransfer_Default_type > r (
              SimSimulationParameters_GroundHeatTransfer_Default_traits::create (i, f, this));

            this->SimSimulationParameters_GroundHeatTransfer_Default_.push_back (r);
            continue;
          }

          // SimSimulationParameters_HvacDesign_AirLoopSizing
          //
          if (n.name () == "SimSimulationParameters_HvacDesign_AirLoopSizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_HvacDesign_AirLoopSizing_type > r (
              SimSimulationParameters_HvacDesign_AirLoopSizing_traits::create (i, f, this));

            this->SimSimulationParameters_HvacDesign_AirLoopSizing_.push_back (r);
            continue;
          }

          // SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec
          //
          if (n.name () == "SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_type > r (
              SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_traits::create (i, f, this));

            this->SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_.push_back (r);
            continue;
          }

          // SimSimulationParameters_HvacDesign_Sizing
          //
          if (n.name () == "SimSimulationParameters_HvacDesign_Sizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_HvacDesign_Sizing_type > r (
              SimSimulationParameters_HvacDesign_Sizing_traits::create (i, f, this));

            this->SimSimulationParameters_HvacDesign_Sizing_.push_back (r);
            continue;
          }

          // SimSimulationParameters_HvacDesign_WaterLoopSizing
          //
          if (n.name () == "SimSimulationParameters_HvacDesign_WaterLoopSizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_HvacDesign_WaterLoopSizing_type > r (
              SimSimulationParameters_HvacDesign_WaterLoopSizing_traits::create (i, f, this));

            this->SimSimulationParameters_HvacDesign_WaterLoopSizing_.push_back (r);
            continue;
          }

          // SimSimulationParameters_HvacDesign_ZoneAIrDistribution
          //
          if (n.name () == "SimSimulationParameters_HvacDesign_ZoneAIrDistribution" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_HvacDesign_ZoneAIrDistribution_type > r (
              SimSimulationParameters_HvacDesign_ZoneAIrDistribution_traits::create (i, f, this));

            this->SimSimulationParameters_HvacDesign_ZoneAIrDistribution_.push_back (r);
            continue;
          }

          // SimSimulationParameters_HvacDesign_ZoneSizing
          //
          if (n.name () == "SimSimulationParameters_HvacDesign_ZoneSizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_HvacDesign_ZoneSizing_type > r (
              SimSimulationParameters_HvacDesign_ZoneSizing_traits::create (i, f, this));

            this->SimSimulationParameters_HvacDesign_ZoneSizing_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Parametric_FileNameSuffix
          //
          if (n.name () == "SimSimulationParameters_Parametric_FileNameSuffix" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Parametric_FileNameSuffix_type > r (
              SimSimulationParameters_Parametric_FileNameSuffix_traits::create (i, f, this));

            this->SimSimulationParameters_Parametric_FileNameSuffix_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Parametric_Logic
          //
          if (n.name () == "SimSimulationParameters_Parametric_Logic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Parametric_Logic_type > r (
              SimSimulationParameters_Parametric_Logic_traits::create (i, f, this));

            this->SimSimulationParameters_Parametric_Logic_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Parametric_RunControl
          //
          if (n.name () == "SimSimulationParameters_Parametric_RunControl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Parametric_RunControl_type > r (
              SimSimulationParameters_Parametric_RunControl_traits::create (i, f, this));

            this->SimSimulationParameters_Parametric_RunControl_.push_back (r);
            continue;
          }

          // SimSimulationParameters_Parametric_SetValueForRun
          //
          if (n.name () == "SimSimulationParameters_Parametric_SetValueForRun" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_Parametric_SetValueForRun_type > r (
              SimSimulationParameters_Parametric_SetValueForRun_traits::create (i, f, this));

            this->SimSimulationParameters_Parametric_SetValueForRun_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SimulationControl_DaylightSavingTime
          //
          if (n.name () == "SimSimulationParameters_SimulationControl_DaylightSavingTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SimulationControl_DaylightSavingTime_type > r (
              SimSimulationParameters_SimulationControl_DaylightSavingTime_traits::create (i, f, this));

            this->SimSimulationParameters_SimulationControl_DaylightSavingTime_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SimulationControl_Default
          //
          if (n.name () == "SimSimulationParameters_SimulationControl_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SimulationControl_Default_type > r (
              SimSimulationParameters_SimulationControl_Default_traits::create (i, f, this));

            this->SimSimulationParameters_SimulationControl_Default_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SimulationControl_RunPeriod
          //
          if (n.name () == "SimSimulationParameters_SimulationControl_RunPeriod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SimulationControl_RunPeriod_type > r (
              SimSimulationParameters_SimulationControl_RunPeriod_traits::create (i, f, this));

            this->SimSimulationParameters_SimulationControl_RunPeriod_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SimulationControl_RunPeriodCustomRange
          //
          if (n.name () == "SimSimulationParameters_SimulationControl_RunPeriodCustomRange" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SimulationControl_RunPeriodCustomRange_type > r (
              SimSimulationParameters_SimulationControl_RunPeriodCustomRange_traits::create (i, f, this));

            this->SimSimulationParameters_SimulationControl_RunPeriodCustomRange_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SimulationControl_SpecialDays
          //
          if (n.name () == "SimSimulationParameters_SimulationControl_SpecialDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SimulationControl_SpecialDays_type > r (
              SimSimulationParameters_SimulationControl_SpecialDays_traits::create (i, f, this));

            this->SimSimulationParameters_SimulationControl_SpecialDays_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SiteWindPressure_WindDirections
          //
          if (n.name () == "SimSimulationParameters_SiteWindPressure_WindDirections" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SiteWindPressure_WindDirections_type > r (
              SimSimulationParameters_SiteWindPressure_WindDirections_traits::create (i, f, this));

            this->SimSimulationParameters_SiteWindPressure_WindDirections_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SiteWindPressure_WindPressureValues
          //
          if (n.name () == "SimSimulationParameters_SiteWindPressure_WindPressureValues" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SiteWindPressure_WindPressureValues_type > r (
              SimSimulationParameters_SiteWindPressure_WindPressureValues_traits::create (i, f, this));

            this->SimSimulationParameters_SiteWindPressure_WindPressureValues_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SurfaceProperties_Default
          //
          if (n.name () == "SimSimulationParameters_SurfaceProperties_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SurfaceProperties_Default_type > r (
              SimSimulationParameters_SurfaceProperties_Default_traits::create (i, f, this));

            this->SimSimulationParameters_SurfaceProperties_Default_.push_back (r);
            continue;
          }

          // SimSimulationParameters_SurfaceProperties_VaporCoefficients
          //
          if (n.name () == "SimSimulationParameters_SurfaceProperties_VaporCoefficients" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationParameters_SurfaceProperties_VaporCoefficients_type > r (
              SimSimulationParameters_SurfaceProperties_VaporCoefficients_traits::create (i, f, this));

            this->SimSimulationParameters_SurfaceProperties_VaporCoefficients_.push_back (r);
            continue;
          }

          // SimSimulationRun_EPlusSimulation_Default
          //
          if (n.name () == "SimSimulationRun_EPlusSimulation_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationRun_EPlusSimulation_Default_type > r (
              SimSimulationRun_EPlusSimulation_Default_traits::create (i, f, this));

            this->SimSimulationRun_EPlusSimulation_Default_.push_back (r);
            continue;
          }

          // SimSimulationRun_StandardsRun_ASHRAE90_1
          //
          if (n.name () == "SimSimulationRun_StandardsRun_ASHRAE90_1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationRun_StandardsRun_ASHRAE90_1_type > r (
              SimSimulationRun_StandardsRun_ASHRAE90_1_traits::create (i, f, this));

            this->SimSimulationRun_StandardsRun_ASHRAE90_1_.push_back (r);
            continue;
          }

          // SimSimulationRun_StandardsRun_LEED
          //
          if (n.name () == "SimSimulationRun_StandardsRun_LEED" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationRun_StandardsRun_LEED_type > r (
              SimSimulationRun_StandardsRun_LEED_traits::create (i, f, this));

            this->SimSimulationRun_StandardsRun_LEED_.push_back (r);
            continue;
          }

          // SimSimulationRun_StandardsRun_SBDH
          //
          if (n.name () == "SimSimulationRun_StandardsRun_SBDH" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationRun_StandardsRun_SBDH_type > r (
              SimSimulationRun_StandardsRun_SBDH_traits::create (i, f, this));

            this->SimSimulationRun_StandardsRun_SBDH_.push_back (r);
            continue;
          }

          // SimSimulationRun_StandardsRun_T24
          //
          if (n.name () == "SimSimulationRun_StandardsRun_T24" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSimulationRun_StandardsRun_T24_type > r (
              SimSimulationRun_StandardsRun_T24_traits::create (i, f, this));

            this->SimSimulationRun_StandardsRun_T24_.push_back (r);
            continue;
          }

          // SimSite_AdjacentSite_Default
          //
          if (n.name () == "SimSite_AdjacentSite_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSite_AdjacentSite_Default_type > r (
              SimSite_AdjacentSite_Default_traits::create (i, f, this));

            this->SimSite_AdjacentSite_Default_.push_back (r);
            continue;
          }

          // SimSite_BuildingSite_Default
          //
          if (n.name () == "SimSite_BuildingSite_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSite_BuildingSite_Default_type > r (
              SimSite_BuildingSite_Default_traits::create (i, f, this));

            this->SimSite_BuildingSite_Default_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_type > r (
              SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_ExteriorLighting
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_ExteriorLighting" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_ExteriorLighting_type > r (
              SimSiteAssembly_SiteAssembly_ExteriorLighting_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_ExteriorLighting_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_ExteriorSignage
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_ExteriorSignage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_ExteriorSignage_type > r (
              SimSiteAssembly_SiteAssembly_ExteriorSignage_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_ExteriorSignage_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_Fuel
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_Fuel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_Fuel_type > r (
              SimSiteAssembly_SiteAssembly_Fuel_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_Fuel_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_FuelCell
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_FuelCell" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_FuelCell_type > r (
              SimSiteAssembly_SiteAssembly_FuelCell_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_FuelCell_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_SolarHotWater
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_SolarHotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_SolarHotWater_type > r (
              SimSiteAssembly_SiteAssembly_SolarHotWater_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_SolarHotWater_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_SolarPhotovoltaic
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_SolarPhotovoltaic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_type > r (
              SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_Water
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_Water" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_Water_type > r (
              SimSiteAssembly_SiteAssembly_Water_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_Water_.push_back (r);
            continue;
          }

          // SimSiteAssembly_SiteAssembly_WindTurbine
          //
          if (n.name () == "SimSiteAssembly_SiteAssembly_WindTurbine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSiteAssembly_SiteAssembly_WindTurbine_type > r (
              SimSiteAssembly_SiteAssembly_WindTurbine_traits::create (i, f, this));

            this->SimSiteAssembly_SiteAssembly_WindTurbine_.push_back (r);
            continue;
          }

          // SimSIUnitType_SiUnit_Default
          //
          if (n.name () == "SimSIUnitType_SiUnit_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSIUnitType_SiUnit_Default_type > r (
              SimSIUnitType_SiUnit_Default_traits::create (i, f, this));

            this->SimSIUnitType_SiUnit_Default_.push_back (r);
            continue;
          }

          // SimSlab_Ceiling_InterzoneCeiling
          //
          if (n.name () == "SimSlab_Ceiling_InterzoneCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Ceiling_InterzoneCeiling_type > r (
              SimSlab_Ceiling_InterzoneCeiling_traits::create (i, f, this));

            this->SimSlab_Ceiling_InterzoneCeiling_.push_back (r);
            continue;
          }

          // SimSlab_Ceiling_InterzoneCeilingAdiabatic
          //
          if (n.name () == "SimSlab_Ceiling_InterzoneCeilingAdiabatic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Ceiling_InterzoneCeilingAdiabatic_type > r (
              SimSlab_Ceiling_InterzoneCeilingAdiabatic_traits::create (i, f, this));

            this->SimSlab_Ceiling_InterzoneCeilingAdiabatic_.push_back (r);
            continue;
          }

          // SimSlab_Ceiling_InterzoneCeilingDetailed
          //
          if (n.name () == "SimSlab_Ceiling_InterzoneCeilingDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Ceiling_InterzoneCeilingDetailed_type > r (
              SimSlab_Ceiling_InterzoneCeilingDetailed_traits::create (i, f, this));

            this->SimSlab_Ceiling_InterzoneCeilingDetailed_.push_back (r);
            continue;
          }

          // SimSlab_Default_Default
          //
          if (n.name () == "SimSlab_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Default_Default_type > r (
              SimSlab_Default_Default_traits::create (i, f, this));

            this->SimSlab_Default_Default_.push_back (r);
            continue;
          }

          // SimSlab_Floor_Adiabatic
          //
          if (n.name () == "SimSlab_Floor_Adiabatic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_Adiabatic_type > r (
              SimSlab_Floor_Adiabatic_traits::create (i, f, this));

            this->SimSlab_Floor_Adiabatic_.push_back (r);
            continue;
          }

          // SimSlab_Floor_FloorOverAir
          //
          if (n.name () == "SimSlab_Floor_FloorOverAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_FloorOverAir_type > r (
              SimSlab_Floor_FloorOverAir_traits::create (i, f, this));

            this->SimSlab_Floor_FloorOverAir_.push_back (r);
            continue;
          }

          // SimSlab_Floor_FloorOverAirDetailed
          //
          if (n.name () == "SimSlab_Floor_FloorOverAirDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_FloorOverAirDetailed_type > r (
              SimSlab_Floor_FloorOverAirDetailed_traits::create (i, f, this));

            this->SimSlab_Floor_FloorOverAirDetailed_.push_back (r);
            continue;
          }

          // SimSlab_Floor_FloorOverEarth
          //
          if (n.name () == "SimSlab_Floor_FloorOverEarth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_FloorOverEarth_type > r (
              SimSlab_Floor_FloorOverEarth_traits::create (i, f, this));

            this->SimSlab_Floor_FloorOverEarth_.push_back (r);
            continue;
          }

          // SimSlab_Floor_FloorOverEarthDetailed
          //
          if (n.name () == "SimSlab_Floor_FloorOverEarthDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_FloorOverEarthDetailed_type > r (
              SimSlab_Floor_FloorOverEarthDetailed_traits::create (i, f, this));

            this->SimSlab_Floor_FloorOverEarthDetailed_.push_back (r);
            continue;
          }

          // SimSlab_Floor_InterzoneFloor
          //
          if (n.name () == "SimSlab_Floor_InterzoneFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_InterzoneFloor_type > r (
              SimSlab_Floor_InterzoneFloor_traits::create (i, f, this));

            this->SimSlab_Floor_InterzoneFloor_.push_back (r);
            continue;
          }

          // SimSlab_Floor_InterzoneFloorDetailed
          //
          if (n.name () == "SimSlab_Floor_InterzoneFloorDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_InterzoneFloorDetailed_type > r (
              SimSlab_Floor_InterzoneFloorDetailed_traits::create (i, f, this));

            this->SimSlab_Floor_InterzoneFloorDetailed_.push_back (r);
            continue;
          }

          // SimSlab_Floor_RaisedFloor
          //
          if (n.name () == "SimSlab_Floor_RaisedFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Floor_RaisedFloor_type > r (
              SimSlab_Floor_RaisedFloor_traits::create (i, f, this));

            this->SimSlab_Floor_RaisedFloor_.push_back (r);
            continue;
          }

          // SimSlab_Landing_Default
          //
          if (n.name () == "SimSlab_Landing_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_Landing_Default_type > r (
              SimSlab_Landing_Default_traits::create (i, f, this));

            this->SimSlab_Landing_Default_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideCoefficients_Default
          //
          if (n.name () == "SimSlab_OtherSideCoefficients_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideCoefficients_Default_type > r (
              SimSlab_OtherSideCoefficients_Default_traits::create (i, f, this));

            this->SimSlab_OtherSideCoefficients_Default_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideCoefficients_Detailed
          //
          if (n.name () == "SimSlab_OtherSideCoefficients_Detailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideCoefficients_Detailed_type > r (
              SimSlab_OtherSideCoefficients_Detailed_traits::create (i, f, this));

            this->SimSlab_OtherSideCoefficients_Detailed_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideCoefficients_DetailedFloor
          //
          if (n.name () == "SimSlab_OtherSideCoefficients_DetailedFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideCoefficients_DetailedFloor_type > r (
              SimSlab_OtherSideCoefficients_DetailedFloor_traits::create (i, f, this));

            this->SimSlab_OtherSideCoefficients_DetailedFloor_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideCoefficients_DetailedRoofCeiling
          //
          if (n.name () == "SimSlab_OtherSideCoefficients_DetailedRoofCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideCoefficients_DetailedRoofCeiling_type > r (
              SimSlab_OtherSideCoefficients_DetailedRoofCeiling_traits::create (i, f, this));

            this->SimSlab_OtherSideCoefficients_DetailedRoofCeiling_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideConditionsModel_Default
          //
          if (n.name () == "SimSlab_OtherSideConditionsModel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideConditionsModel_Default_type > r (
              SimSlab_OtherSideConditionsModel_Default_traits::create (i, f, this));

            this->SimSlab_OtherSideConditionsModel_Default_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideConditionsModel_Detailed
          //
          if (n.name () == "SimSlab_OtherSideConditionsModel_Detailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideConditionsModel_Detailed_type > r (
              SimSlab_OtherSideConditionsModel_Detailed_traits::create (i, f, this));

            this->SimSlab_OtherSideConditionsModel_Detailed_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideConditionsModel_DetailedFloor
          //
          if (n.name () == "SimSlab_OtherSideConditionsModel_DetailedFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideConditionsModel_DetailedFloor_type > r (
              SimSlab_OtherSideConditionsModel_DetailedFloor_traits::create (i, f, this));

            this->SimSlab_OtherSideConditionsModel_DetailedFloor_.push_back (r);
            continue;
          }

          // SimSlab_OtherSideConditionsModel_DetailedRoofCeiling
          //
          if (n.name () == "SimSlab_OtherSideConditionsModel_DetailedRoofCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_type > r (
              SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_traits::create (i, f, this));

            this->SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_.push_back (r);
            continue;
          }

          // SimSlab_RoofSlab_RoofUnderAir
          //
          if (n.name () == "SimSlab_RoofSlab_RoofUnderAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_RoofSlab_RoofUnderAir_type > r (
              SimSlab_RoofSlab_RoofUnderAir_traits::create (i, f, this));

            this->SimSlab_RoofSlab_RoofUnderAir_.push_back (r);
            continue;
          }

          // SimSlab_RoofSlab_RoofUnderAirDetailed
          //
          if (n.name () == "SimSlab_RoofSlab_RoofUnderAirDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_RoofSlab_RoofUnderAirDetailed_type > r (
              SimSlab_RoofSlab_RoofUnderAirDetailed_traits::create (i, f, this));

            this->SimSlab_RoofSlab_RoofUnderAirDetailed_.push_back (r);
            continue;
          }

          // SimSlab_RoofSlab_RoofUnderEarth
          //
          if (n.name () == "SimSlab_RoofSlab_RoofUnderEarth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_RoofSlab_RoofUnderEarth_type > r (
              SimSlab_RoofSlab_RoofUnderEarth_traits::create (i, f, this));

            this->SimSlab_RoofSlab_RoofUnderEarth_.push_back (r);
            continue;
          }

          // SimSlab_RoofSlab_RoofUnderEarthDetailed
          //
          if (n.name () == "SimSlab_RoofSlab_RoofUnderEarthDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlab_RoofSlab_RoofUnderEarthDetailed_type > r (
              SimSlab_RoofSlab_RoofUnderEarthDetailed_traits::create (i, f, this));

            this->SimSlab_RoofSlab_RoofUnderEarthDetailed_.push_back (r);
            continue;
          }

          // SimSlabParams_Slab_Ceiling
          //
          if (n.name () == "SimSlabParams_Slab_Ceiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabParams_Slab_Ceiling_type > r (
              SimSlabParams_Slab_Ceiling_traits::create (i, f, this));

            this->SimSlabParams_Slab_Ceiling_.push_back (r);
            continue;
          }

          // SimSlabParams_Slab_Floor
          //
          if (n.name () == "SimSlabParams_Slab_Floor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabParams_Slab_Floor_type > r (
              SimSlabParams_Slab_Floor_traits::create (i, f, this));

            this->SimSlabParams_Slab_Floor_.push_back (r);
            continue;
          }

          // SimSlabParams_Slab_Landing
          //
          if (n.name () == "SimSlabParams_Slab_Landing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabParams_Slab_Landing_type > r (
              SimSlabParams_Slab_Landing_traits::create (i, f, this));

            this->SimSlabParams_Slab_Landing_.push_back (r);
            continue;
          }

          // SimSlabParams_Slab_Roof
          //
          if (n.name () == "SimSlabParams_Slab_Roof" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabParams_Slab_Roof_type > r (
              SimSlabParams_Slab_Roof_traits::create (i, f, this));

            this->SimSlabParams_Slab_Roof_.push_back (r);
            continue;
          }

          // SimSlabType_Slab_Ceiling
          //
          if (n.name () == "SimSlabType_Slab_Ceiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabType_Slab_Ceiling_type > r (
              SimSlabType_Slab_Ceiling_traits::create (i, f, this));

            this->SimSlabType_Slab_Ceiling_.push_back (r);
            continue;
          }

          // SimSlabType_Slab_Default
          //
          if (n.name () == "SimSlabType_Slab_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabType_Slab_Default_type > r (
              SimSlabType_Slab_Default_traits::create (i, f, this));

            this->SimSlabType_Slab_Default_.push_back (r);
            continue;
          }

          // SimSlabType_Slab_Floor
          //
          if (n.name () == "SimSlabType_Slab_Floor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabType_Slab_Floor_type > r (
              SimSlabType_Slab_Floor_traits::create (i, f, this));

            this->SimSlabType_Slab_Floor_.push_back (r);
            continue;
          }

          // SimSlabType_Slab_Landing
          //
          if (n.name () == "SimSlabType_Slab_Landing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabType_Slab_Landing_type > r (
              SimSlabType_Slab_Landing_traits::create (i, f, this));

            this->SimSlabType_Slab_Landing_.push_back (r);
            continue;
          }

          // SimSlabType_Slab_Roof
          //
          if (n.name () == "SimSlabType_Slab_Roof" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSlabType_Slab_Roof_type > r (
              SimSlabType_Slab_Roof_traits::create (i, f, this));

            this->SimSlabType_Slab_Roof_.push_back (r);
            continue;
          }

          // SimSoftwareApplication_Default_Default
          //
          if (n.name () == "SimSoftwareApplication_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSoftwareApplication_Default_Default_type > r (
              SimSoftwareApplication_Default_Default_traits::create (i, f, this));

            this->SimSoftwareApplication_Default_Default_.push_back (r);
            continue;
          }

          // SimSolarObsParams_SolarObstruction_Default
          //
          if (n.name () == "SimSolarObsParams_SolarObstruction_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarObsParams_SolarObstruction_Default_type > r (
              SimSolarObsParams_SolarObstruction_Default_traits::create (i, f, this));

            this->SimSolarObsParams_SolarObstruction_Default_.push_back (r);
            continue;
          }

          // SimSolarShade_Default_Default
          //
          if (n.name () == "SimSolarShade_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_Default_Default_type > r (
              SimSolarShade_Default_Default_traits::create (i, f, this));

            this->SimSolarShade_Default_Default_.push_back (r);
            continue;
          }

          // SimSolarShade_Fin_Default
          //
          if (n.name () == "SimSolarShade_Fin_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_Fin_Default_type > r (
              SimSolarShade_Fin_Default_traits::create (i, f, this));

            this->SimSolarShade_Fin_Default_.push_back (r);
            continue;
          }

          // SimSolarShade_Fin_Projection
          //
          if (n.name () == "SimSolarShade_Fin_Projection" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_Fin_Projection_type > r (
              SimSolarShade_Fin_Projection_traits::create (i, f, this));

            this->SimSolarShade_Fin_Projection_.push_back (r);
            continue;
          }

          // SimSolarShade_Overhang_Continuous
          //
          if (n.name () == "SimSolarShade_Overhang_Continuous" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_Overhang_Continuous_type > r (
              SimSolarShade_Overhang_Continuous_traits::create (i, f, this));

            this->SimSolarShade_Overhang_Continuous_.push_back (r);
            continue;
          }

          // SimSolarShade_Overhang_Default
          //
          if (n.name () == "SimSolarShade_Overhang_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_Overhang_Default_type > r (
              SimSolarShade_Overhang_Default_traits::create (i, f, this));

            this->SimSolarShade_Overhang_Default_.push_back (r);
            continue;
          }

          // SimSolarShade_Overhang_Projection
          //
          if (n.name () == "SimSolarShade_Overhang_Projection" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_Overhang_Projection_type > r (
              SimSolarShade_Overhang_Projection_traits::create (i, f, this));

            this->SimSolarShade_Overhang_Projection_.push_back (r);
            continue;
          }

          // SimSolarShade_ZoneDetailed_Default
          //
          if (n.name () == "SimSolarShade_ZoneDetailed_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShade_ZoneDetailed_Default_type > r (
              SimSolarShade_ZoneDetailed_Default_traits::create (i, f, this));

            this->SimSolarShade_ZoneDetailed_Default_.push_back (r);
            continue;
          }

          // SimSolarShadeArrayParams_SolarShadeArray_Default
          //
          if (n.name () == "SimSolarShadeArrayParams_SolarShadeArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShadeArrayParams_SolarShadeArray_Default_type > r (
              SimSolarShadeArrayParams_SolarShadeArray_Default_traits::create (i, f, this));

            this->SimSolarShadeArrayParams_SolarShadeArray_Default_.push_back (r);
            continue;
          }

          // SimSolarShadePanelParams_ShadePanel_SolarShading
          //
          if (n.name () == "SimSolarShadePanelParams_ShadePanel_SolarShading" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShadePanelParams_ShadePanel_SolarShading_type > r (
              SimSolarShadePanelParams_ShadePanel_SolarShading_traits::create (i, f, this));

            this->SimSolarShadePanelParams_ShadePanel_SolarShading_.push_back (r);
            continue;
          }

          // SimSolarShadeType_SolarShade_Default
          //
          if (n.name () == "SimSolarShadeType_SolarShade_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShadeType_SolarShade_Default_type > r (
              SimSolarShadeType_SolarShade_Default_traits::create (i, f, this));

            this->SimSolarShadeType_SolarShade_Default_.push_back (r);
            continue;
          }

          // SimSolarShadeType_SolarShade_LeftFin
          //
          if (n.name () == "SimSolarShadeType_SolarShade_LeftFin" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShadeType_SolarShade_LeftFin_type > r (
              SimSolarShadeType_SolarShade_LeftFin_traits::create (i, f, this));

            this->SimSolarShadeType_SolarShade_LeftFin_.push_back (r);
            continue;
          }

          // SimSolarShadeType_SolarShade_Overhang
          //
          if (n.name () == "SimSolarShadeType_SolarShade_Overhang" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShadeType_SolarShade_Overhang_type > r (
              SimSolarShadeType_SolarShade_Overhang_traits::create (i, f, this));

            this->SimSolarShadeType_SolarShade_Overhang_.push_back (r);
            continue;
          }

          // SimSolarShadeType_SolarShade_RightFin
          //
          if (n.name () == "SimSolarShadeType_SolarShade_RightFin" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSolarShadeType_SolarShade_RightFin_type > r (
              SimSolarShadeType_SolarShade_RightFin_traits::create (i, f, this));

            this->SimSolarShadeType_SolarShade_RightFin_.push_back (r);
            continue;
          }

          // SimSpace_Occupied_Default
          //
          if (n.name () == "SimSpace_Occupied_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Occupied_Default_type > r (
              SimSpace_Occupied_Default_traits::create (i, f, this));

            this->SimSpace_Occupied_Default_.push_back (r);
            continue;
          }

          // SimSpace_Unoccupied_CeilingPlenum
          //
          if (n.name () == "SimSpace_Unoccupied_CeilingPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Unoccupied_CeilingPlenum_type > r (
              SimSpace_Unoccupied_CeilingPlenum_traits::create (i, f, this));

            this->SimSpace_Unoccupied_CeilingPlenum_.push_back (r);
            continue;
          }

          // SimSpace_Unoccupied_CeilingVoid
          //
          if (n.name () == "SimSpace_Unoccupied_CeilingVoid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Unoccupied_CeilingVoid_type > r (
              SimSpace_Unoccupied_CeilingVoid_traits::create (i, f, this));

            this->SimSpace_Unoccupied_CeilingVoid_.push_back (r);
            continue;
          }

          // SimSpace_Unoccupied_Default
          //
          if (n.name () == "SimSpace_Unoccupied_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Unoccupied_Default_type > r (
              SimSpace_Unoccupied_Default_traits::create (i, f, this));

            this->SimSpace_Unoccupied_Default_.push_back (r);
            continue;
          }

          // SimSpace_Unoccupied_FloorPlenum
          //
          if (n.name () == "SimSpace_Unoccupied_FloorPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Unoccupied_FloorPlenum_type > r (
              SimSpace_Unoccupied_FloorPlenum_traits::create (i, f, this));

            this->SimSpace_Unoccupied_FloorPlenum_.push_back (r);
            continue;
          }

          // SimSpace_Unoccupied_FloorVoid
          //
          if (n.name () == "SimSpace_Unoccupied_FloorVoid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Unoccupied_FloorVoid_type > r (
              SimSpace_Unoccupied_FloorVoid_traits::create (i, f, this));

            this->SimSpace_Unoccupied_FloorVoid_.push_back (r);
            continue;
          }

          // SimSpace_Unoccupied_Plenum
          //
          if (n.name () == "SimSpace_Unoccupied_Plenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpace_Unoccupied_Plenum_type > r (
              SimSpace_Unoccupied_Plenum_traits::create (i, f, this));

            this->SimSpace_Unoccupied_Plenum_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Ceiling_InterzoneCeiling
          //
          if (n.name () == "SimSpaceBoundary_Ceiling_InterzoneCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Ceiling_InterzoneCeiling_type > r (
              SimSpaceBoundary_Ceiling_InterzoneCeiling_traits::create (i, f, this));

            this->SimSpaceBoundary_Ceiling_InterzoneCeiling_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Door_GlazedDoor
          //
          if (n.name () == "SimSpaceBoundary_Door_GlazedDoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Door_GlazedDoor_type > r (
              SimSpaceBoundary_Door_GlazedDoor_traits::create (i, f, this));

            this->SimSpaceBoundary_Door_GlazedDoor_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Door_OpaqueDoor
          //
          if (n.name () == "SimSpaceBoundary_Door_OpaqueDoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Door_OpaqueDoor_type > r (
              SimSpaceBoundary_Door_OpaqueDoor_traits::create (i, f, this));

            this->SimSpaceBoundary_Door_OpaqueDoor_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_FirstLevel_Default
          //
          if (n.name () == "SimSpaceBoundary_FirstLevel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_FirstLevel_Default_type > r (
              SimSpaceBoundary_FirstLevel_Default_traits::create (i, f, this));

            this->SimSpaceBoundary_FirstLevel_Default_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Floor_FloorOverAir
          //
          if (n.name () == "SimSpaceBoundary_Floor_FloorOverAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Floor_FloorOverAir_type > r (
              SimSpaceBoundary_Floor_FloorOverAir_traits::create (i, f, this));

            this->SimSpaceBoundary_Floor_FloorOverAir_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Floor_FloorOverEarth
          //
          if (n.name () == "SimSpaceBoundary_Floor_FloorOverEarth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Floor_FloorOverEarth_type > r (
              SimSpaceBoundary_Floor_FloorOverEarth_traits::create (i, f, this));

            this->SimSpaceBoundary_Floor_FloorOverEarth_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Floor_InterzoneFloor
          //
          if (n.name () == "SimSpaceBoundary_Floor_InterzoneFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Floor_InterzoneFloor_type > r (
              SimSpaceBoundary_Floor_InterzoneFloor_traits::create (i, f, this));

            this->SimSpaceBoundary_Floor_InterzoneFloor_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_RoofSlab_RoofUnderAir
          //
          if (n.name () == "SimSpaceBoundary_RoofSlab_RoofUnderAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_RoofSlab_RoofUnderAir_type > r (
              SimSpaceBoundary_RoofSlab_RoofUnderAir_traits::create (i, f, this));

            this->SimSpaceBoundary_RoofSlab_RoofUnderAir_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_SecondLevel_Default
          //
          if (n.name () == "SimSpaceBoundary_SecondLevel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_SecondLevel_Default_type > r (
              SimSpaceBoundary_SecondLevel_Default_traits::create (i, f, this));

            this->SimSpaceBoundary_SecondLevel_Default_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_SecondLevel_SubTypeA
          //
          if (n.name () == "SimSpaceBoundary_SecondLevel_SubTypeA" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_SecondLevel_SubTypeA_type > r (
              SimSpaceBoundary_SecondLevel_SubTypeA_traits::create (i, f, this));

            this->SimSpaceBoundary_SecondLevel_SubTypeA_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_SecondLevel_SubTypeB
          //
          if (n.name () == "SimSpaceBoundary_SecondLevel_SubTypeB" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_SecondLevel_SubTypeB_type > r (
              SimSpaceBoundary_SecondLevel_SubTypeB_traits::create (i, f, this));

            this->SimSpaceBoundary_SecondLevel_SubTypeB_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_SecondLevel_SubTypeC
          //
          if (n.name () == "SimSpaceBoundary_SecondLevel_SubTypeC" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_SecondLevel_SubTypeC_type > r (
              SimSpaceBoundary_SecondLevel_SubTypeC_traits::create (i, f, this));

            this->SimSpaceBoundary_SecondLevel_SubTypeC_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Skylight_Default
          //
          if (n.name () == "SimSpaceBoundary_Skylight_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Skylight_Default_type > r (
              SimSpaceBoundary_Skylight_Default_traits::create (i, f, this));

            this->SimSpaceBoundary_Skylight_Default_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Wall_ExteriorAboveGrade
          //
          if (n.name () == "SimSpaceBoundary_Wall_ExteriorAboveGrade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Wall_ExteriorAboveGrade_type > r (
              SimSpaceBoundary_Wall_ExteriorAboveGrade_traits::create (i, f, this));

            this->SimSpaceBoundary_Wall_ExteriorAboveGrade_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Wall_ExteriorBelowGrade
          //
          if (n.name () == "SimSpaceBoundary_Wall_ExteriorBelowGrade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Wall_ExteriorBelowGrade_type > r (
              SimSpaceBoundary_Wall_ExteriorBelowGrade_traits::create (i, f, this));

            this->SimSpaceBoundary_Wall_ExteriorBelowGrade_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Wall_Interior
          //
          if (n.name () == "SimSpaceBoundary_Wall_Interior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Wall_Interior_type > r (
              SimSpaceBoundary_Wall_Interior_traits::create (i, f, this));

            this->SimSpaceBoundary_Wall_Interior_.push_back (r);
            continue;
          }

          // SimSpaceBoundary_Window_Exterior
          //
          if (n.name () == "SimSpaceBoundary_Window_Exterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceBoundary_Window_Exterior_type > r (
              SimSpaceBoundary_Window_Exterior_traits::create (i, f, this));

            this->SimSpaceBoundary_Window_Exterior_.push_back (r);
            continue;
          }

          // SimSpaceOccupant_Actor_SpaceOccupant
          //
          if (n.name () == "SimSpaceOccupant_Actor_SpaceOccupant" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceOccupant_Actor_SpaceOccupant_type > r (
              SimSpaceOccupant_Actor_SpaceOccupant_traits::create (i, f, this));

            this->SimSpaceOccupant_Actor_SpaceOccupant_.push_back (r);
            continue;
          }

          // SimSpaceParams_Space_Default
          //
          if (n.name () == "SimSpaceParams_Space_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceParams_Space_Default_type > r (
              SimSpaceParams_Space_Default_traits::create (i, f, this));

            this->SimSpaceParams_Space_Default_.push_back (r);
            continue;
          }

          // SimSpaceType_Space_Default
          //
          if (n.name () == "SimSpaceType_Space_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpaceType_Space_Default_type > r (
              SimSpaceType_Space_Default_traits::create (i, f, this));

            this->SimSpaceType_Space_Default_.push_back (r);
            continue;
          }

          // SimSpatialZone_OutdoorAir_Default
          //
          if (n.name () == "SimSpatialZone_OutdoorAir_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_OutdoorAir_Default_type > r (
              SimSpatialZone_OutdoorAir_Default_traits::create (i, f, this));

            this->SimSpatialZone_OutdoorAir_Default_.push_back (r);
            continue;
          }

          // SimSpatialZone_Plenum_CeilingPlenum
          //
          if (n.name () == "SimSpatialZone_Plenum_CeilingPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_Plenum_CeilingPlenum_type > r (
              SimSpatialZone_Plenum_CeilingPlenum_traits::create (i, f, this));

            this->SimSpatialZone_Plenum_CeilingPlenum_.push_back (r);
            continue;
          }

          // SimSpatialZone_Plenum_Default
          //
          if (n.name () == "SimSpatialZone_Plenum_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_Plenum_Default_type > r (
              SimSpatialZone_Plenum_Default_traits::create (i, f, this));

            this->SimSpatialZone_Plenum_Default_.push_back (r);
            continue;
          }

          // SimSpatialZone_Plenum_FloorPlenum
          //
          if (n.name () == "SimSpatialZone_Plenum_FloorPlenum" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_Plenum_FloorPlenum_type > r (
              SimSpatialZone_Plenum_FloorPlenum_traits::create (i, f, this));

            this->SimSpatialZone_Plenum_FloorPlenum_.push_back (r);
            continue;
          }

          // SimSpatialZone_SecurityZone_Public
          //
          if (n.name () == "SimSpatialZone_SecurityZone_Public" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_SecurityZone_Public_type > r (
              SimSpatialZone_SecurityZone_Public_traits::create (i, f, this));

            this->SimSpatialZone_SecurityZone_Public_.push_back (r);
            continue;
          }

          // SimSpatialZone_SecurityZone_Security
          //
          if (n.name () == "SimSpatialZone_SecurityZone_Security" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_SecurityZone_Security_type > r (
              SimSpatialZone_SecurityZone_Security_traits::create (i, f, this));

            this->SimSpatialZone_SecurityZone_Security_.push_back (r);
            continue;
          }

          // SimSpatialZone_SecurityZone_StaffOnly
          //
          if (n.name () == "SimSpatialZone_SecurityZone_StaffOnly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_SecurityZone_StaffOnly_type > r (
              SimSpatialZone_SecurityZone_StaffOnly_traits::create (i, f, this));

            this->SimSpatialZone_SecurityZone_StaffOnly_.push_back (r);
            continue;
          }

          // SimSpatialZone_ThermalZone_AboveCeilingVoid
          //
          if (n.name () == "SimSpatialZone_ThermalZone_AboveCeilingVoid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_ThermalZone_AboveCeilingVoid_type > r (
              SimSpatialZone_ThermalZone_AboveCeilingVoid_traits::create (i, f, this));

            this->SimSpatialZone_ThermalZone_AboveCeilingVoid_.push_back (r);
            continue;
          }

          // SimSpatialZone_ThermalZone_BelowFloorVoid
          //
          if (n.name () == "SimSpatialZone_ThermalZone_BelowFloorVoid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_ThermalZone_BelowFloorVoid_type > r (
              SimSpatialZone_ThermalZone_BelowFloorVoid_traits::create (i, f, this));

            this->SimSpatialZone_ThermalZone_BelowFloorVoid_.push_back (r);
            continue;
          }

          // SimSpatialZone_ThermalZone_Default
          //
          if (n.name () == "SimSpatialZone_ThermalZone_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_ThermalZone_Default_type > r (
              SimSpatialZone_ThermalZone_Default_traits::create (i, f, this));

            this->SimSpatialZone_ThermalZone_Default_.push_back (r);
            continue;
          }

          // SimSpatialZone_ThermalZone_TemplateForZoneGroup
          //
          if (n.name () == "SimSpatialZone_ThermalZone_TemplateForZoneGroup" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSpatialZone_ThermalZone_TemplateForZoneGroup_type > r (
              SimSpatialZone_ThermalZone_TemplateForZoneGroup_traits::create (i, f, this));

            this->SimSpatialZone_ThermalZone_TemplateForZoneGroup_.push_back (r);
            continue;
          }

          // SimStair_Stair_Default
          //
          if (n.name () == "SimStair_Stair_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimStair_Stair_Default_type > r (
              SimStair_Stair_Default_traits::create (i, f, this));

            this->SimStair_Stair_Default_.push_back (r);
            continue;
          }

          // SimStairFlight_Default_Default
          //
          if (n.name () == "SimStairFlight_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimStairFlight_Default_Default_type > r (
              SimStairFlight_Default_Default_traits::create (i, f, this));

            this->SimStairFlight_Default_Default_.push_back (r);
            continue;
          }

          // SimStairFlightParams_StairFlight_Default
          //
          if (n.name () == "SimStairFlightParams_StairFlight_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimStairFlightParams_StairFlight_Default_type > r (
              SimStairFlightParams_StairFlight_Default_traits::create (i, f, this));

            this->SimStairFlightParams_StairFlight_Default_.push_back (r);
            continue;
          }

          // SimStairParams_Stair_Default
          //
          if (n.name () == "SimStairParams_Stair_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimStairParams_Stair_Default_type > r (
              SimStairParams_Stair_Default_traits::create (i, f, this));

            this->SimStairParams_Stair_Default_.push_back (r);
            continue;
          }

          // SimSystem_AirFlowNetwork_Default
          //
          if (n.name () == "SimSystem_AirFlowNetwork_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_AirFlowNetwork_Default_type > r (
              SimSystem_AirFlowNetwork_Default_traits::create (i, f, this));

            this->SimSystem_AirFlowNetwork_Default_.push_back (r);
            continue;
          }

          // SimSystem_Electrical_SystemsContainer
          //
          if (n.name () == "SimSystem_Electrical_SystemsContainer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Electrical_SystemsContainer_type > r (
              SimSystem_Electrical_SystemsContainer_traits::create (i, f, this));

            this->SimSystem_Electrical_SystemsContainer_.push_back (r);
            continue;
          }

          // SimSystem_ElectricalLighting_FullSystem
          //
          if (n.name () == "SimSystem_ElectricalLighting_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ElectricalLighting_FullSystem_type > r (
              SimSystem_ElectricalLighting_FullSystem_traits::create (i, f, this));

            this->SimSystem_ElectricalLighting_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_ElectricalLighting_LightingCircuit
          //
          if (n.name () == "SimSystem_ElectricalLighting_LightingCircuit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ElectricalLighting_LightingCircuit_type > r (
              SimSystem_ElectricalLighting_LightingCircuit_traits::create (i, f, this));

            this->SimSystem_ElectricalLighting_LightingCircuit_.push_back (r);
            continue;
          }

          // SimSystem_ElectricalPower_FullSystem
          //
          if (n.name () == "SimSystem_ElectricalPower_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ElectricalPower_FullSystem_type > r (
              SimSystem_ElectricalPower_FullSystem_traits::create (i, f, this));

            this->SimSystem_ElectricalPower_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_ElectroMechanical_PV_SolarThermal
          //
          if (n.name () == "SimSystem_ElectroMechanical_PV_SolarThermal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ElectroMechanical_PV_SolarThermal_type > r (
              SimSystem_ElectroMechanical_PV_SolarThermal_traits::create (i, f, this));

            this->SimSystem_ElectroMechanical_PV_SolarThermal_.push_back (r);
            continue;
          }

          // SimSystem_Hvac_SystemsContainer
          //
          if (n.name () == "SimSystem_Hvac_SystemsContainer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Hvac_SystemsContainer_type > r (
              SimSystem_Hvac_SystemsContainer_traits::create (i, f, this));

            this->SimSystem_Hvac_SystemsContainer_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_AirBranch
          //
          if (n.name () == "SimSystem_HvacAir_AirBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_AirBranch_type > r (
              SimSystem_HvacAir_AirBranch_traits::create (i, f, this));

            this->SimSystem_HvacAir_AirBranch_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_Control
          //
          if (n.name () == "SimSystem_HvacAir_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_Control_type > r (
              SimSystem_HvacAir_Control_traits::create (i, f, this));

            this->SimSystem_HvacAir_Control_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_ControlDemand
          //
          if (n.name () == "SimSystem_HvacAir_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_ControlDemand_type > r (
              SimSystem_HvacAir_ControlDemand_traits::create (i, f, this));

            this->SimSystem_HvacAir_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_ControlSupply
          //
          if (n.name () == "SimSystem_HvacAir_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_ControlSupply_type > r (
              SimSystem_HvacAir_ControlSupply_traits::create (i, f, this));

            this->SimSystem_HvacAir_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_Demand
          //
          if (n.name () == "SimSystem_HvacAir_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_Demand_type > r (
              SimSystem_HvacAir_Demand_traits::create (i, f, this));

            this->SimSystem_HvacAir_Demand_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_HvacAir_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_DemandSideReturnPath_type > r (
              SimSystem_HvacAir_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacAir_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_HvacAir_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_DemandSideSupplyPath_type > r (
              SimSystem_HvacAir_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacAir_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_DemandSideZoneHvac
          //
          if (n.name () == "SimSystem_HvacAir_DemandSideZoneHvac" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_DemandSideZoneHvac_type > r (
              SimSystem_HvacAir_DemandSideZoneHvac_traits::create (i, f, this));

            this->SimSystem_HvacAir_DemandSideZoneHvac_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_FullSystem
          //
          if (n.name () == "SimSystem_HvacAir_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_FullSystem_type > r (
              SimSystem_HvacAir_FullSystem_traits::create (i, f, this));

            this->SimSystem_HvacAir_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_FullSystemDual
          //
          if (n.name () == "SimSystem_HvacAir_FullSystemDual" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_FullSystemDual_type > r (
              SimSystem_HvacAir_FullSystemDual_traits::create (i, f, this));

            this->SimSystem_HvacAir_FullSystemDual_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_FullSystemTriple
          //
          if (n.name () == "SimSystem_HvacAir_FullSystemTriple" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_FullSystemTriple_type > r (
              SimSystem_HvacAir_FullSystemTriple_traits::create (i, f, this));

            this->SimSystem_HvacAir_FullSystemTriple_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_OutdoorAir
          //
          if (n.name () == "SimSystem_HvacAir_OutdoorAir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_OutdoorAir_type > r (
              SimSystem_HvacAir_OutdoorAir_traits::create (i, f, this));

            this->SimSystem_HvacAir_OutdoorAir_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_OutdoorAirExhaust
          //
          if (n.name () == "SimSystem_HvacAir_OutdoorAirExhaust" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_OutdoorAirExhaust_type > r (
              SimSystem_HvacAir_OutdoorAirExhaust_traits::create (i, f, this));

            this->SimSystem_HvacAir_OutdoorAirExhaust_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_OutdoorAirSupply
          //
          if (n.name () == "SimSystem_HvacAir_OutdoorAirSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_OutdoorAirSupply_type > r (
              SimSystem_HvacAir_OutdoorAirSupply_traits::create (i, f, this));

            this->SimSystem_HvacAir_OutdoorAirSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_Supply
          //
          if (n.name () == "SimSystem_HvacAir_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_Supply_type > r (
              SimSystem_HvacAir_Supply_traits::create (i, f, this));

            this->SimSystem_HvacAir_Supply_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_SupplySideReturnPath
          //
          if (n.name () == "SimSystem_HvacAir_SupplySideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_SupplySideReturnPath_type > r (
              SimSystem_HvacAir_SupplySideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacAir_SupplySideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacAir_SupplySideSupplyPath
          //
          if (n.name () == "SimSystem_HvacAir_SupplySideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacAir_SupplySideSupplyPath_type > r (
              SimSystem_HvacAir_SupplySideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacAir_SupplySideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_Control
          //
          if (n.name () == "SimSystem_HvacChilledWater_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_Control_type > r (
              SimSystem_HvacChilledWater_Control_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_Control_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_ControlDemand
          //
          if (n.name () == "SimSystem_HvacChilledWater_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_ControlDemand_type > r (
              SimSystem_HvacChilledWater_ControlDemand_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_ControlSupply
          //
          if (n.name () == "SimSystem_HvacChilledWater_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_ControlSupply_type > r (
              SimSystem_HvacChilledWater_ControlSupply_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_Demand
          //
          if (n.name () == "SimSystem_HvacChilledWater_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_Demand_type > r (
              SimSystem_HvacChilledWater_Demand_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_Demand_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_DemandSideDemandComponents
          //
          if (n.name () == "SimSystem_HvacChilledWater_DemandSideDemandComponents" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_DemandSideDemandComponents_type > r (
              SimSystem_HvacChilledWater_DemandSideDemandComponents_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_DemandSideDemandComponents_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_HvacChilledWater_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_DemandSideReturnPath_type > r (
              SimSystem_HvacChilledWater_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_HvacChilledWater_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_DemandSideSupplyPath_type > r (
              SimSystem_HvacChilledWater_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_FullSystem
          //
          if (n.name () == "SimSystem_HvacChilledWater_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_FullSystem_type > r (
              SimSystem_HvacChilledWater_FullSystem_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_Supply
          //
          if (n.name () == "SimSystem_HvacChilledWater_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_Supply_type > r (
              SimSystem_HvacChilledWater_Supply_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_Supply_.push_back (r);
            continue;
          }

          // SimSystem_HvacChilledWater_WaterBranch
          //
          if (n.name () == "SimSystem_HvacChilledWater_WaterBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacChilledWater_WaterBranch_type > r (
              SimSystem_HvacChilledWater_WaterBranch_traits::create (i, f, this));

            this->SimSystem_HvacChilledWater_WaterBranch_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_CondenserBranch
          //
          if (n.name () == "SimSystem_HvacCondenser_CondenserBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_CondenserBranch_type > r (
              SimSystem_HvacCondenser_CondenserBranch_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_CondenserBranch_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_Control
          //
          if (n.name () == "SimSystem_HvacCondenser_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_Control_type > r (
              SimSystem_HvacCondenser_Control_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_Control_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_ControlDemand
          //
          if (n.name () == "SimSystem_HvacCondenser_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_ControlDemand_type > r (
              SimSystem_HvacCondenser_ControlDemand_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_ControlSupply
          //
          if (n.name () == "SimSystem_HvacCondenser_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_ControlSupply_type > r (
              SimSystem_HvacCondenser_ControlSupply_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_Demand
          //
          if (n.name () == "SimSystem_HvacCondenser_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_Demand_type > r (
              SimSystem_HvacCondenser_Demand_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_Demand_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_DemandSideDemandComponents
          //
          if (n.name () == "SimSystem_HvacCondenser_DemandSideDemandComponents" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_DemandSideDemandComponents_type > r (
              SimSystem_HvacCondenser_DemandSideDemandComponents_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_DemandSideDemandComponents_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_HvacCondenser_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_DemandSideReturnPath_type > r (
              SimSystem_HvacCondenser_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_HvacCondenser_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_DemandSideSupplyPath_type > r (
              SimSystem_HvacCondenser_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_FullSystem
          //
          if (n.name () == "SimSystem_HvacCondenser_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_FullSystem_type > r (
              SimSystem_HvacCondenser_FullSystem_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_HvacCondenser_Supply
          //
          if (n.name () == "SimSystem_HvacCondenser_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacCondenser_Supply_type > r (
              SimSystem_HvacCondenser_Supply_traits::create (i, f, this));

            this->SimSystem_HvacCondenser_Supply_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_Control
          //
          if (n.name () == "SimSystem_HvacHotWater_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_Control_type > r (
              SimSystem_HvacHotWater_Control_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_Control_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_ControlDemand
          //
          if (n.name () == "SimSystem_HvacHotWater_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_ControlDemand_type > r (
              SimSystem_HvacHotWater_ControlDemand_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_ControlSupply
          //
          if (n.name () == "SimSystem_HvacHotWater_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_ControlSupply_type > r (
              SimSystem_HvacHotWater_ControlSupply_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_Demand
          //
          if (n.name () == "SimSystem_HvacHotWater_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_Demand_type > r (
              SimSystem_HvacHotWater_Demand_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_Demand_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_DemandSideDemandComponents
          //
          if (n.name () == "SimSystem_HvacHotWater_DemandSideDemandComponents" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_DemandSideDemandComponents_type > r (
              SimSystem_HvacHotWater_DemandSideDemandComponents_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_DemandSideDemandComponents_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_HvacHotWater_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_DemandSideReturnPath_type > r (
              SimSystem_HvacHotWater_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_HvacHotWater_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_DemandSideSupplyPath_type > r (
              SimSystem_HvacHotWater_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_FullSystem
          //
          if (n.name () == "SimSystem_HvacHotWater_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_FullSystem_type > r (
              SimSystem_HvacHotWater_FullSystem_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_Supply
          //
          if (n.name () == "SimSystem_HvacHotWater_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_Supply_type > r (
              SimSystem_HvacHotWater_Supply_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_Supply_.push_back (r);
            continue;
          }

          // SimSystem_HvacHotWater_WaterBranch
          //
          if (n.name () == "SimSystem_HvacHotWater_WaterBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacHotWater_WaterBranch_type > r (
              SimSystem_HvacHotWater_WaterBranch_traits::create (i, f, this));

            this->SimSystem_HvacHotWater_WaterBranch_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_Control
          //
          if (n.name () == "SimSystem_HvacMixedWater_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_Control_type > r (
              SimSystem_HvacMixedWater_Control_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_Control_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_ControlDemand
          //
          if (n.name () == "SimSystem_HvacMixedWater_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_ControlDemand_type > r (
              SimSystem_HvacMixedWater_ControlDemand_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_ControlSupply
          //
          if (n.name () == "SimSystem_HvacMixedWater_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_ControlSupply_type > r (
              SimSystem_HvacMixedWater_ControlSupply_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_Demand
          //
          if (n.name () == "SimSystem_HvacMixedWater_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_Demand_type > r (
              SimSystem_HvacMixedWater_Demand_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_Demand_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_DemandSideDemandComponents
          //
          if (n.name () == "SimSystem_HvacMixedWater_DemandSideDemandComponents" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_DemandSideDemandComponents_type > r (
              SimSystem_HvacMixedWater_DemandSideDemandComponents_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_DemandSideDemandComponents_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_HvacMixedWater_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_DemandSideReturnPath_type > r (
              SimSystem_HvacMixedWater_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_HvacMixedWater_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_DemandSideSupplyPath_type > r (
              SimSystem_HvacMixedWater_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_FullSystem
          //
          if (n.name () == "SimSystem_HvacMixedWater_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_FullSystem_type > r (
              SimSystem_HvacMixedWater_FullSystem_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_Supply
          //
          if (n.name () == "SimSystem_HvacMixedWater_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_Supply_type > r (
              SimSystem_HvacMixedWater_Supply_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_Supply_.push_back (r);
            continue;
          }

          // SimSystem_HvacMixedWater_WaterBranch
          //
          if (n.name () == "SimSystem_HvacMixedWater_WaterBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacMixedWater_WaterBranch_type > r (
              SimSystem_HvacMixedWater_WaterBranch_traits::create (i, f, this));

            this->SimSystem_HvacMixedWater_WaterBranch_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_Control
          //
          if (n.name () == "SimSystem_HvacSteam_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_Control_type > r (
              SimSystem_HvacSteam_Control_traits::create (i, f, this));

            this->SimSystem_HvacSteam_Control_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_ControlDemand
          //
          if (n.name () == "SimSystem_HvacSteam_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_ControlDemand_type > r (
              SimSystem_HvacSteam_ControlDemand_traits::create (i, f, this));

            this->SimSystem_HvacSteam_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_ControlSupply
          //
          if (n.name () == "SimSystem_HvacSteam_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_ControlSupply_type > r (
              SimSystem_HvacSteam_ControlSupply_traits::create (i, f, this));

            this->SimSystem_HvacSteam_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_Demand
          //
          if (n.name () == "SimSystem_HvacSteam_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_Demand_type > r (
              SimSystem_HvacSteam_Demand_traits::create (i, f, this));

            this->SimSystem_HvacSteam_Demand_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_DemandSideDemandComponents
          //
          if (n.name () == "SimSystem_HvacSteam_DemandSideDemandComponents" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_DemandSideDemandComponents_type > r (
              SimSystem_HvacSteam_DemandSideDemandComponents_traits::create (i, f, this));

            this->SimSystem_HvacSteam_DemandSideDemandComponents_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_HvacSteam_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_DemandSideReturnPath_type > r (
              SimSystem_HvacSteam_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_HvacSteam_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_HvacSteam_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_DemandSideSupplyPath_type > r (
              SimSystem_HvacSteam_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_HvacSteam_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_FullSystem
          //
          if (n.name () == "SimSystem_HvacSteam_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_FullSystem_type > r (
              SimSystem_HvacSteam_FullSystem_traits::create (i, f, this));

            this->SimSystem_HvacSteam_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_SteamBranch
          //
          if (n.name () == "SimSystem_HvacSteam_SteamBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_SteamBranch_type > r (
              SimSystem_HvacSteam_SteamBranch_traits::create (i, f, this));

            this->SimSystem_HvacSteam_SteamBranch_.push_back (r);
            continue;
          }

          // SimSystem_HvacSteam_Supply
          //
          if (n.name () == "SimSystem_HvacSteam_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_HvacSteam_Supply_type > r (
              SimSystem_HvacSteam_Supply_traits::create (i, f, this));

            this->SimSystem_HvacSteam_Supply_.push_back (r);
            continue;
          }

          // SimSystem_Mechanical_SystemsContainer
          //
          if (n.name () == "SimSystem_Mechanical_SystemsContainer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Mechanical_SystemsContainer_type > r (
              SimSystem_Mechanical_SystemsContainer_traits::create (i, f, this));

            this->SimSystem_Mechanical_SystemsContainer_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_ColdWater
          //
          if (n.name () == "SimSystem_Plumbing_ColdWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_ColdWater_type > r (
              SimSystem_Plumbing_ColdWater_traits::create (i, f, this));

            this->SimSystem_Plumbing_ColdWater_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_GrayWater
          //
          if (n.name () == "SimSystem_Plumbing_GrayWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_GrayWater_type > r (
              SimSystem_Plumbing_GrayWater_traits::create (i, f, this));

            this->SimSystem_Plumbing_GrayWater_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_HotWater
          //
          if (n.name () == "SimSystem_Plumbing_HotWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_HotWater_type > r (
              SimSystem_Plumbing_HotWater_traits::create (i, f, this));

            this->SimSystem_Plumbing_HotWater_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_PotableWater
          //
          if (n.name () == "SimSystem_Plumbing_PotableWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_PotableWater_type > r (
              SimSystem_Plumbing_PotableWater_traits::create (i, f, this));

            this->SimSystem_Plumbing_PotableWater_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_SystemsContainer
          //
          if (n.name () == "SimSystem_Plumbing_SystemsContainer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_SystemsContainer_type > r (
              SimSystem_Plumbing_SystemsContainer_traits::create (i, f, this));

            this->SimSystem_Plumbing_SystemsContainer_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_UndergroundPipingCircuit
          //
          if (n.name () == "SimSystem_Plumbing_UndergroundPipingCircuit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_UndergroundPipingCircuit_type > r (
              SimSystem_Plumbing_UndergroundPipingCircuit_traits::create (i, f, this));

            this->SimSystem_Plumbing_UndergroundPipingCircuit_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_WasteWater
          //
          if (n.name () == "SimSystem_Plumbing_WasteWater" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_WasteWater_type > r (
              SimSystem_Plumbing_WasteWater_traits::create (i, f, this));

            this->SimSystem_Plumbing_WasteWater_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_WaterUseSystem
          //
          if (n.name () == "SimSystem_Plumbing_WaterUseSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_WaterUseSystem_type > r (
              SimSystem_Plumbing_WaterUseSystem_traits::create (i, f, this));

            this->SimSystem_Plumbing_WaterUseSystem_.push_back (r);
            continue;
          }

          // SimSystem_Plumbing_WaterUseWell
          //
          if (n.name () == "SimSystem_Plumbing_WaterUseWell" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Plumbing_WaterUseWell_type > r (
              SimSystem_Plumbing_WaterUseWell_traits::create (i, f, this));

            this->SimSystem_Plumbing_WaterUseWell_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationPrimary_Control
          //
          if (n.name () == "SimSystem_RefrigerationPrimary_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationPrimary_Control_type > r (
              SimSystem_RefrigerationPrimary_Control_traits::create (i, f, this));

            this->SimSystem_RefrigerationPrimary_Control_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationPrimary_Demand
          //
          if (n.name () == "SimSystem_RefrigerationPrimary_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationPrimary_Demand_type > r (
              SimSystem_RefrigerationPrimary_Demand_traits::create (i, f, this));

            this->SimSystem_RefrigerationPrimary_Demand_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationPrimary_FullSystem
          //
          if (n.name () == "SimSystem_RefrigerationPrimary_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationPrimary_FullSystem_type > r (
              SimSystem_RefrigerationPrimary_FullSystem_traits::create (i, f, this));

            this->SimSystem_RefrigerationPrimary_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationPrimary_Supply
          //
          if (n.name () == "SimSystem_RefrigerationPrimary_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationPrimary_Supply_type > r (
              SimSystem_RefrigerationPrimary_Supply_traits::create (i, f, this));

            this->SimSystem_RefrigerationPrimary_Supply_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationSecondary_Control
          //
          if (n.name () == "SimSystem_RefrigerationSecondary_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationSecondary_Control_type > r (
              SimSystem_RefrigerationSecondary_Control_traits::create (i, f, this));

            this->SimSystem_RefrigerationSecondary_Control_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationSecondary_Demand
          //
          if (n.name () == "SimSystem_RefrigerationSecondary_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationSecondary_Demand_type > r (
              SimSystem_RefrigerationSecondary_Demand_traits::create (i, f, this));

            this->SimSystem_RefrigerationSecondary_Demand_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationSecondary_FullSystem
          //
          if (n.name () == "SimSystem_RefrigerationSecondary_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationSecondary_FullSystem_type > r (
              SimSystem_RefrigerationSecondary_FullSystem_traits::create (i, f, this));

            this->SimSystem_RefrigerationSecondary_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationSecondary_Supply
          //
          if (n.name () == "SimSystem_RefrigerationSecondary_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationSecondary_Supply_type > r (
              SimSystem_RefrigerationSecondary_Supply_traits::create (i, f, this));

            this->SimSystem_RefrigerationSecondary_Supply_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationTranscritical_Control
          //
          if (n.name () == "SimSystem_RefrigerationTranscritical_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationTranscritical_Control_type > r (
              SimSystem_RefrigerationTranscritical_Control_traits::create (i, f, this));

            this->SimSystem_RefrigerationTranscritical_Control_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationTranscritical_Demand
          //
          if (n.name () == "SimSystem_RefrigerationTranscritical_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationTranscritical_Demand_type > r (
              SimSystem_RefrigerationTranscritical_Demand_traits::create (i, f, this));

            this->SimSystem_RefrigerationTranscritical_Demand_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationTranscritical_FullSystem
          //
          if (n.name () == "SimSystem_RefrigerationTranscritical_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationTranscritical_FullSystem_type > r (
              SimSystem_RefrigerationTranscritical_FullSystem_traits::create (i, f, this));

            this->SimSystem_RefrigerationTranscritical_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_RefrigerationTranscritical_Supply
          //
          if (n.name () == "SimSystem_RefrigerationTranscritical_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_RefrigerationTranscritical_Supply_type > r (
              SimSystem_RefrigerationTranscritical_Supply_traits::create (i, f, this));

            this->SimSystem_RefrigerationTranscritical_Supply_.push_back (r);
            continue;
          }

          // SimSystem_ServiceHotWater_Control
          //
          if (n.name () == "SimSystem_ServiceHotWater_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ServiceHotWater_Control_type > r (
              SimSystem_ServiceHotWater_Control_traits::create (i, f, this));

            this->SimSystem_ServiceHotWater_Control_.push_back (r);
            continue;
          }

          // SimSystem_ServiceHotWater_Demand
          //
          if (n.name () == "SimSystem_ServiceHotWater_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ServiceHotWater_Demand_type > r (
              SimSystem_ServiceHotWater_Demand_traits::create (i, f, this));

            this->SimSystem_ServiceHotWater_Demand_.push_back (r);
            continue;
          }

          // SimSystem_ServiceHotWater_FullSystem
          //
          if (n.name () == "SimSystem_ServiceHotWater_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ServiceHotWater_FullSystem_type > r (
              SimSystem_ServiceHotWater_FullSystem_traits::create (i, f, this));

            this->SimSystem_ServiceHotWater_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_ServiceHotWater_Supply
          //
          if (n.name () == "SimSystem_ServiceHotWater_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ServiceHotWater_Supply_type > r (
              SimSystem_ServiceHotWater_Supply_traits::create (i, f, this));

            this->SimSystem_ServiceHotWater_Supply_.push_back (r);
            continue;
          }

          // SimSystem_ServiceHotWater_WaterBranch
          //
          if (n.name () == "SimSystem_ServiceHotWater_WaterBranch" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ServiceHotWater_WaterBranch_type > r (
              SimSystem_ServiceHotWater_WaterBranch_traits::create (i, f, this));

            this->SimSystem_ServiceHotWater_WaterBranch_.push_back (r);
            continue;
          }

          // SimSystem_SitePowerDemand_ElectricityConsuming
          //
          if (n.name () == "SimSystem_SitePowerDemand_ElectricityConsuming" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_SitePowerDemand_ElectricityConsuming_type > r (
              SimSystem_SitePowerDemand_ElectricityConsuming_traits::create (i, f, this));

            this->SimSystem_SitePowerDemand_ElectricityConsuming_.push_back (r);
            continue;
          }

          // SimSystem_SitePowerDemand_FuelConsuming
          //
          if (n.name () == "SimSystem_SitePowerDemand_FuelConsuming" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_SitePowerDemand_FuelConsuming_type > r (
              SimSystem_SitePowerDemand_FuelConsuming_traits::create (i, f, this));

            this->SimSystem_SitePowerDemand_FuelConsuming_.push_back (r);
            continue;
          }

          // SimSystem_SitePowerDemand_WaterConsuming
          //
          if (n.name () == "SimSystem_SitePowerDemand_WaterConsuming" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_SitePowerDemand_WaterConsuming_type > r (
              SimSystem_SitePowerDemand_WaterConsuming_traits::create (i, f, this));

            this->SimSystem_SitePowerDemand_WaterConsuming_.push_back (r);
            continue;
          }

          // SimSystem_SitePowerGeneration_Other
          //
          if (n.name () == "SimSystem_SitePowerGeneration_Other" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_SitePowerGeneration_Other_type > r (
              SimSystem_SitePowerGeneration_Other_traits::create (i, f, this));

            this->SimSystem_SitePowerGeneration_Other_.push_back (r);
            continue;
          }

          // SimSystem_SitePowerGeneration_Photovoltaic
          //
          if (n.name () == "SimSystem_SitePowerGeneration_Photovoltaic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_SitePowerGeneration_Photovoltaic_type > r (
              SimSystem_SitePowerGeneration_Photovoltaic_traits::create (i, f, this));

            this->SimSystem_SitePowerGeneration_Photovoltaic_.push_back (r);
            continue;
          }

          // SimSystem_SitePowerGeneration_WindTurbine
          //
          if (n.name () == "SimSystem_SitePowerGeneration_WindTurbine" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_SitePowerGeneration_WindTurbine_type > r (
              SimSystem_SitePowerGeneration_WindTurbine_traits::create (i, f, this));

            this->SimSystem_SitePowerGeneration_WindTurbine_.push_back (r);
            continue;
          }

          // SimSystem_Transport_Elevator
          //
          if (n.name () == "SimSystem_Transport_Elevator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Transport_Elevator_type > r (
              SimSystem_Transport_Elevator_traits::create (i, f, this));

            this->SimSystem_Transport_Elevator_.push_back (r);
            continue;
          }

          // SimSystem_Transport_Escalator
          //
          if (n.name () == "SimSystem_Transport_Escalator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Transport_Escalator_type > r (
              SimSystem_Transport_Escalator_traits::create (i, f, this));

            this->SimSystem_Transport_Escalator_.push_back (r);
            continue;
          }

          // SimSystem_Transport_MovingWalkway
          //
          if (n.name () == "SimSystem_Transport_MovingWalkway" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Transport_MovingWalkway_type > r (
              SimSystem_Transport_MovingWalkway_traits::create (i, f, this));

            this->SimSystem_Transport_MovingWalkway_.push_back (r);
            continue;
          }

          // SimSystem_Transport_SystemsContainer
          //
          if (n.name () == "SimSystem_Transport_SystemsContainer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_Transport_SystemsContainer_type > r (
              SimSystem_Transport_SystemsContainer_traits::create (i, f, this));

            this->SimSystem_Transport_SystemsContainer_.push_back (r);
            continue;
          }

          // SimSystem_VariableRefrigerantFlow_Control
          //
          if (n.name () == "SimSystem_VariableRefrigerantFlow_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_VariableRefrigerantFlow_Control_type > r (
              SimSystem_VariableRefrigerantFlow_Control_traits::create (i, f, this));

            this->SimSystem_VariableRefrigerantFlow_Control_.push_back (r);
            continue;
          }

          // SimSystem_VariableRefrigerantFlow_Demand
          //
          if (n.name () == "SimSystem_VariableRefrigerantFlow_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_VariableRefrigerantFlow_Demand_type > r (
              SimSystem_VariableRefrigerantFlow_Demand_traits::create (i, f, this));

            this->SimSystem_VariableRefrigerantFlow_Demand_.push_back (r);
            continue;
          }

          // SimSystem_VariableRefrigerantFlow_FullSystem
          //
          if (n.name () == "SimSystem_VariableRefrigerantFlow_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_VariableRefrigerantFlow_FullSystem_type > r (
              SimSystem_VariableRefrigerantFlow_FullSystem_traits::create (i, f, this));

            this->SimSystem_VariableRefrigerantFlow_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_VariableRefrigerantFlow_Supply
          //
          if (n.name () == "SimSystem_VariableRefrigerantFlow_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_VariableRefrigerantFlow_Supply_type > r (
              SimSystem_VariableRefrigerantFlow_Supply_traits::create (i, f, this));

            this->SimSystem_VariableRefrigerantFlow_Supply_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_Control
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_Control" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_Control_type > r (
              SimSystem_ZoneHvacGroup_Control_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_Control_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_ControlDemand
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_ControlDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_ControlDemand_type > r (
              SimSystem_ZoneHvacGroup_ControlDemand_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_ControlDemand_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_ControlSupply
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_ControlSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_ControlSupply_type > r (
              SimSystem_ZoneHvacGroup_ControlSupply_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_ControlSupply_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_Demand
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_Demand_type > r (
              SimSystem_ZoneHvacGroup_Demand_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_Demand_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_DemandSideReturnPath
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_DemandSideReturnPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_DemandSideReturnPath_type > r (
              SimSystem_ZoneHvacGroup_DemandSideReturnPath_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_DemandSideReturnPath_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_DemandSideSupplyPath
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_DemandSideSupplyPath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_DemandSideSupplyPath_type > r (
              SimSystem_ZoneHvacGroup_DemandSideSupplyPath_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_DemandSideSupplyPath_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_DemandSideZoneHvac
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_DemandSideZoneHvac" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_DemandSideZoneHvac_type > r (
              SimSystem_ZoneHvacGroup_DemandSideZoneHvac_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_DemandSideZoneHvac_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_FullSystem
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_FullSystem_type > r (
              SimSystem_ZoneHvacGroup_FullSystem_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_ZoneHvacGroup_Supply
          //
          if (n.name () == "SimSystem_ZoneHvacGroup_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneHvacGroup_Supply_type > r (
              SimSystem_ZoneHvacGroup_Supply_traits::create (i, f, this));

            this->SimSystem_ZoneHvacGroup_Supply_.push_back (r);
            continue;
          }

          // SimSystem_ZoneShwGroup_Demand
          //
          if (n.name () == "SimSystem_ZoneShwGroup_Demand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneShwGroup_Demand_type > r (
              SimSystem_ZoneShwGroup_Demand_traits::create (i, f, this));

            this->SimSystem_ZoneShwGroup_Demand_.push_back (r);
            continue;
          }

          // SimSystem_ZoneShwGroup_FullSystem
          //
          if (n.name () == "SimSystem_ZoneShwGroup_FullSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneShwGroup_FullSystem_type > r (
              SimSystem_ZoneShwGroup_FullSystem_traits::create (i, f, this));

            this->SimSystem_ZoneShwGroup_FullSystem_.push_back (r);
            continue;
          }

          // SimSystem_ZoneShwGroup_Supply
          //
          if (n.name () == "SimSystem_ZoneShwGroup_Supply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimSystem_ZoneShwGroup_Supply_type > r (
              SimSystem_ZoneShwGroup_Supply_traits::create (i, f, this));

            this->SimSystem_ZoneShwGroup_Supply_.push_back (r);
            continue;
          }

          // SimTemplateConstructions_Constructions_Default
          //
          if (n.name () == "SimTemplateConstructions_Constructions_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateConstructions_Constructions_Default_type > r (
              SimTemplateConstructions_Constructions_Default_traits::create (i, f, this));

            this->SimTemplateConstructions_Constructions_Default_.push_back (r);
            continue;
          }

          // SimTemplateDaylighting_Daylighting_Default
          //
          if (n.name () == "SimTemplateDaylighting_Daylighting_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateDaylighting_Daylighting_Default_type > r (
              SimTemplateDaylighting_Daylighting_Default_traits::create (i, f, this));

            this->SimTemplateDaylighting_Daylighting_Default_.push_back (r);
            continue;
          }

          // SimTemplateDaylighting_Daylighting_Skylights
          //
          if (n.name () == "SimTemplateDaylighting_Daylighting_Skylights" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateDaylighting_Daylighting_Skylights_type > r (
              SimTemplateDaylighting_Daylighting_Skylights_traits::create (i, f, this));

            this->SimTemplateDaylighting_Daylighting_Skylights_.push_back (r);
            continue;
          }

          // SimTemplateDaylighting_Daylighting_Windows
          //
          if (n.name () == "SimTemplateDaylighting_Daylighting_Windows" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateDaylighting_Daylighting_Windows_type > r (
              SimTemplateDaylighting_Daylighting_Windows_traits::create (i, f, this));

            this->SimTemplateDaylighting_Daylighting_Windows_.push_back (r);
            continue;
          }

          // SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default
          //
          if (n.name () == "SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_type > r (
              SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_traits::create (i, f, this));

            this->SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_.push_back (r);
            continue;
          }

          // SimTemplateInteriorLighting_InteriorLighting_Default
          //
          if (n.name () == "SimTemplateInteriorLighting_InteriorLighting_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateInteriorLighting_InteriorLighting_Default_type > r (
              SimTemplateInteriorLighting_InteriorLighting_Default_traits::create (i, f, this));

            this->SimTemplateInteriorLighting_InteriorLighting_Default_.push_back (r);
            continue;
          }

          // SimTemplateLocation_Location_Default
          //
          if (n.name () == "SimTemplateLocation_Location_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateLocation_Location_Default_type > r (
              SimTemplateLocation_Location_Default_traits::create (i, f, this));

            this->SimTemplateLocation_Location_Default_.push_back (r);
            continue;
          }

          // SimTemplateNaturalVentilation_NaturalVentilation_Default
          //
          if (n.name () == "SimTemplateNaturalVentilation_NaturalVentilation_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateNaturalVentilation_NaturalVentilation_Default_type > r (
              SimTemplateNaturalVentilation_NaturalVentilation_Default_traits::create (i, f, this));

            this->SimTemplateNaturalVentilation_NaturalVentilation_Default_.push_back (r);
            continue;
          }

          // SimTemplateOutputFormatSet_OutputFormatSet_Default
          //
          if (n.name () == "SimTemplateOutputFormatSet_OutputFormatSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateOutputFormatSet_OutputFormatSet_Default_type > r (
              SimTemplateOutputFormatSet_OutputFormatSet_Default_traits::create (i, f, this));

            this->SimTemplateOutputFormatSet_OutputFormatSet_Default_.push_back (r);
            continue;
          }

          // SimTemplateOutputRequestSet_OutputRequestSet_Default
          //
          if (n.name () == "SimTemplateOutputRequestSet_OutputRequestSet_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateOutputRequestSet_OutputRequestSet_Default_type > r (
              SimTemplateOutputRequestSet_OutputRequestSet_Default_traits::create (i, f, this));

            this->SimTemplateOutputRequestSet_OutputRequestSet_Default_.push_back (r);
            continue;
          }

          // SimTemplateSimulationParameters_SimulationParameters_Default
          //
          if (n.name () == "SimTemplateSimulationParameters_SimulationParameters_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateSimulationParameters_SimulationParameters_Default_type > r (
              SimTemplateSimulationParameters_SimulationParameters_Default_traits::create (i, f, this));

            this->SimTemplateSimulationParameters_SimulationParameters_Default_.push_back (r);
            continue;
          }

          // SimTemplateZoneConditions_ZoneConditions_Default
          //
          if (n.name () == "SimTemplateZoneConditions_ZoneConditions_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateZoneConditions_ZoneConditions_Default_type > r (
              SimTemplateZoneConditions_ZoneConditions_Default_traits::create (i, f, this));

            this->SimTemplateZoneConditions_ZoneConditions_Default_.push_back (r);
            continue;
          }

          // SimTemplateZoneLoads_ZoneLoads_Default
          //
          if (n.name () == "SimTemplateZoneLoads_ZoneLoads_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTemplateZoneLoads_ZoneLoads_Default_type > r (
              SimTemplateZoneLoads_ZoneLoads_Default_traits::create (i, f, this));

            this->SimTemplateZoneLoads_ZoneLoads_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Calendar_Configuration
          //
          if (n.name () == "SimTimeSeriesSchedule_Calendar_Configuration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Calendar_Configuration_type > r (
              SimTimeSeriesSchedule_Calendar_Configuration_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Calendar_Configuration_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Calendar_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_Calendar_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Calendar_Default_type > r (
              SimTimeSeriesSchedule_Calendar_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Calendar_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Calendar_SpecialDays
          //
          if (n.name () == "SimTimeSeriesSchedule_Calendar_SpecialDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Calendar_SpecialDays_type > r (
              SimTimeSeriesSchedule_Calendar_SpecialDays_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Calendar_SpecialDays_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Compact_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_Compact_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Compact_Default_type > r (
              SimTimeSeriesSchedule_Compact_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Compact_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Constant_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_Constant_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Constant_Default_type > r (
              SimTimeSeriesSchedule_Constant_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Constant_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Day_Hourly
          //
          if (n.name () == "SimTimeSeriesSchedule_Day_Hourly" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Day_Hourly_type > r (
              SimTimeSeriesSchedule_Day_Hourly_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Day_Hourly_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Day_Interval
          //
          if (n.name () == "SimTimeSeriesSchedule_Day_Interval" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Day_Interval_type > r (
              SimTimeSeriesSchedule_Day_Interval_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Day_Interval_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Day_List
          //
          if (n.name () == "SimTimeSeriesSchedule_Day_List" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Day_List_type > r (
              SimTimeSeriesSchedule_Day_List_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Day_List_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_File_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_File_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_File_Default_type > r (
              SimTimeSeriesSchedule_File_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_File_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Limits_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_Limits_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Limits_Default_type > r (
              SimTimeSeriesSchedule_Limits_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Limits_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_TimeSeries_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_TimeSeries_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_TimeSeries_Default_type > r (
              SimTimeSeriesSchedule_TimeSeries_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_TimeSeries_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Week_Compact
          //
          if (n.name () == "SimTimeSeriesSchedule_Week_Compact" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Week_Compact_type > r (
              SimTimeSeriesSchedule_Week_Compact_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Week_Compact_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Week_Daily
          //
          if (n.name () == "SimTimeSeriesSchedule_Week_Daily" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Week_Daily_type > r (
              SimTimeSeriesSchedule_Week_Daily_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Week_Daily_.push_back (r);
            continue;
          }

          // SimTimeSeriesSchedule_Year_Default
          //
          if (n.name () == "SimTimeSeriesSchedule_Year_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesSchedule_Year_Default_type > r (
              SimTimeSeriesSchedule_Year_Default_traits::create (i, f, this));

            this->SimTimeSeriesSchedule_Year_Default_.push_back (r);
            continue;
          }

          // SimTimeSeriesValue_TimeSeries_Irregular
          //
          if (n.name () == "SimTimeSeriesValue_TimeSeries_Irregular" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesValue_TimeSeries_Irregular_type > r (
              SimTimeSeriesValue_TimeSeries_Irregular_traits::create (i, f, this));

            this->SimTimeSeriesValue_TimeSeries_Irregular_.push_back (r);
            continue;
          }

          // SimTimeSeriesValue_TimeSeries_Regular
          //
          if (n.name () == "SimTimeSeriesValue_TimeSeries_Regular" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTimeSeriesValue_TimeSeries_Regular_type > r (
              SimTimeSeriesValue_TimeSeries_Regular_traits::create (i, f, this));

            this->SimTimeSeriesValue_TimeSeries_Regular_.push_back (r);
            continue;
          }

          // SimToplogicalRepresentation_TopologicalRepresentation_Default
          //
          if (n.name () == "SimToplogicalRepresentation_TopologicalRepresentation_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimToplogicalRepresentation_TopologicalRepresentation_Default_type > r (
              SimToplogicalRepresentation_TopologicalRepresentation_Default_traits::create (i, f, this));

            this->SimToplogicalRepresentation_TopologicalRepresentation_Default_.push_back (r);
            continue;
          }

          // SimTransportSysAssembly_TransportSysAssembly_Default
          //
          if (n.name () == "SimTransportSysAssembly_TransportSysAssembly_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTransportSysAssembly_TransportSysAssembly_Default_type > r (
              SimTransportSysAssembly_TransportSysAssembly_Default_traits::create (i, f, this));

            this->SimTransportSysAssembly_TransportSysAssembly_Default_.push_back (r);
            continue;
          }

          // SimTransportSysAssembly_TransportSysAssembly_Elevator
          //
          if (n.name () == "SimTransportSysAssembly_TransportSysAssembly_Elevator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTransportSysAssembly_TransportSysAssembly_Elevator_type > r (
              SimTransportSysAssembly_TransportSysAssembly_Elevator_traits::create (i, f, this));

            this->SimTransportSysAssembly_TransportSysAssembly_Elevator_.push_back (r);
            continue;
          }

          // SimTransportSysAssembly_TransportSysAssembly_Escalator
          //
          if (n.name () == "SimTransportSysAssembly_TransportSysAssembly_Escalator" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTransportSysAssembly_TransportSysAssembly_Escalator_type > r (
              SimTransportSysAssembly_TransportSysAssembly_Escalator_traits::create (i, f, this));

            this->SimTransportSysAssembly_TransportSysAssembly_Escalator_.push_back (r);
            continue;
          }

          // SimTransportSysAssembly_TransportSysAssembly_MovingWalkway
          //
          if (n.name () == "SimTransportSysAssembly_TransportSysAssembly_MovingWalkway" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_type > r (
              SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_traits::create (i, f, this));

            this->SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_.push_back (r);
            continue;
          }

          // SimValidationResultsAir_AirLoop_Default
          //
          if (n.name () == "SimValidationResultsAir_AirLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsAir_AirLoop_Default_type > r (
              SimValidationResultsAir_AirLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsAir_AirLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsBldg_Building_Default
          //
          if (n.name () == "SimValidationResultsBldg_Building_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsBldg_Building_Default_type > r (
              SimValidationResultsBldg_Building_Default_traits::create (i, f, this));

            this->SimValidationResultsBldg_Building_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsRefrig_RFGLoop_Default
          //
          if (n.name () == "SimValidationResultsRefrig_RFGLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsRefrig_RFGLoop_Default_type > r (
              SimValidationResultsRefrig_RFGLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsRefrig_RFGLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsVRF_VRFLoop_Default
          //
          if (n.name () == "SimValidationResultsVRF_VRFLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsVRF_VRFLoop_Default_type > r (
              SimValidationResultsVRF_VRFLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsVRF_VRFLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsWater_CHWLoop_Default
          //
          if (n.name () == "SimValidationResultsWater_CHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsWater_CHWLoop_Default_type > r (
              SimValidationResultsWater_CHWLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsWater_CHWLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsWater_CWLoop_Default
          //
          if (n.name () == "SimValidationResultsWater_CWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsWater_CWLoop_Default_type > r (
              SimValidationResultsWater_CWLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsWater_CWLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsWater_HWLoop_Default
          //
          if (n.name () == "SimValidationResultsWater_HWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsWater_HWLoop_Default_type > r (
              SimValidationResultsWater_HWLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsWater_HWLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsWater_MxWLoop_Default
          //
          if (n.name () == "SimValidationResultsWater_MxWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsWater_MxWLoop_Default_type > r (
              SimValidationResultsWater_MxWLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsWater_MxWLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsWater_SHWLoop_Default
          //
          if (n.name () == "SimValidationResultsWater_SHWLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsWater_SHWLoop_Default_type > r (
              SimValidationResultsWater_SHWLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsWater_SHWLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsWater_STMLoop_Default
          //
          if (n.name () == "SimValidationResultsWater_STMLoop_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsWater_STMLoop_Default_type > r (
              SimValidationResultsWater_STMLoop_Default_traits::create (i, f, this));

            this->SimValidationResultsWater_STMLoop_Default_.push_back (r);
            continue;
          }

          // SimValidationResultsZoneHvac_ZoneHvac_Default
          //
          if (n.name () == "SimValidationResultsZoneHvac_ZoneHvac_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimValidationResultsZoneHvac_ZoneHvac_Default_type > r (
              SimValidationResultsZoneHvac_ZoneHvac_Default_traits::create (i, f, this));

            this->SimValidationResultsZoneHvac_ZoneHvac_Default_.push_back (r);
            continue;
          }

          // SimVentilationAssembly_VentilationAssembly_CoolTower_Shower
          //
          if (n.name () == "SimVentilationAssembly_VentilationAssembly_CoolTower_Shower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_type > r (
              SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_traits::create (i, f, this));

            this->SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_.push_back (r);
            continue;
          }

          // SimVentilationAssembly_VentilationAssembly_EarthTube
          //
          if (n.name () == "SimVentilationAssembly_VentilationAssembly_EarthTube" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVentilationAssembly_VentilationAssembly_EarthTube_type > r (
              SimVentilationAssembly_VentilationAssembly_EarthTube_traits::create (i, f, this));

            this->SimVentilationAssembly_VentilationAssembly_EarthTube_.push_back (r);
            continue;
          }

          // SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity
          //
          if (n.name () == "SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_type > r (
              SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_traits::create (i, f, this));

            this->SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_.push_back (r);
            continue;
          }

          // SimVentilationAssembly_VentilationAssembly_RefrigerationDoor
          //
          if (n.name () == "SimVentilationAssembly_VentilationAssembly_RefrigerationDoor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_type > r (
              SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_traits::create (i, f, this));

            this->SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_.push_back (r);
            continue;
          }

          // SimVentilationAssembly_VentilationAssembly_ThermalChimney
          //
          if (n.name () == "SimVentilationAssembly_VentilationAssembly_ThermalChimney" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVentilationAssembly_VentilationAssembly_ThermalChimney_type > r (
              SimVentilationAssembly_VentilationAssembly_ThermalChimney_traits::create (i, f, this));

            this->SimVentilationAssembly_VentilationAssembly_ThermalChimney_.push_back (r);
            continue;
          }

          // SimVertex_Vertex_Point
          //
          if (n.name () == "SimVertex_Vertex_Point" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVertex_Vertex_Point_type > r (
              SimVertex_Vertex_Point_traits::create (i, f, this));

            this->SimVertex_Vertex_Point_.push_back (r);
            continue;
          }

          // SimVirtualElement_Default_Default
          //
          if (n.name () == "SimVirtualElement_Default_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Default_Default_type > r (
              SimVirtualElement_Default_Default_traits::create (i, f, this));

            this->SimVirtualElement_Default_Default_.push_back (r);
            continue;
          }

          // SimVirtualElement_Slab_Ceiling
          //
          if (n.name () == "SimVirtualElement_Slab_Ceiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Slab_Ceiling_type > r (
              SimVirtualElement_Slab_Ceiling_traits::create (i, f, this));

            this->SimVirtualElement_Slab_Ceiling_.push_back (r);
            continue;
          }

          // SimVirtualElement_Slab_Default
          //
          if (n.name () == "SimVirtualElement_Slab_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Slab_Default_type > r (
              SimVirtualElement_Slab_Default_traits::create (i, f, this));

            this->SimVirtualElement_Slab_Default_.push_back (r);
            continue;
          }

          // SimVirtualElement_Slab_Floor
          //
          if (n.name () == "SimVirtualElement_Slab_Floor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Slab_Floor_type > r (
              SimVirtualElement_Slab_Floor_traits::create (i, f, this));

            this->SimVirtualElement_Slab_Floor_.push_back (r);
            continue;
          }

          // SimVirtualElement_Slab_OpeningFiller
          //
          if (n.name () == "SimVirtualElement_Slab_OpeningFiller" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Slab_OpeningFiller_type > r (
              SimVirtualElement_Slab_OpeningFiller_traits::create (i, f, this));

            this->SimVirtualElement_Slab_OpeningFiller_.push_back (r);
            continue;
          }

          // SimVirtualElement_Wall_Default
          //
          if (n.name () == "SimVirtualElement_Wall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Wall_Default_type > r (
              SimVirtualElement_Wall_Default_traits::create (i, f, this));

            this->SimVirtualElement_Wall_Default_.push_back (r);
            continue;
          }

          // SimVirtualElement_Wall_OpeningFiller
          //
          if (n.name () == "SimVirtualElement_Wall_OpeningFiller" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualElement_Wall_OpeningFiller_type > r (
              SimVirtualElement_Wall_OpeningFiller_traits::create (i, f, this));

            this->SimVirtualElement_Wall_OpeningFiller_.push_back (r);
            continue;
          }

          // SimVirtualGridIntersection_VirtualGridIntersection_Default
          //
          if (n.name () == "SimVirtualGridIntersection_VirtualGridIntersection_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimVirtualGridIntersection_VirtualGridIntersection_Default_type > r (
              SimVirtualGridIntersection_VirtualGridIntersection_Default_traits::create (i, f, this));

            this->SimVirtualGridIntersection_VirtualGridIntersection_Default_.push_back (r);
            continue;
          }

          // SimWall_OtherSideCoefficients_Default
          //
          if (n.name () == "SimWall_OtherSideCoefficients_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideCoefficients_Default_type > r (
              SimWall_OtherSideCoefficients_Default_traits::create (i, f, this));

            this->SimWall_OtherSideCoefficients_Default_.push_back (r);
            continue;
          }

          // SimWall_OtherSideCoefficients_Detailed
          //
          if (n.name () == "SimWall_OtherSideCoefficients_Detailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideCoefficients_Detailed_type > r (
              SimWall_OtherSideCoefficients_Detailed_traits::create (i, f, this));

            this->SimWall_OtherSideCoefficients_Detailed_.push_back (r);
            continue;
          }

          // SimWall_OtherSideCoefficients_DetailedFloor
          //
          if (n.name () == "SimWall_OtherSideCoefficients_DetailedFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideCoefficients_DetailedFloor_type > r (
              SimWall_OtherSideCoefficients_DetailedFloor_traits::create (i, f, this));

            this->SimWall_OtherSideCoefficients_DetailedFloor_.push_back (r);
            continue;
          }

          // SimWall_OtherSideCoefficients_DetailedRoofCeiling
          //
          if (n.name () == "SimWall_OtherSideCoefficients_DetailedRoofCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideCoefficients_DetailedRoofCeiling_type > r (
              SimWall_OtherSideCoefficients_DetailedRoofCeiling_traits::create (i, f, this));

            this->SimWall_OtherSideCoefficients_DetailedRoofCeiling_.push_back (r);
            continue;
          }

          // SimWall_OtherSideConditionsModel_Default
          //
          if (n.name () == "SimWall_OtherSideConditionsModel_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideConditionsModel_Default_type > r (
              SimWall_OtherSideConditionsModel_Default_traits::create (i, f, this));

            this->SimWall_OtherSideConditionsModel_Default_.push_back (r);
            continue;
          }

          // SimWall_OtherSideConditionsModel_Detailed
          //
          if (n.name () == "SimWall_OtherSideConditionsModel_Detailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideConditionsModel_Detailed_type > r (
              SimWall_OtherSideConditionsModel_Detailed_traits::create (i, f, this));

            this->SimWall_OtherSideConditionsModel_Detailed_.push_back (r);
            continue;
          }

          // SimWall_OtherSideConditionsModel_DetailedFloor
          //
          if (n.name () == "SimWall_OtherSideConditionsModel_DetailedFloor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideConditionsModel_DetailedFloor_type > r (
              SimWall_OtherSideConditionsModel_DetailedFloor_traits::create (i, f, this));

            this->SimWall_OtherSideConditionsModel_DetailedFloor_.push_back (r);
            continue;
          }

          // SimWall_OtherSideConditionsModel_DetailedRoofCeiling
          //
          if (n.name () == "SimWall_OtherSideConditionsModel_DetailedRoofCeiling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_OtherSideConditionsModel_DetailedRoofCeiling_type > r (
              SimWall_OtherSideConditionsModel_DetailedRoofCeiling_traits::create (i, f, this));

            this->SimWall_OtherSideConditionsModel_DetailedRoofCeiling_.push_back (r);
            continue;
          }

          // SimWall_Wall_Adiabatic
          //
          if (n.name () == "SimWall_Wall_Adiabatic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_Adiabatic_type > r (
              SimWall_Wall_Adiabatic_traits::create (i, f, this));

            this->SimWall_Wall_Adiabatic_.push_back (r);
            continue;
          }

          // SimWall_Wall_Default
          //
          if (n.name () == "SimWall_Wall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_Default_type > r (
              SimWall_Wall_Default_traits::create (i, f, this));

            this->SimWall_Wall_Default_.push_back (r);
            continue;
          }

          // SimWall_Wall_ExteriorAboveGrade
          //
          if (n.name () == "SimWall_Wall_ExteriorAboveGrade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_ExteriorAboveGrade_type > r (
              SimWall_Wall_ExteriorAboveGrade_traits::create (i, f, this));

            this->SimWall_Wall_ExteriorAboveGrade_.push_back (r);
            continue;
          }

          // SimWall_Wall_ExteriorAboveGradeDetailed
          //
          if (n.name () == "SimWall_Wall_ExteriorAboveGradeDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_ExteriorAboveGradeDetailed_type > r (
              SimWall_Wall_ExteriorAboveGradeDetailed_traits::create (i, f, this));

            this->SimWall_Wall_ExteriorAboveGradeDetailed_.push_back (r);
            continue;
          }

          // SimWall_Wall_ExteriorAboveGradeStandard
          //
          if (n.name () == "SimWall_Wall_ExteriorAboveGradeStandard" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_ExteriorAboveGradeStandard_type > r (
              SimWall_Wall_ExteriorAboveGradeStandard_traits::create (i, f, this));

            this->SimWall_Wall_ExteriorAboveGradeStandard_.push_back (r);
            continue;
          }

          // SimWall_Wall_ExteriorBelowGrade
          //
          if (n.name () == "SimWall_Wall_ExteriorBelowGrade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_ExteriorBelowGrade_type > r (
              SimWall_Wall_ExteriorBelowGrade_traits::create (i, f, this));

            this->SimWall_Wall_ExteriorBelowGrade_.push_back (r);
            continue;
          }

          // SimWall_Wall_ExteriorBelowGradeDetailed
          //
          if (n.name () == "SimWall_Wall_ExteriorBelowGradeDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_ExteriorBelowGradeDetailed_type > r (
              SimWall_Wall_ExteriorBelowGradeDetailed_traits::create (i, f, this));

            this->SimWall_Wall_ExteriorBelowGradeDetailed_.push_back (r);
            continue;
          }

          // SimWall_Wall_ExteriorBelowGradeStandard
          //
          if (n.name () == "SimWall_Wall_ExteriorBelowGradeStandard" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_ExteriorBelowGradeStandard_type > r (
              SimWall_Wall_ExteriorBelowGradeStandard_traits::create (i, f, this));

            this->SimWall_Wall_ExteriorBelowGradeStandard_.push_back (r);
            continue;
          }

          // SimWall_Wall_Interior
          //
          if (n.name () == "SimWall_Wall_Interior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_Interior_type > r (
              SimWall_Wall_Interior_traits::create (i, f, this));

            this->SimWall_Wall_Interior_.push_back (r);
            continue;
          }

          // SimWall_Wall_InteriorDetailed
          //
          if (n.name () == "SimWall_Wall_InteriorDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_InteriorDetailed_type > r (
              SimWall_Wall_InteriorDetailed_traits::create (i, f, this));

            this->SimWall_Wall_InteriorDetailed_.push_back (r);
            continue;
          }

          // SimWall_Wall_InteriorStandard
          //
          if (n.name () == "SimWall_Wall_InteriorStandard" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_InteriorStandard_type > r (
              SimWall_Wall_InteriorStandard_traits::create (i, f, this));

            this->SimWall_Wall_InteriorStandard_.push_back (r);
            continue;
          }

          // SimWall_Wall_OpeningFiller
          //
          if (n.name () == "SimWall_Wall_OpeningFiller" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWall_Wall_OpeningFiller_type > r (
              SimWall_Wall_OpeningFiller_traits::create (i, f, this));

            this->SimWall_Wall_OpeningFiller_.push_back (r);
            continue;
          }

          // SimWallParams_Wall_Default
          //
          if (n.name () == "SimWallParams_Wall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWallParams_Wall_Default_type > r (
              SimWallParams_Wall_Default_traits::create (i, f, this));

            this->SimWallParams_Wall_Default_.push_back (r);
            continue;
          }

          // SimWallType_Wall_Default
          //
          if (n.name () == "SimWallType_Wall_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWallType_Wall_Default_type > r (
              SimWallType_Wall_Default_traits::create (i, f, this));

            this->SimWallType_Wall_Default_.push_back (r);
            continue;
          }

          // SimWindow_ComplexFenestration_ThermoChromic
          //
          if (n.name () == "SimWindow_ComplexFenestration_ThermoChromic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_ComplexFenestration_ThermoChromic_type > r (
              SimWindow_ComplexFenestration_ThermoChromic_traits::create (i, f, this));

            this->SimWindow_ComplexFenestration_ThermoChromic_.push_back (r);
            continue;
          }

          // SimWindow_Skylight_Exterior
          //
          if (n.name () == "SimWindow_Skylight_Exterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_Skylight_Exterior_type > r (
              SimWindow_Skylight_Exterior_traits::create (i, f, this));

            this->SimWindow_Skylight_Exterior_.push_back (r);
            continue;
          }

          // SimWindow_Skylight_ExteriorDetailed
          //
          if (n.name () == "SimWindow_Skylight_ExteriorDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_Skylight_ExteriorDetailed_type > r (
              SimWindow_Skylight_ExteriorDetailed_traits::create (i, f, this));

            this->SimWindow_Skylight_ExteriorDetailed_.push_back (r);
            continue;
          }

          // SimWindow_Window_Default
          //
          if (n.name () == "SimWindow_Window_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_Window_Default_type > r (
              SimWindow_Window_Default_traits::create (i, f, this));

            this->SimWindow_Window_Default_.push_back (r);
            continue;
          }

          // SimWindow_Window_Exterior
          //
          if (n.name () == "SimWindow_Window_Exterior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_Window_Exterior_type > r (
              SimWindow_Window_Exterior_traits::create (i, f, this));

            this->SimWindow_Window_Exterior_.push_back (r);
            continue;
          }

          // SimWindow_Window_ExteriorDetailed
          //
          if (n.name () == "SimWindow_Window_ExteriorDetailed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_Window_ExteriorDetailed_type > r (
              SimWindow_Window_ExteriorDetailed_traits::create (i, f, this));

            this->SimWindow_Window_ExteriorDetailed_.push_back (r);
            continue;
          }

          // SimWindow_Window_Interior
          //
          if (n.name () == "SimWindow_Window_Interior" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindow_Window_Interior_type > r (
              SimWindow_Window_Interior_traits::create (i, f, this));

            this->SimWindow_Window_Interior_.push_back (r);
            continue;
          }

          // SimWindowArrayParams_WindowArray_Default
          //
          if (n.name () == "SimWindowArrayParams_WindowArray_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindowArrayParams_WindowArray_Default_type > r (
              SimWindowArrayParams_WindowArray_Default_traits::create (i, f, this));

            this->SimWindowArrayParams_WindowArray_Default_.push_back (r);
            continue;
          }

          // SimWindowLiningProps_WindowLiningProps_Default
          //
          if (n.name () == "SimWindowLiningProps_WindowLiningProps_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindowLiningProps_WindowLiningProps_Default_type > r (
              SimWindowLiningProps_WindowLiningProps_Default_traits::create (i, f, this));

            this->SimWindowLiningProps_WindowLiningProps_Default_.push_back (r);
            continue;
          }

          // SimWindowPanelProps_WindowPanelProps_Default
          //
          if (n.name () == "SimWindowPanelProps_WindowPanelProps_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindowPanelProps_WindowPanelProps_Default_type > r (
              SimWindowPanelProps_WindowPanelProps_Default_traits::create (i, f, this));

            this->SimWindowPanelProps_WindowPanelProps_Default_.push_back (r);
            continue;
          }

          // SimWindowParams_Window_Default
          //
          if (n.name () == "SimWindowParams_Window_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindowParams_Window_Default_type > r (
              SimWindowParams_Window_Default_traits::create (i, f, this));

            this->SimWindowParams_Window_Default_.push_back (r);
            continue;
          }

          // SimWindowType_Window_Default
          //
          if (n.name () == "SimWindowType_Window_Default" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/Model")
          {
            ::std::auto_ptr< SimWindowType_Window_Default_type > r (
              SimWindowType_Window_Default_traits::create (i, f, this));

            this->SimWindowType_Window_Default_.push_back (r);
            continue;
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "SimModelVersion" && n.namespace_ ().empty ())
          {
            this->SimModelVersion_.set (SimModelVersion_traits::create (i, f, this));
            continue;
          }

          if (n.name () == "SimModelSchemaVersion" && n.namespace_ ().empty ())
          {
            this->SimModelSchemaVersion_.set (SimModelSchemaVersion_traits::create (i, f, this));
            continue;
          }

          if (n.name () == "SimModelUnitsVersion" && n.namespace_ ().empty ())
          {
            this->SimModelUnitsVersion_.set (SimModelUnitsVersion_traits::create (i, f, this));
            continue;
          }

          if (n.name () == "SimModelUnitDefaultsVersion" && n.namespace_ ().empty ())
          {
            this->SimModelUnitDefaultsVersion_.set (SimModelUnitDefaultsVersion_traits::create (i, f, this));
            continue;
          }

          if (n.name () == "SimModelSchemaIDKey" && n.namespace_ ().empty ())
          {
            this->SimModelSchemaIDKey_.set (SimModelSchemaIDKey_traits::create (i, f, this));
            continue;
          }
        }
      }

      SimModel* SimModel::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimModel (*this, f, c);
      }

      SimModel& SimModel::
      operator= (const SimModel& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::type& > (*this) = x;
          this->SimActor_Actor_Default_ = x.SimActor_Actor_Default_;
          this->SimActor_Actor_SpaceOccupant_ = x.SimActor_Actor_SpaceOccupant_;
          this->SimActuator_DamperActuator_Default_ = x.SimActuator_DamperActuator_Default_;
          this->SimActuator_Default_Default_ = x.SimActuator_Default_Default_;
          this->SimActuator_ElectricalRotor_Default_ = x.SimActuator_ElectricalRotor_Default_;
          this->SimActuator_ValveActuator_Default_ = x.SimActuator_ValveActuator_Default_;
          this->SimActuator_VirtualActuator_EmsActuator_ = x.SimActuator_VirtualActuator_EmsActuator_;
          this->SimAddress_Postal_Default_ = x.SimAddress_Postal_Default_;
          this->SimAddress_Telecom_Default_ = x.SimAddress_Telecom_Default_;
          this->SimAdjacentSiteParams_AdjacentSite_Default_ = x.SimAdjacentSiteParams_AdjacentSite_Default_;
          this->SimAnalyticalRepresentation_AnalyticalRepresentation_Default_ = x.SimAnalyticalRepresentation_AnalyticalRepresentation_Default_;
          this->SimAppLanguageDefault_AppLanguageDefault_Default_ = x.SimAppLanguageDefault_AppLanguageDefault_Default_;
          this->SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_ = x.SimAppLibraryDefault_AppLibraryDefault_EnterpriseLibrary_;
          this->SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_ = x.SimAppLibraryDefault_AppLibraryDefault_GlobalLibrary_;
          this->SimAppLibraryDefault_AppLibraryDefault_UserLibrary_ = x.SimAppLibraryDefault_AppLibraryDefault_UserLibrary_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Building_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_BuildingStory_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomOpenings_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_CustomSpaces_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Glazing_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_OtherSettings_;
          this->SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_ = x.SimAppMdlCreatorDefaults_AppMdlCreatorDefaults_Site_;
          this->SimAppObjNameDefault_BldgComponentGroup_HvacComponent_ = x.SimAppObjNameDefault_BldgComponentGroup_HvacComponent_;
          this->SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_ = x.SimAppObjNameDefault_BldgComponentGroup_HvacComponentGroup_;
          this->SimAppObjNameDefault_DistributionSystem_Default_ = x.SimAppObjNameDefault_DistributionSystem_Default_;
          this->SimAppObjNameDefault_DistributionSystem_HvacAirLoop_ = x.SimAppObjNameDefault_DistributionSystem_HvacAirLoop_;
          this->SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_ = x.SimAppObjNameDefault_DistributionSystem_HvacChilledWaterLoop_;
          this->SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_ = x.SimAppObjNameDefault_DistributionSystem_HvacCondenserLoop_;
          this->SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_ = x.SimAppObjNameDefault_DistributionSystem_HvacHotWaterLoop_;
          this->SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_ = x.SimAppObjNameDefault_DistributionSystem_HvacSteamLoop_;
          this->SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_ = x.SimAppObjNameDefault_DistributionSystem_MixedWaterLoop_;
          this->SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_ = x.SimAppObjNameDefault_DistributionSystem_RefrigerationLoop_;
          this->SimAppObjNameDefault_DistributionSystem_ServiceHotWater_ = x.SimAppObjNameDefault_DistributionSystem_ServiceHotWater_;
          this->SimAppObjNameDefault_DistributionSystem_SitePowerDemand_ = x.SimAppObjNameDefault_DistributionSystem_SitePowerDemand_;
          this->SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_ = x.SimAppObjNameDefault_DistributionSystem_SitePowerGeneration_;
          this->SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_ = x.SimAppObjNameDefault_DistributionSystem_VarRefrigerantFlow_;
          this->SimAppObjNameDefault_OtherSystem_Default_ = x.SimAppObjNameDefault_OtherSystem_Default_;
          this->SimAppObjNameDefault_SiteContext_AdjacentSite_ = x.SimAppObjNameDefault_SiteContext_AdjacentSite_;
          this->SimAppObjNameDefault_SiteContext_SolarObstruction_ = x.SimAppObjNameDefault_SiteContext_SolarObstruction_;
          this->SimAppObjNameDefault_Space_CeilingPlenum_ = x.SimAppObjNameDefault_Space_CeilingPlenum_;
          this->SimAppObjNameDefault_Space_FloorPlenum_ = x.SimAppObjNameDefault_Space_FloorPlenum_;
          this->SimAppObjNameDefault_Space_Space_ = x.SimAppObjNameDefault_Space_Space_;
          this->SimAppObjNameDefault_SpatialContainer_Building_ = x.SimAppObjNameDefault_SpatialContainer_Building_;
          this->SimAppObjNameDefault_SpatialContainer_BuildingStory_ = x.SimAppObjNameDefault_SpatialContainer_BuildingStory_;
          this->SimAppObjNameDefault_SpatialContainer_Project_ = x.SimAppObjNameDefault_SpatialContainer_Project_;
          this->SimAppObjNameDefault_SpatialContainer_Site_ = x.SimAppObjNameDefault_SpatialContainer_Site_;
          this->SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_ = x.SimAppObjNameDefault_SpatialZone_CeilingPlenumZone_;
          this->SimAppObjNameDefault_SpatialZone_FloorPlenumZone_ = x.SimAppObjNameDefault_SpatialZone_FloorPlenumZone_;
          this->SimAppObjNameDefault_SpatialZone_PlenumZone_ = x.SimAppObjNameDefault_SpatialZone_PlenumZone_;
          this->SimAppObjNameDefault_SpatialZone_ThermalZone_ = x.SimAppObjNameDefault_SpatialZone_ThermalZone_;
          this->SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_ = x.SimAppObjNameDefault_ZoneGroup_CeilingPlenumZoneGroup_;
          this->SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_ = x.SimAppObjNameDefault_ZoneGroup_DaylightingZoneGroup_;
          this->SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_ = x.SimAppObjNameDefault_ZoneGroup_FloorPlenumZoneGroup_;
          this->SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_ = x.SimAppObjNameDefault_ZoneGroup_HvacEquipmentGroup_;
          this->SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_ = x.SimAppObjNameDefault_ZoneGroup_NatVentZoneGroup_;
          this->SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_ = x.SimAppObjNameDefault_ZoneGroup_ThermalZoneGroup_;
          this->SimAppPreferences_AppPreferences_AutoSave_ = x.SimAppPreferences_AppPreferences_AutoSave_;
          this->SimAppPreferences_AppPreferences_AutoSaveInterval_ = x.SimAppPreferences_AppPreferences_AutoSaveInterval_;
          this->SimAppPreferences_AppPreferences_EPlusInstalPath_ = x.SimAppPreferences_AppPreferences_EPlusInstalPath_;
          this->SimAppPreferences_AppPreferences_EPlusInstalVersion_ = x.SimAppPreferences_AppPreferences_EPlusInstalVersion_;
          this->SimAppPreferences_AppPreferences_MinMonthlyChargeType_ = x.SimAppPreferences_AppPreferences_MinMonthlyChargeType_;
          this->SimAppPreferences_AppPreferences_MonthlyChargeType_ = x.SimAppPreferences_AppPreferences_MonthlyChargeType_;
          this->SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_ = x.SimAppStdSbdDefaults_AppStdSbdDefaults_DesignTeam_;
          this->SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_ = x.SimAppStdSbdDefaults_AppStdSbdDefaults_ExceptionalConditions_;
          this->SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_ = x.SimAppStdSbdDefaults_AppStdSbdDefaults_NonComplyAnalysis_;
          this->SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_ = x.SimAppStdSbdDefaults_AppStdSbdDefaults_ProjectData_;
          this->SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_ = x.SimAppStdT24Defaults_AppStdT24Defaults_DesignTeam_;
          this->SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_ = x.SimAppStdT24Defaults_AppStdT24Defaults_ExceptionalConditions_;
          this->SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_ = x.SimAppStdT24Defaults_AppStdT24Defaults_NonComplyAnalysis_;
          this->SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_ = x.SimAppStdT24Defaults_AppStdT24Defaults_ProjectData_;
          this->SimAppUnitDefault_AppUnitDefault_DatabaseDefault_ = x.SimAppUnitDefault_AppUnitDefault_DatabaseDefault_;
          this->SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_ = x.SimAppUnitDefault_AppUnitDefault_UserDisplayPreference_;
          this->SimArbitraryProfileDef_ArbitraryProfile_Closed_ = x.SimArbitraryProfileDef_ArbitraryProfile_Closed_;
          this->SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_ = x.SimArbitraryProfileDef_ArbitraryProfile_ClosedWithVoids_;
          this->SimArbitraryProfileDef_ArbitraryProfile_Open_ = x.SimArbitraryProfileDef_ArbitraryProfile_Open_;
          this->SimArrayParams_ArrayParams_Default_ = x.SimArrayParams_ArrayParams_Default_;
          this->SimArrayParams_BldgElementArray_Beam_ = x.SimArrayParams_BldgElementArray_Beam_;
          this->SimArrayParams_BldgElementArray_Column_ = x.SimArrayParams_BldgElementArray_Column_;
          this->SimArrayParams_BldgElementArray_Default_ = x.SimArrayParams_BldgElementArray_Default_;
          this->SimArrayParams_DoorArray_Default_ = x.SimArrayParams_DoorArray_Default_;
          this->SimArrayParams_PanelArrayParams_Default_ = x.SimArrayParams_PanelArrayParams_Default_;
          this->SimArrayParams_SolarShadeArray_Default_ = x.SimArrayParams_SolarShadeArray_Default_;
          this->SimArrayParams_WindowArray_Default_ = x.SimArrayParams_WindowArray_Default_;
          this->SimBeam_Default_Default_ = x.SimBeam_Default_Default_;
          this->SimBeamParams_Beam_Default_ = x.SimBeamParams_Beam_Default_;
          this->SimBeamType_Beam_Default_ = x.SimBeamType_Beam_Default_;
          this->SimBldgElementArrayParams_BldgElementArray_Beam_ = x.SimBldgElementArrayParams_BldgElementArray_Beam_;
          this->SimBldgElementArrayParams_BldgElementArray_Column_ = x.SimBldgElementArrayParams_BldgElementArray_Column_;
          this->SimBldgElementArrayParams_BldgElementArray_Default_ = x.SimBldgElementArrayParams_BldgElementArray_Default_;
          this->SimBldgElementType_BldgElementProxy_Default_ = x.SimBldgElementType_BldgElementProxy_Default_;
          this->SimBldgElementType_Default_Default_ = x.SimBldgElementType_Default_Default_;
          this->SimBldgElementType_ElectricalTerminal_Default_ = x.SimBldgElementType_ElectricalTerminal_Default_;
          this->SimBldgElementType_HumanTransport_Default_ = x.SimBldgElementType_HumanTransport_Default_;
          this->SimBldgElementType_PlumbingFixture_Default_ = x.SimBldgElementType_PlumbingFixture_Default_;
          this->SimBldgElementType_Railing_Default_ = x.SimBldgElementType_Railing_Default_;
          this->SimBldgElementType_Ramp_Default_ = x.SimBldgElementType_Ramp_Default_;
          this->SimBldgElementType_RampFlight_Default_ = x.SimBldgElementType_RampFlight_Default_;
          this->SimBldgElementType_Stair_Default_ = x.SimBldgElementType_Stair_Default_;
          this->SimBldgElementType_StairFlight_Default_ = x.SimBldgElementType_StairFlight_Default_;
          this->SimBldgElementType_VirtualElement_Default_ = x.SimBldgElementType_VirtualElement_Default_;
          this->SimBldgParams_Building_Default_ = x.SimBldgParams_Building_Default_;
          this->SimBldgSiteParams_BuildingSite_Default_ = x.SimBldgSiteParams_BuildingSite_Default_;
          this->SimBldgStoryParams_BuildingStory_Default_ = x.SimBldgStoryParams_BuildingStory_Default_;
          this->SimBldgStoryType_BuildingStory_Default_ = x.SimBldgStoryType_BuildingStory_Default_;
          this->SimBuilding_AdjacentBuilding_Default_ = x.SimBuilding_AdjacentBuilding_Default_;
          this->SimBuilding_Building_Default_ = x.SimBuilding_Building_Default_;
          this->SimBuildingElementProxy_Default_Default_ = x.SimBuildingElementProxy_Default_Default_;
          this->SimBuildingElementProxy_SiteContextElement_BuildingShading_ = x.SimBuildingElementProxy_SiteContextElement_BuildingShading_;
          this->SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_ = x.SimBuildingElementProxy_SiteContextElement_BuildingShadingDetailed_;
          this->SimBuildingElementProxy_SiteContextElement_Default_ = x.SimBuildingElementProxy_SiteContextElement_Default_;
          this->SimBuildingElementProxy_SiteContextElement_GroundPlane_ = x.SimBuildingElementProxy_SiteContextElement_GroundPlane_;
          this->SimBuildingElementProxy_SiteContextElement_SiteShading_ = x.SimBuildingElementProxy_SiteContextElement_SiteShading_;
          this->SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_ = x.SimBuildingElementProxy_SiteContextElement_SiteShadingDetailed_;
          this->SimBuildingElementProxy_ThermalMass_Default_ = x.SimBuildingElementProxy_ThermalMass_Default_;
          this->SimBuildingStory_BuildingStory_Default_ = x.SimBuildingStory_BuildingStory_Default_;
          this->SimBuildingType_Building_Default_ = x.SimBuildingType_Building_Default_;
          this->SimCalendarDate_Default_Default_ = x.SimCalendarDate_Default_Default_;
          this->SimCartesianTransformOperator_2D_NonUniform_ = x.SimCartesianTransformOperator_2D_NonUniform_;
          this->SimCartesianTransformOperator_2D_Uniform_ = x.SimCartesianTransformOperator_2D_Uniform_;
          this->SimCartesianTransformOperator_3D_NonUniform_ = x.SimCartesianTransformOperator_3D_NonUniform_;
          this->SimCartesianTransformOperator_3D_Uniform_ = x.SimCartesianTransformOperator_3D_Uniform_;
          this->SimClassification_ClassificationReference_BuildingElementClassification_ = x.SimClassification_ClassificationReference_BuildingElementClassification_;
          this->SimClassification_ClassificationReference_ConstructionEntityByFunction_ = x.SimClassification_ClassificationReference_ConstructionEntityByFunction_;
          this->SimClassification_ClassificationReference_Default_ = x.SimClassification_ClassificationReference_Default_;
          this->SimClassification_ClassificationReference_OrganizationalBillingID_ = x.SimClassification_ClassificationReference_OrganizationalBillingID_;
          this->SimClassification_ClassificationReference_OrganizationalID_ = x.SimClassification_ClassificationReference_OrganizationalID_;
          this->SimClassification_ClassificationReference_SpaceByFunction_ = x.SimClassification_ClassificationReference_SpaceByFunction_;
          this->SimClassification_ClassificationReference_SpaceCategoryBoma_ = x.SimClassification_ClassificationReference_SpaceCategoryBoma_;
          this->SimClassification_ClassificationReference_SpaceCategoryOwner_ = x.SimClassification_ClassificationReference_SpaceCategoryOwner_;
          this->SimClassification_ClassificationReference_SpaceTypeOwner_ = x.SimClassification_ClassificationReference_SpaceTypeOwner_;
          this->SimClassification_ClassificationReference_SpatialZoneEnergyType_ = x.SimClassification_ClassificationReference_SpatialZoneEnergyType_;
          this->SimClassification_ClassificationReference_SpatialZoneSecurityLevel_ = x.SimClassification_ClassificationReference_SpatialZoneSecurityLevel_;
          this->SimClassification_ClassificationReference_SpatialZoneType_ = x.SimClassification_ClassificationReference_SpatialZoneType_;
          this->SimClassification_ClassificationReference_SubOrganizationalID_ = x.SimClassification_ClassificationReference_SubOrganizationalID_;
          this->SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_ = x.SimClassification_ClassificationSystem_BomaSpaceCategoryClassification_;
          this->SimClassification_ClassificationSystem_Default_ = x.SimClassification_ClassificationSystem_Default_;
          this->SimClassification_ClassificationSystem_MasterFormat_ = x.SimClassification_ClassificationSystem_MasterFormat_;
          this->SimClassification_ClassificationSystem_OmniClass_ = x.SimClassification_ClassificationSystem_OmniClass_;
          this->SimClassification_ClassificationSystem_OwnerOrganizationalClassification_ = x.SimClassification_ClassificationSystem_OwnerOrganizationalClassification_;
          this->SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_ = x.SimClassification_ClassificationSystem_OwnerSecurityLevelClassification_;
          this->SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_ = x.SimClassification_ClassificationSystem_OwnerSelectedEnergyAnalysisClassification_;
          this->SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_ = x.SimClassification_ClassificationSystem_OwnerSpaceCategoryClassification_;
          this->SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_ = x.SimClassification_ClassificationSystem_OwnerSpaceTypeClassification_;
          this->SimClassification_ClassificationSystem_OwnerZoneTypeClassification_ = x.SimClassification_ClassificationSystem_OwnerZoneTypeClassification_;
          this->SimClassification_ClassificationSystem_Uniformat_ = x.SimClassification_ClassificationSystem_Uniformat_;
          this->SimColumn_Embedded_Default_ = x.SimColumn_Embedded_Default_;
          this->SimColumn_Freestanding_Default_ = x.SimColumn_Freestanding_Default_;
          this->SimColumnParams_Column_Default_ = x.SimColumnParams_Column_Default_;
          this->SimColumnType_Column_Default_ = x.SimColumnType_Column_Default_;
          this->SimComplexProperty_ComplexProp_Default_ = x.SimComplexProperty_ComplexProp_Default_;
          this->SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_ = x.SimComplianceRefModel_ASHRAE90_1_Appdx_G_Default_;
          this->SimCompositeProfileDef_CompositeProfile_Default_ = x.SimCompositeProfileDef_CompositeProfile_Default_;
          this->SimConnectCurveGeom_Curve_Default_ = x.SimConnectCurveGeom_Curve_Default_;
          this->SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_ = x.SimConnectedFaceSet_ConnectedFaceSet_ClosedShell_;
          this->SimConnectedFaceSet_ConnectedFaceSet_Default_ = x.SimConnectedFaceSet_ConnectedFaceSet_Default_;
          this->SimConnectedFaceSet_ConnectedFaceSet_OpenShell_ = x.SimConnectedFaceSet_ConnectedFaceSet_OpenShell_;
          this->SimConnection_AirFlow_CrossSystem_ = x.SimConnection_AirFlow_CrossSystem_;
          this->SimConnection_AirFlow_Default_ = x.SimConnection_AirFlow_Default_;
          this->SimConnection_AirFlow_Linkage_ = x.SimConnection_AirFlow_Linkage_;
          this->SimConnection_AirFlowNetwork_Default_ = x.SimConnection_AirFlowNetwork_Default_;
          this->SimConnection_ChilledWaterFlow_CrossSystem_ = x.SimConnection_ChilledWaterFlow_CrossSystem_;
          this->SimConnection_ChilledWaterFlow_Default_ = x.SimConnection_ChilledWaterFlow_Default_;
          this->SimConnection_CondenserFlow_CrossSystem_ = x.SimConnection_CondenserFlow_CrossSystem_;
          this->SimConnection_CondenserFlow_Default_ = x.SimConnection_CondenserFlow_Default_;
          this->SimConnection_Default_Default_ = x.SimConnection_Default_Default_;
          this->SimConnection_DigitalControl_Default_ = x.SimConnection_DigitalControl_Default_;
          this->SimConnection_Docking_Default_ = x.SimConnection_Docking_Default_;
          this->SimConnection_ElectricalPowerFlow_Default_ = x.SimConnection_ElectricalPowerFlow_Default_;
          this->SimConnection_HotWaterFlow_CrossSystem_ = x.SimConnection_HotWaterFlow_CrossSystem_;
          this->SimConnection_HotWaterFlow_Default_ = x.SimConnection_HotWaterFlow_Default_;
          this->SimConnection_MixedWaterFlow_CrossSystem_ = x.SimConnection_MixedWaterFlow_CrossSystem_;
          this->SimConnection_MixedWaterFlow_Default_ = x.SimConnection_MixedWaterFlow_Default_;
          this->SimConnection_RefrigerantFlow_Default_ = x.SimConnection_RefrigerantFlow_Default_;
          this->SimConnection_ServiceHotWaterFlow_CrossSystem_ = x.SimConnection_ServiceHotWaterFlow_CrossSystem_;
          this->SimConnection_ServiceHotWaterFlow_Default_ = x.SimConnection_ServiceHotWaterFlow_Default_;
          this->SimConnection_SteamFlow_CrossSystem_ = x.SimConnection_SteamFlow_CrossSystem_;
          this->SimConnection_SteamFlow_Default_ = x.SimConnection_SteamFlow_Default_;
          this->SimConnection_VarRefrigerantFlow_Default_ = x.SimConnection_VarRefrigerantFlow_Default_;
          this->SimConnection_ZoneAirFlow_Default_ = x.SimConnection_ZoneAirFlow_Default_;
          this->SimConnection_ZoneAirFlow_ZoneCrossMixing_ = x.SimConnection_ZoneAirFlow_ZoneCrossMixing_;
          this->SimConnection_ZoneAirFlow_ZoneMixing_ = x.SimConnection_ZoneAirFlow_ZoneMixing_;
          this->SimConnectPointGeom_Point_Default_ = x.SimConnectPointGeom_Point_Default_;
          this->SimConnectPortGeom_Port_Default_ = x.SimConnectPortGeom_Port_Default_;
          this->SimConnectSurfaceGeom_Surface_Default_ = x.SimConnectSurfaceGeom_Surface_Default_;
          this->SimController_AvailabilityManager_AirLoop_ = x.SimController_AvailabilityManager_AirLoop_;
          this->SimController_AvailabilityManager_PlantLoop_ = x.SimController_AvailabilityManager_PlantLoop_;
          this->SimController_Daylighting_DELight_ = x.SimController_Daylighting_DELight_;
          this->SimController_Daylighting_Skylights_ = x.SimController_Daylighting_Skylights_;
          this->SimController_Daylighting_Standard_ = x.SimController_Daylighting_Standard_;
          this->SimController_Daylighting_Windows_ = x.SimController_Daylighting_Windows_;
          this->SimController_Default_Default_ = x.SimController_Default_Default_;
          this->SimController_DemandManager_AirLoop_ = x.SimController_DemandManager_AirLoop_;
          this->SimController_LightingControl_Continuous_ = x.SimController_LightingControl_Continuous_;
          this->SimController_LightingControl_ContinuousOff_ = x.SimController_LightingControl_ContinuousOff_;
          this->SimController_LightingControl_MotionSensor_ = x.SimController_LightingControl_MotionSensor_;
          this->SimController_LightingControl_On_Off_ = x.SimController_LightingControl_On_Off_;
          this->SimController_LightingControl_Stepped_ = x.SimController_LightingControl_Stepped_;
          this->SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_ = x.SimController_MechanicalVentilation_EconomizerWithDemandControlledVentilation_;
          this->SimController_OperationManager_CondenserLoop_ = x.SimController_OperationManager_CondenserLoop_;
          this->SimController_OperationManager_PlantLoop_ = x.SimController_OperationManager_PlantLoop_;
          this->SimController_OutdoorAir_EconomizerControl_ = x.SimController_OutdoorAir_EconomizerControl_;
          this->SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_ = x.SimController_OutdoorAir_EconomizerWithDemandControlledVentilation_;
          this->SimController_OutdoorAir_OutdoorAirPreconditioningController_ = x.SimController_OutdoorAir_OutdoorAirPreconditioningController_;
          this->SimController_Programmable_Default_ = x.SimController_Programmable_Default_;
          this->SimController_ShadingControl_Heating_CoolingLoads_ = x.SimController_ShadingControl_Heating_CoolingLoads_;
          this->SimController_ShadingControl_On_Off_ = x.SimController_ShadingControl_On_Off_;
          this->SimController_ShadingControl_WindowTemp_Solar_ = x.SimController_ShadingControl_WindowTemp_Solar_;
          this->SimController_SupplyAir_Humidity_ = x.SimController_SupplyAir_Humidity_;
          this->SimController_SupplyAir_Temperature_ = x.SimController_SupplyAir_Temperature_;
          this->SimController_SupplyWater_Temperature_ = x.SimController_SupplyWater_Temperature_;
          this->SimController_ThermalStorage_ThermalEnergyStorageTank_ = x.SimController_ThermalStorage_ThermalEnergyStorageTank_;
          this->SimController_Ventilation_ContaminantControl_ = x.SimController_Ventilation_ContaminantControl_;
          this->SimController_WaterCoil_Default_ = x.SimController_WaterCoil_Default_;
          this->SimController_ZoneControlHumidity_Humidistat_ = x.SimController_ZoneControlHumidity_Humidistat_;
          this->SimController_ZoneControlHumidity_Humidistat1Zone_ = x.SimController_ZoneControlHumidity_Humidistat1Zone_;
          this->SimController_ZoneControlTemperature_Thermostat_ = x.SimController_ZoneControlTemperature_Thermostat_;
          this->SimController_ZoneControlTemperature_Thermostat1Zone_ = x.SimController_ZoneControlTemperature_Thermostat1Zone_;
          this->SimController_ZoneControlTemperature_ThermostatStagedDual_ = x.SimController_ZoneControlTemperature_ThermostatStagedDual_;
          this->SimController_ZoneControlTemperature_ThermostatThermalComfort_ = x.SimController_ZoneControlTemperature_ThermostatThermalComfort_;
          this->SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_ = x.SimController_ZoneControlTemperature_ThermostatThermalComfort1Zone_;
          this->SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_ = x.SimControlScheme_AvailabilityManagerScheme_DifferentialThermostat_;
          this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_ = x.SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOff_;
          this->SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_ = x.SimControlScheme_AvailabilityManagerScheme_HighTemperatureTurnOn_;
          this->SimControlScheme_AvailabilityManagerScheme_HybridVentilation_ = x.SimControlScheme_AvailabilityManagerScheme_HybridVentilation_;
          this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_ = x.SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOff_;
          this->SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_ = x.SimControlScheme_AvailabilityManagerScheme_LowTemperatureTurnOn_;
          this->SimControlScheme_AvailabilityManagerScheme_NightCycle_ = x.SimControlScheme_AvailabilityManagerScheme_NightCycle_;
          this->SimControlScheme_AvailabilityManagerScheme_NightVentilation_ = x.SimControlScheme_AvailabilityManagerScheme_NightVentilation_;
          this->SimControlScheme_AvailabilityManagerScheme_OptimumStart_ = x.SimControlScheme_AvailabilityManagerScheme_OptimumStart_;
          this->SimControlScheme_AvailabilityManagerScheme_Scheduled_ = x.SimControlScheme_AvailabilityManagerScheme_Scheduled_;
          this->SimControlScheme_AvailabilityManagerScheme_ScheduledOff_ = x.SimControlScheme_AvailabilityManagerScheme_ScheduledOff_;
          this->SimControlScheme_AvailabilityManagerScheme_ScheduledOn_ = x.SimControlScheme_AvailabilityManagerScheme_ScheduledOn_;
          this->SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_ = x.SimControlScheme_ControlAndSequencingScheme_ComponentSetpoint_;
          this->SimControlScheme_ControlAndSequencingScheme_CoolingLoad_ = x.SimControlScheme_ControlAndSequencingScheme_CoolingLoad_;
          this->SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_ = x.SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter_;
          this->SimControlScheme_ControlAndSequencingScheme_HeatingLoad_ = x.SimControlScheme_ControlAndSequencingScheme_HeatingLoad_;
          this->SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_ = x.SimControlScheme_ControlAndSequencingScheme_OurdoorRelativeHumidity_;
          this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_ = x.SimControlScheme_ControlAndSequencingScheme_OutdoorDewpoint_;
          this->SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_ = x.SimControlScheme_ControlAndSequencingScheme_OutdoorDewpointDifference_;
          this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_ = x.SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulb_;
          this->SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_ = x.SimControlScheme_ControlAndSequencingScheme_OutdoorDryBulbDifference_;
          this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_ = x.SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulb_;
          this->SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_ = x.SimControlScheme_ControlAndSequencingScheme_OutdoorWetBulbDifference_;
          this->SimControlScheme_ControlAndSequencingScheme_Uncontrolled_ = x.SimControlScheme_ControlAndSequencingScheme_Uncontrolled_;
          this->SimControlScheme_ControlAndSequencingScheme_UserDefined_ = x.SimControlScheme_ControlAndSequencingScheme_UserDefined_;
          this->SimControlScheme_DemandManagerScheme_ElectricEquipment_ = x.SimControlScheme_DemandManagerScheme_ElectricEquipment_;
          this->SimControlScheme_DemandManagerScheme_ExteriorLights_ = x.SimControlScheme_DemandManagerScheme_ExteriorLights_;
          this->SimControlScheme_DemandManagerScheme_Lights_ = x.SimControlScheme_DemandManagerScheme_Lights_;
          this->SimControlScheme_DemandManagerScheme_Thermostats_ = x.SimControlScheme_DemandManagerScheme_Thermostats_;
          this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_ = x.SimControlScheme_EnergyManagementScheme_EnergyMgmtSysConstructionIndexVariable_;
          this->SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_ = x.SimControlScheme_EnergyManagementScheme_EnergyMgmtSysCurveOrTableIndexVariable_;
          this->SimControlScheme_EnergyManagementScheme_GlobalVairable_ = x.SimControlScheme_EnergyManagementScheme_GlobalVairable_;
          this->SimControlScheme_EnergyManagementScheme_InternalVariable_ = x.SimControlScheme_EnergyManagementScheme_InternalVariable_;
          this->SimControlScheme_EnergyManagementScheme_OutputVariable_ = x.SimControlScheme_EnergyManagementScheme_OutputVariable_;
          this->SimControlScheme_EnergyManagementScheme_Program_ = x.SimControlScheme_EnergyManagementScheme_Program_;
          this->SimControlScheme_EnergyManagementScheme_ProgramCallingManager_ = x.SimControlScheme_EnergyManagementScheme_ProgramCallingManager_;
          this->SimControlScheme_EnergyManagementScheme_Subroutine_ = x.SimControlScheme_EnergyManagementScheme_Subroutine_;
          this->SimControlScheme_EnergyManagementScheme_TrendVariable_ = x.SimControlScheme_EnergyManagementScheme_TrendVariable_;
          this->SimControlScheme_ExternalInterfaceExport_FromVariable_ = x.SimControlScheme_ExternalInterfaceExport_FromVariable_;
          this->SimControlScheme_ExternalInterfaceExport_ToActuator_ = x.SimControlScheme_ExternalInterfaceExport_ToActuator_;
          this->SimControlScheme_ExternalInterfaceExport_ToSchedule_ = x.SimControlScheme_ExternalInterfaceExport_ToSchedule_;
          this->SimControlScheme_ExternalInterfaceExport_ToVariable_ = x.SimControlScheme_ExternalInterfaceExport_ToVariable_;
          this->SimControlScheme_ExternalInterfaceImport_Default_ = x.SimControlScheme_ExternalInterfaceImport_Default_;
          this->SimControlScheme_ExternalInterfaceImport_FromVariable_ = x.SimControlScheme_ExternalInterfaceImport_FromVariable_;
          this->SimControlScheme_ExternalInterfaceImport_ToActuator_ = x.SimControlScheme_ExternalInterfaceImport_ToActuator_;
          this->SimControlScheme_ExternalInterfaceImport_ToSchedule_ = x.SimControlScheme_ExternalInterfaceImport_ToSchedule_;
          this->SimControlScheme_ExternalInterfaceImport_ToVariable_ = x.SimControlScheme_ExternalInterfaceImport_ToVariable_;
          this->SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_ = x.SimControlScheme_OperatingScheme_CoolingLoadBasedOperationScheme_;
          this->SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_ = x.SimControlScheme_OperatingScheme_HeatingLoadBasedOperationShceme_;
          this->SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorDewPointBasedOperationScheme_;
          this->SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorDewPointBulbDifferenceOperationScheme_;
          this->SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorDryBulbBasedOperationScheme_;
          this->SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorDryBulbDifferenceOperationScheme_;
          this->SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorRelativeHumidityBasedOperationScheme_;
          this->SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorWetBulbBasedOperationScheme_;
          this->SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_ = x.SimControlScheme_OperatingScheme_OutdoorWetBulbDifferenceOperationScheme_;
          this->SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_ = x.SimControlScheme_OperatingScheme_PlantEquipmentOperationComponentSetpoint_;
          this->SimControlScheme_OperatingScheme_UncontrolledOperationScheme_ = x.SimControlScheme_OperatingScheme_UncontrolledOperationScheme_;
          this->SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_ = x.SimControlScheme_SetpointManagerScheme_AveragedMaximumZoneHumidity_;
          this->SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_ = x.SimControlScheme_SetpointManagerScheme_AveragedMinimumZoneHumidity_;
          this->SimControlScheme_SetpointManagerScheme_ColdestZoneReset_ = x.SimControlScheme_SetpointManagerScheme_ColdestZoneReset_;
          this->SimControlScheme_SetpointManagerScheme_DuctStaticPressure_ = x.SimControlScheme_SetpointManagerScheme_DuctStaticPressure_;
          this->SimControlScheme_SetpointManagerScheme_EnteringReset_ = x.SimControlScheme_SetpointManagerScheme_EnteringReset_;
          this->SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_ = x.SimControlScheme_SetpointManagerScheme_EnteringResetIdeal_;
          this->SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_ = x.SimControlScheme_SetpointManagerScheme_FollowGroundTemperature_;
          this->SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_ = x.SimControlScheme_SetpointManagerScheme_FollowOutdoorAirTemperature_;
          this->SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_ = x.SimControlScheme_SetpointManagerScheme_FollowSystemNodeTemperature_;
          this->SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_ = x.SimControlScheme_SetpointManagerScheme_LeastHumidZoneReset_;
          this->SimControlScheme_SetpointManagerScheme_MixedAir_ = x.SimControlScheme_SetpointManagerScheme_MixedAir_;
          this->SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_ = x.SimControlScheme_SetpointManagerScheme_MostHumidZoneReset_;
          this->SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_ = x.SimControlScheme_SetpointManagerScheme_OutdoorAirPretreat_;
          this->SimControlScheme_SetpointManagerScheme_OutdoorAirReset_ = x.SimControlScheme_SetpointManagerScheme_OutdoorAirReset_;
          this->SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_ = x.SimControlScheme_SetpointManagerScheme_ReturnAirBypassFlow_;
          this->SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_ = x.SimControlScheme_SetpointManagerScheme_ScheduledDualSetpoint_;
          this->SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_ = x.SimControlScheme_SetpointManagerScheme_ScheduledSetpoint_;
          this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_ = x.SimControlScheme_SetpointManagerScheme_SetpointManagerScheduled_;
          this->SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_ = x.SimControlScheme_SetpointManagerScheme_SetpointManagerScheduledDualSetpoint_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_Cooling_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_Heating_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_Heating_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Maximum_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_Humidity_Minimum_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_OneStageCooling_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_OneStageHeating_;
          this->SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_ = x.SimControlScheme_SetpointManagerScheme_SingleZone_Reheat_;
          this->SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_ = x.SimControlScheme_SetpointManagerScheme_WarmestTemperatureFlow_;
          this->SimControlScheme_SetpointManagerScheme_WarmestZoneReset_ = x.SimControlScheme_SetpointManagerScheme_WarmestZoneReset_;
          this->SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_ = x.SimControlScheme_SetpointManagerScheme_ZoneAverageCoolingLoadReset_;
          this->SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_ = x.SimControlScheme_SetpointManagerScheme_ZoneAverageHeatingLoadReset_;
          this->SimControlScheme_SetpointScheme_DualSetpoint_ = x.SimControlScheme_SetpointScheme_DualSetpoint_;
          this->SimControlScheme_SetpointScheme_SingleCooling_ = x.SimControlScheme_SetpointScheme_SingleCooling_;
          this->SimControlScheme_SetpointScheme_SingleHeating_ = x.SimControlScheme_SetpointScheme_SingleHeating_;
          this->SimControlScheme_SetpointScheme_SingleHeatingOrCooling_ = x.SimControlScheme_SetpointScheme_SingleHeatingOrCooling_;
          this->SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_ = x.SimControlScheme_SetpointScheme_ThermalComfortFangerDualSetpoint_;
          this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_ = x.SimControlScheme_SetpointScheme_ThermalComfortFangerSingleCooling_;
          this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_ = x.SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeating_;
          this->SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_ = x.SimControlScheme_SetpointScheme_ThermalComfortFangerSingleHeatingOrCooling_;
          this->SimCost_ComponentCost_Adjustments_ = x.SimCost_ComponentCost_Adjustments_;
          this->SimCost_ComponentCost_LineItem_ = x.SimCost_ComponentCost_LineItem_;
          this->SimCost_ComponentCost_Reference_ = x.SimCost_ComponentCost_Reference_;
          this->SimCost_Default_Default_ = x.SimCost_Default_Default_;
          this->SimCost_LifeCycleCost_NonrecurringCost_ = x.SimCost_LifeCycleCost_NonrecurringCost_;
          this->SimCost_LifeCycleCost_Parameters_ = x.SimCost_LifeCycleCost_Parameters_;
          this->SimCost_LifeCycleCost_RecurringCosts_ = x.SimCost_LifeCycleCost_RecurringCosts_;
          this->SimCost_LifeCycleCost_UseAdjustment_ = x.SimCost_LifeCycleCost_UseAdjustment_;
          this->SimCost_LifeCycleCost_UsePriceEscalation_ = x.SimCost_LifeCycleCost_UsePriceEscalation_;
          this->SimCost_UtilityCost_ChargeBlock_ = x.SimCost_UtilityCost_ChargeBlock_;
          this->SimCost_UtilityCost_ChargeSimple_ = x.SimCost_UtilityCost_ChargeSimple_;
          this->SimCost_UtilityCost_CostRatchet_ = x.SimCost_UtilityCost_CostRatchet_;
          this->SimCost_UtilityCost_CostVariable_ = x.SimCost_UtilityCost_CostVariable_;
          this->SimCost_UtilityCost_Qualify_ = x.SimCost_UtilityCost_Qualify_;
          this->SimCost_UtilityCost_Tariff_ = x.SimCost_UtilityCost_Tariff_;
          this->SimCurtainWall_CurtainWall_Default_ = x.SimCurtainWall_CurtainWall_Default_;
          this->SimCurtainWallParams_CurtainWall_Default_ = x.SimCurtainWallParams_CurtainWall_Default_;
          this->SimCurtainWallType_CurtainWall_Default_ = x.SimCurtainWallType_CurtainWall_Default_;
          this->SimCurveStyle_CurveStyle_Default_ = x.SimCurveStyle_CurveStyle_Default_;
          this->SimCurveStyle_CurveStyle_Font_ = x.SimCurveStyle_CurveStyle_Font_;
          this->SimCurveStyle_CurveStyle_FontAndScaling_ = x.SimCurveStyle_CurveStyle_FontAndScaling_;
          this->SimCurveStyle_CurveStyle_FontPattern_ = x.SimCurveStyle_CurveStyle_FontPattern_;
          this->SimDaylightingAssembly_DaylightingAssembly_LightShelf_ = x.SimDaylightingAssembly_DaylightingAssembly_LightShelf_;
          this->SimDaylightingAssembly_DaylightingAssembly_LightTube_ = x.SimDaylightingAssembly_DaylightingAssembly_LightTube_;
          this->SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_ = x.SimDaylightingAssembly_DaylightingAssembly_LightTubeFenSurface_;
          this->SimDaylightingAssembly_DaylightingAssembly_LightWell_ = x.SimDaylightingAssembly_DaylightingAssembly_LightWell_;
          this->SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_ = x.SimDaylightingAssembly_DaylightingAssembly_LightWellFenSurface_;
          this->SimDerivedUnitType_DerivedUnit_Default_ = x.SimDerivedUnitType_DerivedUnit_Default_;
          this->SimDistributionPort_AirFlowPort_Air_In_ = x.SimDistributionPort_AirFlowPort_Air_In_;
          this->SimDistributionPort_AirFlowPort_Air_InOrOut_ = x.SimDistributionPort_AirFlowPort_Air_InOrOut_;
          this->SimDistributionPort_AirFlowPort_Air_Out_ = x.SimDistributionPort_AirFlowPort_Air_Out_;
          this->SimDistributionPort_AirFlowPort_Default_ = x.SimDistributionPort_AirFlowPort_Default_;
          this->SimDistributionPort_AirFlowPort_ExhaustAir_Out_ = x.SimDistributionPort_AirFlowPort_ExhaustAir_Out_;
          this->SimDistributionPort_AirFlowPort_OutdoorAir_In_ = x.SimDistributionPort_AirFlowPort_OutdoorAir_In_;
          this->SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_ = x.SimDistributionPort_ChilledWaterFlowPort_CondensedWaterOut_;
          this->SimDistributionPort_ChilledWaterFlowPort_Default_ = x.SimDistributionPort_ChilledWaterFlowPort_Default_;
          this->SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_ = x.SimDistributionPort_ChilledWaterFlowPort_EvaporativeWaterIn_;
          this->SimDistributionPort_ChilledWaterFlowPort_Water_In_ = x.SimDistributionPort_ChilledWaterFlowPort_Water_In_;
          this->SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_ = x.SimDistributionPort_ChilledWaterFlowPort_Water_InOrOut_;
          this->SimDistributionPort_ChilledWaterFlowPort_Water_Out_ = x.SimDistributionPort_ChilledWaterFlowPort_Water_Out_;
          this->SimDistributionPort_CondenserFlowPort_CondenserFlow_In_ = x.SimDistributionPort_CondenserFlowPort_CondenserFlow_In_;
          this->SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_ = x.SimDistributionPort_CondenserFlowPort_CondenserFlow_InOrOut_;
          this->SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_ = x.SimDistributionPort_CondenserFlowPort_CondenserFlow_Out_;
          this->SimDistributionPort_CondenserFlowPort_Default_ = x.SimDistributionPort_CondenserFlowPort_Default_;
          this->SimDistributionPort_DigitalControl_AirLoop_Default_ = x.SimDistributionPort_DigitalControl_AirLoop_Default_;
          this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_AirLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_CHWLoop_Default_ = x.SimDistributionPort_DigitalControl_CHWLoop_Default_;
          this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_CHWLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_CWLoop_Default_ = x.SimDistributionPort_DigitalControl_CWLoop_Default_;
          this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_CWLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_HWLoop_Default_ = x.SimDistributionPort_DigitalControl_HWLoop_Default_;
          this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_HWLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_MxWLoop_Default_ = x.SimDistributionPort_DigitalControl_MxWLoop_Default_;
          this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_MxWLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_RFGLoop_Default_ = x.SimDistributionPort_DigitalControl_RFGLoop_Default_;
          this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_RFGLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_SHWLoop_Default_ = x.SimDistributionPort_DigitalControl_SHWLoop_Default_;
          this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_SHWLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_STMLoop_Default_ = x.SimDistributionPort_DigitalControl_STMLoop_Default_;
          this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_STMLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControl_VRFLoop_Default_ = x.SimDistributionPort_DigitalControl_VRFLoop_Default_;
          this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_ = x.SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControl_VRFLoop_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControlPort_Default_ = x.SimDistributionPort_DigitalControlPort_Default_;
          this->SimDistributionPort_DigitalControlPort_DigitalSignal_In_ = x.SimDistributionPort_DigitalControlPort_DigitalSignal_In_;
          this->SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_ = x.SimDistributionPort_DigitalControlPort_DigitalSignal_InOrOut_;
          this->SimDistributionPort_DigitalControlPort_DigitalSignal_Out_ = x.SimDistributionPort_DigitalControlPort_DigitalSignal_Out_;
          this->SimDistributionPort_DigitalControlPort_DigitalVirtual_ = x.SimDistributionPort_DigitalControlPort_DigitalVirtual_;
          this->SimDistributionPort_DistributionPort_Default_ = x.SimDistributionPort_DistributionPort_Default_;
          this->SimDistributionPort_ElectricalFlowPort_Default_ = x.SimDistributionPort_ElectricalFlowPort_Default_;
          this->SimDistributionPort_ElectricalFlowPort_Electrical_In_ = x.SimDistributionPort_ElectricalFlowPort_Electrical_In_;
          this->SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_ = x.SimDistributionPort_ElectricalFlowPort_Electrical_InOrOut_;
          this->SimDistributionPort_ElectricalFlowPort_Electrical_Out_ = x.SimDistributionPort_ElectricalFlowPort_Electrical_Out_;
          this->SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_ = x.SimDistributionPort_HotWaterFlowPort_CondensedWaterOut_;
          this->SimDistributionPort_HotWaterFlowPort_Default_ = x.SimDistributionPort_HotWaterFlowPort_Default_;
          this->SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_ = x.SimDistributionPort_HotWaterFlowPort_EvaporativeWaterIn_;
          this->SimDistributionPort_HotWaterFlowPort_Water_In_ = x.SimDistributionPort_HotWaterFlowPort_Water_In_;
          this->SimDistributionPort_HotWaterFlowPort_Water_InOrOut_ = x.SimDistributionPort_HotWaterFlowPort_Water_InOrOut_;
          this->SimDistributionPort_HotWaterFlowPort_Water_Out_ = x.SimDistributionPort_HotWaterFlowPort_Water_Out_;
          this->SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_ = x.SimDistributionPort_MixedWaterFlowPort_CondensedWaterOut_;
          this->SimDistributionPort_MixedWaterFlowPort_Default_ = x.SimDistributionPort_MixedWaterFlowPort_Default_;
          this->SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_ = x.SimDistributionPort_MixedWaterFlowPort_EvaporativeWaterIn_;
          this->SimDistributionPort_MixedWaterFlowPort_Water_In_ = x.SimDistributionPort_MixedWaterFlowPort_Water_In_;
          this->SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_ = x.SimDistributionPort_MixedWaterFlowPort_Water_InOrOut_;
          this->SimDistributionPort_MixedWaterFlowPort_Water_Out_ = x.SimDistributionPort_MixedWaterFlowPort_Water_Out_;
          this->SimDistributionPort_RefrigerationFlowPort_Default_ = x.SimDistributionPort_RefrigerationFlowPort_Default_;
          this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_ = x.SimDistributionPort_RefrigerationFlowPort_Refrigeration_In_;
          this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_ = x.SimDistributionPort_RefrigerationFlowPort_Refrigeration_InOrOut_;
          this->SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_ = x.SimDistributionPort_RefrigerationFlowPort_Refrigeration_Out_;
          this->SimDistributionPort_ServiceHotWaterFlowPort_Default_ = x.SimDistributionPort_ServiceHotWaterFlowPort_Default_;
          this->SimDistributionPort_ServiceHotWaterFlowPort_Water_In_ = x.SimDistributionPort_ServiceHotWaterFlowPort_Water_In_;
          this->SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_ = x.SimDistributionPort_ServiceHotWaterFlowPort_Water_InOrOut_;
          this->SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_ = x.SimDistributionPort_ServiceHotWaterFlowPort_Water_Out_;
          this->SimDistributionPort_SteamFlowPort_Default_ = x.SimDistributionPort_SteamFlowPort_Default_;
          this->SimDistributionPort_SteamFlowPort_Steam_In_ = x.SimDistributionPort_SteamFlowPort_Steam_In_;
          this->SimDistributionPort_SteamFlowPort_Steam_InOrOut_ = x.SimDistributionPort_SteamFlowPort_Steam_InOrOut_;
          this->SimDistributionPort_SteamFlowPort_Steam_Out_ = x.SimDistributionPort_SteamFlowPort_Steam_Out_;
          this->SimDistributionPort_VarRefrigerantFlowPort_Default_ = x.SimDistributionPort_VarRefrigerantFlowPort_Default_;
          this->SimDistributionPort_VarRefrigerantFlowPort_VRF_In_ = x.SimDistributionPort_VarRefrigerantFlowPort_VRF_In_;
          this->SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_ = x.SimDistributionPort_VarRefrigerantFlowPort_VRF_InOrOut_;
          this->SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_ = x.SimDistributionPort_VarRefrigerantFlowPort_VRF_Out_;
          this->SimDistributionPort_ZoneAirFlowPort_Air_In_ = x.SimDistributionPort_ZoneAirFlowPort_Air_In_;
          this->SimDistributionPort_ZoneAirFlowPort_Air_Out_ = x.SimDistributionPort_ZoneAirFlowPort_Air_Out_;
          this->SimDoor_Default_Default_ = x.SimDoor_Default_Default_;
          this->SimDoor_GlazedDoor_Exterior_ = x.SimDoor_GlazedDoor_Exterior_;
          this->SimDoor_GlazedDoor_ExteriorDetailed_ = x.SimDoor_GlazedDoor_ExteriorDetailed_;
          this->SimDoor_GlazedDoor_Interior_ = x.SimDoor_GlazedDoor_Interior_;
          this->SimDoor_OpaqueDoor_Exterior_ = x.SimDoor_OpaqueDoor_Exterior_;
          this->SimDoor_OpaqueDoor_ExteriorDetailed_ = x.SimDoor_OpaqueDoor_ExteriorDetailed_;
          this->SimDoor_OpaqueDoor_Interior_ = x.SimDoor_OpaqueDoor_Interior_;
          this->SimDoorArrayParams_DoorArray_Default_ = x.SimDoorArrayParams_DoorArray_Default_;
          this->SimDoorLiningProps_DoorLiningProps_Default_ = x.SimDoorLiningProps_DoorLiningProps_Default_;
          this->SimDoorPanelProps_DoorPanelProps_Default_ = x.SimDoorPanelProps_DoorPanelProps_Default_;
          this->SimDoorParams_Door_Default_ = x.SimDoorParams_Door_Default_;
          this->SimDoorType_Door_Default_ = x.SimDoorType_Door_Default_;
          this->SimDwgXrefParams_DwgXref_Default_ = x.SimDwgXrefParams_DwgXref_Default_;
          this->SimEdge_Edge_EdgeCurve_ = x.SimEdge_Edge_EdgeCurve_;
          this->SimEdge_Edge_OrientedEdge_ = x.SimEdge_Edge_OrientedEdge_;
          this->SimEdge_Edge_Subedge_ = x.SimEdge_Edge_Subedge_;
          this->SimElementQuantity_ElementQuantity_Default_ = x.SimElementQuantity_ElementQuantity_Default_;
          this->SimExtendedMaterialProps_ExtendedMatlProps_Default_ = x.SimExtendedMaterialProps_ExtendedMatlProps_Default_;
          this->SimExternalReference_Default_Default_ = x.SimExternalReference_Default_Default_;
          this->SimExternalReference_DocumentReference_Default_ = x.SimExternalReference_DocumentReference_Default_;
          this->SimExternalReference_ExternalReference_Default_ = x.SimExternalReference_ExternalReference_Default_;
          this->SimExternalReference_LibraryReference_Default_ = x.SimExternalReference_LibraryReference_Default_;
          this->SimExternalReference_PropertyReference_Default_ = x.SimExternalReference_PropertyReference_Default_;
          this->SimFace_Face_Default_ = x.SimFace_Face_Default_;
          this->SimFace_Face_FaceSurface_ = x.SimFace_Face_FaceSurface_;
          this->SimFaceBound_FaceBound_Default_ = x.SimFaceBound_FaceBound_Default_;
          this->SimFaceBound_FaceBound_FaceOuterBound_ = x.SimFaceBound_FaceBound_FaceOuterBound_;
          this->SimFeatureAirFlowNetwork_Default_Default_ = x.SimFeatureAirFlowNetwork_Default_Default_;
          this->SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_ = x.SimFeatureAirFlowNetwork_EffectiveLeakageArea_Default_;
          this->SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_ = x.SimFeatureAirFlowNetwork_Exhaust_ZoneExhaustFan_;
          this->SimFeatureAirFlowNetwork_Opening_Default_ = x.SimFeatureAirFlowNetwork_Opening_Default_;
          this->SimFeatureAirFlowNetwork_Opening_Detailed_ = x.SimFeatureAirFlowNetwork_Opening_Detailed_;
          this->SimFeatureAirFlowNetwork_Opening_Horizontal_ = x.SimFeatureAirFlowNetwork_Opening_Horizontal_;
          this->SimFeatureAirFlowNetwork_Opening_Simple_ = x.SimFeatureAirFlowNetwork_Opening_Simple_;
          this->SimFeatureAirFlowNetwork_Surface_Default_ = x.SimFeatureAirFlowNetwork_Surface_Default_;
          this->SimFeatureAirFlowNetwork_SurfaceCrack_Default_ = x.SimFeatureAirFlowNetwork_SurfaceCrack_Default_;
          this->SimFeatureAirFlowNetwork_Zone_Default_ = x.SimFeatureAirFlowNetwork_Zone_Default_;
          this->SimFeatureElementAddition_ProjectionElement_Default_ = x.SimFeatureElementAddition_ProjectionElement_Default_;
          this->SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_ = x.SimFeatureElementSubtraction_EdgeFeature_ChamferedEdge_;
          this->SimFeatureElementSubtraction_EdgeFeature_Default_ = x.SimFeatureElementSubtraction_EdgeFeature_Default_;
          this->SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_ = x.SimFeatureElementSubtraction_EdgeFeature_RoundedEdge_;
          this->SimFeatureElementSubtraction_SlotFeature_Default_ = x.SimFeatureElementSubtraction_SlotFeature_Default_;
          this->SimFeatureElementSubtraction_Void_Opening_ = x.SimFeatureElementSubtraction_Void_Opening_;
          this->SimFlowCompoundEqmt_DistrictSupply_Cooling_ = x.SimFlowCompoundEqmt_DistrictSupply_Cooling_;
          this->SimFlowCompoundEqmt_DistrictSupply_Heating_ = x.SimFlowCompoundEqmt_DistrictSupply_Heating_;
          this->SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_ = x.SimFlowCompoundEqmt_DistrictSupply_TemperatureSource_;
          this->SimFlowCompoundEqmt_PurchasedSupply_Cooling_ = x.SimFlowCompoundEqmt_PurchasedSupply_Cooling_;
          this->SimFlowCompoundEqmt_PurchasedSupply_Heating_ = x.SimFlowCompoundEqmt_PurchasedSupply_Heating_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_AC_VariableRefrigerantFlow_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_CoolOnly_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_Default_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatCool_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatCool_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HeatOnly_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAir_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_AirToAirMultiSpeed_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_CW_;
          this->SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_ = x.SimFlowCompoundEqmt_UnitaryLoopEqmt_HP_WaterToAir_MxW_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_AirConditionerWindow_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_EnergyRecoveryVentilator_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_EvapCoolerUnit_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_ForcedAirUserDefined_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_CW_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_HP_WtrToAir_MxW_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_PTAC_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_PTHP_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitHeater_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_WaterSystemLoadProfile_;
          this->SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_ = x.SimFlowCompoundEqmt_UnitaryZoneEqmt_ZoneVentilationDesignFlowRate_;
          this->SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_ = x.SimFlowCompoundEqmt_VarRefrigerantFlowEqmt_AirConditioner_;
          this->SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_ = x.SimFlowCompoundEqmt_VavSubsystems_VAV_ChangeoverBypass_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_ChilledWaterLoop_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_DX_HeatExchangerAssisted_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystem_Cooling_Water_HeatExchangerAssisted_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemHeatingDX_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_HotWaterLoop_;
          this->SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_ = x.SimFlowCompoundEqmt_VirtualSupplySubsystems_MixedWaterLoop_;
          this->SimFlowController_Damper_Default_ = x.SimFlowController_Damper_Default_;
          this->SimFlowController_Damper_Exhaust_ = x.SimFlowController_Damper_Exhaust_;
          this->SimFlowController_Damper_FaceBypass_ = x.SimFlowController_Damper_FaceBypass_;
          this->SimFlowController_Damper_MixedAir_ = x.SimFlowController_Damper_MixedAir_;
          this->SimFlowController_Damper_OutsideAir_ = x.SimFlowController_Damper_OutsideAir_;
          this->SimFlowController_Damper_Recirculation_ = x.SimFlowController_Damper_Recirculation_;
          this->SimFlowController_Damper_Relief_ = x.SimFlowController_Damper_Relief_;
          this->SimFlowController_Default_Default_ = x.SimFlowController_Default_Default_;
          this->SimFlowController_ElectricalSwitch_On_Off_ = x.SimFlowController_ElectricalSwitch_On_Off_;
          this->SimFlowController_ElectricalSwitch_Variable_ = x.SimFlowController_ElectricalSwitch_Variable_;
          this->SimFlowController_Valve_Default_ = x.SimFlowController_Valve_Default_;
          this->SimFlowController_Valve_EMSValve_ = x.SimFlowController_Valve_EMSValve_;
          this->SimFlowController_Valve_NonReturnValve_ = x.SimFlowController_Valve_NonReturnValve_;
          this->SimFlowController_Valve_TemperingValve_ = x.SimFlowController_Valve_TemperingValve_;
          this->SimFlowEnergyTransfer_ConvectiveHeater_Electric_ = x.SimFlowEnergyTransfer_ConvectiveHeater_Electric_;
          this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_ = x.SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Electric_;
          this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_ = x.SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Steam_;
          this->SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_ = x.SimFlowEnergyTransfer_ConvectiveHeater_Radiant_Water_;
          this->SimFlowEnergyTransfer_ConvectiveHeater_Water_ = x.SimFlowEnergyTransfer_ConvectiveHeater_Water_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXDefaultCoolingCoil_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeedThermalStorage_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDxVariableRefrigerantFlow_;
          this->SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_ = x.SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXVariableSpeed_;
          this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_ = x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterDetailedGeometry_;
          this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_ = x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterSimple_;
          this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_ = x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit_;
          this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_ = x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpParameterEstimation_;
          this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_ = x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit_;
          this->SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_ = x.SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterUserDefined_;
          this->SimFlowEnergyTransfer_Dehumidifier_Default_ = x.SimFlowEnergyTransfer_Dehumidifier_Default_;
          this->SimFlowEnergyTransfer_Dehumidifier_NoFans_ = x.SimFlowEnergyTransfer_Dehumidifier_NoFans_;
          this->SimFlowEnergyTransfer_Economizer_AirToAir_ = x.SimFlowEnergyTransfer_Economizer_AirToAir_;
          this->SimFlowEnergyTransfer_Electrical_Transformer_ = x.SimFlowEnergyTransfer_Electrical_Transformer_;
          this->SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_ = x.SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower_;
          this->SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_ = x.SimFlowEnergyTransfer_ElectricalInverter_LookUpTable_;
          this->SimFlowEnergyTransfer_ElectricalInverter_Simple_ = x.SimFlowEnergyTransfer_ElectricalInverter_Simple_;
          this->SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_ = x.SimFlowEnergyTransfer_EvaporativeCooler_DirectCelDekPad_;
          this->SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_ = x.SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial_;
          this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_ = x.SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad_;
          this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_ = x.SimFlowEnergyTransfer_EvaporativeCooler_IndirectResearchSpecial_;
          this->SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_ = x.SimFlowEnergyTransfer_EvaporativeCooler_IndirectWetCoil_;
          this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_ = x.SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_CW_;
          this->SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_ = x.SimFlowEnergyTransfer_FluidCooler_EvaporativeSingleSpeed_MxW_;
          this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_ = x.SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_CW_;
          this->SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_ = x.SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW_;
          this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_ = x.SimFlowEnergyTransfer_FluidCooler_SingleSpeed_CW_;
          this->SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_ = x.SimFlowEnergyTransfer_FluidCooler_SingleSpeed_MxW_;
          this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_ = x.SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW_;
          this->SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_ = x.SimFlowEnergyTransfer_FluidCooler_TwoSpeed_MxW_;
          this->SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_ = x.SimFlowEnergyTransfer_HeatExAirToAir_DesiccantBalancedFlow_;
          this->SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_ = x.SimFlowEnergyTransfer_HeatExAirToAir_FlatPlate_;
          this->SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_ = x.SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent_;
          this->SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_ = x.SimFlowEnergyTransfer_HeatExEarthToWater_HorizontalTrench_;
          this->SimFlowEnergyTransfer_HeatExEarthToWater_Surface_ = x.SimFlowEnergyTransfer_HeatExEarthToWater_Surface_;
          this->SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_ = x.SimFlowEnergyTransfer_HeatExEarthToWater_Vertical_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToChilledWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_ChilledWaterToCondenser_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_CondenserToCondenser_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToCondenser_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToHotWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToMixedWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_HotWaterToServiceHotWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToCondenser_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToHotWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToMixedWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_MixedWaterToServiceHotWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToHotWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToMixedWater_;
          this->SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_ = x.SimFlowEnergyTransfer_HeatExFluidToFluid_ServiceHotWaterToServiceHotWater_;
          this->SimFlowEnergyTransfer_HeatExWaterToWater_Pond_ = x.SimFlowEnergyTransfer_HeatExWaterToWater_Pond_;
          this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_ = x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDesuperheater_;
          this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_ = x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXMultiSpeed_;
          this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_ = x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed_;
          this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_ = x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDxVariableRefrigerantFlow_;
          this->SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_ = x.SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXVariableSpeed_;
          this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_ = x.SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectric_;
          this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_ = x.SimFlowEnergyTransfer_HeatingCoilElec_CoilAirHeatingElectricMultiStage_;
          this->SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_ = x.SimFlowEnergyTransfer_HeatingCoilElec_CoilAirPreHeatingElectric_;
          this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_ = x.SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGas_;
          this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_ = x.SimFlowEnergyTransfer_HeatingCoilGas_CoilAirHeatingGasMultiStage_;
          this->SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_ = x.SimFlowEnergyTransfer_HeatingCoilGas_CoilAirPreHeatingGas_;
          this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_ = x.SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirHeatingSteam_;
          this->SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_ = x.SimFlowEnergyTransfer_HeatingCoilSteam_CoilAirPreHeatSteam_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWater_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpEquationFit_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpParameterEstimation_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterUserDefined_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilAirPreHeatWater_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump_;
          this->SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_ = x.SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingDesuperheater_;
          this->SimFlowEnergyTransfer_Humidifier_ElectricSteam_ = x.SimFlowEnergyTransfer_Humidifier_ElectricSteam_;
          this->SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_ = x.SimFlowEnergyTransfer_PipingSystem_EarthToWater_Underground_;
          this->SimFlowEnergyTransfer_RadiantDevice_Beam_ = x.SimFlowEnergyTransfer_RadiantDevice_Beam_;
          this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_ = x.SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempConstFlow_;
          this->SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_ = x.SimFlowEnergyTransfer_RadiantDevice_CeilingLowTempVarFlow_;
          this->SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_ = x.SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated_;
          this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_ = x.SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow_;
          this->SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_ = x.SimFlowEnergyTransfer_RadiantDevice_FloorLowTempVarFlow_;
          this->SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_ = x.SimFlowEnergyTransfer_RadiantDevice_FloorSlab_Ventilated_;
          this->SimFlowEnergyTransfer_RadiantDevice_HighTemp_ = x.SimFlowEnergyTransfer_RadiantDevice_HighTemp_;
          this->SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_ = x.SimFlowEnergyTransfer_RadiantDevice_LowTemp_Electric_;
          this->SimFlowEnergyTransfer_RadiantDevice_Slab_ = x.SimFlowEnergyTransfer_RadiantDevice_Slab_;
          this->SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_ = x.SimFlowEnergyTransferStorage_HotWaterTank_DomesticHotWater_;
          this->SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_ = x.SimFlowEnergyTransferStorage_HotWaterTank_HeatPump_;
          this->SimFlowEnergyTransferStorage_HotWaterTank_Mixed_ = x.SimFlowEnergyTransferStorage_HotWaterTank_Mixed_;
          this->SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_ = x.SimFlowEnergyTransferStorage_HotWaterTank_MixedTank_;
          this->SimFlowEnergyTransferStorage_HotWaterTank_Stratified_ = x.SimFlowEnergyTransferStorage_HotWaterTank_Stratified_;
          this->SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_ = x.SimFlowEnergyTransferStorage_HotWaterTank_StratifiedTank_;
          this->SimFlowFitting_Default_Default_ = x.SimFlowFitting_Default_Default_;
          this->SimFlowFitting_Difusser_Default_ = x.SimFlowFitting_Difusser_Default_;
          this->SimFlowFitting_Electrical_Transformer_ = x.SimFlowFitting_Electrical_Transformer_;
          this->SimFlowFitting_FlowElementProxy_Default_ = x.SimFlowFitting_FlowElementProxy_Default_;
          this->SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_ = x.SimFlowFitting_FlowElementProxy_DemandProxy_AirLoop_;
          this->SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_ = x.SimFlowFitting_FlowElementProxy_DemandProxy_WaterLoop_;
          this->SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_ = x.SimFlowFitting_FlowElementProxy_SupplyProxy_AirLoop_;
          this->SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_ = x.SimFlowFitting_FlowElementProxy_SupplyProxy_WaterLoop_;
          this->SimFlowFitting_Mixer_AirMixer_ = x.SimFlowFitting_Mixer_AirMixer_;
          this->SimFlowFitting_Mixer_AirMixerOutdoor_ = x.SimFlowFitting_Mixer_AirMixerOutdoor_;
          this->SimFlowFitting_Mixer_AirMixerZoneReturn_ = x.SimFlowFitting_Mixer_AirMixerZoneReturn_;
          this->SimFlowFitting_Mixer_CondenserMixer_ = x.SimFlowFitting_Mixer_CondenserMixer_;
          this->SimFlowFitting_Mixer_DemandProxyMixer_ = x.SimFlowFitting_Mixer_DemandProxyMixer_;
          this->SimFlowFitting_Mixer_DemandProxyMixerAir_ = x.SimFlowFitting_Mixer_DemandProxyMixerAir_;
          this->SimFlowFitting_Mixer_DemandProxyMixerWater_ = x.SimFlowFitting_Mixer_DemandProxyMixerWater_;
          this->SimFlowFitting_Mixer_SteamMixer_ = x.SimFlowFitting_Mixer_SteamMixer_;
          this->SimFlowFitting_Mixer_WaterMixer_ = x.SimFlowFitting_Mixer_WaterMixer_;
          this->SimFlowFitting_Splitter_AirSplitter_ = x.SimFlowFitting_Splitter_AirSplitter_;
          this->SimFlowFitting_Splitter_AirSplitterZoneSupply_ = x.SimFlowFitting_Splitter_AirSplitterZoneSupply_;
          this->SimFlowFitting_Splitter_CondenserSplitter_ = x.SimFlowFitting_Splitter_CondenserSplitter_;
          this->SimFlowFitting_Splitter_DemandProxySplitter_ = x.SimFlowFitting_Splitter_DemandProxySplitter_;
          this->SimFlowFitting_Splitter_DemandProxySplitterAir_ = x.SimFlowFitting_Splitter_DemandProxySplitterAir_;
          this->SimFlowFitting_Splitter_DemandProxySplitterWater_ = x.SimFlowFitting_Splitter_DemandProxySplitterWater_;
          this->SimFlowFitting_Splitter_SteamSplitter_ = x.SimFlowFitting_Splitter_SteamSplitter_;
          this->SimFlowFitting_Splitter_WaterSplitter_ = x.SimFlowFitting_Splitter_WaterSplitter_;
          this->SimFlowMover_Default_Default_ = x.SimFlowMover_Default_Default_;
          this->SimFlowMover_Fan_NightVentilation_ = x.SimFlowMover_Fan_NightVentilation_;
          this->SimFlowMover_Fan_Relief_ = x.SimFlowMover_Fan_Relief_;
          this->SimFlowMover_Fan_ZoneExhaust_ = x.SimFlowMover_Fan_ZoneExhaust_;
          this->SimFlowMover_Pump_ConstantSpeedReturn_ = x.SimFlowMover_Pump_ConstantSpeedReturn_;
          this->SimFlowMover_Pump_ConstantSpeedSupply_ = x.SimFlowMover_Pump_ConstantSpeedSupply_;
          this->SimFlowMover_Pump_UserDefined_ = x.SimFlowMover_Pump_UserDefined_;
          this->SimFlowMover_Pump_VariableSpeedReturn_ = x.SimFlowMover_Pump_VariableSpeedReturn_;
          this->SimFlowMover_Pump_VariableSpeedSupply_ = x.SimFlowMover_Pump_VariableSpeedSupply_;
          this->SimFlowMover_Pump_VarSpeedCondensateReturn_ = x.SimFlowMover_Pump_VarSpeedCondensateReturn_;
          this->SimFlowMover_Pump_VarSpeedCondensateSupply_ = x.SimFlowMover_Pump_VarSpeedCondensateSupply_;
          this->SimFlowMover_PumpSet_ConstantSpeed2_ = x.SimFlowMover_PumpSet_ConstantSpeed2_;
          this->SimFlowMover_PumpSet_ConstantSpeed3_ = x.SimFlowMover_PumpSet_ConstantSpeed3_;
          this->SimFlowMover_PumpSet_VariableSpeed2_ = x.SimFlowMover_PumpSet_VariableSpeed2_;
          this->SimFlowMover_PumpSet_VariableSpeed3_ = x.SimFlowMover_PumpSet_VariableSpeed3_;
          this->SimFlowMover_ReturnFan_ComponentModel_ = x.SimFlowMover_ReturnFan_ComponentModel_;
          this->SimFlowMover_ReturnFan_ConstantVolume_ = x.SimFlowMover_ReturnFan_ConstantVolume_;
          this->SimFlowMover_ReturnFan_OnOff_ = x.SimFlowMover_ReturnFan_OnOff_;
          this->SimFlowMover_ReturnFan_VariableVolume_ = x.SimFlowMover_ReturnFan_VariableVolume_;
          this->SimFlowMover_SupplyFan_ComponentModel_ = x.SimFlowMover_SupplyFan_ComponentModel_;
          this->SimFlowMover_SupplyFan_ConstantVolume_ = x.SimFlowMover_SupplyFan_ConstantVolume_;
          this->SimFlowMover_SupplyFan_OnOff_ = x.SimFlowMover_SupplyFan_OnOff_;
          this->SimFlowMover_SupplyFan_VariableVolume_ = x.SimFlowMover_SupplyFan_VariableVolume_;
          this->SimFlowPlant_Boiler_BoilerHotWater_ = x.SimFlowPlant_Boiler_BoilerHotWater_;
          this->SimFlowPlant_Boiler_BoilerSteam_ = x.SimFlowPlant_Boiler_BoilerSteam_;
          this->SimFlowPlant_Boiler_UserDefined_ = x.SimFlowPlant_Boiler_UserDefined_;
          this->SimFlowPlant_Chiller_Absorption_ = x.SimFlowPlant_Chiller_Absorption_;
          this->SimFlowPlant_Chiller_AbsorptionIndirect_ = x.SimFlowPlant_Chiller_AbsorptionIndirect_;
          this->SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_ = x.SimFlowPlant_Chiller_ChillerVaporCompressionCombustionTurbine_;
          this->SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_ = x.SimFlowPlant_Chiller_ChillerVaporCompressionConstantCOP_;
          this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ = x.SimFlowPlant_Chiller_ChillerVaporCompressionElectric_;
          this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_ = x.SimFlowPlant_Chiller_ChillerVaporCompressionElectric_EIR_;
          this->SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_ = x.SimFlowPlant_Chiller_ChillerVaporCompressionElectric_ReformulatedEIR_;
          this->SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_ = x.SimFlowPlant_Chiller_ChillerVaporCompressionEngineDriven_;
          this->SimFlowPlant_Chiller_UserDefined_ = x.SimFlowPlant_Chiller_UserDefined_;
          this->SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_ = x.SimFlowPlant_ChillerHeater_AbsorptionChillerDoubleEffect_;
          this->SimFlowPlant_ChillerHeater_AbsorptionDirectFired_ = x.SimFlowPlant_ChillerHeater_AbsorptionDirectFired_;
          this->SimFlowPlant_ChillerHeater_PerformanceElectricEIR_ = x.SimFlowPlant_ChillerHeater_PerformanceElectricEIR_;
          this->SimFlowPlant_CoolingTower_SingleSpeed_ = x.SimFlowPlant_CoolingTower_SingleSpeed_;
          this->SimFlowPlant_CoolingTower_TwoSpeed_ = x.SimFlowPlant_CoolingTower_TwoSpeed_;
          this->SimFlowPlant_CoolingTower_UserDefined_ = x.SimFlowPlant_CoolingTower_UserDefined_;
          this->SimFlowPlant_CoolingTower_VariableSpeed_ = x.SimFlowPlant_CoolingTower_VariableSpeed_;
          this->SimFlowPlant_CoolingTower_VariableSpeed_Merkel_ = x.SimFlowPlant_CoolingTower_VariableSpeed_Merkel_;
          this->SimFlowPlant_ElectricalGenerator_CombustionTurbine_ = x.SimFlowPlant_ElectricalGenerator_CombustionTurbine_;
          this->SimFlowPlant_ElectricalGenerator_DefaultGenerator_ = x.SimFlowPlant_ElectricalGenerator_DefaultGenerator_;
          this->SimFlowPlant_ElectricalGenerator_FuelCell_ = x.SimFlowPlant_ElectricalGenerator_FuelCell_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_ = x.SimFlowPlant_ElectricalGenerator_FuelCellAirSupply_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_ = x.SimFlowPlant_ElectricalGenerator_FuelCellAuxilaryHeater_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_ = x.SimFlowPlant_ElectricalGenerator_FuelCellElectricalStorage_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_ = x.SimFlowPlant_ElectricalGenerator_FuelCellExhaustGastoWaterHeatExchanger_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellInverter_ = x.SimFlowPlant_ElectricalGenerator_FuelCellInverter_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_ = x.SimFlowPlant_ElectricalGenerator_FuelCellPowerModule_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_ = x.SimFlowPlant_ElectricalGenerator_FuelCellStackCooler_;
          this->SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_ = x.SimFlowPlant_ElectricalGenerator_FuelCellWaterSupply_;
          this->SimFlowPlant_ElectricalGenerator_FuelEquipment_ = x.SimFlowPlant_ElectricalGenerator_FuelEquipment_;
          this->SimFlowPlant_ElectricalGenerator_FuelSupply_ = x.SimFlowPlant_ElectricalGenerator_FuelSupply_;
          this->SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_ = x.SimFlowPlant_ElectricalGenerator_InternalCombustionEngine_;
          this->SimFlowPlant_ElectricalGenerator_MicroCHP_ = x.SimFlowPlant_ElectricalGenerator_MicroCHP_;
          this->SimFlowPlant_ElectricalGenerator_MicroTurbine_ = x.SimFlowPlant_ElectricalGenerator_MicroTurbine_;
          this->SimFlowPlant_ElectricalGenerator_Photovoltaic_ = x.SimFlowPlant_ElectricalGenerator_Photovoltaic_;
          this->SimFlowPlant_ElectricalGenerator_WindTurbine_ = x.SimFlowPlant_ElectricalGenerator_WindTurbine_;
          this->SimFlowPlant_HeatAndPower_Default_ = x.SimFlowPlant_HeatAndPower_Default_;
          this->SimFlowPlant_HeatExWaterToWater_Pond_ = x.SimFlowPlant_HeatExWaterToWater_Pond_;
          this->SimFlowPlant_HeatPump_AirToAir_ = x.SimFlowPlant_HeatPump_AirToAir_;
          this->SimFlowPlant_HeatPump_AirToAir_MultiSpeed_ = x.SimFlowPlant_HeatPump_AirToAir_MultiSpeed_;
          this->SimFlowPlant_HeatPump_CentralSystem_ = x.SimFlowPlant_HeatPump_CentralSystem_;
          this->SimFlowPlant_HeatPump_GroundSource_ = x.SimFlowPlant_HeatPump_GroundSource_;
          this->SimFlowPlant_HeatPump_WaterToAir_ = x.SimFlowPlant_HeatPump_WaterToAir_;
          this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_ = x.SimFlowPlant_HeatPump_WaterToWater_EquationFit_Cooling_;
          this->SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_ = x.SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating_;
          this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_ = x.SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling_;
          this->SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_ = x.SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Heating_;
          this->SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_ = x.SimFlowPlant_SolarDevice_SolarCollectorIntegralCollectorStorage_;
          this->SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_ = x.SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage_;
          this->SimFlowPlant_SolarDevice_SolarPhotoVoltaic_ = x.SimFlowPlant_SolarDevice_SolarPhotoVoltaic_;
          this->SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_ = x.SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal_;
          this->SimFlowPlant_SolarDevice_SolarThermalAir_ = x.SimFlowPlant_SolarDevice_SolarThermalAir_;
          this->SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_ = x.SimFlowPlant_SolarDevice_SolarThermalAirMultiSystem_;
          this->SimFlowPlant_SolarDevice_SolarThermalWater_ = x.SimFlowPlant_SolarDevice_SolarThermalWater_;
          this->SimFlowSegment_Default_Default_ = x.SimFlowSegment_Default_Default_;
          this->SimFlowSegment_Duct_AirFlowNetworkDistribution_ = x.SimFlowSegment_Duct_AirFlowNetworkDistribution_;
          this->SimFlowSegment_Duct_Default_ = x.SimFlowSegment_Duct_Default_;
          this->SimFlowSegment_Filter_Bag_ = x.SimFlowSegment_Filter_Bag_;
          this->SimFlowSegment_Filter_Default_ = x.SimFlowSegment_Filter_Default_;
          this->SimFlowSegment_Filter_Electrostatic_ = x.SimFlowSegment_Filter_Electrostatic_;
          this->SimFlowSegment_Filter_HEPA_ = x.SimFlowSegment_Filter_HEPA_;
          this->SimFlowSegment_Filter_Panel_ = x.SimFlowSegment_Filter_Panel_;
          this->SimFlowSegment_Grill_Return_ = x.SimFlowSegment_Grill_Return_;
          this->SimFlowSegment_Grill_Supply_ = x.SimFlowSegment_Grill_Supply_;
          this->SimFlowSegment_Louver_Default_ = x.SimFlowSegment_Louver_Default_;
          this->SimFlowSegment_Louver_Exhaust_ = x.SimFlowSegment_Louver_Exhaust_;
          this->SimFlowSegment_Louver_Intake_ = x.SimFlowSegment_Louver_Intake_;
          this->SimFlowSegment_Louver_Safety_ = x.SimFlowSegment_Louver_Safety_;
          this->SimFlowSegment_Louver_Ventilation_ = x.SimFlowSegment_Louver_Ventilation_;
          this->SimFlowSegment_Pipe_Adiabatic_ = x.SimFlowSegment_Pipe_Adiabatic_;
          this->SimFlowSegment_Pipe_Adiabatic_Steam_ = x.SimFlowSegment_Pipe_Adiabatic_Steam_;
          this->SimFlowSegment_Pipe_Indoor_ = x.SimFlowSegment_Pipe_Indoor_;
          this->SimFlowSegment_Pipe_Outdoor_ = x.SimFlowSegment_Pipe_Outdoor_;
          this->SimFlowSegment_Pipe_Underground_ = x.SimFlowSegment_Pipe_Underground_;
          this->SimFlowSegment_Pipe_UndergroundPipeCircuit_ = x.SimFlowSegment_Pipe_UndergroundPipeCircuit_;
          this->SimFlowSegment_Pipe_UndergroundPipeSegment_ = x.SimFlowSegment_Pipe_UndergroundPipeSegment_;
          this->SimFlowSegment_Plenum_DedicatedReturn_ = x.SimFlowSegment_Plenum_DedicatedReturn_;
          this->SimFlowSegment_Plenum_DedicatedSupply_ = x.SimFlowSegment_Plenum_DedicatedSupply_;
          this->SimFlowSegment_Plenum_SharedReturn_ = x.SimFlowSegment_Plenum_SharedReturn_;
          this->SimFlowSegment_Plenum_SharedSupply_ = x.SimFlowSegment_Plenum_SharedSupply_;
          this->SimFlowSegment_VirtualComponent_ConstantPressureDrop_ = x.SimFlowSegment_VirtualComponent_ConstantPressureDrop_;
          this->SimFlowSegment_VirtualComponent_Leak_ = x.SimFlowSegment_VirtualComponent_Leak_;
          this->SimFlowSegment_VirtualComponent_LeakageRatio_ = x.SimFlowSegment_VirtualComponent_LeakageRatio_;
          this->SimFlowSegment_Wire_Default_ = x.SimFlowSegment_Wire_Default_;
          this->SimFlowStorage_ElectricalStorage_BatteryBank_ = x.SimFlowStorage_ElectricalStorage_BatteryBank_;
          this->SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_ = x.SimFlowStorage_ElectricalStorage_DefaultElectricalStorage_;
          this->SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_ = x.SimFlowStorage_ThermalStorage_ThermalStorageIceDetailed_;
          this->SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_ = x.SimFlowStorage_ThermalStorage_ThermalStorageIceSimple_;
          this->SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_ = x.SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed_;
          this->SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_ = x.SimFlowStorage_ThermalStorage_ThermalStorageWaterStratified_;
          this->SimFlowStorage_WaterStorage_CleanWater_ = x.SimFlowStorage_WaterStorage_CleanWater_;
          this->SimFlowStorage_WaterStorage_GrayWater_ = x.SimFlowStorage_WaterStorage_GrayWater_;
          this->SimFlowStorage_WaterStorage_RainWater_ = x.SimFlowStorage_WaterStorage_RainWater_;
          this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_ = x.SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_ConstantVolume_;
          this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_ = x.SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_VAV_;
          this->SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_ = x.SimFlowTerminal_AirTerminal_AirTerminal_DualDuct_Vav_OutdoorAir_;
          this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_ = x.SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_ConstantVolume_;
          this->SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_ = x.SimFlowTerminal_AirTerminal_AirTerminal_TripleDuct_VAV_;
          this->SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_ = x.SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam_;
          this->SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_ = x.SimFlowTerminal_AirTerminal_CAV_ActiveFourPipeInduction_;
          this->SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_ = x.SimFlowTerminal_AirTerminal_CAV_PassiveCooledBeam_;
          this->SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_ = x.SimFlowTerminal_AirTerminal_CAV_PassiveFourPipeInduction_;
          this->SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_ = x.SimFlowTerminal_AirTerminal_ConstantVolume_Reheat_;
          this->SimFlowTerminal_AirTerminal_InletSideMixer_ = x.SimFlowTerminal_AirTerminal_InletSideMixer_;
          this->SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_ = x.SimFlowTerminal_AirTerminal_ParallelPIU_Reheat_;
          this->SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_ = x.SimFlowTerminal_AirTerminal_SeriesPIU_Reheat_;
          this->SimFlowTerminal_AirTerminal_SingleDuctUserDefined_ = x.SimFlowTerminal_AirTerminal_SingleDuctUserDefined_;
          this->SimFlowTerminal_AirTerminal_SupplySideMixer_ = x.SimFlowTerminal_AirTerminal_SupplySideMixer_;
          this->SimFlowTerminal_AirTerminal_Uncontrolled_ = x.SimFlowTerminal_AirTerminal_Uncontrolled_;
          this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_ = x.SimFlowTerminal_AirTerminal_VAV_HeatAndCool_NoReheat_;
          this->SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_ = x.SimFlowTerminal_AirTerminal_VAV_HeatAndCool_Reheat_;
          this->SimFlowTerminal_AirTerminal_VAV_NoReheat_ = x.SimFlowTerminal_AirTerminal_VAV_NoReheat_;
          this->SimFlowTerminal_AirTerminal_VAV_Reheat_ = x.SimFlowTerminal_AirTerminal_VAV_Reheat_;
          this->SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_ = x.SimFlowTerminal_AirTerminal_VAV_Reheat_VariableSpeedFan_;
          this->SimFlowTerminal_Default_Default_ = x.SimFlowTerminal_Default_Default_;
          this->SimFlowTerminal_ElectricalTerminalExterior_Default_ = x.SimFlowTerminal_ElectricalTerminalExterior_Default_;
          this->SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_ = x.SimFlowTerminal_ElectricalTerminalExterior_ElectricalOutlet_;
          this->SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_ = x.SimFlowTerminal_ElectricalTerminalExterior_LightingFixture_;
          this->SimFlowTerminal_ElectricalTerminalInterior_Default_ = x.SimFlowTerminal_ElectricalTerminalInterior_Default_;
          this->SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_ = x.SimFlowTerminal_ElectricalTerminalInterior_ElectricalOutlet_;
          this->SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_ = x.SimFlowTerminal_ElectricalTerminalInterior_LightingFixture_;
          this->SimFlowTerminal_PlumbingTerminal_DishWasher_ = x.SimFlowTerminal_PlumbingTerminal_DishWasher_;
          this->SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_ = x.SimFlowTerminal_PlumbingTerminal_HotWaterFixtureSet_;
          this->SimFlowTerminal_PlumbingTerminal_PlumbingFixture_ = x.SimFlowTerminal_PlumbingTerminal_PlumbingFixture_;
          this->SimFlowTerminal_PlumbingTerminal_Shower_ = x.SimFlowTerminal_PlumbingTerminal_Shower_;
          this->SimFlowTerminal_PlumbingTerminal_Sink_ = x.SimFlowTerminal_PlumbingTerminal_Sink_;
          this->SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_ = x.SimFlowTerminal_PlumbingTerminal_SiteWaterEquipment_;
          this->SimFlowTerminal_PlumbingTerminal_Toilet_ = x.SimFlowTerminal_PlumbingTerminal_Toilet_;
          this->SimFlowTerminal_PlumbingTerminal_Urinal_ = x.SimFlowTerminal_PlumbingTerminal_Urinal_;
          this->SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_ = x.SimFlowTerminal_TerminalUnit_VariableRefrigerantFlow_;
          this->SimFluid_Concentration_Default_ = x.SimFluid_Concentration_Default_;
          this->SimFluid_Default_Default_ = x.SimFluid_Default_Default_;
          this->SimFluid_GlycolConcentration_Default_ = x.SimFluid_GlycolConcentration_Default_;
          this->SimFluid_Name_Default_ = x.SimFluid_Name_Default_;
          this->SimFluid_Saturated_Default_ = x.SimFluid_Saturated_Default_;
          this->SimFluid_SuperHeated_Default_ = x.SimFluid_SuperHeated_Default_;
          this->SimFluid_Temperatures_Default_ = x.SimFluid_Temperatures_Default_;
          this->SimFrameAndDividerProps_FrameAndDivider_Default_ = x.SimFrameAndDividerProps_FrameAndDivider_Default_;
          this->SimFurnishingElement_Default_Default_ = x.SimFurnishingElement_Default_Default_;
          this->SimFurnishingElementType_Furnishing_Default_ = x.SimFurnishingElementType_Furnishing_Default_;
          this->SimFurnishingElementType_Furniture_Default_ = x.SimFurnishingElementType_Furniture_Default_;
          this->SimFurnitureType_Furniture_Default_ = x.SimFurnitureType_Furniture_Default_;
          this->SimGeomBooleanResult_BooleanClippingResult_Default_ = x.SimGeomBooleanResult_BooleanClippingResult_Default_;
          this->SimGeomBooleanResult_BooleanResult_Default_ = x.SimGeomBooleanResult_BooleanResult_Default_;
          this->SimGeomBoundingBox_BoundingBox_Default_ = x.SimGeomBoundingBox_BoundingBox_Default_;
          this->SimGeomCsgPrimative3D_CsgPrimative3D_Block_ = x.SimGeomCsgPrimative3D_CsgPrimative3D_Block_;
          this->SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_ = x.SimGeomCsgPrimative3D_CsgPrimative3D_RectangularPyramid_;
          this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_ = x.SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCone_;
          this->SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_ = x.SimGeomCsgPrimative3D_CsgPrimative3D_RightCircularCylinder_;
          this->SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_ = x.SimGeomCsgPrimative3D_CsgPrimative3D_Sphere_;
          this->SimGeomCurve_2DCompositeCurve_Default_ = x.SimGeomCurve_2DCompositeCurve_Default_;
          this->SimGeomCurve_BoundedCurve_Default_ = x.SimGeomCurve_BoundedCurve_Default_;
          this->SimGeomCurve_Circle_Default_ = x.SimGeomCurve_Circle_Default_;
          this->SimGeomCurve_CompositeCurve_Default_ = x.SimGeomCurve_CompositeCurve_Default_;
          this->SimGeomCurve_CompositeCurveSegment_Default_ = x.SimGeomCurve_CompositeCurveSegment_Default_;
          this->SimGeomCurve_Ellipse_Default_ = x.SimGeomCurve_Ellipse_Default_;
          this->SimGeomCurve_Line_Default_ = x.SimGeomCurve_Line_Default_;
          this->SimGeomCurve_OffsetCurve2D_Default_ = x.SimGeomCurve_OffsetCurve2D_Default_;
          this->SimGeomCurve_OffsetCurve3D_Default_ = x.SimGeomCurve_OffsetCurve3D_Default_;
          this->SimGeomCurve_Polyline_Default_ = x.SimGeomCurve_Polyline_Default_;
          this->SimGeomCurve_TrimmedCurve_Default_ = x.SimGeomCurve_TrimmedCurve_Default_;
          this->SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_ = x.SimGeomHalfSpaceSolid_HalfSpaceSolid_BoxedHalfSpace_;
          this->SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_ = x.SimGeomHalfSpaceSolid_HalfSpaceSolid_PolygonalBoundedHalfSpace_;
          this->SimGeomPoint_Point_CartesianPoint_ = x.SimGeomPoint_Point_CartesianPoint_;
          this->SimGeomPoint_Point_PointOnCurve_ = x.SimGeomPoint_Point_PointOnCurve_;
          this->SimGeomPoint_Point_PointOnSurface_ = x.SimGeomPoint_Point_PointOnSurface_;
          this->SimGeomSet_GeometricCurveSet_Default_ = x.SimGeomSet_GeometricCurveSet_Default_;
          this->SimGeomSet_GeometricSet_Default_ = x.SimGeomSet_GeometricSet_Default_;
          this->SimGeomSolidModel_CSGSolid_Default_ = x.SimGeomSolidModel_CSGSolid_Default_;
          this->SimGeomSolidModel_FacetedBrep_Default_ = x.SimGeomSolidModel_FacetedBrep_Default_;
          this->SimGeomSolidModel_FacetedBrepWithVoids_Default_ = x.SimGeomSolidModel_FacetedBrepWithVoids_Default_;
          this->SimGeomSolidModel_ManifoldSolidBrep_Default_ = x.SimGeomSolidModel_ManifoldSolidBrep_Default_;
          this->SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_ = x.SimGeomSolidModel_SweptAreaSolid_ExtrudedAreaSolid_;
          this->SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_ = x.SimGeomSolidModel_SweptAreaSolid_RevolvedAreaSolid_;
          this->SimGeomSolidModel_SweptDiskSolid_Default_ = x.SimGeomSolidModel_SweptDiskSolid_Default_;
          this->SimGeomSurface_BoundedSurface_CurveBoundedPlane_ = x.SimGeomSurface_BoundedSurface_CurveBoundedPlane_;
          this->SimGeomSurface_BoundedSurface_Default_ = x.SimGeomSurface_BoundedSurface_Default_;
          this->SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_ = x.SimGeomSurface_BoundedSurface_RectangularTrimmedSurface_;
          this->SimGeomSurface_Default_Default_ = x.SimGeomSurface_Default_Default_;
          this->SimGeomSurface_ElementarySurface_Default_ = x.SimGeomSurface_ElementarySurface_Default_;
          this->SimGeomSurface_ElementarySurface_Plane_ = x.SimGeomSurface_ElementarySurface_Plane_;
          this->SimGeomSurface_SweptSurface_Default_ = x.SimGeomSurface_SweptSurface_Default_;
          this->SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_ = x.SimGeomSurface_SweptSurface_SurfaceOfLinearExtrusion_;
          this->SimGeomSurface_SweptSurface_SurfaceOfRevolution_ = x.SimGeomSurface_SweptSurface_SurfaceOfRevolution_;
          this->SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_ = x.SimGeomSurfaceModel_FaceBasedSurfaceModel_Default_;
          this->SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_ = x.SimGeomSurfaceModel_ShellBasedSurfaceModel_Default_;
          this->SimGeomVector_Vector_Default_ = x.SimGeomVector_Vector_Default_;
          this->SimGeomVector_Vector_Direction_ = x.SimGeomVector_Vector_Direction_;
          this->SimGlazingPanelParams_GlazingPanel_Glazing_ = x.SimGlazingPanelParams_GlazingPanel_Glazing_;
          this->SimGridAxis_GridAxis_Default_ = x.SimGridAxis_GridAxis_Default_;
          this->SimGridPlacement_GridPlacement_Default_ = x.SimGridPlacement_GridPlacement_Default_;
          this->SimGroundHeatTransferBasement_BasementTransferModel_Default_ = x.SimGroundHeatTransferBasement_BasementTransferModel_Default_;
          this->SimGroundHeatTransferSlab_SlabTransferModel_Default_ = x.SimGroundHeatTransferSlab_SlabTransferModel_Default_;
          this->SimGroup_BldgCompGroup_AirTerminal_ = x.SimGroup_BldgCompGroup_AirTerminal_;
          this->SimGroup_BldgCompGroup_Coil_ = x.SimGroup_BldgCompGroup_Coil_;
          this->SimGroup_BldgCompGroup_Default_ = x.SimGroup_BldgCompGroup_Default_;
          this->SimGroup_BldgCompGroup_Sensor_ = x.SimGroup_BldgCompGroup_Sensor_;
          this->SimGroup_BldgCompGroup_ZoneController_ = x.SimGroup_BldgCompGroup_ZoneController_;
          this->SimGroup_BldgCompGroup_ZoneEquipment_ = x.SimGroup_BldgCompGroup_ZoneEquipment_;
          this->SimGroup_BldgElementGroup_Default_ = x.SimGroup_BldgElementGroup_Default_;
          this->SimGroup_BuildingGroup_Default_ = x.SimGroup_BuildingGroup_Default_;
          this->SimGroup_ConnectorList_AirConnections_ = x.SimGroup_ConnectorList_AirConnections_;
          this->SimGroup_ConnectorList_ChilledWaterConnections_ = x.SimGroup_ConnectorList_ChilledWaterConnections_;
          this->SimGroup_ConnectorList_CondenserConnections_ = x.SimGroup_ConnectorList_CondenserConnections_;
          this->SimGroup_ConnectorList_ControllerConnections_ = x.SimGroup_ConnectorList_ControllerConnections_;
          this->SimGroup_ConnectorList_HotWaterConnections_ = x.SimGroup_ConnectorList_HotWaterConnections_;
          this->SimGroup_ConnectorList_ServiceHotWaterConnections_ = x.SimGroup_ConnectorList_ServiceHotWaterConnections_;
          this->SimGroup_ConnectorList_SimConnections_ = x.SimGroup_ConnectorList_SimConnections_;
          this->SimGroup_ConnectorList_SteamConnections_ = x.SimGroup_ConnectorList_SteamConnections_;
          this->SimGroup_ControllerList_Default_ = x.SimGroup_ControllerList_Default_;
          this->SimGroup_DefaultGroup_Default_ = x.SimGroup_DefaultGroup_Default_;
          this->SimGroup_DefaultList_Default_ = x.SimGroup_DefaultList_Default_;
          this->SimGroup_EquipmentList_CondenserEquipment_ = x.SimGroup_EquipmentList_CondenserEquipment_;
          this->SimGroup_EquipmentList_ElectricalLoadCenter_ = x.SimGroup_EquipmentList_ElectricalLoadCenter_;
          this->SimGroup_EquipmentList_OutdoorAirSystem_ = x.SimGroup_EquipmentList_OutdoorAirSystem_;
          this->SimGroup_EquipmentList_OutdoorAirUnit_ = x.SimGroup_EquipmentList_OutdoorAirUnit_;
          this->SimGroup_EquipmentList_PlantEquipment_ = x.SimGroup_EquipmentList_PlantEquipment_;
          this->SimGroup_EquipmentList_RefrigerationCompressor_ = x.SimGroup_EquipmentList_RefrigerationCompressor_;
          this->SimGroup_EquipmentList_RefrigerationEquipment_ = x.SimGroup_EquipmentList_RefrigerationEquipment_;
          this->SimGroup_EquipmentList_RefrigerationLoadTransfer_ = x.SimGroup_EquipmentList_RefrigerationLoadTransfer_;
          this->SimGroup_EquipmentList_ServiceHotWater_ = x.SimGroup_EquipmentList_ServiceHotWater_;
          this->SimGroup_EquipmentList_ZoneHvac_ = x.SimGroup_EquipmentList_ZoneHvac_;
          this->SimGroup_HvacDemandGroup_AirSystem_ = x.SimGroup_HvacDemandGroup_AirSystem_;
          this->SimGroup_HvacDemandGroup_RefrigerationSystem_ = x.SimGroup_HvacDemandGroup_RefrigerationSystem_;
          this->SimGroup_HvacDemandGroup_WaterSystem_ = x.SimGroup_HvacDemandGroup_WaterSystem_;
          this->SimGroup_MaterialList_Default_ = x.SimGroup_MaterialList_Default_;
          this->SimGroup_NodeList_Default_ = x.SimGroup_NodeList_Default_;
          this->SimGroup_NodeList_OutdoorAir_ = x.SimGroup_NodeList_OutdoorAir_;
          this->SimGroup_OutputRequestList_Daylighting_ = x.SimGroup_OutputRequestList_Daylighting_;
          this->SimGroup_OutputRequestList_Environmental_ = x.SimGroup_OutputRequestList_Environmental_;
          this->SimGroup_OutputRequestList_Fuel_ = x.SimGroup_OutputRequestList_Fuel_;
          this->SimGroup_OutputRequestList_Geometry_ = x.SimGroup_OutputRequestList_Geometry_;
          this->SimGroup_OutputRequestList_Meters_ = x.SimGroup_OutputRequestList_Meters_;
          this->SimGroup_OutputRequestList_Reports_ = x.SimGroup_OutputRequestList_Reports_;
          this->SimGroup_OutputRequestList_Variables_ = x.SimGroup_OutputRequestList_Variables_;
          this->SimGroup_Refrigeration_ChillerSet_ = x.SimGroup_Refrigeration_ChillerSet_;
          this->SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_ = x.SimGroup_SchemeList_AirLoopAvailabilityMgrScheme_;
          this->SimGroup_SchemeList_AirTempControlScheme_ = x.SimGroup_SchemeList_AirTempControlScheme_;
          this->SimGroup_SchemeList_CondenserOperatingScheme_ = x.SimGroup_SchemeList_CondenserOperatingScheme_;
          this->SimGroup_SchemeList_DemandManagerScheme_ = x.SimGroup_SchemeList_DemandManagerScheme_;
          this->SimGroup_SchemeList_MultiZoneHumidityScheme_ = x.SimGroup_SchemeList_MultiZoneHumidityScheme_;
          this->SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_ = x.SimGroup_SchemeList_PlantLoopAvailabilityMgrScheme_;
          this->SimGroup_SchemeList_PlantOperatingScheme_ = x.SimGroup_SchemeList_PlantOperatingScheme_;
          this->SimGroup_SchemeList_SingleZoneHumidityScheme_ = x.SimGroup_SchemeList_SingleZoneHumidityScheme_;
          this->SimGroup_SchemeList_WaterTempControlScheme_ = x.SimGroup_SchemeList_WaterTempControlScheme_;
          this->SimGroup_SpatialZoneGroup_Daylighting_ = x.SimGroup_SpatialZoneGroup_Daylighting_;
          this->SimGroup_SpatialZoneGroup_Lighting_ = x.SimGroup_SpatialZoneGroup_Lighting_;
          this->SimGroup_SpatialZoneGroup_NaturalVentilation_ = x.SimGroup_SpatialZoneGroup_NaturalVentilation_;
          this->SimGroup_SpatialZoneGroup_PlenumZoneGroup_ = x.SimGroup_SpatialZoneGroup_PlenumZoneGroup_;
          this->SimGroup_SpatialZoneGroup_ServiceHotWater_ = x.SimGroup_SpatialZoneGroup_ServiceHotWater_;
          this->SimGroup_SpatialZoneGroup_ZoneGroup_ = x.SimGroup_SpatialZoneGroup_ZoneGroup_;
          this->SimGroup_SpatialZoneGroup_ZoneHvacGroup_ = x.SimGroup_SpatialZoneGroup_ZoneHvacGroup_;
          this->SimGroup_SurfaceGroup_Default_ = x.SimGroup_SurfaceGroup_Default_;
          this->SimGroup_SurfaceGroup_LowTempRadiant_ = x.SimGroup_SurfaceGroup_LowTempRadiant_;
          this->SimGroup_SurfaceGroup_VentilatedSlab_ = x.SimGroup_SurfaceGroup_VentilatedSlab_;
          this->SimGroup_TemplateOutputRequestList_Daylighting_ = x.SimGroup_TemplateOutputRequestList_Daylighting_;
          this->SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_ = x.SimGroup_TemplateOutputRequestList_FuelAndEnvironmental_;
          this->SimGroup_TemplateOutputRequestList_Geometry_ = x.SimGroup_TemplateOutputRequestList_Geometry_;
          this->SimGroup_TemplateOutputRequestList_Meters_ = x.SimGroup_TemplateOutputRequestList_Meters_;
          this->SimGroup_TemplateOutputRequestList_Reports_ = x.SimGroup_TemplateOutputRequestList_Reports_;
          this->SimGroup_TemplateOutputRequestList_Variables_ = x.SimGroup_TemplateOutputRequestList_Variables_;
          this->SimGroup_VrfList_VrfTerminals_ = x.SimGroup_VrfList_VrfTerminals_;
          this->SimHeatTransAlgProps_HeatTransferAlgProps_Default_ = x.SimHeatTransAlgProps_HeatTransferAlgProps_Default_;
          this->SimInfiltrationOrVentilation_Default_Default_ = x.SimInfiltrationOrVentilation_Default_Default_;
          this->SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_ = x.SimInfiltrationOrVentilation_RoomAirSettings_CrossVentilation_;
          this->SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_ = x.SimInfiltrationOrVentilation_RoomAirSettings_OneNodeDisplacementVentilation_;
          this->SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_ = x.SimInfiltrationOrVentilation_RoomAirSettings_ThreeNodeDisplacementVentilation_;
          this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_ = x.SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionExterior_;
          this->SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_ = x.SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior_;
          this->SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_ = x.SimInfiltrationOrVentilation_RoomAirSettings_UserDefined_;
          this->SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_ = x.SimInfiltrationOrVentilation_RoomAirTempPattern_ConstantGradient_;
          this->SimInfiltrationOrVentilation_RoomAirTempPattern_Default_ = x.SimInfiltrationOrVentilation_RoomAirTempPattern_Default_;
          this->SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_ = x.SimInfiltrationOrVentilation_RoomAirTempPattern_NonDimentionalHeight_;
          this->SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_ = x.SimInfiltrationOrVentilation_RoomAirTempPattern_SurfaceMapping_;
          this->SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_ = x.SimInfiltrationOrVentilation_RoomAirTempPattern_TwoGradient_;
          this->SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_ = x.SimInfiltrationOrVentilation_RoomAirTempPattern_UserDefined_;
          this->SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_ = x.SimInfiltrationOrVentilation_ZoneInfiltration_DesignFlowRate_;
          this->SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_ = x.SimInfiltrationOrVentilation_ZoneInfiltration_EffectiveLeakageArea_;
          this->SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_ = x.SimInfiltrationOrVentilation_ZoneInfiltration_FlowCoefficient_;
          this->SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_ = x.SimInfiltrationOrVentilation_ZoneVentilation_DesignFlowRate_;
          this->SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_ = x.SimInfiltrationOrVentilation_ZoneVentilation_WindAndStackOpenArea_;
          this->SimInternalLoad_ComfortViewFactorAngles_Default_ = x.SimInternalLoad_ComfortViewFactorAngles_Default_;
          this->SimInternalLoad_Default_Default_ = x.SimInternalLoad_Default_Default_;
          this->SimInternalLoad_Equipment_Electric_ = x.SimInternalLoad_Equipment_Electric_;
          this->SimInternalLoad_Equipment_Electric_Elevators_ = x.SimInternalLoad_Equipment_Electric_Elevators_;
          this->SimInternalLoad_Equipment_Electric_Escalators_ = x.SimInternalLoad_Equipment_Electric_Escalators_;
          this->SimInternalLoad_Equipment_Electric_Process_ = x.SimInternalLoad_Equipment_Electric_Process_;
          this->SimInternalLoad_Equipment_Gas_ = x.SimInternalLoad_Equipment_Gas_;
          this->SimInternalLoad_Equipment_Gas_Process_ = x.SimInternalLoad_Equipment_Gas_Process_;
          this->SimInternalLoad_Equipment_HotWater_ = x.SimInternalLoad_Equipment_HotWater_;
          this->SimInternalLoad_Equipment_Other_ = x.SimInternalLoad_Equipment_Other_;
          this->SimInternalLoad_Equipment_Steam_ = x.SimInternalLoad_Equipment_Steam_;
          this->SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_ = x.SimInternalLoad_Equipment_ZoneBasebd_OutdoorTempControlled_;
          this->SimInternalLoad_Lights_Default_ = x.SimInternalLoad_Lights_Default_;
          this->SimInternalLoad_People_Default_ = x.SimInternalLoad_People_Default_;
          this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_ = x.SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantBoudaryLayerDiffusion_;
          this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_ = x.SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantDepositionVelocitySink_;
          this->SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_ = x.SimInternalLoad_SurfaceContaminantSourceAndSink_GenericContaminantPressureDriven_;
          this->SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_ = x.SimInternalLoad_ZoneContaminantSourceAndSink_CarbonDioxide_;
          this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_ = x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantConstant_;
          this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_ = x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantCutoffModel_;
          this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_ = x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDecaySource_;
          this->SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_ = x.SimInternalLoad_ZoneContaminantSourceAndSink_GenericContaminantDepositionRateSink_;
          this->SimIrregularTimeSeries_Irregular_Default_ = x.SimIrregularTimeSeries_Irregular_Default_;
          this->SimIrregularTimeSeriesValue_TimeSeries_Irregular_ = x.SimIrregularTimeSeriesValue_TimeSeries_Irregular_;
          this->SimLightingFixtureType_LightingFixture_Default_ = x.SimLightingFixtureType_LightingFixture_Default_;
          this->SimList_ConnectorList_AirConnections_ = x.SimList_ConnectorList_AirConnections_;
          this->SimList_ConnectorList_ChilledWaterConnections_ = x.SimList_ConnectorList_ChilledWaterConnections_;
          this->SimList_ConnectorList_CondenserConnections_ = x.SimList_ConnectorList_CondenserConnections_;
          this->SimList_ConnectorList_ControllerConnections_ = x.SimList_ConnectorList_ControllerConnections_;
          this->SimList_ConnectorList_HotWaterConnections_ = x.SimList_ConnectorList_HotWaterConnections_;
          this->SimList_ConnectorList_ServiceHotWaterConnections_ = x.SimList_ConnectorList_ServiceHotWaterConnections_;
          this->SimList_ConnectorList_SimConnections_ = x.SimList_ConnectorList_SimConnections_;
          this->SimList_ConnectorList_SteamConnections_ = x.SimList_ConnectorList_SteamConnections_;
          this->SimList_ControllerList_Default_ = x.SimList_ControllerList_Default_;
          this->SimList_DefaultList_Default_ = x.SimList_DefaultList_Default_;
          this->SimList_EquipmentList_CondenserEquipment_ = x.SimList_EquipmentList_CondenserEquipment_;
          this->SimList_EquipmentList_ElectricalLoadCenter_ = x.SimList_EquipmentList_ElectricalLoadCenter_;
          this->SimList_EquipmentList_OutdoorAirSystem_ = x.SimList_EquipmentList_OutdoorAirSystem_;
          this->SimList_EquipmentList_OutdoorAirUnit_ = x.SimList_EquipmentList_OutdoorAirUnit_;
          this->SimList_EquipmentList_PlantEquipment_ = x.SimList_EquipmentList_PlantEquipment_;
          this->SimList_EquipmentList_RefrigerationCompressor_ = x.SimList_EquipmentList_RefrigerationCompressor_;
          this->SimList_EquipmentList_RefrigerationEquipment_ = x.SimList_EquipmentList_RefrigerationEquipment_;
          this->SimList_EquipmentList_RefrigerationLoadTransfer_ = x.SimList_EquipmentList_RefrigerationLoadTransfer_;
          this->SimList_EquipmentList_ServiceHotWater_ = x.SimList_EquipmentList_ServiceHotWater_;
          this->SimList_EquipmentList_ZoneHvac_ = x.SimList_EquipmentList_ZoneHvac_;
          this->SimList_MaterialList_Default_ = x.SimList_MaterialList_Default_;
          this->SimList_NodeList_Default_ = x.SimList_NodeList_Default_;
          this->SimList_NodeList_OutdoorAir_ = x.SimList_NodeList_OutdoorAir_;
          this->SimList_OutputRequestList_Daylighting_ = x.SimList_OutputRequestList_Daylighting_;
          this->SimList_OutputRequestList_Environmental_ = x.SimList_OutputRequestList_Environmental_;
          this->SimList_OutputRequestList_Fuel_ = x.SimList_OutputRequestList_Fuel_;
          this->SimList_OutputRequestList_Geometry_ = x.SimList_OutputRequestList_Geometry_;
          this->SimList_OutputRequestList_Meters_ = x.SimList_OutputRequestList_Meters_;
          this->SimList_OutputRequestList_Reports_ = x.SimList_OutputRequestList_Reports_;
          this->SimList_OutputRequestList_Variables_ = x.SimList_OutputRequestList_Variables_;
          this->SimList_Refrigeration_ChillerSet_ = x.SimList_Refrigeration_ChillerSet_;
          this->SimList_SchemeList_AirLoopAvailabilityMgrScheme_ = x.SimList_SchemeList_AirLoopAvailabilityMgrScheme_;
          this->SimList_SchemeList_AirTempControlScheme_ = x.SimList_SchemeList_AirTempControlScheme_;
          this->SimList_SchemeList_CondenserOperatingScheme_ = x.SimList_SchemeList_CondenserOperatingScheme_;
          this->SimList_SchemeList_DemandManagerScheme_ = x.SimList_SchemeList_DemandManagerScheme_;
          this->SimList_SchemeList_MultiZoneHumidityScheme_ = x.SimList_SchemeList_MultiZoneHumidityScheme_;
          this->SimList_SchemeList_PlantLoopAvailabilityMgrScheme_ = x.SimList_SchemeList_PlantLoopAvailabilityMgrScheme_;
          this->SimList_SchemeList_PlantOperatingScheme_ = x.SimList_SchemeList_PlantOperatingScheme_;
          this->SimList_SchemeList_SingleZoneHumidityScheme_ = x.SimList_SchemeList_SingleZoneHumidityScheme_;
          this->SimList_SchemeList_WaterTempControlScheme_ = x.SimList_SchemeList_WaterTempControlScheme_;
          this->SimList_TemplateOutputRequestList_Daylighting_ = x.SimList_TemplateOutputRequestList_Daylighting_;
          this->SimList_TemplateOutputRequestList_FuelAndEnvironmental_ = x.SimList_TemplateOutputRequestList_FuelAndEnvironmental_;
          this->SimList_TemplateOutputRequestList_Geometry_ = x.SimList_TemplateOutputRequestList_Geometry_;
          this->SimList_TemplateOutputRequestList_Meters_ = x.SimList_TemplateOutputRequestList_Meters_;
          this->SimList_TemplateOutputRequestList_Reports_ = x.SimList_TemplateOutputRequestList_Reports_;
          this->SimList_TemplateOutputRequestList_Variables_ = x.SimList_TemplateOutputRequestList_Variables_;
          this->SimList_VrfList_VrfTerminals_ = x.SimList_VrfList_VrfTerminals_;
          this->SimLocalPlacement_LocalPlacement_AbsolutePlacement_ = x.SimLocalPlacement_LocalPlacement_AbsolutePlacement_;
          this->SimLocalPlacement_LocalPlacement_RelativePlacement_ = x.SimLocalPlacement_LocalPlacement_RelativePlacement_;
          this->SimLocationAndWeather_DesignDay_Default_ = x.SimLocationAndWeather_DesignDay_Default_;
          this->SimLocationAndWeather_Location_Default_ = x.SimLocationAndWeather_Location_Default_;
          this->SimLocationAndWeather_WeatherFile_ConditionType_ = x.SimLocationAndWeather_WeatherFile_ConditionType_;
          this->SimLocationAndWeather_WeatherFile_Days_ = x.SimLocationAndWeather_WeatherFile_Days_;
          this->SimLocationAndWeather_WeatherFile_WeatherStation_ = x.SimLocationAndWeather_WeatherFile_WeatherStation_;
          this->SimLocationAndWeather_WeatherProperty_SkyTemperature_ = x.SimLocationAndWeather_WeatherProperty_SkyTemperature_;
          this->SimLoop_Loop_EdgeLoop_ = x.SimLoop_Loop_EdgeLoop_;
          this->SimLoop_Loop_PolyLoop_ = x.SimLoop_Loop_PolyLoop_;
          this->SimLoop_Loop_VertexLoop_ = x.SimLoop_Loop_VertexLoop_;
          this->SimMappedRepresentationItem_Default_Default_ = x.SimMappedRepresentationItem_Default_Default_;
          this->SimMaterial_Default_Default_ = x.SimMaterial_Default_Default_;
          this->SimMaterial_EquivGlazingMaterial_Blind_ = x.SimMaterial_EquivGlazingMaterial_Blind_;
          this->SimMaterial_EquivGlazingMaterial_Drape_ = x.SimMaterial_EquivGlazingMaterial_Drape_;
          this->SimMaterial_EquivGlazingMaterial_Gap_ = x.SimMaterial_EquivGlazingMaterial_Gap_;
          this->SimMaterial_EquivGlazingMaterial_Glazing_ = x.SimMaterial_EquivGlazingMaterial_Glazing_;
          this->SimMaterial_EquivGlazingMaterial_Screen_ = x.SimMaterial_EquivGlazingMaterial_Screen_;
          this->SimMaterial_EquivGlazingMaterial_Shade_ = x.SimMaterial_EquivGlazingMaterial_Shade_;
          this->SimMaterial_GlazingMaterial_Blind_ = x.SimMaterial_GlazingMaterial_Blind_;
          this->SimMaterial_GlazingMaterial_ComplexShade_ = x.SimMaterial_GlazingMaterial_ComplexShade_;
          this->SimMaterial_GlazingMaterial_Gap_ = x.SimMaterial_GlazingMaterial_Gap_;
          this->SimMaterial_GlazingMaterial_Gas_ = x.SimMaterial_GlazingMaterial_Gas_;
          this->SimMaterial_GlazingMaterial_GasMixture_ = x.SimMaterial_GlazingMaterial_GasMixture_;
          this->SimMaterial_GlazingMaterial_Glazing_ = x.SimMaterial_GlazingMaterial_Glazing_;
          this->SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_ = x.SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod_;
          this->SimMaterial_GlazingMaterial_Screen_ = x.SimMaterial_GlazingMaterial_Screen_;
          this->SimMaterial_GlazingMaterial_Shade_ = x.SimMaterial_GlazingMaterial_Shade_;
          this->SimMaterial_GlazingMaterial_SimpleGlazingSystem_ = x.SimMaterial_GlazingMaterial_SimpleGlazingSystem_;
          this->SimMaterial_GlazingMaterial_Thermochromic_ = x.SimMaterial_GlazingMaterial_Thermochromic_;
          this->SimMaterial_OpaqueMaterial_AirGap_ = x.SimMaterial_OpaqueMaterial_AirGap_;
          this->SimMaterial_OpaqueMaterial_Composite_ = x.SimMaterial_OpaqueMaterial_Composite_;
          this->SimMaterial_OpaqueMaterial_Default_ = x.SimMaterial_OpaqueMaterial_Default_;
          this->SimMaterial_OpaqueMaterial_InfraredTransparent_ = x.SimMaterial_OpaqueMaterial_InfraredTransparent_;
          this->SimMaterial_OpaqueMaterial_Insulation_ = x.SimMaterial_OpaqueMaterial_Insulation_;
          this->SimMaterial_OpaqueMaterial_InsulationMovable_ = x.SimMaterial_OpaqueMaterial_InsulationMovable_;
          this->SimMaterial_OpaqueMaterial_NoMass_ = x.SimMaterial_OpaqueMaterial_NoMass_;
          this->SimMaterial_OpaqueMaterial_Vegetation_ = x.SimMaterial_OpaqueMaterial_Vegetation_;
          this->SimMaterial_VirtualBoundary_Default_ = x.SimMaterial_VirtualBoundary_Default_;
          this->SimMaterialLayer_EquivGlazingLayer_Default_ = x.SimMaterialLayer_EquivGlazingLayer_Default_;
          this->SimMaterialLayer_GlazingMaterialLayer_Default_ = x.SimMaterialLayer_GlazingMaterialLayer_Default_;
          this->SimMaterialLayer_OpaqueMaterialLayer_Default_ = x.SimMaterialLayer_OpaqueMaterialLayer_Default_;
          this->SimMaterialLayer_VirtualBoundaryLayer_Default_ = x.SimMaterialLayer_VirtualBoundaryLayer_Default_;
          this->SimMaterialLayerSet_Default_Default_ = x.SimMaterialLayerSet_Default_Default_;
          this->SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_ = x.SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState_;
          this->SimMaterialLayerSet_GlazingLayerSet_CurtainWall_ = x.SimMaterialLayerSet_GlazingLayerSet_CurtainWall_;
          this->SimMaterialLayerSet_GlazingLayerSet_Default_ = x.SimMaterialLayerSet_GlazingLayerSet_Default_;
          this->SimMaterialLayerSet_GlazingLayerSet_GlassDoor_ = x.SimMaterialLayerSet_GlazingLayerSet_GlassDoor_;
          this->SimMaterialLayerSet_GlazingLayerSet_Window_ = x.SimMaterialLayerSet_GlazingLayerSet_Window_;
          this->SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_ = x.SimMaterialLayerSet_GlazingLayerSet_WindowDataFile_;
          this->SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_ = x.SimMaterialLayerSet_GlazingLayerSet_WindowEquivalentLayer_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Ceiling_ = x.SimMaterialLayerSet_OpaqueLayerSet_Ceiling_;
          this->SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_ = x.SimMaterialLayerSet_OpaqueLayerSet_CfactorUndergroundWall_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Default_ = x.SimMaterialLayerSet_OpaqueLayerSet_Default_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Door_ = x.SimMaterialLayerSet_OpaqueLayerSet_Door_;
          this->SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_ = x.SimMaterialLayerSet_OpaqueLayerSet_FfactorGroundFloor_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Floor_ = x.SimMaterialLayerSet_OpaqueLayerSet_Floor_;
          this->SimMaterialLayerSet_OpaqueLayerSet_InternalSource_ = x.SimMaterialLayerSet_OpaqueLayerSet_InternalSource_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Landing_ = x.SimMaterialLayerSet_OpaqueLayerSet_Landing_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Roof_ = x.SimMaterialLayerSet_OpaqueLayerSet_Roof_;
          this->SimMaterialLayerSet_OpaqueLayerSet_Wall_ = x.SimMaterialLayerSet_OpaqueLayerSet_Wall_;
          this->SimMeasureType_AreaMeasure_Default_ = x.SimMeasureType_AreaMeasure_Default_;
          this->SimMeasureType_CountMeasure_AirChangesPerhour_ = x.SimMeasureType_CountMeasure_AirChangesPerhour_;
          this->SimMeasureType_CountMeasure_Count_ = x.SimMeasureType_CountMeasure_Count_;
          this->SimMeasureType_Default_Default_ = x.SimMeasureType_Default_Default_;
          this->SimMeasureType_EnergyMeasure_Default_ = x.SimMeasureType_EnergyMeasure_Default_;
          this->SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_ = x.SimMeasureType_EnergyMeasure_WattsPerAreaMeasure_;
          this->SimMeasureType_EnergyMeasure_WattsPerPerson_ = x.SimMeasureType_EnergyMeasure_WattsPerPerson_;
          this->SimMeasureType_LengthMeasure_Default_ = x.SimMeasureType_LengthMeasure_Default_;
          this->SimMeasureType_MassMeasure_Default_ = x.SimMeasureType_MassMeasure_Default_;
          this->SimMeasureType_MonetaryMeasure_Default_ = x.SimMeasureType_MonetaryMeasure_Default_;
          this->SimMeasureType_PersonsPerAreaMeasure_Default_ = x.SimMeasureType_PersonsPerAreaMeasure_Default_;
          this->SimMeasureType_RatioMeasure_Default_ = x.SimMeasureType_RatioMeasure_Default_;
          this->SimMeasureType_RatioMeasure_PositiveRatioMeasure_ = x.SimMeasureType_RatioMeasure_PositiveRatioMeasure_;
          this->SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_ = x.SimMeasureType_RotationalAngleMeasure_CompoundPlaneAngleMeasure_;
          this->SimMeasureType_RotationalAngleMeasure_Degrees_ = x.SimMeasureType_RotationalAngleMeasure_Degrees_;
          this->SimMeasureType_ThermodynamicTemperatureMeasure_Default_ = x.SimMeasureType_ThermodynamicTemperatureMeasure_Default_;
          this->SimMeasureType_VolumeMeasure_Default_ = x.SimMeasureType_VolumeMeasure_Default_;
          this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_ = x.SimMeasureType_VolumetricFlowRateMeasure_M3PerSecond_;
          this->SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_ = x.SimMeasureType_VolumetricFlowRateMeasure_M3PerSecondPerPerson_;
          this->SimMember_Default_Default_ = x.SimMember_Default_Default_;
          this->SimMemberParams_Member_Default_ = x.SimMemberParams_Member_Default_;
          this->SimMemberProfileProperties_Beam_Default_ = x.SimMemberProfileProperties_Beam_Default_;
          this->SimMemberProfileProperties_Column_Default_ = x.SimMemberProfileProperties_Column_Default_;
          this->SimMemberProfileProperties_Default_Default_ = x.SimMemberProfileProperties_Default_Default_;
          this->SimModelRepresentationContext_GeometricRepresentationContext_Default_ = x.SimModelRepresentationContext_GeometricRepresentationContext_Default_;
          this->SimModelRepresentationContext_GeometricRepresentationSubContext_Default_ = x.SimModelRepresentationContext_GeometricRepresentationSubContext_Default_;
          this->SimModelRepresentationContext_RepresentationContext_Default_ = x.SimModelRepresentationContext_RepresentationContext_Default_;
          this->SimNode_AirflowNetworkNode_AirDistributionNode_ = x.SimNode_AirflowNetworkNode_AirDistributionNode_;
          this->SimNode_AirflowNetworkNode_ExternalNode_ = x.SimNode_AirflowNetworkNode_ExternalNode_;
          this->SimNode_AirflowNetworkNode_ZoneNode_ = x.SimNode_AirflowNetworkNode_ZoneNode_;
          this->SimNode_AirFlowPort_Air_In_ = x.SimNode_AirFlowPort_Air_In_;
          this->SimNode_AirFlowPort_Air_InOrOut_ = x.SimNode_AirFlowPort_Air_InOrOut_;
          this->SimNode_AirFlowPort_Air_Out_ = x.SimNode_AirFlowPort_Air_Out_;
          this->SimNode_AirFlowPort_Default_ = x.SimNode_AirFlowPort_Default_;
          this->SimNode_AirFlowPort_ExhaustAir_Out_ = x.SimNode_AirFlowPort_ExhaustAir_Out_;
          this->SimNode_AirFlowPort_OutdoorAir_In_ = x.SimNode_AirFlowPort_OutdoorAir_In_;
          this->SimNode_ChilledWaterFlowPort_CondensedWaterOut_ = x.SimNode_ChilledWaterFlowPort_CondensedWaterOut_;
          this->SimNode_ChilledWaterFlowPort_Default_ = x.SimNode_ChilledWaterFlowPort_Default_;
          this->SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_ = x.SimNode_ChilledWaterFlowPort_EvaporativeWaterIn_;
          this->SimNode_ChilledWaterFlowPort_Water_In_ = x.SimNode_ChilledWaterFlowPort_Water_In_;
          this->SimNode_ChilledWaterFlowPort_Water_InOrOut_ = x.SimNode_ChilledWaterFlowPort_Water_InOrOut_;
          this->SimNode_ChilledWaterFlowPort_Water_Out_ = x.SimNode_ChilledWaterFlowPort_Water_Out_;
          this->SimNode_CondenserFlowPort_CondenserFlow_In_ = x.SimNode_CondenserFlowPort_CondenserFlow_In_;
          this->SimNode_CondenserFlowPort_CondenserFlow_InOrOut_ = x.SimNode_CondenserFlowPort_CondenserFlow_InOrOut_;
          this->SimNode_CondenserFlowPort_CondenserFlow_Out_ = x.SimNode_CondenserFlowPort_CondenserFlow_Out_;
          this->SimNode_CondenserFlowPort_Default_ = x.SimNode_CondenserFlowPort_Default_;
          this->SimNode_DaylightingReferencePoint_Default_ = x.SimNode_DaylightingReferencePoint_Default_;
          this->SimNode_DigitalControl_AirLoop_Default_ = x.SimNode_DigitalControl_AirLoop_Default_;
          this->SimNode_DigitalControl_AirLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_AirLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_AirLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_AirLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_CHWLoop_Default_ = x.SimNode_DigitalControl_CHWLoop_Default_;
          this->SimNode_DigitalControl_CHWLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_CHWLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_CHWLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_CWLoop_Default_ = x.SimNode_DigitalControl_CWLoop_Default_;
          this->SimNode_DigitalControl_CWLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_CWLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_CWLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_CWLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_HWLoop_Default_ = x.SimNode_DigitalControl_HWLoop_Default_;
          this->SimNode_DigitalControl_HWLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_HWLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_HWLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_HWLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_MxWLoop_Default_ = x.SimNode_DigitalControl_MxWLoop_Default_;
          this->SimNode_DigitalControl_MxWLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_MxWLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_MxWLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_RFGLoop_Default_ = x.SimNode_DigitalControl_RFGLoop_Default_;
          this->SimNode_DigitalControl_RFGLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_RFGLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_RFGLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_SHWLoop_Default_ = x.SimNode_DigitalControl_SHWLoop_Default_;
          this->SimNode_DigitalControl_SHWLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_SHWLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_SHWLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_STMLoop_Default_ = x.SimNode_DigitalControl_STMLoop_Default_;
          this->SimNode_DigitalControl_STMLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_STMLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_STMLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_STMLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControl_VRFLoop_Default_ = x.SimNode_DigitalControl_VRFLoop_Default_;
          this->SimNode_DigitalControl_VRFLoop_DigitalSignal_In_ = x.SimNode_DigitalControl_VRFLoop_DigitalSignal_In_;
          this->SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ = x.SimNode_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_ = x.SimNode_DigitalControl_VRFLoop_DigitalSignal_Out_;
          this->SimNode_DigitalControlPort_Default_ = x.SimNode_DigitalControlPort_Default_;
          this->SimNode_DigitalControlPort_DigitalSignal_In_ = x.SimNode_DigitalControlPort_DigitalSignal_In_;
          this->SimNode_DigitalControlPort_DigitalSignal_InOrOut_ = x.SimNode_DigitalControlPort_DigitalSignal_InOrOut_;
          this->SimNode_DigitalControlPort_DigitalSignal_Out_ = x.SimNode_DigitalControlPort_DigitalSignal_Out_;
          this->SimNode_DigitalControlPort_DigitalVirtual_ = x.SimNode_DigitalControlPort_DigitalVirtual_;
          this->SimNode_DistributionPort_Default_ = x.SimNode_DistributionPort_Default_;
          this->SimNode_Docking_Default_ = x.SimNode_Docking_Default_;
          this->SimNode_Docking_ThermalZone_ = x.SimNode_Docking_ThermalZone_;
          this->SimNode_ElectricalFlowPort_Default_ = x.SimNode_ElectricalFlowPort_Default_;
          this->SimNode_ElectricalFlowPort_Electrical_In_ = x.SimNode_ElectricalFlowPort_Electrical_In_;
          this->SimNode_ElectricalFlowPort_Electrical_InOrOut_ = x.SimNode_ElectricalFlowPort_Electrical_InOrOut_;
          this->SimNode_ElectricalFlowPort_Electrical_Out_ = x.SimNode_ElectricalFlowPort_Electrical_Out_;
          this->SimNode_HotWaterFlowPort_CondensedWaterOut_ = x.SimNode_HotWaterFlowPort_CondensedWaterOut_;
          this->SimNode_HotWaterFlowPort_Default_ = x.SimNode_HotWaterFlowPort_Default_;
          this->SimNode_HotWaterFlowPort_EvaporativeWaterIn_ = x.SimNode_HotWaterFlowPort_EvaporativeWaterIn_;
          this->SimNode_HotWaterFlowPort_Water_In_ = x.SimNode_HotWaterFlowPort_Water_In_;
          this->SimNode_HotWaterFlowPort_Water_InOrOut_ = x.SimNode_HotWaterFlowPort_Water_InOrOut_;
          this->SimNode_HotWaterFlowPort_Water_Out_ = x.SimNode_HotWaterFlowPort_Water_Out_;
          this->SimNode_MixedWaterFlowPort_CondensedWaterOut_ = x.SimNode_MixedWaterFlowPort_CondensedWaterOut_;
          this->SimNode_MixedWaterFlowPort_Default_ = x.SimNode_MixedWaterFlowPort_Default_;
          this->SimNode_MixedWaterFlowPort_EvaporativeWaterIn_ = x.SimNode_MixedWaterFlowPort_EvaporativeWaterIn_;
          this->SimNode_MixedWaterFlowPort_Water_In_ = x.SimNode_MixedWaterFlowPort_Water_In_;
          this->SimNode_MixedWaterFlowPort_Water_InOrOut_ = x.SimNode_MixedWaterFlowPort_Water_InOrOut_;
          this->SimNode_MixedWaterFlowPort_Water_Out_ = x.SimNode_MixedWaterFlowPort_Water_Out_;
          this->SimNode_Node_Default_ = x.SimNode_Node_Default_;
          this->SimNode_Node_OutdoorAir_ = x.SimNode_Node_OutdoorAir_;
          this->SimNode_Port_Default_ = x.SimNode_Port_Default_;
          this->SimNode_RefrigerationFlowPort_Default_ = x.SimNode_RefrigerationFlowPort_Default_;
          this->SimNode_RefrigerationFlowPort_Refrigeration_In_ = x.SimNode_RefrigerationFlowPort_Refrigeration_In_;
          this->SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_ = x.SimNode_RefrigerationFlowPort_Refrigeration_InOrOut_;
          this->SimNode_RefrigerationFlowPort_Refrigeration_Out_ = x.SimNode_RefrigerationFlowPort_Refrigeration_Out_;
          this->SimNode_ServiceHotWaterFlowPort_Default_ = x.SimNode_ServiceHotWaterFlowPort_Default_;
          this->SimNode_ServiceHotWaterFlowPort_Water_In_ = x.SimNode_ServiceHotWaterFlowPort_Water_In_;
          this->SimNode_ServiceHotWaterFlowPort_Water_InOrOut_ = x.SimNode_ServiceHotWaterFlowPort_Water_InOrOut_;
          this->SimNode_ServiceHotWaterFlowPort_Water_Out_ = x.SimNode_ServiceHotWaterFlowPort_Water_Out_;
          this->SimNode_SetpointNode_Default_ = x.SimNode_SetpointNode_Default_;
          this->SimNode_SteamFlowPort_Default_ = x.SimNode_SteamFlowPort_Default_;
          this->SimNode_SteamFlowPort_Steam_In_ = x.SimNode_SteamFlowPort_Steam_In_;
          this->SimNode_SteamFlowPort_Steam_InOrOut_ = x.SimNode_SteamFlowPort_Steam_InOrOut_;
          this->SimNode_SteamFlowPort_Steam_Out_ = x.SimNode_SteamFlowPort_Steam_Out_;
          this->SimNode_VarRefrigerantFlowPort_Default_ = x.SimNode_VarRefrigerantFlowPort_Default_;
          this->SimNode_VarRefrigerantFlowPort_VRF_In_ = x.SimNode_VarRefrigerantFlowPort_VRF_In_;
          this->SimNode_VarRefrigerantFlowPort_VRF_InOrOut_ = x.SimNode_VarRefrigerantFlowPort_VRF_InOrOut_;
          this->SimNode_VarRefrigerantFlowPort_VRF_Out_ = x.SimNode_VarRefrigerantFlowPort_VRF_Out_;
          this->SimNode_ZoneAirFlowPort_Air_In_ = x.SimNode_ZoneAirFlowPort_Air_In_;
          this->SimNode_ZoneAirFlowPort_Air_Out_ = x.SimNode_ZoneAirFlowPort_Air_Out_;
          this->SimNode_ZoneAirNode_Default_ = x.SimNode_ZoneAirNode_Default_;
          this->SimObjectOutputRequestSet_Default_Default_ = x.SimObjectOutputRequestSet_Default_Default_;
          this->SimOpeningType_Opening_Default_ = x.SimOpeningType_Opening_Default_;
          this->SimOrganization_Organization_Default_ = x.SimOrganization_Organization_Default_;
          this->SimOwnerHistory_Default_Default_ = x.SimOwnerHistory_Default_Default_;
          this->SimPanel_Default_Default_ = x.SimPanel_Default_Default_;
          this->SimPanelArrayParams_PanelArrayParams_Default_ = x.SimPanelArrayParams_PanelArrayParams_Default_;
          this->SimPanelArrayParams_SolarShadeArray_Default_ = x.SimPanelArrayParams_SolarShadeArray_Default_;
          this->SimPanelParams_GlazingPanel_Glazing_ = x.SimPanelParams_GlazingPanel_Glazing_;
          this->SimPanelParams_PanelParams_Default_ = x.SimPanelParams_PanelParams_Default_;
          this->SimPanelParams_ShadePanel_SolarShading_ = x.SimPanelParams_ShadePanel_SolarShading_;
          this->SimParameterizedProfileDef_ParameterizedProfile_C_Shape_ = x.SimParameterizedProfileDef_ParameterizedProfile_C_Shape_;
          this->SimParameterizedProfileDef_ParameterizedProfile_Circle_ = x.SimParameterizedProfileDef_ParameterizedProfile_Circle_;
          this->SimParameterizedProfileDef_ParameterizedProfile_Ellipse_ = x.SimParameterizedProfileDef_ParameterizedProfile_Ellipse_;
          this->SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_ = x.SimParameterizedProfileDef_ParameterizedProfile_HollowRectangle_;
          this->SimParameterizedProfileDef_ParameterizedProfile_I_Shape_ = x.SimParameterizedProfileDef_ParameterizedProfile_I_Shape_;
          this->SimParameterizedProfileDef_ParameterizedProfile_L_Shape_ = x.SimParameterizedProfileDef_ParameterizedProfile_L_Shape_;
          this->SimParameterizedProfileDef_ParameterizedProfile_Rectangle_ = x.SimParameterizedProfileDef_ParameterizedProfile_Rectangle_;
          this->SimParameterizedProfileDef_ParameterizedProfile_T_Shape_ = x.SimParameterizedProfileDef_ParameterizedProfile_T_Shape_;
          this->SimParameterizedProfileDef_ParameterizedProfile_U_Shape_ = x.SimParameterizedProfileDef_ParameterizedProfile_U_Shape_;
          this->SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_ = x.SimParameterizedProfileDef_ParameterizedProfile_Z_Shape_;
          this->SimPerformanceCurve_Mathematical_Bicubic_ = x.SimPerformanceCurve_Mathematical_Bicubic_;
          this->SimPerformanceCurve_Mathematical_Biquadratic_ = x.SimPerformanceCurve_Mathematical_Biquadratic_;
          this->SimPerformanceCurve_Mathematical_Cubic_ = x.SimPerformanceCurve_Mathematical_Cubic_;
          this->SimPerformanceCurve_Mathematical_DoubleExponentialDecay_ = x.SimPerformanceCurve_Mathematical_DoubleExponentialDecay_;
          this->SimPerformanceCurve_Mathematical_Exponent_ = x.SimPerformanceCurve_Mathematical_Exponent_;
          this->SimPerformanceCurve_Mathematical_ExponentialDecay_ = x.SimPerformanceCurve_Mathematical_ExponentialDecay_;
          this->SimPerformanceCurve_Mathematical_ExponentialSkewNormal_ = x.SimPerformanceCurve_Mathematical_ExponentialSkewNormal_;
          this->SimPerformanceCurve_Mathematical_FanPressureRise_ = x.SimPerformanceCurve_Mathematical_FanPressureRise_;
          this->SimPerformanceCurve_Mathematical_Linear_ = x.SimPerformanceCurve_Mathematical_Linear_;
          this->SimPerformanceCurve_Mathematical_QuadLinear_ = x.SimPerformanceCurve_Mathematical_QuadLinear_;
          this->SimPerformanceCurve_Mathematical_Quadratic_ = x.SimPerformanceCurve_Mathematical_Quadratic_;
          this->SimPerformanceCurve_Mathematical_QuadraticLinear_ = x.SimPerformanceCurve_Mathematical_QuadraticLinear_;
          this->SimPerformanceCurve_Mathematical_Quartic_ = x.SimPerformanceCurve_Mathematical_Quartic_;
          this->SimPerformanceCurve_Mathematical_RectangularHyperbola1_ = x.SimPerformanceCurve_Mathematical_RectangularHyperbola1_;
          this->SimPerformanceCurve_Mathematical_RectangularHyperbola2_ = x.SimPerformanceCurve_Mathematical_RectangularHyperbola2_;
          this->SimPerformanceCurve_Mathematical_Sigmoid_ = x.SimPerformanceCurve_Mathematical_Sigmoid_;
          this->SimPerformanceCurve_Mathematical_TriQuadratic_ = x.SimPerformanceCurve_Mathematical_TriQuadratic_;
          this->SimPerformanceCurve_Relational_PressureDrop_ = x.SimPerformanceCurve_Relational_PressureDrop_;
          this->SimPerformanceTable_Variable_MultiLookup_ = x.SimPerformanceTable_Variable_MultiLookup_;
          this->SimPerformanceTable_Variable_OneIndependent_ = x.SimPerformanceTable_Variable_OneIndependent_;
          this->SimPerformanceTable_Variable_TwoIndependent_ = x.SimPerformanceTable_Variable_TwoIndependent_;
          this->SimPerson_Person_Default_ = x.SimPerson_Person_Default_;
          this->SimPersonAndOrganization_PersonAndOrganization_Architect_ = x.SimPersonAndOrganization_PersonAndOrganization_Architect_;
          this->SimPersonAndOrganization_PersonAndOrganization_Default_ = x.SimPersonAndOrganization_PersonAndOrganization_Default_;
          this->SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_ = x.SimPersonAndOrganization_PersonAndOrganization_DocumentAuthor_;
          this->SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_ = x.SimPersonAndOrganization_PersonAndOrganization_EnergyConsultant_;
          this->SimPersonAndOrganization_PersonAndOrganization_Engineer_ = x.SimPersonAndOrganization_PersonAndOrganization_Engineer_;
          this->SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_ = x.SimPersonAndOrganization_PersonAndOrganization_LightingDesigner_;
          this->SimPersonAndOrganization_PersonAndOrganization_Owner_ = x.SimPersonAndOrganization_PersonAndOrganization_Owner_;
          this->SimPlacement_Axis1Placement_Default_ = x.SimPlacement_Axis1Placement_Default_;
          this->SimPlacement_Axis2Placement2D_Default_ = x.SimPlacement_Axis2Placement2D_Default_;
          this->SimPlacement_Axis2Placement3D_Default_ = x.SimPlacement_Axis2Placement3D_Default_;
          this->SimPort_AirFlowPort_Air_In_ = x.SimPort_AirFlowPort_Air_In_;
          this->SimPort_AirFlowPort_Air_InOrOut_ = x.SimPort_AirFlowPort_Air_InOrOut_;
          this->SimPort_AirFlowPort_Air_Out_ = x.SimPort_AirFlowPort_Air_Out_;
          this->SimPort_AirFlowPort_Default_ = x.SimPort_AirFlowPort_Default_;
          this->SimPort_AirFlowPort_ExhaustAir_Out_ = x.SimPort_AirFlowPort_ExhaustAir_Out_;
          this->SimPort_AirFlowPort_OutdoorAir_In_ = x.SimPort_AirFlowPort_OutdoorAir_In_;
          this->SimPort_ChilledWaterFlowPort_CondensedWaterOut_ = x.SimPort_ChilledWaterFlowPort_CondensedWaterOut_;
          this->SimPort_ChilledWaterFlowPort_Default_ = x.SimPort_ChilledWaterFlowPort_Default_;
          this->SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_ = x.SimPort_ChilledWaterFlowPort_EvaporativeWaterIn_;
          this->SimPort_ChilledWaterFlowPort_Water_In_ = x.SimPort_ChilledWaterFlowPort_Water_In_;
          this->SimPort_ChilledWaterFlowPort_Water_InOrOut_ = x.SimPort_ChilledWaterFlowPort_Water_InOrOut_;
          this->SimPort_ChilledWaterFlowPort_Water_Out_ = x.SimPort_ChilledWaterFlowPort_Water_Out_;
          this->SimPort_CondenserFlowPort_CondenserFlow_In_ = x.SimPort_CondenserFlowPort_CondenserFlow_In_;
          this->SimPort_CondenserFlowPort_CondenserFlow_InOrOut_ = x.SimPort_CondenserFlowPort_CondenserFlow_InOrOut_;
          this->SimPort_CondenserFlowPort_CondenserFlow_Out_ = x.SimPort_CondenserFlowPort_CondenserFlow_Out_;
          this->SimPort_CondenserFlowPort_Default_ = x.SimPort_CondenserFlowPort_Default_;
          this->SimPort_DigitalControl_AirLoop_Default_ = x.SimPort_DigitalControl_AirLoop_Default_;
          this->SimPort_DigitalControl_AirLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_AirLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_AirLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_AirLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_AirLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_CHWLoop_Default_ = x.SimPort_DigitalControl_CHWLoop_Default_;
          this->SimPort_DigitalControl_CHWLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_CHWLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_CHWLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_CHWLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_CWLoop_Default_ = x.SimPort_DigitalControl_CWLoop_Default_;
          this->SimPort_DigitalControl_CWLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_CWLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_CWLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_CWLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_CWLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_HWLoop_Default_ = x.SimPort_DigitalControl_HWLoop_Default_;
          this->SimPort_DigitalControl_HWLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_HWLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_HWLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_HWLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_HWLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_MxWLoop_Default_ = x.SimPort_DigitalControl_MxWLoop_Default_;
          this->SimPort_DigitalControl_MxWLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_MxWLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_MxWLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_MxWLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_RFGLoop_Default_ = x.SimPort_DigitalControl_RFGLoop_Default_;
          this->SimPort_DigitalControl_RFGLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_RFGLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_RFGLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_RFGLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_SHWLoop_Default_ = x.SimPort_DigitalControl_SHWLoop_Default_;
          this->SimPort_DigitalControl_SHWLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_SHWLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_SHWLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_SHWLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_STMLoop_Default_ = x.SimPort_DigitalControl_STMLoop_Default_;
          this->SimPort_DigitalControl_STMLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_STMLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_STMLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_STMLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_STMLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControl_VRFLoop_Default_ = x.SimPort_DigitalControl_VRFLoop_Default_;
          this->SimPort_DigitalControl_VRFLoop_DigitalSignal_In_ = x.SimPort_DigitalControl_VRFLoop_DigitalSignal_In_;
          this->SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_ = x.SimPort_DigitalControl_VRFLoop_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_ = x.SimPort_DigitalControl_VRFLoop_DigitalSignal_Out_;
          this->SimPort_DigitalControlPort_Default_ = x.SimPort_DigitalControlPort_Default_;
          this->SimPort_DigitalControlPort_DigitalSignal_In_ = x.SimPort_DigitalControlPort_DigitalSignal_In_;
          this->SimPort_DigitalControlPort_DigitalSignal_InOrOut_ = x.SimPort_DigitalControlPort_DigitalSignal_InOrOut_;
          this->SimPort_DigitalControlPort_DigitalSignal_Out_ = x.SimPort_DigitalControlPort_DigitalSignal_Out_;
          this->SimPort_DigitalControlPort_DigitalVirtual_ = x.SimPort_DigitalControlPort_DigitalVirtual_;
          this->SimPort_DistributionPort_Default_ = x.SimPort_DistributionPort_Default_;
          this->SimPort_Docking_Default_ = x.SimPort_Docking_Default_;
          this->SimPort_Docking_ThermalZone_ = x.SimPort_Docking_ThermalZone_;
          this->SimPort_ElectricalFlowPort_Default_ = x.SimPort_ElectricalFlowPort_Default_;
          this->SimPort_ElectricalFlowPort_Electrical_In_ = x.SimPort_ElectricalFlowPort_Electrical_In_;
          this->SimPort_ElectricalFlowPort_Electrical_InOrOut_ = x.SimPort_ElectricalFlowPort_Electrical_InOrOut_;
          this->SimPort_ElectricalFlowPort_Electrical_Out_ = x.SimPort_ElectricalFlowPort_Electrical_Out_;
          this->SimPort_HotWaterFlowPort_CondensedWaterOut_ = x.SimPort_HotWaterFlowPort_CondensedWaterOut_;
          this->SimPort_HotWaterFlowPort_Default_ = x.SimPort_HotWaterFlowPort_Default_;
          this->SimPort_HotWaterFlowPort_EvaporativeWaterIn_ = x.SimPort_HotWaterFlowPort_EvaporativeWaterIn_;
          this->SimPort_HotWaterFlowPort_Water_In_ = x.SimPort_HotWaterFlowPort_Water_In_;
          this->SimPort_HotWaterFlowPort_Water_InOrOut_ = x.SimPort_HotWaterFlowPort_Water_InOrOut_;
          this->SimPort_HotWaterFlowPort_Water_Out_ = x.SimPort_HotWaterFlowPort_Water_Out_;
          this->SimPort_MixedWaterFlowPort_CondensedWaterOut_ = x.SimPort_MixedWaterFlowPort_CondensedWaterOut_;
          this->SimPort_MixedWaterFlowPort_Default_ = x.SimPort_MixedWaterFlowPort_Default_;
          this->SimPort_MixedWaterFlowPort_EvaporativeWaterIn_ = x.SimPort_MixedWaterFlowPort_EvaporativeWaterIn_;
          this->SimPort_MixedWaterFlowPort_Water_In_ = x.SimPort_MixedWaterFlowPort_Water_In_;
          this->SimPort_MixedWaterFlowPort_Water_InOrOut_ = x.SimPort_MixedWaterFlowPort_Water_InOrOut_;
          this->SimPort_MixedWaterFlowPort_Water_Out_ = x.SimPort_MixedWaterFlowPort_Water_Out_;
          this->SimPort_Port_Default_ = x.SimPort_Port_Default_;
          this->SimPort_RefrigerationFlowPort_Default_ = x.SimPort_RefrigerationFlowPort_Default_;
          this->SimPort_RefrigerationFlowPort_Refrigeration_In_ = x.SimPort_RefrigerationFlowPort_Refrigeration_In_;
          this->SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_ = x.SimPort_RefrigerationFlowPort_Refrigeration_InOrOut_;
          this->SimPort_RefrigerationFlowPort_Refrigeration_Out_ = x.SimPort_RefrigerationFlowPort_Refrigeration_Out_;
          this->SimPort_ServiceHotWaterFlowPort_Default_ = x.SimPort_ServiceHotWaterFlowPort_Default_;
          this->SimPort_ServiceHotWaterFlowPort_Water_In_ = x.SimPort_ServiceHotWaterFlowPort_Water_In_;
          this->SimPort_ServiceHotWaterFlowPort_Water_InOrOut_ = x.SimPort_ServiceHotWaterFlowPort_Water_InOrOut_;
          this->SimPort_ServiceHotWaterFlowPort_Water_Out_ = x.SimPort_ServiceHotWaterFlowPort_Water_Out_;
          this->SimPort_SteamFlowPort_Default_ = x.SimPort_SteamFlowPort_Default_;
          this->SimPort_SteamFlowPort_Steam_In_ = x.SimPort_SteamFlowPort_Steam_In_;
          this->SimPort_SteamFlowPort_Steam_InOrOut_ = x.SimPort_SteamFlowPort_Steam_InOrOut_;
          this->SimPort_SteamFlowPort_Steam_Out_ = x.SimPort_SteamFlowPort_Steam_Out_;
          this->SimPort_VarRefrigerantFlowPort_Default_ = x.SimPort_VarRefrigerantFlowPort_Default_;
          this->SimPort_VarRefrigerantFlowPort_VRF_In_ = x.SimPort_VarRefrigerantFlowPort_VRF_In_;
          this->SimPort_VarRefrigerantFlowPort_VRF_InOrOut_ = x.SimPort_VarRefrigerantFlowPort_VRF_InOrOut_;
          this->SimPort_VarRefrigerantFlowPort_VRF_Out_ = x.SimPort_VarRefrigerantFlowPort_VRF_Out_;
          this->SimPort_ZoneAirFlowPort_Air_In_ = x.SimPort_ZoneAirFlowPort_Air_In_;
          this->SimPort_ZoneAirFlowPort_Air_Out_ = x.SimPort_ZoneAirFlowPort_Air_Out_;
          this->SimPresentationLayerAssignment_Default_Default_ = x.SimPresentationLayerAssignment_Default_Default_;
          this->SimProfileParams_Member_Default_ = x.SimProfileParams_Member_Default_;
          this->SimProfileParams_ProfileParams_Default_ = x.SimProfileParams_ProfileParams_Default_;
          this->SimProject_Project_Backpack_ = x.SimProject_Project_Backpack_;
          this->SimProject_Project_DesignAlternative_ = x.SimProject_Project_DesignAlternative_;
          this->SimProject_Project_SBD_View_ = x.SimProject_Project_SBD_View_;
          this->SimProject_Project_T24_View_ = x.SimProject_Project_T24_View_;
          this->SimPropertyListValue_SimpleProp_ListValue_ = x.SimPropertyListValue_SimpleProp_ListValue_;
          this->SimPropertySet_PropertySet_Default_ = x.SimPropertySet_PropertySet_Default_;
          this->SimPropertySingleValue_SimpleProp_SingleValue_ = x.SimPropertySingleValue_SimpleProp_SingleValue_;
          this->SimRailing_Default_Default_ = x.SimRailing_Default_Default_;
          this->SimRailing_GuardRailing_Default_ = x.SimRailing_GuardRailing_Default_;
          this->SimRailing_HandRailing_Default_ = x.SimRailing_HandRailing_Default_;
          this->SimRailingParams_Railing_Default_ = x.SimRailingParams_Railing_Default_;
          this->SimRamp_Ramp_Default_ = x.SimRamp_Ramp_Default_;
          this->SimRampFlight_Default_Default_ = x.SimRampFlight_Default_Default_;
          this->SimRampFlightParams_RampFlight_Default_ = x.SimRampFlightParams_RampFlight_Default_;
          this->SimRampParams_Ramp_Default_ = x.SimRampParams_Ramp_Default_;
          this->SimRefrigerationSystemElement_Compressor_Default_ = x.SimRefrigerationSystemElement_Compressor_Default_;
          this->SimRefrigerationSystemElement_Condenser_AirCooled_ = x.SimRefrigerationSystemElement_Condenser_AirCooled_;
          this->SimRefrigerationSystemElement_Condenser_Cascade_ = x.SimRefrigerationSystemElement_Condenser_Cascade_;
          this->SimRefrigerationSystemElement_Condenser_EvaporativeCooled_ = x.SimRefrigerationSystemElement_Condenser_EvaporativeCooled_;
          this->SimRefrigerationSystemElement_Condenser_WaterCooled_ = x.SimRefrigerationSystemElement_Condenser_WaterCooled_;
          this->SimRefrigerationSystemElement_Default_Default_ = x.SimRefrigerationSystemElement_Default_Default_;
          this->SimRefrigerationSystemElement_GasCooler_AirCooled_ = x.SimRefrigerationSystemElement_GasCooler_AirCooled_;
          this->SimRefrigerationSystemElement_PackagedCompressorRack_Default_ = x.SimRefrigerationSystemElement_PackagedCompressorRack_Default_;
          this->SimRefrigerationSystemElement_RefrigeratedCase_Default_ = x.SimRefrigerationSystemElement_RefrigeratedCase_Default_;
          this->SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_ = x.SimRefrigerationSystemElement_RefrigerationChiller_AirChiller_;
          this->SimRefrigerationSystemElement_Subcooler_Default_ = x.SimRefrigerationSystemElement_Subcooler_Default_;
          this->SimRefrigerationSystemElement_WalkInCooler_Default_ = x.SimRefrigerationSystemElement_WalkInCooler_Default_;
          this->SimRegularTimeSeries_Regular_Default_ = x.SimRegularTimeSeries_Regular_Default_;
          this->SimRepresentationMap_RepresentationMap_Default_ = x.SimRepresentationMap_RepresentationMap_Default_;
          this->SimResourceConsumption_ExteriorConsumption_Default_ = x.SimResourceConsumption_ExteriorConsumption_Default_;
          this->SimResourceConsumption_ExteriorConsumption_Electricity_ = x.SimResourceConsumption_ExteriorConsumption_Electricity_;
          this->SimResourceConsumption_ExteriorConsumption_Fuel_ = x.SimResourceConsumption_ExteriorConsumption_Fuel_;
          this->SimResourceConsumption_ExteriorConsumption_NaturalGas_ = x.SimResourceConsumption_ExteriorConsumption_NaturalGas_;
          this->SimResourceConsumption_ExteriorConsumption_Water_ = x.SimResourceConsumption_ExteriorConsumption_Water_;
          this->SimResourceConsumption_InteriorConsumption_Default_ = x.SimResourceConsumption_InteriorConsumption_Default_;
          this->SimResultsGuide_ResultsGuide_CustomTemplate_ = x.SimResultsGuide_ResultsGuide_CustomTemplate_;
          this->SimResultsGuide_ResultsGuide_Default_ = x.SimResultsGuide_ResultsGuide_Default_;
          this->SimResultsGuide_ResultsGuide_PackageTemplate_ = x.SimResultsGuide_ResultsGuide_PackageTemplate_;
          this->SimResultsTextInfo_ResultsTextInfo_Default_ = x.SimResultsTextInfo_ResultsTextInfo_Default_;
          this->SimResultsVariables_ResultsVariables_Default_ = x.SimResultsVariables_ResultsVariables_Default_;
          this->SimResultsView_ResultsView_Default_ = x.SimResultsView_ResultsView_Default_;
          this->SimResultsViewSet_ResultsViewSet_Default_ = x.SimResultsViewSet_ResultsViewSet_Default_;
          this->SimRoof_Roof_Default_ = x.SimRoof_Roof_Default_;
          this->SimSensor_AirVelocitySensor_Default_ = x.SimSensor_AirVelocitySensor_Default_;
          this->SimSensor_Default_Default_ = x.SimSensor_Default_Default_;
          this->SimSensor_FireSensor_Default_ = x.SimSensor_FireSensor_Default_;
          this->SimSensor_GasSensor_CO2Sensor_ = x.SimSensor_GasSensor_CO2Sensor_;
          this->SimSensor_GasSensor_SmokeSensor_ = x.SimSensor_GasSensor_SmokeSensor_;
          this->SimSensor_HeatSensor_Default_ = x.SimSensor_HeatSensor_Default_;
          this->SimSensor_LuxSensor_Default_ = x.SimSensor_LuxSensor_Default_;
          this->SimSensor_Meter_AirFlowRateMeter_ = x.SimSensor_Meter_AirFlowRateMeter_;
          this->SimSensor_Meter_FluidFlowRateMeter_ = x.SimSensor_Meter_FluidFlowRateMeter_;
          this->SimSensor_Meter_HvacZoneWaterUseMeter_ = x.SimSensor_Meter_HvacZoneWaterUseMeter_;
          this->SimSensor_MovementSensor_Default_ = x.SimSensor_MovementSensor_Default_;
          this->SimSensor_PressureSensor_Default_ = x.SimSensor_PressureSensor_Default_;
          this->SimSensor_RelativeHumidity_Type1_ = x.SimSensor_RelativeHumidity_Type1_;
          this->SimSensor_RelativeHumidity_Type2_ = x.SimSensor_RelativeHumidity_Type2_;
          this->SimSensor_SolarRadiation_Default_ = x.SimSensor_SolarRadiation_Default_;
          this->SimSensor_SoundSensor_Default_ = x.SimSensor_SoundSensor_Default_;
          this->SimSensor_TemperatureSensor_DryBulb_ = x.SimSensor_TemperatureSensor_DryBulb_;
          this->SimSensor_TemperatureSensor_Fluid_ = x.SimSensor_TemperatureSensor_Fluid_;
          this->SimSensor_TemperatureSensor_Radiant_ = x.SimSensor_TemperatureSensor_Radiant_;
          this->SimSensor_TemperatureSensor_WetBulb_ = x.SimSensor_TemperatureSensor_WetBulb_;
          this->SimSensor_VirtualSensor_EmsSensor_ = x.SimSensor_VirtualSensor_EmsSensor_;
          this->SimShapeRepresentation_ShapeRepresentation_Default_ = x.SimShapeRepresentation_ShapeRepresentation_Default_;
          this->SimSimpleProperty_SimpleProp_Default_ = x.SimSimpleProperty_SimpleProp_Default_;
          this->SimSimpleProperty_SimpleProp_ListValue_ = x.SimSimpleProperty_SimpleProp_ListValue_;
          this->SimSimpleProperty_SimpleProp_SingleValue_ = x.SimSimpleProperty_SimpleProp_SingleValue_;
          this->SimSimulationConfiguration_SimulationConfiguration_Default_ = x.SimSimulationConfiguration_SimulationConfiguration_Default_;
          this->SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_ = x.SimSimulationConfiguration_StandardsConfiguration_ASHRAE90_1_;
          this->SimSimulationConfiguration_StandardsConfiguration_LEED_ = x.SimSimulationConfiguration_StandardsConfiguration_LEED_;
          this->SimSimulationConfiguration_StandardsConfiguration_SBDH_ = x.SimSimulationConfiguration_StandardsConfiguration_SBDH_;
          this->SimSimulationConfiguration_StandardsConfiguration_T24_ = x.SimSimulationConfiguration_StandardsConfiguration_T24_;
          this->SimSimulationOutputFormat_ControlReportingTolerances_Default_ = x.SimSimulationOutputFormat_ControlReportingTolerances_Default_;
          this->SimSimulationOutputFormat_ControlSizingStyle_Default_ = x.SimSimulationOutputFormat_ControlSizingStyle_Default_;
          this->SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_ = x.SimSimulationOutputFormat_ControlSurfaceColorScheme_Default_;
          this->SimSimulationOutputFormat_ControlTableStyle_Default_ = x.SimSimulationOutputFormat_ControlTableStyle_Default_;
          this->SimSimulationOutputFormat_Default_Default_ = x.SimSimulationOutputFormat_Default_Default_;
          this->SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_ = x.SimSimulationOutputFormat_OutputControlIlluminanceMapStyle_Default_;
          this->SimSimulationOutputRequest_Daylighting_DaylightFactors_ = x.SimSimulationOutputRequest_Daylighting_DaylightFactors_;
          this->SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_ = x.SimSimulationOutputRequest_Daylighting_ReportReqIlluminanceMap_;
          this->SimSimulationOutputRequest_Default_Default_ = x.SimSimulationOutputRequest_Default_Default_;
          this->SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_ = x.SimSimulationOutputRequest_FuelAndEnvironmental_EnvironmentalImpactFactors_;
          this->SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_ = x.SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors_;
          this->SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_ = x.SimSimulationOutputRequest_FuelAndEnvironmental_VarReqEnvironmentalImpactFactors_;
          this->SimSimulationOutputRequest_General_ReportReqDebuggingData_ = x.SimSimulationOutputRequest_General_ReportReqDebuggingData_;
          this->SimSimulationOutputRequest_General_ReportReqDiagnostics_ = x.SimSimulationOutputRequest_General_ReportReqDiagnostics_;
          this->SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_ = x.SimSimulationOutputRequest_General_ReportReqEnergyManagementSystem_;
          this->SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_ = x.SimSimulationOutputRequest_General_ReportReqPreprocessorMessage_;
          this->SimSimulationOutputRequest_General_ReportReqSchedules_ = x.SimSimulationOutputRequest_General_ReportReqSchedules_;
          this->SimSimulationOutputRequest_General_ReportReqSQLite_ = x.SimSimulationOutputRequest_General_ReportReqSQLite_;
          this->SimSimulationOutputRequest_General_ReportReqVariableDictionary_ = x.SimSimulationOutputRequest_General_ReportReqVariableDictionary_;
          this->SimSimulationOutputRequest_Geometry_ReportReqConstructions_ = x.SimSimulationOutputRequest_Geometry_ReportReqConstructions_;
          this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_ = x.SimSimulationOutputRequest_Geometry_ReportReqSurfacesDrawing_;
          this->SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_ = x.SimSimulationOutputRequest_Geometry_ReportReqSurfacesList_;
          this->SimSimulationOutputRequest_Meters_EnergyEndUseCategory_ = x.SimSimulationOutputRequest_Meters_EnergyEndUseCategory_;
          this->SimSimulationOutputRequest_Meters_MeterCumulative_ = x.SimSimulationOutputRequest_Meters_MeterCumulative_;
          this->SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_ = x.SimSimulationOutputRequest_Meters_MeterCumulativeMeterFileOnly_;
          this->SimSimulationOutputRequest_Meters_MeterFileOnly_ = x.SimSimulationOutputRequest_Meters_MeterFileOnly_;
          this->SimSimulationOutputRequest_Meters_VarReqMeter_ = x.SimSimulationOutputRequest_Meters_VarReqMeter_;
          this->SimSimulationOutputRequest_Meters_VarReqMeterCustom_ = x.SimSimulationOutputRequest_Meters_VarReqMeterCustom_;
          this->SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_ = x.SimSimulationOutputRequest_Meters_VarReqMeterCustomDecrement_;
          this->SimSimulationOutputRequest_StandardReports_TableMonthly_ = x.SimSimulationOutputRequest_StandardReports_TableMonthly_;
          this->SimSimulationOutputRequest_StandardReports_TableSummaryReports_ = x.SimSimulationOutputRequest_StandardReports_TableSummaryReports_;
          this->SimSimulationOutputRequest_StandardReports_TableTimeBins_ = x.SimSimulationOutputRequest_StandardReports_TableTimeBins_;
          this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_ = x.SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemMeteredOutputVariable_;
          this->SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_ = x.SimSimulationOutputRequest_TimeSeriesVariables_EnergyMgmtSystemOutputVariable_;
          this->SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_ = x.SimSimulationOutputRequest_TimeSeriesVariables_VarReqVariable_;
          this->SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_ = x.SimSimulationParameters_Algorithm_HeatBalanceAlgorithm_;
          this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_ = x.SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmInside_;
          this->SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_ = x.SimSimulationParameters_Algorithm_SurfaceConvectionAlgorithmOutside_;
          this->SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_ = x.SimSimulationParameters_Algorithm_ZoneAirHeatBalanceAlgorithm_;
          this->SimSimulationParameters_ConvectionCoefficients_Default_ = x.SimSimulationParameters_ConvectionCoefficients_Default_;
          this->SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_ = x.SimSimulationParameters_ConvectionCoefficients_MultipleSurfaces_;
          this->SimSimulationParameters_FluidProperties_Concentration_ = x.SimSimulationParameters_FluidProperties_Concentration_;
          this->SimSimulationParameters_FluidProperties_GlycolConcentrations_ = x.SimSimulationParameters_FluidProperties_GlycolConcentrations_;
          this->SimSimulationParameters_FluidProperties_Names_ = x.SimSimulationParameters_FluidProperties_Names_;
          this->SimSimulationParameters_FluidProperties_Saturated_ = x.SimSimulationParameters_FluidProperties_Saturated_;
          this->SimSimulationParameters_FluidProperties_SuperHeated_ = x.SimSimulationParameters_FluidProperties_SuperHeated_;
          this->SimSimulationParameters_FluidProperties_Temperatures_ = x.SimSimulationParameters_FluidProperties_Temperatures_;
          this->SimSimulationParameters_GroundHeatTransfer_Default_ = x.SimSimulationParameters_GroundHeatTransfer_Default_;
          this->SimSimulationParameters_HvacDesign_AirLoopSizing_ = x.SimSimulationParameters_HvacDesign_AirLoopSizing_;
          this->SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_ = x.SimSimulationParameters_HvacDesign_OutdoorAirDesignSpec_;
          this->SimSimulationParameters_HvacDesign_Sizing_ = x.SimSimulationParameters_HvacDesign_Sizing_;
          this->SimSimulationParameters_HvacDesign_WaterLoopSizing_ = x.SimSimulationParameters_HvacDesign_WaterLoopSizing_;
          this->SimSimulationParameters_HvacDesign_ZoneAIrDistribution_ = x.SimSimulationParameters_HvacDesign_ZoneAIrDistribution_;
          this->SimSimulationParameters_HvacDesign_ZoneSizing_ = x.SimSimulationParameters_HvacDesign_ZoneSizing_;
          this->SimSimulationParameters_Parametric_FileNameSuffix_ = x.SimSimulationParameters_Parametric_FileNameSuffix_;
          this->SimSimulationParameters_Parametric_Logic_ = x.SimSimulationParameters_Parametric_Logic_;
          this->SimSimulationParameters_Parametric_RunControl_ = x.SimSimulationParameters_Parametric_RunControl_;
          this->SimSimulationParameters_Parametric_SetValueForRun_ = x.SimSimulationParameters_Parametric_SetValueForRun_;
          this->SimSimulationParameters_SimulationControl_DaylightSavingTime_ = x.SimSimulationParameters_SimulationControl_DaylightSavingTime_;
          this->SimSimulationParameters_SimulationControl_Default_ = x.SimSimulationParameters_SimulationControl_Default_;
          this->SimSimulationParameters_SimulationControl_RunPeriod_ = x.SimSimulationParameters_SimulationControl_RunPeriod_;
          this->SimSimulationParameters_SimulationControl_RunPeriodCustomRange_ = x.SimSimulationParameters_SimulationControl_RunPeriodCustomRange_;
          this->SimSimulationParameters_SimulationControl_SpecialDays_ = x.SimSimulationParameters_SimulationControl_SpecialDays_;
          this->SimSimulationParameters_SiteWindPressure_WindDirections_ = x.SimSimulationParameters_SiteWindPressure_WindDirections_;
          this->SimSimulationParameters_SiteWindPressure_WindPressureValues_ = x.SimSimulationParameters_SiteWindPressure_WindPressureValues_;
          this->SimSimulationParameters_SurfaceProperties_Default_ = x.SimSimulationParameters_SurfaceProperties_Default_;
          this->SimSimulationParameters_SurfaceProperties_VaporCoefficients_ = x.SimSimulationParameters_SurfaceProperties_VaporCoefficients_;
          this->SimSimulationRun_EPlusSimulation_Default_ = x.SimSimulationRun_EPlusSimulation_Default_;
          this->SimSimulationRun_StandardsRun_ASHRAE90_1_ = x.SimSimulationRun_StandardsRun_ASHRAE90_1_;
          this->SimSimulationRun_StandardsRun_LEED_ = x.SimSimulationRun_StandardsRun_LEED_;
          this->SimSimulationRun_StandardsRun_SBDH_ = x.SimSimulationRun_StandardsRun_SBDH_;
          this->SimSimulationRun_StandardsRun_T24_ = x.SimSimulationRun_StandardsRun_T24_;
          this->SimSite_AdjacentSite_Default_ = x.SimSite_AdjacentSite_Default_;
          this->SimSite_BuildingSite_Default_ = x.SimSite_BuildingSite_Default_;
          this->SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_ = x.SimSiteAssembly_SiteAssembly_ExteriorEquipmentWater_;
          this->SimSiteAssembly_SiteAssembly_ExteriorLighting_ = x.SimSiteAssembly_SiteAssembly_ExteriorLighting_;
          this->SimSiteAssembly_SiteAssembly_ExteriorSignage_ = x.SimSiteAssembly_SiteAssembly_ExteriorSignage_;
          this->SimSiteAssembly_SiteAssembly_Fuel_ = x.SimSiteAssembly_SiteAssembly_Fuel_;
          this->SimSiteAssembly_SiteAssembly_FuelCell_ = x.SimSiteAssembly_SiteAssembly_FuelCell_;
          this->SimSiteAssembly_SiteAssembly_SolarHotWater_ = x.SimSiteAssembly_SiteAssembly_SolarHotWater_;
          this->SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_ = x.SimSiteAssembly_SiteAssembly_SolarPhotovoltaic_;
          this->SimSiteAssembly_SiteAssembly_Water_ = x.SimSiteAssembly_SiteAssembly_Water_;
          this->SimSiteAssembly_SiteAssembly_WindTurbine_ = x.SimSiteAssembly_SiteAssembly_WindTurbine_;
          this->SimSIUnitType_SiUnit_Default_ = x.SimSIUnitType_SiUnit_Default_;
          this->SimSlab_Ceiling_InterzoneCeiling_ = x.SimSlab_Ceiling_InterzoneCeiling_;
          this->SimSlab_Ceiling_InterzoneCeilingAdiabatic_ = x.SimSlab_Ceiling_InterzoneCeilingAdiabatic_;
          this->SimSlab_Ceiling_InterzoneCeilingDetailed_ = x.SimSlab_Ceiling_InterzoneCeilingDetailed_;
          this->SimSlab_Default_Default_ = x.SimSlab_Default_Default_;
          this->SimSlab_Floor_Adiabatic_ = x.SimSlab_Floor_Adiabatic_;
          this->SimSlab_Floor_FloorOverAir_ = x.SimSlab_Floor_FloorOverAir_;
          this->SimSlab_Floor_FloorOverAirDetailed_ = x.SimSlab_Floor_FloorOverAirDetailed_;
          this->SimSlab_Floor_FloorOverEarth_ = x.SimSlab_Floor_FloorOverEarth_;
          this->SimSlab_Floor_FloorOverEarthDetailed_ = x.SimSlab_Floor_FloorOverEarthDetailed_;
          this->SimSlab_Floor_InterzoneFloor_ = x.SimSlab_Floor_InterzoneFloor_;
          this->SimSlab_Floor_InterzoneFloorDetailed_ = x.SimSlab_Floor_InterzoneFloorDetailed_;
          this->SimSlab_Floor_RaisedFloor_ = x.SimSlab_Floor_RaisedFloor_;
          this->SimSlab_Landing_Default_ = x.SimSlab_Landing_Default_;
          this->SimSlab_OtherSideCoefficients_Default_ = x.SimSlab_OtherSideCoefficients_Default_;
          this->SimSlab_OtherSideCoefficients_Detailed_ = x.SimSlab_OtherSideCoefficients_Detailed_;
          this->SimSlab_OtherSideCoefficients_DetailedFloor_ = x.SimSlab_OtherSideCoefficients_DetailedFloor_;
          this->SimSlab_OtherSideCoefficients_DetailedRoofCeiling_ = x.SimSlab_OtherSideCoefficients_DetailedRoofCeiling_;
          this->SimSlab_OtherSideConditionsModel_Default_ = x.SimSlab_OtherSideConditionsModel_Default_;
          this->SimSlab_OtherSideConditionsModel_Detailed_ = x.SimSlab_OtherSideConditionsModel_Detailed_;
          this->SimSlab_OtherSideConditionsModel_DetailedFloor_ = x.SimSlab_OtherSideConditionsModel_DetailedFloor_;
          this->SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_ = x.SimSlab_OtherSideConditionsModel_DetailedRoofCeiling_;
          this->SimSlab_RoofSlab_RoofUnderAir_ = x.SimSlab_RoofSlab_RoofUnderAir_;
          this->SimSlab_RoofSlab_RoofUnderAirDetailed_ = x.SimSlab_RoofSlab_RoofUnderAirDetailed_;
          this->SimSlab_RoofSlab_RoofUnderEarth_ = x.SimSlab_RoofSlab_RoofUnderEarth_;
          this->SimSlab_RoofSlab_RoofUnderEarthDetailed_ = x.SimSlab_RoofSlab_RoofUnderEarthDetailed_;
          this->SimSlabParams_Slab_Ceiling_ = x.SimSlabParams_Slab_Ceiling_;
          this->SimSlabParams_Slab_Floor_ = x.SimSlabParams_Slab_Floor_;
          this->SimSlabParams_Slab_Landing_ = x.SimSlabParams_Slab_Landing_;
          this->SimSlabParams_Slab_Roof_ = x.SimSlabParams_Slab_Roof_;
          this->SimSlabType_Slab_Ceiling_ = x.SimSlabType_Slab_Ceiling_;
          this->SimSlabType_Slab_Default_ = x.SimSlabType_Slab_Default_;
          this->SimSlabType_Slab_Floor_ = x.SimSlabType_Slab_Floor_;
          this->SimSlabType_Slab_Landing_ = x.SimSlabType_Slab_Landing_;
          this->SimSlabType_Slab_Roof_ = x.SimSlabType_Slab_Roof_;
          this->SimSoftwareApplication_Default_Default_ = x.SimSoftwareApplication_Default_Default_;
          this->SimSolarObsParams_SolarObstruction_Default_ = x.SimSolarObsParams_SolarObstruction_Default_;
          this->SimSolarShade_Default_Default_ = x.SimSolarShade_Default_Default_;
          this->SimSolarShade_Fin_Default_ = x.SimSolarShade_Fin_Default_;
          this->SimSolarShade_Fin_Projection_ = x.SimSolarShade_Fin_Projection_;
          this->SimSolarShade_Overhang_Continuous_ = x.SimSolarShade_Overhang_Continuous_;
          this->SimSolarShade_Overhang_Default_ = x.SimSolarShade_Overhang_Default_;
          this->SimSolarShade_Overhang_Projection_ = x.SimSolarShade_Overhang_Projection_;
          this->SimSolarShade_ZoneDetailed_Default_ = x.SimSolarShade_ZoneDetailed_Default_;
          this->SimSolarShadeArrayParams_SolarShadeArray_Default_ = x.SimSolarShadeArrayParams_SolarShadeArray_Default_;
          this->SimSolarShadePanelParams_ShadePanel_SolarShading_ = x.SimSolarShadePanelParams_ShadePanel_SolarShading_;
          this->SimSolarShadeType_SolarShade_Default_ = x.SimSolarShadeType_SolarShade_Default_;
          this->SimSolarShadeType_SolarShade_LeftFin_ = x.SimSolarShadeType_SolarShade_LeftFin_;
          this->SimSolarShadeType_SolarShade_Overhang_ = x.SimSolarShadeType_SolarShade_Overhang_;
          this->SimSolarShadeType_SolarShade_RightFin_ = x.SimSolarShadeType_SolarShade_RightFin_;
          this->SimSpace_Occupied_Default_ = x.SimSpace_Occupied_Default_;
          this->SimSpace_Unoccupied_CeilingPlenum_ = x.SimSpace_Unoccupied_CeilingPlenum_;
          this->SimSpace_Unoccupied_CeilingVoid_ = x.SimSpace_Unoccupied_CeilingVoid_;
          this->SimSpace_Unoccupied_Default_ = x.SimSpace_Unoccupied_Default_;
          this->SimSpace_Unoccupied_FloorPlenum_ = x.SimSpace_Unoccupied_FloorPlenum_;
          this->SimSpace_Unoccupied_FloorVoid_ = x.SimSpace_Unoccupied_FloorVoid_;
          this->SimSpace_Unoccupied_Plenum_ = x.SimSpace_Unoccupied_Plenum_;
          this->SimSpaceBoundary_Ceiling_InterzoneCeiling_ = x.SimSpaceBoundary_Ceiling_InterzoneCeiling_;
          this->SimSpaceBoundary_Door_GlazedDoor_ = x.SimSpaceBoundary_Door_GlazedDoor_;
          this->SimSpaceBoundary_Door_OpaqueDoor_ = x.SimSpaceBoundary_Door_OpaqueDoor_;
          this->SimSpaceBoundary_FirstLevel_Default_ = x.SimSpaceBoundary_FirstLevel_Default_;
          this->SimSpaceBoundary_Floor_FloorOverAir_ = x.SimSpaceBoundary_Floor_FloorOverAir_;
          this->SimSpaceBoundary_Floor_FloorOverEarth_ = x.SimSpaceBoundary_Floor_FloorOverEarth_;
          this->SimSpaceBoundary_Floor_InterzoneFloor_ = x.SimSpaceBoundary_Floor_InterzoneFloor_;
          this->SimSpaceBoundary_RoofSlab_RoofUnderAir_ = x.SimSpaceBoundary_RoofSlab_RoofUnderAir_;
          this->SimSpaceBoundary_SecondLevel_Default_ = x.SimSpaceBoundary_SecondLevel_Default_;
          this->SimSpaceBoundary_SecondLevel_SubTypeA_ = x.SimSpaceBoundary_SecondLevel_SubTypeA_;
          this->SimSpaceBoundary_SecondLevel_SubTypeB_ = x.SimSpaceBoundary_SecondLevel_SubTypeB_;
          this->SimSpaceBoundary_SecondLevel_SubTypeC_ = x.SimSpaceBoundary_SecondLevel_SubTypeC_;
          this->SimSpaceBoundary_Skylight_Default_ = x.SimSpaceBoundary_Skylight_Default_;
          this->SimSpaceBoundary_Wall_ExteriorAboveGrade_ = x.SimSpaceBoundary_Wall_ExteriorAboveGrade_;
          this->SimSpaceBoundary_Wall_ExteriorBelowGrade_ = x.SimSpaceBoundary_Wall_ExteriorBelowGrade_;
          this->SimSpaceBoundary_Wall_Interior_ = x.SimSpaceBoundary_Wall_Interior_;
          this->SimSpaceBoundary_Window_Exterior_ = x.SimSpaceBoundary_Window_Exterior_;
          this->SimSpaceOccupant_Actor_SpaceOccupant_ = x.SimSpaceOccupant_Actor_SpaceOccupant_;
          this->SimSpaceParams_Space_Default_ = x.SimSpaceParams_Space_Default_;
          this->SimSpaceType_Space_Default_ = x.SimSpaceType_Space_Default_;
          this->SimSpatialZone_OutdoorAir_Default_ = x.SimSpatialZone_OutdoorAir_Default_;
          this->SimSpatialZone_Plenum_CeilingPlenum_ = x.SimSpatialZone_Plenum_CeilingPlenum_;
          this->SimSpatialZone_Plenum_Default_ = x.SimSpatialZone_Plenum_Default_;
          this->SimSpatialZone_Plenum_FloorPlenum_ = x.SimSpatialZone_Plenum_FloorPlenum_;
          this->SimSpatialZone_SecurityZone_Public_ = x.SimSpatialZone_SecurityZone_Public_;
          this->SimSpatialZone_SecurityZone_Security_ = x.SimSpatialZone_SecurityZone_Security_;
          this->SimSpatialZone_SecurityZone_StaffOnly_ = x.SimSpatialZone_SecurityZone_StaffOnly_;
          this->SimSpatialZone_ThermalZone_AboveCeilingVoid_ = x.SimSpatialZone_ThermalZone_AboveCeilingVoid_;
          this->SimSpatialZone_ThermalZone_BelowFloorVoid_ = x.SimSpatialZone_ThermalZone_BelowFloorVoid_;
          this->SimSpatialZone_ThermalZone_Default_ = x.SimSpatialZone_ThermalZone_Default_;
          this->SimSpatialZone_ThermalZone_TemplateForZoneGroup_ = x.SimSpatialZone_ThermalZone_TemplateForZoneGroup_;
          this->SimStair_Stair_Default_ = x.SimStair_Stair_Default_;
          this->SimStairFlight_Default_Default_ = x.SimStairFlight_Default_Default_;
          this->SimStairFlightParams_StairFlight_Default_ = x.SimStairFlightParams_StairFlight_Default_;
          this->SimStairParams_Stair_Default_ = x.SimStairParams_Stair_Default_;
          this->SimSystem_AirFlowNetwork_Default_ = x.SimSystem_AirFlowNetwork_Default_;
          this->SimSystem_Electrical_SystemsContainer_ = x.SimSystem_Electrical_SystemsContainer_;
          this->SimSystem_ElectricalLighting_FullSystem_ = x.SimSystem_ElectricalLighting_FullSystem_;
          this->SimSystem_ElectricalLighting_LightingCircuit_ = x.SimSystem_ElectricalLighting_LightingCircuit_;
          this->SimSystem_ElectricalPower_FullSystem_ = x.SimSystem_ElectricalPower_FullSystem_;
          this->SimSystem_ElectroMechanical_PV_SolarThermal_ = x.SimSystem_ElectroMechanical_PV_SolarThermal_;
          this->SimSystem_Hvac_SystemsContainer_ = x.SimSystem_Hvac_SystemsContainer_;
          this->SimSystem_HvacAir_AirBranch_ = x.SimSystem_HvacAir_AirBranch_;
          this->SimSystem_HvacAir_Control_ = x.SimSystem_HvacAir_Control_;
          this->SimSystem_HvacAir_ControlDemand_ = x.SimSystem_HvacAir_ControlDemand_;
          this->SimSystem_HvacAir_ControlSupply_ = x.SimSystem_HvacAir_ControlSupply_;
          this->SimSystem_HvacAir_Demand_ = x.SimSystem_HvacAir_Demand_;
          this->SimSystem_HvacAir_DemandSideReturnPath_ = x.SimSystem_HvacAir_DemandSideReturnPath_;
          this->SimSystem_HvacAir_DemandSideSupplyPath_ = x.SimSystem_HvacAir_DemandSideSupplyPath_;
          this->SimSystem_HvacAir_DemandSideZoneHvac_ = x.SimSystem_HvacAir_DemandSideZoneHvac_;
          this->SimSystem_HvacAir_FullSystem_ = x.SimSystem_HvacAir_FullSystem_;
          this->SimSystem_HvacAir_FullSystemDual_ = x.SimSystem_HvacAir_FullSystemDual_;
          this->SimSystem_HvacAir_FullSystemTriple_ = x.SimSystem_HvacAir_FullSystemTriple_;
          this->SimSystem_HvacAir_OutdoorAir_ = x.SimSystem_HvacAir_OutdoorAir_;
          this->SimSystem_HvacAir_OutdoorAirExhaust_ = x.SimSystem_HvacAir_OutdoorAirExhaust_;
          this->SimSystem_HvacAir_OutdoorAirSupply_ = x.SimSystem_HvacAir_OutdoorAirSupply_;
          this->SimSystem_HvacAir_Supply_ = x.SimSystem_HvacAir_Supply_;
          this->SimSystem_HvacAir_SupplySideReturnPath_ = x.SimSystem_HvacAir_SupplySideReturnPath_;
          this->SimSystem_HvacAir_SupplySideSupplyPath_ = x.SimSystem_HvacAir_SupplySideSupplyPath_;
          this->SimSystem_HvacChilledWater_Control_ = x.SimSystem_HvacChilledWater_Control_;
          this->SimSystem_HvacChilledWater_ControlDemand_ = x.SimSystem_HvacChilledWater_ControlDemand_;
          this->SimSystem_HvacChilledWater_ControlSupply_ = x.SimSystem_HvacChilledWater_ControlSupply_;
          this->SimSystem_HvacChilledWater_Demand_ = x.SimSystem_HvacChilledWater_Demand_;
          this->SimSystem_HvacChilledWater_DemandSideDemandComponents_ = x.SimSystem_HvacChilledWater_DemandSideDemandComponents_;
          this->SimSystem_HvacChilledWater_DemandSideReturnPath_ = x.SimSystem_HvacChilledWater_DemandSideReturnPath_;
          this->SimSystem_HvacChilledWater_DemandSideSupplyPath_ = x.SimSystem_HvacChilledWater_DemandSideSupplyPath_;
          this->SimSystem_HvacChilledWater_FullSystem_ = x.SimSystem_HvacChilledWater_FullSystem_;
          this->SimSystem_HvacChilledWater_Supply_ = x.SimSystem_HvacChilledWater_Supply_;
          this->SimSystem_HvacChilledWater_WaterBranch_ = x.SimSystem_HvacChilledWater_WaterBranch_;
          this->SimSystem_HvacCondenser_CondenserBranch_ = x.SimSystem_HvacCondenser_CondenserBranch_;
          this->SimSystem_HvacCondenser_Control_ = x.SimSystem_HvacCondenser_Control_;
          this->SimSystem_HvacCondenser_ControlDemand_ = x.SimSystem_HvacCondenser_ControlDemand_;
          this->SimSystem_HvacCondenser_ControlSupply_ = x.SimSystem_HvacCondenser_ControlSupply_;
          this->SimSystem_HvacCondenser_Demand_ = x.SimSystem_HvacCondenser_Demand_;
          this->SimSystem_HvacCondenser_DemandSideDemandComponents_ = x.SimSystem_HvacCondenser_DemandSideDemandComponents_;
          this->SimSystem_HvacCondenser_DemandSideReturnPath_ = x.SimSystem_HvacCondenser_DemandSideReturnPath_;
          this->SimSystem_HvacCondenser_DemandSideSupplyPath_ = x.SimSystem_HvacCondenser_DemandSideSupplyPath_;
          this->SimSystem_HvacCondenser_FullSystem_ = x.SimSystem_HvacCondenser_FullSystem_;
          this->SimSystem_HvacCondenser_Supply_ = x.SimSystem_HvacCondenser_Supply_;
          this->SimSystem_HvacHotWater_Control_ = x.SimSystem_HvacHotWater_Control_;
          this->SimSystem_HvacHotWater_ControlDemand_ = x.SimSystem_HvacHotWater_ControlDemand_;
          this->SimSystem_HvacHotWater_ControlSupply_ = x.SimSystem_HvacHotWater_ControlSupply_;
          this->SimSystem_HvacHotWater_Demand_ = x.SimSystem_HvacHotWater_Demand_;
          this->SimSystem_HvacHotWater_DemandSideDemandComponents_ = x.SimSystem_HvacHotWater_DemandSideDemandComponents_;
          this->SimSystem_HvacHotWater_DemandSideReturnPath_ = x.SimSystem_HvacHotWater_DemandSideReturnPath_;
          this->SimSystem_HvacHotWater_DemandSideSupplyPath_ = x.SimSystem_HvacHotWater_DemandSideSupplyPath_;
          this->SimSystem_HvacHotWater_FullSystem_ = x.SimSystem_HvacHotWater_FullSystem_;
          this->SimSystem_HvacHotWater_Supply_ = x.SimSystem_HvacHotWater_Supply_;
          this->SimSystem_HvacHotWater_WaterBranch_ = x.SimSystem_HvacHotWater_WaterBranch_;
          this->SimSystem_HvacMixedWater_Control_ = x.SimSystem_HvacMixedWater_Control_;
          this->SimSystem_HvacMixedWater_ControlDemand_ = x.SimSystem_HvacMixedWater_ControlDemand_;
          this->SimSystem_HvacMixedWater_ControlSupply_ = x.SimSystem_HvacMixedWater_ControlSupply_;
          this->SimSystem_HvacMixedWater_Demand_ = x.SimSystem_HvacMixedWater_Demand_;
          this->SimSystem_HvacMixedWater_DemandSideDemandComponents_ = x.SimSystem_HvacMixedWater_DemandSideDemandComponents_;
          this->SimSystem_HvacMixedWater_DemandSideReturnPath_ = x.SimSystem_HvacMixedWater_DemandSideReturnPath_;
          this->SimSystem_HvacMixedWater_DemandSideSupplyPath_ = x.SimSystem_HvacMixedWater_DemandSideSupplyPath_;
          this->SimSystem_HvacMixedWater_FullSystem_ = x.SimSystem_HvacMixedWater_FullSystem_;
          this->SimSystem_HvacMixedWater_Supply_ = x.SimSystem_HvacMixedWater_Supply_;
          this->SimSystem_HvacMixedWater_WaterBranch_ = x.SimSystem_HvacMixedWater_WaterBranch_;
          this->SimSystem_HvacSteam_Control_ = x.SimSystem_HvacSteam_Control_;
          this->SimSystem_HvacSteam_ControlDemand_ = x.SimSystem_HvacSteam_ControlDemand_;
          this->SimSystem_HvacSteam_ControlSupply_ = x.SimSystem_HvacSteam_ControlSupply_;
          this->SimSystem_HvacSteam_Demand_ = x.SimSystem_HvacSteam_Demand_;
          this->SimSystem_HvacSteam_DemandSideDemandComponents_ = x.SimSystem_HvacSteam_DemandSideDemandComponents_;
          this->SimSystem_HvacSteam_DemandSideReturnPath_ = x.SimSystem_HvacSteam_DemandSideReturnPath_;
          this->SimSystem_HvacSteam_DemandSideSupplyPath_ = x.SimSystem_HvacSteam_DemandSideSupplyPath_;
          this->SimSystem_HvacSteam_FullSystem_ = x.SimSystem_HvacSteam_FullSystem_;
          this->SimSystem_HvacSteam_SteamBranch_ = x.SimSystem_HvacSteam_SteamBranch_;
          this->SimSystem_HvacSteam_Supply_ = x.SimSystem_HvacSteam_Supply_;
          this->SimSystem_Mechanical_SystemsContainer_ = x.SimSystem_Mechanical_SystemsContainer_;
          this->SimSystem_Plumbing_ColdWater_ = x.SimSystem_Plumbing_ColdWater_;
          this->SimSystem_Plumbing_GrayWater_ = x.SimSystem_Plumbing_GrayWater_;
          this->SimSystem_Plumbing_HotWater_ = x.SimSystem_Plumbing_HotWater_;
          this->SimSystem_Plumbing_PotableWater_ = x.SimSystem_Plumbing_PotableWater_;
          this->SimSystem_Plumbing_SystemsContainer_ = x.SimSystem_Plumbing_SystemsContainer_;
          this->SimSystem_Plumbing_UndergroundPipingCircuit_ = x.SimSystem_Plumbing_UndergroundPipingCircuit_;
          this->SimSystem_Plumbing_WasteWater_ = x.SimSystem_Plumbing_WasteWater_;
          this->SimSystem_Plumbing_WaterUseSystem_ = x.SimSystem_Plumbing_WaterUseSystem_;
          this->SimSystem_Plumbing_WaterUseWell_ = x.SimSystem_Plumbing_WaterUseWell_;
          this->SimSystem_RefrigerationPrimary_Control_ = x.SimSystem_RefrigerationPrimary_Control_;
          this->SimSystem_RefrigerationPrimary_Demand_ = x.SimSystem_RefrigerationPrimary_Demand_;
          this->SimSystem_RefrigerationPrimary_FullSystem_ = x.SimSystem_RefrigerationPrimary_FullSystem_;
          this->SimSystem_RefrigerationPrimary_Supply_ = x.SimSystem_RefrigerationPrimary_Supply_;
          this->SimSystem_RefrigerationSecondary_Control_ = x.SimSystem_RefrigerationSecondary_Control_;
          this->SimSystem_RefrigerationSecondary_Demand_ = x.SimSystem_RefrigerationSecondary_Demand_;
          this->SimSystem_RefrigerationSecondary_FullSystem_ = x.SimSystem_RefrigerationSecondary_FullSystem_;
          this->SimSystem_RefrigerationSecondary_Supply_ = x.SimSystem_RefrigerationSecondary_Supply_;
          this->SimSystem_RefrigerationTranscritical_Control_ = x.SimSystem_RefrigerationTranscritical_Control_;
          this->SimSystem_RefrigerationTranscritical_Demand_ = x.SimSystem_RefrigerationTranscritical_Demand_;
          this->SimSystem_RefrigerationTranscritical_FullSystem_ = x.SimSystem_RefrigerationTranscritical_FullSystem_;
          this->SimSystem_RefrigerationTranscritical_Supply_ = x.SimSystem_RefrigerationTranscritical_Supply_;
          this->SimSystem_ServiceHotWater_Control_ = x.SimSystem_ServiceHotWater_Control_;
          this->SimSystem_ServiceHotWater_Demand_ = x.SimSystem_ServiceHotWater_Demand_;
          this->SimSystem_ServiceHotWater_FullSystem_ = x.SimSystem_ServiceHotWater_FullSystem_;
          this->SimSystem_ServiceHotWater_Supply_ = x.SimSystem_ServiceHotWater_Supply_;
          this->SimSystem_ServiceHotWater_WaterBranch_ = x.SimSystem_ServiceHotWater_WaterBranch_;
          this->SimSystem_SitePowerDemand_ElectricityConsuming_ = x.SimSystem_SitePowerDemand_ElectricityConsuming_;
          this->SimSystem_SitePowerDemand_FuelConsuming_ = x.SimSystem_SitePowerDemand_FuelConsuming_;
          this->SimSystem_SitePowerDemand_WaterConsuming_ = x.SimSystem_SitePowerDemand_WaterConsuming_;
          this->SimSystem_SitePowerGeneration_Other_ = x.SimSystem_SitePowerGeneration_Other_;
          this->SimSystem_SitePowerGeneration_Photovoltaic_ = x.SimSystem_SitePowerGeneration_Photovoltaic_;
          this->SimSystem_SitePowerGeneration_WindTurbine_ = x.SimSystem_SitePowerGeneration_WindTurbine_;
          this->SimSystem_Transport_Elevator_ = x.SimSystem_Transport_Elevator_;
          this->SimSystem_Transport_Escalator_ = x.SimSystem_Transport_Escalator_;
          this->SimSystem_Transport_MovingWalkway_ = x.SimSystem_Transport_MovingWalkway_;
          this->SimSystem_Transport_SystemsContainer_ = x.SimSystem_Transport_SystemsContainer_;
          this->SimSystem_VariableRefrigerantFlow_Control_ = x.SimSystem_VariableRefrigerantFlow_Control_;
          this->SimSystem_VariableRefrigerantFlow_Demand_ = x.SimSystem_VariableRefrigerantFlow_Demand_;
          this->SimSystem_VariableRefrigerantFlow_FullSystem_ = x.SimSystem_VariableRefrigerantFlow_FullSystem_;
          this->SimSystem_VariableRefrigerantFlow_Supply_ = x.SimSystem_VariableRefrigerantFlow_Supply_;
          this->SimSystem_ZoneHvacGroup_Control_ = x.SimSystem_ZoneHvacGroup_Control_;
          this->SimSystem_ZoneHvacGroup_ControlDemand_ = x.SimSystem_ZoneHvacGroup_ControlDemand_;
          this->SimSystem_ZoneHvacGroup_ControlSupply_ = x.SimSystem_ZoneHvacGroup_ControlSupply_;
          this->SimSystem_ZoneHvacGroup_Demand_ = x.SimSystem_ZoneHvacGroup_Demand_;
          this->SimSystem_ZoneHvacGroup_DemandSideReturnPath_ = x.SimSystem_ZoneHvacGroup_DemandSideReturnPath_;
          this->SimSystem_ZoneHvacGroup_DemandSideSupplyPath_ = x.SimSystem_ZoneHvacGroup_DemandSideSupplyPath_;
          this->SimSystem_ZoneHvacGroup_DemandSideZoneHvac_ = x.SimSystem_ZoneHvacGroup_DemandSideZoneHvac_;
          this->SimSystem_ZoneHvacGroup_FullSystem_ = x.SimSystem_ZoneHvacGroup_FullSystem_;
          this->SimSystem_ZoneHvacGroup_Supply_ = x.SimSystem_ZoneHvacGroup_Supply_;
          this->SimSystem_ZoneShwGroup_Demand_ = x.SimSystem_ZoneShwGroup_Demand_;
          this->SimSystem_ZoneShwGroup_FullSystem_ = x.SimSystem_ZoneShwGroup_FullSystem_;
          this->SimSystem_ZoneShwGroup_Supply_ = x.SimSystem_ZoneShwGroup_Supply_;
          this->SimTemplateConstructions_Constructions_Default_ = x.SimTemplateConstructions_Constructions_Default_;
          this->SimTemplateDaylighting_Daylighting_Default_ = x.SimTemplateDaylighting_Daylighting_Default_;
          this->SimTemplateDaylighting_Daylighting_Skylights_ = x.SimTemplateDaylighting_Daylighting_Skylights_;
          this->SimTemplateDaylighting_Daylighting_Windows_ = x.SimTemplateDaylighting_Daylighting_Windows_;
          this->SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_ = x.SimTemplateHvacZoneEquipment_HvacZoneEquipment_Default_;
          this->SimTemplateInteriorLighting_InteriorLighting_Default_ = x.SimTemplateInteriorLighting_InteriorLighting_Default_;
          this->SimTemplateLocation_Location_Default_ = x.SimTemplateLocation_Location_Default_;
          this->SimTemplateNaturalVentilation_NaturalVentilation_Default_ = x.SimTemplateNaturalVentilation_NaturalVentilation_Default_;
          this->SimTemplateOutputFormatSet_OutputFormatSet_Default_ = x.SimTemplateOutputFormatSet_OutputFormatSet_Default_;
          this->SimTemplateOutputRequestSet_OutputRequestSet_Default_ = x.SimTemplateOutputRequestSet_OutputRequestSet_Default_;
          this->SimTemplateSimulationParameters_SimulationParameters_Default_ = x.SimTemplateSimulationParameters_SimulationParameters_Default_;
          this->SimTemplateZoneConditions_ZoneConditions_Default_ = x.SimTemplateZoneConditions_ZoneConditions_Default_;
          this->SimTemplateZoneLoads_ZoneLoads_Default_ = x.SimTemplateZoneLoads_ZoneLoads_Default_;
          this->SimTimeSeriesSchedule_Calendar_Configuration_ = x.SimTimeSeriesSchedule_Calendar_Configuration_;
          this->SimTimeSeriesSchedule_Calendar_Default_ = x.SimTimeSeriesSchedule_Calendar_Default_;
          this->SimTimeSeriesSchedule_Calendar_SpecialDays_ = x.SimTimeSeriesSchedule_Calendar_SpecialDays_;
          this->SimTimeSeriesSchedule_Compact_Default_ = x.SimTimeSeriesSchedule_Compact_Default_;
          this->SimTimeSeriesSchedule_Constant_Default_ = x.SimTimeSeriesSchedule_Constant_Default_;
          this->SimTimeSeriesSchedule_Day_Hourly_ = x.SimTimeSeriesSchedule_Day_Hourly_;
          this->SimTimeSeriesSchedule_Day_Interval_ = x.SimTimeSeriesSchedule_Day_Interval_;
          this->SimTimeSeriesSchedule_Day_List_ = x.SimTimeSeriesSchedule_Day_List_;
          this->SimTimeSeriesSchedule_File_Default_ = x.SimTimeSeriesSchedule_File_Default_;
          this->SimTimeSeriesSchedule_Limits_Default_ = x.SimTimeSeriesSchedule_Limits_Default_;
          this->SimTimeSeriesSchedule_TimeSeries_Default_ = x.SimTimeSeriesSchedule_TimeSeries_Default_;
          this->SimTimeSeriesSchedule_Week_Compact_ = x.SimTimeSeriesSchedule_Week_Compact_;
          this->SimTimeSeriesSchedule_Week_Daily_ = x.SimTimeSeriesSchedule_Week_Daily_;
          this->SimTimeSeriesSchedule_Year_Default_ = x.SimTimeSeriesSchedule_Year_Default_;
          this->SimTimeSeriesValue_TimeSeries_Irregular_ = x.SimTimeSeriesValue_TimeSeries_Irregular_;
          this->SimTimeSeriesValue_TimeSeries_Regular_ = x.SimTimeSeriesValue_TimeSeries_Regular_;
          this->SimToplogicalRepresentation_TopologicalRepresentation_Default_ = x.SimToplogicalRepresentation_TopologicalRepresentation_Default_;
          this->SimTransportSysAssembly_TransportSysAssembly_Default_ = x.SimTransportSysAssembly_TransportSysAssembly_Default_;
          this->SimTransportSysAssembly_TransportSysAssembly_Elevator_ = x.SimTransportSysAssembly_TransportSysAssembly_Elevator_;
          this->SimTransportSysAssembly_TransportSysAssembly_Escalator_ = x.SimTransportSysAssembly_TransportSysAssembly_Escalator_;
          this->SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_ = x.SimTransportSysAssembly_TransportSysAssembly_MovingWalkway_;
          this->SimValidationResultsAir_AirLoop_Default_ = x.SimValidationResultsAir_AirLoop_Default_;
          this->SimValidationResultsBldg_Building_Default_ = x.SimValidationResultsBldg_Building_Default_;
          this->SimValidationResultsRefrig_RFGLoop_Default_ = x.SimValidationResultsRefrig_RFGLoop_Default_;
          this->SimValidationResultsVRF_VRFLoop_Default_ = x.SimValidationResultsVRF_VRFLoop_Default_;
          this->SimValidationResultsWater_CHWLoop_Default_ = x.SimValidationResultsWater_CHWLoop_Default_;
          this->SimValidationResultsWater_CWLoop_Default_ = x.SimValidationResultsWater_CWLoop_Default_;
          this->SimValidationResultsWater_HWLoop_Default_ = x.SimValidationResultsWater_HWLoop_Default_;
          this->SimValidationResultsWater_MxWLoop_Default_ = x.SimValidationResultsWater_MxWLoop_Default_;
          this->SimValidationResultsWater_SHWLoop_Default_ = x.SimValidationResultsWater_SHWLoop_Default_;
          this->SimValidationResultsWater_STMLoop_Default_ = x.SimValidationResultsWater_STMLoop_Default_;
          this->SimValidationResultsZoneHvac_ZoneHvac_Default_ = x.SimValidationResultsZoneHvac_ZoneHvac_Default_;
          this->SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_ = x.SimVentilationAssembly_VentilationAssembly_CoolTower_Shower_;
          this->SimVentilationAssembly_VentilationAssembly_EarthTube_ = x.SimVentilationAssembly_VentilationAssembly_EarthTube_;
          this->SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_ = x.SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity_;
          this->SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_ = x.SimVentilationAssembly_VentilationAssembly_RefrigerationDoor_;
          this->SimVentilationAssembly_VentilationAssembly_ThermalChimney_ = x.SimVentilationAssembly_VentilationAssembly_ThermalChimney_;
          this->SimVertex_Vertex_Point_ = x.SimVertex_Vertex_Point_;
          this->SimVirtualElement_Default_Default_ = x.SimVirtualElement_Default_Default_;
          this->SimVirtualElement_Slab_Ceiling_ = x.SimVirtualElement_Slab_Ceiling_;
          this->SimVirtualElement_Slab_Default_ = x.SimVirtualElement_Slab_Default_;
          this->SimVirtualElement_Slab_Floor_ = x.SimVirtualElement_Slab_Floor_;
          this->SimVirtualElement_Slab_OpeningFiller_ = x.SimVirtualElement_Slab_OpeningFiller_;
          this->SimVirtualElement_Wall_Default_ = x.SimVirtualElement_Wall_Default_;
          this->SimVirtualElement_Wall_OpeningFiller_ = x.SimVirtualElement_Wall_OpeningFiller_;
          this->SimVirtualGridIntersection_VirtualGridIntersection_Default_ = x.SimVirtualGridIntersection_VirtualGridIntersection_Default_;
          this->SimWall_OtherSideCoefficients_Default_ = x.SimWall_OtherSideCoefficients_Default_;
          this->SimWall_OtherSideCoefficients_Detailed_ = x.SimWall_OtherSideCoefficients_Detailed_;
          this->SimWall_OtherSideCoefficients_DetailedFloor_ = x.SimWall_OtherSideCoefficients_DetailedFloor_;
          this->SimWall_OtherSideCoefficients_DetailedRoofCeiling_ = x.SimWall_OtherSideCoefficients_DetailedRoofCeiling_;
          this->SimWall_OtherSideConditionsModel_Default_ = x.SimWall_OtherSideConditionsModel_Default_;
          this->SimWall_OtherSideConditionsModel_Detailed_ = x.SimWall_OtherSideConditionsModel_Detailed_;
          this->SimWall_OtherSideConditionsModel_DetailedFloor_ = x.SimWall_OtherSideConditionsModel_DetailedFloor_;
          this->SimWall_OtherSideConditionsModel_DetailedRoofCeiling_ = x.SimWall_OtherSideConditionsModel_DetailedRoofCeiling_;
          this->SimWall_Wall_Adiabatic_ = x.SimWall_Wall_Adiabatic_;
          this->SimWall_Wall_Default_ = x.SimWall_Wall_Default_;
          this->SimWall_Wall_ExteriorAboveGrade_ = x.SimWall_Wall_ExteriorAboveGrade_;
          this->SimWall_Wall_ExteriorAboveGradeDetailed_ = x.SimWall_Wall_ExteriorAboveGradeDetailed_;
          this->SimWall_Wall_ExteriorAboveGradeStandard_ = x.SimWall_Wall_ExteriorAboveGradeStandard_;
          this->SimWall_Wall_ExteriorBelowGrade_ = x.SimWall_Wall_ExteriorBelowGrade_;
          this->SimWall_Wall_ExteriorBelowGradeDetailed_ = x.SimWall_Wall_ExteriorBelowGradeDetailed_;
          this->SimWall_Wall_ExteriorBelowGradeStandard_ = x.SimWall_Wall_ExteriorBelowGradeStandard_;
          this->SimWall_Wall_Interior_ = x.SimWall_Wall_Interior_;
          this->SimWall_Wall_InteriorDetailed_ = x.SimWall_Wall_InteriorDetailed_;
          this->SimWall_Wall_InteriorStandard_ = x.SimWall_Wall_InteriorStandard_;
          this->SimWall_Wall_OpeningFiller_ = x.SimWall_Wall_OpeningFiller_;
          this->SimWallParams_Wall_Default_ = x.SimWallParams_Wall_Default_;
          this->SimWallType_Wall_Default_ = x.SimWallType_Wall_Default_;
          this->SimWindow_ComplexFenestration_ThermoChromic_ = x.SimWindow_ComplexFenestration_ThermoChromic_;
          this->SimWindow_Skylight_Exterior_ = x.SimWindow_Skylight_Exterior_;
          this->SimWindow_Skylight_ExteriorDetailed_ = x.SimWindow_Skylight_ExteriorDetailed_;
          this->SimWindow_Window_Default_ = x.SimWindow_Window_Default_;
          this->SimWindow_Window_Exterior_ = x.SimWindow_Window_Exterior_;
          this->SimWindow_Window_ExteriorDetailed_ = x.SimWindow_Window_ExteriorDetailed_;
          this->SimWindow_Window_Interior_ = x.SimWindow_Window_Interior_;
          this->SimWindowArrayParams_WindowArray_Default_ = x.SimWindowArrayParams_WindowArray_Default_;
          this->SimWindowLiningProps_WindowLiningProps_Default_ = x.SimWindowLiningProps_WindowLiningProps_Default_;
          this->SimWindowPanelProps_WindowPanelProps_Default_ = x.SimWindowPanelProps_WindowPanelProps_Default_;
          this->SimWindowParams_Window_Default_ = x.SimWindowParams_Window_Default_;
          this->SimWindowType_Window_Default_ = x.SimWindowType_Window_Default_;
          this->SimModelVersion_ = x.SimModelVersion_;
          this->SimModelSchemaVersion_ = x.SimModelSchemaVersion_;
          this->SimModelUnitsVersion_ = x.SimModelUnitsVersion_;
          this->SimModelUnitDefaultsVersion_ = x.SimModelUnitDefaultsVersion_;
          this->SimModelSchemaIDKey_ = x.SimModelSchemaIDKey_;
        }

        return *this;
      }

      SimModel::
      ~SimModel ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace Model
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

