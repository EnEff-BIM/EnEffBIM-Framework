// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRefrigerationSystemElement_Condenser_EvaporativeCooled.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_Condenser_EvaporativeCooled
      // 

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_EvapCondAvailSchedName_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapCondAvailSchedName () const
      {
        return this->SimRefrigSysElem_EvapCondAvailSchedName_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_EvapCondAvailSchedName_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapCondAvailSchedName ()
      {
        return this->SimRefrigSysElem_EvapCondAvailSchedName_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapCondAvailSchedName (const SimRefrigSysElem_EvapCondAvailSchedName_type& x)
      {
        this->SimRefrigSysElem_EvapCondAvailSchedName_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapCondAvailSchedName (const SimRefrigSysElem_EvapCondAvailSchedName_optional& x)
      {
        this->SimRefrigSysElem_EvapCondAvailSchedName_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapCondAvailSchedName (::std::auto_ptr< SimRefrigSysElem_EvapCondAvailSchedName_type > x)
      {
        this->SimRefrigSysElem_EvapCondAvailSchedName_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_BasinHeatCap_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatCap () const
      {
        return this->SimRefrigSysElem_BasinHeatCap_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_BasinHeatCap_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatCap ()
      {
        return this->SimRefrigSysElem_BasinHeatCap_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatCap (const SimRefrigSysElem_BasinHeatCap_type& x)
      {
        this->SimRefrigSysElem_BasinHeatCap_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatCap (const SimRefrigSysElem_BasinHeatCap_optional& x)
      {
        this->SimRefrigSysElem_BasinHeatCap_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_BasinHeatSetpointTemp_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatSetpointTemp () const
      {
        return this->SimRefrigSysElem_BasinHeatSetpointTemp_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_BasinHeatSetpointTemp_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatSetpointTemp ()
      {
        return this->SimRefrigSysElem_BasinHeatSetpointTemp_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatSetpointTemp (const SimRefrigSysElem_BasinHeatSetpointTemp_type& x)
      {
        this->SimRefrigSysElem_BasinHeatSetpointTemp_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_BasinHeatSetpointTemp (const SimRefrigSysElem_BasinHeatSetpointTemp_optional& x)
      {
        this->SimRefrigSysElem_BasinHeatSetpointTemp_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_EvapWaterSupplyTankName_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapWaterSupplyTankName () const
      {
        return this->SimRefrigSysElem_EvapWaterSupplyTankName_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_EvapWaterSupplyTankName_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapWaterSupplyTankName ()
      {
        return this->SimRefrigSysElem_EvapWaterSupplyTankName_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapWaterSupplyTankName (const SimRefrigSysElem_EvapWaterSupplyTankName_type& x)
      {
        this->SimRefrigSysElem_EvapWaterSupplyTankName_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapWaterSupplyTankName (const SimRefrigSysElem_EvapWaterSupplyTankName_optional& x)
      {
        this->SimRefrigSysElem_EvapWaterSupplyTankName_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EvapWaterSupplyTankName (::std::auto_ptr< SimRefrigSysElem_EvapWaterSupplyTankName_type > x)
      {
        this->SimRefrigSysElem_EvapWaterSupplyTankName_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EndUseSubCat () const
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EndUseSubCat ()
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_type& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_optional& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_EndUseSubCat (::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedSubcoolingTempDiff_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff () const
      {
        return this->SimRefrigSysElem_RatedSubcoolingTempDiff_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedSubcoolingTempDiff_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff ()
      {
        return this->SimRefrigSysElem_RatedSubcoolingTempDiff_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff (const SimRefrigSysElem_RatedSubcoolingTempDiff_type& x)
      {
        this->SimRefrigSysElem_RatedSubcoolingTempDiff_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff (const SimRefrigSysElem_RatedSubcoolingTempDiff_optional& x)
      {
        this->SimRefrigSysElem_RatedSubcoolingTempDiff_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedFanPwr_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedFanPwr () const
      {
        return this->SimRefrigSysElem_RatedFanPwr_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedFanPwr_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedFanPwr ()
      {
        return this->SimRefrigSysElem_RatedFanPwr_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_type& x)
      {
        this->SimRefrigSysElem_RatedFanPwr_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_optional& x)
      {
        this->SimRefrigSysElem_RatedFanPwr_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_MinFanAirFlowRatio_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinFanAirFlowRatio () const
      {
        return this->SimRefrigSysElem_MinFanAirFlowRatio_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_MinFanAirFlowRatio_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinFanAirFlowRatio ()
      {
        return this->SimRefrigSysElem_MinFanAirFlowRatio_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_type& x)
      {
        this->SimRefrigSysElem_MinFanAirFlowRatio_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_optional& x)
      {
        this->SimRefrigSysElem_MinFanAirFlowRatio_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRate () const
      {
        return this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRate ()
      {
        return this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRate (const SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_type& x)
      {
        this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRate (const SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional& x)
      {
        this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_FanSpeedCntlType_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_FanSpeedCntlType () const
      {
        return this->SimRefrigSysElem_FanSpeedCntlType_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_FanSpeedCntlType_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_FanSpeedCntlType ()
      {
        return this->SimRefrigSysElem_FanSpeedCntlType_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_FanSpeedCntlType (const SimRefrigSysElem_FanSpeedCntlType_type& x)
      {
        this->SimRefrigSysElem_FanSpeedCntlType_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_FanSpeedCntlType (const SimRefrigSysElem_FanSpeedCntlType_optional& x)
      {
        this->SimRefrigSysElem_FanSpeedCntlType_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_FanSpeedCntlType (::std::auto_ptr< SimRefrigSysElem_FanSpeedCntlType_type > x)
      {
        this->SimRefrigSysElem_FanSpeedCntlType_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_AppTempConstTerm_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AppTempConstTerm () const
      {
        return this->SimRefrigSysElem_AppTempConstTerm_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_AppTempConstTerm_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AppTempConstTerm ()
      {
        return this->SimRefrigSysElem_AppTempConstTerm_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AppTempConstTerm (const SimRefrigSysElem_AppTempConstTerm_type& x)
      {
        this->SimRefrigSysElem_AppTempConstTerm_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AppTempConstTerm (const SimRefrigSysElem_AppTempConstTerm_optional& x)
      {
        this->SimRefrigSysElem_AppTempConstTerm_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_ApproachTempCoef2_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef2 () const
      {
        return this->SimRefrigSysElem_ApproachTempCoef2_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_ApproachTempCoef2_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef2 ()
      {
        return this->SimRefrigSysElem_ApproachTempCoef2_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef2 (const SimRefrigSysElem_ApproachTempCoef2_type& x)
      {
        this->SimRefrigSysElem_ApproachTempCoef2_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef2 (const SimRefrigSysElem_ApproachTempCoef2_optional& x)
      {
        this->SimRefrigSysElem_ApproachTempCoef2_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_ApproachTempCoef3_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef3 () const
      {
        return this->SimRefrigSysElem_ApproachTempCoef3_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_ApproachTempCoef3_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef3 ()
      {
        return this->SimRefrigSysElem_ApproachTempCoef3_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef3 (const SimRefrigSysElem_ApproachTempCoef3_type& x)
      {
        this->SimRefrigSysElem_ApproachTempCoef3_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef3 (const SimRefrigSysElem_ApproachTempCoef3_optional& x)
      {
        this->SimRefrigSysElem_ApproachTempCoef3_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_ApproachTempCoef4_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef4 () const
      {
        return this->SimRefrigSysElem_ApproachTempCoef4_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_ApproachTempCoef4_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef4 ()
      {
        return this->SimRefrigSysElem_ApproachTempCoef4_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef4 (const SimRefrigSysElem_ApproachTempCoef4_type& x)
      {
        this->SimRefrigSysElem_ApproachTempCoef4_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_ApproachTempCoef4 (const SimRefrigSysElem_ApproachTempCoef4_optional& x)
      {
        this->SimRefrigSysElem_ApproachTempCoef4_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_MinCapFactor_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinCapFactor () const
      {
        return this->SimRefrigSysElem_MinCapFactor_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_MinCapFactor_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinCapFactor ()
      {
        return this->SimRefrigSysElem_MinCapFactor_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinCapFactor (const SimRefrigSysElem_MinCapFactor_type& x)
      {
        this->SimRefrigSysElem_MinCapFactor_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MinCapFactor (const SimRefrigSysElem_MinCapFactor_optional& x)
      {
        this->SimRefrigSysElem_MinCapFactor_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_MaxCapFactor_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MaxCapFactor () const
      {
        return this->SimRefrigSysElem_MaxCapFactor_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_MaxCapFactor_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MaxCapFactor ()
      {
        return this->SimRefrigSysElem_MaxCapFactor_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MaxCapFactor (const SimRefrigSysElem_MaxCapFactor_type& x)
      {
        this->SimRefrigSysElem_MaxCapFactor_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_MaxCapFactor (const SimRefrigSysElem_MaxCapFactor_optional& x)
      {
        this->SimRefrigSysElem_MaxCapFactor_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_AirInNodeName_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AirInNodeName () const
      {
        return this->SimRefrigSysElem_AirInNodeName_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_AirInNodeName_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AirInNodeName ()
      {
        return this->SimRefrigSysElem_AirInNodeName_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AirInNodeName (const SimRefrigSysElem_AirInNodeName_type& x)
      {
        this->SimRefrigSysElem_AirInNodeName_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AirInNodeName (const SimRefrigSysElem_AirInNodeName_optional& x)
      {
        this->SimRefrigSysElem_AirInNodeName_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_AirInNodeName (::std::auto_ptr< SimRefrigSysElem_AirInNodeName_type > x)
      {
        this->SimRefrigSysElem_AirInNodeName_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedAirFlowRate_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedAirFlowRate () const
      {
        return this->SimRefrigSysElem_RatedAirFlowRate_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedAirFlowRate_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedAirFlowRate ()
      {
        return this->SimRefrigSysElem_RatedAirFlowRate_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedAirFlowRate (const SimRefrigSysElem_RatedAirFlowRate_type& x)
      {
        this->SimRefrigSysElem_RatedAirFlowRate_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedAirFlowRate (const SimRefrigSysElem_RatedAirFlowRate_optional& x)
      {
        this->SimRefrigSysElem_RatedAirFlowRate_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedWaterPumpPwr_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedWaterPumpPwr () const
      {
        return this->SimRefrigSysElem_RatedWaterPumpPwr_;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::SimRefrigSysElem_RatedWaterPumpPwr_optional& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedWaterPumpPwr ()
      {
        return this->SimRefrigSysElem_RatedWaterPumpPwr_;
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedWaterPumpPwr (const SimRefrigSysElem_RatedWaterPumpPwr_type& x)
      {
        this->SimRefrigSysElem_RatedWaterPumpPwr_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigSysElem_RatedWaterPumpPwr (const SimRefrigSysElem_RatedWaterPumpPwr_optional& x)
      {
        this->SimRefrigSysElem_RatedWaterPumpPwr_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_Condenser_EvaporativeCooled
      //

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled ()
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement_Condenser (),
        SimRefrigSysElem_EvapCondAvailSchedName_ (this),
        SimRefrigSysElem_BasinHeatCap_ (this),
        SimRefrigSysElem_BasinHeatSetpointTemp_ (this),
        SimRefrigSysElem_EvapWaterSupplyTankName_ (this),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_ (this),
        SimRefrigSysElem_FanSpeedCntlType_ (this),
        SimRefrigSysElem_AppTempConstTerm_ (this),
        SimRefrigSysElem_ApproachTempCoef2_ (this),
        SimRefrigSysElem_ApproachTempCoef3_ (this),
        SimRefrigSysElem_ApproachTempCoef4_ (this),
        SimRefrigSysElem_MinCapFactor_ (this),
        SimRefrigSysElem_MaxCapFactor_ (this),
        SimRefrigSysElem_AirInNodeName_ (this),
        SimRefrigSysElem_RatedAirFlowRate_ (this),
        SimRefrigSysElem_RatedWaterPumpPwr_ (this)
      {
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement_Condenser (RefId),
        SimRefrigSysElem_EvapCondAvailSchedName_ (this),
        SimRefrigSysElem_BasinHeatCap_ (this),
        SimRefrigSysElem_BasinHeatSetpointTemp_ (this),
        SimRefrigSysElem_EvapWaterSupplyTankName_ (this),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_ (this),
        SimRefrigSysElem_FanSpeedCntlType_ (this),
        SimRefrigSysElem_AppTempConstTerm_ (this),
        SimRefrigSysElem_ApproachTempCoef2_ (this),
        SimRefrigSysElem_ApproachTempCoef3_ (this),
        SimRefrigSysElem_ApproachTempCoef4_ (this),
        SimRefrigSysElem_MinCapFactor_ (this),
        SimRefrigSysElem_MaxCapFactor_ (this),
        SimRefrigSysElem_AirInNodeName_ (this),
        SimRefrigSysElem_RatedAirFlowRate_ (this),
        SimRefrigSysElem_RatedWaterPumpPwr_ (this)
      {
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const SimRefrigerationSystemElement_Condenser_EvaporativeCooled& x,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement_Condenser (x, f, c),
        SimRefrigSysElem_EvapCondAvailSchedName_ (x.SimRefrigSysElem_EvapCondAvailSchedName_, f, this),
        SimRefrigSysElem_BasinHeatCap_ (x.SimRefrigSysElem_BasinHeatCap_, f, this),
        SimRefrigSysElem_BasinHeatSetpointTemp_ (x.SimRefrigSysElem_BasinHeatSetpointTemp_, f, this),
        SimRefrigSysElem_EvapWaterSupplyTankName_ (x.SimRefrigSysElem_EvapWaterSupplyTankName_, f, this),
        SimRefrigSysElem_EndUseSubCat_ (x.SimRefrigSysElem_EndUseSubCat_, f, this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (x.SimRefrigSysElem_RatedSubcoolingTempDiff_, f, this),
        SimRefrigSysElem_RatedFanPwr_ (x.SimRefrigSysElem_RatedFanPwr_, f, this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (x.SimRefrigSysElem_MinFanAirFlowRatio_, f, this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_ (x.SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_, f, this),
        SimRefrigSysElem_FanSpeedCntlType_ (x.SimRefrigSysElem_FanSpeedCntlType_, f, this),
        SimRefrigSysElem_AppTempConstTerm_ (x.SimRefrigSysElem_AppTempConstTerm_, f, this),
        SimRefrigSysElem_ApproachTempCoef2_ (x.SimRefrigSysElem_ApproachTempCoef2_, f, this),
        SimRefrigSysElem_ApproachTempCoef3_ (x.SimRefrigSysElem_ApproachTempCoef3_, f, this),
        SimRefrigSysElem_ApproachTempCoef4_ (x.SimRefrigSysElem_ApproachTempCoef4_, f, this),
        SimRefrigSysElem_MinCapFactor_ (x.SimRefrigSysElem_MinCapFactor_, f, this),
        SimRefrigSysElem_MaxCapFactor_ (x.SimRefrigSysElem_MaxCapFactor_, f, this),
        SimRefrigSysElem_AirInNodeName_ (x.SimRefrigSysElem_AirInNodeName_, f, this),
        SimRefrigSysElem_RatedAirFlowRate_ (x.SimRefrigSysElem_RatedAirFlowRate_, f, this),
        SimRefrigSysElem_RatedWaterPumpPwr_ (x.SimRefrigSysElem_RatedWaterPumpPwr_, f, this)
      {
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const ::xercesc::DOMElement& e,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement_Condenser (e, f | ::xml_schema::flags::base, c),
        SimRefrigSysElem_EvapCondAvailSchedName_ (this),
        SimRefrigSysElem_BasinHeatCap_ (this),
        SimRefrigSysElem_BasinHeatSetpointTemp_ (this),
        SimRefrigSysElem_EvapWaterSupplyTankName_ (this),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_ (this),
        SimRefrigSysElem_FanSpeedCntlType_ (this),
        SimRefrigSysElem_AppTempConstTerm_ (this),
        SimRefrigSysElem_ApproachTempCoef2_ (this),
        SimRefrigSysElem_ApproachTempCoef3_ (this),
        SimRefrigSysElem_ApproachTempCoef4_ (this),
        SimRefrigSysElem_MinCapFactor_ (this),
        SimRefrigSysElem_MaxCapFactor_ (this),
        SimRefrigSysElem_AirInNodeName_ (this),
        SimRefrigSysElem_RatedAirFlowRate_ (this),
        SimRefrigSysElem_RatedWaterPumpPwr_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimRefrigerationSystemElement_Condenser::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimRefrigSysElem_EvapCondAvailSchedName
          //
          if (n.name () == "SimRefrigSysElem_EvapCondAvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_EvapCondAvailSchedName_type > r (
              SimRefrigSysElem_EvapCondAvailSchedName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_EvapCondAvailSchedName_)
            {
              this->SimRefrigSysElem_EvapCondAvailSchedName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_BasinHeatCap
          //
          if (n.name () == "SimRefrigSysElem_BasinHeatCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_BasinHeatCap_)
            {
              this->SimRefrigSysElem_BasinHeatCap_.set (SimRefrigSysElem_BasinHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_BasinHeatSetpointTemp
          //
          if (n.name () == "SimRefrigSysElem_BasinHeatSetpointTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_BasinHeatSetpointTemp_)
            {
              this->SimRefrigSysElem_BasinHeatSetpointTemp_.set (SimRefrigSysElem_BasinHeatSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_EvapWaterSupplyTankName
          //
          if (n.name () == "SimRefrigSysElem_EvapWaterSupplyTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_EvapWaterSupplyTankName_type > r (
              SimRefrigSysElem_EvapWaterSupplyTankName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_EvapWaterSupplyTankName_)
            {
              this->SimRefrigSysElem_EvapWaterSupplyTankName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_EndUseSubCat
          //
          if (n.name () == "SimRefrigSysElem_EndUseSubCat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > r (
              SimRefrigSysElem_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_EndUseSubCat_)
            {
              this->SimRefrigSysElem_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedSubcoolingTempDiff
          //
          if (n.name () == "SimRefrigSysElem_RatedSubcoolingTempDiff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedSubcoolingTempDiff_)
            {
              this->SimRefrigSysElem_RatedSubcoolingTempDiff_.set (SimRefrigSysElem_RatedSubcoolingTempDiff_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_RatedFanPwr
          //
          if (n.name () == "SimRefrigSysElem_RatedFanPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedFanPwr_)
            {
              this->SimRefrigSysElem_RatedFanPwr_.set (SimRefrigSysElem_RatedFanPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_MinFanAirFlowRatio
          //
          if (n.name () == "SimRefrigSysElem_MinFanAirFlowRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_MinFanAirFlowRatio_)
            {
              this->SimRefrigSysElem_MinFanAirFlowRatio_.set (SimRefrigSysElem_MinFanAirFlowRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_RatedEffecTotalHeatRejectionRate
          //
          if (n.name () == "SimRefrigSysElem_RatedEffecTotalHeatRejectionRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_)
            {
              this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_.set (SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_FanSpeedCntlType
          //
          if (n.name () == "SimRefrigSysElem_FanSpeedCntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_FanSpeedCntlType_type > r (
              SimRefrigSysElem_FanSpeedCntlType_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_FanSpeedCntlType_)
            {
              this->SimRefrigSysElem_FanSpeedCntlType_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_AppTempConstTerm
          //
          if (n.name () == "SimRefrigSysElem_AppTempConstTerm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_AppTempConstTerm_)
            {
              this->SimRefrigSysElem_AppTempConstTerm_.set (SimRefrigSysElem_AppTempConstTerm_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_ApproachTempCoef2
          //
          if (n.name () == "SimRefrigSysElem_ApproachTempCoef2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_ApproachTempCoef2_)
            {
              this->SimRefrigSysElem_ApproachTempCoef2_.set (SimRefrigSysElem_ApproachTempCoef2_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_ApproachTempCoef3
          //
          if (n.name () == "SimRefrigSysElem_ApproachTempCoef3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_ApproachTempCoef3_)
            {
              this->SimRefrigSysElem_ApproachTempCoef3_.set (SimRefrigSysElem_ApproachTempCoef3_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_ApproachTempCoef4
          //
          if (n.name () == "SimRefrigSysElem_ApproachTempCoef4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_ApproachTempCoef4_)
            {
              this->SimRefrigSysElem_ApproachTempCoef4_.set (SimRefrigSysElem_ApproachTempCoef4_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_MinCapFactor
          //
          if (n.name () == "SimRefrigSysElem_MinCapFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_MinCapFactor_)
            {
              this->SimRefrigSysElem_MinCapFactor_.set (SimRefrigSysElem_MinCapFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_MaxCapFactor
          //
          if (n.name () == "SimRefrigSysElem_MaxCapFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_MaxCapFactor_)
            {
              this->SimRefrigSysElem_MaxCapFactor_.set (SimRefrigSysElem_MaxCapFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_AirInNodeName
          //
          if (n.name () == "SimRefrigSysElem_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_AirInNodeName_type > r (
              SimRefrigSysElem_AirInNodeName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_AirInNodeName_)
            {
              this->SimRefrigSysElem_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedAirFlowRate
          //
          if (n.name () == "SimRefrigSysElem_RatedAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedAirFlowRate_)
            {
              this->SimRefrigSysElem_RatedAirFlowRate_.set (SimRefrigSysElem_RatedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_RatedWaterPumpPwr
          //
          if (n.name () == "SimRefrigSysElem_RatedWaterPumpPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedWaterPumpPwr_)
            {
              this->SimRefrigSysElem_RatedWaterPumpPwr_.set (SimRefrigSysElem_RatedWaterPumpPwr_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled* SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRefrigerationSystemElement_Condenser_EvaporativeCooled (*this, f, c);
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled& SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      operator= (const SimRefrigerationSystemElement_Condenser_EvaporativeCooled& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimRefrigerationSystemElement_Condenser& > (*this) = x;
          this->SimRefrigSysElem_EvapCondAvailSchedName_ = x.SimRefrigSysElem_EvapCondAvailSchedName_;
          this->SimRefrigSysElem_BasinHeatCap_ = x.SimRefrigSysElem_BasinHeatCap_;
          this->SimRefrigSysElem_BasinHeatSetpointTemp_ = x.SimRefrigSysElem_BasinHeatSetpointTemp_;
          this->SimRefrigSysElem_EvapWaterSupplyTankName_ = x.SimRefrigSysElem_EvapWaterSupplyTankName_;
          this->SimRefrigSysElem_EndUseSubCat_ = x.SimRefrigSysElem_EndUseSubCat_;
          this->SimRefrigSysElem_RatedSubcoolingTempDiff_ = x.SimRefrigSysElem_RatedSubcoolingTempDiff_;
          this->SimRefrigSysElem_RatedFanPwr_ = x.SimRefrigSysElem_RatedFanPwr_;
          this->SimRefrigSysElem_MinFanAirFlowRatio_ = x.SimRefrigSysElem_MinFanAirFlowRatio_;
          this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_ = x.SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_;
          this->SimRefrigSysElem_FanSpeedCntlType_ = x.SimRefrigSysElem_FanSpeedCntlType_;
          this->SimRefrigSysElem_AppTempConstTerm_ = x.SimRefrigSysElem_AppTempConstTerm_;
          this->SimRefrigSysElem_ApproachTempCoef2_ = x.SimRefrigSysElem_ApproachTempCoef2_;
          this->SimRefrigSysElem_ApproachTempCoef3_ = x.SimRefrigSysElem_ApproachTempCoef3_;
          this->SimRefrigSysElem_ApproachTempCoef4_ = x.SimRefrigSysElem_ApproachTempCoef4_;
          this->SimRefrigSysElem_MinCapFactor_ = x.SimRefrigSysElem_MinCapFactor_;
          this->SimRefrigSysElem_MaxCapFactor_ = x.SimRefrigSysElem_MaxCapFactor_;
          this->SimRefrigSysElem_AirInNodeName_ = x.SimRefrigSysElem_AirInNodeName_;
          this->SimRefrigSysElem_RatedAirFlowRate_ = x.SimRefrigSysElem_RatedAirFlowRate_;
          this->SimRefrigSysElem_RatedWaterPumpPwr_ = x.SimRefrigSysElem_RatedWaterPumpPwr_;
        }

        return *this;
      }

      SimRefrigerationSystemElement_Condenser_EvaporativeCooled::
      ~SimRefrigerationSystemElement_Condenser_EvaporativeCooled ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

