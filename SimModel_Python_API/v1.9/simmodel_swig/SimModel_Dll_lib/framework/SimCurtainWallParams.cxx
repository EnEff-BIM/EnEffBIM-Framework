// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimCurtainWallParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCurtainWallParams
      // 

      const SimCurtainWallParams::OpeningProfilePath_optional& SimCurtainWallParams::
      OpeningProfilePath () const
      {
        return this->OpeningProfilePath_;
      }

      SimCurtainWallParams::OpeningProfilePath_optional& SimCurtainWallParams::
      OpeningProfilePath ()
      {
        return this->OpeningProfilePath_;
      }

      void SimCurtainWallParams::
      OpeningProfilePath (const OpeningProfilePath_type& x)
      {
        this->OpeningProfilePath_.set (x);
      }

      void SimCurtainWallParams::
      OpeningProfilePath (const OpeningProfilePath_optional& x)
      {
        this->OpeningProfilePath_ = x;
      }

      void SimCurtainWallParams::
      OpeningProfilePath (::std::auto_ptr< OpeningProfilePath_type > x)
      {
        this->OpeningProfilePath_.set (x);
      }

      const SimCurtainWallParams::ProfilePath_optional& SimCurtainWallParams::
      ProfilePath () const
      {
        return this->ProfilePath_;
      }

      SimCurtainWallParams::ProfilePath_optional& SimCurtainWallParams::
      ProfilePath ()
      {
        return this->ProfilePath_;
      }

      void SimCurtainWallParams::
      ProfilePath (const ProfilePath_type& x)
      {
        this->ProfilePath_.set (x);
      }

      void SimCurtainWallParams::
      ProfilePath (const ProfilePath_optional& x)
      {
        this->ProfilePath_ = x;
      }

      void SimCurtainWallParams::
      ProfilePath (::std::auto_ptr< ProfilePath_type > x)
      {
        this->ProfilePath_.set (x);
      }

      const SimCurtainWallParams::Length_optional& SimCurtainWallParams::
      Length () const
      {
        return this->Length_;
      }

      SimCurtainWallParams::Length_optional& SimCurtainWallParams::
      Length ()
      {
        return this->Length_;
      }

      void SimCurtainWallParams::
      Length (const Length_type& x)
      {
        this->Length_.set (x);
      }

      void SimCurtainWallParams::
      Length (const Length_optional& x)
      {
        this->Length_ = x;
      }

      const SimCurtainWallParams::Height_optional& SimCurtainWallParams::
      Height () const
      {
        return this->Height_;
      }

      SimCurtainWallParams::Height_optional& SimCurtainWallParams::
      Height ()
      {
        return this->Height_;
      }

      void SimCurtainWallParams::
      Height (const Height_type& x)
      {
        this->Height_.set (x);
      }

      void SimCurtainWallParams::
      Height (const Height_optional& x)
      {
        this->Height_ = x;
      }

      const SimCurtainWallParams::BaseElevation_optional& SimCurtainWallParams::
      BaseElevation () const
      {
        return this->BaseElevation_;
      }

      SimCurtainWallParams::BaseElevation_optional& SimCurtainWallParams::
      BaseElevation ()
      {
        return this->BaseElevation_;
      }

      void SimCurtainWallParams::
      BaseElevation (const BaseElevation_type& x)
      {
        this->BaseElevation_.set (x);
      }

      void SimCurtainWallParams::
      BaseElevation (const BaseElevation_optional& x)
      {
        this->BaseElevation_ = x;
      }

      const SimCurtainWallParams::IntendedPanelWidth_optional& SimCurtainWallParams::
      IntendedPanelWidth () const
      {
        return this->IntendedPanelWidth_;
      }

      SimCurtainWallParams::IntendedPanelWidth_optional& SimCurtainWallParams::
      IntendedPanelWidth ()
      {
        return this->IntendedPanelWidth_;
      }

      void SimCurtainWallParams::
      IntendedPanelWidth (const IntendedPanelWidth_type& x)
      {
        this->IntendedPanelWidth_.set (x);
      }

      void SimCurtainWallParams::
      IntendedPanelWidth (const IntendedPanelWidth_optional& x)
      {
        this->IntendedPanelWidth_ = x;
      }

      const SimCurtainWallParams::IntendedPanelHeight_optional& SimCurtainWallParams::
      IntendedPanelHeight () const
      {
        return this->IntendedPanelHeight_;
      }

      SimCurtainWallParams::IntendedPanelHeight_optional& SimCurtainWallParams::
      IntendedPanelHeight ()
      {
        return this->IntendedPanelHeight_;
      }

      void SimCurtainWallParams::
      IntendedPanelHeight (const IntendedPanelHeight_type& x)
      {
        this->IntendedPanelHeight_.set (x);
      }

      void SimCurtainWallParams::
      IntendedPanelHeight (const IntendedPanelHeight_optional& x)
      {
        this->IntendedPanelHeight_ = x;
      }

      const SimCurtainWallParams::ContainedPanelParams_optional& SimCurtainWallParams::
      ContainedPanelParams () const
      {
        return this->ContainedPanelParams_;
      }

      SimCurtainWallParams::ContainedPanelParams_optional& SimCurtainWallParams::
      ContainedPanelParams ()
      {
        return this->ContainedPanelParams_;
      }

      void SimCurtainWallParams::
      ContainedPanelParams (const ContainedPanelParams_type& x)
      {
        this->ContainedPanelParams_.set (x);
      }

      void SimCurtainWallParams::
      ContainedPanelParams (const ContainedPanelParams_optional& x)
      {
        this->ContainedPanelParams_ = x;
      }

      void SimCurtainWallParams::
      ContainedPanelParams (::std::auto_ptr< ContainedPanelParams_type > x)
      {
        this->ContainedPanelParams_.set (x);
      }

      const SimCurtainWallParams::IntendedFrameWidth_optional& SimCurtainWallParams::
      IntendedFrameWidth () const
      {
        return this->IntendedFrameWidth_;
      }

      SimCurtainWallParams::IntendedFrameWidth_optional& SimCurtainWallParams::
      IntendedFrameWidth ()
      {
        return this->IntendedFrameWidth_;
      }

      void SimCurtainWallParams::
      IntendedFrameWidth (const IntendedFrameWidth_type& x)
      {
        this->IntendedFrameWidth_.set (x);
      }

      void SimCurtainWallParams::
      IntendedFrameWidth (const IntendedFrameWidth_optional& x)
      {
        this->IntendedFrameWidth_ = x;
      }

      const SimCurtainWallParams::IntendedFrameDepth_optional& SimCurtainWallParams::
      IntendedFrameDepth () const
      {
        return this->IntendedFrameDepth_;
      }

      SimCurtainWallParams::IntendedFrameDepth_optional& SimCurtainWallParams::
      IntendedFrameDepth ()
      {
        return this->IntendedFrameDepth_;
      }

      void SimCurtainWallParams::
      IntendedFrameDepth (const IntendedFrameDepth_type& x)
      {
        this->IntendedFrameDepth_.set (x);
      }

      void SimCurtainWallParams::
      IntendedFrameDepth (const IntendedFrameDepth_optional& x)
      {
        this->IntendedFrameDepth_ = x;
      }

      const SimCurtainWallParams::ContainedFrameParams_optional& SimCurtainWallParams::
      ContainedFrameParams () const
      {
        return this->ContainedFrameParams_;
      }

      SimCurtainWallParams::ContainedFrameParams_optional& SimCurtainWallParams::
      ContainedFrameParams ()
      {
        return this->ContainedFrameParams_;
      }

      void SimCurtainWallParams::
      ContainedFrameParams (const ContainedFrameParams_type& x)
      {
        this->ContainedFrameParams_.set (x);
      }

      void SimCurtainWallParams::
      ContainedFrameParams (const ContainedFrameParams_optional& x)
      {
        this->ContainedFrameParams_ = x;
      }

      void SimCurtainWallParams::
      ContainedFrameParams (::std::auto_ptr< ContainedFrameParams_type > x)
      {
        this->ContainedFrameParams_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCurtainWallParams
      //

      SimCurtainWallParams::
      SimCurtainWallParams ()
      : ::schema::simxml::SimModelCore::SimBldgModelParams (),
        OpeningProfilePath_ (this),
        ProfilePath_ (this),
        Length_ (this),
        Height_ (this),
        BaseElevation_ (this),
        IntendedPanelWidth_ (this),
        IntendedPanelHeight_ (this),
        ContainedPanelParams_ (this),
        IntendedFrameWidth_ (this),
        IntendedFrameDepth_ (this),
        ContainedFrameParams_ (this)
      {
      }

      SimCurtainWallParams::
      SimCurtainWallParams (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (RefId),
        OpeningProfilePath_ (this),
        ProfilePath_ (this),
        Length_ (this),
        Height_ (this),
        BaseElevation_ (this),
        IntendedPanelWidth_ (this),
        IntendedPanelHeight_ (this),
        ContainedPanelParams_ (this),
        IntendedFrameWidth_ (this),
        IntendedFrameDepth_ (this),
        ContainedFrameParams_ (this)
      {
      }

      SimCurtainWallParams::
      SimCurtainWallParams (const SimCurtainWallParams& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (x, f, c),
        OpeningProfilePath_ (x.OpeningProfilePath_, f, this),
        ProfilePath_ (x.ProfilePath_, f, this),
        Length_ (x.Length_, f, this),
        Height_ (x.Height_, f, this),
        BaseElevation_ (x.BaseElevation_, f, this),
        IntendedPanelWidth_ (x.IntendedPanelWidth_, f, this),
        IntendedPanelHeight_ (x.IntendedPanelHeight_, f, this),
        ContainedPanelParams_ (x.ContainedPanelParams_, f, this),
        IntendedFrameWidth_ (x.IntendedFrameWidth_, f, this),
        IntendedFrameDepth_ (x.IntendedFrameDepth_, f, this),
        ContainedFrameParams_ (x.ContainedFrameParams_, f, this)
      {
      }

      SimCurtainWallParams::
      SimCurtainWallParams (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        OpeningProfilePath_ (this),
        ProfilePath_ (this),
        Length_ (this),
        Height_ (this),
        BaseElevation_ (this),
        IntendedPanelWidth_ (this),
        IntendedPanelHeight_ (this),
        ContainedPanelParams_ (this),
        IntendedFrameWidth_ (this),
        IntendedFrameDepth_ (this),
        ContainedFrameParams_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimCurtainWallParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // OpeningProfilePath
          //
          if (n.name () == "OpeningProfilePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< OpeningProfilePath_type > r (
              OpeningProfilePath_traits::create (i, f, this));

            if (!this->OpeningProfilePath_)
            {
              this->OpeningProfilePath_.set (r);
              continue;
            }
          }

          // ProfilePath
          //
          if (n.name () == "ProfilePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ProfilePath_type > r (
              ProfilePath_traits::create (i, f, this));

            if (!this->ProfilePath_)
            {
              this->ProfilePath_.set (r);
              continue;
            }
          }

          // Length
          //
          if (n.name () == "Length" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Length_)
            {
              this->Length_.set (Length_traits::create (i, f, this));
              continue;
            }
          }

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Height_)
            {
              this->Height_.set (Height_traits::create (i, f, this));
              continue;
            }
          }

          // BaseElevation
          //
          if (n.name () == "BaseElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->BaseElevation_)
            {
              this->BaseElevation_.set (BaseElevation_traits::create (i, f, this));
              continue;
            }
          }

          // IntendedPanelWidth
          //
          if (n.name () == "IntendedPanelWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->IntendedPanelWidth_)
            {
              this->IntendedPanelWidth_.set (IntendedPanelWidth_traits::create (i, f, this));
              continue;
            }
          }

          // IntendedPanelHeight
          //
          if (n.name () == "IntendedPanelHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->IntendedPanelHeight_)
            {
              this->IntendedPanelHeight_.set (IntendedPanelHeight_traits::create (i, f, this));
              continue;
            }
          }

          // ContainedPanelParams
          //
          if (n.name () == "ContainedPanelParams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedPanelParams_type > r (
              ContainedPanelParams_traits::create (i, f, this));

            if (!this->ContainedPanelParams_)
            {
              this->ContainedPanelParams_.set (r);
              continue;
            }
          }

          // IntendedFrameWidth
          //
          if (n.name () == "IntendedFrameWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->IntendedFrameWidth_)
            {
              this->IntendedFrameWidth_.set (IntendedFrameWidth_traits::create (i, f, this));
              continue;
            }
          }

          // IntendedFrameDepth
          //
          if (n.name () == "IntendedFrameDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->IntendedFrameDepth_)
            {
              this->IntendedFrameDepth_.set (IntendedFrameDepth_traits::create (i, f, this));
              continue;
            }
          }

          // ContainedFrameParams
          //
          if (n.name () == "ContainedFrameParams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedFrameParams_type > r (
              ContainedFrameParams_traits::create (i, f, this));

            if (!this->ContainedFrameParams_)
            {
              this->ContainedFrameParams_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimCurtainWallParams* SimCurtainWallParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimCurtainWallParams (*this, f, c);
      }

      SimCurtainWallParams& SimCurtainWallParams::
      operator= (const SimCurtainWallParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBldgModelParams& > (*this) = x;
          this->OpeningProfilePath_ = x.OpeningProfilePath_;
          this->ProfilePath_ = x.ProfilePath_;
          this->Length_ = x.Length_;
          this->Height_ = x.Height_;
          this->BaseElevation_ = x.BaseElevation_;
          this->IntendedPanelWidth_ = x.IntendedPanelWidth_;
          this->IntendedPanelHeight_ = x.IntendedPanelHeight_;
          this->ContainedPanelParams_ = x.ContainedPanelParams_;
          this->IntendedFrameWidth_ = x.IntendedFrameWidth_;
          this->IntendedFrameDepth_ = x.IntendedFrameDepth_;
          this->ContainedFrameParams_ = x.ContainedFrameParams_;
        }

        return *this;
      }

      SimCurtainWallParams::
      ~SimCurtainWallParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

