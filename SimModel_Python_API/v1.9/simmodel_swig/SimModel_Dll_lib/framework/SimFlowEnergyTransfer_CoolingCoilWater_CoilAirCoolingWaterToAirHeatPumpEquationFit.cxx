// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit
      // 

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_Name () const
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_Name ()
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x)
      {
        this->SimFlowEnergyTrans_Name_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_WaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_GrossRatedTotalCoolCap_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedTotalCoolCap () const
      {
        return this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_GrossRatedTotalCoolCap_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedTotalCoolCap ()
      {
        return this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedTotalCoolCap (const SimFlowEnergyTrans_GrossRatedTotalCoolCap_type& x)
      {
        this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedTotalCoolCap (const SimFlowEnergyTrans_GrossRatedTotalCoolCap_optional& x)
      {
        this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_GrossRatedCoolCOP_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedCoolCOP () const
      {
        return this->SimFlowEnergyTrans_GrossRatedCoolCOP_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_GrossRatedCoolCOP_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedCoolCOP ()
      {
        return this->SimFlowEnergyTrans_GrossRatedCoolCOP_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedCoolCOP (const SimFlowEnergyTrans_GrossRatedCoolCOP_type& x)
      {
        this->SimFlowEnergyTrans_GrossRatedCoolCOP_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedCoolCOP (const SimFlowEnergyTrans_GrossRatedCoolCOP_optional& x)
      {
        this->SimFlowEnergyTrans_GrossRatedCoolCOP_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_RatedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_RatedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedAirFlowRate (const SimFlowEnergyTrans_RatedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedAirFlowRate (const SimFlowEnergyTrans_RatedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin () const
      {
        return this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin ()
      {
        return this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin (const SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_type& x)
      {
        this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin (const SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_optional& x)
      {
        this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap () const
      {
        return this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap ()
      {
        return this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap (const SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_type& x)
      {
        this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap (const SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_RatedWaterFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedWaterFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedWaterFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_RatedWaterFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedWaterFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedWaterFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedWaterFlowRate (const SimFlowEnergyTrans_RatedWaterFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedWaterFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_RatedWaterFlowRate (const SimFlowEnergyTrans_RatedWaterFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedWaterFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_GrossRatedSensCoolCap_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedSensCoolCap () const
      {
        return this->SimFlowEnergyTrans_GrossRatedSensCoolCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_GrossRatedSensCoolCap_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedSensCoolCap ()
      {
        return this->SimFlowEnergyTrans_GrossRatedSensCoolCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedSensCoolCap (const SimFlowEnergyTrans_GrossRatedSensCoolCap_type& x)
      {
        this->SimFlowEnergyTrans_GrossRatedSensCoolCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_GrossRatedSensCoolCap (const SimFlowEnergyTrans_GrossRatedSensCoolCap_optional& x)
      {
        this->SimFlowEnergyTrans_GrossRatedSensCoolCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_TotalCoolingCapCoef_1_5 () const
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_TotalCoolingCapCoef_1_5 ()
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_TotalCoolingCapCoef_1_5 (const SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_type& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_TotalCoolingCapCoef_1_5 (const SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_optional& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_TotalCoolingCapCoef_1_5 (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_type > x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_SensCoolingCapCoef_1_6_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_SensCoolingCapCoef_1_6 () const
      {
        return this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_SensCoolingCapCoef_1_6_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_SensCoolingCapCoef_1_6 ()
      {
        return this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_SensCoolingCapCoef_1_6 (const SimFlowEnergyTrans_SensCoolingCapCoef_1_6_type& x)
      {
        this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_SensCoolingCapCoef_1_6 (const SimFlowEnergyTrans_SensCoolingCapCoef_1_6_optional& x)
      {
        this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_SensCoolingCapCoef_1_6 (::std::auto_ptr< SimFlowEnergyTrans_SensCoolingCapCoef_1_6_type > x)
      {
        this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5 () const
      {
        return this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5 ()
      {
        return this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5 (const SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_type& x)
      {
        this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5 (const SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_optional& x)
      {
        this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5 (::std::auto_ptr< SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_type > x)
      {
        this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::T24FuelSrc_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      T24FuelSrc () const
      {
        return this->T24FuelSrc_;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::T24FuelSrc_optional& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      T24FuelSrc ()
      {
        return this->T24FuelSrc_;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      T24FuelSrc (const T24FuelSrc_type& x)
      {
        this->T24FuelSrc_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      T24FuelSrc (const T24FuelSrc_optional& x)
      {
        this->T24FuelSrc_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      T24FuelSrc (::std::auto_ptr< T24FuelSrc_type > x)
      {
        this->T24FuelSrc_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit
      //

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_GrossRatedTotalCoolCap_ (this),
        SimFlowEnergyTrans_GrossRatedCoolCOP_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        SimFlowEnergyTrans_RatedWaterFlowRate_ (this),
        SimFlowEnergyTrans_GrossRatedSensCoolCap_ (this),
        SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_ (this),
        SimFlowEnergyTrans_SensCoolingCapCoef_1_6_ (this),
        SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_ (this),
        T24FuelSrc_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (RefId),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_GrossRatedTotalCoolCap_ (this),
        SimFlowEnergyTrans_GrossRatedCoolCOP_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        SimFlowEnergyTrans_RatedWaterFlowRate_ (this),
        SimFlowEnergyTrans_GrossRatedSensCoolCap_ (this),
        SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_ (this),
        SimFlowEnergyTrans_SensCoolingCapCoef_1_6_ (this),
        SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_ (this),
        T24FuelSrc_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit& x,
                                                                                          ::xml_schema::flags f,
                                                                                          ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (x, f, c),
        SimFlowEnergyTrans_Name_ (x.SimFlowEnergyTrans_Name_, f, this),
        SimFlowEnergyTrans_WaterInletNodeName_ (x.SimFlowEnergyTrans_WaterInletNodeName_, f, this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (x.SimFlowEnergyTrans_WaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_GrossRatedTotalCoolCap_ (x.SimFlowEnergyTrans_GrossRatedTotalCoolCap_, f, this),
        SimFlowEnergyTrans_GrossRatedCoolCOP_ (x.SimFlowEnergyTrans_GrossRatedCoolCOP_, f, this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (x.SimFlowEnergyTrans_RatedAirFlowRate_, f, this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (x.SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_, f, this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (x.SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_, f, this),
        SimFlowEnergyTrans_RatedWaterFlowRate_ (x.SimFlowEnergyTrans_RatedWaterFlowRate_, f, this),
        SimFlowEnergyTrans_GrossRatedSensCoolCap_ (x.SimFlowEnergyTrans_GrossRatedSensCoolCap_, f, this),
        SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_ (x.SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_, f, this),
        SimFlowEnergyTrans_SensCoolingCapCoef_1_6_ (x.SimFlowEnergyTrans_SensCoolingCapCoef_1_6_, f, this),
        SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_ (x.SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_, f, this),
        T24FuelSrc_ (x.T24FuelSrc_, f, this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit (const ::xercesc::DOMElement& e,
                                                                                          ::xml_schema::flags f,
                                                                                          ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_GrossRatedTotalCoolCap_ (this),
        SimFlowEnergyTrans_GrossRatedCoolCOP_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        SimFlowEnergyTrans_RatedWaterFlowRate_ (this),
        SimFlowEnergyTrans_GrossRatedSensCoolCap_ (this),
        SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_ (this),
        SimFlowEnergyTrans_SensCoolingCapCoef_1_6_ (this),
        SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_ (this),
        T24FuelSrc_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_Name
          //
          if (n.name () == "SimFlowEnergyTrans_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Name_type > r (
              SimFlowEnergyTrans_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Name_)
            {
              this->SimFlowEnergyTrans_Name_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > r (
              SimFlowEnergyTrans_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > r (
              SimFlowEnergyTrans_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_GrossRatedTotalCoolCap
          //
          if (n.name () == "SimFlowEnergyTrans_GrossRatedTotalCoolCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_)
            {
              this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_.set (SimFlowEnergyTrans_GrossRatedTotalCoolCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_GrossRatedCoolCOP
          //
          if (n.name () == "SimFlowEnergyTrans_GrossRatedCoolCOP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_GrossRatedCoolCOP_)
            {
              this->SimFlowEnergyTrans_GrossRatedCoolCOP_.set (SimFlowEnergyTrans_GrossRatedCoolCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedAirFlowRate_.set (SimFlowEnergyTrans_RatedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NomTimeForCondsRemovToBegin
          //
          if (n.name () == "SimFlowEnergyTrans_NomTimeForCondsRemovToBegin" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_)
            {
              this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_.set (SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_)
            {
              this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_.set (SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedWaterFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedWaterFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedWaterFlowRate_.set (SimFlowEnergyTrans_RatedWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_GrossRatedSensCoolCap
          //
          if (n.name () == "SimFlowEnergyTrans_GrossRatedSensCoolCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_GrossRatedSensCoolCap_)
            {
              this->SimFlowEnergyTrans_GrossRatedSensCoolCap_.set (SimFlowEnergyTrans_GrossRatedSensCoolCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_TotalCoolingCapCoef_1_5
          //
          if (n.name () == "SimFlowEnergyTrans_TotalCoolingCapCoef_1_5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_type > r (
              SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_)
            {
              this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SensCoolingCapCoef_1_6
          //
          if (n.name () == "SimFlowEnergyTrans_SensCoolingCapCoef_1_6" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SensCoolingCapCoef_1_6_type > r (
              SimFlowEnergyTrans_SensCoolingCapCoef_1_6_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_)
            {
              this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5
          //
          if (n.name () == "SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_type > r (
              SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_)
            {
              this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_.set (r);
              continue;
            }
          }

          // T24FuelSrc
          //
          if (n.name () == "T24FuelSrc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24FuelSrc_type > r (
              T24FuelSrc_traits::create (i, f, this));

            if (!this->T24FuelSrc_)
            {
              this->T24FuelSrc_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit* SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit (*this, f, c);
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit& SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      operator= (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater& > (*this) = x;
          this->SimFlowEnergyTrans_Name_ = x.SimFlowEnergyTrans_Name_;
          this->SimFlowEnergyTrans_WaterInletNodeName_ = x.SimFlowEnergyTrans_WaterInletNodeName_;
          this->SimFlowEnergyTrans_WaterOutletNodeName_ = x.SimFlowEnergyTrans_WaterOutletNodeName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_GrossRatedTotalCoolCap_ = x.SimFlowEnergyTrans_GrossRatedTotalCoolCap_;
          this->SimFlowEnergyTrans_GrossRatedCoolCOP_ = x.SimFlowEnergyTrans_GrossRatedCoolCOP_;
          this->SimFlowEnergyTrans_RatedAirFlowRate_ = x.SimFlowEnergyTrans_RatedAirFlowRate_;
          this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ = x.SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_;
          this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ = x.SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_;
          this->SimFlowEnergyTrans_RatedWaterFlowRate_ = x.SimFlowEnergyTrans_RatedWaterFlowRate_;
          this->SimFlowEnergyTrans_GrossRatedSensCoolCap_ = x.SimFlowEnergyTrans_GrossRatedSensCoolCap_;
          this->SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_ = x.SimFlowEnergyTrans_TotalCoolingCapCoef_1_5_;
          this->SimFlowEnergyTrans_SensCoolingCapCoef_1_6_ = x.SimFlowEnergyTrans_SensCoolingCapCoef_1_6_;
          this->SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_ = x.SimFlowEnergyTrans_CoolingPwrConsumpCoef_1_5_;
          this->T24FuelSrc_ = x.T24FuelSrc_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit::
      ~SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpEquationFit ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

