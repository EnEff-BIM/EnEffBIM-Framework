// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateZoneConditions.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateZoneConditions
      // 

      const SimTemplateZoneConditions::TemplateInfiltration_optional& SimTemplateZoneConditions::
      TemplateInfiltration () const
      {
        return this->TemplateInfiltration_;
      }

      SimTemplateZoneConditions::TemplateInfiltration_optional& SimTemplateZoneConditions::
      TemplateInfiltration ()
      {
        return this->TemplateInfiltration_;
      }

      void SimTemplateZoneConditions::
      TemplateInfiltration (const TemplateInfiltration_type& x)
      {
        this->TemplateInfiltration_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateInfiltration (const TemplateInfiltration_optional& x)
      {
        this->TemplateInfiltration_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateInfiltration (::std::auto_ptr< TemplateInfiltration_type > x)
      {
        this->TemplateInfiltration_.set (x);
      }

      const SimTemplateZoneConditions::PeakMinimumVentilationMethod_optional& SimTemplateZoneConditions::
      PeakMinimumVentilationMethod () const
      {
        return this->PeakMinimumVentilationMethod_;
      }

      SimTemplateZoneConditions::PeakMinimumVentilationMethod_optional& SimTemplateZoneConditions::
      PeakMinimumVentilationMethod ()
      {
        return this->PeakMinimumVentilationMethod_;
      }

      void SimTemplateZoneConditions::
      PeakMinimumVentilationMethod (const PeakMinimumVentilationMethod_type& x)
      {
        this->PeakMinimumVentilationMethod_.set (x);
      }

      void SimTemplateZoneConditions::
      PeakMinimumVentilationMethod (const PeakMinimumVentilationMethod_optional& x)
      {
        this->PeakMinimumVentilationMethod_ = x;
      }

      void SimTemplateZoneConditions::
      PeakMinimumVentilationMethod (::std::auto_ptr< PeakMinimumVentilationMethod_type > x)
      {
        this->PeakMinimumVentilationMethod_.set (x);
      }

      const SimTemplateZoneConditions::TemplateSimParamsZoneSizing_optional& SimTemplateZoneConditions::
      TemplateSimParamsZoneSizing () const
      {
        return this->TemplateSimParamsZoneSizing_;
      }

      SimTemplateZoneConditions::TemplateSimParamsZoneSizing_optional& SimTemplateZoneConditions::
      TemplateSimParamsZoneSizing ()
      {
        return this->TemplateSimParamsZoneSizing_;
      }

      void SimTemplateZoneConditions::
      TemplateSimParamsZoneSizing (const TemplateSimParamsZoneSizing_type& x)
      {
        this->TemplateSimParamsZoneSizing_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateSimParamsZoneSizing (const TemplateSimParamsZoneSizing_optional& x)
      {
        this->TemplateSimParamsZoneSizing_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateSimParamsZoneSizing (::std::auto_ptr< TemplateSimParamsZoneSizing_type > x)
      {
        this->TemplateSimParamsZoneSizing_.set (x);
      }

      const SimTemplateZoneConditions::ZoneThermostatType_optional& SimTemplateZoneConditions::
      ZoneThermostatType () const
      {
        return this->ZoneThermostatType_;
      }

      SimTemplateZoneConditions::ZoneThermostatType_optional& SimTemplateZoneConditions::
      ZoneThermostatType ()
      {
        return this->ZoneThermostatType_;
      }

      void SimTemplateZoneConditions::
      ZoneThermostatType (const ZoneThermostatType_type& x)
      {
        this->ZoneThermostatType_.set (x);
      }

      void SimTemplateZoneConditions::
      ZoneThermostatType (const ZoneThermostatType_optional& x)
      {
        this->ZoneThermostatType_ = x;
      }

      void SimTemplateZoneConditions::
      ZoneThermostatType (::std::auto_ptr< ZoneThermostatType_type > x)
      {
        this->ZoneThermostatType_.set (x);
      }

      const SimTemplateZoneConditions::TemplateZoneTempController_optional& SimTemplateZoneConditions::
      TemplateZoneTempController () const
      {
        return this->TemplateZoneTempController_;
      }

      SimTemplateZoneConditions::TemplateZoneTempController_optional& SimTemplateZoneConditions::
      TemplateZoneTempController ()
      {
        return this->TemplateZoneTempController_;
      }

      void SimTemplateZoneConditions::
      TemplateZoneTempController (const TemplateZoneTempController_type& x)
      {
        this->TemplateZoneTempController_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateZoneTempController (const TemplateZoneTempController_optional& x)
      {
        this->TemplateZoneTempController_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateZoneTempController (::std::auto_ptr< TemplateZoneTempController_type > x)
      {
        this->TemplateZoneTempController_.set (x);
      }

      const SimTemplateZoneConditions::ZoneHasHumidistat_optional& SimTemplateZoneConditions::
      ZoneHasHumidistat () const
      {
        return this->ZoneHasHumidistat_;
      }

      SimTemplateZoneConditions::ZoneHasHumidistat_optional& SimTemplateZoneConditions::
      ZoneHasHumidistat ()
      {
        return this->ZoneHasHumidistat_;
      }

      void SimTemplateZoneConditions::
      ZoneHasHumidistat (const ZoneHasHumidistat_type& x)
      {
        this->ZoneHasHumidistat_.set (x);
      }

      void SimTemplateZoneConditions::
      ZoneHasHumidistat (const ZoneHasHumidistat_optional& x)
      {
        this->ZoneHasHumidistat_ = x;
      }

      const SimTemplateZoneConditions::TemplateZoneHumidistat_optional& SimTemplateZoneConditions::
      TemplateZoneHumidistat () const
      {
        return this->TemplateZoneHumidistat_;
      }

      SimTemplateZoneConditions::TemplateZoneHumidistat_optional& SimTemplateZoneConditions::
      TemplateZoneHumidistat ()
      {
        return this->TemplateZoneHumidistat_;
      }

      void SimTemplateZoneConditions::
      TemplateZoneHumidistat (const TemplateZoneHumidistat_type& x)
      {
        this->TemplateZoneHumidistat_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateZoneHumidistat (const TemplateZoneHumidistat_optional& x)
      {
        this->TemplateZoneHumidistat_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateZoneHumidistat (::std::auto_ptr< TemplateZoneHumidistat_type > x)
      {
        this->TemplateZoneHumidistat_.set (x);
      }

      const SimTemplateZoneConditions::ZoneHasDemandControlledVentilation_optional& SimTemplateZoneConditions::
      ZoneHasDemandControlledVentilation () const
      {
        return this->ZoneHasDemandControlledVentilation_;
      }

      SimTemplateZoneConditions::ZoneHasDemandControlledVentilation_optional& SimTemplateZoneConditions::
      ZoneHasDemandControlledVentilation ()
      {
        return this->ZoneHasDemandControlledVentilation_;
      }

      void SimTemplateZoneConditions::
      ZoneHasDemandControlledVentilation (const ZoneHasDemandControlledVentilation_type& x)
      {
        this->ZoneHasDemandControlledVentilation_.set (x);
      }

      void SimTemplateZoneConditions::
      ZoneHasDemandControlledVentilation (const ZoneHasDemandControlledVentilation_optional& x)
      {
        this->ZoneHasDemandControlledVentilation_ = x;
      }

      const SimTemplateZoneConditions::TemplateZoneVentController_optional& SimTemplateZoneConditions::
      TemplateZoneVentController () const
      {
        return this->TemplateZoneVentController_;
      }

      SimTemplateZoneConditions::TemplateZoneVentController_optional& SimTemplateZoneConditions::
      TemplateZoneVentController ()
      {
        return this->TemplateZoneVentController_;
      }

      void SimTemplateZoneConditions::
      TemplateZoneVentController (const TemplateZoneVentController_type& x)
      {
        this->TemplateZoneVentController_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateZoneVentController (const TemplateZoneVentController_optional& x)
      {
        this->TemplateZoneVentController_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateZoneVentController (::std::auto_ptr< TemplateZoneVentController_type > x)
      {
        this->TemplateZoneVentController_.set (x);
      }

      const SimTemplateZoneConditions::RoomAirModelType_optional& SimTemplateZoneConditions::
      RoomAirModelType () const
      {
        return this->RoomAirModelType_;
      }

      SimTemplateZoneConditions::RoomAirModelType_optional& SimTemplateZoneConditions::
      RoomAirModelType ()
      {
        return this->RoomAirModelType_;
      }

      void SimTemplateZoneConditions::
      RoomAirModelType (const RoomAirModelType_type& x)
      {
        this->RoomAirModelType_.set (x);
      }

      void SimTemplateZoneConditions::
      RoomAirModelType (const RoomAirModelType_optional& x)
      {
        this->RoomAirModelType_ = x;
      }

      void SimTemplateZoneConditions::
      RoomAirModelType (::std::auto_ptr< RoomAirModelType_type > x)
      {
        this->RoomAirModelType_.set (x);
      }

      const SimTemplateZoneConditions::TemplateInfilVentOneNode_optional& SimTemplateZoneConditions::
      TemplateInfilVentOneNode () const
      {
        return this->TemplateInfilVentOneNode_;
      }

      SimTemplateZoneConditions::TemplateInfilVentOneNode_optional& SimTemplateZoneConditions::
      TemplateInfilVentOneNode ()
      {
        return this->TemplateInfilVentOneNode_;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentOneNode (const TemplateInfilVentOneNode_type& x)
      {
        this->TemplateInfilVentOneNode_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentOneNode (const TemplateInfilVentOneNode_optional& x)
      {
        this->TemplateInfilVentOneNode_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentOneNode (::std::auto_ptr< TemplateInfilVentOneNode_type > x)
      {
        this->TemplateInfilVentOneNode_.set (x);
      }

      const SimTemplateZoneConditions::TemplateInfilVentThreeNode_optional& SimTemplateZoneConditions::
      TemplateInfilVentThreeNode () const
      {
        return this->TemplateInfilVentThreeNode_;
      }

      SimTemplateZoneConditions::TemplateInfilVentThreeNode_optional& SimTemplateZoneConditions::
      TemplateInfilVentThreeNode ()
      {
        return this->TemplateInfilVentThreeNode_;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentThreeNode (const TemplateInfilVentThreeNode_type& x)
      {
        this->TemplateInfilVentThreeNode_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentThreeNode (const TemplateInfilVentThreeNode_optional& x)
      {
        this->TemplateInfilVentThreeNode_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentThreeNode (::std::auto_ptr< TemplateInfilVentThreeNode_type > x)
      {
        this->TemplateInfilVentThreeNode_.set (x);
      }

      const SimTemplateZoneConditions::TemplateInfilVentCrossVent_optional& SimTemplateZoneConditions::
      TemplateInfilVentCrossVent () const
      {
        return this->TemplateInfilVentCrossVent_;
      }

      SimTemplateZoneConditions::TemplateInfilVentCrossVent_optional& SimTemplateZoneConditions::
      TemplateInfilVentCrossVent ()
      {
        return this->TemplateInfilVentCrossVent_;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentCrossVent (const TemplateInfilVentCrossVent_type& x)
      {
        this->TemplateInfilVentCrossVent_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentCrossVent (const TemplateInfilVentCrossVent_optional& x)
      {
        this->TemplateInfilVentCrossVent_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentCrossVent (::std::auto_ptr< TemplateInfilVentCrossVent_type > x)
      {
        this->TemplateInfilVentCrossVent_.set (x);
      }

      const SimTemplateZoneConditions::InteriorOrExteriorZone_optional& SimTemplateZoneConditions::
      InteriorOrExteriorZone () const
      {
        return this->InteriorOrExteriorZone_;
      }

      SimTemplateZoneConditions::InteriorOrExteriorZone_optional& SimTemplateZoneConditions::
      InteriorOrExteriorZone ()
      {
        return this->InteriorOrExteriorZone_;
      }

      void SimTemplateZoneConditions::
      InteriorOrExteriorZone (const InteriorOrExteriorZone_type& x)
      {
        this->InteriorOrExteriorZone_.set (x);
      }

      void SimTemplateZoneConditions::
      InteriorOrExteriorZone (const InteriorOrExteriorZone_optional& x)
      {
        this->InteriorOrExteriorZone_ = x;
      }

      void SimTemplateZoneConditions::
      InteriorOrExteriorZone (::std::auto_ptr< InteriorOrExteriorZone_type > x)
      {
        this->InteriorOrExteriorZone_.set (x);
      }

      const SimTemplateZoneConditions::TemplateInfilVentFloorInt_optional& SimTemplateZoneConditions::
      TemplateInfilVentFloorInt () const
      {
        return this->TemplateInfilVentFloorInt_;
      }

      SimTemplateZoneConditions::TemplateInfilVentFloorInt_optional& SimTemplateZoneConditions::
      TemplateInfilVentFloorInt ()
      {
        return this->TemplateInfilVentFloorInt_;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentFloorInt (const TemplateInfilVentFloorInt_type& x)
      {
        this->TemplateInfilVentFloorInt_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentFloorInt (const TemplateInfilVentFloorInt_optional& x)
      {
        this->TemplateInfilVentFloorInt_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentFloorInt (::std::auto_ptr< TemplateInfilVentFloorInt_type > x)
      {
        this->TemplateInfilVentFloorInt_.set (x);
      }

      const SimTemplateZoneConditions::TemplateInfilVentFloorExt_optional& SimTemplateZoneConditions::
      TemplateInfilVentFloorExt () const
      {
        return this->TemplateInfilVentFloorExt_;
      }

      SimTemplateZoneConditions::TemplateInfilVentFloorExt_optional& SimTemplateZoneConditions::
      TemplateInfilVentFloorExt ()
      {
        return this->TemplateInfilVentFloorExt_;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentFloorExt (const TemplateInfilVentFloorExt_type& x)
      {
        this->TemplateInfilVentFloorExt_.set (x);
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentFloorExt (const TemplateInfilVentFloorExt_optional& x)
      {
        this->TemplateInfilVentFloorExt_ = x;
      }

      void SimTemplateZoneConditions::
      TemplateInfilVentFloorExt (::std::auto_ptr< TemplateInfilVentFloorExt_type > x)
      {
        this->TemplateInfilVentFloorExt_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateZoneConditions
      //

      SimTemplateZoneConditions::
      SimTemplateZoneConditions ()
      : ::schema::simxml::SimModelCore::SimTemplate (),
        TemplateInfiltration_ (this),
        PeakMinimumVentilationMethod_ (this),
        TemplateSimParamsZoneSizing_ (this),
        ZoneThermostatType_ (this),
        TemplateZoneTempController_ (this),
        ZoneHasHumidistat_ (this),
        TemplateZoneHumidistat_ (this),
        ZoneHasDemandControlledVentilation_ (this),
        TemplateZoneVentController_ (this),
        RoomAirModelType_ (this),
        TemplateInfilVentOneNode_ (this),
        TemplateInfilVentThreeNode_ (this),
        TemplateInfilVentCrossVent_ (this),
        InteriorOrExteriorZone_ (this),
        TemplateInfilVentFloorInt_ (this),
        TemplateInfilVentFloorExt_ (this)
      {
      }

      SimTemplateZoneConditions::
      SimTemplateZoneConditions (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimTemplate (RefId),
        TemplateInfiltration_ (this),
        PeakMinimumVentilationMethod_ (this),
        TemplateSimParamsZoneSizing_ (this),
        ZoneThermostatType_ (this),
        TemplateZoneTempController_ (this),
        ZoneHasHumidistat_ (this),
        TemplateZoneHumidistat_ (this),
        ZoneHasDemandControlledVentilation_ (this),
        TemplateZoneVentController_ (this),
        RoomAirModelType_ (this),
        TemplateInfilVentOneNode_ (this),
        TemplateInfilVentThreeNode_ (this),
        TemplateInfilVentCrossVent_ (this),
        InteriorOrExteriorZone_ (this),
        TemplateInfilVentFloorInt_ (this),
        TemplateInfilVentFloorExt_ (this)
      {
      }

      SimTemplateZoneConditions::
      SimTemplateZoneConditions (const SimTemplateZoneConditions& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (x, f, c),
        TemplateInfiltration_ (x.TemplateInfiltration_, f, this),
        PeakMinimumVentilationMethod_ (x.PeakMinimumVentilationMethod_, f, this),
        TemplateSimParamsZoneSizing_ (x.TemplateSimParamsZoneSizing_, f, this),
        ZoneThermostatType_ (x.ZoneThermostatType_, f, this),
        TemplateZoneTempController_ (x.TemplateZoneTempController_, f, this),
        ZoneHasHumidistat_ (x.ZoneHasHumidistat_, f, this),
        TemplateZoneHumidistat_ (x.TemplateZoneHumidistat_, f, this),
        ZoneHasDemandControlledVentilation_ (x.ZoneHasDemandControlledVentilation_, f, this),
        TemplateZoneVentController_ (x.TemplateZoneVentController_, f, this),
        RoomAirModelType_ (x.RoomAirModelType_, f, this),
        TemplateInfilVentOneNode_ (x.TemplateInfilVentOneNode_, f, this),
        TemplateInfilVentThreeNode_ (x.TemplateInfilVentThreeNode_, f, this),
        TemplateInfilVentCrossVent_ (x.TemplateInfilVentCrossVent_, f, this),
        InteriorOrExteriorZone_ (x.InteriorOrExteriorZone_, f, this),
        TemplateInfilVentFloorInt_ (x.TemplateInfilVentFloorInt_, f, this),
        TemplateInfilVentFloorExt_ (x.TemplateInfilVentFloorExt_, f, this)
      {
      }

      SimTemplateZoneConditions::
      SimTemplateZoneConditions (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateInfiltration_ (this),
        PeakMinimumVentilationMethod_ (this),
        TemplateSimParamsZoneSizing_ (this),
        ZoneThermostatType_ (this),
        TemplateZoneTempController_ (this),
        ZoneHasHumidistat_ (this),
        TemplateZoneHumidistat_ (this),
        ZoneHasDemandControlledVentilation_ (this),
        TemplateZoneVentController_ (this),
        RoomAirModelType_ (this),
        TemplateInfilVentOneNode_ (this),
        TemplateInfilVentThreeNode_ (this),
        TemplateInfilVentCrossVent_ (this),
        InteriorOrExteriorZone_ (this),
        TemplateInfilVentFloorInt_ (this),
        TemplateInfilVentFloorExt_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateZoneConditions::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateInfiltration
          //
          if (n.name () == "TemplateInfiltration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInfiltration_type > r (
              TemplateInfiltration_traits::create (i, f, this));

            if (!this->TemplateInfiltration_)
            {
              this->TemplateInfiltration_.set (r);
              continue;
            }
          }

          // PeakMinimumVentilationMethod
          //
          if (n.name () == "PeakMinimumVentilationMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PeakMinimumVentilationMethod_type > r (
              PeakMinimumVentilationMethod_traits::create (i, f, this));

            if (!this->PeakMinimumVentilationMethod_)
            {
              this->PeakMinimumVentilationMethod_.set (r);
              continue;
            }
          }

          // TemplateSimParamsZoneSizing
          //
          if (n.name () == "TemplateSimParamsZoneSizing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSimParamsZoneSizing_type > r (
              TemplateSimParamsZoneSizing_traits::create (i, f, this));

            if (!this->TemplateSimParamsZoneSizing_)
            {
              this->TemplateSimParamsZoneSizing_.set (r);
              continue;
            }
          }

          // ZoneThermostatType
          //
          if (n.name () == "ZoneThermostatType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ZoneThermostatType_type > r (
              ZoneThermostatType_traits::create (i, f, this));

            if (!this->ZoneThermostatType_)
            {
              this->ZoneThermostatType_.set (r);
              continue;
            }
          }

          // TemplateZoneTempController
          //
          if (n.name () == "TemplateZoneTempController" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateZoneTempController_type > r (
              TemplateZoneTempController_traits::create (i, f, this));

            if (!this->TemplateZoneTempController_)
            {
              this->TemplateZoneTempController_.set (r);
              continue;
            }
          }

          // ZoneHasHumidistat
          //
          if (n.name () == "ZoneHasHumidistat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ZoneHasHumidistat_)
            {
              this->ZoneHasHumidistat_.set (ZoneHasHumidistat_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateZoneHumidistat
          //
          if (n.name () == "TemplateZoneHumidistat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateZoneHumidistat_type > r (
              TemplateZoneHumidistat_traits::create (i, f, this));

            if (!this->TemplateZoneHumidistat_)
            {
              this->TemplateZoneHumidistat_.set (r);
              continue;
            }
          }

          // ZoneHasDemandControlledVentilation
          //
          if (n.name () == "ZoneHasDemandControlledVentilation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ZoneHasDemandControlledVentilation_)
            {
              this->ZoneHasDemandControlledVentilation_.set (ZoneHasDemandControlledVentilation_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateZoneVentController
          //
          if (n.name () == "TemplateZoneVentController" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateZoneVentController_type > r (
              TemplateZoneVentController_traits::create (i, f, this));

            if (!this->TemplateZoneVentController_)
            {
              this->TemplateZoneVentController_.set (r);
              continue;
            }
          }

          // RoomAirModelType
          //
          if (n.name () == "RoomAirModelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< RoomAirModelType_type > r (
              RoomAirModelType_traits::create (i, f, this));

            if (!this->RoomAirModelType_)
            {
              this->RoomAirModelType_.set (r);
              continue;
            }
          }

          // TemplateInfilVentOneNode
          //
          if (n.name () == "TemplateInfilVentOneNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInfilVentOneNode_type > r (
              TemplateInfilVentOneNode_traits::create (i, f, this));

            if (!this->TemplateInfilVentOneNode_)
            {
              this->TemplateInfilVentOneNode_.set (r);
              continue;
            }
          }

          // TemplateInfilVentThreeNode
          //
          if (n.name () == "TemplateInfilVentThreeNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInfilVentThreeNode_type > r (
              TemplateInfilVentThreeNode_traits::create (i, f, this));

            if (!this->TemplateInfilVentThreeNode_)
            {
              this->TemplateInfilVentThreeNode_.set (r);
              continue;
            }
          }

          // TemplateInfilVentCrossVent
          //
          if (n.name () == "TemplateInfilVentCrossVent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInfilVentCrossVent_type > r (
              TemplateInfilVentCrossVent_traits::create (i, f, this));

            if (!this->TemplateInfilVentCrossVent_)
            {
              this->TemplateInfilVentCrossVent_.set (r);
              continue;
            }
          }

          // InteriorOrExteriorZone
          //
          if (n.name () == "InteriorOrExteriorZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< InteriorOrExteriorZone_type > r (
              InteriorOrExteriorZone_traits::create (i, f, this));

            if (!this->InteriorOrExteriorZone_)
            {
              this->InteriorOrExteriorZone_.set (r);
              continue;
            }
          }

          // TemplateInfilVentFloorInt
          //
          if (n.name () == "TemplateInfilVentFloorInt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInfilVentFloorInt_type > r (
              TemplateInfilVentFloorInt_traits::create (i, f, this));

            if (!this->TemplateInfilVentFloorInt_)
            {
              this->TemplateInfilVentFloorInt_.set (r);
              continue;
            }
          }

          // TemplateInfilVentFloorExt
          //
          if (n.name () == "TemplateInfilVentFloorExt" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInfilVentFloorExt_type > r (
              TemplateInfilVentFloorExt_traits::create (i, f, this));

            if (!this->TemplateInfilVentFloorExt_)
            {
              this->TemplateInfilVentFloorExt_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimTemplateZoneConditions* SimTemplateZoneConditions::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateZoneConditions (*this, f, c);
      }

      SimTemplateZoneConditions& SimTemplateZoneConditions::
      operator= (const SimTemplateZoneConditions& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimTemplate& > (*this) = x;
          this->TemplateInfiltration_ = x.TemplateInfiltration_;
          this->PeakMinimumVentilationMethod_ = x.PeakMinimumVentilationMethod_;
          this->TemplateSimParamsZoneSizing_ = x.TemplateSimParamsZoneSizing_;
          this->ZoneThermostatType_ = x.ZoneThermostatType_;
          this->TemplateZoneTempController_ = x.TemplateZoneTempController_;
          this->ZoneHasHumidistat_ = x.ZoneHasHumidistat_;
          this->TemplateZoneHumidistat_ = x.TemplateZoneHumidistat_;
          this->ZoneHasDemandControlledVentilation_ = x.ZoneHasDemandControlledVentilation_;
          this->TemplateZoneVentController_ = x.TemplateZoneVentController_;
          this->RoomAirModelType_ = x.RoomAirModelType_;
          this->TemplateInfilVentOneNode_ = x.TemplateInfilVentOneNode_;
          this->TemplateInfilVentThreeNode_ = x.TemplateInfilVentThreeNode_;
          this->TemplateInfilVentCrossVent_ = x.TemplateInfilVentCrossVent_;
          this->InteriorOrExteriorZone_ = x.InteriorOrExteriorZone_;
          this->TemplateInfilVentFloorInt_ = x.TemplateInfilVentFloorInt_;
          this->TemplateInfilVentFloorExt_ = x.TemplateInfilVentFloorExt_;
        }

        return *this;
      }

      SimTemplateZoneConditions::
      ~SimTemplateZoneConditions ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

