// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimModelRepresentationContext_GeometricRepresentationContext.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimModelRepresentationContext_GeometricRepresentationContext
      // 

      const SimModelRepresentationContext_GeometricRepresentationContext::CoordinateSpaceDimension_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      CoordinateSpaceDimension () const
      {
        return this->CoordinateSpaceDimension_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::CoordinateSpaceDimension_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      CoordinateSpaceDimension ()
      {
        return this->CoordinateSpaceDimension_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      CoordinateSpaceDimension (const CoordinateSpaceDimension_type& x)
      {
        this->CoordinateSpaceDimension_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      CoordinateSpaceDimension (const CoordinateSpaceDimension_optional& x)
      {
        this->CoordinateSpaceDimension_ = x;
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::Precision_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      Precision () const
      {
        return this->Precision_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::Precision_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      Precision ()
      {
        return this->Precision_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      Precision (const Precision_type& x)
      {
        this->Precision_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      Precision (const Precision_optional& x)
      {
        this->Precision_ = x;
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::WorldCoordinateSystem_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      WorldCoordinateSystem () const
      {
        return this->WorldCoordinateSystem_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::WorldCoordinateSystem_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      WorldCoordinateSystem ()
      {
        return this->WorldCoordinateSystem_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      WorldCoordinateSystem (const WorldCoordinateSystem_type& x)
      {
        this->WorldCoordinateSystem_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      WorldCoordinateSystem (const WorldCoordinateSystem_optional& x)
      {
        this->WorldCoordinateSystem_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      WorldCoordinateSystem (::std::auto_ptr< WorldCoordinateSystem_type > x)
      {
        this->WorldCoordinateSystem_.set (x);
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::TrueNorth_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      TrueNorth () const
      {
        return this->TrueNorth_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::TrueNorth_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      TrueNorth ()
      {
        return this->TrueNorth_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      TrueNorth (const TrueNorth_type& x)
      {
        this->TrueNorth_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      TrueNorth (const TrueNorth_optional& x)
      {
        this->TrueNorth_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      TrueNorth (::std::auto_ptr< TrueNorth_type > x)
      {
        this->TrueNorth_.set (x);
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_StartVertexPosition_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_StartVertexPosition () const
      {
        return this->SimModelRepresentationContext_StartVertexPosition_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_StartVertexPosition_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_StartVertexPosition ()
      {
        return this->SimModelRepresentationContext_StartVertexPosition_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_StartVertexPosition (const SimModelRepresentationContext_StartVertexPosition_type& x)
      {
        this->SimModelRepresentationContext_StartVertexPosition_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_StartVertexPosition (const SimModelRepresentationContext_StartVertexPosition_optional& x)
      {
        this->SimModelRepresentationContext_StartVertexPosition_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_StartVertexPosition (::std::auto_ptr< SimModelRepresentationContext_StartVertexPosition_type > x)
      {
        this->SimModelRepresentationContext_StartVertexPosition_.set (x);
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_VertexEntryDir_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_VertexEntryDir () const
      {
        return this->SimModelRepresentationContext_VertexEntryDir_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_VertexEntryDir_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_VertexEntryDir ()
      {
        return this->SimModelRepresentationContext_VertexEntryDir_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_VertexEntryDir (const SimModelRepresentationContext_VertexEntryDir_type& x)
      {
        this->SimModelRepresentationContext_VertexEntryDir_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_VertexEntryDir (const SimModelRepresentationContext_VertexEntryDir_optional& x)
      {
        this->SimModelRepresentationContext_VertexEntryDir_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_VertexEntryDir (::std::auto_ptr< SimModelRepresentationContext_VertexEntryDir_type > x)
      {
        this->SimModelRepresentationContext_VertexEntryDir_.set (x);
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_CoordSys_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_CoordSys () const
      {
        return this->SimModelRepresentationContext_CoordSys_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_CoordSys_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_CoordSys ()
      {
        return this->SimModelRepresentationContext_CoordSys_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_CoordSys (const SimModelRepresentationContext_CoordSys_type& x)
      {
        this->SimModelRepresentationContext_CoordSys_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_CoordSys (const SimModelRepresentationContext_CoordSys_optional& x)
      {
        this->SimModelRepresentationContext_CoordSys_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_CoordSys (::std::auto_ptr< SimModelRepresentationContext_CoordSys_type > x)
      {
        this->SimModelRepresentationContext_CoordSys_.set (x);
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_DylghtRefPointCoordSys_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_DylghtRefPointCoordSys () const
      {
        return this->SimModelRepresentationContext_DylghtRefPointCoordSys_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_DylghtRefPointCoordSys_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_DylghtRefPointCoordSys ()
      {
        return this->SimModelRepresentationContext_DylghtRefPointCoordSys_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_DylghtRefPointCoordSys (const SimModelRepresentationContext_DylghtRefPointCoordSys_type& x)
      {
        this->SimModelRepresentationContext_DylghtRefPointCoordSys_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_DylghtRefPointCoordSys (const SimModelRepresentationContext_DylghtRefPointCoordSys_optional& x)
      {
        this->SimModelRepresentationContext_DylghtRefPointCoordSys_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_DylghtRefPointCoordSys (::std::auto_ptr< SimModelRepresentationContext_DylghtRefPointCoordSys_type > x)
      {
        this->SimModelRepresentationContext_DylghtRefPointCoordSys_.set (x);
      }

      const SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_RectSurfCoordSys_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_RectSurfCoordSys () const
      {
        return this->SimModelRepresentationContext_RectSurfCoordSys_;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::SimModelRepresentationContext_RectSurfCoordSys_optional& SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_RectSurfCoordSys ()
      {
        return this->SimModelRepresentationContext_RectSurfCoordSys_;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_RectSurfCoordSys (const SimModelRepresentationContext_RectSurfCoordSys_type& x)
      {
        this->SimModelRepresentationContext_RectSurfCoordSys_.set (x);
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_RectSurfCoordSys (const SimModelRepresentationContext_RectSurfCoordSys_optional& x)
      {
        this->SimModelRepresentationContext_RectSurfCoordSys_ = x;
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_RectSurfCoordSys (::std::auto_ptr< SimModelRepresentationContext_RectSurfCoordSys_type > x)
      {
        this->SimModelRepresentationContext_RectSurfCoordSys_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimModelRepresentationContext_GeometricRepresentationContext
      //

      SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_GeometricRepresentationContext ()
      : ::schema::simxml::ResourcesGeneral::SimModelRepresentationContext (),
        CoordinateSpaceDimension_ (this),
        Precision_ (this),
        WorldCoordinateSystem_ (this),
        TrueNorth_ (this),
        SimModelRepresentationContext_StartVertexPosition_ (this),
        SimModelRepresentationContext_VertexEntryDir_ (this),
        SimModelRepresentationContext_CoordSys_ (this),
        SimModelRepresentationContext_DylghtRefPointCoordSys_ (this),
        SimModelRepresentationContext_RectSurfCoordSys_ (this)
      {
      }

      SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_GeometricRepresentationContext (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimModelRepresentationContext (RefId),
        CoordinateSpaceDimension_ (this),
        Precision_ (this),
        WorldCoordinateSystem_ (this),
        TrueNorth_ (this),
        SimModelRepresentationContext_StartVertexPosition_ (this),
        SimModelRepresentationContext_VertexEntryDir_ (this),
        SimModelRepresentationContext_CoordSys_ (this),
        SimModelRepresentationContext_DylghtRefPointCoordSys_ (this),
        SimModelRepresentationContext_RectSurfCoordSys_ (this)
      {
      }

      SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_GeometricRepresentationContext (const SimModelRepresentationContext_GeometricRepresentationContext& x,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimModelRepresentationContext (x, f, c),
        CoordinateSpaceDimension_ (x.CoordinateSpaceDimension_, f, this),
        Precision_ (x.Precision_, f, this),
        WorldCoordinateSystem_ (x.WorldCoordinateSystem_, f, this),
        TrueNorth_ (x.TrueNorth_, f, this),
        SimModelRepresentationContext_StartVertexPosition_ (x.SimModelRepresentationContext_StartVertexPosition_, f, this),
        SimModelRepresentationContext_VertexEntryDir_ (x.SimModelRepresentationContext_VertexEntryDir_, f, this),
        SimModelRepresentationContext_CoordSys_ (x.SimModelRepresentationContext_CoordSys_, f, this),
        SimModelRepresentationContext_DylghtRefPointCoordSys_ (x.SimModelRepresentationContext_DylghtRefPointCoordSys_, f, this),
        SimModelRepresentationContext_RectSurfCoordSys_ (x.SimModelRepresentationContext_RectSurfCoordSys_, f, this)
      {
      }

      SimModelRepresentationContext_GeometricRepresentationContext::
      SimModelRepresentationContext_GeometricRepresentationContext (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimModelRepresentationContext (e, f | ::xml_schema::flags::base, c),
        CoordinateSpaceDimension_ (this),
        Precision_ (this),
        WorldCoordinateSystem_ (this),
        TrueNorth_ (this),
        SimModelRepresentationContext_StartVertexPosition_ (this),
        SimModelRepresentationContext_VertexEntryDir_ (this),
        SimModelRepresentationContext_CoordSys_ (this),
        SimModelRepresentationContext_DylghtRefPointCoordSys_ (this),
        SimModelRepresentationContext_RectSurfCoordSys_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimModelRepresentationContext_GeometricRepresentationContext::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimModelRepresentationContext::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CoordinateSpaceDimension
          //
          if (n.name () == "CoordinateSpaceDimension" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->CoordinateSpaceDimension_)
            {
              this->CoordinateSpaceDimension_.set (CoordinateSpaceDimension_traits::create (i, f, this));
              continue;
            }
          }

          // Precision
          //
          if (n.name () == "Precision" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Precision_)
            {
              this->Precision_.set (Precision_traits::create (i, f, this));
              continue;
            }
          }

          // WorldCoordinateSystem
          //
          if (n.name () == "WorldCoordinateSystem" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WorldCoordinateSystem_type > r (
              WorldCoordinateSystem_traits::create (i, f, this));

            if (!this->WorldCoordinateSystem_)
            {
              this->WorldCoordinateSystem_.set (r);
              continue;
            }
          }

          // TrueNorth
          //
          if (n.name () == "TrueNorth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TrueNorth_type > r (
              TrueNorth_traits::create (i, f, this));

            if (!this->TrueNorth_)
            {
              this->TrueNorth_.set (r);
              continue;
            }
          }

          // SimModelRepresentationContext_StartVertexPosition
          //
          if (n.name () == "SimModelRepresentationContext_StartVertexPosition" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimModelRepresentationContext_StartVertexPosition_type > r (
              SimModelRepresentationContext_StartVertexPosition_traits::create (i, f, this));

            if (!this->SimModelRepresentationContext_StartVertexPosition_)
            {
              this->SimModelRepresentationContext_StartVertexPosition_.set (r);
              continue;
            }
          }

          // SimModelRepresentationContext_VertexEntryDir
          //
          if (n.name () == "SimModelRepresentationContext_VertexEntryDir" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimModelRepresentationContext_VertexEntryDir_type > r (
              SimModelRepresentationContext_VertexEntryDir_traits::create (i, f, this));

            if (!this->SimModelRepresentationContext_VertexEntryDir_)
            {
              this->SimModelRepresentationContext_VertexEntryDir_.set (r);
              continue;
            }
          }

          // SimModelRepresentationContext_CoordSys
          //
          if (n.name () == "SimModelRepresentationContext_CoordSys" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimModelRepresentationContext_CoordSys_type > r (
              SimModelRepresentationContext_CoordSys_traits::create (i, f, this));

            if (!this->SimModelRepresentationContext_CoordSys_)
            {
              this->SimModelRepresentationContext_CoordSys_.set (r);
              continue;
            }
          }

          // SimModelRepresentationContext_DylghtRefPointCoordSys
          //
          if (n.name () == "SimModelRepresentationContext_DylghtRefPointCoordSys" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimModelRepresentationContext_DylghtRefPointCoordSys_type > r (
              SimModelRepresentationContext_DylghtRefPointCoordSys_traits::create (i, f, this));

            if (!this->SimModelRepresentationContext_DylghtRefPointCoordSys_)
            {
              this->SimModelRepresentationContext_DylghtRefPointCoordSys_.set (r);
              continue;
            }
          }

          // SimModelRepresentationContext_RectSurfCoordSys
          //
          if (n.name () == "SimModelRepresentationContext_RectSurfCoordSys" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimModelRepresentationContext_RectSurfCoordSys_type > r (
              SimModelRepresentationContext_RectSurfCoordSys_traits::create (i, f, this));

            if (!this->SimModelRepresentationContext_RectSurfCoordSys_)
            {
              this->SimModelRepresentationContext_RectSurfCoordSys_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimModelRepresentationContext_GeometricRepresentationContext* SimModelRepresentationContext_GeometricRepresentationContext::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimModelRepresentationContext_GeometricRepresentationContext (*this, f, c);
      }

      SimModelRepresentationContext_GeometricRepresentationContext& SimModelRepresentationContext_GeometricRepresentationContext::
      operator= (const SimModelRepresentationContext_GeometricRepresentationContext& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimModelRepresentationContext& > (*this) = x;
          this->CoordinateSpaceDimension_ = x.CoordinateSpaceDimension_;
          this->Precision_ = x.Precision_;
          this->WorldCoordinateSystem_ = x.WorldCoordinateSystem_;
          this->TrueNorth_ = x.TrueNorth_;
          this->SimModelRepresentationContext_StartVertexPosition_ = x.SimModelRepresentationContext_StartVertexPosition_;
          this->SimModelRepresentationContext_VertexEntryDir_ = x.SimModelRepresentationContext_VertexEntryDir_;
          this->SimModelRepresentationContext_CoordSys_ = x.SimModelRepresentationContext_CoordSys_;
          this->SimModelRepresentationContext_DylghtRefPointCoordSys_ = x.SimModelRepresentationContext_DylghtRefPointCoordSys_;
          this->SimModelRepresentationContext_RectSurfCoordSys_ = x.SimModelRepresentationContext_RectSurfCoordSys_;
        }

        return *this;
      }

      SimModelRepresentationContext_GeometricRepresentationContext::
      ~SimModelRepresentationContext_GeometricRepresentationContext ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

