// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_MOVER_SUPPLY_FAN_COMPONENT_MODEL_HXX
#define SIM_FLOW_MOVER_SUPPLY_FAN_COMPONENT_MODEL_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowMover_SupplyFan_ComponentModel;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowmover_supplyfan.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowMover_SupplyFan_ComponentModel: public ::schema::simxml::MepModel::SimFlowMover_SupplyFan
      {
        public:
        // SimFlowMover_MinFlowRate
        //
        typedef ::xml_schema::double_ SimFlowMover_MinFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MinFlowRate_type > SimFlowMover_MinFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MinFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MinFlowRate_traits;

        const SimFlowMover_MinFlowRate_optional&
        SimFlowMover_MinFlowRate () const;

        SimFlowMover_MinFlowRate_optional&
        SimFlowMover_MinFlowRate ();

        void
        SimFlowMover_MinFlowRate (const SimFlowMover_MinFlowRate_type& x);

        void
        SimFlowMover_MinFlowRate (const SimFlowMover_MinFlowRate_optional& x);

        // SimFlowMover_FanSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowMover_FanSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_FanSizingFactor_type > SimFlowMover_FanSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_FanSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_FanSizingFactor_traits;

        const SimFlowMover_FanSizingFactor_optional&
        SimFlowMover_FanSizingFactor () const;

        SimFlowMover_FanSizingFactor_optional&
        SimFlowMover_FanSizingFactor ();

        void
        SimFlowMover_FanSizingFactor (const SimFlowMover_FanSizingFactor_type& x);

        void
        SimFlowMover_FanSizingFactor (const SimFlowMover_FanSizingFactor_optional& x);

        // SimFlowMover_FanWheelDiameter
        //
        typedef ::xml_schema::double_ SimFlowMover_FanWheelDiameter_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_FanWheelDiameter_type > SimFlowMover_FanWheelDiameter_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_FanWheelDiameter_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_FanWheelDiameter_traits;

        const SimFlowMover_FanWheelDiameter_optional&
        SimFlowMover_FanWheelDiameter () const;

        SimFlowMover_FanWheelDiameter_optional&
        SimFlowMover_FanWheelDiameter ();

        void
        SimFlowMover_FanWheelDiameter (const SimFlowMover_FanWheelDiameter_type& x);

        void
        SimFlowMover_FanWheelDiameter (const SimFlowMover_FanWheelDiameter_optional& x);

        // SimFlowMover_FanOutletArea
        //
        typedef ::xml_schema::double_ SimFlowMover_FanOutletArea_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_FanOutletArea_type > SimFlowMover_FanOutletArea_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_FanOutletArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_FanOutletArea_traits;

        const SimFlowMover_FanOutletArea_optional&
        SimFlowMover_FanOutletArea () const;

        SimFlowMover_FanOutletArea_optional&
        SimFlowMover_FanOutletArea ();

        void
        SimFlowMover_FanOutletArea (const SimFlowMover_FanOutletArea_type& x);

        void
        SimFlowMover_FanOutletArea (const SimFlowMover_FanOutletArea_optional& x);

        // SimFlowMover_MaxFanStaticEfficiency
        //
        typedef ::xml_schema::double_ SimFlowMover_MaxFanStaticEfficiency_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MaxFanStaticEfficiency_type > SimFlowMover_MaxFanStaticEfficiency_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MaxFanStaticEfficiency_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MaxFanStaticEfficiency_traits;

        const SimFlowMover_MaxFanStaticEfficiency_optional&
        SimFlowMover_MaxFanStaticEfficiency () const;

        SimFlowMover_MaxFanStaticEfficiency_optional&
        SimFlowMover_MaxFanStaticEfficiency ();

        void
        SimFlowMover_MaxFanStaticEfficiency (const SimFlowMover_MaxFanStaticEfficiency_type& x);

        void
        SimFlowMover_MaxFanStaticEfficiency (const SimFlowMover_MaxFanStaticEfficiency_optional& x);

        // SimFlowMover_EulerNumberAtMaxFanStaticEfficiency
        //
        typedef ::xml_schema::double_ SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_type > SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_traits;

        const SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional&
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency () const;

        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional&
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency ();

        void
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency (const SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_type& x);

        void
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency (const SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional& x);

        // SimFlowMover_MaxDimlessFanAirflow
        //
        typedef ::xml_schema::double_ SimFlowMover_MaxDimlessFanAirflow_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MaxDimlessFanAirflow_type > SimFlowMover_MaxDimlessFanAirflow_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MaxDimlessFanAirflow_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MaxDimlessFanAirflow_traits;

        const SimFlowMover_MaxDimlessFanAirflow_optional&
        SimFlowMover_MaxDimlessFanAirflow () const;

        SimFlowMover_MaxDimlessFanAirflow_optional&
        SimFlowMover_MaxDimlessFanAirflow ();

        void
        SimFlowMover_MaxDimlessFanAirflow (const SimFlowMover_MaxDimlessFanAirflow_type& x);

        void
        SimFlowMover_MaxDimlessFanAirflow (const SimFlowMover_MaxDimlessFanAirflow_optional& x);

        // SimFlowMover_MotorFanPulleyRatio
        //
        typedef ::xml_schema::double_ SimFlowMover_MotorFanPulleyRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MotorFanPulleyRatio_type > SimFlowMover_MotorFanPulleyRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MotorFanPulleyRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MotorFanPulleyRatio_traits;

        const SimFlowMover_MotorFanPulleyRatio_optional&
        SimFlowMover_MotorFanPulleyRatio () const;

        SimFlowMover_MotorFanPulleyRatio_optional&
        SimFlowMover_MotorFanPulleyRatio ();

        void
        SimFlowMover_MotorFanPulleyRatio (const SimFlowMover_MotorFanPulleyRatio_type& x);

        void
        SimFlowMover_MotorFanPulleyRatio (const SimFlowMover_MotorFanPulleyRatio_optional& x);

        // SimFlowMover_BeltMaxTorque
        //
        typedef ::xml_schema::double_ SimFlowMover_BeltMaxTorque_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_BeltMaxTorque_type > SimFlowMover_BeltMaxTorque_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_BeltMaxTorque_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_BeltMaxTorque_traits;

        const SimFlowMover_BeltMaxTorque_optional&
        SimFlowMover_BeltMaxTorque () const;

        SimFlowMover_BeltMaxTorque_optional&
        SimFlowMover_BeltMaxTorque ();

        void
        SimFlowMover_BeltMaxTorque (const SimFlowMover_BeltMaxTorque_type& x);

        void
        SimFlowMover_BeltMaxTorque (const SimFlowMover_BeltMaxTorque_optional& x);

        // SimFlowMover_BeltSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowMover_BeltSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_BeltSizingFactor_type > SimFlowMover_BeltSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_BeltSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_BeltSizingFactor_traits;

        const SimFlowMover_BeltSizingFactor_optional&
        SimFlowMover_BeltSizingFactor () const;

        SimFlowMover_BeltSizingFactor_optional&
        SimFlowMover_BeltSizingFactor ();

        void
        SimFlowMover_BeltSizingFactor (const SimFlowMover_BeltSizingFactor_type& x);

        void
        SimFlowMover_BeltSizingFactor (const SimFlowMover_BeltSizingFactor_optional& x);

        // SimFlowMover_BeltFractionalTorqueTransition
        //
        typedef ::xml_schema::double_ SimFlowMover_BeltFractionalTorqueTransition_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_BeltFractionalTorqueTransition_type > SimFlowMover_BeltFractionalTorqueTransition_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_BeltFractionalTorqueTransition_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_BeltFractionalTorqueTransition_traits;

        const SimFlowMover_BeltFractionalTorqueTransition_optional&
        SimFlowMover_BeltFractionalTorqueTransition () const;

        SimFlowMover_BeltFractionalTorqueTransition_optional&
        SimFlowMover_BeltFractionalTorqueTransition ();

        void
        SimFlowMover_BeltFractionalTorqueTransition (const SimFlowMover_BeltFractionalTorqueTransition_type& x);

        void
        SimFlowMover_BeltFractionalTorqueTransition (const SimFlowMover_BeltFractionalTorqueTransition_optional& x);

        // SimFlowMover_MotorMaxSpeed
        //
        typedef ::xml_schema::double_ SimFlowMover_MotorMaxSpeed_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MotorMaxSpeed_type > SimFlowMover_MotorMaxSpeed_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MotorMaxSpeed_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MotorMaxSpeed_traits;

        const SimFlowMover_MotorMaxSpeed_optional&
        SimFlowMover_MotorMaxSpeed () const;

        SimFlowMover_MotorMaxSpeed_optional&
        SimFlowMover_MotorMaxSpeed ();

        void
        SimFlowMover_MotorMaxSpeed (const SimFlowMover_MotorMaxSpeed_type& x);

        void
        SimFlowMover_MotorMaxSpeed (const SimFlowMover_MotorMaxSpeed_optional& x);

        // SimFlowMover_MaxMotorOutputPower
        //
        typedef ::xml_schema::double_ SimFlowMover_MaxMotorOutputPower_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MaxMotorOutputPower_type > SimFlowMover_MaxMotorOutputPower_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MaxMotorOutputPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MaxMotorOutputPower_traits;

        const SimFlowMover_MaxMotorOutputPower_optional&
        SimFlowMover_MaxMotorOutputPower () const;

        SimFlowMover_MaxMotorOutputPower_optional&
        SimFlowMover_MaxMotorOutputPower ();

        void
        SimFlowMover_MaxMotorOutputPower (const SimFlowMover_MaxMotorOutputPower_type& x);

        void
        SimFlowMover_MaxMotorOutputPower (const SimFlowMover_MaxMotorOutputPower_optional& x);

        // SimFlowMover_MotorSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowMover_MotorSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MotorSizingFactor_type > SimFlowMover_MotorSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MotorSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MotorSizingFactor_traits;

        const SimFlowMover_MotorSizingFactor_optional&
        SimFlowMover_MotorSizingFactor () const;

        SimFlowMover_MotorSizingFactor_optional&
        SimFlowMover_MotorSizingFactor ();

        void
        SimFlowMover_MotorSizingFactor (const SimFlowMover_MotorSizingFactor_type& x);

        void
        SimFlowMover_MotorSizingFactor (const SimFlowMover_MotorSizingFactor_optional& x);

        // SimFlowMover_VFDEfficiencyType
        //
        typedef ::xml_schema::string SimFlowMover_VFDEfficiencyType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_VFDEfficiencyType_type > SimFlowMover_VFDEfficiencyType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_VFDEfficiencyType_type, char > SimFlowMover_VFDEfficiencyType_traits;

        const SimFlowMover_VFDEfficiencyType_optional&
        SimFlowMover_VFDEfficiencyType () const;

        SimFlowMover_VFDEfficiencyType_optional&
        SimFlowMover_VFDEfficiencyType ();

        void
        SimFlowMover_VFDEfficiencyType (const SimFlowMover_VFDEfficiencyType_type& x);

        void
        SimFlowMover_VFDEfficiencyType (const SimFlowMover_VFDEfficiencyType_optional& x);

        void
        SimFlowMover_VFDEfficiencyType (::std::auto_ptr< SimFlowMover_VFDEfficiencyType_type > p);

        // SimFlowMover_MaxVFDOutputPower
        //
        typedef ::xml_schema::double_ SimFlowMover_MaxVFDOutputPower_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MaxVFDOutputPower_type > SimFlowMover_MaxVFDOutputPower_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MaxVFDOutputPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_MaxVFDOutputPower_traits;

        const SimFlowMover_MaxVFDOutputPower_optional&
        SimFlowMover_MaxVFDOutputPower () const;

        SimFlowMover_MaxVFDOutputPower_optional&
        SimFlowMover_MaxVFDOutputPower ();

        void
        SimFlowMover_MaxVFDOutputPower (const SimFlowMover_MaxVFDOutputPower_type& x);

        void
        SimFlowMover_MaxVFDOutputPower (const SimFlowMover_MaxVFDOutputPower_optional& x);

        // SimFlowMover_VFDSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowMover_VFDSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_VFDSizingFactor_type > SimFlowMover_VFDSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_VFDSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowMover_VFDSizingFactor_traits;

        const SimFlowMover_VFDSizingFactor_optional&
        SimFlowMover_VFDSizingFactor () const;

        SimFlowMover_VFDSizingFactor_optional&
        SimFlowMover_VFDSizingFactor ();

        void
        SimFlowMover_VFDSizingFactor (const SimFlowMover_VFDSizingFactor_type& x);

        void
        SimFlowMover_VFDSizingFactor (const SimFlowMover_VFDSizingFactor_optional& x);

        // SimFlowMover_FanPressureRiseCurveName
        //
        typedef ::xml_schema::idref SimFlowMover_FanPressureRiseCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_FanPressureRiseCurveName_type > SimFlowMover_FanPressureRiseCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_FanPressureRiseCurveName_type, char > SimFlowMover_FanPressureRiseCurveName_traits;

        const SimFlowMover_FanPressureRiseCurveName_optional&
        SimFlowMover_FanPressureRiseCurveName () const;

        SimFlowMover_FanPressureRiseCurveName_optional&
        SimFlowMover_FanPressureRiseCurveName ();

        void
        SimFlowMover_FanPressureRiseCurveName (const SimFlowMover_FanPressureRiseCurveName_type& x);

        void
        SimFlowMover_FanPressureRiseCurveName (const SimFlowMover_FanPressureRiseCurveName_optional& x);

        void
        SimFlowMover_FanPressureRiseCurveName (::std::auto_ptr< SimFlowMover_FanPressureRiseCurveName_type > p);

        // SimFlowMover_DuctStaticPressureResetCurveName
        //
        typedef ::xml_schema::idref SimFlowMover_DuctStaticPressureResetCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_DuctStaticPressureResetCurveName_type > SimFlowMover_DuctStaticPressureResetCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_DuctStaticPressureResetCurveName_type, char > SimFlowMover_DuctStaticPressureResetCurveName_traits;

        const SimFlowMover_DuctStaticPressureResetCurveName_optional&
        SimFlowMover_DuctStaticPressureResetCurveName () const;

        SimFlowMover_DuctStaticPressureResetCurveName_optional&
        SimFlowMover_DuctStaticPressureResetCurveName ();

        void
        SimFlowMover_DuctStaticPressureResetCurveName (const SimFlowMover_DuctStaticPressureResetCurveName_type& x);

        void
        SimFlowMover_DuctStaticPressureResetCurveName (const SimFlowMover_DuctStaticPressureResetCurveName_optional& x);

        void
        SimFlowMover_DuctStaticPressureResetCurveName (::std::auto_ptr< SimFlowMover_DuctStaticPressureResetCurveName_type > p);

        // SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion
        //
        typedef ::xml_schema::idref SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type > SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type, char > SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_traits;

        const SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional&
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion () const;

        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional&
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion ();

        void
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type& x);

        void
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional& x);

        void
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion (::std::auto_ptr< SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type > p);

        // SimFlowMover_NormFanStaticEffCurveName_StallRegion
        //
        typedef ::xml_schema::idref SimFlowMover_NormFanStaticEffCurveName_StallRegion_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_NormFanStaticEffCurveName_StallRegion_type > SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_NormFanStaticEffCurveName_StallRegion_type, char > SimFlowMover_NormFanStaticEffCurveName_StallRegion_traits;

        const SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional&
        SimFlowMover_NormFanStaticEffCurveName_StallRegion () const;

        SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional&
        SimFlowMover_NormFanStaticEffCurveName_StallRegion ();

        void
        SimFlowMover_NormFanStaticEffCurveName_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_StallRegion_type& x);

        void
        SimFlowMover_NormFanStaticEffCurveName_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional& x);

        void
        SimFlowMover_NormFanStaticEffCurveName_StallRegion (::std::auto_ptr< SimFlowMover_NormFanStaticEffCurveName_StallRegion_type > p);

        // SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion
        //
        typedef ::xml_schema::idref SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type > SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type, char > SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_traits;

        const SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional&
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion () const;

        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional&
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion ();

        void
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type& x);

        void
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional& x);

        void
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion (::std::auto_ptr< SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type > p);

        // SimFlowMover_NormDimlessAirflowCurveName_StallRegion
        //
        typedef ::xml_schema::idref SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type > SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type, char > SimFlowMover_NormDimlessAirflowCurveName_StallRegion_traits;

        const SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional&
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion () const;

        SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional&
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion ();

        void
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type& x);

        void
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional& x);

        void
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion (::std::auto_ptr< SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type > p);

        // SimFlowMover_MaxBeltEfficiencyCurveName
        //
        typedef ::xml_schema::idref SimFlowMover_MaxBeltEfficiencyCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MaxBeltEfficiencyCurveName_type > SimFlowMover_MaxBeltEfficiencyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MaxBeltEfficiencyCurveName_type, char > SimFlowMover_MaxBeltEfficiencyCurveName_traits;

        const SimFlowMover_MaxBeltEfficiencyCurveName_optional&
        SimFlowMover_MaxBeltEfficiencyCurveName () const;

        SimFlowMover_MaxBeltEfficiencyCurveName_optional&
        SimFlowMover_MaxBeltEfficiencyCurveName ();

        void
        SimFlowMover_MaxBeltEfficiencyCurveName (const SimFlowMover_MaxBeltEfficiencyCurveName_type& x);

        void
        SimFlowMover_MaxBeltEfficiencyCurveName (const SimFlowMover_MaxBeltEfficiencyCurveName_optional& x);

        void
        SimFlowMover_MaxBeltEfficiencyCurveName (::std::auto_ptr< SimFlowMover_MaxBeltEfficiencyCurveName_type > p);

        // SimFlowMover_NormBeltEffCurveNameRegion_1_3
        //
        typedef ::xml_schema::idrefs SimFlowMover_NormBeltEffCurveNameRegion_1_3_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_NormBeltEffCurveNameRegion_1_3_type > SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_NormBeltEffCurveNameRegion_1_3_type, char > SimFlowMover_NormBeltEffCurveNameRegion_1_3_traits;

        const SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional&
        SimFlowMover_NormBeltEffCurveNameRegion_1_3 () const;

        SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional&
        SimFlowMover_NormBeltEffCurveNameRegion_1_3 ();

        void
        SimFlowMover_NormBeltEffCurveNameRegion_1_3 (const SimFlowMover_NormBeltEffCurveNameRegion_1_3_type& x);

        void
        SimFlowMover_NormBeltEffCurveNameRegion_1_3 (const SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional& x);

        void
        SimFlowMover_NormBeltEffCurveNameRegion_1_3 (::std::auto_ptr< SimFlowMover_NormBeltEffCurveNameRegion_1_3_type > p);

        // SimFlowMover_MaxMotorEfficiencyCurveName
        //
        typedef ::xml_schema::idref SimFlowMover_MaxMotorEfficiencyCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_MaxMotorEfficiencyCurveName_type > SimFlowMover_MaxMotorEfficiencyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_MaxMotorEfficiencyCurveName_type, char > SimFlowMover_MaxMotorEfficiencyCurveName_traits;

        const SimFlowMover_MaxMotorEfficiencyCurveName_optional&
        SimFlowMover_MaxMotorEfficiencyCurveName () const;

        SimFlowMover_MaxMotorEfficiencyCurveName_optional&
        SimFlowMover_MaxMotorEfficiencyCurveName ();

        void
        SimFlowMover_MaxMotorEfficiencyCurveName (const SimFlowMover_MaxMotorEfficiencyCurveName_type& x);

        void
        SimFlowMover_MaxMotorEfficiencyCurveName (const SimFlowMover_MaxMotorEfficiencyCurveName_optional& x);

        void
        SimFlowMover_MaxMotorEfficiencyCurveName (::std::auto_ptr< SimFlowMover_MaxMotorEfficiencyCurveName_type > p);

        // SimFlowMover_NormMotorEfficiencyCurveName
        //
        typedef ::xml_schema::idref SimFlowMover_NormMotorEfficiencyCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_NormMotorEfficiencyCurveName_type > SimFlowMover_NormMotorEfficiencyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_NormMotorEfficiencyCurveName_type, char > SimFlowMover_NormMotorEfficiencyCurveName_traits;

        const SimFlowMover_NormMotorEfficiencyCurveName_optional&
        SimFlowMover_NormMotorEfficiencyCurveName () const;

        SimFlowMover_NormMotorEfficiencyCurveName_optional&
        SimFlowMover_NormMotorEfficiencyCurveName ();

        void
        SimFlowMover_NormMotorEfficiencyCurveName (const SimFlowMover_NormMotorEfficiencyCurveName_type& x);

        void
        SimFlowMover_NormMotorEfficiencyCurveName (const SimFlowMover_NormMotorEfficiencyCurveName_optional& x);

        void
        SimFlowMover_NormMotorEfficiencyCurveName (::std::auto_ptr< SimFlowMover_NormMotorEfficiencyCurveName_type > p);

        // SimFlowMover_VFDEfficiencyCurveName
        //
        typedef ::xml_schema::idref SimFlowMover_VFDEfficiencyCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowMover_VFDEfficiencyCurveName_type > SimFlowMover_VFDEfficiencyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowMover_VFDEfficiencyCurveName_type, char > SimFlowMover_VFDEfficiencyCurveName_traits;

        const SimFlowMover_VFDEfficiencyCurveName_optional&
        SimFlowMover_VFDEfficiencyCurveName () const;

        SimFlowMover_VFDEfficiencyCurveName_optional&
        SimFlowMover_VFDEfficiencyCurveName ();

        void
        SimFlowMover_VFDEfficiencyCurveName (const SimFlowMover_VFDEfficiencyCurveName_type& x);

        void
        SimFlowMover_VFDEfficiencyCurveName (const SimFlowMover_VFDEfficiencyCurveName_optional& x);

        void
        SimFlowMover_VFDEfficiencyCurveName (::std::auto_ptr< SimFlowMover_VFDEfficiencyCurveName_type > p);

        // Constructors.
        //
        SimFlowMover_SupplyFan_ComponentModel ();

        SimFlowMover_SupplyFan_ComponentModel (const RefId_type&);

        SimFlowMover_SupplyFan_ComponentModel (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        SimFlowMover_SupplyFan_ComponentModel (const SimFlowMover_SupplyFan_ComponentModel& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        virtual SimFlowMover_SupplyFan_ComponentModel*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowMover_SupplyFan_ComponentModel&
        operator= (const SimFlowMover_SupplyFan_ComponentModel& x);

        virtual 
        ~SimFlowMover_SupplyFan_ComponentModel ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowMover_MinFlowRate_optional SimFlowMover_MinFlowRate_;
        SimFlowMover_FanSizingFactor_optional SimFlowMover_FanSizingFactor_;
        SimFlowMover_FanWheelDiameter_optional SimFlowMover_FanWheelDiameter_;
        SimFlowMover_FanOutletArea_optional SimFlowMover_FanOutletArea_;
        SimFlowMover_MaxFanStaticEfficiency_optional SimFlowMover_MaxFanStaticEfficiency_;
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_;
        SimFlowMover_MaxDimlessFanAirflow_optional SimFlowMover_MaxDimlessFanAirflow_;
        SimFlowMover_MotorFanPulleyRatio_optional SimFlowMover_MotorFanPulleyRatio_;
        SimFlowMover_BeltMaxTorque_optional SimFlowMover_BeltMaxTorque_;
        SimFlowMover_BeltSizingFactor_optional SimFlowMover_BeltSizingFactor_;
        SimFlowMover_BeltFractionalTorqueTransition_optional SimFlowMover_BeltFractionalTorqueTransition_;
        SimFlowMover_MotorMaxSpeed_optional SimFlowMover_MotorMaxSpeed_;
        SimFlowMover_MaxMotorOutputPower_optional SimFlowMover_MaxMotorOutputPower_;
        SimFlowMover_MotorSizingFactor_optional SimFlowMover_MotorSizingFactor_;
        SimFlowMover_VFDEfficiencyType_optional SimFlowMover_VFDEfficiencyType_;
        SimFlowMover_MaxVFDOutputPower_optional SimFlowMover_MaxVFDOutputPower_;
        SimFlowMover_VFDSizingFactor_optional SimFlowMover_VFDSizingFactor_;
        SimFlowMover_FanPressureRiseCurveName_optional SimFlowMover_FanPressureRiseCurveName_;
        SimFlowMover_DuctStaticPressureResetCurveName_optional SimFlowMover_DuctStaticPressureResetCurveName_;
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_;
        SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional SimFlowMover_NormFanStaticEffCurveName_StallRegion_;
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_;
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional SimFlowMover_NormDimlessAirflowCurveName_StallRegion_;
        SimFlowMover_MaxBeltEfficiencyCurveName_optional SimFlowMover_MaxBeltEfficiencyCurveName_;
        SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional SimFlowMover_NormBeltEffCurveNameRegion_1_3_;
        SimFlowMover_MaxMotorEfficiencyCurveName_optional SimFlowMover_MaxMotorEfficiencyCurveName_;
        SimFlowMover_NormMotorEfficiencyCurveName_optional SimFlowMover_NormMotorEfficiencyCurveName_;
        SimFlowMover_VFDEfficiencyCurveName_optional SimFlowMover_VFDEfficiencyCurveName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_MOVER_SUPPLY_FAN_COMPONENT_MODEL_HXX
