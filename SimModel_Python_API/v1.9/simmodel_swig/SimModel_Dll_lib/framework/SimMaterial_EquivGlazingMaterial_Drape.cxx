// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_EquivGlazingMaterial_Drape.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Drape
      // 

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence () const
      {
        return this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence ()
      {
        return this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence (const SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_type& x)
      {
        this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence (const SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_optional& x)
      {
        this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans (const SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans (const SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans (const SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans (const SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect (const SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect (const SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect (const SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect (const SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_BeamVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamVisibleTrans () const
      {
        return this->SimMaterial_DrapeBeam_BeamVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_BeamVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamVisibleTrans ()
      {
        return this->SimMaterial_DrapeBeam_BeamVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamVisibleTrans (const SimMaterial_DrapeBeam_BeamVisibleTrans_type& x)
      {
        this->SimMaterial_DrapeBeam_BeamVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_BeamVisibleTrans (const SimMaterial_DrapeBeam_BeamVisibleTrans_optional& x)
      {
        this->SimMaterial_DrapeBeam_BeamVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleTrans () const
      {
        return this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleTrans ()
      {
        return this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleTrans (const SimMaterial_DrapeBeam_DiffuseVisibleTrans_type& x)
      {
        this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleTrans (const SimMaterial_DrapeBeam_DiffuseVisibleTrans_optional& x)
      {
        this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleReflect () const
      {
        return this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleReflect ()
      {
        return this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleReflect (const SimMaterial_DrapeBeam_DiffuseVisibleReflect_type& x)
      {
        this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeBeam_DiffuseVisibleReflect (const SimMaterial_DrapeBeam_DiffuseVisibleReflect_optional& x)
      {
        this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeMaterialInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeMaterialInfraredTrans () const
      {
        return this->SimMaterial_DrapeMaterialInfraredTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_DrapeMaterialInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeMaterialInfraredTrans ()
      {
        return this->SimMaterial_DrapeMaterialInfraredTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeMaterialInfraredTrans (const SimMaterial_DrapeMaterialInfraredTrans_type& x)
      {
        this->SimMaterial_DrapeMaterialInfraredTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_DrapeMaterialInfraredTrans (const SimMaterial_DrapeMaterialInfraredTrans_optional& x)
      {
        this->SimMaterial_DrapeMaterialInfraredTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeMaterialInfraredEmissivity () const
      {
        return this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeMaterialInfraredEmissivity ()
      {
        return this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeMaterialInfraredEmissivity (const SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_type& x)
      {
        this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_FrontSideDrapeMaterialInfraredEmissivity (const SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_optional& x)
      {
        this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_BackSideDrapeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeMaterialInfraredEmissivity () const
      {
        return this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_BackSideDrapeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeMaterialInfraredEmissivity ()
      {
        return this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeMaterialInfraredEmissivity (const SimMaterial_BackSideDrapeMaterialInfraredEmissivity_type& x)
      {
        this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_BackSideDrapeMaterialInfraredEmissivity (const SimMaterial_BackSideDrapeMaterialInfraredEmissivity_optional& x)
      {
        this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_WidthofPleatedFabric_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_WidthofPleatedFabric () const
      {
        return this->SimMaterial_WidthofPleatedFabric_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_WidthofPleatedFabric_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_WidthofPleatedFabric ()
      {
        return this->SimMaterial_WidthofPleatedFabric_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_WidthofPleatedFabric (const SimMaterial_WidthofPleatedFabric_type& x)
      {
        this->SimMaterial_WidthofPleatedFabric_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_WidthofPleatedFabric (const SimMaterial_WidthofPleatedFabric_optional& x)
      {
        this->SimMaterial_WidthofPleatedFabric_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_LengthofPleatedFabric_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_LengthofPleatedFabric () const
      {
        return this->SimMaterial_LengthofPleatedFabric_;
      }

      SimMaterial_EquivGlazingMaterial_Drape::SimMaterial_LengthofPleatedFabric_optional& SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_LengthofPleatedFabric ()
      {
        return this->SimMaterial_LengthofPleatedFabric_;
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_LengthofPleatedFabric (const SimMaterial_LengthofPleatedFabric_type& x)
      {
        this->SimMaterial_LengthofPleatedFabric_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_LengthofPleatedFabric (const SimMaterial_LengthofPleatedFabric_optional& x)
      {
        this->SimMaterial_LengthofPleatedFabric_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Drape
      //

      SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_EquivGlazingMaterial_Drape ()
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (),
        SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_ (this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_DrapeBeam_BeamVisibleTrans_ (this),
        SimMaterial_DrapeBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_DrapeBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_DrapeMaterialInfraredTrans_ (this),
        SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_ (this),
        SimMaterial_BackSideDrapeMaterialInfraredEmissivity_ (this),
        SimMaterial_WidthofPleatedFabric_ (this),
        SimMaterial_LengthofPleatedFabric_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_EquivGlazingMaterial_Drape (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (RefId),
        SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_ (this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_DrapeBeam_BeamVisibleTrans_ (this),
        SimMaterial_DrapeBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_DrapeBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_DrapeMaterialInfraredTrans_ (this),
        SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_ (this),
        SimMaterial_BackSideDrapeMaterialInfraredEmissivity_ (this),
        SimMaterial_WidthofPleatedFabric_ (this),
        SimMaterial_LengthofPleatedFabric_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_EquivGlazingMaterial_Drape (const SimMaterial_EquivGlazingMaterial_Drape& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (x, f, c),
        SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_ (x.SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_, f, this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_ (x.SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_ (x.SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_ (x.SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_ (x.SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_DrapeBeam_BeamVisibleTrans_ (x.SimMaterial_DrapeBeam_BeamVisibleTrans_, f, this),
        SimMaterial_DrapeBeam_DiffuseVisibleTrans_ (x.SimMaterial_DrapeBeam_DiffuseVisibleTrans_, f, this),
        SimMaterial_DrapeBeam_DiffuseVisibleReflect_ (x.SimMaterial_DrapeBeam_DiffuseVisibleReflect_, f, this),
        SimMaterial_DrapeMaterialInfraredTrans_ (x.SimMaterial_DrapeMaterialInfraredTrans_, f, this),
        SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_ (x.SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_, f, this),
        SimMaterial_BackSideDrapeMaterialInfraredEmissivity_ (x.SimMaterial_BackSideDrapeMaterialInfraredEmissivity_, f, this),
        SimMaterial_WidthofPleatedFabric_ (x.SimMaterial_WidthofPleatedFabric_, f, this),
        SimMaterial_LengthofPleatedFabric_ (x.SimMaterial_LengthofPleatedFabric_, f, this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Drape::
      SimMaterial_EquivGlazingMaterial_Drape (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_ (this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_DrapeBeam_BeamVisibleTrans_ (this),
        SimMaterial_DrapeBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_DrapeBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_DrapeMaterialInfraredTrans_ (this),
        SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_ (this),
        SimMaterial_BackSideDrapeMaterialInfraredEmissivity_ (this),
        SimMaterial_WidthofPleatedFabric_ (this),
        SimMaterial_LengthofPleatedFabric_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_EquivGlazingMaterial_Drape::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence
          //
          if (n.name () == "SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_)
            {
              this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_.set (SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_.set (SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_.set (SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_.set (SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_.set (SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_DrapeBeam_BeamVisibleTrans
          //
          if (n.name () == "SimMaterial_DrapeBeam_BeamVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_DrapeBeam_BeamVisibleTrans_)
            {
              this->SimMaterial_DrapeBeam_BeamVisibleTrans_.set (SimMaterial_DrapeBeam_BeamVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_DrapeBeam_DiffuseVisibleTrans
          //
          if (n.name () == "SimMaterial_DrapeBeam_DiffuseVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_)
            {
              this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_.set (SimMaterial_DrapeBeam_DiffuseVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_DrapeBeam_DiffuseVisibleReflect
          //
          if (n.name () == "SimMaterial_DrapeBeam_DiffuseVisibleReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_)
            {
              this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_.set (SimMaterial_DrapeBeam_DiffuseVisibleReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_DrapeMaterialInfraredTrans
          //
          if (n.name () == "SimMaterial_DrapeMaterialInfraredTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_DrapeMaterialInfraredTrans_)
            {
              this->SimMaterial_DrapeMaterialInfraredTrans_.set (SimMaterial_DrapeMaterialInfraredTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideDrapeMaterialInfraredEmissivity
          //
          if (n.name () == "SimMaterial_FrontSideDrapeMaterialInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_)
            {
              this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_.set (SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideDrapeMaterialInfraredEmissivity
          //
          if (n.name () == "SimMaterial_BackSideDrapeMaterialInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_)
            {
              this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_.set (SimMaterial_BackSideDrapeMaterialInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_WidthofPleatedFabric
          //
          if (n.name () == "SimMaterial_WidthofPleatedFabric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_WidthofPleatedFabric_)
            {
              this->SimMaterial_WidthofPleatedFabric_.set (SimMaterial_WidthofPleatedFabric_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_LengthofPleatedFabric
          //
          if (n.name () == "SimMaterial_LengthofPleatedFabric" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_LengthofPleatedFabric_)
            {
              this->SimMaterial_LengthofPleatedFabric_.set (SimMaterial_LengthofPleatedFabric_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_EquivGlazingMaterial_Drape* SimMaterial_EquivGlazingMaterial_Drape::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_EquivGlazingMaterial_Drape (*this, f, c);
      }

      SimMaterial_EquivGlazingMaterial_Drape& SimMaterial_EquivGlazingMaterial_Drape::
      operator= (const SimMaterial_EquivGlazingMaterial_Drape& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial& > (*this) = x;
          this->SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_ = x.SimMaterial_DrapeBeam_BeamSolarTransatNormalIncidence_;
          this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_ = x.SimMaterial_FrontSideDrapeBeam_DiffuseSolarTrans_;
          this->SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_ = x.SimMaterial_BackSideDrapeBeam_DiffuseSolarTrans_;
          this->SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_ = x.SimMaterial_FrontSideDrapeBeam_DiffuseSolarReflect_;
          this->SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_ = x.SimMaterial_BackSideDrapeBeam_DiffuseSolarReflect_;
          this->SimMaterial_DrapeBeam_BeamVisibleTrans_ = x.SimMaterial_DrapeBeam_BeamVisibleTrans_;
          this->SimMaterial_DrapeBeam_DiffuseVisibleTrans_ = x.SimMaterial_DrapeBeam_DiffuseVisibleTrans_;
          this->SimMaterial_DrapeBeam_DiffuseVisibleReflect_ = x.SimMaterial_DrapeBeam_DiffuseVisibleReflect_;
          this->SimMaterial_DrapeMaterialInfraredTrans_ = x.SimMaterial_DrapeMaterialInfraredTrans_;
          this->SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_ = x.SimMaterial_FrontSideDrapeMaterialInfraredEmissivity_;
          this->SimMaterial_BackSideDrapeMaterialInfraredEmissivity_ = x.SimMaterial_BackSideDrapeMaterialInfraredEmissivity_;
          this->SimMaterial_WidthofPleatedFabric_ = x.SimMaterial_WidthofPleatedFabric_;
          this->SimMaterial_LengthofPleatedFabric_ = x.SimMaterial_LengthofPleatedFabric_;
        }

        return *this;
      }

      SimMaterial_EquivGlazingMaterial_Drape::
      ~SimMaterial_EquivGlazingMaterial_Drape ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

