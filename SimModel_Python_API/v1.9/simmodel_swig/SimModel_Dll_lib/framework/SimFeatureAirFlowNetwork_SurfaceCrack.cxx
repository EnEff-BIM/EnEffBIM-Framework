// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFeatureAirFlowNetwork_SurfaceCrack.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      // SimFeatureAirFlowNetwork_SurfaceCrack
      // 

      const SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_Name_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_Name () const
      {
        return this->SimFeatureAirFlowNetwk_Name_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_Name_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_Name ()
      {
        return this->SimFeatureAirFlowNetwk_Name_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_Name (const SimFeatureAirFlowNetwk_Name_type& x)
      {
        this->SimFeatureAirFlowNetwk_Name_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_Name (const SimFeatureAirFlowNetwk_Name_optional& x)
      {
        this->SimFeatureAirFlowNetwk_Name_ = x;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_Name (::std::auto_ptr< SimFeatureAirFlowNetwk_Name_type > x)
      {
        this->SimFeatureAirFlowNetwk_Name_.set (x);
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond () const
      {
        return this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond ()
      {
        return this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (const SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_type& x)
      {
        this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond (const SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_optional& x)
      {
        this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_ = x;
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_AirMassFlowExp_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowExp () const
      {
        return this->SimFeatureAirFlowNetwk_AirMassFlowExp_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_AirMassFlowExp_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowExp ()
      {
        return this->SimFeatureAirFlowNetwk_AirMassFlowExp_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowExp (const SimFeatureAirFlowNetwk_AirMassFlowExp_type& x)
      {
        this->SimFeatureAirFlowNetwk_AirMassFlowExp_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_AirMassFlowExp (const SimFeatureAirFlowNetwk_AirMassFlowExp_optional& x)
      {
        this->SimFeatureAirFlowNetwk_AirMassFlowExp_ = x;
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_RefCrackCond_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_RefCrackCond () const
      {
        return this->SimFeatureAirFlowNetwk_RefCrackCond_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::SimFeatureAirFlowNetwk_RefCrackCond_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_RefCrackCond ()
      {
        return this->SimFeatureAirFlowNetwk_RefCrackCond_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_RefCrackCond (const SimFeatureAirFlowNetwk_RefCrackCond_type& x)
      {
        this->SimFeatureAirFlowNetwk_RefCrackCond_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_RefCrackCond (const SimFeatureAirFlowNetwk_RefCrackCond_optional& x)
      {
        this->SimFeatureAirFlowNetwk_RefCrackCond_ = x;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwk_RefCrackCond (::std::auto_ptr< SimFeatureAirFlowNetwk_RefCrackCond_type > x)
      {
        this->SimFeatureAirFlowNetwk_RefCrackCond_.set (x);
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_Name_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_Name () const
      {
        return this->Airflow_MZone_RefCrackCond_Name_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_Name_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_Name ()
      {
        return this->Airflow_MZone_RefCrackCond_Name_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_Name (const Airflow_MZone_RefCrackCond_Name_type& x)
      {
        this->Airflow_MZone_RefCrackCond_Name_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_Name (const Airflow_MZone_RefCrackCond_Name_optional& x)
      {
        this->Airflow_MZone_RefCrackCond_Name_ = x;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_Name (::std::auto_ptr< Airflow_MZone_RefCrackCond_Name_type > x)
      {
        this->Airflow_MZone_RefCrackCond_Name_.set (x);
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_RefTemp_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefTemp () const
      {
        return this->Airflow_MZone_RefCrackCond_RefTemp_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_RefTemp_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefTemp ()
      {
        return this->Airflow_MZone_RefCrackCond_RefTemp_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefTemp (const Airflow_MZone_RefCrackCond_RefTemp_type& x)
      {
        this->Airflow_MZone_RefCrackCond_RefTemp_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefTemp (const Airflow_MZone_RefCrackCond_RefTemp_optional& x)
      {
        this->Airflow_MZone_RefCrackCond_RefTemp_ = x;
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_RefBarometricPressure_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefBarometricPressure () const
      {
        return this->Airflow_MZone_RefCrackCond_RefBarometricPressure_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_RefBarometricPressure_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefBarometricPressure ()
      {
        return this->Airflow_MZone_RefCrackCond_RefBarometricPressure_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefBarometricPressure (const Airflow_MZone_RefCrackCond_RefBarometricPressure_type& x)
      {
        this->Airflow_MZone_RefCrackCond_RefBarometricPressure_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefBarometricPressure (const Airflow_MZone_RefCrackCond_RefBarometricPressure_optional& x)
      {
        this->Airflow_MZone_RefCrackCond_RefBarometricPressure_ = x;
      }

      const SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_RefHumidRatio_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefHumidRatio () const
      {
        return this->Airflow_MZone_RefCrackCond_RefHumidRatio_;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::Airflow_MZone_RefCrackCond_RefHumidRatio_optional& SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefHumidRatio ()
      {
        return this->Airflow_MZone_RefCrackCond_RefHumidRatio_;
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefHumidRatio (const Airflow_MZone_RefCrackCond_RefHumidRatio_type& x)
      {
        this->Airflow_MZone_RefCrackCond_RefHumidRatio_.set (x);
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      Airflow_MZone_RefCrackCond_RefHumidRatio (const Airflow_MZone_RefCrackCond_RefHumidRatio_optional& x)
      {
        this->Airflow_MZone_RefCrackCond_RefHumidRatio_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      // SimFeatureAirFlowNetwork_SurfaceCrack
      //

      SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwork_SurfaceCrack ()
      : ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwork (),
        SimFeatureAirFlowNetwk_Name_ (this),
        SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_ (this),
        SimFeatureAirFlowNetwk_AirMassFlowExp_ (this),
        SimFeatureAirFlowNetwk_RefCrackCond_ (this),
        Airflow_MZone_RefCrackCond_Name_ (this),
        Airflow_MZone_RefCrackCond_RefTemp_ (this),
        Airflow_MZone_RefCrackCond_RefBarometricPressure_ (this),
        Airflow_MZone_RefCrackCond_RefHumidRatio_ (this)
      {
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwork_SurfaceCrack (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwork (RefId),
        SimFeatureAirFlowNetwk_Name_ (this),
        SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_ (this),
        SimFeatureAirFlowNetwk_AirMassFlowExp_ (this),
        SimFeatureAirFlowNetwk_RefCrackCond_ (this),
        Airflow_MZone_RefCrackCond_Name_ (this),
        Airflow_MZone_RefCrackCond_RefTemp_ (this),
        Airflow_MZone_RefCrackCond_RefBarometricPressure_ (this),
        Airflow_MZone_RefCrackCond_RefHumidRatio_ (this)
      {
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwork_SurfaceCrack (const SimFeatureAirFlowNetwork_SurfaceCrack& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwork (x, f, c),
        SimFeatureAirFlowNetwk_Name_ (x.SimFeatureAirFlowNetwk_Name_, f, this),
        SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_ (x.SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_, f, this),
        SimFeatureAirFlowNetwk_AirMassFlowExp_ (x.SimFeatureAirFlowNetwk_AirMassFlowExp_, f, this),
        SimFeatureAirFlowNetwk_RefCrackCond_ (x.SimFeatureAirFlowNetwk_RefCrackCond_, f, this),
        Airflow_MZone_RefCrackCond_Name_ (x.Airflow_MZone_RefCrackCond_Name_, f, this),
        Airflow_MZone_RefCrackCond_RefTemp_ (x.Airflow_MZone_RefCrackCond_RefTemp_, f, this),
        Airflow_MZone_RefCrackCond_RefBarometricPressure_ (x.Airflow_MZone_RefCrackCond_RefBarometricPressure_, f, this),
        Airflow_MZone_RefCrackCond_RefHumidRatio_ (x.Airflow_MZone_RefCrackCond_RefHumidRatio_, f, this)
      {
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::
      SimFeatureAirFlowNetwork_SurfaceCrack (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwork (e, f | ::xml_schema::flags::base, c),
        SimFeatureAirFlowNetwk_Name_ (this),
        SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_ (this),
        SimFeatureAirFlowNetwk_AirMassFlowExp_ (this),
        SimFeatureAirFlowNetwk_RefCrackCond_ (this),
        Airflow_MZone_RefCrackCond_Name_ (this),
        Airflow_MZone_RefCrackCond_RefTemp_ (this),
        Airflow_MZone_RefCrackCond_RefBarometricPressure_ (this),
        Airflow_MZone_RefCrackCond_RefHumidRatio_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFeatureAirFlowNetwork_SurfaceCrack::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwork::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFeatureAirFlowNetwk_Name
          //
          if (n.name () == "SimFeatureAirFlowNetwk_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwk_Name_type > r (
              SimFeatureAirFlowNetwk_Name_traits::create (i, f, this));

            if (!this->SimFeatureAirFlowNetwk_Name_)
            {
              this->SimFeatureAirFlowNetwk_Name_.set (r);
              continue;
            }
          }

          // SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond
          //
          if (n.name () == "SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_)
            {
              this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_.set (SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFeatureAirFlowNetwk_AirMassFlowExp
          //
          if (n.name () == "SimFeatureAirFlowNetwk_AirMassFlowExp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->SimFeatureAirFlowNetwk_AirMassFlowExp_)
            {
              this->SimFeatureAirFlowNetwk_AirMassFlowExp_.set (SimFeatureAirFlowNetwk_AirMassFlowExp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFeatureAirFlowNetwk_RefCrackCond
          //
          if (n.name () == "SimFeatureAirFlowNetwk_RefCrackCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimFeatureAirFlowNetwk_RefCrackCond_type > r (
              SimFeatureAirFlowNetwk_RefCrackCond_traits::create (i, f, this));

            if (!this->SimFeatureAirFlowNetwk_RefCrackCond_)
            {
              this->SimFeatureAirFlowNetwk_RefCrackCond_.set (r);
              continue;
            }
          }

          // Airflow_MZone_RefCrackCond_Name
          //
          if (n.name () == "Airflow_MZone_RefCrackCond_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< Airflow_MZone_RefCrackCond_Name_type > r (
              Airflow_MZone_RefCrackCond_Name_traits::create (i, f, this));

            if (!this->Airflow_MZone_RefCrackCond_Name_)
            {
              this->Airflow_MZone_RefCrackCond_Name_.set (r);
              continue;
            }
          }

          // Airflow_MZone_RefCrackCond_RefTemp
          //
          if (n.name () == "Airflow_MZone_RefCrackCond_RefTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->Airflow_MZone_RefCrackCond_RefTemp_)
            {
              this->Airflow_MZone_RefCrackCond_RefTemp_.set (Airflow_MZone_RefCrackCond_RefTemp_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_RefCrackCond_RefBarometricPressure
          //
          if (n.name () == "Airflow_MZone_RefCrackCond_RefBarometricPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->Airflow_MZone_RefCrackCond_RefBarometricPressure_)
            {
              this->Airflow_MZone_RefCrackCond_RefBarometricPressure_.set (Airflow_MZone_RefCrackCond_RefBarometricPressure_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_RefCrackCond_RefHumidRatio
          //
          if (n.name () == "Airflow_MZone_RefCrackCond_RefHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->Airflow_MZone_RefCrackCond_RefHumidRatio_)
            {
              this->Airflow_MZone_RefCrackCond_RefHumidRatio_.set (Airflow_MZone_RefCrackCond_RefHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFeatureAirFlowNetwork_SurfaceCrack* SimFeatureAirFlowNetwork_SurfaceCrack::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFeatureAirFlowNetwork_SurfaceCrack (*this, f, c);
      }

      SimFeatureAirFlowNetwork_SurfaceCrack& SimFeatureAirFlowNetwork_SurfaceCrack::
      operator= (const SimFeatureAirFlowNetwork_SurfaceCrack& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeometry::SimFeatureAirFlowNetwork& > (*this) = x;
          this->SimFeatureAirFlowNetwk_Name_ = x.SimFeatureAirFlowNetwk_Name_;
          this->SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_ = x.SimFeatureAirFlowNetwk_AirMassFlowCoefAtRefCond_;
          this->SimFeatureAirFlowNetwk_AirMassFlowExp_ = x.SimFeatureAirFlowNetwk_AirMassFlowExp_;
          this->SimFeatureAirFlowNetwk_RefCrackCond_ = x.SimFeatureAirFlowNetwk_RefCrackCond_;
          this->Airflow_MZone_RefCrackCond_Name_ = x.Airflow_MZone_RefCrackCond_Name_;
          this->Airflow_MZone_RefCrackCond_RefTemp_ = x.Airflow_MZone_RefCrackCond_RefTemp_;
          this->Airflow_MZone_RefCrackCond_RefBarometricPressure_ = x.Airflow_MZone_RefCrackCond_RefBarometricPressure_;
          this->Airflow_MZone_RefCrackCond_RefHumidRatio_ = x.Airflow_MZone_RefCrackCond_RefHumidRatio_;
        }

        return *this;
      }

      SimFeatureAirFlowNetwork_SurfaceCrack::
      ~SimFeatureAirFlowNetwork_SurfaceCrack ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

