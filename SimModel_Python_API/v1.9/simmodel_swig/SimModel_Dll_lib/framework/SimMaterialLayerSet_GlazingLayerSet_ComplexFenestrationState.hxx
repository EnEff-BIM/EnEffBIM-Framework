// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_MATERIAL_LAYER_SET_GLAZING_LAYER_SET_COMPLEX_FENESTRATION_STATE_HXX
#define SIM_MATERIAL_LAYER_SET_GLAZING_LAYER_SET_COMPLEX_FENESTRATION_STATE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simmateriallayerset_glazinglayerset.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState: public ::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet
      {
        public:
        // SimMatLayerSet_Name
        //
        typedef ::xml_schema::string SimMatLayerSet_Name_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Name_type > SimMatLayerSet_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Name_type, char > SimMatLayerSet_Name_traits;

        const SimMatLayerSet_Name_optional&
        SimMatLayerSet_Name () const;

        SimMatLayerSet_Name_optional&
        SimMatLayerSet_Name ();

        void
        SimMatLayerSet_Name (const SimMatLayerSet_Name_type& x);

        void
        SimMatLayerSet_Name (const SimMatLayerSet_Name_optional& x);

        void
        SimMatLayerSet_Name (::std::auto_ptr< SimMatLayerSet_Name_type > p);

        // SimMatLayerSet_BasisType
        //
        typedef ::xml_schema::string SimMatLayerSet_BasisType_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_BasisType_type > SimMatLayerSet_BasisType_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_BasisType_type, char > SimMatLayerSet_BasisType_traits;

        const SimMatLayerSet_BasisType_optional&
        SimMatLayerSet_BasisType () const;

        SimMatLayerSet_BasisType_optional&
        SimMatLayerSet_BasisType ();

        void
        SimMatLayerSet_BasisType (const SimMatLayerSet_BasisType_type& x);

        void
        SimMatLayerSet_BasisType (const SimMatLayerSet_BasisType_optional& x);

        void
        SimMatLayerSet_BasisType (::std::auto_ptr< SimMatLayerSet_BasisType_type > p);

        // SimMatLayerSet_BasisSymmetryType
        //
        typedef ::xml_schema::string SimMatLayerSet_BasisSymmetryType_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_BasisSymmetryType_type > SimMatLayerSet_BasisSymmetryType_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_BasisSymmetryType_type, char > SimMatLayerSet_BasisSymmetryType_traits;

        const SimMatLayerSet_BasisSymmetryType_optional&
        SimMatLayerSet_BasisSymmetryType () const;

        SimMatLayerSet_BasisSymmetryType_optional&
        SimMatLayerSet_BasisSymmetryType ();

        void
        SimMatLayerSet_BasisSymmetryType (const SimMatLayerSet_BasisSymmetryType_type& x);

        void
        SimMatLayerSet_BasisSymmetryType (const SimMatLayerSet_BasisSymmetryType_optional& x);

        void
        SimMatLayerSet_BasisSymmetryType (::std::auto_ptr< SimMatLayerSet_BasisSymmetryType_type > p);

        // SimMatLayerSet_WindowThermalModel
        //
        typedef ::xml_schema::idref SimMatLayerSet_WindowThermalModel_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_WindowThermalModel_type > SimMatLayerSet_WindowThermalModel_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_WindowThermalModel_type, char > SimMatLayerSet_WindowThermalModel_traits;

        const SimMatLayerSet_WindowThermalModel_optional&
        SimMatLayerSet_WindowThermalModel () const;

        SimMatLayerSet_WindowThermalModel_optional&
        SimMatLayerSet_WindowThermalModel ();

        void
        SimMatLayerSet_WindowThermalModel (const SimMatLayerSet_WindowThermalModel_type& x);

        void
        SimMatLayerSet_WindowThermalModel (const SimMatLayerSet_WindowThermalModel_optional& x);

        void
        SimMatLayerSet_WindowThermalModel (::std::auto_ptr< SimMatLayerSet_WindowThermalModel_type > p);

        // SimMatLayerSet_BasisMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_BasisMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_BasisMatrixName_type > SimMatLayerSet_BasisMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_BasisMatrixName_type, char > SimMatLayerSet_BasisMatrixName_traits;

        const SimMatLayerSet_BasisMatrixName_optional&
        SimMatLayerSet_BasisMatrixName () const;

        SimMatLayerSet_BasisMatrixName_optional&
        SimMatLayerSet_BasisMatrixName ();

        void
        SimMatLayerSet_BasisMatrixName (const SimMatLayerSet_BasisMatrixName_type& x);

        void
        SimMatLayerSet_BasisMatrixName (const SimMatLayerSet_BasisMatrixName_optional& x);

        void
        SimMatLayerSet_BasisMatrixName (::std::auto_ptr< SimMatLayerSet_BasisMatrixName_type > p);

        // SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type > SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type, char > SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_traits;

        const SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional&
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName () const;

        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional&
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName ();

        void
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type& x);

        void
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional& x);

        void
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName (::std::auto_ptr< SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type > p);

        // SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type > SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type, char > SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_traits;

        const SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional&
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName () const;

        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional&
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName ();

        void
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName (const SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type& x);

        void
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName (const SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional& x);

        void
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName (::std::auto_ptr< SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type > p);

        // SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type > SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type, char > SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_traits;

        const SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional&
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName () const;

        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional&
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName ();

        void
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type& x);

        void
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional& x);

        void
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName (::std::auto_ptr< SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type > p);

        // SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type > SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type, char > SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_traits;

        const SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional&
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName () const;

        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional&
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName ();

        void
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type& x);

        void
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional& x);

        void
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName (::std::auto_ptr< SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type > p);

        // SimMatLayerSet_OutsideLayerName
        //
        typedef ::xml_schema::idref SimMatLayerSet_OutsideLayerName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_OutsideLayerName_type > SimMatLayerSet_OutsideLayerName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_OutsideLayerName_type, char > SimMatLayerSet_OutsideLayerName_traits;

        const SimMatLayerSet_OutsideLayerName_optional&
        SimMatLayerSet_OutsideLayerName () const;

        SimMatLayerSet_OutsideLayerName_optional&
        SimMatLayerSet_OutsideLayerName ();

        void
        SimMatLayerSet_OutsideLayerName (const SimMatLayerSet_OutsideLayerName_type& x);

        void
        SimMatLayerSet_OutsideLayerName (const SimMatLayerSet_OutsideLayerName_optional& x);

        void
        SimMatLayerSet_OutsideLayerName (::std::auto_ptr< SimMatLayerSet_OutsideLayerName_type > p);

        // SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type > SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type, char > SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_traits;

        const SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional&
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName () const;

        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional&
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName ();

        void
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type& x);

        void
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional& x);

        void
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName (::std::auto_ptr< SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type > p);

        // SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName
        //
        typedef ::xml_schema::idref SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type > SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type, char > SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_traits;

        const SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional&
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName () const;

        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional&
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName ();

        void
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type& x);

        void
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional& x);

        void
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName (::std::auto_ptr< SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type > p);

        // SimMatLayerSet_Layer_2_5_Name
        //
        typedef ::xml_schema::idrefs SimMatLayerSet_Layer_2_5_Name_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Layer_2_5_Name_type > SimMatLayerSet_Layer_2_5_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Layer_2_5_Name_type, char > SimMatLayerSet_Layer_2_5_Name_traits;

        const SimMatLayerSet_Layer_2_5_Name_optional&
        SimMatLayerSet_Layer_2_5_Name () const;

        SimMatLayerSet_Layer_2_5_Name_optional&
        SimMatLayerSet_Layer_2_5_Name ();

        void
        SimMatLayerSet_Layer_2_5_Name (const SimMatLayerSet_Layer_2_5_Name_type& x);

        void
        SimMatLayerSet_Layer_2_5_Name (const SimMatLayerSet_Layer_2_5_Name_optional& x);

        void
        SimMatLayerSet_Layer_2_5_Name (::std::auto_ptr< SimMatLayerSet_Layer_2_5_Name_type > p);

        // SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName
        //
        typedef ::xml_schema::idrefs SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type > SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type, char > SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_traits;

        const SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional&
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName () const;

        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional&
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName ();

        void
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type& x);

        void
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional& x);

        void
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type > p);

        // SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName
        //
        typedef ::xml_schema::idrefs SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type > SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type, char > SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_traits;

        const SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional&
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName () const;

        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional&
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName ();

        void
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type& x);

        void
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional& x);

        void
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type > p);

        // SimMatLayerSet_Gap_1_4_Name
        //
        typedef ::xml_schema::idrefs SimMatLayerSet_Gap_1_4_Name_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Gap_1_4_Name_type > SimMatLayerSet_Gap_1_4_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Gap_1_4_Name_type, char > SimMatLayerSet_Gap_1_4_Name_traits;

        const SimMatLayerSet_Gap_1_4_Name_optional&
        SimMatLayerSet_Gap_1_4_Name () const;

        SimMatLayerSet_Gap_1_4_Name_optional&
        SimMatLayerSet_Gap_1_4_Name ();

        void
        SimMatLayerSet_Gap_1_4_Name (const SimMatLayerSet_Gap_1_4_Name_type& x);

        void
        SimMatLayerSet_Gap_1_4_Name (const SimMatLayerSet_Gap_1_4_Name_optional& x);

        void
        SimMatLayerSet_Gap_1_4_Name (::std::auto_ptr< SimMatLayerSet_Gap_1_4_Name_type > p);

        // SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName
        //
        typedef ::xml_schema::idrefs SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type > SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type, char > SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_traits;

        const SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional&
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName () const;

        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional&
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName ();

        void
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type& x);

        void
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional& x);

        void
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type > p);

        // SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName
        //
        typedef ::xml_schema::idrefs SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type;
        typedef ::xsd::cxx::tree::optional< SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type > SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional;
        typedef ::xsd::cxx::tree::traits< SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type, char > SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_traits;

        const SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional&
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName () const;

        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional&
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName ();

        void
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type& x);

        void
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional& x);

        void
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type > p);

        // WindowThermalModel_Params_Name
        //
        typedef ::xml_schema::string WindowThermalModel_Params_Name_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_Name_type > WindowThermalModel_Params_Name_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_Name_type, char > WindowThermalModel_Params_Name_traits;

        const WindowThermalModel_Params_Name_optional&
        WindowThermalModel_Params_Name () const;

        WindowThermalModel_Params_Name_optional&
        WindowThermalModel_Params_Name ();

        void
        WindowThermalModel_Params_Name (const WindowThermalModel_Params_Name_type& x);

        void
        WindowThermalModel_Params_Name (const WindowThermalModel_Params_Name_optional& x);

        void
        WindowThermalModel_Params_Name (::std::auto_ptr< WindowThermalModel_Params_Name_type > p);

        // WindowThermalModel_Params_standard
        //
        typedef ::xml_schema::string WindowThermalModel_Params_standard_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_standard_type > WindowThermalModel_Params_standard_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_standard_type, char > WindowThermalModel_Params_standard_traits;

        const WindowThermalModel_Params_standard_optional&
        WindowThermalModel_Params_standard () const;

        WindowThermalModel_Params_standard_optional&
        WindowThermalModel_Params_standard ();

        void
        WindowThermalModel_Params_standard (const WindowThermalModel_Params_standard_type& x);

        void
        WindowThermalModel_Params_standard (const WindowThermalModel_Params_standard_optional& x);

        void
        WindowThermalModel_Params_standard (::std::auto_ptr< WindowThermalModel_Params_standard_type > p);

        // WindowThermalModel_Params_ThermalModel
        //
        typedef ::xml_schema::string WindowThermalModel_Params_ThermalModel_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_ThermalModel_type > WindowThermalModel_Params_ThermalModel_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_ThermalModel_type, char > WindowThermalModel_Params_ThermalModel_traits;

        const WindowThermalModel_Params_ThermalModel_optional&
        WindowThermalModel_Params_ThermalModel () const;

        WindowThermalModel_Params_ThermalModel_optional&
        WindowThermalModel_Params_ThermalModel ();

        void
        WindowThermalModel_Params_ThermalModel (const WindowThermalModel_Params_ThermalModel_type& x);

        void
        WindowThermalModel_Params_ThermalModel (const WindowThermalModel_Params_ThermalModel_optional& x);

        void
        WindowThermalModel_Params_ThermalModel (::std::auto_ptr< WindowThermalModel_Params_ThermalModel_type > p);

        // WindowThermalModel_Params_SDScalar
        //
        typedef ::xml_schema::double_ WindowThermalModel_Params_SDScalar_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_SDScalar_type > WindowThermalModel_Params_SDScalar_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_SDScalar_type, char, ::xsd::cxx::tree::schema_type::double_ > WindowThermalModel_Params_SDScalar_traits;

        const WindowThermalModel_Params_SDScalar_optional&
        WindowThermalModel_Params_SDScalar () const;

        WindowThermalModel_Params_SDScalar_optional&
        WindowThermalModel_Params_SDScalar ();

        void
        WindowThermalModel_Params_SDScalar (const WindowThermalModel_Params_SDScalar_type& x);

        void
        WindowThermalModel_Params_SDScalar (const WindowThermalModel_Params_SDScalar_optional& x);

        // WindowThermalModel_Params_DeflectionModel
        //
        typedef ::xml_schema::string WindowThermalModel_Params_DeflectionModel_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_DeflectionModel_type > WindowThermalModel_Params_DeflectionModel_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_DeflectionModel_type, char > WindowThermalModel_Params_DeflectionModel_traits;

        const WindowThermalModel_Params_DeflectionModel_optional&
        WindowThermalModel_Params_DeflectionModel () const;

        WindowThermalModel_Params_DeflectionModel_optional&
        WindowThermalModel_Params_DeflectionModel ();

        void
        WindowThermalModel_Params_DeflectionModel (const WindowThermalModel_Params_DeflectionModel_type& x);

        void
        WindowThermalModel_Params_DeflectionModel (const WindowThermalModel_Params_DeflectionModel_optional& x);

        void
        WindowThermalModel_Params_DeflectionModel (::std::auto_ptr< WindowThermalModel_Params_DeflectionModel_type > p);

        // WindowThermalModel_Params_VacuumPressureLimit
        //
        typedef ::xml_schema::double_ WindowThermalModel_Params_VacuumPressureLimit_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_VacuumPressureLimit_type > WindowThermalModel_Params_VacuumPressureLimit_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_VacuumPressureLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > WindowThermalModel_Params_VacuumPressureLimit_traits;

        const WindowThermalModel_Params_VacuumPressureLimit_optional&
        WindowThermalModel_Params_VacuumPressureLimit () const;

        WindowThermalModel_Params_VacuumPressureLimit_optional&
        WindowThermalModel_Params_VacuumPressureLimit ();

        void
        WindowThermalModel_Params_VacuumPressureLimit (const WindowThermalModel_Params_VacuumPressureLimit_type& x);

        void
        WindowThermalModel_Params_VacuumPressureLimit (const WindowThermalModel_Params_VacuumPressureLimit_optional& x);

        // WindowThermalModel_Params_InitialTemperature
        //
        typedef ::xml_schema::double_ WindowThermalModel_Params_InitialTemperature_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_InitialTemperature_type > WindowThermalModel_Params_InitialTemperature_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_InitialTemperature_type, char, ::xsd::cxx::tree::schema_type::double_ > WindowThermalModel_Params_InitialTemperature_traits;

        const WindowThermalModel_Params_InitialTemperature_optional&
        WindowThermalModel_Params_InitialTemperature () const;

        WindowThermalModel_Params_InitialTemperature_optional&
        WindowThermalModel_Params_InitialTemperature ();

        void
        WindowThermalModel_Params_InitialTemperature (const WindowThermalModel_Params_InitialTemperature_type& x);

        void
        WindowThermalModel_Params_InitialTemperature (const WindowThermalModel_Params_InitialTemperature_optional& x);

        // WindowThermalModel_Params_InitialPressure
        //
        typedef ::xml_schema::double_ WindowThermalModel_Params_InitialPressure_type;
        typedef ::xsd::cxx::tree::optional< WindowThermalModel_Params_InitialPressure_type > WindowThermalModel_Params_InitialPressure_optional;
        typedef ::xsd::cxx::tree::traits< WindowThermalModel_Params_InitialPressure_type, char, ::xsd::cxx::tree::schema_type::double_ > WindowThermalModel_Params_InitialPressure_traits;

        const WindowThermalModel_Params_InitialPressure_optional&
        WindowThermalModel_Params_InitialPressure () const;

        WindowThermalModel_Params_InitialPressure_optional&
        WindowThermalModel_Params_InitialPressure ();

        void
        WindowThermalModel_Params_InitialPressure (const WindowThermalModel_Params_InitialPressure_type& x);

        void
        WindowThermalModel_Params_InitialPressure (const WindowThermalModel_Params_InitialPressure_optional& x);

        // Matrix_TwoDimension_Name
        //
        typedef ::xml_schema::string Matrix_TwoDimension_Name_type;
        typedef ::xsd::cxx::tree::optional< Matrix_TwoDimension_Name_type > Matrix_TwoDimension_Name_optional;
        typedef ::xsd::cxx::tree::traits< Matrix_TwoDimension_Name_type, char > Matrix_TwoDimension_Name_traits;

        const Matrix_TwoDimension_Name_optional&
        Matrix_TwoDimension_Name () const;

        Matrix_TwoDimension_Name_optional&
        Matrix_TwoDimension_Name ();

        void
        Matrix_TwoDimension_Name (const Matrix_TwoDimension_Name_type& x);

        void
        Matrix_TwoDimension_Name (const Matrix_TwoDimension_Name_optional& x);

        void
        Matrix_TwoDimension_Name (::std::auto_ptr< Matrix_TwoDimension_Name_type > p);

        // Matrix_TwoDimension_NumberofRows
        //
        typedef ::xml_schema::int_ Matrix_TwoDimension_NumberofRows_type;
        typedef ::xsd::cxx::tree::optional< Matrix_TwoDimension_NumberofRows_type > Matrix_TwoDimension_NumberofRows_optional;
        typedef ::xsd::cxx::tree::traits< Matrix_TwoDimension_NumberofRows_type, char > Matrix_TwoDimension_NumberofRows_traits;

        const Matrix_TwoDimension_NumberofRows_optional&
        Matrix_TwoDimension_NumberofRows () const;

        Matrix_TwoDimension_NumberofRows_optional&
        Matrix_TwoDimension_NumberofRows ();

        void
        Matrix_TwoDimension_NumberofRows (const Matrix_TwoDimension_NumberofRows_type& x);

        void
        Matrix_TwoDimension_NumberofRows (const Matrix_TwoDimension_NumberofRows_optional& x);

        // Matrix_TwoDimension_NumberofColumns
        //
        typedef ::xml_schema::int_ Matrix_TwoDimension_NumberofColumns_type;
        typedef ::xsd::cxx::tree::optional< Matrix_TwoDimension_NumberofColumns_type > Matrix_TwoDimension_NumberofColumns_optional;
        typedef ::xsd::cxx::tree::traits< Matrix_TwoDimension_NumberofColumns_type, char > Matrix_TwoDimension_NumberofColumns_traits;

        const Matrix_TwoDimension_NumberofColumns_optional&
        Matrix_TwoDimension_NumberofColumns () const;

        Matrix_TwoDimension_NumberofColumns_optional&
        Matrix_TwoDimension_NumberofColumns ();

        void
        Matrix_TwoDimension_NumberofColumns (const Matrix_TwoDimension_NumberofColumns_type& x);

        void
        Matrix_TwoDimension_NumberofColumns (const Matrix_TwoDimension_NumberofColumns_optional& x);

        // Matrix_TwoDimension_Value_1_2500
        //
        typedef ::schema::simxml::SimModelCore::doubleList Matrix_TwoDimension_Value_1_2500_type;
        typedef ::xsd::cxx::tree::optional< Matrix_TwoDimension_Value_1_2500_type > Matrix_TwoDimension_Value_1_2500_optional;
        typedef ::xsd::cxx::tree::traits< Matrix_TwoDimension_Value_1_2500_type, char > Matrix_TwoDimension_Value_1_2500_traits;

        const Matrix_TwoDimension_Value_1_2500_optional&
        Matrix_TwoDimension_Value_1_2500 () const;

        Matrix_TwoDimension_Value_1_2500_optional&
        Matrix_TwoDimension_Value_1_2500 ();

        void
        Matrix_TwoDimension_Value_1_2500 (const Matrix_TwoDimension_Value_1_2500_type& x);

        void
        Matrix_TwoDimension_Value_1_2500 (const Matrix_TwoDimension_Value_1_2500_optional& x);

        void
        Matrix_TwoDimension_Value_1_2500 (::std::auto_ptr< Matrix_TwoDimension_Value_1_2500_type > p);

        // T24AssmContext
        //
        typedef ::xml_schema::string T24AssmContext_type;
        typedef ::xsd::cxx::tree::optional< T24AssmContext_type > T24AssmContext_optional;
        typedef ::xsd::cxx::tree::traits< T24AssmContext_type, char > T24AssmContext_traits;

        const T24AssmContext_optional&
        T24AssmContext () const;

        T24AssmContext_optional&
        T24AssmContext ();

        void
        T24AssmContext (const T24AssmContext_type& x);

        void
        T24AssmContext (const T24AssmContext_optional& x);

        void
        T24AssmContext (::std::auto_ptr< T24AssmContext_type > p);

        // T24FenestraCertMethod
        //
        typedef ::xml_schema::string T24FenestraCertMethod_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraCertMethod_type > T24FenestraCertMethod_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraCertMethod_type, char > T24FenestraCertMethod_traits;

        const T24FenestraCertMethod_optional&
        T24FenestraCertMethod () const;

        T24FenestraCertMethod_optional&
        T24FenestraCertMethod ();

        void
        T24FenestraCertMethod (const T24FenestraCertMethod_type& x);

        void
        T24FenestraCertMethod (const T24FenestraCertMethod_optional& x);

        void
        T24FenestraCertMethod (::std::auto_ptr< T24FenestraCertMethod_type > p);

        // T24Diffusing
        //
        typedef ::xml_schema::int_ T24Diffusing_type;
        typedef ::xsd::cxx::tree::optional< T24Diffusing_type > T24Diffusing_optional;
        typedef ::xsd::cxx::tree::traits< T24Diffusing_type, char > T24Diffusing_traits;

        const T24Diffusing_optional&
        T24Diffusing () const;

        T24Diffusing_optional&
        T24Diffusing ();

        void
        T24Diffusing (const T24Diffusing_type& x);

        void
        T24Diffusing (const T24Diffusing_optional& x);

        // T24FenestraFrame
        //
        typedef ::xml_schema::string T24FenestraFrame_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraFrame_type > T24FenestraFrame_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraFrame_type, char > T24FenestraFrame_traits;

        const T24FenestraFrame_optional&
        T24FenestraFrame () const;

        T24FenestraFrame_optional&
        T24FenestraFrame ();

        void
        T24FenestraFrame (const T24FenestraFrame_type& x);

        void
        T24FenestraFrame (const T24FenestraFrame_optional& x);

        void
        T24FenestraFrame (::std::auto_ptr< T24FenestraFrame_type > p);

        // T24FenestraPanes
        //
        typedef ::xml_schema::string T24FenestraPanes_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraPanes_type > T24FenestraPanes_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraPanes_type, char > T24FenestraPanes_traits;

        const T24FenestraPanes_optional&
        T24FenestraPanes () const;

        T24FenestraPanes_optional&
        T24FenestraPanes ();

        void
        T24FenestraPanes (const T24FenestraPanes_type& x);

        void
        T24FenestraPanes (const T24FenestraPanes_optional& x);

        void
        T24FenestraPanes (::std::auto_ptr< T24FenestraPanes_type > p);

        // T24FenestraProdType
        //
        typedef ::xml_schema::string T24FenestraProdType_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraProdType_type > T24FenestraProdType_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraProdType_type, char > T24FenestraProdType_traits;

        const T24FenestraProdType_optional&
        T24FenestraProdType () const;

        T24FenestraProdType_optional&
        T24FenestraProdType ();

        void
        T24FenestraProdType (const T24FenestraProdType_type& x);

        void
        T24FenestraProdType (const T24FenestraProdType_optional& x);

        void
        T24FenestraProdType (::std::auto_ptr< T24FenestraProdType_type > p);

        // T24FenestraTint
        //
        typedef ::xml_schema::string T24FenestraTint_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraTint_type > T24FenestraTint_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraTint_type, char > T24FenestraTint_traits;

        const T24FenestraTint_optional&
        T24FenestraTint () const;

        T24FenestraTint_optional&
        T24FenestraTint ();

        void
        T24FenestraTint (const T24FenestraTint_type& x);

        void
        T24FenestraTint (const T24FenestraTint_optional& x);

        void
        T24FenestraTint (::std::auto_ptr< T24FenestraTint_type > p);

        // GreenhouseGardenWindow
        //
        typedef ::xml_schema::int_ GreenhouseGardenWindow_type;
        typedef ::xsd::cxx::tree::optional< GreenhouseGardenWindow_type > GreenhouseGardenWindow_optional;
        typedef ::xsd::cxx::tree::traits< GreenhouseGardenWindow_type, char > GreenhouseGardenWindow_traits;

        const GreenhouseGardenWindow_optional&
        GreenhouseGardenWindow () const;

        GreenhouseGardenWindow_optional&
        GreenhouseGardenWindow ();

        void
        GreenhouseGardenWindow (const GreenhouseGardenWindow_type& x);

        void
        GreenhouseGardenWindow (const GreenhouseGardenWindow_optional& x);

        // T24SHGC
        //
        typedef ::xml_schema::double_ T24SHGC_type;
        typedef ::xsd::cxx::tree::optional< T24SHGC_type > T24SHGC_optional;
        typedef ::xsd::cxx::tree::traits< T24SHGC_type, char, ::xsd::cxx::tree::schema_type::double_ > T24SHGC_traits;

        const T24SHGC_optional&
        T24SHGC () const;

        T24SHGC_optional&
        T24SHGC ();

        void
        T24SHGC (const T24SHGC_type& x);

        void
        T24SHGC (const T24SHGC_optional& x);

        // T24SHGCCenterOfGlass
        //
        typedef ::xml_schema::double_ T24SHGCCenterOfGlass_type;
        typedef ::xsd::cxx::tree::optional< T24SHGCCenterOfGlass_type > T24SHGCCenterOfGlass_optional;
        typedef ::xsd::cxx::tree::traits< T24SHGCCenterOfGlass_type, char, ::xsd::cxx::tree::schema_type::double_ > T24SHGCCenterOfGlass_traits;

        const T24SHGCCenterOfGlass_optional&
        T24SHGCCenterOfGlass () const;

        T24SHGCCenterOfGlass_optional&
        T24SHGCCenterOfGlass ();

        void
        T24SHGCCenterOfGlass (const T24SHGCCenterOfGlass_type& x);

        void
        T24SHGCCenterOfGlass (const T24SHGCCenterOfGlass_optional& x);

        // T24FenestraSkyltCurb
        //
        typedef ::xml_schema::string T24FenestraSkyltCurb_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraSkyltCurb_type > T24FenestraSkyltCurb_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraSkyltCurb_type, char > T24FenestraSkyltCurb_traits;

        const T24FenestraSkyltCurb_optional&
        T24FenestraSkyltCurb () const;

        T24FenestraSkyltCurb_optional&
        T24FenestraSkyltCurb ();

        void
        T24FenestraSkyltCurb (const T24FenestraSkyltCurb_type& x);

        void
        T24FenestraSkyltCurb (const T24FenestraSkyltCurb_optional& x);

        void
        T24FenestraSkyltCurb (::std::auto_ptr< T24FenestraSkyltCurb_type > p);

        // T24FenestraSkyltGlaze
        //
        typedef ::xml_schema::string T24FenestraSkyltGlaze_type;
        typedef ::xsd::cxx::tree::optional< T24FenestraSkyltGlaze_type > T24FenestraSkyltGlaze_optional;
        typedef ::xsd::cxx::tree::traits< T24FenestraSkyltGlaze_type, char > T24FenestraSkyltGlaze_traits;

        const T24FenestraSkyltGlaze_optional&
        T24FenestraSkyltGlaze () const;

        T24FenestraSkyltGlaze_optional&
        T24FenestraSkyltGlaze ();

        void
        T24FenestraSkyltGlaze (const T24FenestraSkyltGlaze_type& x);

        void
        T24FenestraSkyltGlaze (const T24FenestraSkyltGlaze_optional& x);

        void
        T24FenestraSkyltGlaze (::std::auto_ptr< T24FenestraSkyltGlaze_type > p);

        // Constructors.
        //
        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState ();

        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const RefId_type&);

        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const ::xercesc::DOMElement& e,
                                                                      ::xml_schema::flags f = 0,
                                                                      ::xml_schema::container* c = 0);

        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState& x,
                                                                      ::xml_schema::flags f = 0,
                                                                      ::xml_schema::container* c = 0);

        virtual SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState&
        operator= (const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState& x);

        virtual 
        ~SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimMatLayerSet_Name_optional SimMatLayerSet_Name_;
        SimMatLayerSet_BasisType_optional SimMatLayerSet_BasisType_;
        SimMatLayerSet_BasisSymmetryType_optional SimMatLayerSet_BasisSymmetryType_;
        SimMatLayerSet_WindowThermalModel_optional SimMatLayerSet_WindowThermalModel_;
        SimMatLayerSet_BasisMatrixName_optional SimMatLayerSet_BasisMatrixName_;
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_;
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_;
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_;
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_;
        SimMatLayerSet_OutsideLayerName_optional SimMatLayerSet_OutsideLayerName_;
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_;
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_;
        SimMatLayerSet_Layer_2_5_Name_optional SimMatLayerSet_Layer_2_5_Name_;
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_;
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_;
        SimMatLayerSet_Gap_1_4_Name_optional SimMatLayerSet_Gap_1_4_Name_;
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_;
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_;
        WindowThermalModel_Params_Name_optional WindowThermalModel_Params_Name_;
        WindowThermalModel_Params_standard_optional WindowThermalModel_Params_standard_;
        WindowThermalModel_Params_ThermalModel_optional WindowThermalModel_Params_ThermalModel_;
        WindowThermalModel_Params_SDScalar_optional WindowThermalModel_Params_SDScalar_;
        WindowThermalModel_Params_DeflectionModel_optional WindowThermalModel_Params_DeflectionModel_;
        WindowThermalModel_Params_VacuumPressureLimit_optional WindowThermalModel_Params_VacuumPressureLimit_;
        WindowThermalModel_Params_InitialTemperature_optional WindowThermalModel_Params_InitialTemperature_;
        WindowThermalModel_Params_InitialPressure_optional WindowThermalModel_Params_InitialPressure_;
        Matrix_TwoDimension_Name_optional Matrix_TwoDimension_Name_;
        Matrix_TwoDimension_NumberofRows_optional Matrix_TwoDimension_NumberofRows_;
        Matrix_TwoDimension_NumberofColumns_optional Matrix_TwoDimension_NumberofColumns_;
        Matrix_TwoDimension_Value_1_2500_optional Matrix_TwoDimension_Value_1_2500_;
        T24AssmContext_optional T24AssmContext_;
        T24FenestraCertMethod_optional T24FenestraCertMethod_;
        T24Diffusing_optional T24Diffusing_;
        T24FenestraFrame_optional T24FenestraFrame_;
        T24FenestraPanes_optional T24FenestraPanes_;
        T24FenestraProdType_optional T24FenestraProdType_;
        T24FenestraTint_optional T24FenestraTint_;
        GreenhouseGardenWindow_optional GreenhouseGardenWindow_;
        T24SHGC_optional T24SHGC_;
        T24SHGCCenterOfGlass_optional T24SHGCCenterOfGlass_;
        T24FenestraSkyltCurb_optional T24FenestraSkyltCurb_;
        T24FenestraSkyltGlaze_optional T24FenestraSkyltGlaze_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_MATERIAL_LAYER_SET_GLAZING_LAYER_SET_COMPLEX_FENESTRATION_STATE_HXX
