// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFluid.hxx"

#include "flowratesinglevalue.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimFluid
      // 

      const SimFluid::PropertySource_optional& SimFluid::
      PropertySource () const
      {
        return this->PropertySource_;
      }

      SimFluid::PropertySource_optional& SimFluid::
      PropertySource ()
      {
        return this->PropertySource_;
      }

      void SimFluid::
      PropertySource (const PropertySource_type& x)
      {
        this->PropertySource_.set (x);
      }

      void SimFluid::
      PropertySource (const PropertySource_optional& x)
      {
        this->PropertySource_ = x;
      }

      void SimFluid::
      PropertySource (::std::auto_ptr< PropertySource_type > x)
      {
        this->PropertySource_.set (x);
      }

      const SimFluid::FlowConditionTimeSeries_optional& SimFluid::
      FlowConditionTimeSeries () const
      {
        return this->FlowConditionTimeSeries_;
      }

      SimFluid::FlowConditionTimeSeries_optional& SimFluid::
      FlowConditionTimeSeries ()
      {
        return this->FlowConditionTimeSeries_;
      }

      void SimFluid::
      FlowConditionTimeSeries (const FlowConditionTimeSeries_type& x)
      {
        this->FlowConditionTimeSeries_.set (x);
      }

      void SimFluid::
      FlowConditionTimeSeries (const FlowConditionTimeSeries_optional& x)
      {
        this->FlowConditionTimeSeries_ = x;
      }

      void SimFluid::
      FlowConditionTimeSeries (::std::auto_ptr< FlowConditionTimeSeries_type > x)
      {
        this->FlowConditionTimeSeries_.set (x);
      }

      const SimFluid::VelocityTimeSeries_optional& SimFluid::
      VelocityTimeSeries () const
      {
        return this->VelocityTimeSeries_;
      }

      SimFluid::VelocityTimeSeries_optional& SimFluid::
      VelocityTimeSeries ()
      {
        return this->VelocityTimeSeries_;
      }

      void SimFluid::
      VelocityTimeSeries (const VelocityTimeSeries_type& x)
      {
        this->VelocityTimeSeries_.set (x);
      }

      void SimFluid::
      VelocityTimeSeries (const VelocityTimeSeries_optional& x)
      {
        this->VelocityTimeSeries_ = x;
      }

      void SimFluid::
      VelocityTimeSeries (::std::auto_ptr< VelocityTimeSeries_type > x)
      {
        this->VelocityTimeSeries_.set (x);
      }

      const SimFluid::FlowrateTimeSeries_optional& SimFluid::
      FlowrateTimeSeries () const
      {
        return this->FlowrateTimeSeries_;
      }

      SimFluid::FlowrateTimeSeries_optional& SimFluid::
      FlowrateTimeSeries ()
      {
        return this->FlowrateTimeSeries_;
      }

      void SimFluid::
      FlowrateTimeSeries (const FlowrateTimeSeries_type& x)
      {
        this->FlowrateTimeSeries_.set (x);
      }

      void SimFluid::
      FlowrateTimeSeries (const FlowrateTimeSeries_optional& x)
      {
        this->FlowrateTimeSeries_ = x;
      }

      void SimFluid::
      FlowrateTimeSeries (::std::auto_ptr< FlowrateTimeSeries_type > x)
      {
        this->FlowrateTimeSeries_.set (x);
      }

      const SimFluid::Fluid_optional& SimFluid::
      Fluid () const
      {
        return this->Fluid_;
      }

      SimFluid::Fluid_optional& SimFluid::
      Fluid ()
      {
        return this->Fluid_;
      }

      void SimFluid::
      Fluid (const Fluid_type& x)
      {
        this->Fluid_.set (x);
      }

      void SimFluid::
      Fluid (const Fluid_optional& x)
      {
        this->Fluid_ = x;
      }

      void SimFluid::
      Fluid (::std::auto_ptr< Fluid_type > x)
      {
        this->Fluid_.set (x);
      }

      const SimFluid::PressureTimeSeries_optional& SimFluid::
      PressureTimeSeries () const
      {
        return this->PressureTimeSeries_;
      }

      SimFluid::PressureTimeSeries_optional& SimFluid::
      PressureTimeSeries ()
      {
        return this->PressureTimeSeries_;
      }

      void SimFluid::
      PressureTimeSeries (const PressureTimeSeries_type& x)
      {
        this->PressureTimeSeries_.set (x);
      }

      void SimFluid::
      PressureTimeSeries (const PressureTimeSeries_optional& x)
      {
        this->PressureTimeSeries_ = x;
      }

      void SimFluid::
      PressureTimeSeries (::std::auto_ptr< PressureTimeSeries_type > x)
      {
        this->PressureTimeSeries_.set (x);
      }

      const SimFluid::UserDefinedPropertySource_optional& SimFluid::
      UserDefinedPropertySource () const
      {
        return this->UserDefinedPropertySource_;
      }

      SimFluid::UserDefinedPropertySource_optional& SimFluid::
      UserDefinedPropertySource ()
      {
        return this->UserDefinedPropertySource_;
      }

      void SimFluid::
      UserDefinedPropertySource (const UserDefinedPropertySource_type& x)
      {
        this->UserDefinedPropertySource_.set (x);
      }

      void SimFluid::
      UserDefinedPropertySource (const UserDefinedPropertySource_optional& x)
      {
        this->UserDefinedPropertySource_ = x;
      }

      void SimFluid::
      UserDefinedPropertySource (::std::auto_ptr< UserDefinedPropertySource_type > x)
      {
        this->UserDefinedPropertySource_.set (x);
      }

      const SimFluid::TemperatureSingleValue_optional& SimFluid::
      TemperatureSingleValue () const
      {
        return this->TemperatureSingleValue_;
      }

      SimFluid::TemperatureSingleValue_optional& SimFluid::
      TemperatureSingleValue ()
      {
        return this->TemperatureSingleValue_;
      }

      void SimFluid::
      TemperatureSingleValue (const TemperatureSingleValue_type& x)
      {
        this->TemperatureSingleValue_.set (x);
      }

      void SimFluid::
      TemperatureSingleValue (const TemperatureSingleValue_optional& x)
      {
        this->TemperatureSingleValue_ = x;
      }

      const SimFluid::WetBulbTemperatureSingleValue_optional& SimFluid::
      WetBulbTemperatureSingleValue () const
      {
        return this->WetBulbTemperatureSingleValue_;
      }

      SimFluid::WetBulbTemperatureSingleValue_optional& SimFluid::
      WetBulbTemperatureSingleValue ()
      {
        return this->WetBulbTemperatureSingleValue_;
      }

      void SimFluid::
      WetBulbTemperatureSingleValue (const WetBulbTemperatureSingleValue_type& x)
      {
        this->WetBulbTemperatureSingleValue_.set (x);
      }

      void SimFluid::
      WetBulbTemperatureSingleValue (const WetBulbTemperatureSingleValue_optional& x)
      {
        this->WetBulbTemperatureSingleValue_ = x;
      }

      const SimFluid::WetBulbTemperatureTimeSeries_optional& SimFluid::
      WetBulbTemperatureTimeSeries () const
      {
        return this->WetBulbTemperatureTimeSeries_;
      }

      SimFluid::WetBulbTemperatureTimeSeries_optional& SimFluid::
      WetBulbTemperatureTimeSeries ()
      {
        return this->WetBulbTemperatureTimeSeries_;
      }

      void SimFluid::
      WetBulbTemperatureTimeSeries (const WetBulbTemperatureTimeSeries_type& x)
      {
        this->WetBulbTemperatureTimeSeries_.set (x);
      }

      void SimFluid::
      WetBulbTemperatureTimeSeries (const WetBulbTemperatureTimeSeries_optional& x)
      {
        this->WetBulbTemperatureTimeSeries_ = x;
      }

      void SimFluid::
      WetBulbTemperatureTimeSeries (::std::auto_ptr< WetBulbTemperatureTimeSeries_type > x)
      {
        this->WetBulbTemperatureTimeSeries_.set (x);
      }

      const SimFluid::TemperatureTimeSeries_optional& SimFluid::
      TemperatureTimeSeries () const
      {
        return this->TemperatureTimeSeries_;
      }

      SimFluid::TemperatureTimeSeries_optional& SimFluid::
      TemperatureTimeSeries ()
      {
        return this->TemperatureTimeSeries_;
      }

      void SimFluid::
      TemperatureTimeSeries (const TemperatureTimeSeries_type& x)
      {
        this->TemperatureTimeSeries_.set (x);
      }

      void SimFluid::
      TemperatureTimeSeries (const TemperatureTimeSeries_optional& x)
      {
        this->TemperatureTimeSeries_ = x;
      }

      void SimFluid::
      TemperatureTimeSeries (::std::auto_ptr< TemperatureTimeSeries_type > x)
      {
        this->TemperatureTimeSeries_.set (x);
      }

      const SimFluid::FlowrateSingleValue_optional& SimFluid::
      FlowrateSingleValue () const
      {
        return this->FlowrateSingleValue_;
      }

      SimFluid::FlowrateSingleValue_optional& SimFluid::
      FlowrateSingleValue ()
      {
        return this->FlowrateSingleValue_;
      }

      void SimFluid::
      FlowrateSingleValue (const FlowrateSingleValue_type& x)
      {
        this->FlowrateSingleValue_.set (x);
      }

      void SimFluid::
      FlowrateSingleValue (const FlowrateSingleValue_optional& x)
      {
        this->FlowrateSingleValue_ = x;
      }

      void SimFluid::
      FlowrateSingleValue (::std::auto_ptr< FlowrateSingleValue_type > x)
      {
        this->FlowrateSingleValue_.set (x);
      }

      const SimFluid::FlowConditionSingleValue_optional& SimFluid::
      FlowConditionSingleValue () const
      {
        return this->FlowConditionSingleValue_;
      }

      SimFluid::FlowConditionSingleValue_optional& SimFluid::
      FlowConditionSingleValue ()
      {
        return this->FlowConditionSingleValue_;
      }

      void SimFluid::
      FlowConditionSingleValue (const FlowConditionSingleValue_type& x)
      {
        this->FlowConditionSingleValue_.set (x);
      }

      void SimFluid::
      FlowConditionSingleValue (const FlowConditionSingleValue_optional& x)
      {
        this->FlowConditionSingleValue_ = x;
      }

      const SimFluid::VelocitySingleValue_optional& SimFluid::
      VelocitySingleValue () const
      {
        return this->VelocitySingleValue_;
      }

      SimFluid::VelocitySingleValue_optional& SimFluid::
      VelocitySingleValue ()
      {
        return this->VelocitySingleValue_;
      }

      void SimFluid::
      VelocitySingleValue (const VelocitySingleValue_type& x)
      {
        this->VelocitySingleValue_.set (x);
      }

      void SimFluid::
      VelocitySingleValue (const VelocitySingleValue_optional& x)
      {
        this->VelocitySingleValue_ = x;
      }

      const SimFluid::PressureSingleValue_optional& SimFluid::
      PressureSingleValue () const
      {
        return this->PressureSingleValue_;
      }

      SimFluid::PressureSingleValue_optional& SimFluid::
      PressureSingleValue ()
      {
        return this->PressureSingleValue_;
      }

      void SimFluid::
      PressureSingleValue (const PressureSingleValue_type& x)
      {
        this->PressureSingleValue_.set (x);
      }

      void SimFluid::
      PressureSingleValue (const PressureSingleValue_optional& x)
      {
        this->PressureSingleValue_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimFluid
      //

      SimFluid::
      SimFluid ()
      : ::schema::simxml::SimModelCore::SimResourceObject (),
        PropertySource_ (this),
        FlowConditionTimeSeries_ (this),
        VelocityTimeSeries_ (this),
        FlowrateTimeSeries_ (this),
        Fluid_ (this),
        PressureTimeSeries_ (this),
        UserDefinedPropertySource_ (this),
        TemperatureSingleValue_ (this),
        WetBulbTemperatureSingleValue_ (this),
        WetBulbTemperatureTimeSeries_ (this),
        TemperatureTimeSeries_ (this),
        FlowrateSingleValue_ (this),
        FlowConditionSingleValue_ (this),
        VelocitySingleValue_ (this),
        PressureSingleValue_ (this)
      {
      }

      SimFluid::
      SimFluid (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimResourceObject (RefId),
        PropertySource_ (this),
        FlowConditionTimeSeries_ (this),
        VelocityTimeSeries_ (this),
        FlowrateTimeSeries_ (this),
        Fluid_ (this),
        PressureTimeSeries_ (this),
        UserDefinedPropertySource_ (this),
        TemperatureSingleValue_ (this),
        WetBulbTemperatureSingleValue_ (this),
        WetBulbTemperatureTimeSeries_ (this),
        TemperatureTimeSeries_ (this),
        FlowrateSingleValue_ (this),
        FlowConditionSingleValue_ (this),
        VelocitySingleValue_ (this),
        PressureSingleValue_ (this)
      {
      }

      SimFluid::
      SimFluid (const SimFluid& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimResourceObject (x, f, c),
        PropertySource_ (x.PropertySource_, f, this),
        FlowConditionTimeSeries_ (x.FlowConditionTimeSeries_, f, this),
        VelocityTimeSeries_ (x.VelocityTimeSeries_, f, this),
        FlowrateTimeSeries_ (x.FlowrateTimeSeries_, f, this),
        Fluid_ (x.Fluid_, f, this),
        PressureTimeSeries_ (x.PressureTimeSeries_, f, this),
        UserDefinedPropertySource_ (x.UserDefinedPropertySource_, f, this),
        TemperatureSingleValue_ (x.TemperatureSingleValue_, f, this),
        WetBulbTemperatureSingleValue_ (x.WetBulbTemperatureSingleValue_, f, this),
        WetBulbTemperatureTimeSeries_ (x.WetBulbTemperatureTimeSeries_, f, this),
        TemperatureTimeSeries_ (x.TemperatureTimeSeries_, f, this),
        FlowrateSingleValue_ (x.FlowrateSingleValue_, f, this),
        FlowConditionSingleValue_ (x.FlowConditionSingleValue_, f, this),
        VelocitySingleValue_ (x.VelocitySingleValue_, f, this),
        PressureSingleValue_ (x.PressureSingleValue_, f, this)
      {
      }

      SimFluid::
      SimFluid (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimResourceObject (e, f | ::xml_schema::flags::base, c),
        PropertySource_ (this),
        FlowConditionTimeSeries_ (this),
        VelocityTimeSeries_ (this),
        FlowrateTimeSeries_ (this),
        Fluid_ (this),
        PressureTimeSeries_ (this),
        UserDefinedPropertySource_ (this),
        TemperatureSingleValue_ (this),
        WetBulbTemperatureSingleValue_ (this),
        WetBulbTemperatureTimeSeries_ (this),
        TemperatureTimeSeries_ (this),
        FlowrateSingleValue_ (this),
        FlowConditionSingleValue_ (this),
        VelocitySingleValue_ (this),
        PressureSingleValue_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFluid::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimResourceObject::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PropertySource
          //
          if (n.name () == "PropertySource" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PropertySource_type > r (
              PropertySource_traits::create (i, f, this));

            if (!this->PropertySource_)
            {
              this->PropertySource_.set (r);
              continue;
            }
          }

          // FlowConditionTimeSeries
          //
          if (n.name () == "FlowConditionTimeSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< FlowConditionTimeSeries_type > r (
              FlowConditionTimeSeries_traits::create (i, f, this));

            if (!this->FlowConditionTimeSeries_)
            {
              this->FlowConditionTimeSeries_.set (r);
              continue;
            }
          }

          // VelocityTimeSeries
          //
          if (n.name () == "VelocityTimeSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< VelocityTimeSeries_type > r (
              VelocityTimeSeries_traits::create (i, f, this));

            if (!this->VelocityTimeSeries_)
            {
              this->VelocityTimeSeries_.set (r);
              continue;
            }
          }

          // FlowrateTimeSeries
          //
          if (n.name () == "FlowrateTimeSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< FlowrateTimeSeries_type > r (
              FlowrateTimeSeries_traits::create (i, f, this));

            if (!this->FlowrateTimeSeries_)
            {
              this->FlowrateTimeSeries_.set (r);
              continue;
            }
          }

          // Fluid
          //
          if (n.name () == "Fluid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Fluid_type > r (
              Fluid_traits::create (i, f, this));

            if (!this->Fluid_)
            {
              this->Fluid_.set (r);
              continue;
            }
          }

          // PressureTimeSeries
          //
          if (n.name () == "PressureTimeSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PressureTimeSeries_type > r (
              PressureTimeSeries_traits::create (i, f, this));

            if (!this->PressureTimeSeries_)
            {
              this->PressureTimeSeries_.set (r);
              continue;
            }
          }

          // UserDefinedPropertySource
          //
          if (n.name () == "UserDefinedPropertySource" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< UserDefinedPropertySource_type > r (
              UserDefinedPropertySource_traits::create (i, f, this));

            if (!this->UserDefinedPropertySource_)
            {
              this->UserDefinedPropertySource_.set (r);
              continue;
            }
          }

          // TemperatureSingleValue
          //
          if (n.name () == "TemperatureSingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->TemperatureSingleValue_)
            {
              this->TemperatureSingleValue_.set (TemperatureSingleValue_traits::create (i, f, this));
              continue;
            }
          }

          // WetBulbTemperatureSingleValue
          //
          if (n.name () == "WetBulbTemperatureSingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->WetBulbTemperatureSingleValue_)
            {
              this->WetBulbTemperatureSingleValue_.set (WetBulbTemperatureSingleValue_traits::create (i, f, this));
              continue;
            }
          }

          // WetBulbTemperatureTimeSeries
          //
          if (n.name () == "WetBulbTemperatureTimeSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WetBulbTemperatureTimeSeries_type > r (
              WetBulbTemperatureTimeSeries_traits::create (i, f, this));

            if (!this->WetBulbTemperatureTimeSeries_)
            {
              this->WetBulbTemperatureTimeSeries_.set (r);
              continue;
            }
          }

          // TemperatureTimeSeries
          //
          if (n.name () == "TemperatureTimeSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemperatureTimeSeries_type > r (
              TemperatureTimeSeries_traits::create (i, f, this));

            if (!this->TemperatureTimeSeries_)
            {
              this->TemperatureTimeSeries_.set (r);
              continue;
            }
          }

          // FlowrateSingleValue
          //
          if (n.name () == "FlowrateSingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< FlowrateSingleValue_type > r (
              FlowrateSingleValue_traits::create (i, f, this));

            if (!this->FlowrateSingleValue_)
            {
              this->FlowrateSingleValue_.set (r);
              continue;
            }
          }

          // FlowConditionSingleValue
          //
          if (n.name () == "FlowConditionSingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FlowConditionSingleValue_)
            {
              this->FlowConditionSingleValue_.set (FlowConditionSingleValue_traits::create (i, f, this));
              continue;
            }
          }

          // VelocitySingleValue
          //
          if (n.name () == "VelocitySingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->VelocitySingleValue_)
            {
              this->VelocitySingleValue_.set (VelocitySingleValue_traits::create (i, f, this));
              continue;
            }
          }

          // PressureSingleValue
          //
          if (n.name () == "PressureSingleValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->PressureSingleValue_)
            {
              this->PressureSingleValue_.set (PressureSingleValue_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFluid* SimFluid::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFluid (*this, f, c);
      }

      SimFluid& SimFluid::
      operator= (const SimFluid& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimResourceObject& > (*this) = x;
          this->PropertySource_ = x.PropertySource_;
          this->FlowConditionTimeSeries_ = x.FlowConditionTimeSeries_;
          this->VelocityTimeSeries_ = x.VelocityTimeSeries_;
          this->FlowrateTimeSeries_ = x.FlowrateTimeSeries_;
          this->Fluid_ = x.Fluid_;
          this->PressureTimeSeries_ = x.PressureTimeSeries_;
          this->UserDefinedPropertySource_ = x.UserDefinedPropertySource_;
          this->TemperatureSingleValue_ = x.TemperatureSingleValue_;
          this->WetBulbTemperatureSingleValue_ = x.WetBulbTemperatureSingleValue_;
          this->WetBulbTemperatureTimeSeries_ = x.WetBulbTemperatureTimeSeries_;
          this->TemperatureTimeSeries_ = x.TemperatureTimeSeries_;
          this->FlowrateSingleValue_ = x.FlowrateSingleValue_;
          this->FlowConditionSingleValue_ = x.FlowConditionSingleValue_;
          this->VelocitySingleValue_ = x.VelocitySingleValue_;
          this->PressureSingleValue_ = x.PressureSingleValue_;
        }

        return *this;
      }

      SimFluid::
      ~SimFluid ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

