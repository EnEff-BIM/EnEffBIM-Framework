// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_INFILTRATION_OR_VENTILATION_ROOM_AIR_SETTINGS_UNDER_FLOOR_AIR_DISTRIBUTION_INTERIOR_HXX
#define SIM_INFILTRATION_OR_VENTILATION_ROOM_AIR_SETTINGS_UNDER_FLOOR_AIR_DISTRIBUTION_INTERIOR_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "siminfiltrationorventilation_roomairsettings.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior: public ::schema::simxml::ResourcesGeneral::SimInfiltrationOrVentilation_RoomAirSettings
      {
        public:
        // SimInfiltrationOrVentilation_ZoneName
        //
        typedef ::xml_schema::idref SimInfiltrationOrVentilation_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_ZoneName_type > SimInfiltrationOrVentilation_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_ZoneName_type, char > SimInfiltrationOrVentilation_ZoneName_traits;

        const SimInfiltrationOrVentilation_ZoneName_optional&
        SimInfiltrationOrVentilation_ZoneName () const;

        SimInfiltrationOrVentilation_ZoneName_optional&
        SimInfiltrationOrVentilation_ZoneName ();

        void
        SimInfiltrationOrVentilation_ZoneName (const SimInfiltrationOrVentilation_ZoneName_type& x);

        void
        SimInfiltrationOrVentilation_ZoneName (const SimInfiltrationOrVentilation_ZoneName_optional& x);

        void
        SimInfiltrationOrVentilation_ZoneName (::std::auto_ptr< SimInfiltrationOrVentilation_ZoneName_type > p);

        // SimInfiltrationOrVentilation_ThermstatHt
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_ThermstatHt_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_ThermstatHt_type > SimInfiltrationOrVentilation_ThermstatHt_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_ThermstatHt_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_ThermstatHt_traits;

        const SimInfiltrationOrVentilation_ThermstatHt_optional&
        SimInfiltrationOrVentilation_ThermstatHt () const;

        SimInfiltrationOrVentilation_ThermstatHt_optional&
        SimInfiltrationOrVentilation_ThermstatHt ();

        void
        SimInfiltrationOrVentilation_ThermstatHt (const SimInfiltrationOrVentilation_ThermstatHt_type& x);

        void
        SimInfiltrationOrVentilation_ThermstatHt (const SimInfiltrationOrVentilation_ThermstatHt_optional& x);

        // SimInfiltrationOrVentilation_ComfHt
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_ComfHt_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_ComfHt_type > SimInfiltrationOrVentilation_ComfHt_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_ComfHt_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_ComfHt_traits;

        const SimInfiltrationOrVentilation_ComfHt_optional&
        SimInfiltrationOrVentilation_ComfHt () const;

        SimInfiltrationOrVentilation_ComfHt_optional&
        SimInfiltrationOrVentilation_ComfHt ();

        void
        SimInfiltrationOrVentilation_ComfHt (const SimInfiltrationOrVentilation_ComfHt_type& x);

        void
        SimInfiltrationOrVentilation_ComfHt (const SimInfiltrationOrVentilation_ComfHt_optional& x);

        // SimInfiltrationOrVentilation_TempDiffThreshRpt
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_TempDiffThreshRpt_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_TempDiffThreshRpt_type > SimInfiltrationOrVentilation_TempDiffThreshRpt_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_TempDiffThreshRpt_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_TempDiffThreshRpt_traits;

        const SimInfiltrationOrVentilation_TempDiffThreshRpt_optional&
        SimInfiltrationOrVentilation_TempDiffThreshRpt () const;

        SimInfiltrationOrVentilation_TempDiffThreshRpt_optional&
        SimInfiltrationOrVentilation_TempDiffThreshRpt ();

        void
        SimInfiltrationOrVentilation_TempDiffThreshRpt (const SimInfiltrationOrVentilation_TempDiffThreshRpt_type& x);

        void
        SimInfiltrationOrVentilation_TempDiffThreshRpt (const SimInfiltrationOrVentilation_TempDiffThreshRpt_optional& x);

        // SimInfiltrationOrVentilation_NumbDiff
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_NumbDiff_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_NumbDiff_type > SimInfiltrationOrVentilation_NumbDiff_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_NumbDiff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_NumbDiff_traits;

        const SimInfiltrationOrVentilation_NumbDiff_optional&
        SimInfiltrationOrVentilation_NumbDiff () const;

        SimInfiltrationOrVentilation_NumbDiff_optional&
        SimInfiltrationOrVentilation_NumbDiff ();

        void
        SimInfiltrationOrVentilation_NumbDiff (const SimInfiltrationOrVentilation_NumbDiff_type& x);

        void
        SimInfiltrationOrVentilation_NumbDiff (const SimInfiltrationOrVentilation_NumbDiff_optional& x);

        // SimInfiltrationOrVentilation_PowerPerPlume
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_PowerPerPlume_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_PowerPerPlume_type > SimInfiltrationOrVentilation_PowerPerPlume_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_PowerPerPlume_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_PowerPerPlume_traits;

        const SimInfiltrationOrVentilation_PowerPerPlume_optional&
        SimInfiltrationOrVentilation_PowerPerPlume () const;

        SimInfiltrationOrVentilation_PowerPerPlume_optional&
        SimInfiltrationOrVentilation_PowerPerPlume ();

        void
        SimInfiltrationOrVentilation_PowerPerPlume (const SimInfiltrationOrVentilation_PowerPerPlume_type& x);

        void
        SimInfiltrationOrVentilation_PowerPerPlume (const SimInfiltrationOrVentilation_PowerPerPlume_optional& x);

        // SimInfiltrationOrVentilation_DesignEffectAreaDiff
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_DesignEffectAreaDiff_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_DesignEffectAreaDiff_type > SimInfiltrationOrVentilation_DesignEffectAreaDiff_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_DesignEffectAreaDiff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_DesignEffectAreaDiff_traits;

        const SimInfiltrationOrVentilation_DesignEffectAreaDiff_optional&
        SimInfiltrationOrVentilation_DesignEffectAreaDiff () const;

        SimInfiltrationOrVentilation_DesignEffectAreaDiff_optional&
        SimInfiltrationOrVentilation_DesignEffectAreaDiff ();

        void
        SimInfiltrationOrVentilation_DesignEffectAreaDiff (const SimInfiltrationOrVentilation_DesignEffectAreaDiff_type& x);

        void
        SimInfiltrationOrVentilation_DesignEffectAreaDiff (const SimInfiltrationOrVentilation_DesignEffectAreaDiff_optional& x);

        // SimInfiltrationOrVentilation_DiffSlotAngFromVertexical
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_type > SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_traits;

        const SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_optional&
        SimInfiltrationOrVentilation_DiffSlotAngFromVertexical () const;

        SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_optional&
        SimInfiltrationOrVentilation_DiffSlotAngFromVertexical ();

        void
        SimInfiltrationOrVentilation_DiffSlotAngFromVertexical (const SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_type& x);

        void
        SimInfiltrationOrVentilation_DiffSlotAngFromVertexical (const SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_optional& x);

        // SimInfiltrationOrVentilation_FlrDiffType
        //
        typedef ::xml_schema::string SimInfiltrationOrVentilation_FlrDiffType_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_FlrDiffType_type > SimInfiltrationOrVentilation_FlrDiffType_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_FlrDiffType_type, char > SimInfiltrationOrVentilation_FlrDiffType_traits;

        const SimInfiltrationOrVentilation_FlrDiffType_optional&
        SimInfiltrationOrVentilation_FlrDiffType () const;

        SimInfiltrationOrVentilation_FlrDiffType_optional&
        SimInfiltrationOrVentilation_FlrDiffType ();

        void
        SimInfiltrationOrVentilation_FlrDiffType (const SimInfiltrationOrVentilation_FlrDiffType_type& x);

        void
        SimInfiltrationOrVentilation_FlrDiffType (const SimInfiltrationOrVentilation_FlrDiffType_optional& x);

        void
        SimInfiltrationOrVentilation_FlrDiffType (::std::auto_ptr< SimInfiltrationOrVentilation_FlrDiffType_type > p);

        // SimInfiltrationOrVentilation_TransHt
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_TransHt_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_TransHt_type > SimInfiltrationOrVentilation_TransHt_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_TransHt_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_TransHt_traits;

        const SimInfiltrationOrVentilation_TransHt_optional&
        SimInfiltrationOrVentilation_TransHt () const;

        SimInfiltrationOrVentilation_TransHt_optional&
        SimInfiltrationOrVentilation_TransHt ();

        void
        SimInfiltrationOrVentilation_TransHt (const SimInfiltrationOrVentilation_TransHt_type& x);

        void
        SimInfiltrationOrVentilation_TransHt (const SimInfiltrationOrVentilation_TransHt_optional& x);

        // SimInfiltrationOrVentilation_CoeffA
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_CoeffA_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_CoeffA_type > SimInfiltrationOrVentilation_CoeffA_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_CoeffA_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_CoeffA_traits;

        const SimInfiltrationOrVentilation_CoeffA_optional&
        SimInfiltrationOrVentilation_CoeffA () const;

        SimInfiltrationOrVentilation_CoeffA_optional&
        SimInfiltrationOrVentilation_CoeffA ();

        void
        SimInfiltrationOrVentilation_CoeffA (const SimInfiltrationOrVentilation_CoeffA_type& x);

        void
        SimInfiltrationOrVentilation_CoeffA (const SimInfiltrationOrVentilation_CoeffA_optional& x);

        // SimInfiltrationOrVentilation_CoeffB
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_CoeffB_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_CoeffB_type > SimInfiltrationOrVentilation_CoeffB_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_CoeffB_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_CoeffB_traits;

        const SimInfiltrationOrVentilation_CoeffB_optional&
        SimInfiltrationOrVentilation_CoeffB () const;

        SimInfiltrationOrVentilation_CoeffB_optional&
        SimInfiltrationOrVentilation_CoeffB ();

        void
        SimInfiltrationOrVentilation_CoeffB (const SimInfiltrationOrVentilation_CoeffB_type& x);

        void
        SimInfiltrationOrVentilation_CoeffB (const SimInfiltrationOrVentilation_CoeffB_optional& x);

        // SimInfiltrationOrVentilation_CoeffC
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_CoeffC_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_CoeffC_type > SimInfiltrationOrVentilation_CoeffC_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_CoeffC_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_CoeffC_traits;

        const SimInfiltrationOrVentilation_CoeffC_optional&
        SimInfiltrationOrVentilation_CoeffC () const;

        SimInfiltrationOrVentilation_CoeffC_optional&
        SimInfiltrationOrVentilation_CoeffC ();

        void
        SimInfiltrationOrVentilation_CoeffC (const SimInfiltrationOrVentilation_CoeffC_type& x);

        void
        SimInfiltrationOrVentilation_CoeffC (const SimInfiltrationOrVentilation_CoeffC_optional& x);

        // SimInfiltrationOrVentilation_CoeffD
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_CoeffD_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_CoeffD_type > SimInfiltrationOrVentilation_CoeffD_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_CoeffD_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_CoeffD_traits;

        const SimInfiltrationOrVentilation_CoeffD_optional&
        SimInfiltrationOrVentilation_CoeffD () const;

        SimInfiltrationOrVentilation_CoeffD_optional&
        SimInfiltrationOrVentilation_CoeffD ();

        void
        SimInfiltrationOrVentilation_CoeffD (const SimInfiltrationOrVentilation_CoeffD_type& x);

        void
        SimInfiltrationOrVentilation_CoeffD (const SimInfiltrationOrVentilation_CoeffD_optional& x);

        // SimInfiltrationOrVentilation_CoeffE
        //
        typedef ::xml_schema::double_ SimInfiltrationOrVentilation_CoeffE_type;
        typedef ::xsd::cxx::tree::optional< SimInfiltrationOrVentilation_CoeffE_type > SimInfiltrationOrVentilation_CoeffE_optional;
        typedef ::xsd::cxx::tree::traits< SimInfiltrationOrVentilation_CoeffE_type, char, ::xsd::cxx::tree::schema_type::double_ > SimInfiltrationOrVentilation_CoeffE_traits;

        const SimInfiltrationOrVentilation_CoeffE_optional&
        SimInfiltrationOrVentilation_CoeffE () const;

        SimInfiltrationOrVentilation_CoeffE_optional&
        SimInfiltrationOrVentilation_CoeffE ();

        void
        SimInfiltrationOrVentilation_CoeffE (const SimInfiltrationOrVentilation_CoeffE_type& x);

        void
        SimInfiltrationOrVentilation_CoeffE (const SimInfiltrationOrVentilation_CoeffE_optional& x);

        // Constructors.
        //
        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior ();

        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior (const RefId_type&);

        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior (const ::xercesc::DOMElement& e,
                                                                                        ::xml_schema::flags f = 0,
                                                                                        ::xml_schema::container* c = 0);

        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior (const SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior& x,
                                                                                        ::xml_schema::flags f = 0,
                                                                                        ::xml_schema::container* c = 0);

        virtual SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior&
        operator= (const SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior& x);

        virtual 
        ~SimInfiltrationOrVentilation_RoomAirSettings_UnderFloorAirDistributionInterior ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimInfiltrationOrVentilation_ZoneName_optional SimInfiltrationOrVentilation_ZoneName_;
        SimInfiltrationOrVentilation_ThermstatHt_optional SimInfiltrationOrVentilation_ThermstatHt_;
        SimInfiltrationOrVentilation_ComfHt_optional SimInfiltrationOrVentilation_ComfHt_;
        SimInfiltrationOrVentilation_TempDiffThreshRpt_optional SimInfiltrationOrVentilation_TempDiffThreshRpt_;
        SimInfiltrationOrVentilation_NumbDiff_optional SimInfiltrationOrVentilation_NumbDiff_;
        SimInfiltrationOrVentilation_PowerPerPlume_optional SimInfiltrationOrVentilation_PowerPerPlume_;
        SimInfiltrationOrVentilation_DesignEffectAreaDiff_optional SimInfiltrationOrVentilation_DesignEffectAreaDiff_;
        SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_optional SimInfiltrationOrVentilation_DiffSlotAngFromVertexical_;
        SimInfiltrationOrVentilation_FlrDiffType_optional SimInfiltrationOrVentilation_FlrDiffType_;
        SimInfiltrationOrVentilation_TransHt_optional SimInfiltrationOrVentilation_TransHt_;
        SimInfiltrationOrVentilation_CoeffA_optional SimInfiltrationOrVentilation_CoeffA_;
        SimInfiltrationOrVentilation_CoeffB_optional SimInfiltrationOrVentilation_CoeffB_;
        SimInfiltrationOrVentilation_CoeffC_optional SimInfiltrationOrVentilation_CoeffC_;
        SimInfiltrationOrVentilation_CoeffD_optional SimInfiltrationOrVentilation_CoeffD_;
        SimInfiltrationOrVentilation_CoeffE_optional SimInfiltrationOrVentilation_CoeffE_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_INFILTRATION_OR_VENTILATION_ROOM_AIR_SETTINGS_UNDER_FLOOR_AIR_DISTRIBUTION_INTERIOR_HXX
