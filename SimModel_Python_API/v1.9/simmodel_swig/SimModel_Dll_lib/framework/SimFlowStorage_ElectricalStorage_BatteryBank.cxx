// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowStorage_ElectricalStorage_BatteryBank.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowStorage_ElectricalStorage_BatteryBank
      // 

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_RadiativeFract_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_RadiativeFract () const
      {
        return this->SimFlowSto_RadiativeFract_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_RadiativeFract_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_RadiativeFract ()
      {
        return this->SimFlowSto_RadiativeFract_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_RadiativeFract (const SimFlowSto_RadiativeFract_type& x)
      {
        this->SimFlowSto_RadiativeFract_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_RadiativeFract (const SimFlowSto_RadiativeFract_optional& x)
      {
        this->SimFlowSto_RadiativeFract_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_NumberBatteryModsinParallel_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinParallel () const
      {
        return this->SimFlowSto_NumberBatteryModsinParallel_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_NumberBatteryModsinParallel_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinParallel ()
      {
        return this->SimFlowSto_NumberBatteryModsinParallel_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinParallel (const SimFlowSto_NumberBatteryModsinParallel_type& x)
      {
        this->SimFlowSto_NumberBatteryModsinParallel_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinParallel (const SimFlowSto_NumberBatteryModsinParallel_optional& x)
      {
        this->SimFlowSto_NumberBatteryModsinParallel_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_NumberBatteryModsinSeries_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinSeries () const
      {
        return this->SimFlowSto_NumberBatteryModsinSeries_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_NumberBatteryModsinSeries_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinSeries ()
      {
        return this->SimFlowSto_NumberBatteryModsinSeries_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinSeries (const SimFlowSto_NumberBatteryModsinSeries_type& x)
      {
        this->SimFlowSto_NumberBatteryModsinSeries_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberBatteryModsinSeries (const SimFlowSto_NumberBatteryModsinSeries_optional& x)
      {
        this->SimFlowSto_NumberBatteryModsinSeries_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_MaxModCap_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModCap () const
      {
        return this->SimFlowSto_MaxModCap_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_MaxModCap_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModCap ()
      {
        return this->SimFlowSto_MaxModCap_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModCap (const SimFlowSto_MaxModCap_type& x)
      {
        this->SimFlowSto_MaxModCap_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModCap (const SimFlowSto_MaxModCap_optional& x)
      {
        this->SimFlowSto_MaxModCap_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_InitialFractionalStateChrg_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_InitialFractionalStateChrg () const
      {
        return this->SimFlowSto_InitialFractionalStateChrg_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_InitialFractionalStateChrg_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_InitialFractionalStateChrg ()
      {
        return this->SimFlowSto_InitialFractionalStateChrg_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_InitialFractionalStateChrg (const SimFlowSto_InitialFractionalStateChrg_type& x)
      {
        this->SimFlowSto_InitialFractionalStateChrg_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_InitialFractionalStateChrg (const SimFlowSto_InitialFractionalStateChrg_optional& x)
      {
        this->SimFlowSto_InitialFractionalStateChrg_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_FractionAvailChrgCap_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FractionAvailChrgCap () const
      {
        return this->SimFlowSto_FractionAvailChrgCap_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_FractionAvailChrgCap_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FractionAvailChrgCap ()
      {
        return this->SimFlowSto_FractionAvailChrgCap_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FractionAvailChrgCap (const SimFlowSto_FractionAvailChrgCap_type& x)
      {
        this->SimFlowSto_FractionAvailChrgCap_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FractionAvailChrgCap (const SimFlowSto_FractionAvailChrgCap_optional& x)
      {
        this->SimFlowSto_FractionAvailChrgCap_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg () const
      {
        return this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg ()
      {
        return this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg (const SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_type& x)
      {
        this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg (const SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_optional& x)
      {
        this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_FullyChrgdModOpenCircVoltage_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyChrgdModOpenCircVoltage () const
      {
        return this->SimFlowSto_FullyChrgdModOpenCircVoltage_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_FullyChrgdModOpenCircVoltage_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyChrgdModOpenCircVoltage ()
      {
        return this->SimFlowSto_FullyChrgdModOpenCircVoltage_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyChrgdModOpenCircVoltage (const SimFlowSto_FullyChrgdModOpenCircVoltage_type& x)
      {
        this->SimFlowSto_FullyChrgdModOpenCircVoltage_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyChrgdModOpenCircVoltage (const SimFlowSto_FullyChrgdModOpenCircVoltage_optional& x)
      {
        this->SimFlowSto_FullyChrgdModOpenCircVoltage_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_FullyDischargedModOpenCircVoltage_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyDischargedModOpenCircVoltage () const
      {
        return this->SimFlowSto_FullyDischargedModOpenCircVoltage_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_FullyDischargedModOpenCircVoltage_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyDischargedModOpenCircVoltage ()
      {
        return this->SimFlowSto_FullyDischargedModOpenCircVoltage_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyDischargedModOpenCircVoltage (const SimFlowSto_FullyDischargedModOpenCircVoltage_type& x)
      {
        this->SimFlowSto_FullyDischargedModOpenCircVoltage_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_FullyDischargedModOpenCircVoltage (const SimFlowSto_FullyDischargedModOpenCircVoltage_optional& x)
      {
        this->SimFlowSto_FullyDischargedModOpenCircVoltage_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_VoltChangeCurveNameCharging_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameCharging () const
      {
        return this->SimFlowSto_VoltChangeCurveNameCharging_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_VoltChangeCurveNameCharging_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameCharging ()
      {
        return this->SimFlowSto_VoltChangeCurveNameCharging_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameCharging (const SimFlowSto_VoltChangeCurveNameCharging_type& x)
      {
        this->SimFlowSto_VoltChangeCurveNameCharging_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameCharging (const SimFlowSto_VoltChangeCurveNameCharging_optional& x)
      {
        this->SimFlowSto_VoltChangeCurveNameCharging_ = x;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameCharging (::std::auto_ptr< SimFlowSto_VoltChangeCurveNameCharging_type > x)
      {
        this->SimFlowSto_VoltChangeCurveNameCharging_.set (x);
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_VoltChangeCurveNameDischarging_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameDischarging () const
      {
        return this->SimFlowSto_VoltChangeCurveNameDischarging_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_VoltChangeCurveNameDischarging_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameDischarging ()
      {
        return this->SimFlowSto_VoltChangeCurveNameDischarging_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameDischarging (const SimFlowSto_VoltChangeCurveNameDischarging_type& x)
      {
        this->SimFlowSto_VoltChangeCurveNameDischarging_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameDischarging (const SimFlowSto_VoltChangeCurveNameDischarging_optional& x)
      {
        this->SimFlowSto_VoltChangeCurveNameDischarging_ = x;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_VoltChangeCurveNameDischarging (::std::auto_ptr< SimFlowSto_VoltChangeCurveNameDischarging_type > x)
      {
        this->SimFlowSto_VoltChangeCurveNameDischarging_.set (x);
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ModInternalElec_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModInternalElec () const
      {
        return this->SimFlowSto_ModInternalElec_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ModInternalElec_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModInternalElec ()
      {
        return this->SimFlowSto_ModInternalElec_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModInternalElec (const SimFlowSto_ModInternalElec_type& x)
      {
        this->SimFlowSto_ModInternalElec_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModInternalElec (const SimFlowSto_ModInternalElec_optional& x)
      {
        this->SimFlowSto_ModInternalElec_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_MaxModDischargingCurrent_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModDischargingCurrent () const
      {
        return this->SimFlowSto_MaxModDischargingCurrent_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_MaxModDischargingCurrent_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModDischargingCurrent ()
      {
        return this->SimFlowSto_MaxModDischargingCurrent_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModDischargingCurrent (const SimFlowSto_MaxModDischargingCurrent_type& x)
      {
        this->SimFlowSto_MaxModDischargingCurrent_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_MaxModDischargingCurrent (const SimFlowSto_MaxModDischargingCurrent_optional& x)
      {
        this->SimFlowSto_MaxModDischargingCurrent_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ModCut_offVoltage_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModCut_offVoltage () const
      {
        return this->SimFlowSto_ModCut_offVoltage_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ModCut_offVoltage_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModCut_offVoltage ()
      {
        return this->SimFlowSto_ModCut_offVoltage_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModCut_offVoltage (const SimFlowSto_ModCut_offVoltage_type& x)
      {
        this->SimFlowSto_ModCut_offVoltage_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModCut_offVoltage (const SimFlowSto_ModCut_offVoltage_optional& x)
      {
        this->SimFlowSto_ModCut_offVoltage_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ModChrgRateLimit_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModChrgRateLimit () const
      {
        return this->SimFlowSto_ModChrgRateLimit_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_ModChrgRateLimit_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModChrgRateLimit ()
      {
        return this->SimFlowSto_ModChrgRateLimit_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModChrgRateLimit (const SimFlowSto_ModChrgRateLimit_type& x)
      {
        this->SimFlowSto_ModChrgRateLimit_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_ModChrgRateLimit (const SimFlowSto_ModChrgRateLimit_optional& x)
      {
        this->SimFlowSto_ModChrgRateLimit_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_BatteryLifeCalculation_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCalculation () const
      {
        return this->SimFlowSto_BatteryLifeCalculation_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_BatteryLifeCalculation_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCalculation ()
      {
        return this->SimFlowSto_BatteryLifeCalculation_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCalculation (const SimFlowSto_BatteryLifeCalculation_type& x)
      {
        this->SimFlowSto_BatteryLifeCalculation_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCalculation (const SimFlowSto_BatteryLifeCalculation_optional& x)
      {
        this->SimFlowSto_BatteryLifeCalculation_ = x;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCalculation (::std::auto_ptr< SimFlowSto_BatteryLifeCalculation_type > x)
      {
        this->SimFlowSto_BatteryLifeCalculation_.set (x);
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_NumberCycleBins_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberCycleBins () const
      {
        return this->SimFlowSto_NumberCycleBins_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_NumberCycleBins_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberCycleBins ()
      {
        return this->SimFlowSto_NumberCycleBins_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberCycleBins (const SimFlowSto_NumberCycleBins_type& x)
      {
        this->SimFlowSto_NumberCycleBins_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_NumberCycleBins (const SimFlowSto_NumberCycleBins_optional& x)
      {
        this->SimFlowSto_NumberCycleBins_ = x;
      }

      const SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_BatteryLifeCurveName_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCurveName () const
      {
        return this->SimFlowSto_BatteryLifeCurveName_;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::SimFlowSto_BatteryLifeCurveName_optional& SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCurveName ()
      {
        return this->SimFlowSto_BatteryLifeCurveName_;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCurveName (const SimFlowSto_BatteryLifeCurveName_type& x)
      {
        this->SimFlowSto_BatteryLifeCurveName_.set (x);
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCurveName (const SimFlowSto_BatteryLifeCurveName_optional& x)
      {
        this->SimFlowSto_BatteryLifeCurveName_ = x;
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowSto_BatteryLifeCurveName (::std::auto_ptr< SimFlowSto_BatteryLifeCurveName_type > x)
      {
        this->SimFlowSto_BatteryLifeCurveName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowStorage_ElectricalStorage_BatteryBank
      //

      SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowStorage_ElectricalStorage_BatteryBank ()
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (),
        SimFlowSto_RadiativeFract_ (this),
        SimFlowSto_NumberBatteryModsinParallel_ (this),
        SimFlowSto_NumberBatteryModsinSeries_ (this),
        SimFlowSto_MaxModCap_ (this),
        SimFlowSto_InitialFractionalStateChrg_ (this),
        SimFlowSto_FractionAvailChrgCap_ (this),
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_ (this),
        SimFlowSto_FullyChrgdModOpenCircVoltage_ (this),
        SimFlowSto_FullyDischargedModOpenCircVoltage_ (this),
        SimFlowSto_VoltChangeCurveNameCharging_ (this),
        SimFlowSto_VoltChangeCurveNameDischarging_ (this),
        SimFlowSto_ModInternalElec_ (this),
        SimFlowSto_MaxModDischargingCurrent_ (this),
        SimFlowSto_ModCut_offVoltage_ (this),
        SimFlowSto_ModChrgRateLimit_ (this),
        SimFlowSto_BatteryLifeCalculation_ (this),
        SimFlowSto_NumberCycleBins_ (this),
        SimFlowSto_BatteryLifeCurveName_ (this)
      {
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowStorage_ElectricalStorage_BatteryBank (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (RefId),
        SimFlowSto_RadiativeFract_ (this),
        SimFlowSto_NumberBatteryModsinParallel_ (this),
        SimFlowSto_NumberBatteryModsinSeries_ (this),
        SimFlowSto_MaxModCap_ (this),
        SimFlowSto_InitialFractionalStateChrg_ (this),
        SimFlowSto_FractionAvailChrgCap_ (this),
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_ (this),
        SimFlowSto_FullyChrgdModOpenCircVoltage_ (this),
        SimFlowSto_FullyDischargedModOpenCircVoltage_ (this),
        SimFlowSto_VoltChangeCurveNameCharging_ (this),
        SimFlowSto_VoltChangeCurveNameDischarging_ (this),
        SimFlowSto_ModInternalElec_ (this),
        SimFlowSto_MaxModDischargingCurrent_ (this),
        SimFlowSto_ModCut_offVoltage_ (this),
        SimFlowSto_ModChrgRateLimit_ (this),
        SimFlowSto_BatteryLifeCalculation_ (this),
        SimFlowSto_NumberCycleBins_ (this),
        SimFlowSto_BatteryLifeCurveName_ (this)
      {
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowStorage_ElectricalStorage_BatteryBank (const SimFlowStorage_ElectricalStorage_BatteryBank& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (x, f, c),
        SimFlowSto_RadiativeFract_ (x.SimFlowSto_RadiativeFract_, f, this),
        SimFlowSto_NumberBatteryModsinParallel_ (x.SimFlowSto_NumberBatteryModsinParallel_, f, this),
        SimFlowSto_NumberBatteryModsinSeries_ (x.SimFlowSto_NumberBatteryModsinSeries_, f, this),
        SimFlowSto_MaxModCap_ (x.SimFlowSto_MaxModCap_, f, this),
        SimFlowSto_InitialFractionalStateChrg_ (x.SimFlowSto_InitialFractionalStateChrg_, f, this),
        SimFlowSto_FractionAvailChrgCap_ (x.SimFlowSto_FractionAvailChrgCap_, f, this),
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_ (x.SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_, f, this),
        SimFlowSto_FullyChrgdModOpenCircVoltage_ (x.SimFlowSto_FullyChrgdModOpenCircVoltage_, f, this),
        SimFlowSto_FullyDischargedModOpenCircVoltage_ (x.SimFlowSto_FullyDischargedModOpenCircVoltage_, f, this),
        SimFlowSto_VoltChangeCurveNameCharging_ (x.SimFlowSto_VoltChangeCurveNameCharging_, f, this),
        SimFlowSto_VoltChangeCurveNameDischarging_ (x.SimFlowSto_VoltChangeCurveNameDischarging_, f, this),
        SimFlowSto_ModInternalElec_ (x.SimFlowSto_ModInternalElec_, f, this),
        SimFlowSto_MaxModDischargingCurrent_ (x.SimFlowSto_MaxModDischargingCurrent_, f, this),
        SimFlowSto_ModCut_offVoltage_ (x.SimFlowSto_ModCut_offVoltage_, f, this),
        SimFlowSto_ModChrgRateLimit_ (x.SimFlowSto_ModChrgRateLimit_, f, this),
        SimFlowSto_BatteryLifeCalculation_ (x.SimFlowSto_BatteryLifeCalculation_, f, this),
        SimFlowSto_NumberCycleBins_ (x.SimFlowSto_NumberCycleBins_, f, this),
        SimFlowSto_BatteryLifeCurveName_ (x.SimFlowSto_BatteryLifeCurveName_, f, this)
      {
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::
      SimFlowStorage_ElectricalStorage_BatteryBank (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage (e, f | ::xml_schema::flags::base, c),
        SimFlowSto_RadiativeFract_ (this),
        SimFlowSto_NumberBatteryModsinParallel_ (this),
        SimFlowSto_NumberBatteryModsinSeries_ (this),
        SimFlowSto_MaxModCap_ (this),
        SimFlowSto_InitialFractionalStateChrg_ (this),
        SimFlowSto_FractionAvailChrgCap_ (this),
        SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_ (this),
        SimFlowSto_FullyChrgdModOpenCircVoltage_ (this),
        SimFlowSto_FullyDischargedModOpenCircVoltage_ (this),
        SimFlowSto_VoltChangeCurveNameCharging_ (this),
        SimFlowSto_VoltChangeCurveNameDischarging_ (this),
        SimFlowSto_ModInternalElec_ (this),
        SimFlowSto_MaxModDischargingCurrent_ (this),
        SimFlowSto_ModCut_offVoltage_ (this),
        SimFlowSto_ModChrgRateLimit_ (this),
        SimFlowSto_BatteryLifeCalculation_ (this),
        SimFlowSto_NumberCycleBins_ (this),
        SimFlowSto_BatteryLifeCurveName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowStorage_ElectricalStorage_BatteryBank::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowSto_RadiativeFract
          //
          if (n.name () == "SimFlowSto_RadiativeFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_RadiativeFract_)
            {
              this->SimFlowSto_RadiativeFract_.set (SimFlowSto_RadiativeFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_NumberBatteryModsinParallel
          //
          if (n.name () == "SimFlowSto_NumberBatteryModsinParallel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_NumberBatteryModsinParallel_)
            {
              this->SimFlowSto_NumberBatteryModsinParallel_.set (SimFlowSto_NumberBatteryModsinParallel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_NumberBatteryModsinSeries
          //
          if (n.name () == "SimFlowSto_NumberBatteryModsinSeries" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_NumberBatteryModsinSeries_)
            {
              this->SimFlowSto_NumberBatteryModsinSeries_.set (SimFlowSto_NumberBatteryModsinSeries_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_MaxModCap
          //
          if (n.name () == "SimFlowSto_MaxModCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_MaxModCap_)
            {
              this->SimFlowSto_MaxModCap_.set (SimFlowSto_MaxModCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_InitialFractionalStateChrg
          //
          if (n.name () == "SimFlowSto_InitialFractionalStateChrg" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_InitialFractionalStateChrg_)
            {
              this->SimFlowSto_InitialFractionalStateChrg_.set (SimFlowSto_InitialFractionalStateChrg_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_FractionAvailChrgCap
          //
          if (n.name () == "SimFlowSto_FractionAvailChrgCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_FractionAvailChrgCap_)
            {
              this->SimFlowSto_FractionAvailChrgCap_.set (SimFlowSto_FractionAvailChrgCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg
          //
          if (n.name () == "SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_)
            {
              this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_.set (SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_FullyChrgdModOpenCircVoltage
          //
          if (n.name () == "SimFlowSto_FullyChrgdModOpenCircVoltage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_FullyChrgdModOpenCircVoltage_)
            {
              this->SimFlowSto_FullyChrgdModOpenCircVoltage_.set (SimFlowSto_FullyChrgdModOpenCircVoltage_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_FullyDischargedModOpenCircVoltage
          //
          if (n.name () == "SimFlowSto_FullyDischargedModOpenCircVoltage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_FullyDischargedModOpenCircVoltage_)
            {
              this->SimFlowSto_FullyDischargedModOpenCircVoltage_.set (SimFlowSto_FullyDischargedModOpenCircVoltage_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_VoltChangeCurveNameCharging
          //
          if (n.name () == "SimFlowSto_VoltChangeCurveNameCharging" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_VoltChangeCurveNameCharging_type > r (
              SimFlowSto_VoltChangeCurveNameCharging_traits::create (i, f, this));

            if (!this->SimFlowSto_VoltChangeCurveNameCharging_)
            {
              this->SimFlowSto_VoltChangeCurveNameCharging_.set (r);
              continue;
            }
          }

          // SimFlowSto_VoltChangeCurveNameDischarging
          //
          if (n.name () == "SimFlowSto_VoltChangeCurveNameDischarging" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_VoltChangeCurveNameDischarging_type > r (
              SimFlowSto_VoltChangeCurveNameDischarging_traits::create (i, f, this));

            if (!this->SimFlowSto_VoltChangeCurveNameDischarging_)
            {
              this->SimFlowSto_VoltChangeCurveNameDischarging_.set (r);
              continue;
            }
          }

          // SimFlowSto_ModInternalElec
          //
          if (n.name () == "SimFlowSto_ModInternalElec" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_ModInternalElec_)
            {
              this->SimFlowSto_ModInternalElec_.set (SimFlowSto_ModInternalElec_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_MaxModDischargingCurrent
          //
          if (n.name () == "SimFlowSto_MaxModDischargingCurrent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_MaxModDischargingCurrent_)
            {
              this->SimFlowSto_MaxModDischargingCurrent_.set (SimFlowSto_MaxModDischargingCurrent_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_ModCut_offVoltage
          //
          if (n.name () == "SimFlowSto_ModCut_offVoltage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_ModCut_offVoltage_)
            {
              this->SimFlowSto_ModCut_offVoltage_.set (SimFlowSto_ModCut_offVoltage_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_ModChrgRateLimit
          //
          if (n.name () == "SimFlowSto_ModChrgRateLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_ModChrgRateLimit_)
            {
              this->SimFlowSto_ModChrgRateLimit_.set (SimFlowSto_ModChrgRateLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_BatteryLifeCalculation
          //
          if (n.name () == "SimFlowSto_BatteryLifeCalculation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_BatteryLifeCalculation_type > r (
              SimFlowSto_BatteryLifeCalculation_traits::create (i, f, this));

            if (!this->SimFlowSto_BatteryLifeCalculation_)
            {
              this->SimFlowSto_BatteryLifeCalculation_.set (r);
              continue;
            }
          }

          // SimFlowSto_NumberCycleBins
          //
          if (n.name () == "SimFlowSto_NumberCycleBins" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_NumberCycleBins_)
            {
              this->SimFlowSto_NumberCycleBins_.set (SimFlowSto_NumberCycleBins_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_BatteryLifeCurveName
          //
          if (n.name () == "SimFlowSto_BatteryLifeCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_BatteryLifeCurveName_type > r (
              SimFlowSto_BatteryLifeCurveName_traits::create (i, f, this));

            if (!this->SimFlowSto_BatteryLifeCurveName_)
            {
              this->SimFlowSto_BatteryLifeCurveName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowStorage_ElectricalStorage_BatteryBank* SimFlowStorage_ElectricalStorage_BatteryBank::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowStorage_ElectricalStorage_BatteryBank (*this, f, c);
      }

      SimFlowStorage_ElectricalStorage_BatteryBank& SimFlowStorage_ElectricalStorage_BatteryBank::
      operator= (const SimFlowStorage_ElectricalStorage_BatteryBank& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowStorage_ElectricalStorage& > (*this) = x;
          this->SimFlowSto_RadiativeFract_ = x.SimFlowSto_RadiativeFract_;
          this->SimFlowSto_NumberBatteryModsinParallel_ = x.SimFlowSto_NumberBatteryModsinParallel_;
          this->SimFlowSto_NumberBatteryModsinSeries_ = x.SimFlowSto_NumberBatteryModsinSeries_;
          this->SimFlowSto_MaxModCap_ = x.SimFlowSto_MaxModCap_;
          this->SimFlowSto_InitialFractionalStateChrg_ = x.SimFlowSto_InitialFractionalStateChrg_;
          this->SimFlowSto_FractionAvailChrgCap_ = x.SimFlowSto_FractionAvailChrgCap_;
          this->SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_ = x.SimFlowSto_ChangeRatefromBoundChrgtoAvailChrg_;
          this->SimFlowSto_FullyChrgdModOpenCircVoltage_ = x.SimFlowSto_FullyChrgdModOpenCircVoltage_;
          this->SimFlowSto_FullyDischargedModOpenCircVoltage_ = x.SimFlowSto_FullyDischargedModOpenCircVoltage_;
          this->SimFlowSto_VoltChangeCurveNameCharging_ = x.SimFlowSto_VoltChangeCurveNameCharging_;
          this->SimFlowSto_VoltChangeCurveNameDischarging_ = x.SimFlowSto_VoltChangeCurveNameDischarging_;
          this->SimFlowSto_ModInternalElec_ = x.SimFlowSto_ModInternalElec_;
          this->SimFlowSto_MaxModDischargingCurrent_ = x.SimFlowSto_MaxModDischargingCurrent_;
          this->SimFlowSto_ModCut_offVoltage_ = x.SimFlowSto_ModCut_offVoltage_;
          this->SimFlowSto_ModChrgRateLimit_ = x.SimFlowSto_ModChrgRateLimit_;
          this->SimFlowSto_BatteryLifeCalculation_ = x.SimFlowSto_BatteryLifeCalculation_;
          this->SimFlowSto_NumberCycleBins_ = x.SimFlowSto_NumberCycleBins_;
          this->SimFlowSto_BatteryLifeCurveName_ = x.SimFlowSto_BatteryLifeCurveName_;
        }

        return *this;
      }

      SimFlowStorage_ElectricalStorage_BatteryBank::
      ~SimFlowStorage_ElectricalStorage_BatteryBank ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

