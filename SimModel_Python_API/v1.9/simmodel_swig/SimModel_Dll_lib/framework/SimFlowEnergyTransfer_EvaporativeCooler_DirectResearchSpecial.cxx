// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial
      // 

      const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_CoolerEffect_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_CoolerEffect () const
      {
        return this->SimFlowEnergyTrans_CoolerEffect_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_CoolerEffect_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_CoolerEffect ()
      {
        return this->SimFlowEnergyTrans_CoolerEffect_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_CoolerEffect (const SimFlowEnergyTrans_CoolerEffect_type& x)
      {
        this->SimFlowEnergyTrans_CoolerEffect_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_CoolerEffect (const SimFlowEnergyTrans_CoolerEffect_optional& x)
      {
        this->SimFlowEnergyTrans_CoolerEffect_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_SensorNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_SensorNodeName () const
      {
        return this->SimFlowEnergyTrans_SensorNodeName_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_SensorNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_SensorNodeName ()
      {
        return this->SimFlowEnergyTrans_SensorNodeName_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_SensorNodeName (const SimFlowEnergyTrans_SensorNodeName_type& x)
      {
        this->SimFlowEnergyTrans_SensorNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_SensorNodeName (const SimFlowEnergyTrans_SensorNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_SensorNodeName_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_SensorNodeName (::std::auto_ptr< SimFlowEnergyTrans_SensorNodeName_type > x)
      {
        this->SimFlowEnergyTrans_SensorNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_DriftLossFract_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_DriftLossFract () const
      {
        return this->SimFlowEnergyTrans_DriftLossFract_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_DriftLossFract_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_DriftLossFract ()
      {
        return this->SimFlowEnergyTrans_DriftLossFract_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_DriftLossFract (const SimFlowEnergyTrans_DriftLossFract_type& x)
      {
        this->SimFlowEnergyTrans_DriftLossFract_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_DriftLossFract (const SimFlowEnergyTrans_DriftLossFract_optional& x)
      {
        this->SimFlowEnergyTrans_DriftLossFract_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_BlowdownConcentrationRatio () const
      {
        return this->SimFlowEnergyTrans_BlowdownConcentrationRatio_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_BlowdownConcentrationRatio ()
      {
        return this->SimFlowEnergyTrans_BlowdownConcentrationRatio_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_BlowdownConcentrationRatio (const SimFlowEnergyTrans_BlowdownConcentrationRatio_type& x)
      {
        this->SimFlowEnergyTrans_BlowdownConcentrationRatio_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTrans_BlowdownConcentrationRatio (const SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& x)
      {
        this->SimFlowEnergyTrans_BlowdownConcentrationRatio_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial
      //

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CoolerEffect_ (this),
        SimFlowEnergyTrans_SensorNodeName_ (this),
        SimFlowEnergyTrans_DriftLossFract_ (this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (this)
      {
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (RefId),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CoolerEffect_ (this),
        SimFlowEnergyTrans_SensorNodeName_ (this),
        SimFlowEnergyTrans_DriftLossFract_ (this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (this)
      {
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial (const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial& x,
                                                                     ::xml_schema::flags f,
                                                                     ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (x, f, c),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_CoolerEffect_ (x.SimFlowEnergyTrans_CoolerEffect_, f, this),
        SimFlowEnergyTrans_SensorNodeName_ (x.SimFlowEnergyTrans_SensorNodeName_, f, this),
        SimFlowEnergyTrans_DriftLossFract_ (x.SimFlowEnergyTrans_DriftLossFract_, f, this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (x.SimFlowEnergyTrans_BlowdownConcentrationRatio_, f, this)
      {
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial (const ::xercesc::DOMElement& e,
                                                                     ::xml_schema::flags f,
                                                                     ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CoolerEffect_ (this),
        SimFlowEnergyTrans_SensorNodeName_ (this),
        SimFlowEnergyTrans_DriftLossFract_ (this),
        SimFlowEnergyTrans_BlowdownConcentrationRatio_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CoolerEffect
          //
          if (n.name () == "SimFlowEnergyTrans_CoolerEffect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_CoolerEffect_)
            {
              this->SimFlowEnergyTrans_CoolerEffect_.set (SimFlowEnergyTrans_CoolerEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SensorNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_SensorNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SensorNodeName_type > r (
              SimFlowEnergyTrans_SensorNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SensorNodeName_)
            {
              this->SimFlowEnergyTrans_SensorNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DriftLossFract
          //
          if (n.name () == "SimFlowEnergyTrans_DriftLossFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DriftLossFract_)
            {
              this->SimFlowEnergyTrans_DriftLossFract_.set (SimFlowEnergyTrans_DriftLossFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BlowdownConcentrationRatio
          //
          if (n.name () == "SimFlowEnergyTrans_BlowdownConcentrationRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BlowdownConcentrationRatio_)
            {
              this->SimFlowEnergyTrans_BlowdownConcentrationRatio_.set (SimFlowEnergyTrans_BlowdownConcentrationRatio_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial* SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial (*this, f, c);
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial& SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      operator= (const SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler& > (*this) = x;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_CoolerEffect_ = x.SimFlowEnergyTrans_CoolerEffect_;
          this->SimFlowEnergyTrans_SensorNodeName_ = x.SimFlowEnergyTrans_SensorNodeName_;
          this->SimFlowEnergyTrans_DriftLossFract_ = x.SimFlowEnergyTrans_DriftLossFract_;
          this->SimFlowEnergyTrans_BlowdownConcentrationRatio_ = x.SimFlowEnergyTrans_BlowdownConcentrationRatio_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial::
      ~SimFlowEnergyTransfer_EvaporativeCooler_DirectResearchSpecial ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

