// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_COMPOUND_EQMT_UNITARY_LOOP_EQMT_DEFAULT_HXX
#define SIM_FLOW_COMPOUND_EQMT_UNITARY_LOOP_EQMT_DEFAULT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowCompoundEqmt_UnitaryLoopEqmt_Default;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowcompoundeqmt_unitaryloopeqmt.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowCompoundEqmt_UnitaryLoopEqmt_Default: public ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt
      {
        public:
        // SimFlowCompEqmt_Name
        //
        typedef ::xml_schema::string SimFlowCompEqmt_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_Name_type > SimFlowCompEqmt_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_Name_type, char > SimFlowCompEqmt_Name_traits;

        const SimFlowCompEqmt_Name_optional&
        SimFlowCompEqmt_Name () const;

        SimFlowCompEqmt_Name_optional&
        SimFlowCompEqmt_Name ();

        void
        SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_type& x);

        void
        SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_optional& x);

        void
        SimFlowCompEqmt_Name (::std::auto_ptr< SimFlowCompEqmt_Name_type > p);

        // SimFlowCompEqmt_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AvailSchedName_type > SimFlowCompEqmt_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AvailSchedName_type, char > SimFlowCompEqmt_AvailSchedName_traits;

        const SimFlowCompEqmt_AvailSchedName_optional&
        SimFlowCompEqmt_AvailSchedName () const;

        SimFlowCompEqmt_AvailSchedName_optional&
        SimFlowCompEqmt_AvailSchedName ();

        void
        SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x);

        void
        SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x);

        void
        SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > p);

        // SimFlowCompEqmt_DehumidCntlType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_DehumidCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DehumidCntlType_type > SimFlowCompEqmt_DehumidCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DehumidCntlType_type, char > SimFlowCompEqmt_DehumidCntlType_traits;

        const SimFlowCompEqmt_DehumidCntlType_optional&
        SimFlowCompEqmt_DehumidCntlType () const;

        SimFlowCompEqmt_DehumidCntlType_optional&
        SimFlowCompEqmt_DehumidCntlType ();

        void
        SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_type& x);

        void
        SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_optional& x);

        void
        SimFlowCompEqmt_DehumidCntlType (::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > p);

        // SimFlowCompEqmt_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AirInNodeName_type > SimFlowCompEqmt_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AirInNodeName_type, char > SimFlowCompEqmt_AirInNodeName_traits;

        const SimFlowCompEqmt_AirInNodeName_optional&
        SimFlowCompEqmt_AirInNodeName () const;

        SimFlowCompEqmt_AirInNodeName_optional&
        SimFlowCompEqmt_AirInNodeName ();

        void
        SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_type& x);

        void
        SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_optional& x);

        void
        SimFlowCompEqmt_AirInNodeName (::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > p);

        // SimFlowCompEqmt_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AirOutNodeName_type > SimFlowCompEqmt_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AirOutNodeName_type, char > SimFlowCompEqmt_AirOutNodeName_traits;

        const SimFlowCompEqmt_AirOutNodeName_optional&
        SimFlowCompEqmt_AirOutNodeName () const;

        SimFlowCompEqmt_AirOutNodeName_optional&
        SimFlowCompEqmt_AirOutNodeName ();

        void
        SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_type& x);

        void
        SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_optional& x);

        void
        SimFlowCompEqmt_AirOutNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > p);

        // SimFlowCompEqmt_CoolingCoilObjType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_CoolingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CoolingCoilObjType_type > SimFlowCompEqmt_CoolingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CoolingCoilObjType_type, char > SimFlowCompEqmt_CoolingCoilObjType_traits;

        const SimFlowCompEqmt_CoolingCoilObjType_optional&
        SimFlowCompEqmt_CoolingCoilObjType () const;

        SimFlowCompEqmt_CoolingCoilObjType_optional&
        SimFlowCompEqmt_CoolingCoilObjType ();

        void
        SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_type& x);

        void
        SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_optional& x);

        void
        SimFlowCompEqmt_CoolingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > p);

        // SimFlowCompEqmt_CoolingCoilName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_CoolingCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CoolingCoilName_type > SimFlowCompEqmt_CoolingCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CoolingCoilName_type, char > SimFlowCompEqmt_CoolingCoilName_traits;

        const SimFlowCompEqmt_CoolingCoilName_optional&
        SimFlowCompEqmt_CoolingCoilName () const;

        SimFlowCompEqmt_CoolingCoilName_optional&
        SimFlowCompEqmt_CoolingCoilName ();

        void
        SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_type& x);

        void
        SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_optional& x);

        void
        SimFlowCompEqmt_CoolingCoilName (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > p);

        // SimFlowCompEqmt_HeatingCoilObjType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_HeatingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatingCoilObjType_type > SimFlowCompEqmt_HeatingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatingCoilObjType_type, char > SimFlowCompEqmt_HeatingCoilObjType_traits;

        const SimFlowCompEqmt_HeatingCoilObjType_optional&
        SimFlowCompEqmt_HeatingCoilObjType () const;

        SimFlowCompEqmt_HeatingCoilObjType_optional&
        SimFlowCompEqmt_HeatingCoilObjType ();

        void
        SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_type& x);

        void
        SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_optional& x);

        void
        SimFlowCompEqmt_HeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > p);

        // SimFlowCompEqmt_HeatingCoilName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_HeatingCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatingCoilName_type > SimFlowCompEqmt_HeatingCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatingCoilName_type, char > SimFlowCompEqmt_HeatingCoilName_traits;

        const SimFlowCompEqmt_HeatingCoilName_optional&
        SimFlowCompEqmt_HeatingCoilName () const;

        SimFlowCompEqmt_HeatingCoilName_optional&
        SimFlowCompEqmt_HeatingCoilName ();

        void
        SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_type& x);

        void
        SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_optional& x);

        void
        SimFlowCompEqmt_HeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > p);

        // SimFlowCompEqmt_SupplyAirFanOperatModeSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type, char > SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_traits;

        const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional&
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName () const;

        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional&
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName ();

        void
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type& x);

        void
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& x);

        void
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > p);

        // SimFlowCompEqmt_FanPlacement
        //
        typedef ::xml_schema::string SimFlowCompEqmt_FanPlacement_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_FanPlacement_type > SimFlowCompEqmt_FanPlacement_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_FanPlacement_type, char > SimFlowCompEqmt_FanPlacement_traits;

        const SimFlowCompEqmt_FanPlacement_optional&
        SimFlowCompEqmt_FanPlacement () const;

        SimFlowCompEqmt_FanPlacement_optional&
        SimFlowCompEqmt_FanPlacement ();

        void
        SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_type& x);

        void
        SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_optional& x);

        void
        SimFlowCompEqmt_FanPlacement (::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > p);

        // SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_type > SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_traits;

        const SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional&
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp () const;

        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional&
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp ();

        void
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional& x);

        // SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_type > SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_traits;

        const SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional&
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp () const;

        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional&
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp ();

        void
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional& x);

        // SimFlowCompEqmt_SupplementalHeatingCoilObjType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupplementalHeatingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplementalHeatingCoilObjType_type > SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplementalHeatingCoilObjType_type, char > SimFlowCompEqmt_SupplementalHeatingCoilObjType_traits;

        const SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional&
        SimFlowCompEqmt_SupplementalHeatingCoilObjType () const;

        SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional&
        SimFlowCompEqmt_SupplementalHeatingCoilObjType ();

        void
        SimFlowCompEqmt_SupplementalHeatingCoilObjType (const SimFlowCompEqmt_SupplementalHeatingCoilObjType_type& x);

        void
        SimFlowCompEqmt_SupplementalHeatingCoilObjType (const SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional& x);

        void
        SimFlowCompEqmt_SupplementalHeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_SupplementalHeatingCoilObjType_type > p);

        // SimFlowCompEqmt_SupplementalHeatingCoilName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_SupplementalHeatingCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplementalHeatingCoilName_type > SimFlowCompEqmt_SupplementalHeatingCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplementalHeatingCoilName_type, char > SimFlowCompEqmt_SupplementalHeatingCoilName_traits;

        const SimFlowCompEqmt_SupplementalHeatingCoilName_optional&
        SimFlowCompEqmt_SupplementalHeatingCoilName () const;

        SimFlowCompEqmt_SupplementalHeatingCoilName_optional&
        SimFlowCompEqmt_SupplementalHeatingCoilName ();

        void
        SimFlowCompEqmt_SupplementalHeatingCoilName (const SimFlowCompEqmt_SupplementalHeatingCoilName_type& x);

        void
        SimFlowCompEqmt_SupplementalHeatingCoilName (const SimFlowCompEqmt_SupplementalHeatingCoilName_optional& x);

        void
        SimFlowCompEqmt_SupplementalHeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_SupplementalHeatingCoilName_type > p);

        // SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_type > SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_traits;

        const SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional&
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp () const;

        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional&
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp ();

        void
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp (const SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_type& x);

        void
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp (const SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional& x);

        // SimFlowCompEqmt_MaxCyclingRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxCyclingRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxCyclingRate_type > SimFlowCompEqmt_MaxCyclingRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxCyclingRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxCyclingRate_traits;

        const SimFlowCompEqmt_MaxCyclingRate_optional&
        SimFlowCompEqmt_MaxCyclingRate () const;

        SimFlowCompEqmt_MaxCyclingRate_optional&
        SimFlowCompEqmt_MaxCyclingRate ();

        void
        SimFlowCompEqmt_MaxCyclingRate (const SimFlowCompEqmt_MaxCyclingRate_type& x);

        void
        SimFlowCompEqmt_MaxCyclingRate (const SimFlowCompEqmt_MaxCyclingRate_optional& x);

        // SimFlowCompEqmt_HeatPumpTimeConst
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_HeatPumpTimeConst_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatPumpTimeConst_type > SimFlowCompEqmt_HeatPumpTimeConst_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatPumpTimeConst_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_HeatPumpTimeConst_traits;

        const SimFlowCompEqmt_HeatPumpTimeConst_optional&
        SimFlowCompEqmt_HeatPumpTimeConst () const;

        SimFlowCompEqmt_HeatPumpTimeConst_optional&
        SimFlowCompEqmt_HeatPumpTimeConst ();

        void
        SimFlowCompEqmt_HeatPumpTimeConst (const SimFlowCompEqmt_HeatPumpTimeConst_type& x);

        void
        SimFlowCompEqmt_HeatPumpTimeConst (const SimFlowCompEqmt_HeatPumpTimeConst_optional& x);

        // SimFlowCompEqmt_FractOnCyclePwrUse
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_FractOnCyclePwrUse_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_FractOnCyclePwrUse_type > SimFlowCompEqmt_FractOnCyclePwrUse_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_FractOnCyclePwrUse_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_FractOnCyclePwrUse_traits;

        const SimFlowCompEqmt_FractOnCyclePwrUse_optional&
        SimFlowCompEqmt_FractOnCyclePwrUse () const;

        SimFlowCompEqmt_FractOnCyclePwrUse_optional&
        SimFlowCompEqmt_FractOnCyclePwrUse ();

        void
        SimFlowCompEqmt_FractOnCyclePwrUse (const SimFlowCompEqmt_FractOnCyclePwrUse_type& x);

        void
        SimFlowCompEqmt_FractOnCyclePwrUse (const SimFlowCompEqmt_FractOnCyclePwrUse_optional& x);

        // SimFlowCompEqmt_HeatPumpFanDelayTime
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_HeatPumpFanDelayTime_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatPumpFanDelayTime_type > SimFlowCompEqmt_HeatPumpFanDelayTime_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatPumpFanDelayTime_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_HeatPumpFanDelayTime_traits;

        const SimFlowCompEqmt_HeatPumpFanDelayTime_optional&
        SimFlowCompEqmt_HeatPumpFanDelayTime () const;

        SimFlowCompEqmt_HeatPumpFanDelayTime_optional&
        SimFlowCompEqmt_HeatPumpFanDelayTime ();

        void
        SimFlowCompEqmt_HeatPumpFanDelayTime (const SimFlowCompEqmt_HeatPumpFanDelayTime_type& x);

        void
        SimFlowCompEqmt_HeatPumpFanDelayTime (const SimFlowCompEqmt_HeatPumpFanDelayTime_optional& x);

        // SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type > SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type, char > SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_traits;

        const SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional&
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName () const;

        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional&
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName ();

        void
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName (const SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type& x);

        void
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName (const SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional& x);

        void
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type > p);

        // SimFlowCompEqmt_SupplyFanName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_SupplyFanName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyFanName_type > SimFlowCompEqmt_SupplyFanName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyFanName_type, char > SimFlowCompEqmt_SupplyFanName_traits;

        const SimFlowCompEqmt_SupplyFanName_optional&
        SimFlowCompEqmt_SupplyFanName () const;

        SimFlowCompEqmt_SupplyFanName_optional&
        SimFlowCompEqmt_SupplyFanName ();

        void
        SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_type& x);

        void
        SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_optional& x);

        void
        SimFlowCompEqmt_SupplyFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyFanName_type > p);

        // SimFlowCompEqmt_MaxSupplyAirTemp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxSupplyAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxSupplyAirTemp_type > SimFlowCompEqmt_MaxSupplyAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxSupplyAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxSupplyAirTemp_traits;

        const SimFlowCompEqmt_MaxSupplyAirTemp_optional&
        SimFlowCompEqmt_MaxSupplyAirTemp () const;

        SimFlowCompEqmt_MaxSupplyAirTemp_optional&
        SimFlowCompEqmt_MaxSupplyAirTemp ();

        void
        SimFlowCompEqmt_MaxSupplyAirTemp (const SimFlowCompEqmt_MaxSupplyAirTemp_type& x);

        void
        SimFlowCompEqmt_MaxSupplyAirTemp (const SimFlowCompEqmt_MaxSupplyAirTemp_optional& x);

        // SimFlowCompEqmt_CntllingZoneOrThermostatLocation
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type > SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type, char > SimFlowCompEqmt_CntllingZoneOrThermostatLocation_traits;

        const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional&
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation () const;

        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional&
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation ();

        void
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation (const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type& x);

        void
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation (const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& x);

        void
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation (::std::auto_ptr< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type > p);

        // SimFlowCompEqmt_SupFanObjectType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupFanObjectType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupFanObjectType_type > SimFlowCompEqmt_SupFanObjectType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupFanObjectType_type, char > SimFlowCompEqmt_SupFanObjectType_traits;

        const SimFlowCompEqmt_SupFanObjectType_optional&
        SimFlowCompEqmt_SupFanObjectType () const;

        SimFlowCompEqmt_SupFanObjectType_optional&
        SimFlowCompEqmt_SupFanObjectType ();

        void
        SimFlowCompEqmt_SupFanObjectType (const SimFlowCompEqmt_SupFanObjectType_type& x);

        void
        SimFlowCompEqmt_SupFanObjectType (const SimFlowCompEqmt_SupFanObjectType_optional& x);

        void
        SimFlowCompEqmt_SupFanObjectType (::std::auto_ptr< SimFlowCompEqmt_SupFanObjectType_type > p);

        // SimFlowCompEqmt_DesignHeatRecovWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_type > SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_traits;

        const SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional&
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate () const;

        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional&
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate ();

        void
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate (const SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_type& x);

        void
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate (const SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional& x);

        // SimFlowCompEqmt_MaxTempForHeatRecov
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxTempForHeatRecov_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxTempForHeatRecov_type > SimFlowCompEqmt_MaxTempForHeatRecov_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxTempForHeatRecov_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxTempForHeatRecov_traits;

        const SimFlowCompEqmt_MaxTempForHeatRecov_optional&
        SimFlowCompEqmt_MaxTempForHeatRecov () const;

        SimFlowCompEqmt_MaxTempForHeatRecov_optional&
        SimFlowCompEqmt_MaxTempForHeatRecov ();

        void
        SimFlowCompEqmt_MaxTempForHeatRecov (const SimFlowCompEqmt_MaxTempForHeatRecov_type& x);

        void
        SimFlowCompEqmt_MaxTempForHeatRecov (const SimFlowCompEqmt_MaxTempForHeatRecov_optional& x);

        // SimFlowCompEqmt_HeatRecovWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_HeatRecovWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatRecovWaterInletNodeName_type > SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatRecovWaterInletNodeName_type, char > SimFlowCompEqmt_HeatRecovWaterInletNodeName_traits;

        const SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional&
        SimFlowCompEqmt_HeatRecovWaterInletNodeName () const;

        SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional&
        SimFlowCompEqmt_HeatRecovWaterInletNodeName ();

        void
        SimFlowCompEqmt_HeatRecovWaterInletNodeName (const SimFlowCompEqmt_HeatRecovWaterInletNodeName_type& x);

        void
        SimFlowCompEqmt_HeatRecovWaterInletNodeName (const SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional& x);

        void
        SimFlowCompEqmt_HeatRecovWaterInletNodeName (::std::auto_ptr< SimFlowCompEqmt_HeatRecovWaterInletNodeName_type > p);

        // SimFlowCompEqmt_HeatRecovWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type > SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type, char > SimFlowCompEqmt_HeatRecovWaterOutletNodeName_traits;

        const SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional&
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName () const;

        SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional&
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName ();

        void
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName (const SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type& x);

        void
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName (const SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional& x);

        void
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type > p);

        // SimFlowCompEqmt_CntlType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_CntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CntlType_type > SimFlowCompEqmt_CntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CntlType_type, char > SimFlowCompEqmt_CntlType_traits;

        const SimFlowCompEqmt_CntlType_optional&
        SimFlowCompEqmt_CntlType () const;

        SimFlowCompEqmt_CntlType_optional&
        SimFlowCompEqmt_CntlType ();

        void
        SimFlowCompEqmt_CntlType (const SimFlowCompEqmt_CntlType_type& x);

        void
        SimFlowCompEqmt_CntlType (const SimFlowCompEqmt_CntlType_optional& x);

        void
        SimFlowCompEqmt_CntlType (::std::auto_ptr< SimFlowCompEqmt_CntlType_type > p);

        // SimFlowCompEqmt_DXHeatCoilSizingRatio
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_DXHeatCoilSizingRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DXHeatCoilSizingRatio_type > SimFlowCompEqmt_DXHeatCoilSizingRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DXHeatCoilSizingRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_DXHeatCoilSizingRatio_traits;

        const SimFlowCompEqmt_DXHeatCoilSizingRatio_optional&
        SimFlowCompEqmt_DXHeatCoilSizingRatio () const;

        SimFlowCompEqmt_DXHeatCoilSizingRatio_optional&
        SimFlowCompEqmt_DXHeatCoilSizingRatio ();

        void
        SimFlowCompEqmt_DXHeatCoilSizingRatio (const SimFlowCompEqmt_DXHeatCoilSizingRatio_type& x);

        void
        SimFlowCompEqmt_DXHeatCoilSizingRatio (const SimFlowCompEqmt_DXHeatCoilSizingRatio_optional& x);

        // SimFlowCompEqmt_UseDOASDXCoolCoil
        //
        typedef ::xml_schema::string SimFlowCompEqmt_UseDOASDXCoolCoil_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_UseDOASDXCoolCoil_type > SimFlowCompEqmt_UseDOASDXCoolCoil_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_UseDOASDXCoolCoil_type, char > SimFlowCompEqmt_UseDOASDXCoolCoil_traits;

        const SimFlowCompEqmt_UseDOASDXCoolCoil_optional&
        SimFlowCompEqmt_UseDOASDXCoolCoil () const;

        SimFlowCompEqmt_UseDOASDXCoolCoil_optional&
        SimFlowCompEqmt_UseDOASDXCoolCoil ();

        void
        SimFlowCompEqmt_UseDOASDXCoolCoil (const SimFlowCompEqmt_UseDOASDXCoolCoil_type& x);

        void
        SimFlowCompEqmt_UseDOASDXCoolCoil (const SimFlowCompEqmt_UseDOASDXCoolCoil_optional& x);

        void
        SimFlowCompEqmt_UseDOASDXCoolCoil (::std::auto_ptr< SimFlowCompEqmt_UseDOASDXCoolCoil_type > p);

        // SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_type > SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_traits;

        const SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional&
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp () const;

        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional&
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp ();

        void
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp (const SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_type& x);

        void
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp (const SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional& x);

        // SimFlowCompEqmt_LatentLoadCntrl
        //
        typedef ::xml_schema::string SimFlowCompEqmt_LatentLoadCntrl_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_LatentLoadCntrl_type > SimFlowCompEqmt_LatentLoadCntrl_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_LatentLoadCntrl_type, char > SimFlowCompEqmt_LatentLoadCntrl_traits;

        const SimFlowCompEqmt_LatentLoadCntrl_optional&
        SimFlowCompEqmt_LatentLoadCntrl () const;

        SimFlowCompEqmt_LatentLoadCntrl_optional&
        SimFlowCompEqmt_LatentLoadCntrl ();

        void
        SimFlowCompEqmt_LatentLoadCntrl (const SimFlowCompEqmt_LatentLoadCntrl_type& x);

        void
        SimFlowCompEqmt_LatentLoadCntrl (const SimFlowCompEqmt_LatentLoadCntrl_optional& x);

        void
        SimFlowCompEqmt_LatentLoadCntrl (::std::auto_ptr< SimFlowCompEqmt_LatentLoadCntrl_type > p);

        // SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type > SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type, char > SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_traits;

        const SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional&
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps () const;

        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional&
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps ();

        void
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type > p);

        // SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_type > SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_traits;

        const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional&
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps () const;

        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional&
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps ();

        void
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional& x);

        // SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_type > SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_traits;

        const SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional&
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate () const;

        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional&
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate ();

        void
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_type& x);

        void
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional& x);

        // SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_type > SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_traits;

        const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional&
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps () const;

        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional&
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps ();

        void
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_type& x);

        void
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional& x);

        // SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type > SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type, char > SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_traits;

        const SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional&
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps () const;

        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional&
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps ();

        void
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps (const SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type& x);

        void
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps (const SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional& x);

        void
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps (::std::auto_ptr< SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type > p);

        // SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_type > SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_traits;

        const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional&
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps () const;

        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional&
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps ();

        void
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional& x);

        // SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_type > SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_traits;

        const SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional&
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate () const;

        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional&
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate ();

        void
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_type& x);

        void
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional& x);

        // SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_type > SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_traits;

        const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional&
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps () const;

        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional&
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps ();

        void
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_type& x);

        void
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional& x);

        // SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type > SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type, char > SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_traits;

        const SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional&
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq () const;

        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional&
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq ();

        void
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type > p);

        // SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_type > SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_traits;

        const SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional&
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq () const;

        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional&
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq ();

        void
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional& x);

        // SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_type > SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_traits;

        const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional&
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq () const;

        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional&
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq ();

        void
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_type& x);

        void
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional& x);

        // SimFlowCompEqmt_AncilliaryOn_CycleElecPower
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_AncilliaryOn_CycleElecPower_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AncilliaryOn_CycleElecPower_type > SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AncilliaryOn_CycleElecPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_AncilliaryOn_CycleElecPower_traits;

        const SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional&
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower () const;

        SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional&
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower ();

        void
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower (const SimFlowCompEqmt_AncilliaryOn_CycleElecPower_type& x);

        void
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower (const SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional& x);

        // SimFlowCompEqmt_AncilliaryOff_CycleElecPower
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_AncilliaryOff_CycleElecPower_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AncilliaryOff_CycleElecPower_type > SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AncilliaryOff_CycleElecPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_AncilliaryOff_CycleElecPower_traits;

        const SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional&
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower () const;

        SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional&
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower ();

        void
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower (const SimFlowCompEqmt_AncilliaryOff_CycleElecPower_type& x);

        void
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower (const SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional& x);

        // SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type > SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type, char > SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_traits;

        const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional&
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType () const;

        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional&
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType ();

        void
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type& x);

        void
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional& x);

        void
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType (::std::auto_ptr< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type > p);

        // SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type > SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type, char > SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_traits;

        const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional&
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName () const;

        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional&
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName ();

        void
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type& x);

        void
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional& x);

        void
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName (::std::auto_ptr< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type > p);

        // UnitarySystemPerformance_HeatPump_Multispeed_Name
        //
        typedef ::xml_schema::string UnitarySystemPerformance_HeatPump_Multispeed_Name_type;
        typedef ::xsd::cxx::tree::optional< UnitarySystemPerformance_HeatPump_Multispeed_Name_type > UnitarySystemPerformance_HeatPump_Multispeed_Name_optional;
        typedef ::xsd::cxx::tree::traits< UnitarySystemPerformance_HeatPump_Multispeed_Name_type, char > UnitarySystemPerformance_HeatPump_Multispeed_Name_traits;

        const UnitarySystemPerformance_HeatPump_Multispeed_Name_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_Name () const;

        UnitarySystemPerformance_HeatPump_Multispeed_Name_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_Name ();

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Name (const UnitarySystemPerformance_HeatPump_Multispeed_Name_type& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Name (const UnitarySystemPerformance_HeatPump_Multispeed_Name_optional& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Name (::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Name_type > p);

        // UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating
        //
        typedef ::xml_schema::int_ UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_type;
        typedef ::xsd::cxx::tree::optional< UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_type > UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional;
        typedef ::xsd::cxx::tree::traits< UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_type, char > UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_traits;

        const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating () const;

        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating ();

        void
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_type& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional& x);

        // UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling
        //
        typedef ::xml_schema::int_ UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_type;
        typedef ::xsd::cxx::tree::optional< UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_type > UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional;
        typedef ::xsd::cxx::tree::traits< UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_type, char > UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_traits;

        const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling () const;

        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling ();

        void
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_type& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional& x);

        // UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps
        //
        typedef ::schema::simxml::SimModelCore::doubleList UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type;
        typedef ::xsd::cxx::tree::optional< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type > UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional;
        typedef ::xsd::cxx::tree::traits< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type, char > UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_traits;

        const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps () const;

        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps ();

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps (::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type > p);

        // UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps
        //
        typedef ::schema::simxml::SimModelCore::doubleList UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type;
        typedef ::xsd::cxx::tree::optional< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type > UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional;
        typedef ::xsd::cxx::tree::traits< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type, char > UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_traits;

        const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps () const;

        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional&
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps ();

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional& x);

        void
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps (::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type > p);

        // Constructors.
        //
        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default ();

        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const RefId_type&);

        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        virtual SimFlowCompoundEqmt_UnitaryLoopEqmt_Default*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowCompoundEqmt_UnitaryLoopEqmt_Default&
        operator= (const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default& x);

        virtual 
        ~SimFlowCompoundEqmt_UnitaryLoopEqmt_Default ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowCompEqmt_Name_optional SimFlowCompEqmt_Name_;
        SimFlowCompEqmt_AvailSchedName_optional SimFlowCompEqmt_AvailSchedName_;
        SimFlowCompEqmt_DehumidCntlType_optional SimFlowCompEqmt_DehumidCntlType_;
        SimFlowCompEqmt_AirInNodeName_optional SimFlowCompEqmt_AirInNodeName_;
        SimFlowCompEqmt_AirOutNodeName_optional SimFlowCompEqmt_AirOutNodeName_;
        SimFlowCompEqmt_CoolingCoilObjType_optional SimFlowCompEqmt_CoolingCoilObjType_;
        SimFlowCompEqmt_CoolingCoilName_optional SimFlowCompEqmt_CoolingCoilName_;
        SimFlowCompEqmt_HeatingCoilObjType_optional SimFlowCompEqmt_HeatingCoilObjType_;
        SimFlowCompEqmt_HeatingCoilName_optional SimFlowCompEqmt_HeatingCoilName_;
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
        SimFlowCompEqmt_FanPlacement_optional SimFlowCompEqmt_FanPlacement_;
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_;
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_;
        SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional SimFlowCompEqmt_SupplementalHeatingCoilObjType_;
        SimFlowCompEqmt_SupplementalHeatingCoilName_optional SimFlowCompEqmt_SupplementalHeatingCoilName_;
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_;
        SimFlowCompEqmt_MaxCyclingRate_optional SimFlowCompEqmt_MaxCyclingRate_;
        SimFlowCompEqmt_HeatPumpTimeConst_optional SimFlowCompEqmt_HeatPumpTimeConst_;
        SimFlowCompEqmt_FractOnCyclePwrUse_optional SimFlowCompEqmt_FractOnCyclePwrUse_;
        SimFlowCompEqmt_HeatPumpFanDelayTime_optional SimFlowCompEqmt_HeatPumpFanDelayTime_;
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_;
        SimFlowCompEqmt_SupplyFanName_optional SimFlowCompEqmt_SupplyFanName_;
        SimFlowCompEqmt_MaxSupplyAirTemp_optional SimFlowCompEqmt_MaxSupplyAirTemp_;
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
        SimFlowCompEqmt_SupFanObjectType_optional SimFlowCompEqmt_SupFanObjectType_;
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_;
        SimFlowCompEqmt_MaxTempForHeatRecov_optional SimFlowCompEqmt_MaxTempForHeatRecov_;
        SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional SimFlowCompEqmt_HeatRecovWaterInletNodeName_;
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional SimFlowCompEqmt_HeatRecovWaterOutletNodeName_;
        SimFlowCompEqmt_CntlType_optional SimFlowCompEqmt_CntlType_;
        SimFlowCompEqmt_DXHeatCoilSizingRatio_optional SimFlowCompEqmt_DXHeatCoilSizingRatio_;
        SimFlowCompEqmt_UseDOASDXCoolCoil_optional SimFlowCompEqmt_UseDOASDXCoolCoil_;
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_;
        SimFlowCompEqmt_LatentLoadCntrl_optional SimFlowCompEqmt_LatentLoadCntrl_;
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_;
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_;
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_;
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_;
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_;
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_;
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_;
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_;
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_;
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_;
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_;
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional SimFlowCompEqmt_AncilliaryOn_CycleElecPower_;
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional SimFlowCompEqmt_AncilliaryOff_CycleElecPower_;
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_;
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_;
        UnitarySystemPerformance_HeatPump_Multispeed_Name_optional UnitarySystemPerformance_HeatPump_Multispeed_Name_;
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_;
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_;
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_;
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_COMPOUND_EQMT_UNITARY_LOOP_EQMT_DEFAULT_HXX
