// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowMover_SupplyFan_ComponentModel.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowMover_SupplyFan_ComponentModel
      // 

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MinFlowRate_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MinFlowRate () const
      {
        return this->SimFlowMover_MinFlowRate_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MinFlowRate_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MinFlowRate ()
      {
        return this->SimFlowMover_MinFlowRate_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MinFlowRate (const SimFlowMover_MinFlowRate_type& x)
      {
        this->SimFlowMover_MinFlowRate_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MinFlowRate (const SimFlowMover_MinFlowRate_optional& x)
      {
        this->SimFlowMover_MinFlowRate_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanSizingFactor () const
      {
        return this->SimFlowMover_FanSizingFactor_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanSizingFactor ()
      {
        return this->SimFlowMover_FanSizingFactor_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanSizingFactor (const SimFlowMover_FanSizingFactor_type& x)
      {
        this->SimFlowMover_FanSizingFactor_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanSizingFactor (const SimFlowMover_FanSizingFactor_optional& x)
      {
        this->SimFlowMover_FanSizingFactor_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanWheelDiameter_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanWheelDiameter () const
      {
        return this->SimFlowMover_FanWheelDiameter_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanWheelDiameter_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanWheelDiameter ()
      {
        return this->SimFlowMover_FanWheelDiameter_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanWheelDiameter (const SimFlowMover_FanWheelDiameter_type& x)
      {
        this->SimFlowMover_FanWheelDiameter_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanWheelDiameter (const SimFlowMover_FanWheelDiameter_optional& x)
      {
        this->SimFlowMover_FanWheelDiameter_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanOutletArea_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanOutletArea () const
      {
        return this->SimFlowMover_FanOutletArea_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanOutletArea_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanOutletArea ()
      {
        return this->SimFlowMover_FanOutletArea_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanOutletArea (const SimFlowMover_FanOutletArea_type& x)
      {
        this->SimFlowMover_FanOutletArea_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanOutletArea (const SimFlowMover_FanOutletArea_optional& x)
      {
        this->SimFlowMover_FanOutletArea_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxFanStaticEfficiency_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxFanStaticEfficiency () const
      {
        return this->SimFlowMover_MaxFanStaticEfficiency_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxFanStaticEfficiency_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxFanStaticEfficiency ()
      {
        return this->SimFlowMover_MaxFanStaticEfficiency_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxFanStaticEfficiency (const SimFlowMover_MaxFanStaticEfficiency_type& x)
      {
        this->SimFlowMover_MaxFanStaticEfficiency_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxFanStaticEfficiency (const SimFlowMover_MaxFanStaticEfficiency_optional& x)
      {
        this->SimFlowMover_MaxFanStaticEfficiency_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_EulerNumberAtMaxFanStaticEfficiency () const
      {
        return this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_EulerNumberAtMaxFanStaticEfficiency ()
      {
        return this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_EulerNumberAtMaxFanStaticEfficiency (const SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_type& x)
      {
        this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_EulerNumberAtMaxFanStaticEfficiency (const SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_optional& x)
      {
        this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxDimlessFanAirflow_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxDimlessFanAirflow () const
      {
        return this->SimFlowMover_MaxDimlessFanAirflow_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxDimlessFanAirflow_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxDimlessFanAirflow ()
      {
        return this->SimFlowMover_MaxDimlessFanAirflow_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxDimlessFanAirflow (const SimFlowMover_MaxDimlessFanAirflow_type& x)
      {
        this->SimFlowMover_MaxDimlessFanAirflow_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxDimlessFanAirflow (const SimFlowMover_MaxDimlessFanAirflow_optional& x)
      {
        this->SimFlowMover_MaxDimlessFanAirflow_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MotorFanPulleyRatio_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorFanPulleyRatio () const
      {
        return this->SimFlowMover_MotorFanPulleyRatio_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MotorFanPulleyRatio_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorFanPulleyRatio ()
      {
        return this->SimFlowMover_MotorFanPulleyRatio_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorFanPulleyRatio (const SimFlowMover_MotorFanPulleyRatio_type& x)
      {
        this->SimFlowMover_MotorFanPulleyRatio_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorFanPulleyRatio (const SimFlowMover_MotorFanPulleyRatio_optional& x)
      {
        this->SimFlowMover_MotorFanPulleyRatio_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_BeltMaxTorque_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltMaxTorque () const
      {
        return this->SimFlowMover_BeltMaxTorque_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_BeltMaxTorque_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltMaxTorque ()
      {
        return this->SimFlowMover_BeltMaxTorque_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltMaxTorque (const SimFlowMover_BeltMaxTorque_type& x)
      {
        this->SimFlowMover_BeltMaxTorque_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltMaxTorque (const SimFlowMover_BeltMaxTorque_optional& x)
      {
        this->SimFlowMover_BeltMaxTorque_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_BeltSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltSizingFactor () const
      {
        return this->SimFlowMover_BeltSizingFactor_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_BeltSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltSizingFactor ()
      {
        return this->SimFlowMover_BeltSizingFactor_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltSizingFactor (const SimFlowMover_BeltSizingFactor_type& x)
      {
        this->SimFlowMover_BeltSizingFactor_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltSizingFactor (const SimFlowMover_BeltSizingFactor_optional& x)
      {
        this->SimFlowMover_BeltSizingFactor_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_BeltFractionalTorqueTransition_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltFractionalTorqueTransition () const
      {
        return this->SimFlowMover_BeltFractionalTorqueTransition_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_BeltFractionalTorqueTransition_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltFractionalTorqueTransition ()
      {
        return this->SimFlowMover_BeltFractionalTorqueTransition_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltFractionalTorqueTransition (const SimFlowMover_BeltFractionalTorqueTransition_type& x)
      {
        this->SimFlowMover_BeltFractionalTorqueTransition_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_BeltFractionalTorqueTransition (const SimFlowMover_BeltFractionalTorqueTransition_optional& x)
      {
        this->SimFlowMover_BeltFractionalTorqueTransition_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MotorMaxSpeed_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorMaxSpeed () const
      {
        return this->SimFlowMover_MotorMaxSpeed_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MotorMaxSpeed_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorMaxSpeed ()
      {
        return this->SimFlowMover_MotorMaxSpeed_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorMaxSpeed (const SimFlowMover_MotorMaxSpeed_type& x)
      {
        this->SimFlowMover_MotorMaxSpeed_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorMaxSpeed (const SimFlowMover_MotorMaxSpeed_optional& x)
      {
        this->SimFlowMover_MotorMaxSpeed_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxMotorOutputPower_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorOutputPower () const
      {
        return this->SimFlowMover_MaxMotorOutputPower_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxMotorOutputPower_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorOutputPower ()
      {
        return this->SimFlowMover_MaxMotorOutputPower_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorOutputPower (const SimFlowMover_MaxMotorOutputPower_type& x)
      {
        this->SimFlowMover_MaxMotorOutputPower_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorOutputPower (const SimFlowMover_MaxMotorOutputPower_optional& x)
      {
        this->SimFlowMover_MaxMotorOutputPower_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MotorSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorSizingFactor () const
      {
        return this->SimFlowMover_MotorSizingFactor_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MotorSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorSizingFactor ()
      {
        return this->SimFlowMover_MotorSizingFactor_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorSizingFactor (const SimFlowMover_MotorSizingFactor_type& x)
      {
        this->SimFlowMover_MotorSizingFactor_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MotorSizingFactor (const SimFlowMover_MotorSizingFactor_optional& x)
      {
        this->SimFlowMover_MotorSizingFactor_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_VFDEfficiencyType_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyType () const
      {
        return this->SimFlowMover_VFDEfficiencyType_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_VFDEfficiencyType_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyType ()
      {
        return this->SimFlowMover_VFDEfficiencyType_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyType (const SimFlowMover_VFDEfficiencyType_type& x)
      {
        this->SimFlowMover_VFDEfficiencyType_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyType (const SimFlowMover_VFDEfficiencyType_optional& x)
      {
        this->SimFlowMover_VFDEfficiencyType_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyType (::std::auto_ptr< SimFlowMover_VFDEfficiencyType_type > x)
      {
        this->SimFlowMover_VFDEfficiencyType_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxVFDOutputPower_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxVFDOutputPower () const
      {
        return this->SimFlowMover_MaxVFDOutputPower_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxVFDOutputPower_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxVFDOutputPower ()
      {
        return this->SimFlowMover_MaxVFDOutputPower_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxVFDOutputPower (const SimFlowMover_MaxVFDOutputPower_type& x)
      {
        this->SimFlowMover_MaxVFDOutputPower_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxVFDOutputPower (const SimFlowMover_MaxVFDOutputPower_optional& x)
      {
        this->SimFlowMover_MaxVFDOutputPower_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_VFDSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDSizingFactor () const
      {
        return this->SimFlowMover_VFDSizingFactor_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_VFDSizingFactor_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDSizingFactor ()
      {
        return this->SimFlowMover_VFDSizingFactor_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDSizingFactor (const SimFlowMover_VFDSizingFactor_type& x)
      {
        this->SimFlowMover_VFDSizingFactor_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDSizingFactor (const SimFlowMover_VFDSizingFactor_optional& x)
      {
        this->SimFlowMover_VFDSizingFactor_ = x;
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanPressureRiseCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanPressureRiseCurveName () const
      {
        return this->SimFlowMover_FanPressureRiseCurveName_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_FanPressureRiseCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanPressureRiseCurveName ()
      {
        return this->SimFlowMover_FanPressureRiseCurveName_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanPressureRiseCurveName (const SimFlowMover_FanPressureRiseCurveName_type& x)
      {
        this->SimFlowMover_FanPressureRiseCurveName_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanPressureRiseCurveName (const SimFlowMover_FanPressureRiseCurveName_optional& x)
      {
        this->SimFlowMover_FanPressureRiseCurveName_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_FanPressureRiseCurveName (::std::auto_ptr< SimFlowMover_FanPressureRiseCurveName_type > x)
      {
        this->SimFlowMover_FanPressureRiseCurveName_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_DuctStaticPressureResetCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_DuctStaticPressureResetCurveName () const
      {
        return this->SimFlowMover_DuctStaticPressureResetCurveName_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_DuctStaticPressureResetCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_DuctStaticPressureResetCurveName ()
      {
        return this->SimFlowMover_DuctStaticPressureResetCurveName_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_DuctStaticPressureResetCurveName (const SimFlowMover_DuctStaticPressureResetCurveName_type& x)
      {
        this->SimFlowMover_DuctStaticPressureResetCurveName_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_DuctStaticPressureResetCurveName (const SimFlowMover_DuctStaticPressureResetCurveName_optional& x)
      {
        this->SimFlowMover_DuctStaticPressureResetCurveName_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_DuctStaticPressureResetCurveName (::std::auto_ptr< SimFlowMover_DuctStaticPressureResetCurveName_type > x)
      {
        this->SimFlowMover_DuctStaticPressureResetCurveName_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion () const
      {
        return this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion ()
      {
        return this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type& x)
      {
        this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_optional& x)
      {
        this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion (::std::auto_ptr< SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type > x)
      {
        this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_StallRegion () const
      {
        return this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_StallRegion ()
      {
        return this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_StallRegion_type& x)
      {
        this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_StallRegion (const SimFlowMover_NormFanStaticEffCurveName_StallRegion_optional& x)
      {
        this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormFanStaticEffCurveName_StallRegion (::std::auto_ptr< SimFlowMover_NormFanStaticEffCurveName_StallRegion_type > x)
      {
        this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion () const
      {
        return this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion ()
      {
        return this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type& x)
      {
        this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_optional& x)
      {
        this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion (::std::auto_ptr< SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type > x)
      {
        this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_StallRegion () const
      {
        return this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_StallRegion ()
      {
        return this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type& x)
      {
        this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_StallRegion (const SimFlowMover_NormDimlessAirflowCurveName_StallRegion_optional& x)
      {
        this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormDimlessAirflowCurveName_StallRegion (::std::auto_ptr< SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type > x)
      {
        this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxBeltEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxBeltEfficiencyCurveName () const
      {
        return this->SimFlowMover_MaxBeltEfficiencyCurveName_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxBeltEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxBeltEfficiencyCurveName ()
      {
        return this->SimFlowMover_MaxBeltEfficiencyCurveName_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxBeltEfficiencyCurveName (const SimFlowMover_MaxBeltEfficiencyCurveName_type& x)
      {
        this->SimFlowMover_MaxBeltEfficiencyCurveName_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxBeltEfficiencyCurveName (const SimFlowMover_MaxBeltEfficiencyCurveName_optional& x)
      {
        this->SimFlowMover_MaxBeltEfficiencyCurveName_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxBeltEfficiencyCurveName (::std::auto_ptr< SimFlowMover_MaxBeltEfficiencyCurveName_type > x)
      {
        this->SimFlowMover_MaxBeltEfficiencyCurveName_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormBeltEffCurveNameRegion_1_3 () const
      {
        return this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormBeltEffCurveNameRegion_1_3 ()
      {
        return this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormBeltEffCurveNameRegion_1_3 (const SimFlowMover_NormBeltEffCurveNameRegion_1_3_type& x)
      {
        this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormBeltEffCurveNameRegion_1_3 (const SimFlowMover_NormBeltEffCurveNameRegion_1_3_optional& x)
      {
        this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormBeltEffCurveNameRegion_1_3 (::std::auto_ptr< SimFlowMover_NormBeltEffCurveNameRegion_1_3_type > x)
      {
        this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxMotorEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorEfficiencyCurveName () const
      {
        return this->SimFlowMover_MaxMotorEfficiencyCurveName_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_MaxMotorEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorEfficiencyCurveName ()
      {
        return this->SimFlowMover_MaxMotorEfficiencyCurveName_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorEfficiencyCurveName (const SimFlowMover_MaxMotorEfficiencyCurveName_type& x)
      {
        this->SimFlowMover_MaxMotorEfficiencyCurveName_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorEfficiencyCurveName (const SimFlowMover_MaxMotorEfficiencyCurveName_optional& x)
      {
        this->SimFlowMover_MaxMotorEfficiencyCurveName_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_MaxMotorEfficiencyCurveName (::std::auto_ptr< SimFlowMover_MaxMotorEfficiencyCurveName_type > x)
      {
        this->SimFlowMover_MaxMotorEfficiencyCurveName_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormMotorEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormMotorEfficiencyCurveName () const
      {
        return this->SimFlowMover_NormMotorEfficiencyCurveName_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_NormMotorEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormMotorEfficiencyCurveName ()
      {
        return this->SimFlowMover_NormMotorEfficiencyCurveName_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormMotorEfficiencyCurveName (const SimFlowMover_NormMotorEfficiencyCurveName_type& x)
      {
        this->SimFlowMover_NormMotorEfficiencyCurveName_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormMotorEfficiencyCurveName (const SimFlowMover_NormMotorEfficiencyCurveName_optional& x)
      {
        this->SimFlowMover_NormMotorEfficiencyCurveName_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_NormMotorEfficiencyCurveName (::std::auto_ptr< SimFlowMover_NormMotorEfficiencyCurveName_type > x)
      {
        this->SimFlowMover_NormMotorEfficiencyCurveName_.set (x);
      }

      const SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_VFDEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyCurveName () const
      {
        return this->SimFlowMover_VFDEfficiencyCurveName_;
      }

      SimFlowMover_SupplyFan_ComponentModel::SimFlowMover_VFDEfficiencyCurveName_optional& SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyCurveName ()
      {
        return this->SimFlowMover_VFDEfficiencyCurveName_;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyCurveName (const SimFlowMover_VFDEfficiencyCurveName_type& x)
      {
        this->SimFlowMover_VFDEfficiencyCurveName_.set (x);
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyCurveName (const SimFlowMover_VFDEfficiencyCurveName_optional& x)
      {
        this->SimFlowMover_VFDEfficiencyCurveName_ = x;
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_VFDEfficiencyCurveName (::std::auto_ptr< SimFlowMover_VFDEfficiencyCurveName_type > x)
      {
        this->SimFlowMover_VFDEfficiencyCurveName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowMover_SupplyFan_ComponentModel
      //

      SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_SupplyFan_ComponentModel ()
      : ::schema::simxml::MepModel::SimFlowMover_SupplyFan (),
        SimFlowMover_MinFlowRate_ (this),
        SimFlowMover_FanSizingFactor_ (this),
        SimFlowMover_FanWheelDiameter_ (this),
        SimFlowMover_FanOutletArea_ (this),
        SimFlowMover_MaxFanStaticEfficiency_ (this),
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_ (this),
        SimFlowMover_MaxDimlessFanAirflow_ (this),
        SimFlowMover_MotorFanPulleyRatio_ (this),
        SimFlowMover_BeltMaxTorque_ (this),
        SimFlowMover_BeltSizingFactor_ (this),
        SimFlowMover_BeltFractionalTorqueTransition_ (this),
        SimFlowMover_MotorMaxSpeed_ (this),
        SimFlowMover_MaxMotorOutputPower_ (this),
        SimFlowMover_MotorSizingFactor_ (this),
        SimFlowMover_VFDEfficiencyType_ (this),
        SimFlowMover_MaxVFDOutputPower_ (this),
        SimFlowMover_VFDSizingFactor_ (this),
        SimFlowMover_FanPressureRiseCurveName_ (this),
        SimFlowMover_DuctStaticPressureResetCurveName_ (this),
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_ (this),
        SimFlowMover_NormFanStaticEffCurveName_StallRegion_ (this),
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_ (this),
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion_ (this),
        SimFlowMover_MaxBeltEfficiencyCurveName_ (this),
        SimFlowMover_NormBeltEffCurveNameRegion_1_3_ (this),
        SimFlowMover_MaxMotorEfficiencyCurveName_ (this),
        SimFlowMover_NormMotorEfficiencyCurveName_ (this),
        SimFlowMover_VFDEfficiencyCurveName_ (this)
      {
      }

      SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_SupplyFan_ComponentModel (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowMover_SupplyFan (RefId),
        SimFlowMover_MinFlowRate_ (this),
        SimFlowMover_FanSizingFactor_ (this),
        SimFlowMover_FanWheelDiameter_ (this),
        SimFlowMover_FanOutletArea_ (this),
        SimFlowMover_MaxFanStaticEfficiency_ (this),
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_ (this),
        SimFlowMover_MaxDimlessFanAirflow_ (this),
        SimFlowMover_MotorFanPulleyRatio_ (this),
        SimFlowMover_BeltMaxTorque_ (this),
        SimFlowMover_BeltSizingFactor_ (this),
        SimFlowMover_BeltFractionalTorqueTransition_ (this),
        SimFlowMover_MotorMaxSpeed_ (this),
        SimFlowMover_MaxMotorOutputPower_ (this),
        SimFlowMover_MotorSizingFactor_ (this),
        SimFlowMover_VFDEfficiencyType_ (this),
        SimFlowMover_MaxVFDOutputPower_ (this),
        SimFlowMover_VFDSizingFactor_ (this),
        SimFlowMover_FanPressureRiseCurveName_ (this),
        SimFlowMover_DuctStaticPressureResetCurveName_ (this),
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_ (this),
        SimFlowMover_NormFanStaticEffCurveName_StallRegion_ (this),
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_ (this),
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion_ (this),
        SimFlowMover_MaxBeltEfficiencyCurveName_ (this),
        SimFlowMover_NormBeltEffCurveNameRegion_1_3_ (this),
        SimFlowMover_MaxMotorEfficiencyCurveName_ (this),
        SimFlowMover_NormMotorEfficiencyCurveName_ (this),
        SimFlowMover_VFDEfficiencyCurveName_ (this)
      {
      }

      SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_SupplyFan_ComponentModel (const SimFlowMover_SupplyFan_ComponentModel& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowMover_SupplyFan (x, f, c),
        SimFlowMover_MinFlowRate_ (x.SimFlowMover_MinFlowRate_, f, this),
        SimFlowMover_FanSizingFactor_ (x.SimFlowMover_FanSizingFactor_, f, this),
        SimFlowMover_FanWheelDiameter_ (x.SimFlowMover_FanWheelDiameter_, f, this),
        SimFlowMover_FanOutletArea_ (x.SimFlowMover_FanOutletArea_, f, this),
        SimFlowMover_MaxFanStaticEfficiency_ (x.SimFlowMover_MaxFanStaticEfficiency_, f, this),
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_ (x.SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_, f, this),
        SimFlowMover_MaxDimlessFanAirflow_ (x.SimFlowMover_MaxDimlessFanAirflow_, f, this),
        SimFlowMover_MotorFanPulleyRatio_ (x.SimFlowMover_MotorFanPulleyRatio_, f, this),
        SimFlowMover_BeltMaxTorque_ (x.SimFlowMover_BeltMaxTorque_, f, this),
        SimFlowMover_BeltSizingFactor_ (x.SimFlowMover_BeltSizingFactor_, f, this),
        SimFlowMover_BeltFractionalTorqueTransition_ (x.SimFlowMover_BeltFractionalTorqueTransition_, f, this),
        SimFlowMover_MotorMaxSpeed_ (x.SimFlowMover_MotorMaxSpeed_, f, this),
        SimFlowMover_MaxMotorOutputPower_ (x.SimFlowMover_MaxMotorOutputPower_, f, this),
        SimFlowMover_MotorSizingFactor_ (x.SimFlowMover_MotorSizingFactor_, f, this),
        SimFlowMover_VFDEfficiencyType_ (x.SimFlowMover_VFDEfficiencyType_, f, this),
        SimFlowMover_MaxVFDOutputPower_ (x.SimFlowMover_MaxVFDOutputPower_, f, this),
        SimFlowMover_VFDSizingFactor_ (x.SimFlowMover_VFDSizingFactor_, f, this),
        SimFlowMover_FanPressureRiseCurveName_ (x.SimFlowMover_FanPressureRiseCurveName_, f, this),
        SimFlowMover_DuctStaticPressureResetCurveName_ (x.SimFlowMover_DuctStaticPressureResetCurveName_, f, this),
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_ (x.SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_, f, this),
        SimFlowMover_NormFanStaticEffCurveName_StallRegion_ (x.SimFlowMover_NormFanStaticEffCurveName_StallRegion_, f, this),
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_ (x.SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_, f, this),
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion_ (x.SimFlowMover_NormDimlessAirflowCurveName_StallRegion_, f, this),
        SimFlowMover_MaxBeltEfficiencyCurveName_ (x.SimFlowMover_MaxBeltEfficiencyCurveName_, f, this),
        SimFlowMover_NormBeltEffCurveNameRegion_1_3_ (x.SimFlowMover_NormBeltEffCurveNameRegion_1_3_, f, this),
        SimFlowMover_MaxMotorEfficiencyCurveName_ (x.SimFlowMover_MaxMotorEfficiencyCurveName_, f, this),
        SimFlowMover_NormMotorEfficiencyCurveName_ (x.SimFlowMover_NormMotorEfficiencyCurveName_, f, this),
        SimFlowMover_VFDEfficiencyCurveName_ (x.SimFlowMover_VFDEfficiencyCurveName_, f, this)
      {
      }

      SimFlowMover_SupplyFan_ComponentModel::
      SimFlowMover_SupplyFan_ComponentModel (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowMover_SupplyFan (e, f | ::xml_schema::flags::base, c),
        SimFlowMover_MinFlowRate_ (this),
        SimFlowMover_FanSizingFactor_ (this),
        SimFlowMover_FanWheelDiameter_ (this),
        SimFlowMover_FanOutletArea_ (this),
        SimFlowMover_MaxFanStaticEfficiency_ (this),
        SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_ (this),
        SimFlowMover_MaxDimlessFanAirflow_ (this),
        SimFlowMover_MotorFanPulleyRatio_ (this),
        SimFlowMover_BeltMaxTorque_ (this),
        SimFlowMover_BeltSizingFactor_ (this),
        SimFlowMover_BeltFractionalTorqueTransition_ (this),
        SimFlowMover_MotorMaxSpeed_ (this),
        SimFlowMover_MaxMotorOutputPower_ (this),
        SimFlowMover_MotorSizingFactor_ (this),
        SimFlowMover_VFDEfficiencyType_ (this),
        SimFlowMover_MaxVFDOutputPower_ (this),
        SimFlowMover_VFDSizingFactor_ (this),
        SimFlowMover_FanPressureRiseCurveName_ (this),
        SimFlowMover_DuctStaticPressureResetCurveName_ (this),
        SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_ (this),
        SimFlowMover_NormFanStaticEffCurveName_StallRegion_ (this),
        SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_ (this),
        SimFlowMover_NormDimlessAirflowCurveName_StallRegion_ (this),
        SimFlowMover_MaxBeltEfficiencyCurveName_ (this),
        SimFlowMover_NormBeltEffCurveNameRegion_1_3_ (this),
        SimFlowMover_MaxMotorEfficiencyCurveName_ (this),
        SimFlowMover_NormMotorEfficiencyCurveName_ (this),
        SimFlowMover_VFDEfficiencyCurveName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowMover_SupplyFan_ComponentModel::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowMover_SupplyFan::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowMover_MinFlowRate
          //
          if (n.name () == "SimFlowMover_MinFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MinFlowRate_)
            {
              this->SimFlowMover_MinFlowRate_.set (SimFlowMover_MinFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_FanSizingFactor
          //
          if (n.name () == "SimFlowMover_FanSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_FanSizingFactor_)
            {
              this->SimFlowMover_FanSizingFactor_.set (SimFlowMover_FanSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_FanWheelDiameter
          //
          if (n.name () == "SimFlowMover_FanWheelDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_FanWheelDiameter_)
            {
              this->SimFlowMover_FanWheelDiameter_.set (SimFlowMover_FanWheelDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_FanOutletArea
          //
          if (n.name () == "SimFlowMover_FanOutletArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_FanOutletArea_)
            {
              this->SimFlowMover_FanOutletArea_.set (SimFlowMover_FanOutletArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MaxFanStaticEfficiency
          //
          if (n.name () == "SimFlowMover_MaxFanStaticEfficiency" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MaxFanStaticEfficiency_)
            {
              this->SimFlowMover_MaxFanStaticEfficiency_.set (SimFlowMover_MaxFanStaticEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_EulerNumberAtMaxFanStaticEfficiency
          //
          if (n.name () == "SimFlowMover_EulerNumberAtMaxFanStaticEfficiency" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_)
            {
              this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_.set (SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MaxDimlessFanAirflow
          //
          if (n.name () == "SimFlowMover_MaxDimlessFanAirflow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MaxDimlessFanAirflow_)
            {
              this->SimFlowMover_MaxDimlessFanAirflow_.set (SimFlowMover_MaxDimlessFanAirflow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MotorFanPulleyRatio
          //
          if (n.name () == "SimFlowMover_MotorFanPulleyRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MotorFanPulleyRatio_)
            {
              this->SimFlowMover_MotorFanPulleyRatio_.set (SimFlowMover_MotorFanPulleyRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_BeltMaxTorque
          //
          if (n.name () == "SimFlowMover_BeltMaxTorque" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_BeltMaxTorque_)
            {
              this->SimFlowMover_BeltMaxTorque_.set (SimFlowMover_BeltMaxTorque_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_BeltSizingFactor
          //
          if (n.name () == "SimFlowMover_BeltSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_BeltSizingFactor_)
            {
              this->SimFlowMover_BeltSizingFactor_.set (SimFlowMover_BeltSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_BeltFractionalTorqueTransition
          //
          if (n.name () == "SimFlowMover_BeltFractionalTorqueTransition" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_BeltFractionalTorqueTransition_)
            {
              this->SimFlowMover_BeltFractionalTorqueTransition_.set (SimFlowMover_BeltFractionalTorqueTransition_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MotorMaxSpeed
          //
          if (n.name () == "SimFlowMover_MotorMaxSpeed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MotorMaxSpeed_)
            {
              this->SimFlowMover_MotorMaxSpeed_.set (SimFlowMover_MotorMaxSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MaxMotorOutputPower
          //
          if (n.name () == "SimFlowMover_MaxMotorOutputPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MaxMotorOutputPower_)
            {
              this->SimFlowMover_MaxMotorOutputPower_.set (SimFlowMover_MaxMotorOutputPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MotorSizingFactor
          //
          if (n.name () == "SimFlowMover_MotorSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MotorSizingFactor_)
            {
              this->SimFlowMover_MotorSizingFactor_.set (SimFlowMover_MotorSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_VFDEfficiencyType
          //
          if (n.name () == "SimFlowMover_VFDEfficiencyType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_VFDEfficiencyType_type > r (
              SimFlowMover_VFDEfficiencyType_traits::create (i, f, this));

            if (!this->SimFlowMover_VFDEfficiencyType_)
            {
              this->SimFlowMover_VFDEfficiencyType_.set (r);
              continue;
            }
          }

          // SimFlowMover_MaxVFDOutputPower
          //
          if (n.name () == "SimFlowMover_MaxVFDOutputPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_MaxVFDOutputPower_)
            {
              this->SimFlowMover_MaxVFDOutputPower_.set (SimFlowMover_MaxVFDOutputPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_VFDSizingFactor
          //
          if (n.name () == "SimFlowMover_VFDSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowMover_VFDSizingFactor_)
            {
              this->SimFlowMover_VFDSizingFactor_.set (SimFlowMover_VFDSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_FanPressureRiseCurveName
          //
          if (n.name () == "SimFlowMover_FanPressureRiseCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_FanPressureRiseCurveName_type > r (
              SimFlowMover_FanPressureRiseCurveName_traits::create (i, f, this));

            if (!this->SimFlowMover_FanPressureRiseCurveName_)
            {
              this->SimFlowMover_FanPressureRiseCurveName_.set (r);
              continue;
            }
          }

          // SimFlowMover_DuctStaticPressureResetCurveName
          //
          if (n.name () == "SimFlowMover_DuctStaticPressureResetCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_DuctStaticPressureResetCurveName_type > r (
              SimFlowMover_DuctStaticPressureResetCurveName_traits::create (i, f, this));

            if (!this->SimFlowMover_DuctStaticPressureResetCurveName_)
            {
              this->SimFlowMover_DuctStaticPressureResetCurveName_.set (r);
              continue;
            }
          }

          // SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion
          //
          if (n.name () == "SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_type > r (
              SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_traits::create (i, f, this));

            if (!this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_)
            {
              this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_.set (r);
              continue;
            }
          }

          // SimFlowMover_NormFanStaticEffCurveName_StallRegion
          //
          if (n.name () == "SimFlowMover_NormFanStaticEffCurveName_StallRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_NormFanStaticEffCurveName_StallRegion_type > r (
              SimFlowMover_NormFanStaticEffCurveName_StallRegion_traits::create (i, f, this));

            if (!this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_)
            {
              this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_.set (r);
              continue;
            }
          }

          // SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion
          //
          if (n.name () == "SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_type > r (
              SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_traits::create (i, f, this));

            if (!this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_)
            {
              this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_.set (r);
              continue;
            }
          }

          // SimFlowMover_NormDimlessAirflowCurveName_StallRegion
          //
          if (n.name () == "SimFlowMover_NormDimlessAirflowCurveName_StallRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_NormDimlessAirflowCurveName_StallRegion_type > r (
              SimFlowMover_NormDimlessAirflowCurveName_StallRegion_traits::create (i, f, this));

            if (!this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_)
            {
              this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_.set (r);
              continue;
            }
          }

          // SimFlowMover_MaxBeltEfficiencyCurveName
          //
          if (n.name () == "SimFlowMover_MaxBeltEfficiencyCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_MaxBeltEfficiencyCurveName_type > r (
              SimFlowMover_MaxBeltEfficiencyCurveName_traits::create (i, f, this));

            if (!this->SimFlowMover_MaxBeltEfficiencyCurveName_)
            {
              this->SimFlowMover_MaxBeltEfficiencyCurveName_.set (r);
              continue;
            }
          }

          // SimFlowMover_NormBeltEffCurveNameRegion_1_3
          //
          if (n.name () == "SimFlowMover_NormBeltEffCurveNameRegion_1_3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_NormBeltEffCurveNameRegion_1_3_type > r (
              SimFlowMover_NormBeltEffCurveNameRegion_1_3_traits::create (i, f, this));

            if (!this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_)
            {
              this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_.set (r);
              continue;
            }
          }

          // SimFlowMover_MaxMotorEfficiencyCurveName
          //
          if (n.name () == "SimFlowMover_MaxMotorEfficiencyCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_MaxMotorEfficiencyCurveName_type > r (
              SimFlowMover_MaxMotorEfficiencyCurveName_traits::create (i, f, this));

            if (!this->SimFlowMover_MaxMotorEfficiencyCurveName_)
            {
              this->SimFlowMover_MaxMotorEfficiencyCurveName_.set (r);
              continue;
            }
          }

          // SimFlowMover_NormMotorEfficiencyCurveName
          //
          if (n.name () == "SimFlowMover_NormMotorEfficiencyCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_NormMotorEfficiencyCurveName_type > r (
              SimFlowMover_NormMotorEfficiencyCurveName_traits::create (i, f, this));

            if (!this->SimFlowMover_NormMotorEfficiencyCurveName_)
            {
              this->SimFlowMover_NormMotorEfficiencyCurveName_.set (r);
              continue;
            }
          }

          // SimFlowMover_VFDEfficiencyCurveName
          //
          if (n.name () == "SimFlowMover_VFDEfficiencyCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowMover_VFDEfficiencyCurveName_type > r (
              SimFlowMover_VFDEfficiencyCurveName_traits::create (i, f, this));

            if (!this->SimFlowMover_VFDEfficiencyCurveName_)
            {
              this->SimFlowMover_VFDEfficiencyCurveName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowMover_SupplyFan_ComponentModel* SimFlowMover_SupplyFan_ComponentModel::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowMover_SupplyFan_ComponentModel (*this, f, c);
      }

      SimFlowMover_SupplyFan_ComponentModel& SimFlowMover_SupplyFan_ComponentModel::
      operator= (const SimFlowMover_SupplyFan_ComponentModel& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowMover_SupplyFan& > (*this) = x;
          this->SimFlowMover_MinFlowRate_ = x.SimFlowMover_MinFlowRate_;
          this->SimFlowMover_FanSizingFactor_ = x.SimFlowMover_FanSizingFactor_;
          this->SimFlowMover_FanWheelDiameter_ = x.SimFlowMover_FanWheelDiameter_;
          this->SimFlowMover_FanOutletArea_ = x.SimFlowMover_FanOutletArea_;
          this->SimFlowMover_MaxFanStaticEfficiency_ = x.SimFlowMover_MaxFanStaticEfficiency_;
          this->SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_ = x.SimFlowMover_EulerNumberAtMaxFanStaticEfficiency_;
          this->SimFlowMover_MaxDimlessFanAirflow_ = x.SimFlowMover_MaxDimlessFanAirflow_;
          this->SimFlowMover_MotorFanPulleyRatio_ = x.SimFlowMover_MotorFanPulleyRatio_;
          this->SimFlowMover_BeltMaxTorque_ = x.SimFlowMover_BeltMaxTorque_;
          this->SimFlowMover_BeltSizingFactor_ = x.SimFlowMover_BeltSizingFactor_;
          this->SimFlowMover_BeltFractionalTorqueTransition_ = x.SimFlowMover_BeltFractionalTorqueTransition_;
          this->SimFlowMover_MotorMaxSpeed_ = x.SimFlowMover_MotorMaxSpeed_;
          this->SimFlowMover_MaxMotorOutputPower_ = x.SimFlowMover_MaxMotorOutputPower_;
          this->SimFlowMover_MotorSizingFactor_ = x.SimFlowMover_MotorSizingFactor_;
          this->SimFlowMover_VFDEfficiencyType_ = x.SimFlowMover_VFDEfficiencyType_;
          this->SimFlowMover_MaxVFDOutputPower_ = x.SimFlowMover_MaxVFDOutputPower_;
          this->SimFlowMover_VFDSizingFactor_ = x.SimFlowMover_VFDSizingFactor_;
          this->SimFlowMover_FanPressureRiseCurveName_ = x.SimFlowMover_FanPressureRiseCurveName_;
          this->SimFlowMover_DuctStaticPressureResetCurveName_ = x.SimFlowMover_DuctStaticPressureResetCurveName_;
          this->SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_ = x.SimFlowMover_NormFanStaticEffCurveName_Non_StallRegion_;
          this->SimFlowMover_NormFanStaticEffCurveName_StallRegion_ = x.SimFlowMover_NormFanStaticEffCurveName_StallRegion_;
          this->SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_ = x.SimFlowMover_NormDimlessAirflowCurveName_Non_StallRegion_;
          this->SimFlowMover_NormDimlessAirflowCurveName_StallRegion_ = x.SimFlowMover_NormDimlessAirflowCurveName_StallRegion_;
          this->SimFlowMover_MaxBeltEfficiencyCurveName_ = x.SimFlowMover_MaxBeltEfficiencyCurveName_;
          this->SimFlowMover_NormBeltEffCurveNameRegion_1_3_ = x.SimFlowMover_NormBeltEffCurveNameRegion_1_3_;
          this->SimFlowMover_MaxMotorEfficiencyCurveName_ = x.SimFlowMover_MaxMotorEfficiencyCurveName_;
          this->SimFlowMover_NormMotorEfficiencyCurveName_ = x.SimFlowMover_NormMotorEfficiencyCurveName_;
          this->SimFlowMover_VFDEfficiencyCurveName_ = x.SimFlowMover_VFDEfficiencyCurveName_;
        }

        return *this;
      }

      SimFlowMover_SupplyFan_ComponentModel::
      ~SimFlowMover_SupplyFan_ComponentModel ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

