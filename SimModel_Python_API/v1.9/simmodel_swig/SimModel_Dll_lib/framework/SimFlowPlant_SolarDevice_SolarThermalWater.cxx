// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_SolarDevice_SolarThermalWater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarThermalWater
      // 

      const SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_Name_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_Name_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_SolarCollectPerfName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarCollectPerfName () const
      {
        return this->SimFlowPlant_SolarCollectPerfName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_SolarCollectPerfName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarCollectPerfName ()
      {
        return this->SimFlowPlant_SolarCollectPerfName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarCollectPerfName (const SimFlowPlant_SolarCollectPerfName_type& x)
      {
        this->SimFlowPlant_SolarCollectPerfName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarCollectPerfName (const SimFlowPlant_SolarCollectPerfName_optional& x)
      {
        this->SimFlowPlant_SolarCollectPerfName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarCollectPerfName (::std::auto_ptr< SimFlowPlant_SolarCollectPerfName_type > x)
      {
        this->SimFlowPlant_SolarCollectPerfName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_SurfName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SurfName () const
      {
        return this->SimFlowPlant_SurfName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_SurfName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SurfName ()
      {
        return this->SimFlowPlant_SurfName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SurfName (const SimFlowPlant_SurfName_type& x)
      {
        this->SimFlowPlant_SurfName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SurfName (const SimFlowPlant_SurfName_optional& x)
      {
        this->SimFlowPlant_SurfName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SurfName (::std::auto_ptr< SimFlowPlant_SurfName_type > x)
      {
        this->SimFlowPlant_SurfName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_InNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_InNodeName () const
      {
        return this->SimFlowPlant_InNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_InNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_InNodeName ()
      {
        return this->SimFlowPlant_InNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_InNodeName (const SimFlowPlant_InNodeName_type& x)
      {
        this->SimFlowPlant_InNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_InNodeName (const SimFlowPlant_InNodeName_optional& x)
      {
        this->SimFlowPlant_InNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_InNodeName (::std::auto_ptr< SimFlowPlant_InNodeName_type > x)
      {
        this->SimFlowPlant_InNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_OutNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_OutNodeName () const
      {
        return this->SimFlowPlant_OutNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_OutNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_OutNodeName ()
      {
        return this->SimFlowPlant_OutNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_OutNodeName (const SimFlowPlant_OutNodeName_type& x)
      {
        this->SimFlowPlant_OutNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_OutNodeName (const SimFlowPlant_OutNodeName_optional& x)
      {
        this->SimFlowPlant_OutNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_OutNodeName (::std::auto_ptr< SimFlowPlant_OutNodeName_type > x)
      {
        this->SimFlowPlant_OutNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_MaxFlowRate_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_MaxFlowRate () const
      {
        return this->SimFlowPlant_MaxFlowRate_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SimFlowPlant_MaxFlowRate_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_MaxFlowRate ()
      {
        return this->SimFlowPlant_MaxFlowRate_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_MaxFlowRate (const SimFlowPlant_MaxFlowRate_type& x)
      {
        this->SimFlowPlant_MaxFlowRate_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_MaxFlowRate (const SimFlowPlant_MaxFlowRate_optional& x)
      {
        this->SimFlowPlant_MaxFlowRate_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Name_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Name () const
      {
        return this->SolarCollectPerf_FlatPlate_Name_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Name_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Name ()
      {
        return this->SolarCollectPerf_FlatPlate_Name_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Name (const SolarCollectPerf_FlatPlate_Name_type& x)
      {
        this->SolarCollectPerf_FlatPlate_Name_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Name (const SolarCollectPerf_FlatPlate_Name_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_Name_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Name (::std::auto_ptr< SolarCollectPerf_FlatPlate_Name_type > x)
      {
        this->SolarCollectPerf_FlatPlate_Name_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_GrossArea_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_GrossArea () const
      {
        return this->SolarCollectPerf_FlatPlate_GrossArea_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_GrossArea_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_GrossArea ()
      {
        return this->SolarCollectPerf_FlatPlate_GrossArea_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_GrossArea (const SolarCollectPerf_FlatPlate_GrossArea_type& x)
      {
        this->SolarCollectPerf_FlatPlate_GrossArea_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_GrossArea (const SolarCollectPerf_FlatPlate_GrossArea_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_GrossArea_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_TestFluid_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFluid () const
      {
        return this->SolarCollectPerf_FlatPlate_TestFluid_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_TestFluid_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFluid ()
      {
        return this->SolarCollectPerf_FlatPlate_TestFluid_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFluid (const SolarCollectPerf_FlatPlate_TestFluid_type& x)
      {
        this->SolarCollectPerf_FlatPlate_TestFluid_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFluid (const SolarCollectPerf_FlatPlate_TestFluid_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_TestFluid_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFluid (::std::auto_ptr< SolarCollectPerf_FlatPlate_TestFluid_type > x)
      {
        this->SolarCollectPerf_FlatPlate_TestFluid_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_TestFlowRate_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFlowRate () const
      {
        return this->SolarCollectPerf_FlatPlate_TestFlowRate_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_TestFlowRate_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFlowRate ()
      {
        return this->SolarCollectPerf_FlatPlate_TestFlowRate_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFlowRate (const SolarCollectPerf_FlatPlate_TestFlowRate_type& x)
      {
        this->SolarCollectPerf_FlatPlate_TestFlowRate_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestFlowRate (const SolarCollectPerf_FlatPlate_TestFlowRate_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_TestFlowRate_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_TestCorrelType_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestCorrelType () const
      {
        return this->SolarCollectPerf_FlatPlate_TestCorrelType_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_TestCorrelType_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestCorrelType ()
      {
        return this->SolarCollectPerf_FlatPlate_TestCorrelType_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestCorrelType (const SolarCollectPerf_FlatPlate_TestCorrelType_type& x)
      {
        this->SolarCollectPerf_FlatPlate_TestCorrelType_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestCorrelType (const SolarCollectPerf_FlatPlate_TestCorrelType_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_TestCorrelType_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_TestCorrelType (::std::auto_ptr< SolarCollectPerf_FlatPlate_TestCorrelType_type > x)
      {
        this->SolarCollectPerf_FlatPlate_TestCorrelType_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef1ofEffEquation_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef1ofEffEquation () const
      {
        return this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef1ofEffEquation_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef1ofEffEquation ()
      {
        return this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef1ofEffEquation (const SolarCollectPerf_FlatPlate_Coef1ofEffEquation_type& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef1ofEffEquation (const SolarCollectPerf_FlatPlate_Coef1ofEffEquation_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef2ofEffEquation_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2ofEffEquation () const
      {
        return this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef2ofEffEquation_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2ofEffEquation ()
      {
        return this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2ofEffEquation (const SolarCollectPerf_FlatPlate_Coef2ofEffEquation_type& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2ofEffEquation (const SolarCollectPerf_FlatPlate_Coef2ofEffEquation_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef3ofEffEquation_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3ofEffEquation () const
      {
        return this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef3ofEffEquation_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3ofEffEquation ()
      {
        return this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3ofEffEquation (const SolarCollectPerf_FlatPlate_Coef3ofEffEquation_type& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3ofEffEquation (const SolarCollectPerf_FlatPlate_Coef3ofEffEquation_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod () const
      {
        return this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod ()
      {
        return this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod (const SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_type& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod (const SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod () const
      {
        return this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_optional& SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod ()
      {
        return this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod (const SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_type& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod (const SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_optional& x)
      {
        this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarThermalWater
      //

      SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarDevice_SolarThermalWater ()
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SolarCollectPerfName_ (this),
        SimFlowPlant_SurfName_ (this),
        SimFlowPlant_InNodeName_ (this),
        SimFlowPlant_OutNodeName_ (this),
        SimFlowPlant_MaxFlowRate_ (this),
        SolarCollectPerf_FlatPlate_Name_ (this),
        SolarCollectPerf_FlatPlate_GrossArea_ (this),
        SolarCollectPerf_FlatPlate_TestFluid_ (this),
        SolarCollectPerf_FlatPlate_TestFlowRate_ (this),
        SolarCollectPerf_FlatPlate_TestCorrelType_ (this),
        SolarCollectPerf_FlatPlate_Coef1ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef2ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef3ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_ (this),
        SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_ (this)
      {
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarDevice_SolarThermalWater (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SolarCollectPerfName_ (this),
        SimFlowPlant_SurfName_ (this),
        SimFlowPlant_InNodeName_ (this),
        SimFlowPlant_OutNodeName_ (this),
        SimFlowPlant_MaxFlowRate_ (this),
        SolarCollectPerf_FlatPlate_Name_ (this),
        SolarCollectPerf_FlatPlate_GrossArea_ (this),
        SolarCollectPerf_FlatPlate_TestFluid_ (this),
        SolarCollectPerf_FlatPlate_TestFlowRate_ (this),
        SolarCollectPerf_FlatPlate_TestCorrelType_ (this),
        SolarCollectPerf_FlatPlate_Coef1ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef2ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef3ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_ (this),
        SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_ (this)
      {
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarDevice_SolarThermalWater (const SimFlowPlant_SolarDevice_SolarThermalWater& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_SolarCollectPerfName_ (x.SimFlowPlant_SolarCollectPerfName_, f, this),
        SimFlowPlant_SurfName_ (x.SimFlowPlant_SurfName_, f, this),
        SimFlowPlant_InNodeName_ (x.SimFlowPlant_InNodeName_, f, this),
        SimFlowPlant_OutNodeName_ (x.SimFlowPlant_OutNodeName_, f, this),
        SimFlowPlant_MaxFlowRate_ (x.SimFlowPlant_MaxFlowRate_, f, this),
        SolarCollectPerf_FlatPlate_Name_ (x.SolarCollectPerf_FlatPlate_Name_, f, this),
        SolarCollectPerf_FlatPlate_GrossArea_ (x.SolarCollectPerf_FlatPlate_GrossArea_, f, this),
        SolarCollectPerf_FlatPlate_TestFluid_ (x.SolarCollectPerf_FlatPlate_TestFluid_, f, this),
        SolarCollectPerf_FlatPlate_TestFlowRate_ (x.SolarCollectPerf_FlatPlate_TestFlowRate_, f, this),
        SolarCollectPerf_FlatPlate_TestCorrelType_ (x.SolarCollectPerf_FlatPlate_TestCorrelType_, f, this),
        SolarCollectPerf_FlatPlate_Coef1ofEffEquation_ (x.SolarCollectPerf_FlatPlate_Coef1ofEffEquation_, f, this),
        SolarCollectPerf_FlatPlate_Coef2ofEffEquation_ (x.SolarCollectPerf_FlatPlate_Coef2ofEffEquation_, f, this),
        SolarCollectPerf_FlatPlate_Coef3ofEffEquation_ (x.SolarCollectPerf_FlatPlate_Coef3ofEffEquation_, f, this),
        SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_ (x.SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_, f, this),
        SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_ (x.SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_, f, this)
      {
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::
      SimFlowPlant_SolarDevice_SolarThermalWater (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SolarCollectPerfName_ (this),
        SimFlowPlant_SurfName_ (this),
        SimFlowPlant_InNodeName_ (this),
        SimFlowPlant_OutNodeName_ (this),
        SimFlowPlant_MaxFlowRate_ (this),
        SolarCollectPerf_FlatPlate_Name_ (this),
        SolarCollectPerf_FlatPlate_GrossArea_ (this),
        SolarCollectPerf_FlatPlate_TestFluid_ (this),
        SolarCollectPerf_FlatPlate_TestFlowRate_ (this),
        SolarCollectPerf_FlatPlate_TestCorrelType_ (this),
        SolarCollectPerf_FlatPlate_Coef1ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef2ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef3ofEffEquation_ (this),
        SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_ (this),
        SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_SolarDevice_SolarThermalWater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_SolarDevice::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SolarCollectPerfName
          //
          if (n.name () == "SimFlowPlant_SolarCollectPerfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SolarCollectPerfName_type > r (
              SimFlowPlant_SolarCollectPerfName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SolarCollectPerfName_)
            {
              this->SimFlowPlant_SolarCollectPerfName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SurfName
          //
          if (n.name () == "SimFlowPlant_SurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SurfName_type > r (
              SimFlowPlant_SurfName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SurfName_)
            {
              this->SimFlowPlant_SurfName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_InNodeName
          //
          if (n.name () == "SimFlowPlant_InNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_InNodeName_type > r (
              SimFlowPlant_InNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_InNodeName_)
            {
              this->SimFlowPlant_InNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_OutNodeName
          //
          if (n.name () == "SimFlowPlant_OutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_OutNodeName_type > r (
              SimFlowPlant_OutNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_OutNodeName_)
            {
              this->SimFlowPlant_OutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_MaxFlowRate
          //
          if (n.name () == "SimFlowPlant_MaxFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_MaxFlowRate_)
            {
              this->SimFlowPlant_MaxFlowRate_.set (SimFlowPlant_MaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_Name
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SolarCollectPerf_FlatPlate_Name_type > r (
              SolarCollectPerf_FlatPlate_Name_traits::create (i, f, this));

            if (!this->SolarCollectPerf_FlatPlate_Name_)
            {
              this->SolarCollectPerf_FlatPlate_Name_.set (r);
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_GrossArea
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_GrossArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_GrossArea_)
            {
              this->SolarCollectPerf_FlatPlate_GrossArea_.set (SolarCollectPerf_FlatPlate_GrossArea_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_TestFluid
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_TestFluid" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SolarCollectPerf_FlatPlate_TestFluid_type > r (
              SolarCollectPerf_FlatPlate_TestFluid_traits::create (i, f, this));

            if (!this->SolarCollectPerf_FlatPlate_TestFluid_)
            {
              this->SolarCollectPerf_FlatPlate_TestFluid_.set (r);
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_TestFlowRate
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_TestFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_TestFlowRate_)
            {
              this->SolarCollectPerf_FlatPlate_TestFlowRate_.set (SolarCollectPerf_FlatPlate_TestFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_TestCorrelType
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_TestCorrelType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SolarCollectPerf_FlatPlate_TestCorrelType_type > r (
              SolarCollectPerf_FlatPlate_TestCorrelType_traits::create (i, f, this));

            if (!this->SolarCollectPerf_FlatPlate_TestCorrelType_)
            {
              this->SolarCollectPerf_FlatPlate_TestCorrelType_.set (r);
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_Coef1ofEffEquation
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_Coef1ofEffEquation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_)
            {
              this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_.set (SolarCollectPerf_FlatPlate_Coef1ofEffEquation_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_Coef2ofEffEquation
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_Coef2ofEffEquation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_)
            {
              this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_.set (SolarCollectPerf_FlatPlate_Coef2ofEffEquation_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_Coef3ofEffEquation
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_Coef3ofEffEquation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_)
            {
              this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_.set (SolarCollectPerf_FlatPlate_Coef3ofEffEquation_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_)
            {
              this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_.set (SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod
          //
          if (n.name () == "SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_)
            {
              this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_.set (SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_SolarDevice_SolarThermalWater* SimFlowPlant_SolarDevice_SolarThermalWater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_SolarDevice_SolarThermalWater (*this, f, c);
      }

      SimFlowPlant_SolarDevice_SolarThermalWater& SimFlowPlant_SolarDevice_SolarThermalWater::
      operator= (const SimFlowPlant_SolarDevice_SolarThermalWater& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_SolarDevice& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_SolarCollectPerfName_ = x.SimFlowPlant_SolarCollectPerfName_;
          this->SimFlowPlant_SurfName_ = x.SimFlowPlant_SurfName_;
          this->SimFlowPlant_InNodeName_ = x.SimFlowPlant_InNodeName_;
          this->SimFlowPlant_OutNodeName_ = x.SimFlowPlant_OutNodeName_;
          this->SimFlowPlant_MaxFlowRate_ = x.SimFlowPlant_MaxFlowRate_;
          this->SolarCollectPerf_FlatPlate_Name_ = x.SolarCollectPerf_FlatPlate_Name_;
          this->SolarCollectPerf_FlatPlate_GrossArea_ = x.SolarCollectPerf_FlatPlate_GrossArea_;
          this->SolarCollectPerf_FlatPlate_TestFluid_ = x.SolarCollectPerf_FlatPlate_TestFluid_;
          this->SolarCollectPerf_FlatPlate_TestFlowRate_ = x.SolarCollectPerf_FlatPlate_TestFlowRate_;
          this->SolarCollectPerf_FlatPlate_TestCorrelType_ = x.SolarCollectPerf_FlatPlate_TestCorrelType_;
          this->SolarCollectPerf_FlatPlate_Coef1ofEffEquation_ = x.SolarCollectPerf_FlatPlate_Coef1ofEffEquation_;
          this->SolarCollectPerf_FlatPlate_Coef2ofEffEquation_ = x.SolarCollectPerf_FlatPlate_Coef2ofEffEquation_;
          this->SolarCollectPerf_FlatPlate_Coef3ofEffEquation_ = x.SolarCollectPerf_FlatPlate_Coef3ofEffEquation_;
          this->SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_ = x.SolarCollectPerf_FlatPlate_Coef2OfIncidentAngleMod_;
          this->SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_ = x.SolarCollectPerf_FlatPlate_Coef3OfIncidentAngleMod_;
        }

        return *this;
      }

      SimFlowPlant_SolarDevice_SolarThermalWater::
      ~SimFlowPlant_SolarDevice_SolarThermalWater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

