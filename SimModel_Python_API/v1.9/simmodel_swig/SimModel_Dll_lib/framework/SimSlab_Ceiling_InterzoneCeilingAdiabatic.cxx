// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSlab_Ceiling_InterzoneCeilingAdiabatic.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSlab_Ceiling_InterzoneCeilingAdiabatic
      // 

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_AzimuthAng_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_AzimuthAng () const
      {
        return this->SimSlab_AzimuthAng_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_AzimuthAng_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_AzimuthAng ()
      {
        return this->SimSlab_AzimuthAng_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_AzimuthAng (const SimSlab_AzimuthAng_type& x)
      {
        this->SimSlab_AzimuthAng_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_AzimuthAng (const SimSlab_AzimuthAng_optional& x)
      {
        this->SimSlab_AzimuthAng_ = x;
      }

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_TiltAng_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_TiltAng () const
      {
        return this->SimSlab_TiltAng_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_TiltAng_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_TiltAng ()
      {
        return this->SimSlab_TiltAng_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_TiltAng (const SimSlab_TiltAng_type& x)
      {
        this->SimSlab_TiltAng_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_TiltAng (const SimSlab_TiltAng_optional& x)
      {
        this->SimSlab_TiltAng_ = x;
      }

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_StartXCoord_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartXCoord () const
      {
        return this->SimSlab_StartXCoord_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_StartXCoord_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartXCoord ()
      {
        return this->SimSlab_StartXCoord_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartXCoord (const SimSlab_StartXCoord_type& x)
      {
        this->SimSlab_StartXCoord_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartXCoord (const SimSlab_StartXCoord_optional& x)
      {
        this->SimSlab_StartXCoord_ = x;
      }

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_StartYCoord_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartYCoord () const
      {
        return this->SimSlab_StartYCoord_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_StartYCoord_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartYCoord ()
      {
        return this->SimSlab_StartYCoord_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartYCoord (const SimSlab_StartYCoord_type& x)
      {
        this->SimSlab_StartYCoord_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartYCoord (const SimSlab_StartYCoord_optional& x)
      {
        this->SimSlab_StartYCoord_ = x;
      }

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_StartZCoord_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartZCoord () const
      {
        return this->SimSlab_StartZCoord_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_StartZCoord_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartZCoord ()
      {
        return this->SimSlab_StartZCoord_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartZCoord (const SimSlab_StartZCoord_type& x)
      {
        this->SimSlab_StartZCoord_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_StartZCoord (const SimSlab_StartZCoord_optional& x)
      {
        this->SimSlab_StartZCoord_ = x;
      }

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_Length_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Length () const
      {
        return this->SimSlab_Length_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_Length_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Length ()
      {
        return this->SimSlab_Length_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Length (const SimSlab_Length_type& x)
      {
        this->SimSlab_Length_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Length (const SimSlab_Length_optional& x)
      {
        this->SimSlab_Length_ = x;
      }

      const SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_Width_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Width () const
      {
        return this->SimSlab_Width_;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::SimSlab_Width_optional& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Width ()
      {
        return this->SimSlab_Width_;
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Width (const SimSlab_Width_type& x)
      {
        this->SimSlab_Width_.set (x);
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Width (const SimSlab_Width_optional& x)
      {
        this->SimSlab_Width_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSlab_Ceiling_InterzoneCeilingAdiabatic
      //

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic ()
      : ::schema::simxml::BuildingModel::SimSlab_Ceiling (),
        SimSlab_AzimuthAng_ (this),
        SimSlab_TiltAng_ (this),
        SimSlab_StartXCoord_ (this),
        SimSlab_StartYCoord_ (this),
        SimSlab_StartZCoord_ (this),
        SimSlab_Length_ (this),
        SimSlab_Width_ (this)
      {
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSlab_Ceiling (RefId),
        SimSlab_AzimuthAng_ (this),
        SimSlab_TiltAng_ (this),
        SimSlab_StartXCoord_ (this),
        SimSlab_StartYCoord_ (this),
        SimSlab_StartZCoord_ (this),
        SimSlab_Length_ (this),
        SimSlab_Width_ (this)
      {
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic (const SimSlab_Ceiling_InterzoneCeilingAdiabatic& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSlab_Ceiling (x, f, c),
        SimSlab_AzimuthAng_ (x.SimSlab_AzimuthAng_, f, this),
        SimSlab_TiltAng_ (x.SimSlab_TiltAng_, f, this),
        SimSlab_StartXCoord_ (x.SimSlab_StartXCoord_, f, this),
        SimSlab_StartYCoord_ (x.SimSlab_StartYCoord_, f, this),
        SimSlab_StartZCoord_ (x.SimSlab_StartZCoord_, f, this),
        SimSlab_Length_ (x.SimSlab_Length_, f, this),
        SimSlab_Width_ (x.SimSlab_Width_, f, this)
      {
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      SimSlab_Ceiling_InterzoneCeilingAdiabatic (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSlab_Ceiling (e, f | ::xml_schema::flags::base, c),
        SimSlab_AzimuthAng_ (this),
        SimSlab_TiltAng_ (this),
        SimSlab_StartXCoord_ (this),
        SimSlab_StartYCoord_ (this),
        SimSlab_StartZCoord_ (this),
        SimSlab_Length_ (this),
        SimSlab_Width_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSlab_Ceiling::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSlab_AzimuthAng
          //
          if (n.name () == "SimSlab_AzimuthAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_AzimuthAng_)
            {
              this->SimSlab_AzimuthAng_.set (SimSlab_AzimuthAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_TiltAng
          //
          if (n.name () == "SimSlab_TiltAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_TiltAng_)
            {
              this->SimSlab_TiltAng_.set (SimSlab_TiltAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_StartXCoord
          //
          if (n.name () == "SimSlab_StartXCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_StartXCoord_)
            {
              this->SimSlab_StartXCoord_.set (SimSlab_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_StartYCoord
          //
          if (n.name () == "SimSlab_StartYCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_StartYCoord_)
            {
              this->SimSlab_StartYCoord_.set (SimSlab_StartYCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_StartZCoord
          //
          if (n.name () == "SimSlab_StartZCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_StartZCoord_)
            {
              this->SimSlab_StartZCoord_.set (SimSlab_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_Length
          //
          if (n.name () == "SimSlab_Length" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_Length_)
            {
              this->SimSlab_Length_.set (SimSlab_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimSlab_Width
          //
          if (n.name () == "SimSlab_Width" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSlab_Width_)
            {
              this->SimSlab_Width_.set (SimSlab_Width_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic* SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSlab_Ceiling_InterzoneCeilingAdiabatic (*this, f, c);
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic& SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      operator= (const SimSlab_Ceiling_InterzoneCeilingAdiabatic& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSlab_Ceiling& > (*this) = x;
          this->SimSlab_AzimuthAng_ = x.SimSlab_AzimuthAng_;
          this->SimSlab_TiltAng_ = x.SimSlab_TiltAng_;
          this->SimSlab_StartXCoord_ = x.SimSlab_StartXCoord_;
          this->SimSlab_StartYCoord_ = x.SimSlab_StartYCoord_;
          this->SimSlab_StartZCoord_ = x.SimSlab_StartZCoord_;
          this->SimSlab_Length_ = x.SimSlab_Length_;
          this->SimSlab_Width_ = x.SimSlab_Width_;
        }

        return *this;
      }

      SimSlab_Ceiling_InterzoneCeilingAdiabatic::
      ~SimSlab_Ceiling_InterzoneCeilingAdiabatic ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

