// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_EquivGlazingMaterial_Shade.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Shade
      // 

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_BeamSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamSolarTrans () const
      {
        return this->SimMaterial_ShadeBeam_BeamSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_BeamSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamSolarTrans ()
      {
        return this->SimMaterial_ShadeBeam_BeamSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamSolarTrans (const SimMaterial_ShadeBeam_BeamSolarTrans_type& x)
      {
        this->SimMaterial_ShadeBeam_BeamSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamSolarTrans (const SimMaterial_ShadeBeam_BeamSolarTrans_optional& x)
      {
        this->SimMaterial_ShadeBeam_BeamSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans (const SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans (const SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarTrans (const SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarTrans (const SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect (const SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect (const SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarReflect (const SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeBeam_DiffuseSolarReflect (const SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence () const
      {
        return this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence ()
      {
        return this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence (const SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_type& x)
      {
        this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence (const SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_optional& x)
      {
        this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence () const
      {
        return this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence ()
      {
        return this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence (const SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_type& x)
      {
        this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence (const SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_optional& x)
      {
        this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence () const
      {
        return this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence ()
      {
        return this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence (const SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_type& x)
      {
        this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence (const SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_optional& x)
      {
        this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeMaterialInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeMaterialInfraredTrans () const
      {
        return this->SimMaterial_ShadeMaterialInfraredTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_ShadeMaterialInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeMaterialInfraredTrans ()
      {
        return this->SimMaterial_ShadeMaterialInfraredTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeMaterialInfraredTrans (const SimMaterial_ShadeMaterialInfraredTrans_type& x)
      {
        this->SimMaterial_ShadeMaterialInfraredTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_ShadeMaterialInfraredTrans (const SimMaterial_ShadeMaterialInfraredTrans_optional& x)
      {
        this->SimMaterial_ShadeMaterialInfraredTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_FrontSideShadeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeMaterialInfraredEmissivity () const
      {
        return this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_FrontSideShadeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeMaterialInfraredEmissivity ()
      {
        return this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeMaterialInfraredEmissivity (const SimMaterial_FrontSideShadeMaterialInfraredEmissivity_type& x)
      {
        this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_FrontSideShadeMaterialInfraredEmissivity (const SimMaterial_FrontSideShadeMaterialInfraredEmissivity_optional& x)
      {
        this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_BackSideShadeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeMaterialInfraredEmissivity () const
      {
        return this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Shade::SimMaterial_BackSideShadeMaterialInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeMaterialInfraredEmissivity ()
      {
        return this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeMaterialInfraredEmissivity (const SimMaterial_BackSideShadeMaterialInfraredEmissivity_type& x)
      {
        this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_BackSideShadeMaterialInfraredEmissivity (const SimMaterial_BackSideShadeMaterialInfraredEmissivity_optional& x)
      {
        this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Shade
      //

      SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_EquivGlazingMaterial_Shade ()
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (),
        SimMaterial_ShadeBeam_BeamSolarTrans_ (this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_ (this),
        SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_ (this),
        SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_ (this),
        SimMaterial_ShadeMaterialInfraredTrans_ (this),
        SimMaterial_FrontSideShadeMaterialInfraredEmissivity_ (this),
        SimMaterial_BackSideShadeMaterialInfraredEmissivity_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_EquivGlazingMaterial_Shade (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (RefId),
        SimMaterial_ShadeBeam_BeamSolarTrans_ (this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_ (this),
        SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_ (this),
        SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_ (this),
        SimMaterial_ShadeMaterialInfraredTrans_ (this),
        SimMaterial_FrontSideShadeMaterialInfraredEmissivity_ (this),
        SimMaterial_BackSideShadeMaterialInfraredEmissivity_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_EquivGlazingMaterial_Shade (const SimMaterial_EquivGlazingMaterial_Shade& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (x, f, c),
        SimMaterial_ShadeBeam_BeamSolarTrans_ (x.SimMaterial_ShadeBeam_BeamSolarTrans_, f, this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_ (x.SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_ (x.SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_ (x.SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_ (x.SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_ (x.SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_, f, this),
        SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_ (x.SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_, f, this),
        SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_ (x.SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_, f, this),
        SimMaterial_ShadeMaterialInfraredTrans_ (x.SimMaterial_ShadeMaterialInfraredTrans_, f, this),
        SimMaterial_FrontSideShadeMaterialInfraredEmissivity_ (x.SimMaterial_FrontSideShadeMaterialInfraredEmissivity_, f, this),
        SimMaterial_BackSideShadeMaterialInfraredEmissivity_ (x.SimMaterial_BackSideShadeMaterialInfraredEmissivity_, f, this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Shade::
      SimMaterial_EquivGlazingMaterial_Shade (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_ShadeBeam_BeamSolarTrans_ (this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_ (this),
        SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_ (this),
        SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_ (this),
        SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_ (this),
        SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_ (this),
        SimMaterial_ShadeMaterialInfraredTrans_ (this),
        SimMaterial_FrontSideShadeMaterialInfraredEmissivity_ (this),
        SimMaterial_BackSideShadeMaterialInfraredEmissivity_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_EquivGlazingMaterial_Shade::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_ShadeBeam_BeamSolarTrans
          //
          if (n.name () == "SimMaterial_ShadeBeam_BeamSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ShadeBeam_BeamSolarTrans_)
            {
              this->SimMaterial_ShadeBeam_BeamSolarTrans_.set (SimMaterial_ShadeBeam_BeamSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_.set (SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideShadeBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_BackSideShadeBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_.set (SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_.set (SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideShadeBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_BackSideShadeBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_.set (SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence
          //
          if (n.name () == "SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_)
            {
              this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_.set (SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence
          //
          if (n.name () == "SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_)
            {
              this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_.set (SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence
          //
          if (n.name () == "SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_)
            {
              this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_.set (SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ShadeMaterialInfraredTrans
          //
          if (n.name () == "SimMaterial_ShadeMaterialInfraredTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ShadeMaterialInfraredTrans_)
            {
              this->SimMaterial_ShadeMaterialInfraredTrans_.set (SimMaterial_ShadeMaterialInfraredTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideShadeMaterialInfraredEmissivity
          //
          if (n.name () == "SimMaterial_FrontSideShadeMaterialInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_)
            {
              this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_.set (SimMaterial_FrontSideShadeMaterialInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideShadeMaterialInfraredEmissivity
          //
          if (n.name () == "SimMaterial_BackSideShadeMaterialInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_)
            {
              this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_.set (SimMaterial_BackSideShadeMaterialInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_EquivGlazingMaterial_Shade* SimMaterial_EquivGlazingMaterial_Shade::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_EquivGlazingMaterial_Shade (*this, f, c);
      }

      SimMaterial_EquivGlazingMaterial_Shade& SimMaterial_EquivGlazingMaterial_Shade::
      operator= (const SimMaterial_EquivGlazingMaterial_Shade& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial& > (*this) = x;
          this->SimMaterial_ShadeBeam_BeamSolarTrans_ = x.SimMaterial_ShadeBeam_BeamSolarTrans_;
          this->SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_ = x.SimMaterial_FrontSideShadeBeam_DiffuseSolarTrans_;
          this->SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_ = x.SimMaterial_BackSideShadeBeam_DiffuseSolarTrans_;
          this->SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_ = x.SimMaterial_FrontSideShadeBeam_DiffuseSolarReflect_;
          this->SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_ = x.SimMaterial_BackSideShadeBeam_DiffuseSolarReflect_;
          this->SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_ = x.SimMaterial_ShadeBeam_BeamVisibleTransatNormalIncidence_;
          this->SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_ = x.SimMaterial_ShadeBeam_DiffuseVisibleTransatNormalIncidence_;
          this->SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_ = x.SimMaterial_ShadeBeam_DiffuseVisibleReflectatNormalIncidence_;
          this->SimMaterial_ShadeMaterialInfraredTrans_ = x.SimMaterial_ShadeMaterialInfraredTrans_;
          this->SimMaterial_FrontSideShadeMaterialInfraredEmissivity_ = x.SimMaterial_FrontSideShadeMaterialInfraredEmissivity_;
          this->SimMaterial_BackSideShadeMaterialInfraredEmissivity_ = x.SimMaterial_BackSideShadeMaterialInfraredEmissivity_;
        }

        return *this;
      }

      SimMaterial_EquivGlazingMaterial_Shade::
      ~SimMaterial_EquivGlazingMaterial_Shade ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

