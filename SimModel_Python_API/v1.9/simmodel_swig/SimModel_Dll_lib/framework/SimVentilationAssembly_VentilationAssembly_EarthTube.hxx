// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_VENTILATION_ASSEMBLY_VENTILATION_ASSEMBLY_EARTH_TUBE_HXX
#define SIM_VENTILATION_ASSEMBLY_VENTILATION_ASSEMBLY_EARTH_TUBE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimVentilationAssembly_VentilationAssembly_EarthTube;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simventilationassembly_ventilationassembly.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimVentilationAssembly_VentilationAssembly_EarthTube: public ::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly
      {
        public:
        // SimVentilationAssembly_SchedName
        //
        typedef ::xml_schema::idref SimVentilationAssembly_SchedName_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_SchedName_type > SimVentilationAssembly_SchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_SchedName_type, char > SimVentilationAssembly_SchedName_traits;

        const SimVentilationAssembly_SchedName_optional&
        SimVentilationAssembly_SchedName () const;

        SimVentilationAssembly_SchedName_optional&
        SimVentilationAssembly_SchedName ();

        void
        SimVentilationAssembly_SchedName (const SimVentilationAssembly_SchedName_type& x);

        void
        SimVentilationAssembly_SchedName (const SimVentilationAssembly_SchedName_optional& x);

        void
        SimVentilationAssembly_SchedName (::std::auto_ptr< SimVentilationAssembly_SchedName_type > p);

        // SimVentilationAssembly_ZoneName
        //
        typedef ::xml_schema::idref SimVentilationAssembly_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_ZoneName_type > SimVentilationAssembly_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_ZoneName_type, char > SimVentilationAssembly_ZoneName_traits;

        const SimVentilationAssembly_ZoneName_optional&
        SimVentilationAssembly_ZoneName () const;

        SimVentilationAssembly_ZoneName_optional&
        SimVentilationAssembly_ZoneName ();

        void
        SimVentilationAssembly_ZoneName (const SimVentilationAssembly_ZoneName_type& x);

        void
        SimVentilationAssembly_ZoneName (const SimVentilationAssembly_ZoneName_optional& x);

        void
        SimVentilationAssembly_ZoneName (::std::auto_ptr< SimVentilationAssembly_ZoneName_type > p);

        // SimVentilationAssembly_DesignFlowRate
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_DesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_DesignFlowRate_type > SimVentilationAssembly_DesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_DesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_DesignFlowRate_traits;

        const SimVentilationAssembly_DesignFlowRate_optional&
        SimVentilationAssembly_DesignFlowRate () const;

        SimVentilationAssembly_DesignFlowRate_optional&
        SimVentilationAssembly_DesignFlowRate ();

        void
        SimVentilationAssembly_DesignFlowRate (const SimVentilationAssembly_DesignFlowRate_type& x);

        void
        SimVentilationAssembly_DesignFlowRate (const SimVentilationAssembly_DesignFlowRate_optional& x);

        // SimVentilationAssembly_MinZoneTempWhenCooling
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_MinZoneTempWhenCooling_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_MinZoneTempWhenCooling_type > SimVentilationAssembly_MinZoneTempWhenCooling_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_MinZoneTempWhenCooling_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_MinZoneTempWhenCooling_traits;

        const SimVentilationAssembly_MinZoneTempWhenCooling_optional&
        SimVentilationAssembly_MinZoneTempWhenCooling () const;

        SimVentilationAssembly_MinZoneTempWhenCooling_optional&
        SimVentilationAssembly_MinZoneTempWhenCooling ();

        void
        SimVentilationAssembly_MinZoneTempWhenCooling (const SimVentilationAssembly_MinZoneTempWhenCooling_type& x);

        void
        SimVentilationAssembly_MinZoneTempWhenCooling (const SimVentilationAssembly_MinZoneTempWhenCooling_optional& x);

        // SimVentilationAssembly_MaxZoneTempWhenHeating
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_MaxZoneTempWhenHeating_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_MaxZoneTempWhenHeating_type > SimVentilationAssembly_MaxZoneTempWhenHeating_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_MaxZoneTempWhenHeating_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_MaxZoneTempWhenHeating_traits;

        const SimVentilationAssembly_MaxZoneTempWhenHeating_optional&
        SimVentilationAssembly_MaxZoneTempWhenHeating () const;

        SimVentilationAssembly_MaxZoneTempWhenHeating_optional&
        SimVentilationAssembly_MaxZoneTempWhenHeating ();

        void
        SimVentilationAssembly_MaxZoneTempWhenHeating (const SimVentilationAssembly_MaxZoneTempWhenHeating_type& x);

        void
        SimVentilationAssembly_MaxZoneTempWhenHeating (const SimVentilationAssembly_MaxZoneTempWhenHeating_optional& x);

        // SimVentilationAssembly_DeltaTemp
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_DeltaTemp_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_DeltaTemp_type > SimVentilationAssembly_DeltaTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_DeltaTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_DeltaTemp_traits;

        const SimVentilationAssembly_DeltaTemp_optional&
        SimVentilationAssembly_DeltaTemp () const;

        SimVentilationAssembly_DeltaTemp_optional&
        SimVentilationAssembly_DeltaTemp ();

        void
        SimVentilationAssembly_DeltaTemp (const SimVentilationAssembly_DeltaTemp_type& x);

        void
        SimVentilationAssembly_DeltaTemp (const SimVentilationAssembly_DeltaTemp_optional& x);

        // SimVentilationAssembly_EarthtubeType
        //
        typedef ::xml_schema::string SimVentilationAssembly_EarthtubeType_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_EarthtubeType_type > SimVentilationAssembly_EarthtubeType_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_EarthtubeType_type, char > SimVentilationAssembly_EarthtubeType_traits;

        const SimVentilationAssembly_EarthtubeType_optional&
        SimVentilationAssembly_EarthtubeType () const;

        SimVentilationAssembly_EarthtubeType_optional&
        SimVentilationAssembly_EarthtubeType ();

        void
        SimVentilationAssembly_EarthtubeType (const SimVentilationAssembly_EarthtubeType_type& x);

        void
        SimVentilationAssembly_EarthtubeType (const SimVentilationAssembly_EarthtubeType_optional& x);

        void
        SimVentilationAssembly_EarthtubeType (::std::auto_ptr< SimVentilationAssembly_EarthtubeType_type > p);

        // SimVentilationAssembly_FanPresRise
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_FanPresRise_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_FanPresRise_type > SimVentilationAssembly_FanPresRise_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_FanPresRise_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_FanPresRise_traits;

        const SimVentilationAssembly_FanPresRise_optional&
        SimVentilationAssembly_FanPresRise () const;

        SimVentilationAssembly_FanPresRise_optional&
        SimVentilationAssembly_FanPresRise ();

        void
        SimVentilationAssembly_FanPresRise (const SimVentilationAssembly_FanPresRise_type& x);

        void
        SimVentilationAssembly_FanPresRise (const SimVentilationAssembly_FanPresRise_optional& x);

        // SimVentilationAssembly_FanTotalEff
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_FanTotalEff_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_FanTotalEff_type > SimVentilationAssembly_FanTotalEff_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_FanTotalEff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_FanTotalEff_traits;

        const SimVentilationAssembly_FanTotalEff_optional&
        SimVentilationAssembly_FanTotalEff () const;

        SimVentilationAssembly_FanTotalEff_optional&
        SimVentilationAssembly_FanTotalEff ();

        void
        SimVentilationAssembly_FanTotalEff (const SimVentilationAssembly_FanTotalEff_type& x);

        void
        SimVentilationAssembly_FanTotalEff (const SimVentilationAssembly_FanTotalEff_optional& x);

        // SimVentilationAssembly_PipeRadius
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_PipeRadius_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_PipeRadius_type > SimVentilationAssembly_PipeRadius_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_PipeRadius_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_PipeRadius_traits;

        const SimVentilationAssembly_PipeRadius_optional&
        SimVentilationAssembly_PipeRadius () const;

        SimVentilationAssembly_PipeRadius_optional&
        SimVentilationAssembly_PipeRadius ();

        void
        SimVentilationAssembly_PipeRadius (const SimVentilationAssembly_PipeRadius_type& x);

        void
        SimVentilationAssembly_PipeRadius (const SimVentilationAssembly_PipeRadius_optional& x);

        // SimVentilationAssembly_PipeThick
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_PipeThick_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_PipeThick_type > SimVentilationAssembly_PipeThick_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_PipeThick_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_PipeThick_traits;

        const SimVentilationAssembly_PipeThick_optional&
        SimVentilationAssembly_PipeThick () const;

        SimVentilationAssembly_PipeThick_optional&
        SimVentilationAssembly_PipeThick ();

        void
        SimVentilationAssembly_PipeThick (const SimVentilationAssembly_PipeThick_type& x);

        void
        SimVentilationAssembly_PipeThick (const SimVentilationAssembly_PipeThick_optional& x);

        // SimVentilationAssembly_PipeLength
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_PipeLength_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_PipeLength_type > SimVentilationAssembly_PipeLength_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_PipeLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_PipeLength_traits;

        const SimVentilationAssembly_PipeLength_optional&
        SimVentilationAssembly_PipeLength () const;

        SimVentilationAssembly_PipeLength_optional&
        SimVentilationAssembly_PipeLength ();

        void
        SimVentilationAssembly_PipeLength (const SimVentilationAssembly_PipeLength_type& x);

        void
        SimVentilationAssembly_PipeLength (const SimVentilationAssembly_PipeLength_optional& x);

        // SimVentilationAssembly_PipeThermalCond
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_PipeThermalCond_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_PipeThermalCond_type > SimVentilationAssembly_PipeThermalCond_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_PipeThermalCond_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_PipeThermalCond_traits;

        const SimVentilationAssembly_PipeThermalCond_optional&
        SimVentilationAssembly_PipeThermalCond () const;

        SimVentilationAssembly_PipeThermalCond_optional&
        SimVentilationAssembly_PipeThermalCond ();

        void
        SimVentilationAssembly_PipeThermalCond (const SimVentilationAssembly_PipeThermalCond_type& x);

        void
        SimVentilationAssembly_PipeThermalCond (const SimVentilationAssembly_PipeThermalCond_optional& x);

        // SimVentilationAssembly_PipeDepthUnderGroundSurf
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_PipeDepthUnderGroundSurf_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_PipeDepthUnderGroundSurf_type > SimVentilationAssembly_PipeDepthUnderGroundSurf_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_PipeDepthUnderGroundSurf_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_PipeDepthUnderGroundSurf_traits;

        const SimVentilationAssembly_PipeDepthUnderGroundSurf_optional&
        SimVentilationAssembly_PipeDepthUnderGroundSurf () const;

        SimVentilationAssembly_PipeDepthUnderGroundSurf_optional&
        SimVentilationAssembly_PipeDepthUnderGroundSurf ();

        void
        SimVentilationAssembly_PipeDepthUnderGroundSurf (const SimVentilationAssembly_PipeDepthUnderGroundSurf_type& x);

        void
        SimVentilationAssembly_PipeDepthUnderGroundSurf (const SimVentilationAssembly_PipeDepthUnderGroundSurf_optional& x);

        // SimVentilationAssembly_SoilCondition
        //
        typedef ::xml_schema::string SimVentilationAssembly_SoilCondition_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_SoilCondition_type > SimVentilationAssembly_SoilCondition_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_SoilCondition_type, char > SimVentilationAssembly_SoilCondition_traits;

        const SimVentilationAssembly_SoilCondition_optional&
        SimVentilationAssembly_SoilCondition () const;

        SimVentilationAssembly_SoilCondition_optional&
        SimVentilationAssembly_SoilCondition ();

        void
        SimVentilationAssembly_SoilCondition (const SimVentilationAssembly_SoilCondition_type& x);

        void
        SimVentilationAssembly_SoilCondition (const SimVentilationAssembly_SoilCondition_optional& x);

        void
        SimVentilationAssembly_SoilCondition (::std::auto_ptr< SimVentilationAssembly_SoilCondition_type > p);

        // SimVentilationAssembly_AverageSoilSurfTemp
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_AverageSoilSurfTemp_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_AverageSoilSurfTemp_type > SimVentilationAssembly_AverageSoilSurfTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_AverageSoilSurfTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_AverageSoilSurfTemp_traits;

        const SimVentilationAssembly_AverageSoilSurfTemp_optional&
        SimVentilationAssembly_AverageSoilSurfTemp () const;

        SimVentilationAssembly_AverageSoilSurfTemp_optional&
        SimVentilationAssembly_AverageSoilSurfTemp ();

        void
        SimVentilationAssembly_AverageSoilSurfTemp (const SimVentilationAssembly_AverageSoilSurfTemp_type& x);

        void
        SimVentilationAssembly_AverageSoilSurfTemp (const SimVentilationAssembly_AverageSoilSurfTemp_optional& x);

        // SimVentilationAssembly_AmplSoilSurfTemp
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_AmplSoilSurfTemp_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_AmplSoilSurfTemp_type > SimVentilationAssembly_AmplSoilSurfTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_AmplSoilSurfTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_AmplSoilSurfTemp_traits;

        const SimVentilationAssembly_AmplSoilSurfTemp_optional&
        SimVentilationAssembly_AmplSoilSurfTemp () const;

        SimVentilationAssembly_AmplSoilSurfTemp_optional&
        SimVentilationAssembly_AmplSoilSurfTemp ();

        void
        SimVentilationAssembly_AmplSoilSurfTemp (const SimVentilationAssembly_AmplSoilSurfTemp_type& x);

        void
        SimVentilationAssembly_AmplSoilSurfTemp (const SimVentilationAssembly_AmplSoilSurfTemp_optional& x);

        // SimVentilationAssembly_PhaseConstSoilSurfTemp
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_PhaseConstSoilSurfTemp_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_PhaseConstSoilSurfTemp_type > SimVentilationAssembly_PhaseConstSoilSurfTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_PhaseConstSoilSurfTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_PhaseConstSoilSurfTemp_traits;

        const SimVentilationAssembly_PhaseConstSoilSurfTemp_optional&
        SimVentilationAssembly_PhaseConstSoilSurfTemp () const;

        SimVentilationAssembly_PhaseConstSoilSurfTemp_optional&
        SimVentilationAssembly_PhaseConstSoilSurfTemp ();

        void
        SimVentilationAssembly_PhaseConstSoilSurfTemp (const SimVentilationAssembly_PhaseConstSoilSurfTemp_type& x);

        void
        SimVentilationAssembly_PhaseConstSoilSurfTemp (const SimVentilationAssembly_PhaseConstSoilSurfTemp_optional& x);

        // SimVentilationAssembly_ConstTermFlowCoef
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_ConstTermFlowCoef_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_ConstTermFlowCoef_type > SimVentilationAssembly_ConstTermFlowCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_ConstTermFlowCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_ConstTermFlowCoef_traits;

        const SimVentilationAssembly_ConstTermFlowCoef_optional&
        SimVentilationAssembly_ConstTermFlowCoef () const;

        SimVentilationAssembly_ConstTermFlowCoef_optional&
        SimVentilationAssembly_ConstTermFlowCoef ();

        void
        SimVentilationAssembly_ConstTermFlowCoef (const SimVentilationAssembly_ConstTermFlowCoef_type& x);

        void
        SimVentilationAssembly_ConstTermFlowCoef (const SimVentilationAssembly_ConstTermFlowCoef_optional& x);

        // SimVentilationAssembly_TempTermFlowCoef
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_TempTermFlowCoef_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_TempTermFlowCoef_type > SimVentilationAssembly_TempTermFlowCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_TempTermFlowCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_TempTermFlowCoef_traits;

        const SimVentilationAssembly_TempTermFlowCoef_optional&
        SimVentilationAssembly_TempTermFlowCoef () const;

        SimVentilationAssembly_TempTermFlowCoef_optional&
        SimVentilationAssembly_TempTermFlowCoef ();

        void
        SimVentilationAssembly_TempTermFlowCoef (const SimVentilationAssembly_TempTermFlowCoef_type& x);

        void
        SimVentilationAssembly_TempTermFlowCoef (const SimVentilationAssembly_TempTermFlowCoef_optional& x);

        // SimVentilationAssembly_VeloTermFlowCoef
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_VeloTermFlowCoef_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_VeloTermFlowCoef_type > SimVentilationAssembly_VeloTermFlowCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_VeloTermFlowCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_VeloTermFlowCoef_traits;

        const SimVentilationAssembly_VeloTermFlowCoef_optional&
        SimVentilationAssembly_VeloTermFlowCoef () const;

        SimVentilationAssembly_VeloTermFlowCoef_optional&
        SimVentilationAssembly_VeloTermFlowCoef ();

        void
        SimVentilationAssembly_VeloTermFlowCoef (const SimVentilationAssembly_VeloTermFlowCoef_type& x);

        void
        SimVentilationAssembly_VeloTermFlowCoef (const SimVentilationAssembly_VeloTermFlowCoef_optional& x);

        // SimVentilationAssembly_VeloSquaredTermFlowCoef
        //
        typedef ::xml_schema::double_ SimVentilationAssembly_VeloSquaredTermFlowCoef_type;
        typedef ::xsd::cxx::tree::optional< SimVentilationAssembly_VeloSquaredTermFlowCoef_type > SimVentilationAssembly_VeloSquaredTermFlowCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimVentilationAssembly_VeloSquaredTermFlowCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimVentilationAssembly_VeloSquaredTermFlowCoef_traits;

        const SimVentilationAssembly_VeloSquaredTermFlowCoef_optional&
        SimVentilationAssembly_VeloSquaredTermFlowCoef () const;

        SimVentilationAssembly_VeloSquaredTermFlowCoef_optional&
        SimVentilationAssembly_VeloSquaredTermFlowCoef ();

        void
        SimVentilationAssembly_VeloSquaredTermFlowCoef (const SimVentilationAssembly_VeloSquaredTermFlowCoef_type& x);

        void
        SimVentilationAssembly_VeloSquaredTermFlowCoef (const SimVentilationAssembly_VeloSquaredTermFlowCoef_optional& x);

        // Constructors.
        //
        SimVentilationAssembly_VentilationAssembly_EarthTube ();

        SimVentilationAssembly_VentilationAssembly_EarthTube (const RefId_type&);

        SimVentilationAssembly_VentilationAssembly_EarthTube (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f = 0,
                                                              ::xml_schema::container* c = 0);

        SimVentilationAssembly_VentilationAssembly_EarthTube (const SimVentilationAssembly_VentilationAssembly_EarthTube& x,
                                                              ::xml_schema::flags f = 0,
                                                              ::xml_schema::container* c = 0);

        virtual SimVentilationAssembly_VentilationAssembly_EarthTube*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimVentilationAssembly_VentilationAssembly_EarthTube&
        operator= (const SimVentilationAssembly_VentilationAssembly_EarthTube& x);

        virtual 
        ~SimVentilationAssembly_VentilationAssembly_EarthTube ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimVentilationAssembly_SchedName_optional SimVentilationAssembly_SchedName_;
        SimVentilationAssembly_ZoneName_optional SimVentilationAssembly_ZoneName_;
        SimVentilationAssembly_DesignFlowRate_optional SimVentilationAssembly_DesignFlowRate_;
        SimVentilationAssembly_MinZoneTempWhenCooling_optional SimVentilationAssembly_MinZoneTempWhenCooling_;
        SimVentilationAssembly_MaxZoneTempWhenHeating_optional SimVentilationAssembly_MaxZoneTempWhenHeating_;
        SimVentilationAssembly_DeltaTemp_optional SimVentilationAssembly_DeltaTemp_;
        SimVentilationAssembly_EarthtubeType_optional SimVentilationAssembly_EarthtubeType_;
        SimVentilationAssembly_FanPresRise_optional SimVentilationAssembly_FanPresRise_;
        SimVentilationAssembly_FanTotalEff_optional SimVentilationAssembly_FanTotalEff_;
        SimVentilationAssembly_PipeRadius_optional SimVentilationAssembly_PipeRadius_;
        SimVentilationAssembly_PipeThick_optional SimVentilationAssembly_PipeThick_;
        SimVentilationAssembly_PipeLength_optional SimVentilationAssembly_PipeLength_;
        SimVentilationAssembly_PipeThermalCond_optional SimVentilationAssembly_PipeThermalCond_;
        SimVentilationAssembly_PipeDepthUnderGroundSurf_optional SimVentilationAssembly_PipeDepthUnderGroundSurf_;
        SimVentilationAssembly_SoilCondition_optional SimVentilationAssembly_SoilCondition_;
        SimVentilationAssembly_AverageSoilSurfTemp_optional SimVentilationAssembly_AverageSoilSurfTemp_;
        SimVentilationAssembly_AmplSoilSurfTemp_optional SimVentilationAssembly_AmplSoilSurfTemp_;
        SimVentilationAssembly_PhaseConstSoilSurfTemp_optional SimVentilationAssembly_PhaseConstSoilSurfTemp_;
        SimVentilationAssembly_ConstTermFlowCoef_optional SimVentilationAssembly_ConstTermFlowCoef_;
        SimVentilationAssembly_TempTermFlowCoef_optional SimVentilationAssembly_TempTermFlowCoef_;
        SimVentilationAssembly_VeloTermFlowCoef_optional SimVentilationAssembly_VeloTermFlowCoef_;
        SimVentilationAssembly_VeloSquaredTermFlowCoef_optional SimVentilationAssembly_VeloSquaredTermFlowCoef_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_VENTILATION_ASSEMBLY_VENTILATION_ASSEMBLY_EARTH_TUBE_HXX
