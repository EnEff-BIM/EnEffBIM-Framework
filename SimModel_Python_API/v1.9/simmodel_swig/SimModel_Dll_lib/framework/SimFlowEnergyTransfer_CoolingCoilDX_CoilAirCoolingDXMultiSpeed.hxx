// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_DX_COIL_AIR_COOLING_DXMULTI_SPEED_HXX
#define SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_DX_COIL_AIR_COOLING_DXMULTI_SPEED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_coolingcoildx.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilDX
      {
        public:
        // SimFlowEnergyTrans_Name
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Name_type > SimFlowEnergyTrans_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Name_type, char > SimFlowEnergyTrans_Name_traits;

        const SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name () const;

        SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name ();

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x);

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x);

        void
        SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > p);

        // SimFlowEnergyTrans_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AvailSchedName_type > SimFlowEnergyTrans_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AvailSchedName_type, char > SimFlowEnergyTrans_AvailSchedName_traits;

        const SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName () const;

        SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName ();

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x);

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x);

        void
        SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > p);

        // SimFlowEnergyTrans_FuelType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_FuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_FuelType_type > SimFlowEnergyTrans_FuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_FuelType_type, char > SimFlowEnergyTrans_FuelType_traits;

        const SimFlowEnergyTrans_FuelType_optional&
        SimFlowEnergyTrans_FuelType () const;

        SimFlowEnergyTrans_FuelType_optional&
        SimFlowEnergyTrans_FuelType ();

        void
        SimFlowEnergyTrans_FuelType (const SimFlowEnergyTrans_FuelType_type& x);

        void
        SimFlowEnergyTrans_FuelType (const SimFlowEnergyTrans_FuelType_optional& x);

        void
        SimFlowEnergyTrans_FuelType (::std::auto_ptr< SimFlowEnergyTrans_FuelType_type > p);

        // SimFlowEnergyTrans_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AirInNodeName_type > SimFlowEnergyTrans_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AirInNodeName_type, char > SimFlowEnergyTrans_AirInNodeName_traits;

        const SimFlowEnergyTrans_AirInNodeName_optional&
        SimFlowEnergyTrans_AirInNodeName () const;

        SimFlowEnergyTrans_AirInNodeName_optional&
        SimFlowEnergyTrans_AirInNodeName ();

        void
        SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x);

        void
        SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x);

        void
        SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > p);

        // SimFlowEnergyTrans_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AirOutNodeName_type > SimFlowEnergyTrans_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AirOutNodeName_type, char > SimFlowEnergyTrans_AirOutNodeName_traits;

        const SimFlowEnergyTrans_AirOutNodeName_optional&
        SimFlowEnergyTrans_AirOutNodeName () const;

        SimFlowEnergyTrans_AirOutNodeName_optional&
        SimFlowEnergyTrans_AirOutNodeName ();

        void
        SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x);

        void
        SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x);

        void
        SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > p);

        // SimFlowEnergyTrans_CondsCollectionWaterStorageTankName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type, char > SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_traits;

        const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional&
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName () const;

        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional&
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName ();

        void
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type& x);

        void
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& x);

        void
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > p);

        // SimFlowEnergyTrans_CondAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondAirInletNodeName_type > SimFlowEnergyTrans_CondAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondAirInletNodeName_type, char > SimFlowEnergyTrans_CondAirInletNodeName_traits;

        const SimFlowEnergyTrans_CondAirInletNodeName_optional&
        SimFlowEnergyTrans_CondAirInletNodeName () const;

        SimFlowEnergyTrans_CondAirInletNodeName_optional&
        SimFlowEnergyTrans_CondAirInletNodeName ();

        void
        SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_type& x);

        void
        SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_CondAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondAirInletNodeName_type > p);

        // SimFlowEnergyTrans_CondType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondType_type > SimFlowEnergyTrans_CondType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondType_type, char > SimFlowEnergyTrans_CondType_traits;

        const SimFlowEnergyTrans_CondType_optional&
        SimFlowEnergyTrans_CondType () const;

        SimFlowEnergyTrans_CondType_optional&
        SimFlowEnergyTrans_CondType ();

        void
        SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_type& x);

        void
        SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_optional& x);

        void
        SimFlowEnergyTrans_CondType (::std::auto_ptr< SimFlowEnergyTrans_CondType_type > p);

        // SimFlowEnergyTrans_CrankcaseHeatCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_CrankcaseHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CrankcaseHeatCap_type > SimFlowEnergyTrans_CrankcaseHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CrankcaseHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_CrankcaseHeatCap_traits;

        const SimFlowEnergyTrans_CrankcaseHeatCap_optional&
        SimFlowEnergyTrans_CrankcaseHeatCap () const;

        SimFlowEnergyTrans_CrankcaseHeatCap_optional&
        SimFlowEnergyTrans_CrankcaseHeatCap ();

        void
        SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_type& x);

        void
        SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_optional& x);

        // SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type > SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_traits;

        const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional&
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp () const;

        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional&
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp ();

        void
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type& x);

        void
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& x);

        // SimFlowEnergyTrans_SupWaterStoTankName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_SupWaterStoTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SupWaterStoTankName_type > SimFlowEnergyTrans_SupWaterStoTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SupWaterStoTankName_type, char > SimFlowEnergyTrans_SupWaterStoTankName_traits;

        const SimFlowEnergyTrans_SupWaterStoTankName_optional&
        SimFlowEnergyTrans_SupWaterStoTankName () const;

        SimFlowEnergyTrans_SupWaterStoTankName_optional&
        SimFlowEnergyTrans_SupWaterStoTankName ();

        void
        SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x);

        void
        SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x);

        void
        SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > p);

        // SimFlowEnergyTrans_BasinHeatCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_BasinHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BasinHeatCap_type > SimFlowEnergyTrans_BasinHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BasinHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_BasinHeatCap_traits;

        const SimFlowEnergyTrans_BasinHeatCap_optional&
        SimFlowEnergyTrans_BasinHeatCap () const;

        SimFlowEnergyTrans_BasinHeatCap_optional&
        SimFlowEnergyTrans_BasinHeatCap ();

        void
        SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_type& x);

        void
        SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_optional& x);

        // SimFlowEnergyTrans_BasinHeatSetpointTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_BasinHeatSetpointTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BasinHeatSetpointTemp_type > SimFlowEnergyTrans_BasinHeatSetpointTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BasinHeatSetpointTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_BasinHeatSetpointTemp_traits;

        const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional&
        SimFlowEnergyTrans_BasinHeatSetpointTemp () const;

        SimFlowEnergyTrans_BasinHeatSetpointTemp_optional&
        SimFlowEnergyTrans_BasinHeatSetpointTemp ();

        void
        SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_type& x);

        void
        SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& x);

        // SimFlowEnergyTrans_BasinHeatOperatSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_BasinHeatOperatSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > SimFlowEnergyTrans_BasinHeatOperatSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BasinHeatOperatSchedName_type, char > SimFlowEnergyTrans_BasinHeatOperatSchedName_traits;

        const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional&
        SimFlowEnergyTrans_BasinHeatOperatSchedName () const;

        SimFlowEnergyTrans_BasinHeatOperatSchedName_optional&
        SimFlowEnergyTrans_BasinHeatOperatSchedName ();

        void
        SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_type& x);

        void
        SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& x);

        void
        SimFlowEnergyTrans_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > p);

        // SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_type > SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_type, char > SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_traits;

        const SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_optional&
        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1 () const;

        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_optional&
        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1 ();

        void
        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1 (const SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_type& x);

        void
        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1 (const SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_optional& x);

        void
        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1 (::std::auto_ptr< SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_type > p);

        // SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_type > SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_type, char > SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_traits;

        const SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_optional&
        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1 () const;

        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_optional&
        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1 ();

        void
        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1 (const SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_type& x);

        void
        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1 (const SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_optional& x);

        void
        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1 (::std::auto_ptr< SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_type > p);

        // SimFlowEnergyTrans_NumSpeeds
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_NumSpeeds_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NumSpeeds_type > SimFlowEnergyTrans_NumSpeeds_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NumSpeeds_type, char > SimFlowEnergyTrans_NumSpeeds_traits;

        const SimFlowEnergyTrans_NumSpeeds_optional&
        SimFlowEnergyTrans_NumSpeeds () const;

        SimFlowEnergyTrans_NumSpeeds_optional&
        SimFlowEnergyTrans_NumSpeeds ();

        void
        SimFlowEnergyTrans_NumSpeeds (const SimFlowEnergyTrans_NumSpeeds_type& x);

        void
        SimFlowEnergyTrans_NumSpeeds (const SimFlowEnergyTrans_NumSpeeds_optional& x);

        // SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_type > SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_type, char > SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_traits;

        const SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_optional&
        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap () const;

        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_optional&
        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap ();

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap (const SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_type& x);

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap (const SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_type > p);

        // SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_type > SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_type, char > SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_traits;

        const SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_optional&
        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio () const;

        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_optional&
        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio ();

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio (const SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_type& x);

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio (const SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_type > p);

        // SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_type > SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_type, char > SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_traits;

        const SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_optional&
        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP () const;

        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_optional&
        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP ();

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP (const SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_type& x);

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP (const SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_type > p);

        // SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_type > SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_type, char > SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_traits;

        const SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_optional&
        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4 () const;

        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_optional&
        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4 ();

        void
        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4 (const SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4 (const SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_type > p);

        // SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_type > SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_type, char > SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_traits;

        const SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_optional&
        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate () const;

        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_optional&
        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate ();

        void
        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate (const SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_type& x);

        void
        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate (const SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_optional& x);

        void
        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate (::std::auto_ptr< SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_type > p);

        // SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_type > SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_type, char > SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_traits;

        const SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4 () const;

        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4 ();

        void
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4 (const SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4 (const SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_type > p);

        // SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_type > SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_type, char > SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_traits;

        const SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4 () const;

        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4 ();

        void
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4 (const SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4 (const SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_type > p);

        // SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_type > SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_type, char > SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_traits;

        const SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4 () const;

        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4 ();

        void
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4 (const SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4 (const SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_type > p);

        // SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_type > SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_type, char > SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_traits;

        const SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4 () const;

        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4 ();

        void
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4 (const SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4 (const SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_type > p);

        // SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_type > SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_type, char > SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_traits;

        const SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4 () const;

        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4 ();

        void
        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4 (const SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4 (const SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_type > p);

        // SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_type > SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_type, char > SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_traits;

        const SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_optional&
        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4 () const;

        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_optional&
        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4 ();

        void
        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4 (const SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4 (const SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_type > p);

        // SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_type > SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_type, char > SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_traits;

        const SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_optional&
        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4 () const;

        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_optional&
        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4 ();

        void
        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4 (const SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_type& x);

        void
        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4 (const SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_type > p);

        // SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_type > SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_type, char > SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_traits;

        const SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_optional&
        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4 () const;

        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_optional&
        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4 ();

        void
        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4 (const SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4 (const SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_type > p);

        // SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_type > SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_type, char > SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_traits;

        const SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_optional&
        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4 () const;

        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_optional&
        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4 ();

        void
        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4 (const SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4 (const SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_type > p);

        // SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_type > SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_type, char > SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_traits;

        const SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_optional&
        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4 () const;

        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_optional&
        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4 ();

        void
        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4 (const SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4 (const SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_type > p);

        // SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_type > SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_type, char > SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_traits;

        const SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4 () const;

        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_optional&
        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4 ();

        void
        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4 (const SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4 (const SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_type > p);

        // SimFlowEnergyTrans_SpeedEvapCondEffect_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_type > SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_type, char > SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_traits;

        const SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_optional&
        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4 () const;

        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_optional&
        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4 ();

        void
        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4 (const SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4 (const SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_type > p);

        // SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_type > SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_type, char > SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_traits;

        const SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_optional&
        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4 () const;

        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_optional&
        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4 ();

        void
        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4 (const SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4 (const SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_type > p);

        // SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_type > SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_type, char > SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_traits;

        const SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_optional&
        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4 () const;

        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_optional&
        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4 ();

        void
        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4 (const SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_type& x);

        void
        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4 (const SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_optional& x);

        void
        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4 (::std::auto_ptr< SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_type > p);

        // Constructors.
        //
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed ();

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed (const RefId_type&);

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed (const ::xercesc::DOMElement& e,
                                                                        ::xml_schema::flags f = 0,
                                                                        ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed& x,
                                                                        ::xml_schema::flags f = 0,
                                                                        ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed&
        operator= (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed& x);

        virtual 
        ~SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXMultiSpeed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_Name_optional SimFlowEnergyTrans_Name_;
        SimFlowEnergyTrans_AvailSchedName_optional SimFlowEnergyTrans_AvailSchedName_;
        SimFlowEnergyTrans_FuelType_optional SimFlowEnergyTrans_FuelType_;
        SimFlowEnergyTrans_AirInNodeName_optional SimFlowEnergyTrans_AirInNodeName_;
        SimFlowEnergyTrans_AirOutNodeName_optional SimFlowEnergyTrans_AirOutNodeName_;
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
        SimFlowEnergyTrans_CondAirInletNodeName_optional SimFlowEnergyTrans_CondAirInletNodeName_;
        SimFlowEnergyTrans_CondType_optional SimFlowEnergyTrans_CondType_;
        SimFlowEnergyTrans_CrankcaseHeatCap_optional SimFlowEnergyTrans_CrankcaseHeatCap_;
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
        SimFlowEnergyTrans_SupWaterStoTankName_optional SimFlowEnergyTrans_SupWaterStoTankName_;
        SimFlowEnergyTrans_BasinHeatCap_optional SimFlowEnergyTrans_BasinHeatCap_;
        SimFlowEnergyTrans_BasinHeatSetpointTemp_optional SimFlowEnergyTrans_BasinHeatSetpointTemp_;
        SimFlowEnergyTrans_BasinHeatOperatSchedName_optional SimFlowEnergyTrans_BasinHeatOperatSchedName_;
        SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_optional SimFlowEnergyTrans_ApplyPartLoadFractToSpeedsGrtrThan1_;
        SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_optional SimFlowEnergyTrans_ApplyLatentDegradToSpeedsGrtrThan1_;
        SimFlowEnergyTrans_NumSpeeds_optional SimFlowEnergyTrans_NumSpeeds_;
        SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_optional SimFlowEnergyTrans_Speed_1_4_GrossRatedTotalCoolCap_;
        SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_optional SimFlowEnergyTrans_Speed_1_4_GrossRatedSensHeatRatio_;
        SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_optional SimFlowEnergyTrans_Speed_1_4_GrossRatedCoolCOP_;
        SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_optional SimFlowEnergyTrans_SpeedRatedAirFlowRate_1_4_;
        SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_optional SimFlowEnergyTrans_Spd_1_4_RatedEvapFanPwrPerVolumeFlowRate_;
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_optional SimFlowEnergyTrans_SpeedTotalCoolingCapFuncTempCurveName_1_4_;
        SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_optional SimFlowEnergyTrans_SpeedTotalCoolingCapFuncFlowFractCurveName_1_4_;
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_optional SimFlowEnergyTrans_SpeedEnergyInputRatioFuncTempCurveName_1_4_;
        SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_optional SimFlowEnergyTrans_SpeedEnergyInputRatioFuncFlowFractCurveName_1_4_;
        SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_optional SimFlowEnergyTrans_SpeedPartLoadFractCorrelCurveName_1_4_;
        SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_optional SimFlowEnergyTrans_SpeedNomTimeForCondsRemovToBegin_1_4_;
        SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_optional SimFlowEnergyTrans_SpdRatioOfInitMoistEvapRate_SteadyStateLtntCap_1_4_;
        SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_optional SimFlowEnergyTrans_SpeedMaxCyclingRate_1_4_;
        SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_optional SimFlowEnergyTrans_SpeedLatentCapTimeConst_1_4_;
        SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_optional SimFlowEnergyTrans_SpeedRatedWasteHeatFractPwrInput_1_4_;
        SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_optional SimFlowEnergyTrans_SpeedWasteHeatFuncTempCurveName_1_4_;
        SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_optional SimFlowEnergyTrans_SpeedEvapCondEffect_1_4_;
        SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_optional SimFlowEnergyTrans_SpeedEvapCondAirFlowRate_1_4_;
        SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_optional SimFlowEnergyTrans_SpeedRatedEvapCondPumpPwrConsump_1_4_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_DX_COIL_AIR_COOLING_DXMULTI_SPEED_HXX
