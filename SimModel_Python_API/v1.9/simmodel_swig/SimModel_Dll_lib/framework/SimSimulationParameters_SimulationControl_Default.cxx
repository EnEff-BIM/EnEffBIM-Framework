// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSimulationParameters_SimulationControl_Default.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSimulationParameters_SimulationControl_Default
      // 

      const SimSimulationParameters_SimulationControl_Default::SimSimParams_DoZoneSizingCalc_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoZoneSizingCalc () const
      {
        return this->SimSimParams_DoZoneSizingCalc_;
      }

      SimSimulationParameters_SimulationControl_Default::SimSimParams_DoZoneSizingCalc_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoZoneSizingCalc ()
      {
        return this->SimSimParams_DoZoneSizingCalc_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoZoneSizingCalc (const SimSimParams_DoZoneSizingCalc_type& x)
      {
        this->SimSimParams_DoZoneSizingCalc_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoZoneSizingCalc (const SimSimParams_DoZoneSizingCalc_optional& x)
      {
        this->SimSimParams_DoZoneSizingCalc_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoZoneSizingCalc (::std::auto_ptr< SimSimParams_DoZoneSizingCalc_type > x)
      {
        this->SimSimParams_DoZoneSizingCalc_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::SimSimParams_DoSysSizingCalc_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoSysSizingCalc () const
      {
        return this->SimSimParams_DoSysSizingCalc_;
      }

      SimSimulationParameters_SimulationControl_Default::SimSimParams_DoSysSizingCalc_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoSysSizingCalc ()
      {
        return this->SimSimParams_DoSysSizingCalc_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoSysSizingCalc (const SimSimParams_DoSysSizingCalc_type& x)
      {
        this->SimSimParams_DoSysSizingCalc_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoSysSizingCalc (const SimSimParams_DoSysSizingCalc_optional& x)
      {
        this->SimSimParams_DoSysSizingCalc_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoSysSizingCalc (::std::auto_ptr< SimSimParams_DoSysSizingCalc_type > x)
      {
        this->SimSimParams_DoSysSizingCalc_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::SimSimParams_DoPlantSizingCalc_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoPlantSizingCalc () const
      {
        return this->SimSimParams_DoPlantSizingCalc_;
      }

      SimSimulationParameters_SimulationControl_Default::SimSimParams_DoPlantSizingCalc_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoPlantSizingCalc ()
      {
        return this->SimSimParams_DoPlantSizingCalc_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoPlantSizingCalc (const SimSimParams_DoPlantSizingCalc_type& x)
      {
        this->SimSimParams_DoPlantSizingCalc_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoPlantSizingCalc (const SimSimParams_DoPlantSizingCalc_optional& x)
      {
        this->SimSimParams_DoPlantSizingCalc_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_DoPlantSizingCalc (::std::auto_ptr< SimSimParams_DoPlantSizingCalc_type > x)
      {
        this->SimSimParams_DoPlantSizingCalc_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::SimSimParams_RunSimForSizingPeriods_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForSizingPeriods () const
      {
        return this->SimSimParams_RunSimForSizingPeriods_;
      }

      SimSimulationParameters_SimulationControl_Default::SimSimParams_RunSimForSizingPeriods_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForSizingPeriods ()
      {
        return this->SimSimParams_RunSimForSizingPeriods_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForSizingPeriods (const SimSimParams_RunSimForSizingPeriods_type& x)
      {
        this->SimSimParams_RunSimForSizingPeriods_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForSizingPeriods (const SimSimParams_RunSimForSizingPeriods_optional& x)
      {
        this->SimSimParams_RunSimForSizingPeriods_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForSizingPeriods (::std::auto_ptr< SimSimParams_RunSimForSizingPeriods_type > x)
      {
        this->SimSimParams_RunSimForSizingPeriods_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::SimSimParams_RunSimForWeatherFileRunPeriods_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForWeatherFileRunPeriods () const
      {
        return this->SimSimParams_RunSimForWeatherFileRunPeriods_;
      }

      SimSimulationParameters_SimulationControl_Default::SimSimParams_RunSimForWeatherFileRunPeriods_optional& SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForWeatherFileRunPeriods ()
      {
        return this->SimSimParams_RunSimForWeatherFileRunPeriods_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForWeatherFileRunPeriods (const SimSimParams_RunSimForWeatherFileRunPeriods_type& x)
      {
        this->SimSimParams_RunSimForWeatherFileRunPeriods_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForWeatherFileRunPeriods (const SimSimParams_RunSimForWeatherFileRunPeriods_optional& x)
      {
        this->SimSimParams_RunSimForWeatherFileRunPeriods_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      SimSimParams_RunSimForWeatherFileRunPeriods (::std::auto_ptr< SimSimParams_RunSimForWeatherFileRunPeriods_type > x)
      {
        this->SimSimParams_RunSimForWeatherFileRunPeriods_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::Version_VersionIdentifier_optional& SimSimulationParameters_SimulationControl_Default::
      Version_VersionIdentifier () const
      {
        return this->Version_VersionIdentifier_;
      }

      SimSimulationParameters_SimulationControl_Default::Version_VersionIdentifier_optional& SimSimulationParameters_SimulationControl_Default::
      Version_VersionIdentifier ()
      {
        return this->Version_VersionIdentifier_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      Version_VersionIdentifier (const Version_VersionIdentifier_type& x)
      {
        this->Version_VersionIdentifier_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      Version_VersionIdentifier (const Version_VersionIdentifier_optional& x)
      {
        this->Version_VersionIdentifier_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      Version_VersionIdentifier (::std::auto_ptr< Version_VersionIdentifier_type > x)
      {
        this->Version_VersionIdentifier_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ShadowCalc_CalcMeth_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcMeth () const
      {
        return this->ShadowCalc_CalcMeth_;
      }

      SimSimulationParameters_SimulationControl_Default::ShadowCalc_CalcMeth_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcMeth ()
      {
        return this->ShadowCalc_CalcMeth_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcMeth (const ShadowCalc_CalcMeth_type& x)
      {
        this->ShadowCalc_CalcMeth_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcMeth (const ShadowCalc_CalcMeth_optional& x)
      {
        this->ShadowCalc_CalcMeth_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcMeth (::std::auto_ptr< ShadowCalc_CalcMeth_type > x)
      {
        this->ShadowCalc_CalcMeth_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ShadowCalc_CalcFreq_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcFreq () const
      {
        return this->ShadowCalc_CalcFreq_;
      }

      SimSimulationParameters_SimulationControl_Default::ShadowCalc_CalcFreq_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcFreq ()
      {
        return this->ShadowCalc_CalcFreq_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcFreq (const ShadowCalc_CalcFreq_type& x)
      {
        this->ShadowCalc_CalcFreq_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_CalcFreq (const ShadowCalc_CalcFreq_optional& x)
      {
        this->ShadowCalc_CalcFreq_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ShadowCalc_MaxFiguresShadowOverlapCalcs_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_MaxFiguresShadowOverlapCalcs () const
      {
        return this->ShadowCalc_MaxFiguresShadowOverlapCalcs_;
      }

      SimSimulationParameters_SimulationControl_Default::ShadowCalc_MaxFiguresShadowOverlapCalcs_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_MaxFiguresShadowOverlapCalcs ()
      {
        return this->ShadowCalc_MaxFiguresShadowOverlapCalcs_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_MaxFiguresShadowOverlapCalcs (const ShadowCalc_MaxFiguresShadowOverlapCalcs_type& x)
      {
        this->ShadowCalc_MaxFiguresShadowOverlapCalcs_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_MaxFiguresShadowOverlapCalcs (const ShadowCalc_MaxFiguresShadowOverlapCalcs_optional& x)
      {
        this->ShadowCalc_MaxFiguresShadowOverlapCalcs_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ShadowCalc_PolygonClippingAlgorithm_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_PolygonClippingAlgorithm () const
      {
        return this->ShadowCalc_PolygonClippingAlgorithm_;
      }

      SimSimulationParameters_SimulationControl_Default::ShadowCalc_PolygonClippingAlgorithm_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_PolygonClippingAlgorithm ()
      {
        return this->ShadowCalc_PolygonClippingAlgorithm_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_PolygonClippingAlgorithm (const ShadowCalc_PolygonClippingAlgorithm_type& x)
      {
        this->ShadowCalc_PolygonClippingAlgorithm_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_PolygonClippingAlgorithm (const ShadowCalc_PolygonClippingAlgorithm_optional& x)
      {
        this->ShadowCalc_PolygonClippingAlgorithm_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_PolygonClippingAlgorithm (::std::auto_ptr< ShadowCalc_PolygonClippingAlgorithm_type > x)
      {
        this->ShadowCalc_PolygonClippingAlgorithm_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ShadowCalc_SkyDiffuseModAlgo_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_SkyDiffuseModAlgo () const
      {
        return this->ShadowCalc_SkyDiffuseModAlgo_;
      }

      SimSimulationParameters_SimulationControl_Default::ShadowCalc_SkyDiffuseModAlgo_optional& SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_SkyDiffuseModAlgo ()
      {
        return this->ShadowCalc_SkyDiffuseModAlgo_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_SkyDiffuseModAlgo (const ShadowCalc_SkyDiffuseModAlgo_type& x)
      {
        this->ShadowCalc_SkyDiffuseModAlgo_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_SkyDiffuseModAlgo (const ShadowCalc_SkyDiffuseModAlgo_optional& x)
      {
        this->ShadowCalc_SkyDiffuseModAlgo_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ShadowCalc_SkyDiffuseModAlgo (::std::auto_ptr< ShadowCalc_SkyDiffuseModAlgo_type > x)
      {
        this->ShadowCalc_SkyDiffuseModAlgo_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult () const
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult ()
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_type& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult () const
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult ()
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_type& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult () const
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult ()
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult (const ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_type& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult (const ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult () const
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult ()
      {
        return this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult (const ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_type& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult (const ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional& x)
      {
        this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_CO2Concentration_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_CO2Concentration () const
      {
        return this->ZoneAirContamBalance_CO2Concentration_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_CO2Concentration_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_CO2Concentration ()
      {
        return this->ZoneAirContamBalance_CO2Concentration_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_CO2Concentration (const ZoneAirContamBalance_CO2Concentration_type& x)
      {
        this->ZoneAirContamBalance_CO2Concentration_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_CO2Concentration (const ZoneAirContamBalance_CO2Concentration_optional& x)
      {
        this->ZoneAirContamBalance_CO2Concentration_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_CO2Concentration (::std::auto_ptr< ZoneAirContamBalance_CO2Concentration_type > x)
      {
        this->ZoneAirContamBalance_CO2Concentration_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_OutdrCO2ScheduleName_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdrCO2ScheduleName () const
      {
        return this->ZoneAirContamBalance_OutdrCO2ScheduleName_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_OutdrCO2ScheduleName_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdrCO2ScheduleName ()
      {
        return this->ZoneAirContamBalance_OutdrCO2ScheduleName_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdrCO2ScheduleName (const ZoneAirContamBalance_OutdrCO2ScheduleName_type& x)
      {
        this->ZoneAirContamBalance_OutdrCO2ScheduleName_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdrCO2ScheduleName (const ZoneAirContamBalance_OutdrCO2ScheduleName_optional& x)
      {
        this->ZoneAirContamBalance_OutdrCO2ScheduleName_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdrCO2ScheduleName (::std::auto_ptr< ZoneAirContamBalance_OutdrCO2ScheduleName_type > x)
      {
        this->ZoneAirContamBalance_OutdrCO2ScheduleName_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_GenContamConcentration_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_GenContamConcentration () const
      {
        return this->ZoneAirContamBalance_GenContamConcentration_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_GenContamConcentration_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_GenContamConcentration ()
      {
        return this->ZoneAirContamBalance_GenContamConcentration_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_GenContamConcentration (const ZoneAirContamBalance_GenContamConcentration_type& x)
      {
        this->ZoneAirContamBalance_GenContamConcentration_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_GenContamConcentration (const ZoneAirContamBalance_GenContamConcentration_optional& x)
      {
        this->ZoneAirContamBalance_GenContamConcentration_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_GenContamConcentration (::std::auto_ptr< ZoneAirContamBalance_GenContamConcentration_type > x)
      {
        this->ZoneAirContamBalance_GenContamConcentration_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_OutdoorGenContamSchedName_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdoorGenContamSchedName () const
      {
        return this->ZoneAirContamBalance_OutdoorGenContamSchedName_;
      }

      SimSimulationParameters_SimulationControl_Default::ZoneAirContamBalance_OutdoorGenContamSchedName_optional& SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdoorGenContamSchedName ()
      {
        return this->ZoneAirContamBalance_OutdoorGenContamSchedName_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdoorGenContamSchedName (const ZoneAirContamBalance_OutdoorGenContamSchedName_type& x)
      {
        this->ZoneAirContamBalance_OutdoorGenContamSchedName_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdoorGenContamSchedName (const ZoneAirContamBalance_OutdoorGenContamSchedName_optional& x)
      {
        this->ZoneAirContamBalance_OutdoorGenContamSchedName_ = x;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ZoneAirContamBalance_OutdoorGenContamSchedName (::std::auto_ptr< ZoneAirContamBalance_OutdoorGenContamSchedName_type > x)
      {
        this->ZoneAirContamBalance_OutdoorGenContamSchedName_.set (x);
      }

      const SimSimulationParameters_SimulationControl_Default::Timestep_NumTimestepsPerHour_optional& SimSimulationParameters_SimulationControl_Default::
      Timestep_NumTimestepsPerHour () const
      {
        return this->Timestep_NumTimestepsPerHour_;
      }

      SimSimulationParameters_SimulationControl_Default::Timestep_NumTimestepsPerHour_optional& SimSimulationParameters_SimulationControl_Default::
      Timestep_NumTimestepsPerHour ()
      {
        return this->Timestep_NumTimestepsPerHour_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      Timestep_NumTimestepsPerHour (const Timestep_NumTimestepsPerHour_type& x)
      {
        this->Timestep_NumTimestepsPerHour_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      Timestep_NumTimestepsPerHour (const Timestep_NumTimestepsPerHour_optional& x)
      {
        this->Timestep_NumTimestepsPerHour_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ConvLimits_MinSysTimestep_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinSysTimestep () const
      {
        return this->ConvLimits_MinSysTimestep_;
      }

      SimSimulationParameters_SimulationControl_Default::ConvLimits_MinSysTimestep_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinSysTimestep ()
      {
        return this->ConvLimits_MinSysTimestep_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinSysTimestep (const ConvLimits_MinSysTimestep_type& x)
      {
        this->ConvLimits_MinSysTimestep_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinSysTimestep (const ConvLimits_MinSysTimestep_optional& x)
      {
        this->ConvLimits_MinSysTimestep_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ConvLimits_MaxHVACIterations_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxHVACIterations () const
      {
        return this->ConvLimits_MaxHVACIterations_;
      }

      SimSimulationParameters_SimulationControl_Default::ConvLimits_MaxHVACIterations_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxHVACIterations ()
      {
        return this->ConvLimits_MaxHVACIterations_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxHVACIterations (const ConvLimits_MaxHVACIterations_type& x)
      {
        this->ConvLimits_MaxHVACIterations_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxHVACIterations (const ConvLimits_MaxHVACIterations_optional& x)
      {
        this->ConvLimits_MaxHVACIterations_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ConvLimits_MinPlantIterations_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinPlantIterations () const
      {
        return this->ConvLimits_MinPlantIterations_;
      }

      SimSimulationParameters_SimulationControl_Default::ConvLimits_MinPlantIterations_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinPlantIterations ()
      {
        return this->ConvLimits_MinPlantIterations_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinPlantIterations (const ConvLimits_MinPlantIterations_type& x)
      {
        this->ConvLimits_MinPlantIterations_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MinPlantIterations (const ConvLimits_MinPlantIterations_optional& x)
      {
        this->ConvLimits_MinPlantIterations_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ConvLimits_MaxPlantIterations_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxPlantIterations () const
      {
        return this->ConvLimits_MaxPlantIterations_;
      }

      SimSimulationParameters_SimulationControl_Default::ConvLimits_MaxPlantIterations_optional& SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxPlantIterations ()
      {
        return this->ConvLimits_MaxPlantIterations_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxPlantIterations (const ConvLimits_MaxPlantIterations_type& x)
      {
        this->ConvLimits_MaxPlantIterations_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ConvLimits_MaxPlantIterations (const ConvLimits_MaxPlantIterations_optional& x)
      {
        this->ConvLimits_MaxPlantIterations_ = x;
      }

      const SimSimulationParameters_SimulationControl_Default::ProgramControl_NumberofThreadsAllowed_optional& SimSimulationParameters_SimulationControl_Default::
      ProgramControl_NumberofThreadsAllowed () const
      {
        return this->ProgramControl_NumberofThreadsAllowed_;
      }

      SimSimulationParameters_SimulationControl_Default::ProgramControl_NumberofThreadsAllowed_optional& SimSimulationParameters_SimulationControl_Default::
      ProgramControl_NumberofThreadsAllowed ()
      {
        return this->ProgramControl_NumberofThreadsAllowed_;
      }

      void SimSimulationParameters_SimulationControl_Default::
      ProgramControl_NumberofThreadsAllowed (const ProgramControl_NumberofThreadsAllowed_type& x)
      {
        this->ProgramControl_NumberofThreadsAllowed_.set (x);
      }

      void SimSimulationParameters_SimulationControl_Default::
      ProgramControl_NumberofThreadsAllowed (const ProgramControl_NumberofThreadsAllowed_optional& x)
      {
        this->ProgramControl_NumberofThreadsAllowed_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSimulationParameters_SimulationControl_Default
      //

      SimSimulationParameters_SimulationControl_Default::
      SimSimulationParameters_SimulationControl_Default ()
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl (),
        SimSimParams_DoZoneSizingCalc_ (this),
        SimSimParams_DoSysSizingCalc_ (this),
        SimSimParams_DoPlantSizingCalc_ (this),
        SimSimParams_RunSimForSizingPeriods_ (this),
        SimSimParams_RunSimForWeatherFileRunPeriods_ (this),
        Version_VersionIdentifier_ (this),
        ShadowCalc_CalcMeth_ (this),
        ShadowCalc_CalcFreq_ (this),
        ShadowCalc_MaxFiguresShadowOverlapCalcs_ (this),
        ShadowCalc_PolygonClippingAlgorithm_ (this),
        ShadowCalc_SkyDiffuseModAlgo_ (this),
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_ (this),
        ZoneAirContamBalance_CO2Concentration_ (this),
        ZoneAirContamBalance_OutdrCO2ScheduleName_ (this),
        ZoneAirContamBalance_GenContamConcentration_ (this),
        ZoneAirContamBalance_OutdoorGenContamSchedName_ (this),
        Timestep_NumTimestepsPerHour_ (this),
        ConvLimits_MinSysTimestep_ (this),
        ConvLimits_MaxHVACIterations_ (this),
        ConvLimits_MinPlantIterations_ (this),
        ConvLimits_MaxPlantIterations_ (this),
        ProgramControl_NumberofThreadsAllowed_ (this)
      {
      }

      SimSimulationParameters_SimulationControl_Default::
      SimSimulationParameters_SimulationControl_Default (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl (RefId),
        SimSimParams_DoZoneSizingCalc_ (this),
        SimSimParams_DoSysSizingCalc_ (this),
        SimSimParams_DoPlantSizingCalc_ (this),
        SimSimParams_RunSimForSizingPeriods_ (this),
        SimSimParams_RunSimForWeatherFileRunPeriods_ (this),
        Version_VersionIdentifier_ (this),
        ShadowCalc_CalcMeth_ (this),
        ShadowCalc_CalcFreq_ (this),
        ShadowCalc_MaxFiguresShadowOverlapCalcs_ (this),
        ShadowCalc_PolygonClippingAlgorithm_ (this),
        ShadowCalc_SkyDiffuseModAlgo_ (this),
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_ (this),
        ZoneAirContamBalance_CO2Concentration_ (this),
        ZoneAirContamBalance_OutdrCO2ScheduleName_ (this),
        ZoneAirContamBalance_GenContamConcentration_ (this),
        ZoneAirContamBalance_OutdoorGenContamSchedName_ (this),
        Timestep_NumTimestepsPerHour_ (this),
        ConvLimits_MinSysTimestep_ (this),
        ConvLimits_MaxHVACIterations_ (this),
        ConvLimits_MinPlantIterations_ (this),
        ConvLimits_MaxPlantIterations_ (this),
        ProgramControl_NumberofThreadsAllowed_ (this)
      {
      }

      SimSimulationParameters_SimulationControl_Default::
      SimSimulationParameters_SimulationControl_Default (const SimSimulationParameters_SimulationControl_Default& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl (x, f, c),
        SimSimParams_DoZoneSizingCalc_ (x.SimSimParams_DoZoneSizingCalc_, f, this),
        SimSimParams_DoSysSizingCalc_ (x.SimSimParams_DoSysSizingCalc_, f, this),
        SimSimParams_DoPlantSizingCalc_ (x.SimSimParams_DoPlantSizingCalc_, f, this),
        SimSimParams_RunSimForSizingPeriods_ (x.SimSimParams_RunSimForSizingPeriods_, f, this),
        SimSimParams_RunSimForWeatherFileRunPeriods_ (x.SimSimParams_RunSimForWeatherFileRunPeriods_, f, this),
        Version_VersionIdentifier_ (x.Version_VersionIdentifier_, f, this),
        ShadowCalc_CalcMeth_ (x.ShadowCalc_CalcMeth_, f, this),
        ShadowCalc_CalcFreq_ (x.ShadowCalc_CalcFreq_, f, this),
        ShadowCalc_MaxFiguresShadowOverlapCalcs_ (x.ShadowCalc_MaxFiguresShadowOverlapCalcs_, f, this),
        ShadowCalc_PolygonClippingAlgorithm_ (x.ShadowCalc_PolygonClippingAlgorithm_, f, this),
        ShadowCalc_SkyDiffuseModAlgo_ (x.ShadowCalc_SkyDiffuseModAlgo_, f, this),
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_ (x.ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_, f, this),
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_ (x.ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_, f, this),
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_ (x.ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_, f, this),
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_ (x.ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_, f, this),
        ZoneAirContamBalance_CO2Concentration_ (x.ZoneAirContamBalance_CO2Concentration_, f, this),
        ZoneAirContamBalance_OutdrCO2ScheduleName_ (x.ZoneAirContamBalance_OutdrCO2ScheduleName_, f, this),
        ZoneAirContamBalance_GenContamConcentration_ (x.ZoneAirContamBalance_GenContamConcentration_, f, this),
        ZoneAirContamBalance_OutdoorGenContamSchedName_ (x.ZoneAirContamBalance_OutdoorGenContamSchedName_, f, this),
        Timestep_NumTimestepsPerHour_ (x.Timestep_NumTimestepsPerHour_, f, this),
        ConvLimits_MinSysTimestep_ (x.ConvLimits_MinSysTimestep_, f, this),
        ConvLimits_MaxHVACIterations_ (x.ConvLimits_MaxHVACIterations_, f, this),
        ConvLimits_MinPlantIterations_ (x.ConvLimits_MinPlantIterations_, f, this),
        ConvLimits_MaxPlantIterations_ (x.ConvLimits_MaxPlantIterations_, f, this),
        ProgramControl_NumberofThreadsAllowed_ (x.ProgramControl_NumberofThreadsAllowed_, f, this)
      {
      }

      SimSimulationParameters_SimulationControl_Default::
      SimSimulationParameters_SimulationControl_Default (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl (e, f | ::xml_schema::flags::base, c),
        SimSimParams_DoZoneSizingCalc_ (this),
        SimSimParams_DoSysSizingCalc_ (this),
        SimSimParams_DoPlantSizingCalc_ (this),
        SimSimParams_RunSimForSizingPeriods_ (this),
        SimSimParams_RunSimForWeatherFileRunPeriods_ (this),
        Version_VersionIdentifier_ (this),
        ShadowCalc_CalcMeth_ (this),
        ShadowCalc_CalcFreq_ (this),
        ShadowCalc_MaxFiguresShadowOverlapCalcs_ (this),
        ShadowCalc_PolygonClippingAlgorithm_ (this),
        ShadowCalc_SkyDiffuseModAlgo_ (this),
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_ (this),
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_ (this),
        ZoneAirContamBalance_CO2Concentration_ (this),
        ZoneAirContamBalance_OutdrCO2ScheduleName_ (this),
        ZoneAirContamBalance_GenContamConcentration_ (this),
        ZoneAirContamBalance_OutdoorGenContamSchedName_ (this),
        Timestep_NumTimestepsPerHour_ (this),
        ConvLimits_MinSysTimestep_ (this),
        ConvLimits_MaxHVACIterations_ (this),
        ConvLimits_MinPlantIterations_ (this),
        ConvLimits_MaxPlantIterations_ (this),
        ProgramControl_NumberofThreadsAllowed_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSimulationParameters_SimulationControl_Default::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSimParams_DoZoneSizingCalc
          //
          if (n.name () == "SimSimParams_DoZoneSizingCalc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_DoZoneSizingCalc_type > r (
              SimSimParams_DoZoneSizingCalc_traits::create (i, f, this));

            if (!this->SimSimParams_DoZoneSizingCalc_)
            {
              this->SimSimParams_DoZoneSizingCalc_.set (r);
              continue;
            }
          }

          // SimSimParams_DoSysSizingCalc
          //
          if (n.name () == "SimSimParams_DoSysSizingCalc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_DoSysSizingCalc_type > r (
              SimSimParams_DoSysSizingCalc_traits::create (i, f, this));

            if (!this->SimSimParams_DoSysSizingCalc_)
            {
              this->SimSimParams_DoSysSizingCalc_.set (r);
              continue;
            }
          }

          // SimSimParams_DoPlantSizingCalc
          //
          if (n.name () == "SimSimParams_DoPlantSizingCalc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_DoPlantSizingCalc_type > r (
              SimSimParams_DoPlantSizingCalc_traits::create (i, f, this));

            if (!this->SimSimParams_DoPlantSizingCalc_)
            {
              this->SimSimParams_DoPlantSizingCalc_.set (r);
              continue;
            }
          }

          // SimSimParams_RunSimForSizingPeriods
          //
          if (n.name () == "SimSimParams_RunSimForSizingPeriods" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_RunSimForSizingPeriods_type > r (
              SimSimParams_RunSimForSizingPeriods_traits::create (i, f, this));

            if (!this->SimSimParams_RunSimForSizingPeriods_)
            {
              this->SimSimParams_RunSimForSizingPeriods_.set (r);
              continue;
            }
          }

          // SimSimParams_RunSimForWeatherFileRunPeriods
          //
          if (n.name () == "SimSimParams_RunSimForWeatherFileRunPeriods" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_RunSimForWeatherFileRunPeriods_type > r (
              SimSimParams_RunSimForWeatherFileRunPeriods_traits::create (i, f, this));

            if (!this->SimSimParams_RunSimForWeatherFileRunPeriods_)
            {
              this->SimSimParams_RunSimForWeatherFileRunPeriods_.set (r);
              continue;
            }
          }

          // Version_VersionIdentifier
          //
          if (n.name () == "Version_VersionIdentifier" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Version_VersionIdentifier_type > r (
              Version_VersionIdentifier_traits::create (i, f, this));

            if (!this->Version_VersionIdentifier_)
            {
              this->Version_VersionIdentifier_.set (r);
              continue;
            }
          }

          // ShadowCalc_CalcMeth
          //
          if (n.name () == "ShadowCalc_CalcMeth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ShadowCalc_CalcMeth_type > r (
              ShadowCalc_CalcMeth_traits::create (i, f, this));

            if (!this->ShadowCalc_CalcMeth_)
            {
              this->ShadowCalc_CalcMeth_.set (r);
              continue;
            }
          }

          // ShadowCalc_CalcFreq
          //
          if (n.name () == "ShadowCalc_CalcFreq" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ShadowCalc_CalcFreq_)
            {
              this->ShadowCalc_CalcFreq_.set (ShadowCalc_CalcFreq_traits::create (i, f, this));
              continue;
            }
          }

          // ShadowCalc_MaxFiguresShadowOverlapCalcs
          //
          if (n.name () == "ShadowCalc_MaxFiguresShadowOverlapCalcs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ShadowCalc_MaxFiguresShadowOverlapCalcs_)
            {
              this->ShadowCalc_MaxFiguresShadowOverlapCalcs_.set (ShadowCalc_MaxFiguresShadowOverlapCalcs_traits::create (i, f, this));
              continue;
            }
          }

          // ShadowCalc_PolygonClippingAlgorithm
          //
          if (n.name () == "ShadowCalc_PolygonClippingAlgorithm" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ShadowCalc_PolygonClippingAlgorithm_type > r (
              ShadowCalc_PolygonClippingAlgorithm_traits::create (i, f, this));

            if (!this->ShadowCalc_PolygonClippingAlgorithm_)
            {
              this->ShadowCalc_PolygonClippingAlgorithm_.set (r);
              continue;
            }
          }

          // ShadowCalc_SkyDiffuseModAlgo
          //
          if (n.name () == "ShadowCalc_SkyDiffuseModAlgo" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ShadowCalc_SkyDiffuseModAlgo_type > r (
              ShadowCalc_SkyDiffuseModAlgo_traits::create (i, f, this));

            if (!this->ShadowCalc_SkyDiffuseModAlgo_)
            {
              this->ShadowCalc_SkyDiffuseModAlgo_.set (r);
              continue;
            }
          }

          // ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult
          //
          if (n.name () == "ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_)
            {
              this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_.set (ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult
          //
          if (n.name () == "ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_)
            {
              this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_.set (ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult
          //
          if (n.name () == "ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_)
            {
              this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_.set (ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult
          //
          if (n.name () == "ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_)
            {
              this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_.set (ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneAirContamBalance_CO2Concentration
          //
          if (n.name () == "ZoneAirContamBalance_CO2Concentration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ZoneAirContamBalance_CO2Concentration_type > r (
              ZoneAirContamBalance_CO2Concentration_traits::create (i, f, this));

            if (!this->ZoneAirContamBalance_CO2Concentration_)
            {
              this->ZoneAirContamBalance_CO2Concentration_.set (r);
              continue;
            }
          }

          // ZoneAirContamBalance_OutdrCO2ScheduleName
          //
          if (n.name () == "ZoneAirContamBalance_OutdrCO2ScheduleName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ZoneAirContamBalance_OutdrCO2ScheduleName_type > r (
              ZoneAirContamBalance_OutdrCO2ScheduleName_traits::create (i, f, this));

            if (!this->ZoneAirContamBalance_OutdrCO2ScheduleName_)
            {
              this->ZoneAirContamBalance_OutdrCO2ScheduleName_.set (r);
              continue;
            }
          }

          // ZoneAirContamBalance_GenContamConcentration
          //
          if (n.name () == "ZoneAirContamBalance_GenContamConcentration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ZoneAirContamBalance_GenContamConcentration_type > r (
              ZoneAirContamBalance_GenContamConcentration_traits::create (i, f, this));

            if (!this->ZoneAirContamBalance_GenContamConcentration_)
            {
              this->ZoneAirContamBalance_GenContamConcentration_.set (r);
              continue;
            }
          }

          // ZoneAirContamBalance_OutdoorGenContamSchedName
          //
          if (n.name () == "ZoneAirContamBalance_OutdoorGenContamSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ZoneAirContamBalance_OutdoorGenContamSchedName_type > r (
              ZoneAirContamBalance_OutdoorGenContamSchedName_traits::create (i, f, this));

            if (!this->ZoneAirContamBalance_OutdoorGenContamSchedName_)
            {
              this->ZoneAirContamBalance_OutdoorGenContamSchedName_.set (r);
              continue;
            }
          }

          // Timestep_NumTimestepsPerHour
          //
          if (n.name () == "Timestep_NumTimestepsPerHour" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Timestep_NumTimestepsPerHour_)
            {
              this->Timestep_NumTimestepsPerHour_.set (Timestep_NumTimestepsPerHour_traits::create (i, f, this));
              continue;
            }
          }

          // ConvLimits_MinSysTimestep
          //
          if (n.name () == "ConvLimits_MinSysTimestep" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ConvLimits_MinSysTimestep_)
            {
              this->ConvLimits_MinSysTimestep_.set (ConvLimits_MinSysTimestep_traits::create (i, f, this));
              continue;
            }
          }

          // ConvLimits_MaxHVACIterations
          //
          if (n.name () == "ConvLimits_MaxHVACIterations" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ConvLimits_MaxHVACIterations_)
            {
              this->ConvLimits_MaxHVACIterations_.set (ConvLimits_MaxHVACIterations_traits::create (i, f, this));
              continue;
            }
          }

          // ConvLimits_MinPlantIterations
          //
          if (n.name () == "ConvLimits_MinPlantIterations" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ConvLimits_MinPlantIterations_)
            {
              this->ConvLimits_MinPlantIterations_.set (ConvLimits_MinPlantIterations_traits::create (i, f, this));
              continue;
            }
          }

          // ConvLimits_MaxPlantIterations
          //
          if (n.name () == "ConvLimits_MaxPlantIterations" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ConvLimits_MaxPlantIterations_)
            {
              this->ConvLimits_MaxPlantIterations_.set (ConvLimits_MaxPlantIterations_traits::create (i, f, this));
              continue;
            }
          }

          // ProgramControl_NumberofThreadsAllowed
          //
          if (n.name () == "ProgramControl_NumberofThreadsAllowed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ProgramControl_NumberofThreadsAllowed_)
            {
              this->ProgramControl_NumberofThreadsAllowed_.set (ProgramControl_NumberofThreadsAllowed_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimSimulationParameters_SimulationControl_Default* SimSimulationParameters_SimulationControl_Default::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSimulationParameters_SimulationControl_Default (*this, f, c);
      }

      SimSimulationParameters_SimulationControl_Default& SimSimulationParameters_SimulationControl_Default::
      operator= (const SimSimulationParameters_SimulationControl_Default& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl& > (*this) = x;
          this->SimSimParams_DoZoneSizingCalc_ = x.SimSimParams_DoZoneSizingCalc_;
          this->SimSimParams_DoSysSizingCalc_ = x.SimSimParams_DoSysSizingCalc_;
          this->SimSimParams_DoPlantSizingCalc_ = x.SimSimParams_DoPlantSizingCalc_;
          this->SimSimParams_RunSimForSizingPeriods_ = x.SimSimParams_RunSimForSizingPeriods_;
          this->SimSimParams_RunSimForWeatherFileRunPeriods_ = x.SimSimParams_RunSimForWeatherFileRunPeriods_;
          this->Version_VersionIdentifier_ = x.Version_VersionIdentifier_;
          this->ShadowCalc_CalcMeth_ = x.ShadowCalc_CalcMeth_;
          this->ShadowCalc_CalcFreq_ = x.ShadowCalc_CalcFreq_;
          this->ShadowCalc_MaxFiguresShadowOverlapCalcs_ = x.ShadowCalc_MaxFiguresShadowOverlapCalcs_;
          this->ShadowCalc_PolygonClippingAlgorithm_ = x.ShadowCalc_PolygonClippingAlgorithm_;
          this->ShadowCalc_SkyDiffuseModAlgo_ = x.ShadowCalc_SkyDiffuseModAlgo_;
          this->ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_ = x.ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_;
          this->ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_ = x.ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_;
          this->ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_ = x.ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_;
          this->ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_ = x.ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_;
          this->ZoneAirContamBalance_CO2Concentration_ = x.ZoneAirContamBalance_CO2Concentration_;
          this->ZoneAirContamBalance_OutdrCO2ScheduleName_ = x.ZoneAirContamBalance_OutdrCO2ScheduleName_;
          this->ZoneAirContamBalance_GenContamConcentration_ = x.ZoneAirContamBalance_GenContamConcentration_;
          this->ZoneAirContamBalance_OutdoorGenContamSchedName_ = x.ZoneAirContamBalance_OutdoorGenContamSchedName_;
          this->Timestep_NumTimestepsPerHour_ = x.Timestep_NumTimestepsPerHour_;
          this->ConvLimits_MinSysTimestep_ = x.ConvLimits_MinSysTimestep_;
          this->ConvLimits_MaxHVACIterations_ = x.ConvLimits_MaxHVACIterations_;
          this->ConvLimits_MinPlantIterations_ = x.ConvLimits_MinPlantIterations_;
          this->ConvLimits_MaxPlantIterations_ = x.ConvLimits_MaxPlantIterations_;
          this->ProgramControl_NumberofThreadsAllowed_ = x.ProgramControl_NumberofThreadsAllowed_;
        }

        return *this;
      }

      SimSimulationParameters_SimulationControl_Default::
      ~SimSimulationParameters_SimulationControl_Default ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

