// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowStorage_WaterStorage_CleanWater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowStorage_WaterStorage_CleanWater
      // 

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_Name_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_Name () const
      {
        return this->SimFlowSto_Name_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_Name_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_Name ()
      {
        return this->SimFlowSto_Name_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_Name (const SimFlowSto_Name_type& x)
      {
        this->SimFlowSto_Name_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_Name (const SimFlowSto_Name_optional& x)
      {
        this->SimFlowSto_Name_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_Name (::std::auto_ptr< SimFlowSto_Name_type > x)
      {
        this->SimFlowSto_Name_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_AmbTempdic_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempdic () const
      {
        return this->SimFlowSto_AmbTempdic_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_AmbTempdic_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempdic ()
      {
        return this->SimFlowSto_AmbTempdic_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempdic (const SimFlowSto_AmbTempdic_type& x)
      {
        this->SimFlowSto_AmbTempdic_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempdic (const SimFlowSto_AmbTempdic_optional& x)
      {
        this->SimFlowSto_AmbTempdic_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempdic (::std::auto_ptr< SimFlowSto_AmbTempdic_type > x)
      {
        this->SimFlowSto_AmbTempdic_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_AmbTempSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempSchedName () const
      {
        return this->SimFlowSto_AmbTempSchedName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_AmbTempSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempSchedName ()
      {
        return this->SimFlowSto_AmbTempSchedName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempSchedName (const SimFlowSto_AmbTempSchedName_type& x)
      {
        this->SimFlowSto_AmbTempSchedName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempSchedName (const SimFlowSto_AmbTempSchedName_optional& x)
      {
        this->SimFlowSto_AmbTempSchedName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_AmbTempSchedName (::std::auto_ptr< SimFlowSto_AmbTempSchedName_type > x)
      {
        this->SimFlowSto_AmbTempSchedName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_ZoneName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_ZoneName () const
      {
        return this->SimFlowSto_ZoneName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_ZoneName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_ZoneName ()
      {
        return this->SimFlowSto_ZoneName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_ZoneName (const SimFlowSto_ZoneName_type& x)
      {
        this->SimFlowSto_ZoneName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_ZoneName (const SimFlowSto_ZoneName_optional& x)
      {
        this->SimFlowSto_ZoneName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_ZoneName (::std::auto_ptr< SimFlowSto_ZoneName_type > x)
      {
        this->SimFlowSto_ZoneName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_WaterQualitySubcategory_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterQualitySubcategory () const
      {
        return this->SimFlowSto_WaterQualitySubcategory_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_WaterQualitySubcategory_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterQualitySubcategory ()
      {
        return this->SimFlowSto_WaterQualitySubcategory_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterQualitySubcategory (const SimFlowSto_WaterQualitySubcategory_type& x)
      {
        this->SimFlowSto_WaterQualitySubcategory_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterQualitySubcategory (const SimFlowSto_WaterQualitySubcategory_optional& x)
      {
        this->SimFlowSto_WaterQualitySubcategory_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterQualitySubcategory (::std::auto_ptr< SimFlowSto_WaterQualitySubcategory_type > x)
      {
        this->SimFlowSto_WaterQualitySubcategory_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_MaxCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_MaxCap () const
      {
        return this->SimFlowSto_MaxCap_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_MaxCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_MaxCap ()
      {
        return this->SimFlowSto_MaxCap_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_MaxCap (const SimFlowSto_MaxCap_type& x)
      {
        this->SimFlowSto_MaxCap_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_MaxCap (const SimFlowSto_MaxCap_optional& x)
      {
        this->SimFlowSto_MaxCap_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_InitVol_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_InitVol () const
      {
        return this->SimFlowSto_InitVol_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_InitVol_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_InitVol ()
      {
        return this->SimFlowSto_InitVol_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_InitVol (const SimFlowSto_InitVol_type& x)
      {
        this->SimFlowSto_InitVol_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_InitVol (const SimFlowSto_InitVol_optional& x)
      {
        this->SimFlowSto_InitVol_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_DesignFlowRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignFlowRate () const
      {
        return this->SimFlowSto_DesignFlowRate_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_DesignFlowRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignFlowRate ()
      {
        return this->SimFlowSto_DesignFlowRate_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignFlowRate (const SimFlowSto_DesignFlowRate_type& x)
      {
        this->SimFlowSto_DesignFlowRate_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignFlowRate (const SimFlowSto_DesignFlowRate_optional& x)
      {
        this->SimFlowSto_DesignFlowRate_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_DesignOutFlowRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignOutFlowRate () const
      {
        return this->SimFlowSto_DesignOutFlowRate_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_DesignOutFlowRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignOutFlowRate ()
      {
        return this->SimFlowSto_DesignOutFlowRate_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignOutFlowRate (const SimFlowSto_DesignOutFlowRate_type& x)
      {
        this->SimFlowSto_DesignOutFlowRate_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_DesignOutFlowRate (const SimFlowSto_DesignOutFlowRate_optional& x)
      {
        this->SimFlowSto_DesignOutFlowRate_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_OverflowDestination_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OverflowDestination () const
      {
        return this->SimFlowSto_OverflowDestination_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_OverflowDestination_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OverflowDestination ()
      {
        return this->SimFlowSto_OverflowDestination_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OverflowDestination (const SimFlowSto_OverflowDestination_type& x)
      {
        this->SimFlowSto_OverflowDestination_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OverflowDestination (const SimFlowSto_OverflowDestination_optional& x)
      {
        this->SimFlowSto_OverflowDestination_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OverflowDestination (::std::auto_ptr< SimFlowSto_OverflowDestination_type > x)
      {
        this->SimFlowSto_OverflowDestination_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TypeSupplyCntlledByFloatValve_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TypeSupplyCntlledByFloatValve () const
      {
        return this->SimFlowSto_TypeSupplyCntlledByFloatValve_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TypeSupplyCntlledByFloatValve_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TypeSupplyCntlledByFloatValve ()
      {
        return this->SimFlowSto_TypeSupplyCntlledByFloatValve_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TypeSupplyCntlledByFloatValve (const SimFlowSto_TypeSupplyCntlledByFloatValve_type& x)
      {
        this->SimFlowSto_TypeSupplyCntlledByFloatValve_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TypeSupplyCntlledByFloatValve (const SimFlowSto_TypeSupplyCntlledByFloatValve_optional& x)
      {
        this->SimFlowSto_TypeSupplyCntlledByFloatValve_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TypeSupplyCntlledByFloatValve (::std::auto_ptr< SimFlowSto_TypeSupplyCntlledByFloatValve_type > x)
      {
        this->SimFlowSto_TypeSupplyCntlledByFloatValve_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_FloatValveOnCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValveOnCap () const
      {
        return this->SimFlowSto_FloatValveOnCap_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_FloatValveOnCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValveOnCap ()
      {
        return this->SimFlowSto_FloatValveOnCap_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValveOnCap (const SimFlowSto_FloatValveOnCap_type& x)
      {
        this->SimFlowSto_FloatValveOnCap_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValveOnCap (const SimFlowSto_FloatValveOnCap_optional& x)
      {
        this->SimFlowSto_FloatValveOnCap_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_FloatValvefCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValvefCap () const
      {
        return this->SimFlowSto_FloatValvefCap_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_FloatValvefCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValvefCap ()
      {
        return this->SimFlowSto_FloatValvefCap_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValvefCap (const SimFlowSto_FloatValvefCap_type& x)
      {
        this->SimFlowSto_FloatValvefCap_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_FloatValvefCap (const SimFlowSto_FloatValvefCap_optional& x)
      {
        this->SimFlowSto_FloatValvefCap_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_BackupMainsCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_BackupMainsCap () const
      {
        return this->SimFlowSto_BackupMainsCap_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_BackupMainsCap_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_BackupMainsCap ()
      {
        return this->SimFlowSto_BackupMainsCap_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_BackupMainsCap (const SimFlowSto_BackupMainsCap_type& x)
      {
        this->SimFlowSto_BackupMainsCap_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_BackupMainsCap (const SimFlowSto_BackupMainsCap_optional& x)
      {
        this->SimFlowSto_BackupMainsCap_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_OtherTankName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OtherTankName () const
      {
        return this->SimFlowSto_OtherTankName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_OtherTankName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OtherTankName ()
      {
        return this->SimFlowSto_OtherTankName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OtherTankName (const SimFlowSto_OtherTankName_type& x)
      {
        this->SimFlowSto_OtherTankName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OtherTankName (const SimFlowSto_OtherTankName_optional& x)
      {
        this->SimFlowSto_OtherTankName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_OtherTankName (::std::auto_ptr< SimFlowSto_OtherTankName_type > x)
      {
        this->SimFlowSto_OtherTankName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_WaterThermalMode_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterThermalMode () const
      {
        return this->SimFlowSto_WaterThermalMode_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_WaterThermalMode_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterThermalMode ()
      {
        return this->SimFlowSto_WaterThermalMode_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterThermalMode (const SimFlowSto_WaterThermalMode_type& x)
      {
        this->SimFlowSto_WaterThermalMode_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterThermalMode (const SimFlowSto_WaterThermalMode_optional& x)
      {
        this->SimFlowSto_WaterThermalMode_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterThermalMode (::std::auto_ptr< SimFlowSto_WaterThermalMode_type > x)
      {
        this->SimFlowSto_WaterThermalMode_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_WaterTempSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterTempSchedName () const
      {
        return this->SimFlowSto_WaterTempSchedName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_WaterTempSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterTempSchedName ()
      {
        return this->SimFlowSto_WaterTempSchedName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterTempSchedName (const SimFlowSto_WaterTempSchedName_type& x)
      {
        this->SimFlowSto_WaterTempSchedName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterTempSchedName (const SimFlowSto_WaterTempSchedName_optional& x)
      {
        this->SimFlowSto_WaterTempSchedName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_WaterTempSchedName (::std::auto_ptr< SimFlowSto_WaterTempSchedName_type > x)
      {
        this->SimFlowSto_WaterTempSchedName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TankSurfArea_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankSurfArea () const
      {
        return this->SimFlowSto_TankSurfArea_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TankSurfArea_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankSurfArea ()
      {
        return this->SimFlowSto_TankSurfArea_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankSurfArea (const SimFlowSto_TankSurfArea_type& x)
      {
        this->SimFlowSto_TankSurfArea_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankSurfArea (const SimFlowSto_TankSurfArea_optional& x)
      {
        this->SimFlowSto_TankSurfArea_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TankUVal_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankUVal () const
      {
        return this->SimFlowSto_TankUVal_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TankUVal_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankUVal ()
      {
        return this->SimFlowSto_TankUVal_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankUVal (const SimFlowSto_TankUVal_type& x)
      {
        this->SimFlowSto_TankUVal_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankUVal (const SimFlowSto_TankUVal_optional& x)
      {
        this->SimFlowSto_TankUVal_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TankOutsideSurfMatlName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankOutsideSurfMatlName () const
      {
        return this->SimFlowSto_TankOutsideSurfMatlName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::SimFlowSto_TankOutsideSurfMatlName_optional& SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankOutsideSurfMatlName ()
      {
        return this->SimFlowSto_TankOutsideSurfMatlName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankOutsideSurfMatlName (const SimFlowSto_TankOutsideSurfMatlName_type& x)
      {
        this->SimFlowSto_TankOutsideSurfMatlName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankOutsideSurfMatlName (const SimFlowSto_TankOutsideSurfMatlName_optional& x)
      {
        this->SimFlowSto_TankOutsideSurfMatlName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      SimFlowSto_TankOutsideSurfMatlName (::std::auto_ptr< SimFlowSto_TankOutsideSurfMatlName_type > x)
      {
        this->SimFlowSto_TankOutsideSurfMatlName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_Name_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_Name () const
      {
        return this->WaterUse_Well_Name_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_Name_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_Name ()
      {
        return this->WaterUse_Well_Name_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_Name (const WaterUse_Well_Name_type& x)
      {
        this->WaterUse_Well_Name_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_Name (const WaterUse_Well_Name_optional& x)
      {
        this->WaterUse_Well_Name_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_Name (::std::auto_ptr< WaterUse_Well_Name_type > x)
      {
        this->WaterUse_Well_Name_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_StoTankName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_StoTankName () const
      {
        return this->WaterUse_Well_StoTankName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_StoTankName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_StoTankName ()
      {
        return this->WaterUse_Well_StoTankName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_StoTankName (const WaterUse_Well_StoTankName_type& x)
      {
        this->WaterUse_Well_StoTankName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_StoTankName (const WaterUse_Well_StoTankName_optional& x)
      {
        this->WaterUse_Well_StoTankName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_StoTankName (::std::auto_ptr< WaterUse_Well_StoTankName_type > x)
      {
        this->WaterUse_Well_StoTankName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpDepth_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpDepth () const
      {
        return this->WaterUse_Well_PumpDepth_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpDepth_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpDepth ()
      {
        return this->WaterUse_Well_PumpDepth_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpDepth (const WaterUse_Well_PumpDepth_type& x)
      {
        this->WaterUse_Well_PumpDepth_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpDepth (const WaterUse_Well_PumpDepth_optional& x)
      {
        this->WaterUse_Well_PumpDepth_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpRatedFlowRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedFlowRate () const
      {
        return this->WaterUse_Well_PumpRatedFlowRate_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpRatedFlowRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedFlowRate ()
      {
        return this->WaterUse_Well_PumpRatedFlowRate_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedFlowRate (const WaterUse_Well_PumpRatedFlowRate_type& x)
      {
        this->WaterUse_Well_PumpRatedFlowRate_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedFlowRate (const WaterUse_Well_PumpRatedFlowRate_optional& x)
      {
        this->WaterUse_Well_PumpRatedFlowRate_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpRatedHead_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedHead () const
      {
        return this->WaterUse_Well_PumpRatedHead_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpRatedHead_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedHead ()
      {
        return this->WaterUse_Well_PumpRatedHead_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedHead (const WaterUse_Well_PumpRatedHead_type& x)
      {
        this->WaterUse_Well_PumpRatedHead_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedHead (const WaterUse_Well_PumpRatedHead_optional& x)
      {
        this->WaterUse_Well_PumpRatedHead_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpRatedPowerConsump_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedPowerConsump () const
      {
        return this->WaterUse_Well_PumpRatedPowerConsump_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpRatedPowerConsump_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedPowerConsump ()
      {
        return this->WaterUse_Well_PumpRatedPowerConsump_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedPowerConsump (const WaterUse_Well_PumpRatedPowerConsump_type& x)
      {
        this->WaterUse_Well_PumpRatedPowerConsump_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpRatedPowerConsump (const WaterUse_Well_PumpRatedPowerConsump_optional& x)
      {
        this->WaterUse_Well_PumpRatedPowerConsump_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpEff_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpEff () const
      {
        return this->WaterUse_Well_PumpEff_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_PumpEff_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpEff ()
      {
        return this->WaterUse_Well_PumpEff_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpEff (const WaterUse_Well_PumpEff_type& x)
      {
        this->WaterUse_Well_PumpEff_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_PumpEff (const WaterUse_Well_PumpEff_optional& x)
      {
        this->WaterUse_Well_PumpEff_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WellRecoveryRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WellRecoveryRate () const
      {
        return this->WaterUse_Well_WellRecoveryRate_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WellRecoveryRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WellRecoveryRate ()
      {
        return this->WaterUse_Well_WellRecoveryRate_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WellRecoveryRate (const WaterUse_Well_WellRecoveryRate_type& x)
      {
        this->WaterUse_Well_WellRecoveryRate_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WellRecoveryRate (const WaterUse_Well_WellRecoveryRate_optional& x)
      {
        this->WaterUse_Well_WellRecoveryRate_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_NomWellStoVolume_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_NomWellStoVolume () const
      {
        return this->WaterUse_Well_NomWellStoVolume_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_NomWellStoVolume_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_NomWellStoVolume ()
      {
        return this->WaterUse_Well_NomWellStoVolume_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_NomWellStoVolume (const WaterUse_Well_NomWellStoVolume_type& x)
      {
        this->WaterUse_Well_NomWellStoVolume_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_NomWellStoVolume (const WaterUse_Well_NomWellStoVolume_optional& x)
      {
        this->WaterUse_Well_NomWellStoVolume_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WaterTableDepthMode_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthMode () const
      {
        return this->WaterUse_Well_WaterTableDepthMode_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WaterTableDepthMode_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthMode ()
      {
        return this->WaterUse_Well_WaterTableDepthMode_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthMode (const WaterUse_Well_WaterTableDepthMode_type& x)
      {
        this->WaterUse_Well_WaterTableDepthMode_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthMode (const WaterUse_Well_WaterTableDepthMode_optional& x)
      {
        this->WaterUse_Well_WaterTableDepthMode_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthMode (::std::auto_ptr< WaterUse_Well_WaterTableDepthMode_type > x)
      {
        this->WaterUse_Well_WaterTableDepthMode_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WaterTableDepth_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepth () const
      {
        return this->WaterUse_Well_WaterTableDepth_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WaterTableDepth_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepth ()
      {
        return this->WaterUse_Well_WaterTableDepth_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepth (const WaterUse_Well_WaterTableDepth_type& x)
      {
        this->WaterUse_Well_WaterTableDepth_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepth (const WaterUse_Well_WaterTableDepth_optional& x)
      {
        this->WaterUse_Well_WaterTableDepth_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WaterTableDepthSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthSchedName () const
      {
        return this->WaterUse_Well_WaterTableDepthSchedName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_Well_WaterTableDepthSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthSchedName ()
      {
        return this->WaterUse_Well_WaterTableDepthSchedName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthSchedName (const WaterUse_Well_WaterTableDepthSchedName_type& x)
      {
        this->WaterUse_Well_WaterTableDepthSchedName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthSchedName (const WaterUse_Well_WaterTableDepthSchedName_optional& x)
      {
        this->WaterUse_Well_WaterTableDepthSchedName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_Well_WaterTableDepthSchedName (::std::auto_ptr< WaterUse_Well_WaterTableDepthSchedName_type > x)
      {
        this->WaterUse_Well_WaterTableDepthSchedName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_Name_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_Name () const
      {
        return this->WaterUse_RainColl_Name_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_Name_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_Name ()
      {
        return this->WaterUse_RainColl_Name_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_Name (const WaterUse_RainColl_Name_type& x)
      {
        this->WaterUse_RainColl_Name_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_Name (const WaterUse_RainColl_Name_optional& x)
      {
        this->WaterUse_RainColl_Name_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_Name (::std::auto_ptr< WaterUse_RainColl_Name_type > x)
      {
        this->WaterUse_RainColl_Name_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_StoTankName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_StoTankName () const
      {
        return this->WaterUse_RainColl_StoTankName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_StoTankName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_StoTankName ()
      {
        return this->WaterUse_RainColl_StoTankName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_StoTankName (const WaterUse_RainColl_StoTankName_type& x)
      {
        this->WaterUse_RainColl_StoTankName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_StoTankName (const WaterUse_RainColl_StoTankName_optional& x)
      {
        this->WaterUse_RainColl_StoTankName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_StoTankName (::std::auto_ptr< WaterUse_RainColl_StoTankName_type > x)
      {
        this->WaterUse_RainColl_StoTankName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_LossFactorMode_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_LossFactorMode () const
      {
        return this->WaterUse_RainColl_LossFactorMode_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_LossFactorMode_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_LossFactorMode ()
      {
        return this->WaterUse_RainColl_LossFactorMode_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_LossFactorMode (const WaterUse_RainColl_LossFactorMode_type& x)
      {
        this->WaterUse_RainColl_LossFactorMode_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_LossFactorMode (const WaterUse_RainColl_LossFactorMode_optional& x)
      {
        this->WaterUse_RainColl_LossFactorMode_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_LossFactorMode (::std::auto_ptr< WaterUse_RainColl_LossFactorMode_type > x)
      {
        this->WaterUse_RainColl_LossFactorMode_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_CollectionLossFactor_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactor () const
      {
        return this->WaterUse_RainColl_CollectionLossFactor_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_CollectionLossFactor_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactor ()
      {
        return this->WaterUse_RainColl_CollectionLossFactor_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactor (const WaterUse_RainColl_CollectionLossFactor_type& x)
      {
        this->WaterUse_RainColl_CollectionLossFactor_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactor (const WaterUse_RainColl_CollectionLossFactor_optional& x)
      {
        this->WaterUse_RainColl_CollectionLossFactor_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_CollectionLossFactorSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactorSchedName () const
      {
        return this->WaterUse_RainColl_CollectionLossFactorSchedName_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_CollectionLossFactorSchedName_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactorSchedName ()
      {
        return this->WaterUse_RainColl_CollectionLossFactorSchedName_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactorSchedName (const WaterUse_RainColl_CollectionLossFactorSchedName_type& x)
      {
        this->WaterUse_RainColl_CollectionLossFactorSchedName_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactorSchedName (const WaterUse_RainColl_CollectionLossFactorSchedName_optional& x)
      {
        this->WaterUse_RainColl_CollectionLossFactorSchedName_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionLossFactorSchedName (::std::auto_ptr< WaterUse_RainColl_CollectionLossFactorSchedName_type > x)
      {
        this->WaterUse_RainColl_CollectionLossFactorSchedName_.set (x);
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_MaxCollectionRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_MaxCollectionRate () const
      {
        return this->WaterUse_RainColl_MaxCollectionRate_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_MaxCollectionRate_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_MaxCollectionRate ()
      {
        return this->WaterUse_RainColl_MaxCollectionRate_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_MaxCollectionRate (const WaterUse_RainColl_MaxCollectionRate_type& x)
      {
        this->WaterUse_RainColl_MaxCollectionRate_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_MaxCollectionRate (const WaterUse_RainColl_MaxCollectionRate_optional& x)
      {
        this->WaterUse_RainColl_MaxCollectionRate_ = x;
      }

      const SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_CollectionSurfName_1_10_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionSurfName_1_10 () const
      {
        return this->WaterUse_RainColl_CollectionSurfName_1_10_;
      }

      SimFlowStorage_WaterStorage_CleanWater::WaterUse_RainColl_CollectionSurfName_1_10_optional& SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionSurfName_1_10 ()
      {
        return this->WaterUse_RainColl_CollectionSurfName_1_10_;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionSurfName_1_10 (const WaterUse_RainColl_CollectionSurfName_1_10_type& x)
      {
        this->WaterUse_RainColl_CollectionSurfName_1_10_.set (x);
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionSurfName_1_10 (const WaterUse_RainColl_CollectionSurfName_1_10_optional& x)
      {
        this->WaterUse_RainColl_CollectionSurfName_1_10_ = x;
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      WaterUse_RainColl_CollectionSurfName_1_10 (::std::auto_ptr< WaterUse_RainColl_CollectionSurfName_1_10_type > x)
      {
        this->WaterUse_RainColl_CollectionSurfName_1_10_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowStorage_WaterStorage_CleanWater
      //

      SimFlowStorage_WaterStorage_CleanWater::
      SimFlowStorage_WaterStorage_CleanWater ()
      : ::schema::simxml::MepModel::SimFlowStorage_WaterStorage (),
        SimFlowSto_Name_ (this),
        SimFlowSto_AmbTempdic_ (this),
        SimFlowSto_AmbTempSchedName_ (this),
        SimFlowSto_ZoneName_ (this),
        SimFlowSto_WaterQualitySubcategory_ (this),
        SimFlowSto_MaxCap_ (this),
        SimFlowSto_InitVol_ (this),
        SimFlowSto_DesignFlowRate_ (this),
        SimFlowSto_DesignOutFlowRate_ (this),
        SimFlowSto_OverflowDestination_ (this),
        SimFlowSto_TypeSupplyCntlledByFloatValve_ (this),
        SimFlowSto_FloatValveOnCap_ (this),
        SimFlowSto_FloatValvefCap_ (this),
        SimFlowSto_BackupMainsCap_ (this),
        SimFlowSto_OtherTankName_ (this),
        SimFlowSto_WaterThermalMode_ (this),
        SimFlowSto_WaterTempSchedName_ (this),
        SimFlowSto_TankSurfArea_ (this),
        SimFlowSto_TankUVal_ (this),
        SimFlowSto_TankOutsideSurfMatlName_ (this),
        WaterUse_Well_Name_ (this),
        WaterUse_Well_StoTankName_ (this),
        WaterUse_Well_PumpDepth_ (this),
        WaterUse_Well_PumpRatedFlowRate_ (this),
        WaterUse_Well_PumpRatedHead_ (this),
        WaterUse_Well_PumpRatedPowerConsump_ (this),
        WaterUse_Well_PumpEff_ (this),
        WaterUse_Well_WellRecoveryRate_ (this),
        WaterUse_Well_NomWellStoVolume_ (this),
        WaterUse_Well_WaterTableDepthMode_ (this),
        WaterUse_Well_WaterTableDepth_ (this),
        WaterUse_Well_WaterTableDepthSchedName_ (this),
        WaterUse_RainColl_Name_ (this),
        WaterUse_RainColl_StoTankName_ (this),
        WaterUse_RainColl_LossFactorMode_ (this),
        WaterUse_RainColl_CollectionLossFactor_ (this),
        WaterUse_RainColl_CollectionLossFactorSchedName_ (this),
        WaterUse_RainColl_MaxCollectionRate_ (this),
        WaterUse_RainColl_CollectionSurfName_1_10_ (this)
      {
      }

      SimFlowStorage_WaterStorage_CleanWater::
      SimFlowStorage_WaterStorage_CleanWater (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowStorage_WaterStorage (RefId),
        SimFlowSto_Name_ (this),
        SimFlowSto_AmbTempdic_ (this),
        SimFlowSto_AmbTempSchedName_ (this),
        SimFlowSto_ZoneName_ (this),
        SimFlowSto_WaterQualitySubcategory_ (this),
        SimFlowSto_MaxCap_ (this),
        SimFlowSto_InitVol_ (this),
        SimFlowSto_DesignFlowRate_ (this),
        SimFlowSto_DesignOutFlowRate_ (this),
        SimFlowSto_OverflowDestination_ (this),
        SimFlowSto_TypeSupplyCntlledByFloatValve_ (this),
        SimFlowSto_FloatValveOnCap_ (this),
        SimFlowSto_FloatValvefCap_ (this),
        SimFlowSto_BackupMainsCap_ (this),
        SimFlowSto_OtherTankName_ (this),
        SimFlowSto_WaterThermalMode_ (this),
        SimFlowSto_WaterTempSchedName_ (this),
        SimFlowSto_TankSurfArea_ (this),
        SimFlowSto_TankUVal_ (this),
        SimFlowSto_TankOutsideSurfMatlName_ (this),
        WaterUse_Well_Name_ (this),
        WaterUse_Well_StoTankName_ (this),
        WaterUse_Well_PumpDepth_ (this),
        WaterUse_Well_PumpRatedFlowRate_ (this),
        WaterUse_Well_PumpRatedHead_ (this),
        WaterUse_Well_PumpRatedPowerConsump_ (this),
        WaterUse_Well_PumpEff_ (this),
        WaterUse_Well_WellRecoveryRate_ (this),
        WaterUse_Well_NomWellStoVolume_ (this),
        WaterUse_Well_WaterTableDepthMode_ (this),
        WaterUse_Well_WaterTableDepth_ (this),
        WaterUse_Well_WaterTableDepthSchedName_ (this),
        WaterUse_RainColl_Name_ (this),
        WaterUse_RainColl_StoTankName_ (this),
        WaterUse_RainColl_LossFactorMode_ (this),
        WaterUse_RainColl_CollectionLossFactor_ (this),
        WaterUse_RainColl_CollectionLossFactorSchedName_ (this),
        WaterUse_RainColl_MaxCollectionRate_ (this),
        WaterUse_RainColl_CollectionSurfName_1_10_ (this)
      {
      }

      SimFlowStorage_WaterStorage_CleanWater::
      SimFlowStorage_WaterStorage_CleanWater (const SimFlowStorage_WaterStorage_CleanWater& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowStorage_WaterStorage (x, f, c),
        SimFlowSto_Name_ (x.SimFlowSto_Name_, f, this),
        SimFlowSto_AmbTempdic_ (x.SimFlowSto_AmbTempdic_, f, this),
        SimFlowSto_AmbTempSchedName_ (x.SimFlowSto_AmbTempSchedName_, f, this),
        SimFlowSto_ZoneName_ (x.SimFlowSto_ZoneName_, f, this),
        SimFlowSto_WaterQualitySubcategory_ (x.SimFlowSto_WaterQualitySubcategory_, f, this),
        SimFlowSto_MaxCap_ (x.SimFlowSto_MaxCap_, f, this),
        SimFlowSto_InitVol_ (x.SimFlowSto_InitVol_, f, this),
        SimFlowSto_DesignFlowRate_ (x.SimFlowSto_DesignFlowRate_, f, this),
        SimFlowSto_DesignOutFlowRate_ (x.SimFlowSto_DesignOutFlowRate_, f, this),
        SimFlowSto_OverflowDestination_ (x.SimFlowSto_OverflowDestination_, f, this),
        SimFlowSto_TypeSupplyCntlledByFloatValve_ (x.SimFlowSto_TypeSupplyCntlledByFloatValve_, f, this),
        SimFlowSto_FloatValveOnCap_ (x.SimFlowSto_FloatValveOnCap_, f, this),
        SimFlowSto_FloatValvefCap_ (x.SimFlowSto_FloatValvefCap_, f, this),
        SimFlowSto_BackupMainsCap_ (x.SimFlowSto_BackupMainsCap_, f, this),
        SimFlowSto_OtherTankName_ (x.SimFlowSto_OtherTankName_, f, this),
        SimFlowSto_WaterThermalMode_ (x.SimFlowSto_WaterThermalMode_, f, this),
        SimFlowSto_WaterTempSchedName_ (x.SimFlowSto_WaterTempSchedName_, f, this),
        SimFlowSto_TankSurfArea_ (x.SimFlowSto_TankSurfArea_, f, this),
        SimFlowSto_TankUVal_ (x.SimFlowSto_TankUVal_, f, this),
        SimFlowSto_TankOutsideSurfMatlName_ (x.SimFlowSto_TankOutsideSurfMatlName_, f, this),
        WaterUse_Well_Name_ (x.WaterUse_Well_Name_, f, this),
        WaterUse_Well_StoTankName_ (x.WaterUse_Well_StoTankName_, f, this),
        WaterUse_Well_PumpDepth_ (x.WaterUse_Well_PumpDepth_, f, this),
        WaterUse_Well_PumpRatedFlowRate_ (x.WaterUse_Well_PumpRatedFlowRate_, f, this),
        WaterUse_Well_PumpRatedHead_ (x.WaterUse_Well_PumpRatedHead_, f, this),
        WaterUse_Well_PumpRatedPowerConsump_ (x.WaterUse_Well_PumpRatedPowerConsump_, f, this),
        WaterUse_Well_PumpEff_ (x.WaterUse_Well_PumpEff_, f, this),
        WaterUse_Well_WellRecoveryRate_ (x.WaterUse_Well_WellRecoveryRate_, f, this),
        WaterUse_Well_NomWellStoVolume_ (x.WaterUse_Well_NomWellStoVolume_, f, this),
        WaterUse_Well_WaterTableDepthMode_ (x.WaterUse_Well_WaterTableDepthMode_, f, this),
        WaterUse_Well_WaterTableDepth_ (x.WaterUse_Well_WaterTableDepth_, f, this),
        WaterUse_Well_WaterTableDepthSchedName_ (x.WaterUse_Well_WaterTableDepthSchedName_, f, this),
        WaterUse_RainColl_Name_ (x.WaterUse_RainColl_Name_, f, this),
        WaterUse_RainColl_StoTankName_ (x.WaterUse_RainColl_StoTankName_, f, this),
        WaterUse_RainColl_LossFactorMode_ (x.WaterUse_RainColl_LossFactorMode_, f, this),
        WaterUse_RainColl_CollectionLossFactor_ (x.WaterUse_RainColl_CollectionLossFactor_, f, this),
        WaterUse_RainColl_CollectionLossFactorSchedName_ (x.WaterUse_RainColl_CollectionLossFactorSchedName_, f, this),
        WaterUse_RainColl_MaxCollectionRate_ (x.WaterUse_RainColl_MaxCollectionRate_, f, this),
        WaterUse_RainColl_CollectionSurfName_1_10_ (x.WaterUse_RainColl_CollectionSurfName_1_10_, f, this)
      {
      }

      SimFlowStorage_WaterStorage_CleanWater::
      SimFlowStorage_WaterStorage_CleanWater (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowStorage_WaterStorage (e, f | ::xml_schema::flags::base, c),
        SimFlowSto_Name_ (this),
        SimFlowSto_AmbTempdic_ (this),
        SimFlowSto_AmbTempSchedName_ (this),
        SimFlowSto_ZoneName_ (this),
        SimFlowSto_WaterQualitySubcategory_ (this),
        SimFlowSto_MaxCap_ (this),
        SimFlowSto_InitVol_ (this),
        SimFlowSto_DesignFlowRate_ (this),
        SimFlowSto_DesignOutFlowRate_ (this),
        SimFlowSto_OverflowDestination_ (this),
        SimFlowSto_TypeSupplyCntlledByFloatValve_ (this),
        SimFlowSto_FloatValveOnCap_ (this),
        SimFlowSto_FloatValvefCap_ (this),
        SimFlowSto_BackupMainsCap_ (this),
        SimFlowSto_OtherTankName_ (this),
        SimFlowSto_WaterThermalMode_ (this),
        SimFlowSto_WaterTempSchedName_ (this),
        SimFlowSto_TankSurfArea_ (this),
        SimFlowSto_TankUVal_ (this),
        SimFlowSto_TankOutsideSurfMatlName_ (this),
        WaterUse_Well_Name_ (this),
        WaterUse_Well_StoTankName_ (this),
        WaterUse_Well_PumpDepth_ (this),
        WaterUse_Well_PumpRatedFlowRate_ (this),
        WaterUse_Well_PumpRatedHead_ (this),
        WaterUse_Well_PumpRatedPowerConsump_ (this),
        WaterUse_Well_PumpEff_ (this),
        WaterUse_Well_WellRecoveryRate_ (this),
        WaterUse_Well_NomWellStoVolume_ (this),
        WaterUse_Well_WaterTableDepthMode_ (this),
        WaterUse_Well_WaterTableDepth_ (this),
        WaterUse_Well_WaterTableDepthSchedName_ (this),
        WaterUse_RainColl_Name_ (this),
        WaterUse_RainColl_StoTankName_ (this),
        WaterUse_RainColl_LossFactorMode_ (this),
        WaterUse_RainColl_CollectionLossFactor_ (this),
        WaterUse_RainColl_CollectionLossFactorSchedName_ (this),
        WaterUse_RainColl_MaxCollectionRate_ (this),
        WaterUse_RainColl_CollectionSurfName_1_10_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowStorage_WaterStorage_CleanWater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowStorage_WaterStorage::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowSto_Name
          //
          if (n.name () == "SimFlowSto_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_Name_type > r (
              SimFlowSto_Name_traits::create (i, f, this));

            if (!this->SimFlowSto_Name_)
            {
              this->SimFlowSto_Name_.set (r);
              continue;
            }
          }

          // SimFlowSto_AmbTempdic
          //
          if (n.name () == "SimFlowSto_AmbTempdic" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_AmbTempdic_type > r (
              SimFlowSto_AmbTempdic_traits::create (i, f, this));

            if (!this->SimFlowSto_AmbTempdic_)
            {
              this->SimFlowSto_AmbTempdic_.set (r);
              continue;
            }
          }

          // SimFlowSto_AmbTempSchedName
          //
          if (n.name () == "SimFlowSto_AmbTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_AmbTempSchedName_type > r (
              SimFlowSto_AmbTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowSto_AmbTempSchedName_)
            {
              this->SimFlowSto_AmbTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowSto_ZoneName
          //
          if (n.name () == "SimFlowSto_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_ZoneName_type > r (
              SimFlowSto_ZoneName_traits::create (i, f, this));

            if (!this->SimFlowSto_ZoneName_)
            {
              this->SimFlowSto_ZoneName_.set (r);
              continue;
            }
          }

          // SimFlowSto_WaterQualitySubcategory
          //
          if (n.name () == "SimFlowSto_WaterQualitySubcategory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_WaterQualitySubcategory_type > r (
              SimFlowSto_WaterQualitySubcategory_traits::create (i, f, this));

            if (!this->SimFlowSto_WaterQualitySubcategory_)
            {
              this->SimFlowSto_WaterQualitySubcategory_.set (r);
              continue;
            }
          }

          // SimFlowSto_MaxCap
          //
          if (n.name () == "SimFlowSto_MaxCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_MaxCap_)
            {
              this->SimFlowSto_MaxCap_.set (SimFlowSto_MaxCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_InitVol
          //
          if (n.name () == "SimFlowSto_InitVol" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_InitVol_)
            {
              this->SimFlowSto_InitVol_.set (SimFlowSto_InitVol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_DesignFlowRate
          //
          if (n.name () == "SimFlowSto_DesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_DesignFlowRate_)
            {
              this->SimFlowSto_DesignFlowRate_.set (SimFlowSto_DesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_DesignOutFlowRate
          //
          if (n.name () == "SimFlowSto_DesignOutFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_DesignOutFlowRate_)
            {
              this->SimFlowSto_DesignOutFlowRate_.set (SimFlowSto_DesignOutFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_OverflowDestination
          //
          if (n.name () == "SimFlowSto_OverflowDestination" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_OverflowDestination_type > r (
              SimFlowSto_OverflowDestination_traits::create (i, f, this));

            if (!this->SimFlowSto_OverflowDestination_)
            {
              this->SimFlowSto_OverflowDestination_.set (r);
              continue;
            }
          }

          // SimFlowSto_TypeSupplyCntlledByFloatValve
          //
          if (n.name () == "SimFlowSto_TypeSupplyCntlledByFloatValve" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_TypeSupplyCntlledByFloatValve_type > r (
              SimFlowSto_TypeSupplyCntlledByFloatValve_traits::create (i, f, this));

            if (!this->SimFlowSto_TypeSupplyCntlledByFloatValve_)
            {
              this->SimFlowSto_TypeSupplyCntlledByFloatValve_.set (r);
              continue;
            }
          }

          // SimFlowSto_FloatValveOnCap
          //
          if (n.name () == "SimFlowSto_FloatValveOnCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_FloatValveOnCap_)
            {
              this->SimFlowSto_FloatValveOnCap_.set (SimFlowSto_FloatValveOnCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_FloatValvefCap
          //
          if (n.name () == "SimFlowSto_FloatValvefCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_FloatValvefCap_)
            {
              this->SimFlowSto_FloatValvefCap_.set (SimFlowSto_FloatValvefCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_BackupMainsCap
          //
          if (n.name () == "SimFlowSto_BackupMainsCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_BackupMainsCap_)
            {
              this->SimFlowSto_BackupMainsCap_.set (SimFlowSto_BackupMainsCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_OtherTankName
          //
          if (n.name () == "SimFlowSto_OtherTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_OtherTankName_type > r (
              SimFlowSto_OtherTankName_traits::create (i, f, this));

            if (!this->SimFlowSto_OtherTankName_)
            {
              this->SimFlowSto_OtherTankName_.set (r);
              continue;
            }
          }

          // SimFlowSto_WaterThermalMode
          //
          if (n.name () == "SimFlowSto_WaterThermalMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_WaterThermalMode_type > r (
              SimFlowSto_WaterThermalMode_traits::create (i, f, this));

            if (!this->SimFlowSto_WaterThermalMode_)
            {
              this->SimFlowSto_WaterThermalMode_.set (r);
              continue;
            }
          }

          // SimFlowSto_WaterTempSchedName
          //
          if (n.name () == "SimFlowSto_WaterTempSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_WaterTempSchedName_type > r (
              SimFlowSto_WaterTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowSto_WaterTempSchedName_)
            {
              this->SimFlowSto_WaterTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowSto_TankSurfArea
          //
          if (n.name () == "SimFlowSto_TankSurfArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_TankSurfArea_)
            {
              this->SimFlowSto_TankSurfArea_.set (SimFlowSto_TankSurfArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_TankUVal
          //
          if (n.name () == "SimFlowSto_TankUVal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSto_TankUVal_)
            {
              this->SimFlowSto_TankUVal_.set (SimFlowSto_TankUVal_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSto_TankOutsideSurfMatlName
          //
          if (n.name () == "SimFlowSto_TankOutsideSurfMatlName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSto_TankOutsideSurfMatlName_type > r (
              SimFlowSto_TankOutsideSurfMatlName_traits::create (i, f, this));

            if (!this->SimFlowSto_TankOutsideSurfMatlName_)
            {
              this->SimFlowSto_TankOutsideSurfMatlName_.set (r);
              continue;
            }
          }

          // WaterUse_Well_Name
          //
          if (n.name () == "WaterUse_Well_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_Well_Name_type > r (
              WaterUse_Well_Name_traits::create (i, f, this));

            if (!this->WaterUse_Well_Name_)
            {
              this->WaterUse_Well_Name_.set (r);
              continue;
            }
          }

          // WaterUse_Well_StoTankName
          //
          if (n.name () == "WaterUse_Well_StoTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_Well_StoTankName_type > r (
              WaterUse_Well_StoTankName_traits::create (i, f, this));

            if (!this->WaterUse_Well_StoTankName_)
            {
              this->WaterUse_Well_StoTankName_.set (r);
              continue;
            }
          }

          // WaterUse_Well_PumpDepth
          //
          if (n.name () == "WaterUse_Well_PumpDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_PumpDepth_)
            {
              this->WaterUse_Well_PumpDepth_.set (WaterUse_Well_PumpDepth_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_PumpRatedFlowRate
          //
          if (n.name () == "WaterUse_Well_PumpRatedFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_PumpRatedFlowRate_)
            {
              this->WaterUse_Well_PumpRatedFlowRate_.set (WaterUse_Well_PumpRatedFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_PumpRatedHead
          //
          if (n.name () == "WaterUse_Well_PumpRatedHead" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_PumpRatedHead_)
            {
              this->WaterUse_Well_PumpRatedHead_.set (WaterUse_Well_PumpRatedHead_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_PumpRatedPowerConsump
          //
          if (n.name () == "WaterUse_Well_PumpRatedPowerConsump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_PumpRatedPowerConsump_)
            {
              this->WaterUse_Well_PumpRatedPowerConsump_.set (WaterUse_Well_PumpRatedPowerConsump_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_PumpEff
          //
          if (n.name () == "WaterUse_Well_PumpEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_PumpEff_)
            {
              this->WaterUse_Well_PumpEff_.set (WaterUse_Well_PumpEff_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_WellRecoveryRate
          //
          if (n.name () == "WaterUse_Well_WellRecoveryRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_WellRecoveryRate_)
            {
              this->WaterUse_Well_WellRecoveryRate_.set (WaterUse_Well_WellRecoveryRate_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_NomWellStoVolume
          //
          if (n.name () == "WaterUse_Well_NomWellStoVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_NomWellStoVolume_)
            {
              this->WaterUse_Well_NomWellStoVolume_.set (WaterUse_Well_NomWellStoVolume_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_WaterTableDepthMode
          //
          if (n.name () == "WaterUse_Well_WaterTableDepthMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_Well_WaterTableDepthMode_type > r (
              WaterUse_Well_WaterTableDepthMode_traits::create (i, f, this));

            if (!this->WaterUse_Well_WaterTableDepthMode_)
            {
              this->WaterUse_Well_WaterTableDepthMode_.set (r);
              continue;
            }
          }

          // WaterUse_Well_WaterTableDepth
          //
          if (n.name () == "WaterUse_Well_WaterTableDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_Well_WaterTableDepth_)
            {
              this->WaterUse_Well_WaterTableDepth_.set (WaterUse_Well_WaterTableDepth_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_Well_WaterTableDepthSchedName
          //
          if (n.name () == "WaterUse_Well_WaterTableDepthSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_Well_WaterTableDepthSchedName_type > r (
              WaterUse_Well_WaterTableDepthSchedName_traits::create (i, f, this));

            if (!this->WaterUse_Well_WaterTableDepthSchedName_)
            {
              this->WaterUse_Well_WaterTableDepthSchedName_.set (r);
              continue;
            }
          }

          // WaterUse_RainColl_Name
          //
          if (n.name () == "WaterUse_RainColl_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_RainColl_Name_type > r (
              WaterUse_RainColl_Name_traits::create (i, f, this));

            if (!this->WaterUse_RainColl_Name_)
            {
              this->WaterUse_RainColl_Name_.set (r);
              continue;
            }
          }

          // WaterUse_RainColl_StoTankName
          //
          if (n.name () == "WaterUse_RainColl_StoTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_RainColl_StoTankName_type > r (
              WaterUse_RainColl_StoTankName_traits::create (i, f, this));

            if (!this->WaterUse_RainColl_StoTankName_)
            {
              this->WaterUse_RainColl_StoTankName_.set (r);
              continue;
            }
          }

          // WaterUse_RainColl_LossFactorMode
          //
          if (n.name () == "WaterUse_RainColl_LossFactorMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_RainColl_LossFactorMode_type > r (
              WaterUse_RainColl_LossFactorMode_traits::create (i, f, this));

            if (!this->WaterUse_RainColl_LossFactorMode_)
            {
              this->WaterUse_RainColl_LossFactorMode_.set (r);
              continue;
            }
          }

          // WaterUse_RainColl_CollectionLossFactor
          //
          if (n.name () == "WaterUse_RainColl_CollectionLossFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_RainColl_CollectionLossFactor_)
            {
              this->WaterUse_RainColl_CollectionLossFactor_.set (WaterUse_RainColl_CollectionLossFactor_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_RainColl_CollectionLossFactorSchedName
          //
          if (n.name () == "WaterUse_RainColl_CollectionLossFactorSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_RainColl_CollectionLossFactorSchedName_type > r (
              WaterUse_RainColl_CollectionLossFactorSchedName_traits::create (i, f, this));

            if (!this->WaterUse_RainColl_CollectionLossFactorSchedName_)
            {
              this->WaterUse_RainColl_CollectionLossFactorSchedName_.set (r);
              continue;
            }
          }

          // WaterUse_RainColl_MaxCollectionRate
          //
          if (n.name () == "WaterUse_RainColl_MaxCollectionRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->WaterUse_RainColl_MaxCollectionRate_)
            {
              this->WaterUse_RainColl_MaxCollectionRate_.set (WaterUse_RainColl_MaxCollectionRate_traits::create (i, f, this));
              continue;
            }
          }

          // WaterUse_RainColl_CollectionSurfName_1_10
          //
          if (n.name () == "WaterUse_RainColl_CollectionSurfName_1_10" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< WaterUse_RainColl_CollectionSurfName_1_10_type > r (
              WaterUse_RainColl_CollectionSurfName_1_10_traits::create (i, f, this));

            if (!this->WaterUse_RainColl_CollectionSurfName_1_10_)
            {
              this->WaterUse_RainColl_CollectionSurfName_1_10_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowStorage_WaterStorage_CleanWater* SimFlowStorage_WaterStorage_CleanWater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowStorage_WaterStorage_CleanWater (*this, f, c);
      }

      SimFlowStorage_WaterStorage_CleanWater& SimFlowStorage_WaterStorage_CleanWater::
      operator= (const SimFlowStorage_WaterStorage_CleanWater& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowStorage_WaterStorage& > (*this) = x;
          this->SimFlowSto_Name_ = x.SimFlowSto_Name_;
          this->SimFlowSto_AmbTempdic_ = x.SimFlowSto_AmbTempdic_;
          this->SimFlowSto_AmbTempSchedName_ = x.SimFlowSto_AmbTempSchedName_;
          this->SimFlowSto_ZoneName_ = x.SimFlowSto_ZoneName_;
          this->SimFlowSto_WaterQualitySubcategory_ = x.SimFlowSto_WaterQualitySubcategory_;
          this->SimFlowSto_MaxCap_ = x.SimFlowSto_MaxCap_;
          this->SimFlowSto_InitVol_ = x.SimFlowSto_InitVol_;
          this->SimFlowSto_DesignFlowRate_ = x.SimFlowSto_DesignFlowRate_;
          this->SimFlowSto_DesignOutFlowRate_ = x.SimFlowSto_DesignOutFlowRate_;
          this->SimFlowSto_OverflowDestination_ = x.SimFlowSto_OverflowDestination_;
          this->SimFlowSto_TypeSupplyCntlledByFloatValve_ = x.SimFlowSto_TypeSupplyCntlledByFloatValve_;
          this->SimFlowSto_FloatValveOnCap_ = x.SimFlowSto_FloatValveOnCap_;
          this->SimFlowSto_FloatValvefCap_ = x.SimFlowSto_FloatValvefCap_;
          this->SimFlowSto_BackupMainsCap_ = x.SimFlowSto_BackupMainsCap_;
          this->SimFlowSto_OtherTankName_ = x.SimFlowSto_OtherTankName_;
          this->SimFlowSto_WaterThermalMode_ = x.SimFlowSto_WaterThermalMode_;
          this->SimFlowSto_WaterTempSchedName_ = x.SimFlowSto_WaterTempSchedName_;
          this->SimFlowSto_TankSurfArea_ = x.SimFlowSto_TankSurfArea_;
          this->SimFlowSto_TankUVal_ = x.SimFlowSto_TankUVal_;
          this->SimFlowSto_TankOutsideSurfMatlName_ = x.SimFlowSto_TankOutsideSurfMatlName_;
          this->WaterUse_Well_Name_ = x.WaterUse_Well_Name_;
          this->WaterUse_Well_StoTankName_ = x.WaterUse_Well_StoTankName_;
          this->WaterUse_Well_PumpDepth_ = x.WaterUse_Well_PumpDepth_;
          this->WaterUse_Well_PumpRatedFlowRate_ = x.WaterUse_Well_PumpRatedFlowRate_;
          this->WaterUse_Well_PumpRatedHead_ = x.WaterUse_Well_PumpRatedHead_;
          this->WaterUse_Well_PumpRatedPowerConsump_ = x.WaterUse_Well_PumpRatedPowerConsump_;
          this->WaterUse_Well_PumpEff_ = x.WaterUse_Well_PumpEff_;
          this->WaterUse_Well_WellRecoveryRate_ = x.WaterUse_Well_WellRecoveryRate_;
          this->WaterUse_Well_NomWellStoVolume_ = x.WaterUse_Well_NomWellStoVolume_;
          this->WaterUse_Well_WaterTableDepthMode_ = x.WaterUse_Well_WaterTableDepthMode_;
          this->WaterUse_Well_WaterTableDepth_ = x.WaterUse_Well_WaterTableDepth_;
          this->WaterUse_Well_WaterTableDepthSchedName_ = x.WaterUse_Well_WaterTableDepthSchedName_;
          this->WaterUse_RainColl_Name_ = x.WaterUse_RainColl_Name_;
          this->WaterUse_RainColl_StoTankName_ = x.WaterUse_RainColl_StoTankName_;
          this->WaterUse_RainColl_LossFactorMode_ = x.WaterUse_RainColl_LossFactorMode_;
          this->WaterUse_RainColl_CollectionLossFactor_ = x.WaterUse_RainColl_CollectionLossFactor_;
          this->WaterUse_RainColl_CollectionLossFactorSchedName_ = x.WaterUse_RainColl_CollectionLossFactorSchedName_;
          this->WaterUse_RainColl_MaxCollectionRate_ = x.WaterUse_RainColl_MaxCollectionRate_;
          this->WaterUse_RainColl_CollectionSurfName_1_10_ = x.WaterUse_RainColl_CollectionSurfName_1_10_;
        }

        return *this;
      }

      SimFlowStorage_WaterStorage_CleanWater::
      ~SimFlowStorage_WaterStorage_CleanWater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

