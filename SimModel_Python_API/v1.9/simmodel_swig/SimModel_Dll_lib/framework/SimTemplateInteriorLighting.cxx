// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateInteriorLighting.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateInteriorLighting
      // 

      const SimTemplateInteriorLighting::ContainingSpace_optional& SimTemplateInteriorLighting::
      ContainingSpace () const
      {
        return this->ContainingSpace_;
      }

      SimTemplateInteriorLighting::ContainingSpace_optional& SimTemplateInteriorLighting::
      ContainingSpace ()
      {
        return this->ContainingSpace_;
      }

      void SimTemplateInteriorLighting::
      ContainingSpace (const ContainingSpace_type& x)
      {
        this->ContainingSpace_.set (x);
      }

      void SimTemplateInteriorLighting::
      ContainingSpace (const ContainingSpace_optional& x)
      {
        this->ContainingSpace_ = x;
      }

      void SimTemplateInteriorLighting::
      ContainingSpace (::std::auto_ptr< ContainingSpace_type > x)
      {
        this->ContainingSpace_.set (x);
      }

      const SimTemplateInteriorLighting::InteriorLightingSpecMethod_optional& SimTemplateInteriorLighting::
      InteriorLightingSpecMethod () const
      {
        return this->InteriorLightingSpecMethod_;
      }

      SimTemplateInteriorLighting::InteriorLightingSpecMethod_optional& SimTemplateInteriorLighting::
      InteriorLightingSpecMethod ()
      {
        return this->InteriorLightingSpecMethod_;
      }

      void SimTemplateInteriorLighting::
      InteriorLightingSpecMethod (const InteriorLightingSpecMethod_type& x)
      {
        this->InteriorLightingSpecMethod_.set (x);
      }

      void SimTemplateInteriorLighting::
      InteriorLightingSpecMethod (const InteriorLightingSpecMethod_optional& x)
      {
        this->InteriorLightingSpecMethod_ = x;
      }

      void SimTemplateInteriorLighting::
      InteriorLightingSpecMethod (::std::auto_ptr< InteriorLightingSpecMethod_type > x)
      {
        this->InteriorLightingSpecMethod_.set (x);
      }

      const SimTemplateInteriorLighting::T24Status_optional& SimTemplateInteriorLighting::
      T24Status () const
      {
        return this->T24Status_;
      }

      SimTemplateInteriorLighting::T24Status_optional& SimTemplateInteriorLighting::
      T24Status ()
      {
        return this->T24Status_;
      }

      void SimTemplateInteriorLighting::
      T24Status (const T24Status_type& x)
      {
        this->T24Status_.set (x);
      }

      void SimTemplateInteriorLighting::
      T24Status (const T24Status_optional& x)
      {
        this->T24Status_ = x;
      }

      void SimTemplateInteriorLighting::
      T24Status (::std::auto_ptr< T24Status_type > x)
      {
        this->T24Status_.set (x);
      }

      const SimTemplateInteriorLighting::LumMountElevation_optional& SimTemplateInteriorLighting::
      LumMountElevation () const
      {
        return this->LumMountElevation_;
      }

      SimTemplateInteriorLighting::LumMountElevation_optional& SimTemplateInteriorLighting::
      LumMountElevation ()
      {
        return this->LumMountElevation_;
      }

      void SimTemplateInteriorLighting::
      LumMountElevation (const LumMountElevation_type& x)
      {
        this->LumMountElevation_.set (x);
      }

      void SimTemplateInteriorLighting::
      LumMountElevation (const LumMountElevation_optional& x)
      {
        this->LumMountElevation_ = x;
      }

      const SimTemplateInteriorLighting::FractionHeatToSpace_optional& SimTemplateInteriorLighting::
      FractionHeatToSpace () const
      {
        return this->FractionHeatToSpace_;
      }

      SimTemplateInteriorLighting::FractionHeatToSpace_optional& SimTemplateInteriorLighting::
      FractionHeatToSpace ()
      {
        return this->FractionHeatToSpace_;
      }

      void SimTemplateInteriorLighting::
      FractionHeatToSpace (const FractionHeatToSpace_type& x)
      {
        this->FractionHeatToSpace_.set (x);
      }

      void SimTemplateInteriorLighting::
      FractionHeatToSpace (const FractionHeatToSpace_optional& x)
      {
        this->FractionHeatToSpace_ = x;
      }

      const SimTemplateInteriorLighting::RadiantFractionOfSpaceHeat_optional& SimTemplateInteriorLighting::
      RadiantFractionOfSpaceHeat () const
      {
        return this->RadiantFractionOfSpaceHeat_;
      }

      SimTemplateInteriorLighting::RadiantFractionOfSpaceHeat_optional& SimTemplateInteriorLighting::
      RadiantFractionOfSpaceHeat ()
      {
        return this->RadiantFractionOfSpaceHeat_;
      }

      void SimTemplateInteriorLighting::
      RadiantFractionOfSpaceHeat (const RadiantFractionOfSpaceHeat_type& x)
      {
        this->RadiantFractionOfSpaceHeat_.set (x);
      }

      void SimTemplateInteriorLighting::
      RadiantFractionOfSpaceHeat (const RadiantFractionOfSpaceHeat_optional& x)
      {
        this->RadiantFractionOfSpaceHeat_ = x;
      }

      const SimTemplateInteriorLighting::Luminaire1_optional& SimTemplateInteriorLighting::
      Luminaire1 () const
      {
        return this->Luminaire1_;
      }

      SimTemplateInteriorLighting::Luminaire1_optional& SimTemplateInteriorLighting::
      Luminaire1 ()
      {
        return this->Luminaire1_;
      }

      void SimTemplateInteriorLighting::
      Luminaire1 (const Luminaire1_type& x)
      {
        this->Luminaire1_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire1 (const Luminaire1_optional& x)
      {
        this->Luminaire1_ = x;
      }

      void SimTemplateInteriorLighting::
      Luminaire1 (::std::auto_ptr< Luminaire1_type > x)
      {
        this->Luminaire1_.set (x);
      }

      const SimTemplateInteriorLighting::Luminaire1Count_optional& SimTemplateInteriorLighting::
      Luminaire1Count () const
      {
        return this->Luminaire1Count_;
      }

      SimTemplateInteriorLighting::Luminaire1Count_optional& SimTemplateInteriorLighting::
      Luminaire1Count ()
      {
        return this->Luminaire1Count_;
      }

      void SimTemplateInteriorLighting::
      Luminaire1Count (const Luminaire1Count_type& x)
      {
        this->Luminaire1Count_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire1Count (const Luminaire1Count_optional& x)
      {
        this->Luminaire1Count_ = x;
      }

      const SimTemplateInteriorLighting::Luminaire2_optional& SimTemplateInteriorLighting::
      Luminaire2 () const
      {
        return this->Luminaire2_;
      }

      SimTemplateInteriorLighting::Luminaire2_optional& SimTemplateInteriorLighting::
      Luminaire2 ()
      {
        return this->Luminaire2_;
      }

      void SimTemplateInteriorLighting::
      Luminaire2 (const Luminaire2_type& x)
      {
        this->Luminaire2_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire2 (const Luminaire2_optional& x)
      {
        this->Luminaire2_ = x;
      }

      void SimTemplateInteriorLighting::
      Luminaire2 (::std::auto_ptr< Luminaire2_type > x)
      {
        this->Luminaire2_.set (x);
      }

      const SimTemplateInteriorLighting::Luminaire2Count_optional& SimTemplateInteriorLighting::
      Luminaire2Count () const
      {
        return this->Luminaire2Count_;
      }

      SimTemplateInteriorLighting::Luminaire2Count_optional& SimTemplateInteriorLighting::
      Luminaire2Count ()
      {
        return this->Luminaire2Count_;
      }

      void SimTemplateInteriorLighting::
      Luminaire2Count (const Luminaire2Count_type& x)
      {
        this->Luminaire2Count_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire2Count (const Luminaire2Count_optional& x)
      {
        this->Luminaire2Count_ = x;
      }

      const SimTemplateInteriorLighting::Luminaire3_optional& SimTemplateInteriorLighting::
      Luminaire3 () const
      {
        return this->Luminaire3_;
      }

      SimTemplateInteriorLighting::Luminaire3_optional& SimTemplateInteriorLighting::
      Luminaire3 ()
      {
        return this->Luminaire3_;
      }

      void SimTemplateInteriorLighting::
      Luminaire3 (const Luminaire3_type& x)
      {
        this->Luminaire3_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire3 (const Luminaire3_optional& x)
      {
        this->Luminaire3_ = x;
      }

      void SimTemplateInteriorLighting::
      Luminaire3 (::std::auto_ptr< Luminaire3_type > x)
      {
        this->Luminaire3_.set (x);
      }

      const SimTemplateInteriorLighting::Luminaire3Count_optional& SimTemplateInteriorLighting::
      Luminaire3Count () const
      {
        return this->Luminaire3Count_;
      }

      SimTemplateInteriorLighting::Luminaire3Count_optional& SimTemplateInteriorLighting::
      Luminaire3Count ()
      {
        return this->Luminaire3Count_;
      }

      void SimTemplateInteriorLighting::
      Luminaire3Count (const Luminaire3Count_type& x)
      {
        this->Luminaire3Count_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire3Count (const Luminaire3Count_optional& x)
      {
        this->Luminaire3Count_ = x;
      }

      const SimTemplateInteriorLighting::Luminaire4_optional& SimTemplateInteriorLighting::
      Luminaire4 () const
      {
        return this->Luminaire4_;
      }

      SimTemplateInteriorLighting::Luminaire4_optional& SimTemplateInteriorLighting::
      Luminaire4 ()
      {
        return this->Luminaire4_;
      }

      void SimTemplateInteriorLighting::
      Luminaire4 (const Luminaire4_type& x)
      {
        this->Luminaire4_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire4 (const Luminaire4_optional& x)
      {
        this->Luminaire4_ = x;
      }

      void SimTemplateInteriorLighting::
      Luminaire4 (::std::auto_ptr< Luminaire4_type > x)
      {
        this->Luminaire4_.set (x);
      }

      const SimTemplateInteriorLighting::Luminaire4Count_optional& SimTemplateInteriorLighting::
      Luminaire4Count () const
      {
        return this->Luminaire4Count_;
      }

      SimTemplateInteriorLighting::Luminaire4Count_optional& SimTemplateInteriorLighting::
      Luminaire4Count ()
      {
        return this->Luminaire4Count_;
      }

      void SimTemplateInteriorLighting::
      Luminaire4Count (const Luminaire4Count_type& x)
      {
        this->Luminaire4Count_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire4Count (const Luminaire4Count_optional& x)
      {
        this->Luminaire4Count_ = x;
      }

      const SimTemplateInteriorLighting::Luminaire5_optional& SimTemplateInteriorLighting::
      Luminaire5 () const
      {
        return this->Luminaire5_;
      }

      SimTemplateInteriorLighting::Luminaire5_optional& SimTemplateInteriorLighting::
      Luminaire5 ()
      {
        return this->Luminaire5_;
      }

      void SimTemplateInteriorLighting::
      Luminaire5 (const Luminaire5_type& x)
      {
        this->Luminaire5_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire5 (const Luminaire5_optional& x)
      {
        this->Luminaire5_ = x;
      }

      void SimTemplateInteriorLighting::
      Luminaire5 (::std::auto_ptr< Luminaire5_type > x)
      {
        this->Luminaire5_.set (x);
      }

      const SimTemplateInteriorLighting::Luminaire5Count_optional& SimTemplateInteriorLighting::
      Luminaire5Count () const
      {
        return this->Luminaire5Count_;
      }

      SimTemplateInteriorLighting::Luminaire5Count_optional& SimTemplateInteriorLighting::
      Luminaire5Count ()
      {
        return this->Luminaire5Count_;
      }

      void SimTemplateInteriorLighting::
      Luminaire5Count (const Luminaire5Count_type& x)
      {
        this->Luminaire5Count_.set (x);
      }

      void SimTemplateInteriorLighting::
      Luminaire5Count (const Luminaire5Count_optional& x)
      {
        this->Luminaire5Count_ = x;
      }

      const SimTemplateInteriorLighting::AssignedDaylitZone_optional& SimTemplateInteriorLighting::
      AssignedDaylitZone () const
      {
        return this->AssignedDaylitZone_;
      }

      SimTemplateInteriorLighting::AssignedDaylitZone_optional& SimTemplateInteriorLighting::
      AssignedDaylitZone ()
      {
        return this->AssignedDaylitZone_;
      }

      void SimTemplateInteriorLighting::
      AssignedDaylitZone (const AssignedDaylitZone_type& x)
      {
        this->AssignedDaylitZone_.set (x);
      }

      void SimTemplateInteriorLighting::
      AssignedDaylitZone (const AssignedDaylitZone_optional& x)
      {
        this->AssignedDaylitZone_ = x;
      }

      void SimTemplateInteriorLighting::
      AssignedDaylitZone (::std::auto_ptr< AssignedDaylitZone_type > x)
      {
        this->AssignedDaylitZone_.set (x);
      }

      const SimTemplateInteriorLighting::LightingControls_optional& SimTemplateInteriorLighting::
      LightingControls () const
      {
        return this->LightingControls_;
      }

      SimTemplateInteriorLighting::LightingControls_optional& SimTemplateInteriorLighting::
      LightingControls ()
      {
        return this->LightingControls_;
      }

      void SimTemplateInteriorLighting::
      LightingControls (const LightingControls_type& x)
      {
        this->LightingControls_.set (x);
      }

      void SimTemplateInteriorLighting::
      LightingControls (const LightingControls_optional& x)
      {
        this->LightingControls_ = x;
      }

      void SimTemplateInteriorLighting::
      LightingControls (::std::auto_ptr< LightingControls_type > x)
      {
        this->LightingControls_.set (x);
      }

      const SimTemplateInteriorLighting::PowerAdjustFactor_optional& SimTemplateInteriorLighting::
      PowerAdjustFactor () const
      {
        return this->PowerAdjustFactor_;
      }

      SimTemplateInteriorLighting::PowerAdjustFactor_optional& SimTemplateInteriorLighting::
      PowerAdjustFactor ()
      {
        return this->PowerAdjustFactor_;
      }

      void SimTemplateInteriorLighting::
      PowerAdjustFactor (const PowerAdjustFactor_type& x)
      {
        this->PowerAdjustFactor_.set (x);
      }

      void SimTemplateInteriorLighting::
      PowerAdjustFactor (const PowerAdjustFactor_optional& x)
      {
        this->PowerAdjustFactor_ = x;
      }

      const SimTemplateInteriorLighting::LightingControlCount_optional& SimTemplateInteriorLighting::
      LightingControlCount () const
      {
        return this->LightingControlCount_;
      }

      SimTemplateInteriorLighting::LightingControlCount_optional& SimTemplateInteriorLighting::
      LightingControlCount ()
      {
        return this->LightingControlCount_;
      }

      void SimTemplateInteriorLighting::
      LightingControlCount (const LightingControlCount_type& x)
      {
        this->LightingControlCount_.set (x);
      }

      void SimTemplateInteriorLighting::
      LightingControlCount (const LightingControlCount_optional& x)
      {
        this->LightingControlCount_ = x;
      }

      const SimTemplateInteriorLighting::AcceptanceTestRequired_optional& SimTemplateInteriorLighting::
      AcceptanceTestRequired () const
      {
        return this->AcceptanceTestRequired_;
      }

      SimTemplateInteriorLighting::AcceptanceTestRequired_optional& SimTemplateInteriorLighting::
      AcceptanceTestRequired ()
      {
        return this->AcceptanceTestRequired_;
      }

      void SimTemplateInteriorLighting::
      AcceptanceTestRequired (const AcceptanceTestRequired_type& x)
      {
        this->AcceptanceTestRequired_.set (x);
      }

      void SimTemplateInteriorLighting::
      AcceptanceTestRequired (const AcceptanceTestRequired_optional& x)
      {
        this->AcceptanceTestRequired_ = x;
      }

      const SimTemplateInteriorLighting::AllowanceType_optional& SimTemplateInteriorLighting::
      AllowanceType () const
      {
        return this->AllowanceType_;
      }

      SimTemplateInteriorLighting::AllowanceType_optional& SimTemplateInteriorLighting::
      AllowanceType ()
      {
        return this->AllowanceType_;
      }

      void SimTemplateInteriorLighting::
      AllowanceType (const AllowanceType_type& x)
      {
        this->AllowanceType_.set (x);
      }

      void SimTemplateInteriorLighting::
      AllowanceType (const AllowanceType_optional& x)
      {
        this->AllowanceType_ = x;
      }

      void SimTemplateInteriorLighting::
      AllowanceType (::std::auto_ptr< AllowanceType_type > x)
      {
        this->AllowanceType_.set (x);
      }

      const SimTemplateInteriorLighting::AllowanceArea_optional& SimTemplateInteriorLighting::
      AllowanceArea () const
      {
        return this->AllowanceArea_;
      }

      SimTemplateInteriorLighting::AllowanceArea_optional& SimTemplateInteriorLighting::
      AllowanceArea ()
      {
        return this->AllowanceArea_;
      }

      void SimTemplateInteriorLighting::
      AllowanceArea (const AllowanceArea_type& x)
      {
        this->AllowanceArea_.set (x);
      }

      void SimTemplateInteriorLighting::
      AllowanceArea (const AllowanceArea_optional& x)
      {
        this->AllowanceArea_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateInteriorLighting
      //

      SimTemplateInteriorLighting::
      SimTemplateInteriorLighting ()
      : ::schema::simxml::SimModelCore::SimTemplate (),
        ContainingSpace_ (this),
        InteriorLightingSpecMethod_ (this),
        T24Status_ (this),
        LumMountElevation_ (this),
        FractionHeatToSpace_ (this),
        RadiantFractionOfSpaceHeat_ (this),
        Luminaire1_ (this),
        Luminaire1Count_ (this),
        Luminaire2_ (this),
        Luminaire2Count_ (this),
        Luminaire3_ (this),
        Luminaire3Count_ (this),
        Luminaire4_ (this),
        Luminaire4Count_ (this),
        Luminaire5_ (this),
        Luminaire5Count_ (this),
        AssignedDaylitZone_ (this),
        LightingControls_ (this),
        PowerAdjustFactor_ (this),
        LightingControlCount_ (this),
        AcceptanceTestRequired_ (this),
        AllowanceType_ (this),
        AllowanceArea_ (this)
      {
      }

      SimTemplateInteriorLighting::
      SimTemplateInteriorLighting (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimTemplate (RefId),
        ContainingSpace_ (this),
        InteriorLightingSpecMethod_ (this),
        T24Status_ (this),
        LumMountElevation_ (this),
        FractionHeatToSpace_ (this),
        RadiantFractionOfSpaceHeat_ (this),
        Luminaire1_ (this),
        Luminaire1Count_ (this),
        Luminaire2_ (this),
        Luminaire2Count_ (this),
        Luminaire3_ (this),
        Luminaire3Count_ (this),
        Luminaire4_ (this),
        Luminaire4Count_ (this),
        Luminaire5_ (this),
        Luminaire5Count_ (this),
        AssignedDaylitZone_ (this),
        LightingControls_ (this),
        PowerAdjustFactor_ (this),
        LightingControlCount_ (this),
        AcceptanceTestRequired_ (this),
        AllowanceType_ (this),
        AllowanceArea_ (this)
      {
      }

      SimTemplateInteriorLighting::
      SimTemplateInteriorLighting (const SimTemplateInteriorLighting& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (x, f, c),
        ContainingSpace_ (x.ContainingSpace_, f, this),
        InteriorLightingSpecMethod_ (x.InteriorLightingSpecMethod_, f, this),
        T24Status_ (x.T24Status_, f, this),
        LumMountElevation_ (x.LumMountElevation_, f, this),
        FractionHeatToSpace_ (x.FractionHeatToSpace_, f, this),
        RadiantFractionOfSpaceHeat_ (x.RadiantFractionOfSpaceHeat_, f, this),
        Luminaire1_ (x.Luminaire1_, f, this),
        Luminaire1Count_ (x.Luminaire1Count_, f, this),
        Luminaire2_ (x.Luminaire2_, f, this),
        Luminaire2Count_ (x.Luminaire2Count_, f, this),
        Luminaire3_ (x.Luminaire3_, f, this),
        Luminaire3Count_ (x.Luminaire3Count_, f, this),
        Luminaire4_ (x.Luminaire4_, f, this),
        Luminaire4Count_ (x.Luminaire4Count_, f, this),
        Luminaire5_ (x.Luminaire5_, f, this),
        Luminaire5Count_ (x.Luminaire5Count_, f, this),
        AssignedDaylitZone_ (x.AssignedDaylitZone_, f, this),
        LightingControls_ (x.LightingControls_, f, this),
        PowerAdjustFactor_ (x.PowerAdjustFactor_, f, this),
        LightingControlCount_ (x.LightingControlCount_, f, this),
        AcceptanceTestRequired_ (x.AcceptanceTestRequired_, f, this),
        AllowanceType_ (x.AllowanceType_, f, this),
        AllowanceArea_ (x.AllowanceArea_, f, this)
      {
      }

      SimTemplateInteriorLighting::
      SimTemplateInteriorLighting (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (e, f | ::xml_schema::flags::base, c),
        ContainingSpace_ (this),
        InteriorLightingSpecMethod_ (this),
        T24Status_ (this),
        LumMountElevation_ (this),
        FractionHeatToSpace_ (this),
        RadiantFractionOfSpaceHeat_ (this),
        Luminaire1_ (this),
        Luminaire1Count_ (this),
        Luminaire2_ (this),
        Luminaire2Count_ (this),
        Luminaire3_ (this),
        Luminaire3Count_ (this),
        Luminaire4_ (this),
        Luminaire4Count_ (this),
        Luminaire5_ (this),
        Luminaire5Count_ (this),
        AssignedDaylitZone_ (this),
        LightingControls_ (this),
        PowerAdjustFactor_ (this),
        LightingControlCount_ (this),
        AcceptanceTestRequired_ (this),
        AllowanceType_ (this),
        AllowanceArea_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateInteriorLighting::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ContainingSpace
          //
          if (n.name () == "ContainingSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainingSpace_type > r (
              ContainingSpace_traits::create (i, f, this));

            if (!this->ContainingSpace_)
            {
              this->ContainingSpace_.set (r);
              continue;
            }
          }

          // InteriorLightingSpecMethod
          //
          if (n.name () == "InteriorLightingSpecMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< InteriorLightingSpecMethod_type > r (
              InteriorLightingSpecMethod_traits::create (i, f, this));

            if (!this->InteriorLightingSpecMethod_)
            {
              this->InteriorLightingSpecMethod_.set (r);
              continue;
            }
          }

          // T24Status
          //
          if (n.name () == "T24Status" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24Status_type > r (
              T24Status_traits::create (i, f, this));

            if (!this->T24Status_)
            {
              this->T24Status_.set (r);
              continue;
            }
          }

          // LumMountElevation
          //
          if (n.name () == "LumMountElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LumMountElevation_)
            {
              this->LumMountElevation_.set (LumMountElevation_traits::create (i, f, this));
              continue;
            }
          }

          // FractionHeatToSpace
          //
          if (n.name () == "FractionHeatToSpace" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->FractionHeatToSpace_)
            {
              this->FractionHeatToSpace_.set (FractionHeatToSpace_traits::create (i, f, this));
              continue;
            }
          }

          // RadiantFractionOfSpaceHeat
          //
          if (n.name () == "RadiantFractionOfSpaceHeat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->RadiantFractionOfSpaceHeat_)
            {
              this->RadiantFractionOfSpaceHeat_.set (RadiantFractionOfSpaceHeat_traits::create (i, f, this));
              continue;
            }
          }

          // Luminaire1
          //
          if (n.name () == "Luminaire1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Luminaire1_type > r (
              Luminaire1_traits::create (i, f, this));

            if (!this->Luminaire1_)
            {
              this->Luminaire1_.set (r);
              continue;
            }
          }

          // Luminaire1Count
          //
          if (n.name () == "Luminaire1Count" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Luminaire1Count_)
            {
              this->Luminaire1Count_.set (Luminaire1Count_traits::create (i, f, this));
              continue;
            }
          }

          // Luminaire2
          //
          if (n.name () == "Luminaire2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Luminaire2_type > r (
              Luminaire2_traits::create (i, f, this));

            if (!this->Luminaire2_)
            {
              this->Luminaire2_.set (r);
              continue;
            }
          }

          // Luminaire2Count
          //
          if (n.name () == "Luminaire2Count" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Luminaire2Count_)
            {
              this->Luminaire2Count_.set (Luminaire2Count_traits::create (i, f, this));
              continue;
            }
          }

          // Luminaire3
          //
          if (n.name () == "Luminaire3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Luminaire3_type > r (
              Luminaire3_traits::create (i, f, this));

            if (!this->Luminaire3_)
            {
              this->Luminaire3_.set (r);
              continue;
            }
          }

          // Luminaire3Count
          //
          if (n.name () == "Luminaire3Count" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Luminaire3Count_)
            {
              this->Luminaire3Count_.set (Luminaire3Count_traits::create (i, f, this));
              continue;
            }
          }

          // Luminaire4
          //
          if (n.name () == "Luminaire4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Luminaire4_type > r (
              Luminaire4_traits::create (i, f, this));

            if (!this->Luminaire4_)
            {
              this->Luminaire4_.set (r);
              continue;
            }
          }

          // Luminaire4Count
          //
          if (n.name () == "Luminaire4Count" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Luminaire4Count_)
            {
              this->Luminaire4Count_.set (Luminaire4Count_traits::create (i, f, this));
              continue;
            }
          }

          // Luminaire5
          //
          if (n.name () == "Luminaire5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Luminaire5_type > r (
              Luminaire5_traits::create (i, f, this));

            if (!this->Luminaire5_)
            {
              this->Luminaire5_.set (r);
              continue;
            }
          }

          // Luminaire5Count
          //
          if (n.name () == "Luminaire5Count" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Luminaire5Count_)
            {
              this->Luminaire5Count_.set (Luminaire5Count_traits::create (i, f, this));
              continue;
            }
          }

          // AssignedDaylitZone
          //
          if (n.name () == "AssignedDaylitZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< AssignedDaylitZone_type > r (
              AssignedDaylitZone_traits::create (i, f, this));

            if (!this->AssignedDaylitZone_)
            {
              this->AssignedDaylitZone_.set (r);
              continue;
            }
          }

          // LightingControls
          //
          if (n.name () == "LightingControls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< LightingControls_type > r (
              LightingControls_traits::create (i, f, this));

            if (!this->LightingControls_)
            {
              this->LightingControls_.set (r);
              continue;
            }
          }

          // PowerAdjustFactor
          //
          if (n.name () == "PowerAdjustFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->PowerAdjustFactor_)
            {
              this->PowerAdjustFactor_.set (PowerAdjustFactor_traits::create (i, f, this));
              continue;
            }
          }

          // LightingControlCount
          //
          if (n.name () == "LightingControlCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->LightingControlCount_)
            {
              this->LightingControlCount_.set (LightingControlCount_traits::create (i, f, this));
              continue;
            }
          }

          // AcceptanceTestRequired
          //
          if (n.name () == "AcceptanceTestRequired" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->AcceptanceTestRequired_)
            {
              this->AcceptanceTestRequired_.set (AcceptanceTestRequired_traits::create (i, f, this));
              continue;
            }
          }

          // AllowanceType
          //
          if (n.name () == "AllowanceType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< AllowanceType_type > r (
              AllowanceType_traits::create (i, f, this));

            if (!this->AllowanceType_)
            {
              this->AllowanceType_.set (r);
              continue;
            }
          }

          // AllowanceArea
          //
          if (n.name () == "AllowanceArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->AllowanceArea_)
            {
              this->AllowanceArea_.set (AllowanceArea_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimTemplateInteriorLighting* SimTemplateInteriorLighting::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateInteriorLighting (*this, f, c);
      }

      SimTemplateInteriorLighting& SimTemplateInteriorLighting::
      operator= (const SimTemplateInteriorLighting& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimTemplate& > (*this) = x;
          this->ContainingSpace_ = x.ContainingSpace_;
          this->InteriorLightingSpecMethod_ = x.InteriorLightingSpecMethod_;
          this->T24Status_ = x.T24Status_;
          this->LumMountElevation_ = x.LumMountElevation_;
          this->FractionHeatToSpace_ = x.FractionHeatToSpace_;
          this->RadiantFractionOfSpaceHeat_ = x.RadiantFractionOfSpaceHeat_;
          this->Luminaire1_ = x.Luminaire1_;
          this->Luminaire1Count_ = x.Luminaire1Count_;
          this->Luminaire2_ = x.Luminaire2_;
          this->Luminaire2Count_ = x.Luminaire2Count_;
          this->Luminaire3_ = x.Luminaire3_;
          this->Luminaire3Count_ = x.Luminaire3Count_;
          this->Luminaire4_ = x.Luminaire4_;
          this->Luminaire4Count_ = x.Luminaire4Count_;
          this->Luminaire5_ = x.Luminaire5_;
          this->Luminaire5Count_ = x.Luminaire5Count_;
          this->AssignedDaylitZone_ = x.AssignedDaylitZone_;
          this->LightingControls_ = x.LightingControls_;
          this->PowerAdjustFactor_ = x.PowerAdjustFactor_;
          this->LightingControlCount_ = x.LightingControlCount_;
          this->AcceptanceTestRequired_ = x.AcceptanceTestRequired_;
          this->AllowanceType_ = x.AllowanceType_;
          this->AllowanceArea_ = x.AllowanceArea_;
        }

        return *this;
      }

      SimTemplateInteriorLighting::
      ~SimTemplateInteriorLighting ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

