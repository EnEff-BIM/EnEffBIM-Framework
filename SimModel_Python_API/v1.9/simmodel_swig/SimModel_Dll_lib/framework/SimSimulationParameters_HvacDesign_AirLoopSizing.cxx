// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSimulationParameters_HvacDesign_AirLoopSizing.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSimulationParameters_HvacDesign_AirLoopSizing
      // 

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CoolDesignAirFlowMethod_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowMethod () const
      {
        return this->SimSimParams_CoolDesignAirFlowMethod_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CoolDesignAirFlowMethod_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowMethod ()
      {
        return this->SimSimParams_CoolDesignAirFlowMethod_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowMethod (const SimSimParams_CoolDesignAirFlowMethod_type& x)
      {
        this->SimSimParams_CoolDesignAirFlowMethod_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowMethod (const SimSimParams_CoolDesignAirFlowMethod_optional& x)
      {
        this->SimSimParams_CoolDesignAirFlowMethod_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowMethod (::std::auto_ptr< SimSimParams_CoolDesignAirFlowMethod_type > x)
      {
        this->SimSimParams_CoolDesignAirFlowMethod_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CoolDesignAirFlowRate_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowRate () const
      {
        return this->SimSimParams_CoolDesignAirFlowRate_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CoolDesignAirFlowRate_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowRate ()
      {
        return this->SimSimParams_CoolDesignAirFlowRate_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowRate (const SimSimParams_CoolDesignAirFlowRate_type& x)
      {
        this->SimSimParams_CoolDesignAirFlowRate_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CoolDesignAirFlowRate (const SimSimParams_CoolDesignAirFlowRate_optional& x)
      {
        this->SimSimParams_CoolDesignAirFlowRate_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_HeatDesignAirFlowMethod_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowMethod () const
      {
        return this->SimSimParams_HeatDesignAirFlowMethod_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_HeatDesignAirFlowMethod_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowMethod ()
      {
        return this->SimSimParams_HeatDesignAirFlowMethod_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowMethod (const SimSimParams_HeatDesignAirFlowMethod_type& x)
      {
        this->SimSimParams_HeatDesignAirFlowMethod_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowMethod (const SimSimParams_HeatDesignAirFlowMethod_optional& x)
      {
        this->SimSimParams_HeatDesignAirFlowMethod_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowMethod (::std::auto_ptr< SimSimParams_HeatDesignAirFlowMethod_type > x)
      {
        this->SimSimParams_HeatDesignAirFlowMethod_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_HeatDesignAirFlowRate_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowRate () const
      {
        return this->SimSimParams_HeatDesignAirFlowRate_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_HeatDesignAirFlowRate_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowRate ()
      {
        return this->SimSimParams_HeatDesignAirFlowRate_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowRate (const SimSimParams_HeatDesignAirFlowRate_type& x)
      {
        this->SimSimParams_HeatDesignAirFlowRate_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_HeatDesignAirFlowRate (const SimSimParams_HeatDesignAirFlowRate_optional& x)
      {
        this->SimSimParams_HeatDesignAirFlowRate_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_AirLoopName_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_AirLoopName () const
      {
        return this->SimSimParams_AirLoopName_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_AirLoopName_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_AirLoopName ()
      {
        return this->SimSimParams_AirLoopName_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_AirLoopName (const SimSimParams_AirLoopName_type& x)
      {
        this->SimSimParams_AirLoopName_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_AirLoopName (const SimSimParams_AirLoopName_optional& x)
      {
        this->SimSimParams_AirLoopName_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_AirLoopName (::std::auto_ptr< SimSimParams_AirLoopName_type > x)
      {
        this->SimSimParams_AirLoopName_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_TypeOfLoadToSizeOn_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_TypeOfLoadToSizeOn () const
      {
        return this->SimSimParams_TypeOfLoadToSizeOn_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_TypeOfLoadToSizeOn_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_TypeOfLoadToSizeOn ()
      {
        return this->SimSimParams_TypeOfLoadToSizeOn_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_TypeOfLoadToSizeOn (const SimSimParams_TypeOfLoadToSizeOn_type& x)
      {
        this->SimSimParams_TypeOfLoadToSizeOn_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_TypeOfLoadToSizeOn (const SimSimParams_TypeOfLoadToSizeOn_optional& x)
      {
        this->SimSimParams_TypeOfLoadToSizeOn_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_TypeOfLoadToSizeOn (::std::auto_ptr< SimSimParams_TypeOfLoadToSizeOn_type > x)
      {
        this->SimSimParams_TypeOfLoadToSizeOn_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_DesignOutdoorAirFlowRate_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_DesignOutdoorAirFlowRate () const
      {
        return this->SimSimParams_DesignOutdoorAirFlowRate_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_DesignOutdoorAirFlowRate_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_DesignOutdoorAirFlowRate ()
      {
        return this->SimSimParams_DesignOutdoorAirFlowRate_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_DesignOutdoorAirFlowRate (const SimSimParams_DesignOutdoorAirFlowRate_type& x)
      {
        this->SimSimParams_DesignOutdoorAirFlowRate_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_DesignOutdoorAirFlowRate (const SimSimParams_DesignOutdoorAirFlowRate_optional& x)
      {
        this->SimSimParams_DesignOutdoorAirFlowRate_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_MinSystemAirFlowRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_MinSystemAirFlowRatio () const
      {
        return this->SimSimParams_MinSystemAirFlowRatio_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_MinSystemAirFlowRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_MinSystemAirFlowRatio ()
      {
        return this->SimSimParams_MinSystemAirFlowRatio_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_MinSystemAirFlowRatio (const SimSimParams_MinSystemAirFlowRatio_type& x)
      {
        this->SimSimParams_MinSystemAirFlowRatio_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_MinSystemAirFlowRatio (const SimSimParams_MinSystemAirFlowRatio_optional& x)
      {
        this->SimSimParams_MinSystemAirFlowRatio_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PreheatDesignTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignTemp () const
      {
        return this->SimSimParams_PreheatDesignTemp_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PreheatDesignTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignTemp ()
      {
        return this->SimSimParams_PreheatDesignTemp_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignTemp (const SimSimParams_PreheatDesignTemp_type& x)
      {
        this->SimSimParams_PreheatDesignTemp_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignTemp (const SimSimParams_PreheatDesignTemp_optional& x)
      {
        this->SimSimParams_PreheatDesignTemp_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PreheatDesignHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignHumidRatio () const
      {
        return this->SimSimParams_PreheatDesignHumidRatio_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PreheatDesignHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignHumidRatio ()
      {
        return this->SimSimParams_PreheatDesignHumidRatio_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignHumidRatio (const SimSimParams_PreheatDesignHumidRatio_type& x)
      {
        this->SimSimParams_PreheatDesignHumidRatio_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PreheatDesignHumidRatio (const SimSimParams_PreheatDesignHumidRatio_optional& x)
      {
        this->SimSimParams_PreheatDesignHumidRatio_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PrecoolDesignTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignTemp () const
      {
        return this->SimSimParams_PrecoolDesignTemp_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PrecoolDesignTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignTemp ()
      {
        return this->SimSimParams_PrecoolDesignTemp_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignTemp (const SimSimParams_PrecoolDesignTemp_type& x)
      {
        this->SimSimParams_PrecoolDesignTemp_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignTemp (const SimSimParams_PrecoolDesignTemp_optional& x)
      {
        this->SimSimParams_PrecoolDesignTemp_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PrecoolDesignHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignHumidRatio () const
      {
        return this->SimSimParams_PrecoolDesignHumidRatio_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_PrecoolDesignHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignHumidRatio ()
      {
        return this->SimSimParams_PrecoolDesignHumidRatio_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignHumidRatio (const SimSimParams_PrecoolDesignHumidRatio_type& x)
      {
        this->SimSimParams_PrecoolDesignHumidRatio_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_PrecoolDesignHumidRatio (const SimSimParams_PrecoolDesignHumidRatio_optional& x)
      {
        this->SimSimParams_PrecoolDesignHumidRatio_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentCoolDesignSupplyAirTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirTemp () const
      {
        return this->SimSimParams_CentCoolDesignSupplyAirTemp_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentCoolDesignSupplyAirTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirTemp ()
      {
        return this->SimSimParams_CentCoolDesignSupplyAirTemp_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirTemp (const SimSimParams_CentCoolDesignSupplyAirTemp_type& x)
      {
        this->SimSimParams_CentCoolDesignSupplyAirTemp_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirTemp (const SimSimParams_CentCoolDesignSupplyAirTemp_optional& x)
      {
        this->SimSimParams_CentCoolDesignSupplyAirTemp_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentHeatDesignSupplyAirTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirTemp () const
      {
        return this->SimSimParams_CentHeatDesignSupplyAirTemp_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentHeatDesignSupplyAirTemp_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirTemp ()
      {
        return this->SimSimParams_CentHeatDesignSupplyAirTemp_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirTemp (const SimSimParams_CentHeatDesignSupplyAirTemp_type& x)
      {
        this->SimSimParams_CentHeatDesignSupplyAirTemp_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirTemp (const SimSimParams_CentHeatDesignSupplyAirTemp_optional& x)
      {
        this->SimSimParams_CentHeatDesignSupplyAirTemp_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_SizingOption_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SizingOption () const
      {
        return this->SimSimParams_SizingOption_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_SizingOption_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SizingOption ()
      {
        return this->SimSimParams_SizingOption_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SizingOption (const SimSimParams_SizingOption_type& x)
      {
        this->SimSimParams_SizingOption_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SizingOption (const SimSimParams_SizingOption_optional& x)
      {
        this->SimSimParams_SizingOption_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SizingOption (::std::auto_ptr< SimSimParams_SizingOption_type > x)
      {
        this->SimSimParams_SizingOption_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_100PctOutdoorAirInCool_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInCool () const
      {
        return this->SimSimParams_100PctOutdoorAirInCool_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_100PctOutdoorAirInCool_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInCool ()
      {
        return this->SimSimParams_100PctOutdoorAirInCool_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInCool (const SimSimParams_100PctOutdoorAirInCool_type& x)
      {
        this->SimSimParams_100PctOutdoorAirInCool_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInCool (const SimSimParams_100PctOutdoorAirInCool_optional& x)
      {
        this->SimSimParams_100PctOutdoorAirInCool_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInCool (::std::auto_ptr< SimSimParams_100PctOutdoorAirInCool_type > x)
      {
        this->SimSimParams_100PctOutdoorAirInCool_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_100PctOutdoorAirInHeat_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInHeat () const
      {
        return this->SimSimParams_100PctOutdoorAirInHeat_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_100PctOutdoorAirInHeat_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInHeat ()
      {
        return this->SimSimParams_100PctOutdoorAirInHeat_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInHeat (const SimSimParams_100PctOutdoorAirInHeat_type& x)
      {
        this->SimSimParams_100PctOutdoorAirInHeat_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInHeat (const SimSimParams_100PctOutdoorAirInHeat_optional& x)
      {
        this->SimSimParams_100PctOutdoorAirInHeat_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_100PctOutdoorAirInHeat (::std::auto_ptr< SimSimParams_100PctOutdoorAirInHeat_type > x)
      {
        this->SimSimParams_100PctOutdoorAirInHeat_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirHumidRatio () const
      {
        return this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirHumidRatio ()
      {
        return this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirHumidRatio (const SimSimParams_CentCoolDesignSupplyAirHumidRatio_type& x)
      {
        this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentCoolDesignSupplyAirHumidRatio (const SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional& x)
      {
        this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirHumidRatio () const
      {
        return this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirHumidRatio ()
      {
        return this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirHumidRatio (const SimSimParams_CentHeatDesignSupplyAirHumidRatio_type& x)
      {
        this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_CentHeatDesignSupplyAirHumidRatio (const SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional& x)
      {
        this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_ = x;
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_SystemOutdrAirMethod_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SystemOutdrAirMethod () const
      {
        return this->SimSimParams_SystemOutdrAirMethod_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_SystemOutdrAirMethod_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SystemOutdrAirMethod ()
      {
        return this->SimSimParams_SystemOutdrAirMethod_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SystemOutdrAirMethod (const SimSimParams_SystemOutdrAirMethod_type& x)
      {
        this->SimSimParams_SystemOutdrAirMethod_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SystemOutdrAirMethod (const SimSimParams_SystemOutdrAirMethod_optional& x)
      {
        this->SimSimParams_SystemOutdrAirMethod_ = x;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_SystemOutdrAirMethod (::std::auto_ptr< SimSimParams_SystemOutdrAirMethod_type > x)
      {
        this->SimSimParams_SystemOutdrAirMethod_.set (x);
      }

      const SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_ZoneMaxOutdoorAirFraction_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_ZoneMaxOutdoorAirFraction () const
      {
        return this->SimSimParams_ZoneMaxOutdoorAirFraction_;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::SimSimParams_ZoneMaxOutdoorAirFraction_optional& SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_ZoneMaxOutdoorAirFraction ()
      {
        return this->SimSimParams_ZoneMaxOutdoorAirFraction_;
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_ZoneMaxOutdoorAirFraction (const SimSimParams_ZoneMaxOutdoorAirFraction_type& x)
      {
        this->SimSimParams_ZoneMaxOutdoorAirFraction_.set (x);
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimParams_ZoneMaxOutdoorAirFraction (const SimSimParams_ZoneMaxOutdoorAirFraction_optional& x)
      {
        this->SimSimParams_ZoneMaxOutdoorAirFraction_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSimulationParameters_HvacDesign_AirLoopSizing
      //

      SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimulationParameters_HvacDesign_AirLoopSizing ()
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_HvacDesign (),
        SimSimParams_CoolDesignAirFlowMethod_ (this),
        SimSimParams_CoolDesignAirFlowRate_ (this),
        SimSimParams_HeatDesignAirFlowMethod_ (this),
        SimSimParams_HeatDesignAirFlowRate_ (this),
        SimSimParams_AirLoopName_ (this),
        SimSimParams_TypeOfLoadToSizeOn_ (this),
        SimSimParams_DesignOutdoorAirFlowRate_ (this),
        SimSimParams_MinSystemAirFlowRatio_ (this),
        SimSimParams_PreheatDesignTemp_ (this),
        SimSimParams_PreheatDesignHumidRatio_ (this),
        SimSimParams_PrecoolDesignTemp_ (this),
        SimSimParams_PrecoolDesignHumidRatio_ (this),
        SimSimParams_CentCoolDesignSupplyAirTemp_ (this),
        SimSimParams_CentHeatDesignSupplyAirTemp_ (this),
        SimSimParams_SizingOption_ (this),
        SimSimParams_100PctOutdoorAirInCool_ (this),
        SimSimParams_100PctOutdoorAirInHeat_ (this),
        SimSimParams_CentCoolDesignSupplyAirHumidRatio_ (this),
        SimSimParams_CentHeatDesignSupplyAirHumidRatio_ (this),
        SimSimParams_SystemOutdrAirMethod_ (this),
        SimSimParams_ZoneMaxOutdoorAirFraction_ (this)
      {
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimulationParameters_HvacDesign_AirLoopSizing (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_HvacDesign (RefId),
        SimSimParams_CoolDesignAirFlowMethod_ (this),
        SimSimParams_CoolDesignAirFlowRate_ (this),
        SimSimParams_HeatDesignAirFlowMethod_ (this),
        SimSimParams_HeatDesignAirFlowRate_ (this),
        SimSimParams_AirLoopName_ (this),
        SimSimParams_TypeOfLoadToSizeOn_ (this),
        SimSimParams_DesignOutdoorAirFlowRate_ (this),
        SimSimParams_MinSystemAirFlowRatio_ (this),
        SimSimParams_PreheatDesignTemp_ (this),
        SimSimParams_PreheatDesignHumidRatio_ (this),
        SimSimParams_PrecoolDesignTemp_ (this),
        SimSimParams_PrecoolDesignHumidRatio_ (this),
        SimSimParams_CentCoolDesignSupplyAirTemp_ (this),
        SimSimParams_CentHeatDesignSupplyAirTemp_ (this),
        SimSimParams_SizingOption_ (this),
        SimSimParams_100PctOutdoorAirInCool_ (this),
        SimSimParams_100PctOutdoorAirInHeat_ (this),
        SimSimParams_CentCoolDesignSupplyAirHumidRatio_ (this),
        SimSimParams_CentHeatDesignSupplyAirHumidRatio_ (this),
        SimSimParams_SystemOutdrAirMethod_ (this),
        SimSimParams_ZoneMaxOutdoorAirFraction_ (this)
      {
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimulationParameters_HvacDesign_AirLoopSizing (const SimSimulationParameters_HvacDesign_AirLoopSizing& x,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_HvacDesign (x, f, c),
        SimSimParams_CoolDesignAirFlowMethod_ (x.SimSimParams_CoolDesignAirFlowMethod_, f, this),
        SimSimParams_CoolDesignAirFlowRate_ (x.SimSimParams_CoolDesignAirFlowRate_, f, this),
        SimSimParams_HeatDesignAirFlowMethod_ (x.SimSimParams_HeatDesignAirFlowMethod_, f, this),
        SimSimParams_HeatDesignAirFlowRate_ (x.SimSimParams_HeatDesignAirFlowRate_, f, this),
        SimSimParams_AirLoopName_ (x.SimSimParams_AirLoopName_, f, this),
        SimSimParams_TypeOfLoadToSizeOn_ (x.SimSimParams_TypeOfLoadToSizeOn_, f, this),
        SimSimParams_DesignOutdoorAirFlowRate_ (x.SimSimParams_DesignOutdoorAirFlowRate_, f, this),
        SimSimParams_MinSystemAirFlowRatio_ (x.SimSimParams_MinSystemAirFlowRatio_, f, this),
        SimSimParams_PreheatDesignTemp_ (x.SimSimParams_PreheatDesignTemp_, f, this),
        SimSimParams_PreheatDesignHumidRatio_ (x.SimSimParams_PreheatDesignHumidRatio_, f, this),
        SimSimParams_PrecoolDesignTemp_ (x.SimSimParams_PrecoolDesignTemp_, f, this),
        SimSimParams_PrecoolDesignHumidRatio_ (x.SimSimParams_PrecoolDesignHumidRatio_, f, this),
        SimSimParams_CentCoolDesignSupplyAirTemp_ (x.SimSimParams_CentCoolDesignSupplyAirTemp_, f, this),
        SimSimParams_CentHeatDesignSupplyAirTemp_ (x.SimSimParams_CentHeatDesignSupplyAirTemp_, f, this),
        SimSimParams_SizingOption_ (x.SimSimParams_SizingOption_, f, this),
        SimSimParams_100PctOutdoorAirInCool_ (x.SimSimParams_100PctOutdoorAirInCool_, f, this),
        SimSimParams_100PctOutdoorAirInHeat_ (x.SimSimParams_100PctOutdoorAirInHeat_, f, this),
        SimSimParams_CentCoolDesignSupplyAirHumidRatio_ (x.SimSimParams_CentCoolDesignSupplyAirHumidRatio_, f, this),
        SimSimParams_CentHeatDesignSupplyAirHumidRatio_ (x.SimSimParams_CentHeatDesignSupplyAirHumidRatio_, f, this),
        SimSimParams_SystemOutdrAirMethod_ (x.SimSimParams_SystemOutdrAirMethod_, f, this),
        SimSimParams_ZoneMaxOutdoorAirFraction_ (x.SimSimParams_ZoneMaxOutdoorAirFraction_, f, this)
      {
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::
      SimSimulationParameters_HvacDesign_AirLoopSizing (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimSimulationParameters_HvacDesign (e, f | ::xml_schema::flags::base, c),
        SimSimParams_CoolDesignAirFlowMethod_ (this),
        SimSimParams_CoolDesignAirFlowRate_ (this),
        SimSimParams_HeatDesignAirFlowMethod_ (this),
        SimSimParams_HeatDesignAirFlowRate_ (this),
        SimSimParams_AirLoopName_ (this),
        SimSimParams_TypeOfLoadToSizeOn_ (this),
        SimSimParams_DesignOutdoorAirFlowRate_ (this),
        SimSimParams_MinSystemAirFlowRatio_ (this),
        SimSimParams_PreheatDesignTemp_ (this),
        SimSimParams_PreheatDesignHumidRatio_ (this),
        SimSimParams_PrecoolDesignTemp_ (this),
        SimSimParams_PrecoolDesignHumidRatio_ (this),
        SimSimParams_CentCoolDesignSupplyAirTemp_ (this),
        SimSimParams_CentHeatDesignSupplyAirTemp_ (this),
        SimSimParams_SizingOption_ (this),
        SimSimParams_100PctOutdoorAirInCool_ (this),
        SimSimParams_100PctOutdoorAirInHeat_ (this),
        SimSimParams_CentCoolDesignSupplyAirHumidRatio_ (this),
        SimSimParams_CentHeatDesignSupplyAirHumidRatio_ (this),
        SimSimParams_SystemOutdrAirMethod_ (this),
        SimSimParams_ZoneMaxOutdoorAirFraction_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSimulationParameters_HvacDesign_AirLoopSizing::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimSimulationParameters_HvacDesign::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSimParams_CoolDesignAirFlowMethod
          //
          if (n.name () == "SimSimParams_CoolDesignAirFlowMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_CoolDesignAirFlowMethod_type > r (
              SimSimParams_CoolDesignAirFlowMethod_traits::create (i, f, this));

            if (!this->SimSimParams_CoolDesignAirFlowMethod_)
            {
              this->SimSimParams_CoolDesignAirFlowMethod_.set (r);
              continue;
            }
          }

          // SimSimParams_CoolDesignAirFlowRate
          //
          if (n.name () == "SimSimParams_CoolDesignAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_CoolDesignAirFlowRate_)
            {
              this->SimSimParams_CoolDesignAirFlowRate_.set (SimSimParams_CoolDesignAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_HeatDesignAirFlowMethod
          //
          if (n.name () == "SimSimParams_HeatDesignAirFlowMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_HeatDesignAirFlowMethod_type > r (
              SimSimParams_HeatDesignAirFlowMethod_traits::create (i, f, this));

            if (!this->SimSimParams_HeatDesignAirFlowMethod_)
            {
              this->SimSimParams_HeatDesignAirFlowMethod_.set (r);
              continue;
            }
          }

          // SimSimParams_HeatDesignAirFlowRate
          //
          if (n.name () == "SimSimParams_HeatDesignAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_HeatDesignAirFlowRate_)
            {
              this->SimSimParams_HeatDesignAirFlowRate_.set (SimSimParams_HeatDesignAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_AirLoopName
          //
          if (n.name () == "SimSimParams_AirLoopName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_AirLoopName_type > r (
              SimSimParams_AirLoopName_traits::create (i, f, this));

            if (!this->SimSimParams_AirLoopName_)
            {
              this->SimSimParams_AirLoopName_.set (r);
              continue;
            }
          }

          // SimSimParams_TypeOfLoadToSizeOn
          //
          if (n.name () == "SimSimParams_TypeOfLoadToSizeOn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_TypeOfLoadToSizeOn_type > r (
              SimSimParams_TypeOfLoadToSizeOn_traits::create (i, f, this));

            if (!this->SimSimParams_TypeOfLoadToSizeOn_)
            {
              this->SimSimParams_TypeOfLoadToSizeOn_.set (r);
              continue;
            }
          }

          // SimSimParams_DesignOutdoorAirFlowRate
          //
          if (n.name () == "SimSimParams_DesignOutdoorAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_DesignOutdoorAirFlowRate_)
            {
              this->SimSimParams_DesignOutdoorAirFlowRate_.set (SimSimParams_DesignOutdoorAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_MinSystemAirFlowRatio
          //
          if (n.name () == "SimSimParams_MinSystemAirFlowRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_MinSystemAirFlowRatio_)
            {
              this->SimSimParams_MinSystemAirFlowRatio_.set (SimSimParams_MinSystemAirFlowRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_PreheatDesignTemp
          //
          if (n.name () == "SimSimParams_PreheatDesignTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_PreheatDesignTemp_)
            {
              this->SimSimParams_PreheatDesignTemp_.set (SimSimParams_PreheatDesignTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_PreheatDesignHumidRatio
          //
          if (n.name () == "SimSimParams_PreheatDesignHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_PreheatDesignHumidRatio_)
            {
              this->SimSimParams_PreheatDesignHumidRatio_.set (SimSimParams_PreheatDesignHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_PrecoolDesignTemp
          //
          if (n.name () == "SimSimParams_PrecoolDesignTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_PrecoolDesignTemp_)
            {
              this->SimSimParams_PrecoolDesignTemp_.set (SimSimParams_PrecoolDesignTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_PrecoolDesignHumidRatio
          //
          if (n.name () == "SimSimParams_PrecoolDesignHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_PrecoolDesignHumidRatio_)
            {
              this->SimSimParams_PrecoolDesignHumidRatio_.set (SimSimParams_PrecoolDesignHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_CentCoolDesignSupplyAirTemp
          //
          if (n.name () == "SimSimParams_CentCoolDesignSupplyAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_CentCoolDesignSupplyAirTemp_)
            {
              this->SimSimParams_CentCoolDesignSupplyAirTemp_.set (SimSimParams_CentCoolDesignSupplyAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_CentHeatDesignSupplyAirTemp
          //
          if (n.name () == "SimSimParams_CentHeatDesignSupplyAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_CentHeatDesignSupplyAirTemp_)
            {
              this->SimSimParams_CentHeatDesignSupplyAirTemp_.set (SimSimParams_CentHeatDesignSupplyAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_SizingOption
          //
          if (n.name () == "SimSimParams_SizingOption" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_SizingOption_type > r (
              SimSimParams_SizingOption_traits::create (i, f, this));

            if (!this->SimSimParams_SizingOption_)
            {
              this->SimSimParams_SizingOption_.set (r);
              continue;
            }
          }

          // SimSimParams_100PctOutdoorAirInCool
          //
          if (n.name () == "SimSimParams_100PctOutdoorAirInCool" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_100PctOutdoorAirInCool_type > r (
              SimSimParams_100PctOutdoorAirInCool_traits::create (i, f, this));

            if (!this->SimSimParams_100PctOutdoorAirInCool_)
            {
              this->SimSimParams_100PctOutdoorAirInCool_.set (r);
              continue;
            }
          }

          // SimSimParams_100PctOutdoorAirInHeat
          //
          if (n.name () == "SimSimParams_100PctOutdoorAirInHeat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_100PctOutdoorAirInHeat_type > r (
              SimSimParams_100PctOutdoorAirInHeat_traits::create (i, f, this));

            if (!this->SimSimParams_100PctOutdoorAirInHeat_)
            {
              this->SimSimParams_100PctOutdoorAirInHeat_.set (r);
              continue;
            }
          }

          // SimSimParams_CentCoolDesignSupplyAirHumidRatio
          //
          if (n.name () == "SimSimParams_CentCoolDesignSupplyAirHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_)
            {
              this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_.set (SimSimParams_CentCoolDesignSupplyAirHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_CentHeatDesignSupplyAirHumidRatio
          //
          if (n.name () == "SimSimParams_CentHeatDesignSupplyAirHumidRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_)
            {
              this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_.set (SimSimParams_CentHeatDesignSupplyAirHumidRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimSimParams_SystemOutdrAirMethod
          //
          if (n.name () == "SimSimParams_SystemOutdrAirMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimSimParams_SystemOutdrAirMethod_type > r (
              SimSimParams_SystemOutdrAirMethod_traits::create (i, f, this));

            if (!this->SimSimParams_SystemOutdrAirMethod_)
            {
              this->SimSimParams_SystemOutdrAirMethod_.set (r);
              continue;
            }
          }

          // SimSimParams_ZoneMaxOutdoorAirFraction
          //
          if (n.name () == "SimSimParams_ZoneMaxOutdoorAirFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimSimParams_ZoneMaxOutdoorAirFraction_)
            {
              this->SimSimParams_ZoneMaxOutdoorAirFraction_.set (SimSimParams_ZoneMaxOutdoorAirFraction_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing* SimSimulationParameters_HvacDesign_AirLoopSizing::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSimulationParameters_HvacDesign_AirLoopSizing (*this, f, c);
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing& SimSimulationParameters_HvacDesign_AirLoopSizing::
      operator= (const SimSimulationParameters_HvacDesign_AirLoopSizing& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimSimulationParameters_HvacDesign& > (*this) = x;
          this->SimSimParams_CoolDesignAirFlowMethod_ = x.SimSimParams_CoolDesignAirFlowMethod_;
          this->SimSimParams_CoolDesignAirFlowRate_ = x.SimSimParams_CoolDesignAirFlowRate_;
          this->SimSimParams_HeatDesignAirFlowMethod_ = x.SimSimParams_HeatDesignAirFlowMethod_;
          this->SimSimParams_HeatDesignAirFlowRate_ = x.SimSimParams_HeatDesignAirFlowRate_;
          this->SimSimParams_AirLoopName_ = x.SimSimParams_AirLoopName_;
          this->SimSimParams_TypeOfLoadToSizeOn_ = x.SimSimParams_TypeOfLoadToSizeOn_;
          this->SimSimParams_DesignOutdoorAirFlowRate_ = x.SimSimParams_DesignOutdoorAirFlowRate_;
          this->SimSimParams_MinSystemAirFlowRatio_ = x.SimSimParams_MinSystemAirFlowRatio_;
          this->SimSimParams_PreheatDesignTemp_ = x.SimSimParams_PreheatDesignTemp_;
          this->SimSimParams_PreheatDesignHumidRatio_ = x.SimSimParams_PreheatDesignHumidRatio_;
          this->SimSimParams_PrecoolDesignTemp_ = x.SimSimParams_PrecoolDesignTemp_;
          this->SimSimParams_PrecoolDesignHumidRatio_ = x.SimSimParams_PrecoolDesignHumidRatio_;
          this->SimSimParams_CentCoolDesignSupplyAirTemp_ = x.SimSimParams_CentCoolDesignSupplyAirTemp_;
          this->SimSimParams_CentHeatDesignSupplyAirTemp_ = x.SimSimParams_CentHeatDesignSupplyAirTemp_;
          this->SimSimParams_SizingOption_ = x.SimSimParams_SizingOption_;
          this->SimSimParams_100PctOutdoorAirInCool_ = x.SimSimParams_100PctOutdoorAirInCool_;
          this->SimSimParams_100PctOutdoorAirInHeat_ = x.SimSimParams_100PctOutdoorAirInHeat_;
          this->SimSimParams_CentCoolDesignSupplyAirHumidRatio_ = x.SimSimParams_CentCoolDesignSupplyAirHumidRatio_;
          this->SimSimParams_CentHeatDesignSupplyAirHumidRatio_ = x.SimSimParams_CentHeatDesignSupplyAirHumidRatio_;
          this->SimSimParams_SystemOutdrAirMethod_ = x.SimSimParams_SystemOutdrAirMethod_;
          this->SimSimParams_ZoneMaxOutdoorAirFraction_ = x.SimSimParams_ZoneMaxOutdoorAirFraction_;
        }

        return *this;
      }

      SimSimulationParameters_HvacDesign_AirLoopSizing::
      ~SimSimulationParameters_HvacDesign_AirLoopSizing ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

