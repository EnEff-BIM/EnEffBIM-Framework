// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_EquivGlazingMaterial_Screen.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Screen
      // 

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_BeamSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamSolarTrans () const
      {
        return this->SimMaterial_ScreenBeam_BeamSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_BeamSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamSolarTrans ()
      {
        return this->SimMaterial_ScreenBeam_BeamSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamSolarTrans (const SimMaterial_ScreenBeam_BeamSolarTrans_type& x)
      {
        this->SimMaterial_ScreenBeam_BeamSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamSolarTrans (const SimMaterial_ScreenBeam_BeamSolarTrans_optional& x)
      {
        this->SimMaterial_ScreenBeam_BeamSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarTrans () const
      {
        return this->SimMaterial_ScreenBeam_DiffuseSolarTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseSolarTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarTrans ()
      {
        return this->SimMaterial_ScreenBeam_DiffuseSolarTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarTrans (const SimMaterial_ScreenBeam_DiffuseSolarTrans_type& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseSolarTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarTrans (const SimMaterial_ScreenBeam_DiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseSolarTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarReflect () const
      {
        return this->SimMaterial_ScreenBeam_DiffuseSolarReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseSolarReflect_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarReflect ()
      {
        return this->SimMaterial_ScreenBeam_DiffuseSolarReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarReflect (const SimMaterial_ScreenBeam_DiffuseSolarReflect_type& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseSolarReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseSolarReflect (const SimMaterial_ScreenBeam_DiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseSolarReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_BeamVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamVisibleTrans () const
      {
        return this->SimMaterial_ScreenBeam_BeamVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_BeamVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamVisibleTrans ()
      {
        return this->SimMaterial_ScreenBeam_BeamVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamVisibleTrans (const SimMaterial_ScreenBeam_BeamVisibleTrans_type& x)
      {
        this->SimMaterial_ScreenBeam_BeamVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_BeamVisibleTrans (const SimMaterial_ScreenBeam_BeamVisibleTrans_optional& x)
      {
        this->SimMaterial_ScreenBeam_BeamVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleTrans () const
      {
        return this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseVisibleTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleTrans ()
      {
        return this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleTrans (const SimMaterial_ScreenBeam_DiffuseVisibleTrans_type& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleTrans (const SimMaterial_ScreenBeam_DiffuseVisibleTrans_optional& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleReflect () const
      {
        return this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenBeam_DiffuseVisibleReflect_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleReflect ()
      {
        return this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleReflect (const SimMaterial_ScreenBeam_DiffuseVisibleReflect_type& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenBeam_DiffuseVisibleReflect (const SimMaterial_ScreenBeam_DiffuseVisibleReflect_optional& x)
      {
        this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredTrans () const
      {
        return this->SimMaterial_ScreenInfraredTrans_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenInfraredTrans_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredTrans ()
      {
        return this->SimMaterial_ScreenInfraredTrans_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredTrans (const SimMaterial_ScreenInfraredTrans_type& x)
      {
        this->SimMaterial_ScreenInfraredTrans_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredTrans (const SimMaterial_ScreenInfraredTrans_optional& x)
      {
        this->SimMaterial_ScreenInfraredTrans_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredEmissivity () const
      {
        return this->SimMaterial_ScreenInfraredEmissivity_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenInfraredEmissivity_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredEmissivity ()
      {
        return this->SimMaterial_ScreenInfraredEmissivity_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredEmissivity (const SimMaterial_ScreenInfraredEmissivity_type& x)
      {
        this->SimMaterial_ScreenInfraredEmissivity_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenInfraredEmissivity (const SimMaterial_ScreenInfraredEmissivity_optional& x)
      {
        this->SimMaterial_ScreenInfraredEmissivity_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenWireSpacing_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireSpacing () const
      {
        return this->SimMaterial_ScreenWireSpacing_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenWireSpacing_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireSpacing ()
      {
        return this->SimMaterial_ScreenWireSpacing_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireSpacing (const SimMaterial_ScreenWireSpacing_type& x)
      {
        this->SimMaterial_ScreenWireSpacing_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireSpacing (const SimMaterial_ScreenWireSpacing_optional& x)
      {
        this->SimMaterial_ScreenWireSpacing_ = x;
      }

      const SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenWireDiameter_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireDiameter () const
      {
        return this->SimMaterial_ScreenWireDiameter_;
      }

      SimMaterial_EquivGlazingMaterial_Screen::SimMaterial_ScreenWireDiameter_optional& SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireDiameter ()
      {
        return this->SimMaterial_ScreenWireDiameter_;
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireDiameter (const SimMaterial_ScreenWireDiameter_type& x)
      {
        this->SimMaterial_ScreenWireDiameter_.set (x);
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_ScreenWireDiameter (const SimMaterial_ScreenWireDiameter_optional& x)
      {
        this->SimMaterial_ScreenWireDiameter_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_EquivGlazingMaterial_Screen
      //

      SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_EquivGlazingMaterial_Screen ()
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (),
        SimMaterial_ScreenBeam_BeamSolarTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseSolarTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseSolarReflect_ (this),
        SimMaterial_ScreenBeam_BeamVisibleTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_ScreenInfraredTrans_ (this),
        SimMaterial_ScreenInfraredEmissivity_ (this),
        SimMaterial_ScreenWireSpacing_ (this),
        SimMaterial_ScreenWireDiameter_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_EquivGlazingMaterial_Screen (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (RefId),
        SimMaterial_ScreenBeam_BeamSolarTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseSolarTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseSolarReflect_ (this),
        SimMaterial_ScreenBeam_BeamVisibleTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_ScreenInfraredTrans_ (this),
        SimMaterial_ScreenInfraredEmissivity_ (this),
        SimMaterial_ScreenWireSpacing_ (this),
        SimMaterial_ScreenWireDiameter_ (this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_EquivGlazingMaterial_Screen (const SimMaterial_EquivGlazingMaterial_Screen& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (x, f, c),
        SimMaterial_ScreenBeam_BeamSolarTrans_ (x.SimMaterial_ScreenBeam_BeamSolarTrans_, f, this),
        SimMaterial_ScreenBeam_DiffuseSolarTrans_ (x.SimMaterial_ScreenBeam_DiffuseSolarTrans_, f, this),
        SimMaterial_ScreenBeam_DiffuseSolarReflect_ (x.SimMaterial_ScreenBeam_DiffuseSolarReflect_, f, this),
        SimMaterial_ScreenBeam_BeamVisibleTrans_ (x.SimMaterial_ScreenBeam_BeamVisibleTrans_, f, this),
        SimMaterial_ScreenBeam_DiffuseVisibleTrans_ (x.SimMaterial_ScreenBeam_DiffuseVisibleTrans_, f, this),
        SimMaterial_ScreenBeam_DiffuseVisibleReflect_ (x.SimMaterial_ScreenBeam_DiffuseVisibleReflect_, f, this),
        SimMaterial_ScreenInfraredTrans_ (x.SimMaterial_ScreenInfraredTrans_, f, this),
        SimMaterial_ScreenInfraredEmissivity_ (x.SimMaterial_ScreenInfraredEmissivity_, f, this),
        SimMaterial_ScreenWireSpacing_ (x.SimMaterial_ScreenWireSpacing_, f, this),
        SimMaterial_ScreenWireDiameter_ (x.SimMaterial_ScreenWireDiameter_, f, this)
      {
      }

      SimMaterial_EquivGlazingMaterial_Screen::
      SimMaterial_EquivGlazingMaterial_Screen (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_ScreenBeam_BeamSolarTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseSolarTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseSolarReflect_ (this),
        SimMaterial_ScreenBeam_BeamVisibleTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseVisibleTrans_ (this),
        SimMaterial_ScreenBeam_DiffuseVisibleReflect_ (this),
        SimMaterial_ScreenInfraredTrans_ (this),
        SimMaterial_ScreenInfraredEmissivity_ (this),
        SimMaterial_ScreenWireSpacing_ (this),
        SimMaterial_ScreenWireDiameter_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_EquivGlazingMaterial_Screen::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_ScreenBeam_BeamSolarTrans
          //
          if (n.name () == "SimMaterial_ScreenBeam_BeamSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenBeam_BeamSolarTrans_)
            {
              this->SimMaterial_ScreenBeam_BeamSolarTrans_.set (SimMaterial_ScreenBeam_BeamSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenBeam_DiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_ScreenBeam_DiffuseSolarTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenBeam_DiffuseSolarTrans_)
            {
              this->SimMaterial_ScreenBeam_DiffuseSolarTrans_.set (SimMaterial_ScreenBeam_DiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenBeam_DiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_ScreenBeam_DiffuseSolarReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenBeam_DiffuseSolarReflect_)
            {
              this->SimMaterial_ScreenBeam_DiffuseSolarReflect_.set (SimMaterial_ScreenBeam_DiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenBeam_BeamVisibleTrans
          //
          if (n.name () == "SimMaterial_ScreenBeam_BeamVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenBeam_BeamVisibleTrans_)
            {
              this->SimMaterial_ScreenBeam_BeamVisibleTrans_.set (SimMaterial_ScreenBeam_BeamVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenBeam_DiffuseVisibleTrans
          //
          if (n.name () == "SimMaterial_ScreenBeam_DiffuseVisibleTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_)
            {
              this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_.set (SimMaterial_ScreenBeam_DiffuseVisibleTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenBeam_DiffuseVisibleReflect
          //
          if (n.name () == "SimMaterial_ScreenBeam_DiffuseVisibleReflect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_)
            {
              this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_.set (SimMaterial_ScreenBeam_DiffuseVisibleReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenInfraredTrans
          //
          if (n.name () == "SimMaterial_ScreenInfraredTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenInfraredTrans_)
            {
              this->SimMaterial_ScreenInfraredTrans_.set (SimMaterial_ScreenInfraredTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenInfraredEmissivity
          //
          if (n.name () == "SimMaterial_ScreenInfraredEmissivity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenInfraredEmissivity_)
            {
              this->SimMaterial_ScreenInfraredEmissivity_.set (SimMaterial_ScreenInfraredEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenWireSpacing
          //
          if (n.name () == "SimMaterial_ScreenWireSpacing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenWireSpacing_)
            {
              this->SimMaterial_ScreenWireSpacing_.set (SimMaterial_ScreenWireSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ScreenWireDiameter
          //
          if (n.name () == "SimMaterial_ScreenWireDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_ScreenWireDiameter_)
            {
              this->SimMaterial_ScreenWireDiameter_.set (SimMaterial_ScreenWireDiameter_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_EquivGlazingMaterial_Screen* SimMaterial_EquivGlazingMaterial_Screen::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_EquivGlazingMaterial_Screen (*this, f, c);
      }

      SimMaterial_EquivGlazingMaterial_Screen& SimMaterial_EquivGlazingMaterial_Screen::
      operator= (const SimMaterial_EquivGlazingMaterial_Screen& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterial_EquivGlazingMaterial& > (*this) = x;
          this->SimMaterial_ScreenBeam_BeamSolarTrans_ = x.SimMaterial_ScreenBeam_BeamSolarTrans_;
          this->SimMaterial_ScreenBeam_DiffuseSolarTrans_ = x.SimMaterial_ScreenBeam_DiffuseSolarTrans_;
          this->SimMaterial_ScreenBeam_DiffuseSolarReflect_ = x.SimMaterial_ScreenBeam_DiffuseSolarReflect_;
          this->SimMaterial_ScreenBeam_BeamVisibleTrans_ = x.SimMaterial_ScreenBeam_BeamVisibleTrans_;
          this->SimMaterial_ScreenBeam_DiffuseVisibleTrans_ = x.SimMaterial_ScreenBeam_DiffuseVisibleTrans_;
          this->SimMaterial_ScreenBeam_DiffuseVisibleReflect_ = x.SimMaterial_ScreenBeam_DiffuseVisibleReflect_;
          this->SimMaterial_ScreenInfraredTrans_ = x.SimMaterial_ScreenInfraredTrans_;
          this->SimMaterial_ScreenInfraredEmissivity_ = x.SimMaterial_ScreenInfraredEmissivity_;
          this->SimMaterial_ScreenWireSpacing_ = x.SimMaterial_ScreenWireSpacing_;
          this->SimMaterial_ScreenWireDiameter_ = x.SimMaterial_ScreenWireDiameter_;
        }

        return *this;
      }

      SimMaterial_EquivGlazingMaterial_Screen::
      ~SimMaterial_EquivGlazingMaterial_Screen ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

