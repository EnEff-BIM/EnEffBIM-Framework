// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimVentilationAssembly_VentilationAssembly_CoolTower_Shower.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimVentilationAssembly_VentilationAssembly_CoolTower_Shower
      // 

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_Name_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_Name () const
      {
        return this->SimVentilationAssembly_Name_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_Name_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_Name ()
      {
        return this->SimVentilationAssembly_Name_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_Name (const SimVentilationAssembly_Name_type& x)
      {
        this->SimVentilationAssembly_Name_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_Name (const SimVentilationAssembly_Name_optional& x)
      {
        this->SimVentilationAssembly_Name_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_Name (::std::auto_ptr< SimVentilationAssembly_Name_type > x)
      {
        this->SimVentilationAssembly_Name_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_ZoneName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_ZoneName () const
      {
        return this->SimVentilationAssembly_ZoneName_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_ZoneName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_ZoneName ()
      {
        return this->SimVentilationAssembly_ZoneName_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_ZoneName (const SimVentilationAssembly_ZoneName_type& x)
      {
        this->SimVentilationAssembly_ZoneName_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_ZoneName (const SimVentilationAssembly_ZoneName_optional& x)
      {
        this->SimVentilationAssembly_ZoneName_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_ZoneName (::std::auto_ptr< SimVentilationAssembly_ZoneName_type > x)
      {
        this->SimVentilationAssembly_ZoneName_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_AvailSchedName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AvailSchedName () const
      {
        return this->SimVentilationAssembly_AvailSchedName_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_AvailSchedName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AvailSchedName ()
      {
        return this->SimVentilationAssembly_AvailSchedName_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AvailSchedName (const SimVentilationAssembly_AvailSchedName_type& x)
      {
        this->SimVentilationAssembly_AvailSchedName_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AvailSchedName (const SimVentilationAssembly_AvailSchedName_optional& x)
      {
        this->SimVentilationAssembly_AvailSchedName_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AvailSchedName (::std::auto_ptr< SimVentilationAssembly_AvailSchedName_type > x)
      {
        this->SimVentilationAssembly_AvailSchedName_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_WaterSupplyStorageTankName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_WaterSupplyStorageTankName () const
      {
        return this->SimVentilationAssembly_WaterSupplyStorageTankName_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_WaterSupplyStorageTankName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_WaterSupplyStorageTankName ()
      {
        return this->SimVentilationAssembly_WaterSupplyStorageTankName_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_WaterSupplyStorageTankName (const SimVentilationAssembly_WaterSupplyStorageTankName_type& x)
      {
        this->SimVentilationAssembly_WaterSupplyStorageTankName_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_WaterSupplyStorageTankName (const SimVentilationAssembly_WaterSupplyStorageTankName_optional& x)
      {
        this->SimVentilationAssembly_WaterSupplyStorageTankName_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_WaterSupplyStorageTankName (::std::auto_ptr< SimVentilationAssembly_WaterSupplyStorageTankName_type > x)
      {
        this->SimVentilationAssembly_WaterSupplyStorageTankName_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_FlowCntlType_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FlowCntlType () const
      {
        return this->SimVentilationAssembly_FlowCntlType_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_FlowCntlType_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FlowCntlType ()
      {
        return this->SimVentilationAssembly_FlowCntlType_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FlowCntlType (const SimVentilationAssembly_FlowCntlType_type& x)
      {
        this->SimVentilationAssembly_FlowCntlType_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FlowCntlType (const SimVentilationAssembly_FlowCntlType_optional& x)
      {
        this->SimVentilationAssembly_FlowCntlType_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FlowCntlType (::std::auto_ptr< SimVentilationAssembly_FlowCntlType_type > x)
      {
        this->SimVentilationAssembly_FlowCntlType_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_PumpFlowRateSchedName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_PumpFlowRateSchedName () const
      {
        return this->SimVentilationAssembly_PumpFlowRateSchedName_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_PumpFlowRateSchedName_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_PumpFlowRateSchedName ()
      {
        return this->SimVentilationAssembly_PumpFlowRateSchedName_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_PumpFlowRateSchedName (const SimVentilationAssembly_PumpFlowRateSchedName_type& x)
      {
        this->SimVentilationAssembly_PumpFlowRateSchedName_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_PumpFlowRateSchedName (const SimVentilationAssembly_PumpFlowRateSchedName_optional& x)
      {
        this->SimVentilationAssembly_PumpFlowRateSchedName_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_PumpFlowRateSchedName (::std::auto_ptr< SimVentilationAssembly_PumpFlowRateSchedName_type > x)
      {
        this->SimVentilationAssembly_PumpFlowRateSchedName_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_MaxWaterFlowRate_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxWaterFlowRate () const
      {
        return this->SimVentilationAssembly_MaxWaterFlowRate_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_MaxWaterFlowRate_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxWaterFlowRate ()
      {
        return this->SimVentilationAssembly_MaxWaterFlowRate_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxWaterFlowRate (const SimVentilationAssembly_MaxWaterFlowRate_type& x)
      {
        this->SimVentilationAssembly_MaxWaterFlowRate_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxWaterFlowRate (const SimVentilationAssembly_MaxWaterFlowRate_optional& x)
      {
        this->SimVentilationAssembly_MaxWaterFlowRate_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_EffecTowerHeight_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_EffecTowerHeight () const
      {
        return this->SimVentilationAssembly_EffecTowerHeight_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_EffecTowerHeight_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_EffecTowerHeight ()
      {
        return this->SimVentilationAssembly_EffecTowerHeight_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_EffecTowerHeight (const SimVentilationAssembly_EffecTowerHeight_type& x)
      {
        this->SimVentilationAssembly_EffecTowerHeight_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_EffecTowerHeight (const SimVentilationAssembly_EffecTowerHeight_optional& x)
      {
        this->SimVentilationAssembly_EffecTowerHeight_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_AirflowOutletArea_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AirflowOutletArea () const
      {
        return this->SimVentilationAssembly_AirflowOutletArea_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_AirflowOutletArea_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AirflowOutletArea ()
      {
        return this->SimVentilationAssembly_AirflowOutletArea_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AirflowOutletArea (const SimVentilationAssembly_AirflowOutletArea_type& x)
      {
        this->SimVentilationAssembly_AirflowOutletArea_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_AirflowOutletArea (const SimVentilationAssembly_AirflowOutletArea_optional& x)
      {
        this->SimVentilationAssembly_AirflowOutletArea_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_MaxAirFlowRate_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxAirFlowRate () const
      {
        return this->SimVentilationAssembly_MaxAirFlowRate_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_MaxAirFlowRate_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxAirFlowRate ()
      {
        return this->SimVentilationAssembly_MaxAirFlowRate_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxAirFlowRate (const SimVentilationAssembly_MaxAirFlowRate_type& x)
      {
        this->SimVentilationAssembly_MaxAirFlowRate_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MaxAirFlowRate (const SimVentilationAssembly_MaxAirFlowRate_optional& x)
      {
        this->SimVentilationAssembly_MaxAirFlowRate_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_MinIndrTemp_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MinIndrTemp () const
      {
        return this->SimVentilationAssembly_MinIndrTemp_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_MinIndrTemp_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MinIndrTemp ()
      {
        return this->SimVentilationAssembly_MinIndrTemp_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MinIndrTemp (const SimVentilationAssembly_MinIndrTemp_type& x)
      {
        this->SimVentilationAssembly_MinIndrTemp_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_MinIndrTemp (const SimVentilationAssembly_MinIndrTemp_optional& x)
      {
        this->SimVentilationAssembly_MinIndrTemp_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_FractWaterLoss_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractWaterLoss () const
      {
        return this->SimVentilationAssembly_FractWaterLoss_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_FractWaterLoss_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractWaterLoss ()
      {
        return this->SimVentilationAssembly_FractWaterLoss_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractWaterLoss (const SimVentilationAssembly_FractWaterLoss_type& x)
      {
        this->SimVentilationAssembly_FractWaterLoss_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractWaterLoss (const SimVentilationAssembly_FractWaterLoss_optional& x)
      {
        this->SimVentilationAssembly_FractWaterLoss_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_FractFlowSched_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractFlowSched () const
      {
        return this->SimVentilationAssembly_FractFlowSched_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_FractFlowSched_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractFlowSched ()
      {
        return this->SimVentilationAssembly_FractFlowSched_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractFlowSched (const SimVentilationAssembly_FractFlowSched_type& x)
      {
        this->SimVentilationAssembly_FractFlowSched_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_FractFlowSched (const SimVentilationAssembly_FractFlowSched_optional& x)
      {
        this->SimVentilationAssembly_FractFlowSched_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_RatedPowerConsump_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_RatedPowerConsump () const
      {
        return this->SimVentilationAssembly_RatedPowerConsump_;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::SimVentilationAssembly_RatedPowerConsump_optional& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_RatedPowerConsump ()
      {
        return this->SimVentilationAssembly_RatedPowerConsump_;
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_RatedPowerConsump (const SimVentilationAssembly_RatedPowerConsump_type& x)
      {
        this->SimVentilationAssembly_RatedPowerConsump_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_RatedPowerConsump (const SimVentilationAssembly_RatedPowerConsump_optional& x)
      {
        this->SimVentilationAssembly_RatedPowerConsump_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimVentilationAssembly_VentilationAssembly_CoolTower_Shower
      //

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower ()
      : ::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly (),
        SimVentilationAssembly_Name_ (this),
        SimVentilationAssembly_ZoneName_ (this),
        SimVentilationAssembly_AvailSchedName_ (this),
        SimVentilationAssembly_WaterSupplyStorageTankName_ (this),
        SimVentilationAssembly_FlowCntlType_ (this),
        SimVentilationAssembly_PumpFlowRateSchedName_ (this),
        SimVentilationAssembly_MaxWaterFlowRate_ (this),
        SimVentilationAssembly_EffecTowerHeight_ (this),
        SimVentilationAssembly_AirflowOutletArea_ (this),
        SimVentilationAssembly_MaxAirFlowRate_ (this),
        SimVentilationAssembly_MinIndrTemp_ (this),
        SimVentilationAssembly_FractWaterLoss_ (this),
        SimVentilationAssembly_FractFlowSched_ (this),
        SimVentilationAssembly_RatedPowerConsump_ (this)
      {
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly (RefId),
        SimVentilationAssembly_Name_ (this),
        SimVentilationAssembly_ZoneName_ (this),
        SimVentilationAssembly_AvailSchedName_ (this),
        SimVentilationAssembly_WaterSupplyStorageTankName_ (this),
        SimVentilationAssembly_FlowCntlType_ (this),
        SimVentilationAssembly_PumpFlowRateSchedName_ (this),
        SimVentilationAssembly_MaxWaterFlowRate_ (this),
        SimVentilationAssembly_EffecTowerHeight_ (this),
        SimVentilationAssembly_AirflowOutletArea_ (this),
        SimVentilationAssembly_MaxAirFlowRate_ (this),
        SimVentilationAssembly_MinIndrTemp_ (this),
        SimVentilationAssembly_FractWaterLoss_ (this),
        SimVentilationAssembly_FractFlowSched_ (this),
        SimVentilationAssembly_RatedPowerConsump_ (this)
      {
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower (const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower& x,
                                                                   ::xml_schema::flags f,
                                                                   ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly (x, f, c),
        SimVentilationAssembly_Name_ (x.SimVentilationAssembly_Name_, f, this),
        SimVentilationAssembly_ZoneName_ (x.SimVentilationAssembly_ZoneName_, f, this),
        SimVentilationAssembly_AvailSchedName_ (x.SimVentilationAssembly_AvailSchedName_, f, this),
        SimVentilationAssembly_WaterSupplyStorageTankName_ (x.SimVentilationAssembly_WaterSupplyStorageTankName_, f, this),
        SimVentilationAssembly_FlowCntlType_ (x.SimVentilationAssembly_FlowCntlType_, f, this),
        SimVentilationAssembly_PumpFlowRateSchedName_ (x.SimVentilationAssembly_PumpFlowRateSchedName_, f, this),
        SimVentilationAssembly_MaxWaterFlowRate_ (x.SimVentilationAssembly_MaxWaterFlowRate_, f, this),
        SimVentilationAssembly_EffecTowerHeight_ (x.SimVentilationAssembly_EffecTowerHeight_, f, this),
        SimVentilationAssembly_AirflowOutletArea_ (x.SimVentilationAssembly_AirflowOutletArea_, f, this),
        SimVentilationAssembly_MaxAirFlowRate_ (x.SimVentilationAssembly_MaxAirFlowRate_, f, this),
        SimVentilationAssembly_MinIndrTemp_ (x.SimVentilationAssembly_MinIndrTemp_, f, this),
        SimVentilationAssembly_FractWaterLoss_ (x.SimVentilationAssembly_FractWaterLoss_, f, this),
        SimVentilationAssembly_FractFlowSched_ (x.SimVentilationAssembly_FractFlowSched_, f, this),
        SimVentilationAssembly_RatedPowerConsump_ (x.SimVentilationAssembly_RatedPowerConsump_, f, this)
      {
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower (const ::xercesc::DOMElement& e,
                                                                   ::xml_schema::flags f,
                                                                   ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly (e, f | ::xml_schema::flags::base, c),
        SimVentilationAssembly_Name_ (this),
        SimVentilationAssembly_ZoneName_ (this),
        SimVentilationAssembly_AvailSchedName_ (this),
        SimVentilationAssembly_WaterSupplyStorageTankName_ (this),
        SimVentilationAssembly_FlowCntlType_ (this),
        SimVentilationAssembly_PumpFlowRateSchedName_ (this),
        SimVentilationAssembly_MaxWaterFlowRate_ (this),
        SimVentilationAssembly_EffecTowerHeight_ (this),
        SimVentilationAssembly_AirflowOutletArea_ (this),
        SimVentilationAssembly_MaxAirFlowRate_ (this),
        SimVentilationAssembly_MinIndrTemp_ (this),
        SimVentilationAssembly_FractWaterLoss_ (this),
        SimVentilationAssembly_FractFlowSched_ (this),
        SimVentilationAssembly_RatedPowerConsump_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimVentilationAssembly_Name
          //
          if (n.name () == "SimVentilationAssembly_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_Name_type > r (
              SimVentilationAssembly_Name_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_Name_)
            {
              this->SimVentilationAssembly_Name_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_ZoneName
          //
          if (n.name () == "SimVentilationAssembly_ZoneName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_ZoneName_type > r (
              SimVentilationAssembly_ZoneName_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_ZoneName_)
            {
              this->SimVentilationAssembly_ZoneName_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_AvailSchedName
          //
          if (n.name () == "SimVentilationAssembly_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_AvailSchedName_type > r (
              SimVentilationAssembly_AvailSchedName_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_AvailSchedName_)
            {
              this->SimVentilationAssembly_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_WaterSupplyStorageTankName
          //
          if (n.name () == "SimVentilationAssembly_WaterSupplyStorageTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_WaterSupplyStorageTankName_type > r (
              SimVentilationAssembly_WaterSupplyStorageTankName_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_WaterSupplyStorageTankName_)
            {
              this->SimVentilationAssembly_WaterSupplyStorageTankName_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_FlowCntlType
          //
          if (n.name () == "SimVentilationAssembly_FlowCntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_FlowCntlType_type > r (
              SimVentilationAssembly_FlowCntlType_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_FlowCntlType_)
            {
              this->SimVentilationAssembly_FlowCntlType_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_PumpFlowRateSchedName
          //
          if (n.name () == "SimVentilationAssembly_PumpFlowRateSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_PumpFlowRateSchedName_type > r (
              SimVentilationAssembly_PumpFlowRateSchedName_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_PumpFlowRateSchedName_)
            {
              this->SimVentilationAssembly_PumpFlowRateSchedName_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_MaxWaterFlowRate
          //
          if (n.name () == "SimVentilationAssembly_MaxWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_MaxWaterFlowRate_)
            {
              this->SimVentilationAssembly_MaxWaterFlowRate_.set (SimVentilationAssembly_MaxWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_EffecTowerHeight
          //
          if (n.name () == "SimVentilationAssembly_EffecTowerHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_EffecTowerHeight_)
            {
              this->SimVentilationAssembly_EffecTowerHeight_.set (SimVentilationAssembly_EffecTowerHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_AirflowOutletArea
          //
          if (n.name () == "SimVentilationAssembly_AirflowOutletArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_AirflowOutletArea_)
            {
              this->SimVentilationAssembly_AirflowOutletArea_.set (SimVentilationAssembly_AirflowOutletArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_MaxAirFlowRate
          //
          if (n.name () == "SimVentilationAssembly_MaxAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_MaxAirFlowRate_)
            {
              this->SimVentilationAssembly_MaxAirFlowRate_.set (SimVentilationAssembly_MaxAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_MinIndrTemp
          //
          if (n.name () == "SimVentilationAssembly_MinIndrTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_MinIndrTemp_)
            {
              this->SimVentilationAssembly_MinIndrTemp_.set (SimVentilationAssembly_MinIndrTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_FractWaterLoss
          //
          if (n.name () == "SimVentilationAssembly_FractWaterLoss" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_FractWaterLoss_)
            {
              this->SimVentilationAssembly_FractWaterLoss_.set (SimVentilationAssembly_FractWaterLoss_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_FractFlowSched
          //
          if (n.name () == "SimVentilationAssembly_FractFlowSched" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_FractFlowSched_)
            {
              this->SimVentilationAssembly_FractFlowSched_.set (SimVentilationAssembly_FractFlowSched_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_RatedPowerConsump
          //
          if (n.name () == "SimVentilationAssembly_RatedPowerConsump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVentilationAssembly_RatedPowerConsump_)
            {
              this->SimVentilationAssembly_RatedPowerConsump_.set (SimVentilationAssembly_RatedPowerConsump_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower* SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimVentilationAssembly_VentilationAssembly_CoolTower_Shower (*this, f, c);
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower& SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      operator= (const SimVentilationAssembly_VentilationAssembly_CoolTower_Shower& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimVentilationAssembly_VentilationAssembly& > (*this) = x;
          this->SimVentilationAssembly_Name_ = x.SimVentilationAssembly_Name_;
          this->SimVentilationAssembly_ZoneName_ = x.SimVentilationAssembly_ZoneName_;
          this->SimVentilationAssembly_AvailSchedName_ = x.SimVentilationAssembly_AvailSchedName_;
          this->SimVentilationAssembly_WaterSupplyStorageTankName_ = x.SimVentilationAssembly_WaterSupplyStorageTankName_;
          this->SimVentilationAssembly_FlowCntlType_ = x.SimVentilationAssembly_FlowCntlType_;
          this->SimVentilationAssembly_PumpFlowRateSchedName_ = x.SimVentilationAssembly_PumpFlowRateSchedName_;
          this->SimVentilationAssembly_MaxWaterFlowRate_ = x.SimVentilationAssembly_MaxWaterFlowRate_;
          this->SimVentilationAssembly_EffecTowerHeight_ = x.SimVentilationAssembly_EffecTowerHeight_;
          this->SimVentilationAssembly_AirflowOutletArea_ = x.SimVentilationAssembly_AirflowOutletArea_;
          this->SimVentilationAssembly_MaxAirFlowRate_ = x.SimVentilationAssembly_MaxAirFlowRate_;
          this->SimVentilationAssembly_MinIndrTemp_ = x.SimVentilationAssembly_MinIndrTemp_;
          this->SimVentilationAssembly_FractWaterLoss_ = x.SimVentilationAssembly_FractWaterLoss_;
          this->SimVentilationAssembly_FractFlowSched_ = x.SimVentilationAssembly_FractFlowSched_;
          this->SimVentilationAssembly_RatedPowerConsump_ = x.SimVentilationAssembly_RatedPowerConsump_;
        }

        return *this;
      }

      SimVentilationAssembly_VentilationAssembly_CoolTower_Shower::
      ~SimVentilationAssembly_VentilationAssembly_CoolTower_Shower ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

