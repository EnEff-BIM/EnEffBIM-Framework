// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_FluidCooler.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler
      // 

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_Name () const
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_Name ()
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x)
      {
        this->SimFlowEnergyTrans_Name_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_DesignWaterFlowRate_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignWaterFlowRate () const
      {
        return this->SimFlowEnergyTrans_DesignWaterFlowRate_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_DesignWaterFlowRate_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignWaterFlowRate ()
      {
        return this->SimFlowEnergyTrans_DesignWaterFlowRate_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignWaterFlowRate (const SimFlowEnergyTrans_DesignWaterFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_DesignWaterFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignWaterFlowRate (const SimFlowEnergyTrans_DesignWaterFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_DesignWaterFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_WaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_PerfInputMeth_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_PerfInputMeth () const
      {
        return this->SimFlowEnergyTrans_PerfInputMeth_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_PerfInputMeth_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_PerfInputMeth ()
      {
        return this->SimFlowEnergyTrans_PerfInputMeth_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_PerfInputMeth (const SimFlowEnergyTrans_PerfInputMeth_type& x)
      {
        this->SimFlowEnergyTrans_PerfInputMeth_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_PerfInputMeth (const SimFlowEnergyTrans_PerfInputMeth_optional& x)
      {
        this->SimFlowEnergyTrans_PerfInputMeth_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_PerfInputMeth (::std::auto_ptr< SimFlowEnergyTrans_PerfInputMeth_type > x)
      {
        this->SimFlowEnergyTrans_PerfInputMeth_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_OutdrAirInletNodeName_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_OutdrAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_OutdrAirInletNodeName_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_OutdrAirInletNodeName_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_OutdrAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_OutdrAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_OutdrAirInletNodeName (const SimFlowEnergyTrans_OutdrAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_OutdrAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_OutdrAirInletNodeName (const SimFlowEnergyTrans_OutdrAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_OutdrAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_OutdrAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_OutdrAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_OutdrAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_DesignEnterWaterTemp_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterWaterTemp () const
      {
        return this->SimFlowEnergyTrans_DesignEnterWaterTemp_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_DesignEnterWaterTemp_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterWaterTemp ()
      {
        return this->SimFlowEnergyTrans_DesignEnterWaterTemp_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterWaterTemp (const SimFlowEnergyTrans_DesignEnterWaterTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignEnterWaterTemp_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterWaterTemp (const SimFlowEnergyTrans_DesignEnterWaterTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignEnterWaterTemp_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_DesignEnterAirTemp_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterAirTemp () const
      {
        return this->SimFlowEnergyTrans_DesignEnterAirTemp_;
      }

      SimFlowEnergyTransfer_FluidCooler::SimFlowEnergyTrans_DesignEnterAirTemp_optional& SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterAirTemp ()
      {
        return this->SimFlowEnergyTrans_DesignEnterAirTemp_;
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterAirTemp (const SimFlowEnergyTrans_DesignEnterAirTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignEnterAirTemp_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTrans_DesignEnterAirTemp (const SimFlowEnergyTrans_DesignEnterAirTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignEnterAirTemp_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler
      //

      SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTransfer_FluidCooler ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_PerfInputMeth_ (this),
        SimFlowEnergyTrans_OutdrAirInletNodeName_ (this),
        SimFlowEnergyTrans_DesignEnterWaterTemp_ (this),
        SimFlowEnergyTrans_DesignEnterAirTemp_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTransfer_FluidCooler (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (RefId),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_PerfInputMeth_ (this),
        SimFlowEnergyTrans_OutdrAirInletNodeName_ (this),
        SimFlowEnergyTrans_DesignEnterWaterTemp_ (this),
        SimFlowEnergyTrans_DesignEnterAirTemp_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTransfer_FluidCooler (const SimFlowEnergyTransfer_FluidCooler& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (x, f, c),
        SimFlowEnergyTrans_Name_ (x.SimFlowEnergyTrans_Name_, f, this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (x.SimFlowEnergyTrans_DesignWaterFlowRate_, f, this),
        SimFlowEnergyTrans_WaterInletNodeName_ (x.SimFlowEnergyTrans_WaterInletNodeName_, f, this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (x.SimFlowEnergyTrans_WaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_PerfInputMeth_ (x.SimFlowEnergyTrans_PerfInputMeth_, f, this),
        SimFlowEnergyTrans_OutdrAirInletNodeName_ (x.SimFlowEnergyTrans_OutdrAirInletNodeName_, f, this),
        SimFlowEnergyTrans_DesignEnterWaterTemp_ (x.SimFlowEnergyTrans_DesignEnterWaterTemp_, f, this),
        SimFlowEnergyTrans_DesignEnterAirTemp_ (x.SimFlowEnergyTrans_DesignEnterAirTemp_, f, this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler::
      SimFlowEnergyTransfer_FluidCooler (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_DesignWaterFlowRate_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_PerfInputMeth_ (this),
        SimFlowEnergyTrans_OutdrAirInletNodeName_ (this),
        SimFlowEnergyTrans_DesignEnterWaterTemp_ (this),
        SimFlowEnergyTrans_DesignEnterAirTemp_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_FluidCooler::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_Name
          //
          if (n.name () == "SimFlowEnergyTrans_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Name_type > r (
              SimFlowEnergyTrans_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Name_)
            {
              this->SimFlowEnergyTrans_Name_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignWaterFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_DesignWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignWaterFlowRate_)
            {
              this->SimFlowEnergyTrans_DesignWaterFlowRate_.set (SimFlowEnergyTrans_DesignWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > r (
              SimFlowEnergyTrans_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > r (
              SimFlowEnergyTrans_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PerfInputMeth
          //
          if (n.name () == "SimFlowEnergyTrans_PerfInputMeth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PerfInputMeth_type > r (
              SimFlowEnergyTrans_PerfInputMeth_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PerfInputMeth_)
            {
              this->SimFlowEnergyTrans_PerfInputMeth_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_OutdrAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_OutdrAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_OutdrAirInletNodeName_type > r (
              SimFlowEnergyTrans_OutdrAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_OutdrAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_OutdrAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignEnterWaterTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignEnterWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignEnterWaterTemp_)
            {
              this->SimFlowEnergyTrans_DesignEnterWaterTemp_.set (SimFlowEnergyTrans_DesignEnterWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DesignEnterAirTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignEnterAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignEnterAirTemp_)
            {
              this->SimFlowEnergyTrans_DesignEnterAirTemp_.set (SimFlowEnergyTrans_DesignEnterAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_FluidCooler* SimFlowEnergyTransfer_FluidCooler::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_FluidCooler (*this, f, c);
      }

      SimFlowEnergyTransfer_FluidCooler& SimFlowEnergyTransfer_FluidCooler::
      operator= (const SimFlowEnergyTransfer_FluidCooler& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer& > (*this) = x;
          this->SimFlowEnergyTrans_Name_ = x.SimFlowEnergyTrans_Name_;
          this->SimFlowEnergyTrans_DesignWaterFlowRate_ = x.SimFlowEnergyTrans_DesignWaterFlowRate_;
          this->SimFlowEnergyTrans_WaterInletNodeName_ = x.SimFlowEnergyTrans_WaterInletNodeName_;
          this->SimFlowEnergyTrans_WaterOutletNodeName_ = x.SimFlowEnergyTrans_WaterOutletNodeName_;
          this->SimFlowEnergyTrans_PerfInputMeth_ = x.SimFlowEnergyTrans_PerfInputMeth_;
          this->SimFlowEnergyTrans_OutdrAirInletNodeName_ = x.SimFlowEnergyTrans_OutdrAirInletNodeName_;
          this->SimFlowEnergyTrans_DesignEnterWaterTemp_ = x.SimFlowEnergyTrans_DesignEnterWaterTemp_;
          this->SimFlowEnergyTrans_DesignEnterAirTemp_ = x.SimFlowEnergyTrans_DesignEnterAirTemp_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_FluidCooler::
      ~SimFlowEnergyTransfer_FluidCooler ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

