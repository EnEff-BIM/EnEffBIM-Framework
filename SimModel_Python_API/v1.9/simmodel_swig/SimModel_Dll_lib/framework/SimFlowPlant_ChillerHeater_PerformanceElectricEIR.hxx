// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_CHILLER_HEATER_PERFORMANCE_ELECTRIC_EIR_HXX
#define SIM_FLOW_PLANT_CHILLER_HEATER_PERFORMANCE_ELECTRIC_EIR_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ChillerHeater_PerformanceElectricEIR;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_chillerheater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ChillerHeater_PerformanceElectricEIR: public ::schema::simxml::MepModel::SimFlowPlant_ChillerHeater
      {
        public:
        // SimFlowPlant_RefCoolModeEvaporatorCap
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCoolModeEvaporatorCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCoolModeEvaporatorCap_type > SimFlowPlant_RefCoolModeEvaporatorCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCoolModeEvaporatorCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCoolModeEvaporatorCap_traits;

        const SimFlowPlant_RefCoolModeEvaporatorCap_optional&
        SimFlowPlant_RefCoolModeEvaporatorCap () const;

        SimFlowPlant_RefCoolModeEvaporatorCap_optional&
        SimFlowPlant_RefCoolModeEvaporatorCap ();

        void
        SimFlowPlant_RefCoolModeEvaporatorCap (const SimFlowPlant_RefCoolModeEvaporatorCap_type& x);

        void
        SimFlowPlant_RefCoolModeEvaporatorCap (const SimFlowPlant_RefCoolModeEvaporatorCap_optional& x);

        // SimFlowPlant_RefCoolModeCOP
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCoolModeCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCoolModeCOP_type > SimFlowPlant_RefCoolModeCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCoolModeCOP_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCoolModeCOP_traits;

        const SimFlowPlant_RefCoolModeCOP_optional&
        SimFlowPlant_RefCoolModeCOP () const;

        SimFlowPlant_RefCoolModeCOP_optional&
        SimFlowPlant_RefCoolModeCOP ();

        void
        SimFlowPlant_RefCoolModeCOP (const SimFlowPlant_RefCoolModeCOP_type& x);

        void
        SimFlowPlant_RefCoolModeCOP (const SimFlowPlant_RefCoolModeCOP_optional& x);

        // SimFlowPlant_RefCoolModeLeavingChilledWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_type > SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_traits;

        const SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_optional&
        SimFlowPlant_RefCoolModeLeavingChilledWaterTemp () const;

        SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_optional&
        SimFlowPlant_RefCoolModeLeavingChilledWaterTemp ();

        void
        SimFlowPlant_RefCoolModeLeavingChilledWaterTemp (const SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_type& x);

        void
        SimFlowPlant_RefCoolModeLeavingChilledWaterTemp (const SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_optional& x);

        // SimFlowPlant_RefCoolModeEnteringCondFluidTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCoolModeEnteringCondFluidTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCoolModeEnteringCondFluidTemp_type > SimFlowPlant_RefCoolModeEnteringCondFluidTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCoolModeEnteringCondFluidTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCoolModeEnteringCondFluidTemp_traits;

        const SimFlowPlant_RefCoolModeEnteringCondFluidTemp_optional&
        SimFlowPlant_RefCoolModeEnteringCondFluidTemp () const;

        SimFlowPlant_RefCoolModeEnteringCondFluidTemp_optional&
        SimFlowPlant_RefCoolModeEnteringCondFluidTemp ();

        void
        SimFlowPlant_RefCoolModeEnteringCondFluidTemp (const SimFlowPlant_RefCoolModeEnteringCondFluidTemp_type& x);

        void
        SimFlowPlant_RefCoolModeEnteringCondFluidTemp (const SimFlowPlant_RefCoolModeEnteringCondFluidTemp_optional& x);

        // SimFlowPlant_RefCoolModeLeavingCondWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCoolModeLeavingCondWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCoolModeLeavingCondWaterTemp_type > SimFlowPlant_RefCoolModeLeavingCondWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCoolModeLeavingCondWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCoolModeLeavingCondWaterTemp_traits;

        const SimFlowPlant_RefCoolModeLeavingCondWaterTemp_optional&
        SimFlowPlant_RefCoolModeLeavingCondWaterTemp () const;

        SimFlowPlant_RefCoolModeLeavingCondWaterTemp_optional&
        SimFlowPlant_RefCoolModeLeavingCondWaterTemp ();

        void
        SimFlowPlant_RefCoolModeLeavingCondWaterTemp (const SimFlowPlant_RefCoolModeLeavingCondWaterTemp_type& x);

        void
        SimFlowPlant_RefCoolModeLeavingCondWaterTemp (const SimFlowPlant_RefCoolModeLeavingCondWaterTemp_optional& x);

        // SimFlowPlant_RefHeatModeCoolCapRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefHeatModeCoolCapRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefHeatModeCoolCapRatio_type > SimFlowPlant_RefHeatModeCoolCapRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefHeatModeCoolCapRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefHeatModeCoolCapRatio_traits;

        const SimFlowPlant_RefHeatModeCoolCapRatio_optional&
        SimFlowPlant_RefHeatModeCoolCapRatio () const;

        SimFlowPlant_RefHeatModeCoolCapRatio_optional&
        SimFlowPlant_RefHeatModeCoolCapRatio ();

        void
        SimFlowPlant_RefHeatModeCoolCapRatio (const SimFlowPlant_RefHeatModeCoolCapRatio_type& x);

        void
        SimFlowPlant_RefHeatModeCoolCapRatio (const SimFlowPlant_RefHeatModeCoolCapRatio_optional& x);

        // SimFlowPlant_RefHeatModeCoolPwrInputRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefHeatModeCoolPwrInputRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefHeatModeCoolPwrInputRatio_type > SimFlowPlant_RefHeatModeCoolPwrInputRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefHeatModeCoolPwrInputRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefHeatModeCoolPwrInputRatio_traits;

        const SimFlowPlant_RefHeatModeCoolPwrInputRatio_optional&
        SimFlowPlant_RefHeatModeCoolPwrInputRatio () const;

        SimFlowPlant_RefHeatModeCoolPwrInputRatio_optional&
        SimFlowPlant_RefHeatModeCoolPwrInputRatio ();

        void
        SimFlowPlant_RefHeatModeCoolPwrInputRatio (const SimFlowPlant_RefHeatModeCoolPwrInputRatio_type& x);

        void
        SimFlowPlant_RefHeatModeCoolPwrInputRatio (const SimFlowPlant_RefHeatModeCoolPwrInputRatio_optional& x);

        // SimFlowPlant_RefHeatModeLeavingChilledWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_type > SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_traits;

        const SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_optional&
        SimFlowPlant_RefHeatModeLeavingChilledWaterTemp () const;

        SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_optional&
        SimFlowPlant_RefHeatModeLeavingChilledWaterTemp ();

        void
        SimFlowPlant_RefHeatModeLeavingChilledWaterTemp (const SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_type& x);

        void
        SimFlowPlant_RefHeatModeLeavingChilledWaterTemp (const SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_optional& x);

        // SimFlowPlant_RefHeatModeLeavingCondWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefHeatModeLeavingCondWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefHeatModeLeavingCondWaterTemp_type > SimFlowPlant_RefHeatModeLeavingCondWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefHeatModeLeavingCondWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefHeatModeLeavingCondWaterTemp_traits;

        const SimFlowPlant_RefHeatModeLeavingCondWaterTemp_optional&
        SimFlowPlant_RefHeatModeLeavingCondWaterTemp () const;

        SimFlowPlant_RefHeatModeLeavingCondWaterTemp_optional&
        SimFlowPlant_RefHeatModeLeavingCondWaterTemp ();

        void
        SimFlowPlant_RefHeatModeLeavingCondWaterTemp (const SimFlowPlant_RefHeatModeLeavingCondWaterTemp_type& x);

        void
        SimFlowPlant_RefHeatModeLeavingCondWaterTemp (const SimFlowPlant_RefHeatModeLeavingCondWaterTemp_optional& x);

        // SimFlowPlant_RefHeatModeEnteringCondFluidTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefHeatModeEnteringCondFluidTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefHeatModeEnteringCondFluidTemp_type > SimFlowPlant_RefHeatModeEnteringCondFluidTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefHeatModeEnteringCondFluidTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefHeatModeEnteringCondFluidTemp_traits;

        const SimFlowPlant_RefHeatModeEnteringCondFluidTemp_optional&
        SimFlowPlant_RefHeatModeEnteringCondFluidTemp () const;

        SimFlowPlant_RefHeatModeEnteringCondFluidTemp_optional&
        SimFlowPlant_RefHeatModeEnteringCondFluidTemp ();

        void
        SimFlowPlant_RefHeatModeEnteringCondFluidTemp (const SimFlowPlant_RefHeatModeEnteringCondFluidTemp_type& x);

        void
        SimFlowPlant_RefHeatModeEnteringCondFluidTemp (const SimFlowPlant_RefHeatModeEnteringCondFluidTemp_optional& x);

        // SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit
        //
        typedef ::xml_schema::double_ SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_type > SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_traits;

        const SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_optional&
        SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit () const;

        SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_optional&
        SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit ();

        void
        SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit (const SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_type& x);

        void
        SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit (const SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_optional& x);

        // SimFlowPlant_ChilledWaterFlowModeType
        //
        typedef ::xml_schema::string SimFlowPlant_ChilledWaterFlowModeType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ChilledWaterFlowModeType_type > SimFlowPlant_ChilledWaterFlowModeType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ChilledWaterFlowModeType_type, char > SimFlowPlant_ChilledWaterFlowModeType_traits;

        const SimFlowPlant_ChilledWaterFlowModeType_optional&
        SimFlowPlant_ChilledWaterFlowModeType () const;

        SimFlowPlant_ChilledWaterFlowModeType_optional&
        SimFlowPlant_ChilledWaterFlowModeType ();

        void
        SimFlowPlant_ChilledWaterFlowModeType (const SimFlowPlant_ChilledWaterFlowModeType_type& x);

        void
        SimFlowPlant_ChilledWaterFlowModeType (const SimFlowPlant_ChilledWaterFlowModeType_optional& x);

        void
        SimFlowPlant_ChilledWaterFlowModeType (::std::auto_ptr< SimFlowPlant_ChilledWaterFlowModeType_type > p);

        // SimFlowPlant_CmprssrMotorEffic
        //
        typedef ::xml_schema::double_ SimFlowPlant_CmprssrMotorEffic_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CmprssrMotorEffic_type > SimFlowPlant_CmprssrMotorEffic_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CmprssrMotorEffic_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_CmprssrMotorEffic_traits;

        const SimFlowPlant_CmprssrMotorEffic_optional&
        SimFlowPlant_CmprssrMotorEffic () const;

        SimFlowPlant_CmprssrMotorEffic_optional&
        SimFlowPlant_CmprssrMotorEffic ();

        void
        SimFlowPlant_CmprssrMotorEffic (const SimFlowPlant_CmprssrMotorEffic_type& x);

        void
        SimFlowPlant_CmprssrMotorEffic (const SimFlowPlant_CmprssrMotorEffic_optional& x);

        // SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar
        //
        typedef ::xml_schema::string SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_type > SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_type, char > SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_traits;

        const SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_optional&
        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar () const;

        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_optional&
        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar ();

        void
        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar (const SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_type& x);

        void
        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar (const SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_optional& x);

        void
        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar (::std::auto_ptr< SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_type > p);

        // SimFlowPlant_CoolModeCoolCapFuncofTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_type > SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_type, char > SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_traits;

        const SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_optional&
        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName () const;

        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_optional&
        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName ();

        void
        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName (const SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_type& x);

        void
        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName (const SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_optional& x);

        void
        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName (::std::auto_ptr< SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_type > p);

        // SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_type > SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_type, char > SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_traits;

        const SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional&
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName () const;

        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional&
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName ();

        void
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName (const SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_type& x);

        void
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName (const SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional& x);

        void
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName (::std::auto_ptr< SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_type > p);

        // SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type > SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type, char > SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_traits;

        const SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional&
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName () const;

        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional&
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName ();

        void
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName (const SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName (const SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type > p);

        // SimFlowPlant_CoolModeCoolCapOptPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_type > SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_traits;

        const SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_optional&
        SimFlowPlant_CoolModeCoolCapOptPartLoadRatio () const;

        SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_optional&
        SimFlowPlant_CoolModeCoolCapOptPartLoadRatio ();

        void
        SimFlowPlant_CoolModeCoolCapOptPartLoadRatio (const SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_type& x);

        void
        SimFlowPlant_CoolModeCoolCapOptPartLoadRatio (const SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_optional& x);

        // SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar
        //
        typedef ::xml_schema::string SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_type > SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_type, char > SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_traits;

        const SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_optional&
        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar () const;

        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_optional&
        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar ();

        void
        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar (const SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_type& x);

        void
        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar (const SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_optional& x);

        void
        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar (::std::auto_ptr< SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_type > p);

        // SimFlowPlant_HeatModeCoolCapFuncofTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_type > SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_type, char > SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_traits;

        const SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_optional&
        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName () const;

        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_optional&
        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName ();

        void
        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName (const SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_type& x);

        void
        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName (const SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_optional& x);

        void
        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName (::std::auto_ptr< SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_type > p);

        // SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_type > SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_type, char > SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_traits;

        const SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional&
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName () const;

        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional&
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName ();

        void
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName (const SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_type& x);

        void
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName (const SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional& x);

        void
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName (::std::auto_ptr< SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_type > p);

        // SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type > SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type, char > SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_traits;

        const SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional&
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName () const;

        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional&
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName ();

        void
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName (const SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName (const SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_type > p);

        // SimFlowPlant_HeatModeCoolCapOptPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_type > SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_traits;

        const SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_optional&
        SimFlowPlant_HeatModeCoolCapOptPartLoadRatio () const;

        SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_optional&
        SimFlowPlant_HeatModeCoolCapOptPartLoadRatio ();

        void
        SimFlowPlant_HeatModeCoolCapOptPartLoadRatio (const SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_type& x);

        void
        SimFlowPlant_HeatModeCoolCapOptPartLoadRatio (const SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_optional& x);

        // Constructors.
        //
        SimFlowPlant_ChillerHeater_PerformanceElectricEIR ();

        SimFlowPlant_ChillerHeater_PerformanceElectricEIR (const RefId_type&);

        SimFlowPlant_ChillerHeater_PerformanceElectricEIR (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

        SimFlowPlant_ChillerHeater_PerformanceElectricEIR (const SimFlowPlant_ChillerHeater_PerformanceElectricEIR& x,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ChillerHeater_PerformanceElectricEIR*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ChillerHeater_PerformanceElectricEIR&
        operator= (const SimFlowPlant_ChillerHeater_PerformanceElectricEIR& x);

        virtual 
        ~SimFlowPlant_ChillerHeater_PerformanceElectricEIR ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_RefCoolModeEvaporatorCap_optional SimFlowPlant_RefCoolModeEvaporatorCap_;
        SimFlowPlant_RefCoolModeCOP_optional SimFlowPlant_RefCoolModeCOP_;
        SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_optional SimFlowPlant_RefCoolModeLeavingChilledWaterTemp_;
        SimFlowPlant_RefCoolModeEnteringCondFluidTemp_optional SimFlowPlant_RefCoolModeEnteringCondFluidTemp_;
        SimFlowPlant_RefCoolModeLeavingCondWaterTemp_optional SimFlowPlant_RefCoolModeLeavingCondWaterTemp_;
        SimFlowPlant_RefHeatModeCoolCapRatio_optional SimFlowPlant_RefHeatModeCoolCapRatio_;
        SimFlowPlant_RefHeatModeCoolPwrInputRatio_optional SimFlowPlant_RefHeatModeCoolPwrInputRatio_;
        SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_optional SimFlowPlant_RefHeatModeLeavingChilledWaterTemp_;
        SimFlowPlant_RefHeatModeLeavingCondWaterTemp_optional SimFlowPlant_RefHeatModeLeavingCondWaterTemp_;
        SimFlowPlant_RefHeatModeEnteringCondFluidTemp_optional SimFlowPlant_RefHeatModeEnteringCondFluidTemp_;
        SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_optional SimFlowPlant_HeatModeEnteringChilledWaterTempLowLimit_;
        SimFlowPlant_ChilledWaterFlowModeType_optional SimFlowPlant_ChilledWaterFlowModeType_;
        SimFlowPlant_CmprssrMotorEffic_optional SimFlowPlant_CmprssrMotorEffic_;
        SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_optional SimFlowPlant_CoolModeTempCurveCondWaterIndependentVar_;
        SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_optional SimFlowPlant_CoolModeCoolCapFuncofTempCurveName_;
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofTempCurveName_;
        SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional SimFlowPlant_CoolModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_;
        SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_optional SimFlowPlant_CoolModeCoolCapOptPartLoadRatio_;
        SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_optional SimFlowPlant_HeatModeTempCurveCondWaterIndependentVar_;
        SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_optional SimFlowPlant_HeatModeCoolCapFuncofTempCurveName_;
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_optional SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofTempCurveName_;
        SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_optional SimFlowPlant_HeatModeElecInputtoCoolOutputRatioFuncofPartLoadRatioCurveName_;
        SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_optional SimFlowPlant_HeatModeCoolCapOptPartLoadRatio_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_CHILLER_HEATER_PERFORMANCE_ELECTRIC_EIR_HXX
