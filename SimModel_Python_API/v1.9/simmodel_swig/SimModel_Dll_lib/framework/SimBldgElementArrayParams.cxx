// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBldgElementArrayParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimBldgElementArrayParams
      // 

      const SimBldgElementArrayParams::ArrayAzimuth_optional& SimBldgElementArrayParams::
      ArrayAzimuth () const
      {
        return this->ArrayAzimuth_;
      }

      SimBldgElementArrayParams::ArrayAzimuth_optional& SimBldgElementArrayParams::
      ArrayAzimuth ()
      {
        return this->ArrayAzimuth_;
      }

      void SimBldgElementArrayParams::
      ArrayAzimuth (const ArrayAzimuth_type& x)
      {
        this->ArrayAzimuth_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayAzimuth (const ArrayAzimuth_optional& x)
      {
        this->ArrayAzimuth_ = x;
      }

      const SimBldgElementArrayParams::ArrayElementTiltFromHorizontal_optional& SimBldgElementArrayParams::
      ArrayElementTiltFromHorizontal () const
      {
        return this->ArrayElementTiltFromHorizontal_;
      }

      SimBldgElementArrayParams::ArrayElementTiltFromHorizontal_optional& SimBldgElementArrayParams::
      ArrayElementTiltFromHorizontal ()
      {
        return this->ArrayElementTiltFromHorizontal_;
      }

      void SimBldgElementArrayParams::
      ArrayElementTiltFromHorizontal (const ArrayElementTiltFromHorizontal_type& x)
      {
        this->ArrayElementTiltFromHorizontal_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayElementTiltFromHorizontal (const ArrayElementTiltFromHorizontal_optional& x)
      {
        this->ArrayElementTiltFromHorizontal_ = x;
      }

      const SimBldgElementArrayParams::ArrayCountY_optional& SimBldgElementArrayParams::
      ArrayCountY () const
      {
        return this->ArrayCountY_;
      }

      SimBldgElementArrayParams::ArrayCountY_optional& SimBldgElementArrayParams::
      ArrayCountY ()
      {
        return this->ArrayCountY_;
      }

      void SimBldgElementArrayParams::
      ArrayCountY (const ArrayCountY_type& x)
      {
        this->ArrayCountY_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayCountY (const ArrayCountY_optional& x)
      {
        this->ArrayCountY_ = x;
      }

      const SimBldgElementArrayParams::ArrayMinSpacingY_optional& SimBldgElementArrayParams::
      ArrayMinSpacingY () const
      {
        return this->ArrayMinSpacingY_;
      }

      SimBldgElementArrayParams::ArrayMinSpacingY_optional& SimBldgElementArrayParams::
      ArrayMinSpacingY ()
      {
        return this->ArrayMinSpacingY_;
      }

      void SimBldgElementArrayParams::
      ArrayMinSpacingY (const ArrayMinSpacingY_type& x)
      {
        this->ArrayMinSpacingY_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayMinSpacingY (const ArrayMinSpacingY_optional& x)
      {
        this->ArrayMinSpacingY_ = x;
      }

      const SimBldgElementArrayParams::ArrayActualSpacingY_optional& SimBldgElementArrayParams::
      ArrayActualSpacingY () const
      {
        return this->ArrayActualSpacingY_;
      }

      SimBldgElementArrayParams::ArrayActualSpacingY_optional& SimBldgElementArrayParams::
      ArrayActualSpacingY ()
      {
        return this->ArrayActualSpacingY_;
      }

      void SimBldgElementArrayParams::
      ArrayActualSpacingY (const ArrayActualSpacingY_type& x)
      {
        this->ArrayActualSpacingY_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayActualSpacingY (const ArrayActualSpacingY_optional& x)
      {
        this->ArrayActualSpacingY_ = x;
      }

      const SimBldgElementArrayParams::ArrayCountZ_optional& SimBldgElementArrayParams::
      ArrayCountZ () const
      {
        return this->ArrayCountZ_;
      }

      SimBldgElementArrayParams::ArrayCountZ_optional& SimBldgElementArrayParams::
      ArrayCountZ ()
      {
        return this->ArrayCountZ_;
      }

      void SimBldgElementArrayParams::
      ArrayCountZ (const ArrayCountZ_type& x)
      {
        this->ArrayCountZ_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayCountZ (const ArrayCountZ_optional& x)
      {
        this->ArrayCountZ_ = x;
      }

      const SimBldgElementArrayParams::ArrayMinSpacingZ_optional& SimBldgElementArrayParams::
      ArrayMinSpacingZ () const
      {
        return this->ArrayMinSpacingZ_;
      }

      SimBldgElementArrayParams::ArrayMinSpacingZ_optional& SimBldgElementArrayParams::
      ArrayMinSpacingZ ()
      {
        return this->ArrayMinSpacingZ_;
      }

      void SimBldgElementArrayParams::
      ArrayMinSpacingZ (const ArrayMinSpacingZ_type& x)
      {
        this->ArrayMinSpacingZ_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayMinSpacingZ (const ArrayMinSpacingZ_optional& x)
      {
        this->ArrayMinSpacingZ_ = x;
      }

      const SimBldgElementArrayParams::ArrayActualSpacingZ_optional& SimBldgElementArrayParams::
      ArrayActualSpacingZ () const
      {
        return this->ArrayActualSpacingZ_;
      }

      SimBldgElementArrayParams::ArrayActualSpacingZ_optional& SimBldgElementArrayParams::
      ArrayActualSpacingZ ()
      {
        return this->ArrayActualSpacingZ_;
      }

      void SimBldgElementArrayParams::
      ArrayActualSpacingZ (const ArrayActualSpacingZ_type& x)
      {
        this->ArrayActualSpacingZ_.set (x);
      }

      void SimBldgElementArrayParams::
      ArrayActualSpacingZ (const ArrayActualSpacingZ_optional& x)
      {
        this->ArrayActualSpacingZ_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimBldgElementArrayParams
      //

      SimBldgElementArrayParams::
      SimBldgElementArrayParams ()
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (),
        ArrayAzimuth_ (this),
        ArrayElementTiltFromHorizontal_ (this),
        ArrayCountY_ (this),
        ArrayMinSpacingY_ (this),
        ArrayActualSpacingY_ (this),
        ArrayCountZ_ (this),
        ArrayMinSpacingZ_ (this),
        ArrayActualSpacingZ_ (this)
      {
      }

      SimBldgElementArrayParams::
      SimBldgElementArrayParams (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (RefId),
        ArrayAzimuth_ (this),
        ArrayElementTiltFromHorizontal_ (this),
        ArrayCountY_ (this),
        ArrayMinSpacingY_ (this),
        ArrayActualSpacingY_ (this),
        ArrayCountZ_ (this),
        ArrayMinSpacingZ_ (this),
        ArrayActualSpacingZ_ (this)
      {
      }

      SimBldgElementArrayParams::
      SimBldgElementArrayParams (const SimBldgElementArrayParams& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (x, f, c),
        ArrayAzimuth_ (x.ArrayAzimuth_, f, this),
        ArrayElementTiltFromHorizontal_ (x.ArrayElementTiltFromHorizontal_, f, this),
        ArrayCountY_ (x.ArrayCountY_, f, this),
        ArrayMinSpacingY_ (x.ArrayMinSpacingY_, f, this),
        ArrayActualSpacingY_ (x.ArrayActualSpacingY_, f, this),
        ArrayCountZ_ (x.ArrayCountZ_, f, this),
        ArrayMinSpacingZ_ (x.ArrayMinSpacingZ_, f, this),
        ArrayActualSpacingZ_ (x.ArrayActualSpacingZ_, f, this)
      {
      }

      SimBldgElementArrayParams::
      SimBldgElementArrayParams (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimArrayParams (e, f | ::xml_schema::flags::base, c),
        ArrayAzimuth_ (this),
        ArrayElementTiltFromHorizontal_ (this),
        ArrayCountY_ (this),
        ArrayMinSpacingY_ (this),
        ArrayActualSpacingY_ (this),
        ArrayCountZ_ (this),
        ArrayMinSpacingZ_ (this),
        ArrayActualSpacingZ_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBldgElementArrayParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimArrayParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ArrayAzimuth
          //
          if (n.name () == "ArrayAzimuth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayAzimuth_)
            {
              this->ArrayAzimuth_.set (ArrayAzimuth_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayElementTiltFromHorizontal
          //
          if (n.name () == "ArrayElementTiltFromHorizontal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayElementTiltFromHorizontal_)
            {
              this->ArrayElementTiltFromHorizontal_.set (ArrayElementTiltFromHorizontal_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayCountY
          //
          if (n.name () == "ArrayCountY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayCountY_)
            {
              this->ArrayCountY_.set (ArrayCountY_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayMinSpacingY
          //
          if (n.name () == "ArrayMinSpacingY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayMinSpacingY_)
            {
              this->ArrayMinSpacingY_.set (ArrayMinSpacingY_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayActualSpacingY
          //
          if (n.name () == "ArrayActualSpacingY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayActualSpacingY_)
            {
              this->ArrayActualSpacingY_.set (ArrayActualSpacingY_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayCountZ
          //
          if (n.name () == "ArrayCountZ" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayCountZ_)
            {
              this->ArrayCountZ_.set (ArrayCountZ_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayMinSpacingZ
          //
          if (n.name () == "ArrayMinSpacingZ" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayMinSpacingZ_)
            {
              this->ArrayMinSpacingZ_.set (ArrayMinSpacingZ_traits::create (i, f, this));
              continue;
            }
          }

          // ArrayActualSpacingZ
          //
          if (n.name () == "ArrayActualSpacingZ" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->ArrayActualSpacingZ_)
            {
              this->ArrayActualSpacingZ_.set (ArrayActualSpacingZ_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimBldgElementArrayParams* SimBldgElementArrayParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBldgElementArrayParams (*this, f, c);
      }

      SimBldgElementArrayParams& SimBldgElementArrayParams::
      operator= (const SimBldgElementArrayParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimArrayParams& > (*this) = x;
          this->ArrayAzimuth_ = x.ArrayAzimuth_;
          this->ArrayElementTiltFromHorizontal_ = x.ArrayElementTiltFromHorizontal_;
          this->ArrayCountY_ = x.ArrayCountY_;
          this->ArrayMinSpacingY_ = x.ArrayMinSpacingY_;
          this->ArrayActualSpacingY_ = x.ArrayActualSpacingY_;
          this->ArrayCountZ_ = x.ArrayCountZ_;
          this->ArrayMinSpacingZ_ = x.ArrayMinSpacingZ_;
          this->ArrayActualSpacingZ_ = x.ArrayActualSpacingZ_;
        }

        return *this;
      }

      SimBldgElementArrayParams::
      ~SimBldgElementArrayParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

